
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000048de  00004972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  0080019a  0080019a  00004a0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce8  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000206dd  00000000  00000000  00005764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049a8  00000000  00000000  00025e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071a2  00000000  00000000  0002a7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fc0  00000000  00000000  0003198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005d5d  00000000  00000000  0003494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000114a2  00000000  00000000  0003a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  0004bb4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__dtors_end>
       4:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
       8:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
       c:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__vector_3>
      10:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__vector_3>
      14:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__vector_3>
      18:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      1c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      20:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      24:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      28:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      2c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      30:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      34:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      38:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      3c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      40:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__vector_16>
      44:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      48:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_18>
      4c:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__vector_19>
      50:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      54:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      58:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      5c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>
      60:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__vector_24>
      64:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelperE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_E3__c>:
      aa:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000b2 <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c_2>:
      b2:	47 4f 54 00                                         GOT.

000000b6 <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c_1>:
      b6:	2b 48 54 54 50 52 45 41 44 3a 20 00                 +HTTPREAD: .

000000c2 <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c_0>:
      c2:	4e 4f 57 20 50 41 52 53 49 4e 47 2e 2e 2e 00        NOW PARSING....

000000d1 <_ZZN13Adafruit_FONA12HTTP_readallEjPjE3__c>:
      d1:	41 54 2b 48 54 54 50 52 45 41 44 3d 30 2c 00        AT+HTTPREAD=0,.

000000e0 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      e0:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000ed <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      ed:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000fa <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
      fa:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000109 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     109:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

00000112 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     112:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000011f <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     11f:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000012c <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     12c:	09 2d 2d 2d 3e 20 00                                .---> .

00000133 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     133:	22 2c 00                                            ",.

00000136 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     136:	22 2c 22 00                                         ",".

0000013a <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     13a:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000148 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     148:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000156 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     156:	09 2d 2d 2d 3e 20 00                                .---> .

0000015d <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     15d:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000169 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     169:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000175 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_5>:
     175:	57 52 49 54 49 4e 47 20 00                          WRITING .

0000017e <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_4>:
     17e:	2c 20 66 69 6e 61 6c 20 6c 65 6e 67 74 68 20 77     , final length w
     18e:	65 27 6c 6c 20 72 65 61 64 3a 20 20 00              e'll read:  .

0000019b <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_3>:
     19b:	2c 20 77 69 74 68 20 6d 61 78 20 6c 65 6e 67 74     , with max lengt
     1ab:	68 20 6f 66 20 00                                   h of .

000001b1 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_2>:
     1b1:	52 65 63 65 69 76 65 64 20 72 65 73 70 6f 6e 73     Received respons
     1c1:	65 20 6f 66 20 6c 65 6e 67 74 68 20 00              e of length .

000001ce <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_1>:
     1ce:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     1de:	61 74 61 2c 20 73 74 61 74 75 73 20 63 6f 64 65     ata, status code
     1ee:	3a 20 00                                            : .

000001f1 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c_0>:
     1f1:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000001fc <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_E3__c>:
     1fc:	68 74 74 70 3a 2f 2f 72 6d 6f 6e 2e 6b 68 75 64     http://rmon.khud
     20c:	64 61 6d 2e 6f 72 67 2e 75 6b 2f 3f 61 3d 76 69     dam.org.uk/?a=vi
     21c:	65 77 00                                            ew.

0000021f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     21f:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000022a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     22a:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000237 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     237:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000242 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     242:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000024a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     24a:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000253 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     253:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000260 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     260:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     270:	44 22 2c 00                                         D",.

00000274 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     274:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     284:	45 52 22 2c 00                                      ER",.

00000289 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     289:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000293 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     293:	09 2d 2d 2d 3e 20 00                                .---> .

0000029a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     29a:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000002a4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     2a4:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     2b4:	4e 22 2c 00                                         N",.

000002b8 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     2b8:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     2c8:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000002d6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     2d6:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000002e1 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     2e1:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000002ec <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     2ec:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000002f4 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     2f4:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000002fd <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     2fd:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000305 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     305:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000030e <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     30e:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000316 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     316:	41 54 2b 43 53 51 00                                AT+CSQ.

0000031d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     31d:	2b 43 53 51 3a 20 00                                +CSQ: .

00000324 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     324:	41 54 2b 43 53 51 00                                AT+CSQ.

0000032b <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     32b:	2b 43 53 51 3a 20 00                                +CSQ: .

00000332 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     332:	41 54 2b 43 42 43 00                                AT+CBC.

00000339 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     339:	2b 43 42 43 3a 20 00                                +CBC: .

00000340 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     340:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000034b <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     34b:	09 3c 2d 2d 2d 20 00                                .<--- .

00000352 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     352:	09 2d 2d 2d 3e 20 00                                .---> .

00000359 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     359:	41 54 45 30 00                                      ATE0.

0000035e <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     35e:	41 54 45 30 00                                      ATE0.

00000363 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     363:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     373:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

00000382 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     382:	41 54 00                                            AT.

00000385 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     385:	41 54 00                                            AT.

00000388 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     388:	41 54 00                                            AT.

0000038b <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     38b:	41 54 00                                            AT.

0000038e <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     38e:	41 54 00                                            AT.

00000391 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     391:	41 54 00                                            AT.

00000394 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     394:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     3a4:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000003b5 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     3b5:	4f 4b 00                                            OK.

000003b8 <_ZZN13Adafruit_FONAC4EabE3__c>:
     3b8:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000003c0 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     3c0:	45 72 72 6f 72 3d 00                                Error=.

000003c7 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     3c7:	20 7c 20 00                                          | .

000003cb <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     3cb:	54 65 6d 70 3d 00                                   Temp=.

000003d1 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     3d1:	20 7c 20 00                                          | .

000003d5 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     3d5:	43 75 72 72 65 6e 74 3d 00                          Current=.

000003de <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     3de:	20 7c 20 00                                          | .

000003e2 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     3e2:	50 56 2d 56 3d 00                                   PV-V=.

000003e8 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     3e8:	20 7c 20 00                                          | .

000003ec <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     3ec:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000003f4 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     3f4:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000401 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     401:	20 7c 20 00                                          | .

00000405 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     405:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000040e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     40e:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000418 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     418:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     428:	6f 64 65 3d 00                                      ode=.

0000042d <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     42d:	20 7c 20 00                                          | .

00000431 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     431:	42 45 52 3d 00                                      BER=.

00000436 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     436:	20 7c 20 00                                          | .

0000043a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     43a:	52 53 53 49 3d 00                                   RSSI=.

00000440 <_ZL12b64_alphabet>:
     440:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     450:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     460:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     470:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000481 <_ZZ4loopE3__c>:
     481:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000048b <_ZZ8sendDatavE3__c_3>:
     48b:	52 65 73 70 6f 6e 73 65 20 66 72 6f 6d 20 73 65     Response from se
     49b:	6e 64 3a 00                                         nd:.

0000049f <_ZZ8sendDatavE3__c_2>:
     49f:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     4af:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     4bf:	6f 72 20 73 65 6e 64 3a 00                          or send:.

000004c8 <_ZZ8sendDatavE3__c_1>:
     4c8:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     4d8:	52 29 00                                            R).

000004db <_ZZ8sendDatavE3__c_0>:
     4db:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     4eb:	69 6e 67 2e 2e 2e 29 00                             ing...).

000004f3 <_ZZ8sendDatavE3__c>:
     4f3:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     503:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

00000512 <_ZZ17createEncodedDataPcPhhP14DailyCycleDataE3__c>:
     512:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     522:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     532:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

00000542 <_ZZ12takeReadingsvE3__c>:
     542:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     552:	2e 2e 00                                            ...

00000555 <_ZZ21ensureFonaInitialisedbE3__c_9>:
     555:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     565:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     575:	64 6f 6e 65 29 00                                   done).

0000057b <_ZZ21ensureFonaInitialisedbE3__c_8>:
     57b:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     58b:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     59b:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     5ab:	75 65 20 6e 6f 77 29 00                             ue now).

000005b3 <_ZZ21ensureFonaInitialisedbE3__c_7>:
     5b3:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     5c3:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     5d3:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

000005e2 <_ZZ21ensureFonaInitialisedbE3__c_6>:
     5e2:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     5f2:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

000005fd <_ZZ21ensureFonaInitialisedbE3__c_5>:
     5fd:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     60d:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

0000061d <_ZZ21ensureFonaInitialisedbE3__c_4>:
     61d:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     62d:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     63d:	65 64 00                                            ed.

00000640 <_ZZ21ensureFonaInitialisedbE3__c_3>:
     640:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     650:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     660:	6f 72 74 6c 79 00                                   ortly.

00000666 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     666:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     676:	6e 67 20 47 50 52 53 00                             ng GPRS.

0000067e <_ZZ21ensureFonaInitialisedbE3__c_1>:
     67e:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     68e:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

0000069b <_ZZ21ensureFonaInitialisedbE3__c_0>:
     69b:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     6ab:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000006b6 <_ZZ21ensureFonaInitialisedbE3__c>:
     6b6:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     6c6:	61 2e 2e 2e 00                                      a....

000006cb <_ZZ5setupE3__c>:
     6cb:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000006d7 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     6d7:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     6e7:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     6f7:	73 73 69 6f 6e 3a 00                                ssion:.

000006fe <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     6fe:	2a 2a 2a 2a 00                                      ****.

00000703 <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     703:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     713:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     723:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     733:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

0000073e <digital_pin_to_timer_PGM>:
     73e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     74e:	00 00 00 00                                         ....

00000752 <digital_pin_to_bit_mask_PGM>:
     752:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     762:	04 08 10 20                                         ... 

00000766 <digital_pin_to_port_PGM>:
     766:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     776:	03 03 03 03                                         ....

0000077a <port_to_input_PGM>:
     77a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000784 <port_to_output_PGM>:
     784:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000078e <port_to_mode_PGM>:
     78e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000798 <__ctors_start>:
     798:	94 13       	cpse	r25, r20
     79a:	3e 18       	sub	r3, r14
     79c:	2e 1a       	sub	r2, r30

0000079e <__ctors_end>:
     79e:	af 13       	cpse	r26, r31

000007a0 <__dtors_end>:
     7a0:	11 24       	eor	r1, r1
     7a2:	1f be       	out	0x3f, r1	; 63
     7a4:	cf ef       	ldi	r28, 0xFF	; 255
     7a6:	d8 e0       	ldi	r29, 0x08	; 8
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	cd bf       	out	0x3d, r28	; 61

000007ac <__do_copy_data>:
     7ac:	11 e0       	ldi	r17, 0x01	; 1
     7ae:	a0 e0       	ldi	r26, 0x00	; 0
     7b0:	b1 e0       	ldi	r27, 0x01	; 1
     7b2:	ee ed       	ldi	r30, 0xDE	; 222
     7b4:	f8 e4       	ldi	r31, 0x48	; 72
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <__do_copy_data+0x10>
     7b8:	05 90       	lpm	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	aa 39       	cpi	r26, 0x9A	; 154
     7be:	b1 07       	cpc	r27, r17
     7c0:	d9 f7       	brne	.-10     	; 0x7b8 <__do_copy_data+0xc>

000007c2 <__do_clear_bss>:
     7c2:	24 e0       	ldi	r18, 0x04	; 4
     7c4:	aa e9       	ldi	r26, 0x9A	; 154
     7c6:	b1 e0       	ldi	r27, 0x01	; 1
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <.do_clear_bss_start>

000007ca <.do_clear_bss_loop>:
     7ca:	1d 92       	st	X+, r1

000007cc <.do_clear_bss_start>:
     7cc:	ac 38       	cpi	r26, 0x8C	; 140
     7ce:	b2 07       	cpc	r27, r18
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <.do_clear_bss_loop>

000007d2 <__do_global_ctors>:
     7d2:	13 e0       	ldi	r17, 0x03	; 3
     7d4:	cf ec       	ldi	r28, 0xCF	; 207
     7d6:	d3 e0       	ldi	r29, 0x03	; 3
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <__do_global_ctors+0x10>
     7da:	21 97       	sbiw	r28, 0x01	; 1
     7dc:	fe 01       	movw	r30, r28
     7de:	0e 94 9c 21 	call	0x4338	; 0x4338 <__tablejump2__>
     7e2:	cc 3c       	cpi	r28, 0xCC	; 204
     7e4:	d1 07       	cpc	r29, r17
     7e6:	c9 f7       	brne	.-14     	; 0x7da <__do_global_ctors+0x8>
     7e8:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <main>
     7ec:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__do_global_dtors>

000007f0 <__bad_interrupt>:
     7f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007f4 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     7f4:	83 5e       	subi	r24, 0xE3	; 227
     7f6:	9e 4f       	sbci	r25, 0xFE	; 254
     7f8:	dc 01       	movw	r26, r24
     7fa:	8d 91       	ld	r24, X+
     7fc:	9c 91       	ld	r25, X
     7fe:	dc 01       	movw	r26, r24
     800:	ed 91       	ld	r30, X+
     802:	fc 91       	ld	r31, X
     804:	04 80       	ldd	r0, Z+4	; 0x04
     806:	f5 81       	ldd	r31, Z+5	; 0x05
     808:	e0 2d       	mov	r30, r0
     80a:	09 94       	ijmp

0000080c <_ZN13Adafruit_FONA5writeEh>:
     80c:	83 5e       	subi	r24, 0xE3	; 227
     80e:	9e 4f       	sbci	r25, 0xFE	; 254
     810:	dc 01       	movw	r26, r24
     812:	8d 91       	ld	r24, X+
     814:	9c 91       	ld	r25, X
     816:	dc 01       	movw	r26, r24
     818:	ed 91       	ld	r30, X+
     81a:	fc 91       	ld	r31, X
     81c:	01 90       	ld	r0, Z+
     81e:	f0 81       	ld	r31, Z
     820:	e0 2d       	mov	r30, r0
     822:	09 94       	ijmp

00000824 <_ZN13Adafruit_FONA4readEv>:
     824:	83 5e       	subi	r24, 0xE3	; 227
     826:	9e 4f       	sbci	r25, 0xFE	; 254
     828:	dc 01       	movw	r26, r24
     82a:	8d 91       	ld	r24, X+
     82c:	9c 91       	ld	r25, X
     82e:	dc 01       	movw	r26, r24
     830:	ed 91       	ld	r30, X+
     832:	fc 91       	ld	r31, X
     834:	06 80       	ldd	r0, Z+6	; 0x06
     836:	f7 81       	ldd	r31, Z+7	; 0x07
     838:	e0 2d       	mov	r30, r0
     83a:	09 94       	ijmp

0000083c <_ZN13Adafruit_FONA4peekEv>:
     83c:	83 5e       	subi	r24, 0xE3	; 227
     83e:	9e 4f       	sbci	r25, 0xFE	; 254
     840:	dc 01       	movw	r26, r24
     842:	8d 91       	ld	r24, X+
     844:	9c 91       	ld	r25, X
     846:	dc 01       	movw	r26, r24
     848:	ed 91       	ld	r30, X+
     84a:	fc 91       	ld	r31, X
     84c:	00 84       	ldd	r0, Z+8	; 0x08
     84e:	f1 85       	ldd	r31, Z+9	; 0x09
     850:	e0 2d       	mov	r30, r0
     852:	09 94       	ijmp

00000854 <_ZN13Adafruit_FONA5flushEv>:
     854:	83 5e       	subi	r24, 0xE3	; 227
     856:	9e 4f       	sbci	r25, 0xFE	; 254
     858:	dc 01       	movw	r26, r24
     85a:	8d 91       	ld	r24, X+
     85c:	9c 91       	ld	r25, X
     85e:	dc 01       	movw	r26, r24
     860:	ed 91       	ld	r30, X+
     862:	fc 91       	ld	r31, X
     864:	02 84       	ldd	r0, Z+10	; 0x0a
     866:	f3 85       	ldd	r31, Z+11	; 0x0b
     868:	e0 2d       	mov	r30, r0
     86a:	09 94       	ijmp

0000086c <_ZN13Adafruit_FONAC1Eab>:
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
     876:	06 2f       	mov	r16, r22
     878:	14 2f       	mov	r17, r20
     87a:	1b 82       	std	Y+3, r1	; 0x03
     87c:	1a 82       	std	Y+2, r1	; 0x02
     87e:	88 ee       	ldi	r24, 0xE8	; 232
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	8c 83       	std	Y+4, r24	; 0x04
     888:	9d 83       	std	Y+5, r25	; 0x05
     88a:	ae 83       	std	Y+6, r26	; 0x06
     88c:	bf 83       	std	Y+7, r27	; 0x07
     88e:	8f e2       	ldi	r24, 0x2F	; 47
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	99 83       	std	Y+1, r25	; 0x01
     894:	88 83       	st	Y, r24
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	8e 87       	std	Y+14, r24	; 0x0e
     89a:	6c e7       	ldi	r22, 0x7C	; 124
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	ce 01       	movw	r24, r28
     8a0:	8b 5e       	subi	r24, 0xEB	; 235
     8a2:	9e 4f       	sbci	r25, 0xFE	; 254
     8a4:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <_ZN6StringC1EPKc>
     8a8:	0c 87       	std	Y+12, r16	; 0x0c
     8aa:	1d 87       	std	Y+13, r17	; 0x0d
     8ac:	fe 01       	movw	r30, r28
     8ae:	e2 5f       	subi	r30, 0xF2	; 242
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	88 eb       	ldi	r24, 0xB8	; 184
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	91 83       	std	Z+1, r25	; 0x01
     8b8:	80 83       	st	Z, r24
     8ba:	32 96       	adiw	r30, 0x02	; 2
     8bc:	11 82       	std	Z+1, r1	; 0x01
     8be:	10 82       	st	Z, r1
     8c0:	32 96       	adiw	r30, 0x02	; 2
     8c2:	11 82       	std	Z+1, r1	; 0x01
     8c4:	10 82       	st	Z, r1
     8c6:	3b 96       	adiw	r30, 0x0b	; 11
     8c8:	11 82       	std	Z+1, r1	; 0x01
     8ca:	10 82       	st	Z, r1
     8cc:	39 97       	sbiw	r30, 0x09	; 9
     8ce:	10 82       	st	Z, r1
     8d0:	c5 5e       	subi	r28, 0xE5	; 229
     8d2:	de 4f       	sbci	r29, 0xFE	; 254
     8d4:	85 eb       	ldi	r24, 0xB5	; 181
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	99 83       	std	Y+1, r25	; 0x01
     8da:	88 83       	st	Y, r24
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     8e6:	8b 5e       	subi	r24, 0xEB	; 235
     8e8:	9e 4f       	sbci	r25, 0xFE	; 254
     8ea:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <_ZN6StringaSERKS_>

000008ee <_ZN13Adafruit_FONA10flushInputEv>:
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	8c 01       	movw	r16, r24
     8fe:	0f 5f       	subi	r16, 0xFF	; 255
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	88 97       	sbiw	r24, 0x28	; 40
     904:	d8 f4       	brcc	.+54     	; 0x93c <__stack+0x3d>
     906:	e8 81       	ld	r30, Y
     908:	f9 81       	ldd	r31, Y+1	; 0x01
     90a:	04 80       	ldd	r0, Z+4	; 0x04
     90c:	f5 81       	ldd	r31, Z+5	; 0x05
     90e:	e0 2d       	mov	r30, r0
     910:	ce 01       	movw	r24, r28
     912:	09 95       	icall
     914:	89 2b       	or	r24, r25
     916:	51 f0       	breq	.+20     	; 0x92c <__stack+0x2d>
     918:	e8 81       	ld	r30, Y
     91a:	f9 81       	ldd	r31, Y+1	; 0x01
     91c:	06 80       	ldd	r0, Z+6	; 0x06
     91e:	f7 81       	ldd	r31, Z+7	; 0x07
     920:	e0 2d       	mov	r30, r0
     922:	ce 01       	movw	r24, r28
     924:	09 95       	icall
     926:	00 e0       	ldi	r16, 0x00	; 0
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	ed cf       	rjmp	.-38     	; 0x906 <__stack+0x7>
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
     938:	c8 01       	movw	r24, r16
     93a:	e0 cf       	rjmp	.-64     	; 0x8fc <_ZN13Adafruit_FONA10flushInputEv+0xe>
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	08 95       	ret

00000946 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
     952:	8b 01       	movw	r16, r22
     954:	f4 2e       	mov	r15, r20
     956:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
     95a:	66 e5       	ldi	r22, 0x56	; 86
     95c:	71 e0       	ldi	r23, 0x01	; 1
     95e:	8e e9       	ldi	r24, 0x9E	; 158
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     966:	68 e4       	ldi	r22, 0x48	; 72
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	8e e9       	ldi	r24, 0x9E	; 158
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     972:	b8 01       	movw	r22, r16
     974:	8e e9       	ldi	r24, 0x9E	; 158
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     97c:	62 e2       	ldi	r22, 0x22	; 34
     97e:	8e e9       	ldi	r24, 0x9E	; 158
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEc>
     986:	c3 5e       	subi	r28, 0xE3	; 227
     988:	de 4f       	sbci	r29, 0xFE	; 254
     98a:	6a e3       	ldi	r22, 0x3A	; 58
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	88 81       	ld	r24, Y
     990:	99 81       	ldd	r25, Y+1	; 0x01
     992:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     996:	b8 01       	movw	r22, r16
     998:	88 81       	ld	r24, Y
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     9a0:	88 81       	ld	r24, Y
     9a2:	99 81       	ldd	r25, Y+1	; 0x01
     9a4:	ff 20       	and	r15, r15
     9a6:	19 f0       	breq	.+6      	; 0x9ae <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     9a8:	66 e3       	ldi	r22, 0x36	; 54
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     9ae:	63 e3       	ldi	r22, 0x33	; 51
     9b0:	71 e0       	ldi	r23, 0x01	; 1
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>

000009c0 <_ZN13Adafruit_FONA8readlineEjb>:
     9c0:	bf 92       	push	r11
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	7c 01       	movw	r14, r24
     9d4:	b4 2e       	mov	r11, r20
     9d6:	8b 01       	movw	r16, r22
     9d8:	00 0f       	add	r16, r16
     9da:	11 1f       	adc	r17, r17
     9dc:	00 0f       	add	r16, r16
     9de:	11 1f       	adc	r17, r17
     9e0:	c0 e0       	ldi	r28, 0x00	; 0
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	67 01       	movw	r12, r14
     9e6:	83 ee       	ldi	r24, 0xE3	; 227
     9e8:	c8 1a       	sub	r12, r24
     9ea:	8e ef       	ldi	r24, 0xFE	; 254
     9ec:	d8 0a       	sbc	r13, r24
     9ee:	01 15       	cp	r16, r1
     9f0:	11 05       	cpc	r17, r1
     9f2:	c9 f1       	breq	.+114    	; 0xa66 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9f4:	ce 3f       	cpi	r28, 0xFE	; 254
     9f6:	d1 05       	cpc	r29, r1
     9f8:	98 f0       	brcs	.+38     	; 0xa20 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9fa:	62 e9       	ldi	r22, 0x92	; 146
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	8e e9       	ldi	r24, 0x9E	; 158
     a00:	93 e0       	ldi	r25, 0x03	; 3
     a02:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     a06:	2f c0       	rjmp	.+94     	; 0xa66 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a08:	f6 01       	movw	r30, r12
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	dc 01       	movw	r26, r24
     a10:	ed 91       	ld	r30, X+
     a12:	fc 91       	ld	r31, X
     a14:	06 80       	ldd	r0, Z+6	; 0x06
     a16:	f7 81       	ldd	r31, Z+7	; 0x07
     a18:	e0 2d       	mov	r30, r0
     a1a:	09 95       	icall
     a1c:	8d 30       	cpi	r24, 0x0D	; 13
     a1e:	69 f4       	brne	.+26     	; 0xa3a <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     a20:	d6 01       	movw	r26, r12
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	dc 01       	movw	r26, r24
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	04 80       	ldd	r0, Z+4	; 0x04
     a2e:	f5 81       	ldd	r31, Z+5	; 0x05
     a30:	e0 2d       	mov	r30, r0
     a32:	09 95       	icall
     a34:	89 2b       	or	r24, r25
     a36:	41 f7       	brne	.-48     	; 0xa08 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     a38:	0c c0       	rjmp	.+24     	; 0xa52 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     a3a:	8a 30       	cpi	r24, 0x0A	; 10
     a3c:	21 f4       	brne	.+8      	; 0xa46 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     a3e:	20 97       	sbiw	r28, 0x00	; 0
     a40:	79 f3       	breq	.-34     	; 0xa20 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a42:	bb 20       	and	r11, r11
     a44:	81 f0       	breq	.+32     	; 0xa66 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a46:	f7 01       	movw	r30, r14
     a48:	ec 0f       	add	r30, r28
     a4a:	fd 1f       	adc	r31, r29
     a4c:	87 87       	std	Z+15, r24	; 0x0f
     a4e:	21 96       	adiw	r28, 0x01	; 1
     a50:	e7 cf       	rjmp	.-50     	; 0xa20 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     a52:	01 50       	subi	r16, 0x01	; 1
     a54:	11 09       	sbc	r17, r1
     a56:	39 f0       	breq	.+14     	; 0xa66 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
     a64:	c4 cf       	rjmp	.-120    	; 0x9ee <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     a66:	f7 01       	movw	r30, r14
     a68:	ec 0f       	add	r30, r28
     a6a:	fd 1f       	adc	r31, r29
     a6c:	17 86       	std	Z+15, r1	; 0x0f
     a6e:	8c 2f       	mov	r24, r28
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	08 95       	ret

00000a84 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	8b 01       	movw	r16, r22
     a90:	ba 01       	movw	r22, r20
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
     a98:	68 e9       	ldi	r22, 0x98	; 152
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	8e e9       	ldi	r24, 0x9E	; 158
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     aa4:	2f 96       	adiw	r28, 0x0f	; 15
     aa6:	be 01       	movw	r22, r28
     aa8:	8e e9       	ldi	r24, 0x9E	; 158
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
     ab0:	b8 01       	movw	r22, r16
     ab2:	ce 01       	movw	r24, r28
     ab4:	0e 94 a7 23 	call	0x474e	; 0x474e <strcmp_P>
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	89 2b       	or	r24, r25
     abc:	09 f0       	breq	.+2      	; 0xac0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	82 2f       	mov	r24, r18
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
     ad2:	fc 01       	movw	r30, r24
     ad4:	e3 5e       	subi	r30, 0xE3	; 227
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	66 23       	and	r22, r22
     ada:	31 f0       	breq	.+12     	; 0xae8 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     adc:	62 e2       	ldi	r22, 0x22	; 34
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEc>
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
     af0:	fe 01       	movw	r30, r28
     af2:	e5 5e       	subi	r30, 0xE5	; 229
     af4:	fe 4f       	sbci	r31, 0xFE	; 254
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	40 e1       	ldi	r20, 0x10	; 16
     afc:	57 e2       	ldi	r21, 0x27	; 39
     afe:	ce 01       	movw	r24, r28
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000b08 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	8a 01       	movw	r16, r20
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b1a:	fe 01       	movw	r30, r28
     b1c:	e3 5e       	subi	r30, 0xE3	; 227
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	b8 01       	movw	r22, r16
     b22:	80 81       	ld	r24, Z
     b24:	91 81       	ldd	r25, Z+1	; 0x01
     b26:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <_ZN5Print5printERK6String>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	ce 01       	movw	r24, r28
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	0c 94 66 05 	jmp	0xacc	; 0xacc <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b3a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
     b44:	8a 01       	movw	r16, r20
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b4c:	fe 01       	movw	r30, r28
     b4e:	e3 5e       	subi	r30, 0xE3	; 227
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	b8 01       	movw	r22, r16
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	ce 01       	movw	r24, r28
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	0c 94 66 05 	jmp	0xacc	; 0xacc <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b6c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	69 01       	movw	r12, r18
     b7c:	7a 01       	movw	r14, r20
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	0e 94 a3 04 	call	0x946	; 0x946 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b84:	fe 01       	movw	r30, r28
     b86:	e3 5e       	subi	r30, 0xE3	; 227
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	2a e0       	ldi	r18, 0x0A	; 10
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	b7 01       	movw	r22, r14
     b90:	a6 01       	movw	r20, r12
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEli>
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	ce 01       	movw	r24, r28
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	0c 94 66 05 	jmp	0xacc	; 0xacc <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000bae <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     bae:	4f 92       	push	r4
     bb0:	5f 92       	push	r5
     bb2:	6f 92       	push	r6
     bb4:	7f 92       	push	r7
     bb6:	8f 92       	push	r8
     bb8:	9f 92       	push	r9
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	7c 01       	movw	r14, r24
     bcc:	2a 01       	movw	r4, r20
     bce:	3b 01       	movw	r6, r22
     bd0:	48 01       	movw	r8, r16
     bd2:	59 01       	movw	r10, r18
     bd4:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
     bd8:	6c e2       	ldi	r22, 0x2C	; 44
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	8e e9       	ldi	r24, 0x9E	; 158
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     be4:	6f e1       	ldi	r22, 0x1F	; 31
     be6:	71 e0       	ldi	r23, 0x01	; 1
     be8:	8e e9       	ldi	r24, 0x9E	; 158
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     bf0:	2a e0       	ldi	r18, 0x0A	; 10
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	b3 01       	movw	r22, r6
     bf6:	a2 01       	movw	r20, r4
     bf8:	8e e9       	ldi	r24, 0x9E	; 158
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN5Print5printEmi>
     c00:	6c e2       	ldi	r22, 0x2C	; 44
     c02:	8e e9       	ldi	r24, 0x9E	; 158
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
     c0a:	2a e0       	ldi	r18, 0x0A	; 10
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	b5 01       	movw	r22, r10
     c10:	a4 01       	movw	r20, r8
     c12:	8e e9       	ldi	r24, 0x9E	; 158
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_ZN5Print7printlnEmi>
     c1a:	e7 01       	movw	r28, r14
     c1c:	c3 5e       	subi	r28, 0xE3	; 227
     c1e:	de 4f       	sbci	r29, 0xFE	; 254
     c20:	62 e1       	ldi	r22, 0x12	; 18
     c22:	71 e0       	ldi	r23, 0x01	; 1
     c24:	88 81       	ld	r24, Y
     c26:	99 81       	ldd	r25, Y+1	; 0x01
     c28:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     c2c:	2a e0       	ldi	r18, 0x0A	; 10
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	b3 01       	movw	r22, r6
     c32:	a2 01       	movw	r20, r4
     c34:	88 81       	ld	r24, Y
     c36:	99 81       	ldd	r25, Y+1	; 0x01
     c38:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN5Print5printEmi>
     c3c:	67 e0       	ldi	r22, 0x07	; 7
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	88 81       	ld	r24, Y
     c42:	99 81       	ldd	r25, Y+1	; 0x01
     c44:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
     c48:	2a e0       	ldi	r18, 0x0A	; 10
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	b5 01       	movw	r22, r10
     c4e:	a4 01       	movw	r20, r8
     c50:	88 81       	ld	r24, Y
     c52:	99 81       	ldd	r25, Y+1	; 0x01
     c54:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_ZN5Print7printlnEmi>
     c58:	40 e1       	ldi	r20, 0x10	; 16
     c5a:	57 e2       	ldi	r21, 0x27	; 39
     c5c:	69 e0       	ldi	r22, 0x09	; 9
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	c7 01       	movw	r24, r14
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	5f 90       	pop	r5
     c7c:	4f 90       	pop	r4
     c7e:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000c82 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	8b 01       	movw	r16, r22
     c92:	7a 01       	movw	r14, r20
     c94:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
     c98:	6b e8       	ldi	r22, 0x8B	; 139
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	8e e9       	ldi	r24, 0x9E	; 158
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     ca4:	b8 01       	movw	r22, r16
     ca6:	8e e9       	ldi	r24, 0x9E	; 158
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     cae:	fe 01       	movw	r30, r28
     cb0:	e3 5e       	subi	r30, 0xE3	; 227
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	b8 01       	movw	r22, r16
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	b7 01       	movw	r22, r14
     cc2:	ce 01       	movw	r24, r28
     cc4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
     cc8:	18 2f       	mov	r17, r24
     cca:	64 e8       	ldi	r22, 0x84	; 132
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	8e e9       	ldi	r24, 0x9E	; 158
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     cd6:	be 01       	movw	r22, r28
     cd8:	61 5f       	subi	r22, 0xF1	; 241
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	8e e9       	ldi	r24, 0x9E	; 158
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
     ce4:	81 2f       	mov	r24, r17
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	08 95       	ret

00000cf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     cf4:	8f 92       	push	r8
     cf6:	9f 92       	push	r9
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	6b 01       	movw	r12, r22
     d10:	49 01       	movw	r8, r18
     d12:	5a 01       	movw	r10, r20
     d14:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
     d18:	6d e7       	ldi	r22, 0x7D	; 125
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	8e e9       	ldi	r24, 0x9E	; 158
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     d24:	b6 01       	movw	r22, r12
     d26:	8e e9       	ldi	r24, 0x9E	; 158
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     d2e:	2a e0       	ldi	r18, 0x0A	; 10
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	b5 01       	movw	r22, r10
     d34:	a4 01       	movw	r20, r8
     d36:	8e e9       	ldi	r24, 0x9E	; 158
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 1b 1c 	call	0x3836	; 0x3836 <_ZN5Print7printlnEli>
     d3e:	7e 01       	movw	r14, r28
     d40:	83 ee       	ldi	r24, 0xE3	; 227
     d42:	e8 1a       	sub	r14, r24
     d44:	8e ef       	ldi	r24, 0xFE	; 254
     d46:	f8 0a       	sbc	r15, r24
     d48:	b6 01       	movw	r22, r12
     d4a:	f7 01       	movw	r30, r14
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     d54:	2a e0       	ldi	r18, 0x0A	; 10
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	b5 01       	movw	r22, r10
     d5a:	a4 01       	movw	r20, r8
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	0e 94 1b 1c 	call	0x3836	; 0x3836 <_ZN5Print7printlnEli>
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	b8 01       	movw	r22, r16
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
     d70:	18 2f       	mov	r17, r24
     d72:	66 e7       	ldi	r22, 0x76	; 118
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	8e e9       	ldi	r24, 0x9E	; 158
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     d7e:	be 01       	movw	r22, r28
     d80:	61 5f       	subi	r22, 0xF1	; 241
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8e e9       	ldi	r24, 0x9E	; 158
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
     d8c:	81 2f       	mov	r24, r17
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	08 95       	ret

00000da8 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	ec 01       	movw	r28, r24
     dbe:	6b 01       	movw	r12, r22
     dc0:	7a 01       	movw	r14, r20
     dc2:	59 01       	movw	r10, r18
     dc4:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
     dc8:	6f e6       	ldi	r22, 0x6F	; 111
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	8e e9       	ldi	r24, 0x9E	; 158
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     dd4:	b6 01       	movw	r22, r12
     dd6:	8e e9       	ldi	r24, 0x9E	; 158
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     dde:	62 e2       	ldi	r22, 0x22	; 34
     de0:	8e e9       	ldi	r24, 0x9E	; 158
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
     de8:	b7 01       	movw	r22, r14
     dea:	8e e9       	ldi	r24, 0x9E	; 158
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     df2:	62 e2       	ldi	r22, 0x22	; 34
     df4:	8e e9       	ldi	r24, 0x9E	; 158
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEc>
     dfc:	8e 01       	movw	r16, r28
     dfe:	03 5e       	subi	r16, 0xE3	; 227
     e00:	1e 4f       	sbci	r17, 0xFE	; 254
     e02:	b6 01       	movw	r22, r12
     e04:	f8 01       	movw	r30, r16
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     e0e:	62 e2       	ldi	r22, 0x22	; 34
     e10:	f8 01       	movw	r30, r16
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
     e1a:	b7 01       	movw	r22, r14
     e1c:	f8 01       	movw	r30, r16
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     e26:	62 e2       	ldi	r22, 0x22	; 34
     e28:	f8 01       	movw	r30, r16
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEc>
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	b5 01       	movw	r22, r10
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
     e3c:	18 2f       	mov	r17, r24
     e3e:	68 e6       	ldi	r22, 0x68	; 104
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	8e e9       	ldi	r24, 0x9E	; 158
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
     e4a:	be 01       	movw	r22, r28
     e4c:	61 5f       	subi	r22, 0xF1	; 241
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	8e e9       	ldi	r24, 0x9E	; 158
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
     e58:	81 2f       	mov	r24, r17
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	08 95       	ret

00000e70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	ec 01       	movw	r28, r24
     e7a:	8a 01       	movw	r16, r20
     e7c:	a9 01       	movw	r20, r18
     e7e:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e82:	88 23       	and	r24, r24
     e84:	41 f0       	breq	.+16     	; 0xe96 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     e86:	b8 01       	movw	r22, r16
     e88:	ce 01       	movw	r24, r28
     e8a:	0f 96       	adiw	r24, 0x0f	; 15
     e8c:	0e 94 a7 23 	call	0x474e	; 0x474e <strcmp_P>
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	89 2b       	or	r24, r25
     e94:	09 f0       	breq	.+2      	; 0xe98 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	82 2f       	mov	r24, r18
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <_ZN13Adafruit_FONA5beginEhh>:
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
     eb6:	f6 2e       	mov	r15, r22
     eb8:	e4 2e       	mov	r14, r20
     eba:	8f e1       	ldi	r24, 0x1F	; 31
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_Znwj>
     ec2:	8c 01       	movw	r16, r24
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	4e 2d       	mov	r20, r14
     ec8:	6f 2d       	mov	r22, r15
     eca:	0e 94 6d 20 	call	0x40da	; 0x40da <_ZN14SoftwareSerialC1Ehhb>
     ece:	7e 01       	movw	r14, r28
     ed0:	83 ee       	ldi	r24, 0xE3	; 227
     ed2:	e8 1a       	sub	r14, r24
     ed4:	8e ef       	ldi	r24, 0xFE	; 254
     ed6:	f8 0a       	sbc	r15, r24
     ed8:	d7 01       	movw	r26, r14
     eda:	0d 93       	st	X+, r16
     edc:	1c 93       	st	X, r17
     ede:	40 ec       	ldi	r20, 0xC0	; 192
     ee0:	52 e1       	ldi	r21, 0x12	; 18
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	c8 01       	movw	r24, r16
     ee8:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN14SoftwareSerial5beginEl>
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef0:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <pinMode>
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
     efc:	6a e0       	ldi	r22, 0x0A	; 10
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
     f10:	64 e6       	ldi	r22, 0x64	; 100
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f20:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
     f24:	64 e9       	ldi	r22, 0x94	; 148
     f26:	73 e0       	ldi	r23, 0x03	; 3
     f28:	8e e9       	ldi	r24, 0x9E	; 158
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
     f30:	8e e0       	ldi	r24, 0x0E	; 14
     f32:	c8 2e       	mov	r12, r24
     f34:	d1 2c       	mov	r13, r1
     f36:	8e 01       	movw	r16, r28
     f38:	05 5e       	subi	r16, 0xE5	; 229
     f3a:	1e 4f       	sbci	r17, 0xFE	; 254
     f3c:	f7 01       	movw	r30, r14
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	dc 01       	movw	r26, r24
     f44:	ed 91       	ld	r30, X+
     f46:	fc 91       	ld	r31, X
     f48:	04 80       	ldd	r0, Z+4	; 0x04
     f4a:	f5 81       	ldd	r31, Z+5	; 0x05
     f4c:	e0 2d       	mov	r30, r0
     f4e:	09 95       	icall
     f50:	89 2b       	or	r24, r25
     f52:	59 f0       	breq	.+22     	; 0xf6a <_ZN13Adafruit_FONA5beginEhh+0xc6>
     f54:	f7 01       	movw	r30, r14
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	dc 01       	movw	r26, r24
     f5c:	ed 91       	ld	r30, X+
     f5e:	fc 91       	ld	r31, X
     f60:	06 80       	ldd	r0, Z+6	; 0x06
     f62:	f7 81       	ldd	r31, Z+7	; 0x07
     f64:	e0 2d       	mov	r30, r0
     f66:	09 95       	icall
     f68:	e9 cf       	rjmp	.-46     	; 0xf3c <_ZN13Adafruit_FONA5beginEhh+0x98>
     f6a:	f8 01       	movw	r30, r16
     f6c:	40 81       	ld	r20, Z
     f6e:	51 81       	ldd	r21, Z+1	; 0x01
     f70:	24 ef       	ldi	r18, 0xF4	; 244
     f72:	31 e0       	ldi	r19, 0x01	; 1
     f74:	61 e9       	ldi	r22, 0x91	; 145
     f76:	73 e0       	ldi	r23, 0x03	; 3
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f7e:	81 11       	cpse	r24, r1
     f80:	34 c0       	rjmp	.+104    	; 0xfea <_ZN13Adafruit_FONA5beginEhh+0x146>
     f82:	d7 01       	movw	r26, r14
     f84:	8d 91       	ld	r24, X+
     f86:	9c 91       	ld	r25, X
     f88:	dc 01       	movw	r26, r24
     f8a:	ed 91       	ld	r30, X+
     f8c:	fc 91       	ld	r31, X
     f8e:	04 80       	ldd	r0, Z+4	; 0x04
     f90:	f5 81       	ldd	r31, Z+5	; 0x05
     f92:	e0 2d       	mov	r30, r0
     f94:	09 95       	icall
     f96:	89 2b       	or	r24, r25
     f98:	59 f0       	breq	.+22     	; 0xfb0 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     f9a:	f7 01       	movw	r30, r14
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	dc 01       	movw	r26, r24
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	06 80       	ldd	r0, Z+6	; 0x06
     fa8:	f7 81       	ldd	r31, Z+7	; 0x07
     faa:	e0 2d       	mov	r30, r0
     fac:	09 95       	icall
     fae:	e9 cf       	rjmp	.-46     	; 0xf82 <_ZN13Adafruit_FONA5beginEhh+0xde>
     fb0:	24 ef       	ldi	r18, 0xF4	; 244
     fb2:	31 e0       	ldi	r19, 0x01	; 1
     fb4:	4e e8       	ldi	r20, 0x8E	; 142
     fb6:	53 e0       	ldi	r21, 0x03	; 3
     fb8:	6b e8       	ldi	r22, 0x8B	; 139
     fba:	73 e0       	ldi	r23, 0x03	; 3
     fbc:	ce 01       	movw	r24, r28
     fbe:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fc2:	81 11       	cpse	r24, r1
     fc4:	12 c0       	rjmp	.+36     	; 0xfea <_ZN13Adafruit_FONA5beginEhh+0x146>
     fc6:	64 ef       	ldi	r22, 0xF4	; 244
     fc8:	71 e0       	ldi	r23, 0x01	; 1
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
     fd2:	b1 e0       	ldi	r27, 0x01	; 1
     fd4:	cb 1a       	sub	r12, r27
     fd6:	d1 08       	sbc	r13, r1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <_ZN13Adafruit_FONA5beginEhh+0x138>
     fda:	b0 cf       	rjmp	.-160    	; 0xf3c <_ZN13Adafruit_FONA5beginEhh+0x98>
     fdc:	5e c0       	rjmp	.+188    	; 0x109a <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     fde:	64 e6       	ldi	r22, 0x64	; 100
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
     fea:	f8 01       	movw	r30, r16
     fec:	40 81       	ld	r20, Z
     fee:	51 81       	ldd	r21, Z+1	; 0x01
     ff0:	24 ef       	ldi	r18, 0xF4	; 244
     ff2:	31 e0       	ldi	r19, 0x01	; 1
     ff4:	6e e5       	ldi	r22, 0x5E	; 94
     ff6:	73 e0       	ldi	r23, 0x03	; 3
     ff8:	ce 01       	movw	r24, r28
     ffa:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ffe:	64 e6       	ldi	r22, 0x64	; 100
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
    100a:	d8 01       	movw	r26, r16
    100c:	4d 91       	ld	r20, X+
    100e:	5c 91       	ld	r21, X
    1010:	24 ef       	ldi	r18, 0xF4	; 244
    1012:	31 e0       	ldi	r19, 0x01	; 1
    1014:	69 e5       	ldi	r22, 0x59	; 89
    1016:	73 e0       	ldi	r23, 0x03	; 3
    1018:	ce 01       	movw	r24, r28
    101a:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    101e:	81 11       	cpse	r24, r1
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <_ZN13Adafruit_FONA5beginEhh+0x182>
    1022:	12 e0       	ldi	r17, 0x02	; 2
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <_ZN13Adafruit_FONA5beginEhh+0x184>
    1026:	11 e0       	ldi	r17, 0x01	; 1
    1028:	64 e6       	ldi	r22, 0x64	; 100
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
    103a:	62 e5       	ldi	r22, 0x52	; 82
    103c:	73 e0       	ldi	r23, 0x03	; 3
    103e:	8e e9       	ldi	r24, 0x9E	; 158
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1046:	69 e0       	ldi	r22, 0x09	; 9
    1048:	71 e0       	ldi	r23, 0x01	; 1
    104a:	8e e9       	ldi	r24, 0x9E	; 158
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    1052:	69 e0       	ldi	r22, 0x09	; 9
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	f7 01       	movw	r30, r14
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	64 ef       	ldi	r22, 0xF4	; 244
    1064:	71 e0       	ldi	r23, 0x01	; 1
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
    106c:	6b e4       	ldi	r22, 0x4B	; 75
    106e:	73 e0       	ldi	r23, 0x03	; 3
    1070:	8e e9       	ldi	r24, 0x9E	; 158
    1072:	93 e0       	ldi	r25, 0x03	; 3
    1074:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1078:	2f 96       	adiw	r28, 0x0f	; 15
    107a:	be 01       	movw	r22, r28
    107c:	8e e9       	ldi	r24, 0x9E	; 158
    107e:	93 e0       	ldi	r25, 0x03	; 3
    1080:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    1084:	60 e4       	ldi	r22, 0x40	; 64
    1086:	73 e0       	ldi	r23, 0x03	; 3
    1088:	ce 01       	movw	r24, r28
    108a:	0e 94 b9 23 	call	0x4772	; 0x4772 <strstr_P>
    108e:	89 2b       	or	r24, r25
    1090:	11 f4       	brne	.+4      	; 0x1096 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	35 c0       	rjmp	.+106    	; 0x1100 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1096:	81 2f       	mov	r24, r17
    1098:	33 c0       	rjmp	.+102    	; 0x1100 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    109a:	d8 01       	movw	r26, r16
    109c:	4d 91       	ld	r20, X+
    109e:	5c 91       	ld	r21, X
    10a0:	24 ef       	ldi	r18, 0xF4	; 244
    10a2:	31 e0       	ldi	r19, 0x01	; 1
    10a4:	68 e8       	ldi	r22, 0x88	; 136
    10a6:	73 e0       	ldi	r23, 0x03	; 3
    10a8:	ce 01       	movw	r24, r28
    10aa:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10ae:	64 e6       	ldi	r22, 0x64	; 100
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
    10ba:	f8 01       	movw	r30, r16
    10bc:	40 81       	ld	r20, Z
    10be:	51 81       	ldd	r21, Z+1	; 0x01
    10c0:	24 ef       	ldi	r18, 0xF4	; 244
    10c2:	31 e0       	ldi	r19, 0x01	; 1
    10c4:	65 e8       	ldi	r22, 0x85	; 133
    10c6:	73 e0       	ldi	r23, 0x03	; 3
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10ce:	64 e6       	ldi	r22, 0x64	; 100
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
    10da:	d8 01       	movw	r26, r16
    10dc:	4d 91       	ld	r20, X+
    10de:	5c 91       	ld	r21, X
    10e0:	24 ef       	ldi	r18, 0xF4	; 244
    10e2:	31 e0       	ldi	r19, 0x01	; 1
    10e4:	62 e8       	ldi	r22, 0x82	; 130
    10e6:	73 e0       	ldi	r23, 0x03	; 3
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    10ee:	81 11       	cpse	r24, r1
    10f0:	76 cf       	rjmp	.-276    	; 0xfde <_ZN13Adafruit_FONA5beginEhh+0x13a>
    10f2:	63 e6       	ldi	r22, 0x63	; 99
    10f4:	73 e0       	ldi	r23, 0x03	; 3
    10f6:	8e e9       	ldi	r24, 0x9E	; 158
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	08 95       	ret

00001112 <_ZN13Adafruit_FONA9HTTP_initEv>:
    1112:	fc 01       	movw	r30, r24
    1114:	e5 5e       	subi	r30, 0xE5	; 229
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	40 81       	ld	r20, Z
    111a:	51 81       	ldd	r21, Z+1	; 0x01
    111c:	24 ef       	ldi	r18, 0xF4	; 244
    111e:	31 e0       	ldi	r19, 0x01	; 1
    1120:	69 e6       	ldi	r22, 0x69	; 105
    1122:	71 e0       	ldi	r23, 0x01	; 1
    1124:	0c 94 38 07 	jmp	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001128 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1128:	fc 01       	movw	r30, r24
    112a:	e5 5e       	subi	r30, 0xE5	; 229
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	40 81       	ld	r20, Z
    1130:	51 81       	ldd	r21, Z+1	; 0x01
    1132:	24 ef       	ldi	r18, 0xF4	; 244
    1134:	31 e0       	ldi	r19, 0x01	; 1
    1136:	6d e5       	ldi	r22, 0x5D	; 93
    1138:	71 e0       	ldi	r23, 0x01	; 1
    113a:	0c 94 38 07 	jmp	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000113e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>:
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	00 d0       	rcall	.+0      	; 0x114c <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0xe>
    114c:	00 d0       	rcall	.+0      	; 0x114e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x10>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x12>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	8c 01       	movw	r16, r24
    1156:	7b 01       	movw	r14, r22
    1158:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN13Adafruit_FONA9HTTP_termEv>
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 89 08 	call	0x1112	; 0x1112 <_ZN13Adafruit_FONA9HTTP_initEv>
    1162:	88 23       	and	r24, r24
    1164:	59 f1       	breq	.+86     	; 0x11bc <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x7e>
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	66 ea       	ldi	r22, 0xA6	; 166
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	c8 01       	movw	r24, r16
    1174:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1178:	88 23       	and	r24, r24
    117a:	11 f1       	breq	.+68     	; 0x11c0 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x82>
    117c:	a7 01       	movw	r20, r14
    117e:	62 ea       	ldi	r22, 0xA2	; 162
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	c8 01       	movw	r24, r16
    1184:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1188:	88 23       	and	r24, r24
    118a:	e1 f0       	breq	.+56     	; 0x11c4 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x86>
    118c:	b8 01       	movw	r22, r16
    118e:	6b 5e       	subi	r22, 0xEB	; 235
    1190:	7e 4f       	sbci	r23, 0xFE	; 254
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <_ZN6StringC1ERKS_>
    119a:	ae 01       	movw	r20, r28
    119c:	4f 5f       	subi	r20, 0xFF	; 255
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	6f e9       	ldi	r22, 0x9F	; 159
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	c8 01       	movw	r24, r16
    11a6:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    11aa:	18 2f       	mov	r17, r24
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <_ZN6StringD1Ev>
    11b4:	11 23       	and	r17, r17
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8a>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper+0x8c>
    11c8:	80 e4       	ldi	r24, 0x40	; 64
    11ca:	26 96       	adiw	r28, 0x06	; 6
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	08 95       	ret

000011e4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	ec 01       	movw	r28, r24
    11f6:	68 01       	movw	r12, r16
    11f8:	87 01       	movw	r16, r14
    11fa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    11fe:	b6 01       	movw	r22, r12
    1200:	ce 01       	movw	r24, r28
    1202:	0f 96       	adiw	r24, 0x0f	; 15
    1204:	0e 94 a7 23 	call	0x474e	; 0x474e <strcmp_P>
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	89 2b       	or	r24, r25
    120c:	09 f0       	breq	.+2      	; 0x1210 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	82 2f       	mov	r24, r18
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	08 95       	ret

00001224 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
    1232:	79 01       	movw	r14, r18
    1234:	98 01       	movw	r18, r16
    1236:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    123a:	b7 01       	movw	r22, r14
    123c:	ce 01       	movw	r24, r28
    123e:	0f 96       	adiw	r24, 0x0f	; 15
    1240:	0e 94 a7 23 	call	0x474e	; 0x474e <strcmp_P>
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	89 2b       	or	r24, r25
    1248:	09 f0       	breq	.+2      	; 0x124c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	82 2f       	mov	r24, r18
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	08 95       	ret

0000125c <_ZN13Adafruit_FONA10enableGPRSEb>:
    125c:	7f 92       	push	r7
    125e:	8f 92       	push	r8
    1260:	9f 92       	push	r9
    1262:	af 92       	push	r10
    1264:	bf 92       	push	r11
    1266:	cf 92       	push	r12
    1268:	df 92       	push	r13
    126a:	ef 92       	push	r14
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	28 ee       	ldi	r18, 0xE8	; 232
    127a:	3d ef       	ldi	r19, 0xFD	; 253
    127c:	66 23       	and	r22, r22
    127e:	09 f4       	brne	.+2      	; 0x1282 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    1280:	1f c1       	rjmp	.+574    	; 0x14c0 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    1282:	4c ee       	ldi	r20, 0xEC	; 236
    1284:	52 e0       	ldi	r21, 0x02	; 2
    1286:	61 ee       	ldi	r22, 0xE1	; 225
    1288:	72 e0       	ldi	r23, 0x02	; 2
    128a:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    128e:	81 11       	cpse	r24, r1
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	78 2e       	mov	r7, r24
    1296:	02 c0       	rjmp	.+4      	; 0x129c <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1298:	77 24       	eor	r7, r7
    129a:	73 94       	inc	r7
    129c:	7e 01       	movw	r14, r28
    129e:	85 ee       	ldi	r24, 0xE5	; 229
    12a0:	e8 1a       	sub	r14, r24
    12a2:	8e ef       	ldi	r24, 0xFE	; 254
    12a4:	f8 0a       	sbc	r15, r24
    12a6:	f7 01       	movw	r30, r14
    12a8:	40 81       	ld	r20, Z
    12aa:	51 81       	ldd	r21, Z+1	; 0x01
    12ac:	20 e1       	ldi	r18, 0x10	; 16
    12ae:	37 e2       	ldi	r19, 0x27	; 39
    12b0:	66 ed       	ldi	r22, 0xD6	; 214
    12b2:	72 e0       	ldi	r23, 0x02	; 2
    12b4:	ce 01       	movw	r24, r28
    12b6:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12ba:	88 23       	and	r24, r24
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    12be:	25 c1       	rjmp	.+586    	; 0x150a <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    12c0:	f7 01       	movw	r30, r14
    12c2:	40 81       	ld	r20, Z
    12c4:	51 81       	ldd	r21, Z+1	; 0x01
    12c6:	20 e1       	ldi	r18, 0x10	; 16
    12c8:	37 e2       	ldi	r19, 0x27	; 39
    12ca:	68 eb       	ldi	r22, 0xB8	; 184
    12cc:	72 e0       	ldi	r23, 0x02	; 2
    12ce:	ce 01       	movw	r24, r28
    12d0:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    12d8:	1a c1       	rjmp	.+564    	; 0x150e <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    12da:	4e 01       	movw	r8, r28
    12dc:	f2 ef       	ldi	r31, 0xF2	; 242
    12de:	8f 1a       	sub	r8, r31
    12e0:	fe ef       	ldi	r31, 0xFE	; 254
    12e2:	9f 0a       	sbc	r9, r31
    12e4:	f4 01       	movw	r30, r8
    12e6:	40 81       	ld	r20, Z
    12e8:	51 81       	ldd	r21, Z+1	; 0x01
    12ea:	41 15       	cp	r20, r1
    12ec:	51 05       	cpc	r21, r1
    12ee:	71 f4       	brne	.+28     	; 0x130c <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    12f0:	f7 01       	movw	r30, r14
    12f2:	40 81       	ld	r20, Z
    12f4:	51 81       	ldd	r21, Z+1	; 0x01
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	63 e5       	ldi	r22, 0x53	; 83
    12fc:	72 e0       	ldi	r23, 0x02	; 2
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1304:	81 11       	cpse	r24, r1
    1306:	ce c0       	rjmp	.+412    	; 0x14a4 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    1308:	89 e0       	ldi	r24, 0x09	; 9
    130a:	0e c1       	rjmp	.+540    	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    130c:	f7 01       	movw	r30, r14
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	00 e1       	ldi	r16, 0x10	; 16
    1314:	17 e2       	ldi	r17, 0x27	; 39
    1316:	64 ea       	ldi	r22, 0xA4	; 164
    1318:	72 e0       	ldi	r23, 0x02	; 2
    131a:	ce 01       	movw	r24, r28
    131c:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1320:	88 23       	and	r24, r24
    1322:	09 f4       	brne	.+2      	; 0x1326 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    1324:	f6 c0       	rjmp	.+492    	; 0x1512 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN13Adafruit_FONA10flushInputEv>
    132c:	8e 01       	movw	r16, r28
    132e:	03 5e       	subi	r16, 0xE3	; 227
    1330:	1e 4f       	sbci	r17, 0xFE	; 254
    1332:	6a e9       	ldi	r22, 0x9A	; 154
    1334:	72 e0       	ldi	r23, 0x02	; 2
    1336:	f8 01       	movw	r30, r16
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1340:	f4 01       	movw	r30, r8
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	f8 01       	movw	r30, r16
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1350:	5e 01       	movw	r10, r28
    1352:	f0 ef       	ldi	r31, 0xF0	; 240
    1354:	af 1a       	sub	r10, r31
    1356:	fe ef       	ldi	r31, 0xFE	; 254
    1358:	bf 0a       	sbc	r11, r31
    135a:	f5 01       	movw	r30, r10
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	89 2b       	or	r24, r25
    1362:	79 f0       	breq	.+30     	; 0x1382 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    1364:	65 e2       	ldi	r22, 0x25	; 37
    1366:	71 e0       	ldi	r23, 0x01	; 1
    1368:	f8 01       	movw	r30, r16
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    1372:	f5 01       	movw	r30, r10
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	f8 01       	movw	r30, r16
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1382:	6e 01       	movw	r12, r28
    1384:	fe ee       	ldi	r31, 0xEE	; 238
    1386:	cf 1a       	sub	r12, r31
    1388:	fe ef       	ldi	r31, 0xFE	; 254
    138a:	df 0a       	sbc	r13, r31
    138c:	f6 01       	movw	r30, r12
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	89 2b       	or	r24, r25
    1394:	79 f0       	breq	.+30     	; 0x13b4 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1396:	65 e2       	ldi	r22, 0x25	; 37
    1398:	71 e0       	ldi	r23, 0x01	; 1
    139a:	f8 01       	movw	r30, r16
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    13a4:	f6 01       	movw	r30, r12
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	f8 01       	movw	r30, r16
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    13b4:	67 e2       	ldi	r22, 0x27	; 39
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    13c2:	63 e9       	ldi	r22, 0x93	; 147
    13c4:	72 e0       	ldi	r23, 0x02	; 2
    13c6:	8e e9       	ldi	r24, 0x9E	; 158
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    13ce:	69 e8       	ldi	r22, 0x89	; 137
    13d0:	72 e0       	ldi	r23, 0x02	; 2
    13d2:	8e e9       	ldi	r24, 0x9E	; 158
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    13da:	f4 01       	movw	r30, r8
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	8e e9       	ldi	r24, 0x9E	; 158
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    13e8:	f5 01       	movw	r30, r10
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	89 2b       	or	r24, r25
    13f0:	69 f0       	breq	.+26     	; 0x140c <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    13f2:	65 e2       	ldi	r22, 0x25	; 37
    13f4:	71 e0       	ldi	r23, 0x01	; 1
    13f6:	8e e9       	ldi	r24, 0x9E	; 158
    13f8:	93 e0       	ldi	r25, 0x03	; 3
    13fa:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    13fe:	f5 01       	movw	r30, r10
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	8e e9       	ldi	r24, 0x9E	; 158
    1406:	93 e0       	ldi	r25, 0x03	; 3
    1408:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    140c:	f6 01       	movw	r30, r12
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	89 2b       	or	r24, r25
    1414:	69 f0       	breq	.+26     	; 0x1430 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    1416:	65 e2       	ldi	r22, 0x25	; 37
    1418:	71 e0       	ldi	r23, 0x01	; 1
    141a:	8e e9       	ldi	r24, 0x9E	; 158
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    1422:	f6 01       	movw	r30, r12
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	8e e9       	ldi	r24, 0x9E	; 158
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1430:	67 e2       	ldi	r22, 0x27	; 39
    1432:	71 e0       	ldi	r23, 0x01	; 1
    1434:	8e e9       	ldi	r24, 0x9E	; 158
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    143c:	f7 01       	movw	r30, r14
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	40 e1       	ldi	r20, 0x10	; 16
    1444:	57 e2       	ldi	r21, 0x27	; 39
    1446:	ce 01       	movw	r24, r28
    1448:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    144c:	88 23       	and	r24, r24
    144e:	09 f4       	brne	.+2      	; 0x1452 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    1450:	62 c0       	rjmp	.+196    	; 0x1516 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    1452:	f5 01       	movw	r30, r10
    1454:	40 81       	ld	r20, Z
    1456:	51 81       	ldd	r21, Z+1	; 0x01
    1458:	41 15       	cp	r20, r1
    145a:	51 05       	cpc	r21, r1
    145c:	39 f4       	brne	.+14     	; 0x146c <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    145e:	f6 01       	movw	r30, r12
    1460:	40 81       	ld	r20, Z
    1462:	51 81       	ldd	r21, Z+1	; 0x01
    1464:	41 15       	cp	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	79 f4       	brne	.+30     	; 0x1488 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    146a:	42 cf       	rjmp	.-380    	; 0x12f0 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    146c:	f7 01       	movw	r30, r14
    146e:	20 81       	ld	r18, Z
    1470:	31 81       	ldd	r19, Z+1	; 0x01
    1472:	00 e1       	ldi	r16, 0x10	; 16
    1474:	17 e2       	ldi	r17, 0x27	; 39
    1476:	64 e7       	ldi	r22, 0x74	; 116
    1478:	72 e0       	ldi	r23, 0x02	; 2
    147a:	ce 01       	movw	r24, r28
    147c:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1480:	81 11       	cpse	r24, r1
    1482:	ed cf       	rjmp	.-38     	; 0x145e <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1484:	87 e0       	ldi	r24, 0x07	; 7
    1486:	50 c0       	rjmp	.+160    	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1488:	f7 01       	movw	r30, r14
    148a:	20 81       	ld	r18, Z
    148c:	31 81       	ldd	r19, Z+1	; 0x01
    148e:	00 e1       	ldi	r16, 0x10	; 16
    1490:	17 e2       	ldi	r17, 0x27	; 39
    1492:	60 e6       	ldi	r22, 0x60	; 96
    1494:	72 e0       	ldi	r23, 0x02	; 2
    1496:	ce 01       	movw	r24, r28
    1498:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    149c:	81 11       	cpse	r24, r1
    149e:	28 cf       	rjmp	.-432    	; 0x12f0 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    14a0:	88 e0       	ldi	r24, 0x08	; 8
    14a2:	42 c0       	rjmp	.+132    	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14a4:	f7 01       	movw	r30, r14
    14a6:	40 81       	ld	r20, Z
    14a8:	51 81       	ldd	r21, Z+1	; 0x01
    14aa:	2f ef       	ldi	r18, 0xFF	; 255
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	6a e4       	ldi	r22, 0x4A	; 74
    14b0:	72 e0       	ldi	r23, 0x02	; 2
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14b8:	88 23       	and	r24, r24
    14ba:	79 f1       	breq	.+94     	; 0x151a <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    14bc:	87 2d       	mov	r24, r7
    14be:	34 c0       	rjmp	.+104    	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14c0:	42 e4       	ldi	r20, 0x42	; 66
    14c2:	52 e0       	ldi	r21, 0x02	; 2
    14c4:	67 e3       	ldi	r22, 0x37	; 55
    14c6:	72 e0       	ldi	r23, 0x02	; 2
    14c8:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14cc:	88 23       	and	r24, r24
    14ce:	39 f1       	breq	.+78     	; 0x151e <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    14d0:	8e 01       	movw	r16, r28
    14d2:	05 5e       	subi	r16, 0xE5	; 229
    14d4:	1e 4f       	sbci	r17, 0xFE	; 254
    14d6:	f8 01       	movw	r30, r16
    14d8:	40 81       	ld	r20, Z
    14da:	51 81       	ldd	r21, Z+1	; 0x01
    14dc:	20 e1       	ldi	r18, 0x10	; 16
    14de:	37 e2       	ldi	r19, 0x27	; 39
    14e0:	6a e2       	ldi	r22, 0x2A	; 42
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	ce 01       	movw	r24, r28
    14e6:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14ea:	88 23       	and	r24, r24
    14ec:	d1 f0       	breq	.+52     	; 0x1522 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    14ee:	f8 01       	movw	r30, r16
    14f0:	40 81       	ld	r20, Z
    14f2:	51 81       	ldd	r21, Z+1	; 0x01
    14f4:	20 e1       	ldi	r18, 0x10	; 16
    14f6:	37 e2       	ldi	r19, 0x27	; 39
    14f8:	6f e1       	ldi	r22, 0x1F	; 31
    14fa:	72 e0       	ldi	r23, 0x02	; 2
    14fc:	ce 01       	movw	r24, r28
    14fe:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1502:	88 23       	and	r24, r24
    1504:	81 f0       	breq	.+32     	; 0x1526 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	0d c0       	rjmp	.+26     	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1512:	85 e0       	ldi	r24, 0x05	; 5
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1516:	86 e0       	ldi	r24, 0x06	; 6
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    151a:	8a e0       	ldi	r24, 0x0A	; 10
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    151e:	8b e0       	ldi	r24, 0x0B	; 11
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1522:	8c e0       	ldi	r24, 0x0C	; 12
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1526:	8d e0       	ldi	r24, 0x0D	; 13
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	08 95       	ret

00001544 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	5b 01       	movw	r10, r22
    1558:	6a 01       	movw	r12, r20
    155a:	e2 2e       	mov	r14, r18
    155c:	0f 96       	adiw	r24, 0x0f	; 15
    155e:	0e 94 b9 23 	call	0x4772	; 0x4772 <strstr_P>
    1562:	ec 01       	movw	r28, r24
    1564:	89 2b       	or	r24, r25
    1566:	c1 f0       	breq	.+48     	; 0x1598 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1568:	c5 01       	movw	r24, r10
    156a:	0e 94 b0 23 	call	0x4760	; 0x4760 <__strlen_P>
    156e:	8c 0f       	add	r24, r28
    1570:	9d 1f       	adc	r25, r29
    1572:	c0 e0       	ldi	r28, 0x00	; 0
    1574:	f1 2c       	mov	r15, r1
    1576:	c0 17       	cp	r28, r16
    1578:	41 f0       	breq	.+16     	; 0x158a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    157a:	b7 01       	movw	r22, r14
    157c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <strchr>
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	51 f0       	breq	.+20     	; 0x1598 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	cf 5f       	subi	r28, 0xFF	; 255
    1588:	f6 cf       	rjmp	.-20     	; 0x1576 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    158a:	0e 94 89 23 	call	0x4712	; 0x4712 <atoi>
    158e:	f6 01       	movw	r30, r12
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	01 c0       	rjmp	.+2      	; 0x159a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	bf 90       	pop	r11
    15aa:	af 90       	pop	r10
    15ac:	08 95       	ret

000015ae <_ZN13Adafruit_FONA12HTTP_readallEjPj>:
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	ec 01       	movw	r28, r24
    15bc:	7a 01       	movw	r14, r20
    15be:	9b 01       	movw	r18, r22
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	04 ef       	ldi	r16, 0xF4	; 244
    15c6:	11 e0       	ldi	r17, 0x01	; 1
    15c8:	61 ed       	ldi	r22, 0xD1	; 209
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    15d0:	62 ec       	ldi	r22, 0xC2	; 194
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	8e e9       	ldi	r24, 0x9E	; 158
    15d6:	93 e0       	ldi	r25, 0x03	; 3
    15d8:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    15dc:	be 01       	movw	r22, r28
    15de:	61 5f       	subi	r22, 0xF1	; 241
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	8e e9       	ldi	r24, 0x9E	; 158
    15e4:	93 e0       	ldi	r25, 0x03	; 3
    15e6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    15ea:	00 e0       	ldi	r16, 0x00	; 0
    15ec:	2c e2       	ldi	r18, 0x2C	; 44
    15ee:	a7 01       	movw	r20, r14
    15f0:	66 eb       	ldi	r22, 0xB6	; 182
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	ce 01       	movw	r24, r28
    15f6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15fa:	88 23       	and	r24, r24
    15fc:	b1 f0       	breq	.+44     	; 0x162a <_ZN13Adafruit_FONA12HTTP_readallEjPj+0x7c>
    15fe:	62 eb       	ldi	r22, 0xB2	; 178
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	8e e9       	ldi	r24, 0x9E	; 158
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    160a:	f7 01       	movw	r30, r14
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	4a e0       	ldi	r20, 0x0A	; 10
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	8e e9       	ldi	r24, 0x9E	; 158
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	0e 94 96 1b 	call	0x372c	; 0x372c <_ZN5Print7printlnEji>
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	64 ef       	ldi	r22, 0xF4	; 244
    1620:	71 e0       	ldi	r23, 0x01	; 1
    1622:	ce 01       	movw	r24, r28
    1624:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	08 95       	ret

00001638 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	af 92       	push	r10
    1642:	bf 92       	push	r11
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	ec 01       	movw	r28, r24
    1656:	6a 01       	movw	r12, r20
    1658:	59 01       	movw	r10, r18
    165a:	27 01       	movw	r4, r14
    165c:	38 01       	movw	r6, r16
    165e:	fc 01       	movw	r30, r24
    1660:	e5 5e       	subi	r30, 0xE5	; 229
    1662:	fe 4f       	sbci	r31, 0xFE	; 254
    1664:	00 81       	ld	r16, Z
    1666:	11 81       	ldd	r17, Z+1	; 0x01
    1668:	26 2f       	mov	r18, r22
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	84 ef       	ldi	r24, 0xF4	; 244
    1672:	e8 2e       	mov	r14, r24
    1674:	ff 24       	eor	r15, r15
    1676:	f3 94       	inc	r15
    1678:	6a ef       	ldi	r22, 0xFA	; 250
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	ce 01       	movw	r24, r28
    167e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    1682:	88 23       	and	r24, r24
    1684:	09 f1       	breq	.+66     	; 0x16c8 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x90>
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	b2 01       	movw	r22, r4
    168a:	ce 01       	movw	r24, r28
    168c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
    1690:	01 e0       	ldi	r16, 0x01	; 1
    1692:	2c e2       	ldi	r18, 0x2C	; 44
    1694:	a6 01       	movw	r20, r12
    1696:	6d ee       	ldi	r22, 0xED	; 237
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    16a0:	88 23       	and	r24, r24
    16a2:	a1 f0       	breq	.+40     	; 0x16cc <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x94>
    16a4:	02 e0       	ldi	r16, 0x02	; 2
    16a6:	2c e2       	ldi	r18, 0x2C	; 44
    16a8:	a5 01       	movw	r20, r10
    16aa:	60 ee       	ldi	r22, 0xE0	; 224
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	ce 01       	movw	r24, r28
    16b0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    16b4:	88 23       	and	r24, r24
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x98>
    16b8:	f6 01       	movw	r30, r12
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	88 3c       	cpi	r24, 0xC8	; 200
    16c0:	91 05       	cpc	r25, r1
    16c2:	41 f4       	brne	.+16     	; 0x16d4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9c>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	07 c0       	rjmp	.+14     	; 0x16d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    16c8:	87 e0       	ldi	r24, 0x07	; 7
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    16cc:	88 e0       	ldi	r24, 0x08	; 8
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x9e>
    16d4:	80 e8       	ldi	r24, 0x80	; 128
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	08 95       	ret

000016f4 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_>:
    16f4:	2f 92       	push	r2
    16f6:	3f 92       	push	r3
    16f8:	4f 92       	push	r4
    16fa:	5f 92       	push	r5
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 d0       	rcall	.+0      	; 0x171a <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x26>
    171a:	00 d0       	rcall	.+0      	; 0x171c <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x28>
    171c:	1f 92       	push	r1
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	3c 01       	movw	r6, r24
    1724:	5b 83       	std	Y+3, r21	; 0x03
    1726:	4a 83       	std	Y+2, r20	; 0x02
    1728:	19 01       	movw	r2, r18
    172a:	28 01       	movw	r4, r16
    172c:	fd 82       	std	Y+5, r15	; 0x05
    172e:	ec 82       	std	Y+4, r14	; 0x04
    1730:	0e 94 9f 08 	call	0x113e	; 0x113e <_ZN13Adafruit_FONA10HTTP_setupEPK19__FlashStringHelper>
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	8f 70       	andi	r24, 0x0F	; 15
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	08 f0       	brcs	.+2      	; 0x173e <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x4a>
    173c:	59 c0       	rjmp	.+178    	; 0x17f0 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfc>
    173e:	4a 81       	ldd	r20, Y+2	; 0x02
    1740:	5b 81       	ldd	r21, Y+3	; 0x03
    1742:	6a ea       	ldi	r22, 0xAA	; 170
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	c3 01       	movw	r24, r6
    1748:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    174c:	81 11       	cpse	r24, r1
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x62>
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	80 61       	ori	r24, 0x10	; 16
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	a2 01       	movw	r20, r4
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	00 ec       	ldi	r16, 0xC0	; 192
    175e:	14 ed       	ldi	r17, 0xD4	; 212
    1760:	21 e0       	ldi	r18, 0x01	; 1
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	c3 01       	movw	r24, r6
    1766:	0e 94 d7 05 	call	0xbae	; 0xbae <_ZN13Adafruit_FONA9HTTP_dataEmm>
    176a:	81 11       	cpse	r24, r1
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0x80>
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	85 60       	ori	r24, 0x05	; 5
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    1774:	f3 01       	movw	r30, r6
    1776:	e3 5e       	subi	r30, 0xE3	; 227
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	80 81       	ld	r24, Z
    177c:	91 81       	ldd	r25, Z+1	; 0x01
    177e:	dc 01       	movw	r26, r24
    1780:	ed 91       	ld	r30, X+
    1782:	fc 91       	ld	r31, X
    1784:	02 80       	ldd	r0, Z+2	; 0x02
    1786:	f3 81       	ldd	r31, Z+3	; 0x03
    1788:	e0 2d       	mov	r30, r0
    178a:	a2 01       	movw	r20, r4
    178c:	b1 01       	movw	r22, r2
    178e:	09 95       	icall
    1790:	f3 01       	movw	r30, r6
    1792:	e5 5e       	subi	r30, 0xE5	; 229
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	40 e1       	ldi	r20, 0x10	; 16
    179c:	57 e2       	ldi	r21, 0x27	; 39
    179e:	c3 01       	movw	r24, r6
    17a0:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    17a4:	81 11       	cpse	r24, r1
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xba>
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	86 60       	ori	r24, 0x06	; 6
    17ac:	22 c0       	rjmp	.+68     	; 0x17f2 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    17ae:	10 e1       	ldi	r17, 0x10	; 16
    17b0:	e1 2e       	mov	r14, r17
    17b2:	17 e2       	ldi	r17, 0x27	; 39
    17b4:	f1 2e       	mov	r15, r17
    17b6:	00 e0       	ldi	r16, 0x00	; 0
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	95 01       	movw	r18, r10
    17bc:	4c 81       	ldd	r20, Y+4	; 0x04
    17be:	5d 81       	ldd	r21, Y+5	; 0x05
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	c3 01       	movw	r24, r6
    17c4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    17c8:	98 2f       	mov	r25, r24
    17ca:	9f 70       	andi	r25, 0x0F	; 15
    17cc:	92 30       	cpi	r25, 0x02	; 2
    17ce:	18 f0       	brcs	.+6      	; 0x17d6 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xe2>
    17d0:	b9 81       	ldd	r27, Y+1	; 0x01
    17d2:	8b 2b       	or	r24, r27
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    17d6:	a4 01       	movw	r20, r8
    17d8:	b6 01       	movw	r22, r12
    17da:	c3 01       	movw	r24, r6
    17dc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN13Adafruit_FONA12HTTP_readallEjPj>
    17e0:	81 11       	cpse	r24, r1
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xf6>
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	80 62       	ori	r24, 0x20	; 32
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_+0xfe>
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	9f 90       	pop	r9
    1812:	8f 90       	pop	r8
    1814:	7f 90       	pop	r7
    1816:	6f 90       	pop	r6
    1818:	5f 90       	pop	r5
    181a:	4f 90       	pop	r4
    181c:	3f 90       	pop	r3
    181e:	2f 90       	pop	r2
    1820:	08 95       	ret

00001822 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_>:
    1822:	2f 92       	push	r2
    1824:	3f 92       	push	r3
    1826:	4f 92       	push	r4
    1828:	5f 92       	push	r5
    182a:	6f 92       	push	r6
    182c:	7f 92       	push	r7
    182e:	8f 92       	push	r8
    1830:	9f 92       	push	r9
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	00 d0       	rcall	.+0      	; 0x1848 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x26>
    1848:	00 d0       	rcall	.+0      	; 0x184a <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x28>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
    1852:	19 01       	movw	r2, r18
    1854:	28 01       	movw	r4, r16
    1856:	fa 82       	std	Y+2, r15	; 0x02
    1858:	e9 82       	std	Y+1, r14	; 0x01
    185a:	36 01       	movw	r6, r12
    185c:	75 01       	movw	r14, r10
    185e:	46 01       	movw	r8, r12
    1860:	a9 80       	ldd	r10, Y+1	; 0x01
    1862:	ba 80       	ldd	r11, Y+2	; 0x02
    1864:	68 01       	movw	r12, r16
    1866:	8a 01       	movw	r16, r20
    1868:	9b 01       	movw	r18, r22
    186a:	41 ef       	ldi	r20, 0xF1	; 241
    186c:	51 e0       	ldi	r21, 0x01	; 1
    186e:	6c ef       	ldi	r22, 0xFC	; 252
    1870:	71 e0       	ldi	r23, 0x01	; 1
    1872:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN13Adafruit_FONA15HTTP_POST_startEPK19__FlashStringHelperS2_PKhjPjjS5_S5_>
    1876:	f8 2e       	mov	r15, r24
    1878:	8f 70       	andi	r24, 0x0F	; 15
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	78 f0       	brcs	.+30     	; 0x189c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x7a>
    187e:	6e ec       	ldi	r22, 0xCE	; 206
    1880:	71 e0       	ldi	r23, 0x01	; 1
    1882:	8e e9       	ldi	r24, 0x9E	; 158
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    188a:	6f 2d       	mov	r22, r15
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	4a e0       	ldi	r20, 0x0A	; 10
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	8e e9       	ldi	r24, 0x9E	; 158
    1894:	93 e0       	ldi	r25, 0x03	; 3
    1896:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN5Print7printlnEii>
    189a:	7b c0       	rjmp	.+246    	; 0x1992 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x170>
    189c:	61 eb       	ldi	r22, 0xB1	; 177
    189e:	71 e0       	ldi	r23, 0x01	; 1
    18a0:	8e e9       	ldi	r24, 0x9E	; 158
    18a2:	93 e0       	ldi	r25, 0x03	; 3
    18a4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    18a8:	a9 81       	ldd	r26, Y+1	; 0x01
    18aa:	ba 81       	ldd	r27, Y+2	; 0x02
    18ac:	6d 91       	ld	r22, X+
    18ae:	7c 91       	ld	r23, X
    18b0:	4a e0       	ldi	r20, 0x0A	; 10
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	8e e9       	ldi	r24, 0x9E	; 158
    18b6:	93 e0       	ldi	r25, 0x03	; 3
    18b8:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    18bc:	6b e9       	ldi	r22, 0x9B	; 155
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	8e e9       	ldi	r24, 0x9E	; 158
    18c2:	93 e0       	ldi	r25, 0x03	; 3
    18c4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    18c8:	4a e0       	ldi	r20, 0x0A	; 10
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	b2 01       	movw	r22, r4
    18ce:	8e e9       	ldi	r24, 0x9E	; 158
    18d0:	93 e0       	ldi	r25, 0x03	; 3
    18d2:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    18d6:	6e e7       	ldi	r22, 0x7E	; 126
    18d8:	71 e0       	ldi	r23, 0x01	; 1
    18da:	8e e9       	ldi	r24, 0x9E	; 158
    18dc:	93 e0       	ldi	r25, 0x03	; 3
    18de:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    18e2:	f3 01       	movw	r30, r6
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	4a e0       	ldi	r20, 0x0A	; 10
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	8e e9       	ldi	r24, 0x9E	; 158
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	0e 94 96 1b 	call	0x372c	; 0x372c <_ZN5Print7printlnEji>
    18f4:	00 e0       	ldi	r16, 0x00	; 0
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	61 14       	cp	r6, r1
    18fa:	71 04       	cpc	r7, r1
    18fc:	e1 f1       	breq	.+120    	; 0x1976 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x154>
    18fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1900:	bc 81       	ldd	r27, Y+4	; 0x04
    1902:	ed 91       	ld	r30, X+
    1904:	fc 91       	ld	r31, X
    1906:	11 97       	sbiw	r26, 0x01	; 1
    1908:	04 80       	ldd	r0, Z+4	; 0x04
    190a:	f5 81       	ldd	r31, Z+5	; 0x05
    190c:	e0 2d       	mov	r30, r0
    190e:	cd 01       	movw	r24, r26
    1910:	09 95       	icall
    1912:	89 2b       	or	r24, r25
    1914:	89 f3       	breq	.-30     	; 0x18f8 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0xd6>
    1916:	ab 81       	ldd	r26, Y+3	; 0x03
    1918:	bc 81       	ldd	r27, Y+4	; 0x04
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	11 97       	sbiw	r26, 0x01	; 1
    1920:	06 80       	ldd	r0, Z+6	; 0x06
    1922:	f7 81       	ldd	r31, Z+7	; 0x07
    1924:	e0 2d       	mov	r30, r0
    1926:	cd 01       	movw	r24, r26
    1928:	09 95       	icall
    192a:	e8 2e       	mov	r14, r24
    192c:	04 15       	cp	r16, r4
    192e:	15 05       	cpc	r17, r5
    1930:	a8 f4       	brcc	.+42     	; 0x195c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x13a>
    1932:	65 e7       	ldi	r22, 0x75	; 117
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	8e e9       	ldi	r24, 0x9E	; 158
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    193e:	69 e2       	ldi	r22, 0x29	; 41
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	8e e9       	ldi	r24, 0x9E	; 158
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    194a:	6e 2d       	mov	r22, r14
    194c:	8e e9       	ldi	r24, 0x9E	; 158
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	0e 94 0f 1b 	call	0x361e	; 0x361e <_ZN5Print7printlnEc>
    1954:	f1 01       	movw	r30, r2
    1956:	e0 0f       	add	r30, r16
    1958:	f1 1f       	adc	r31, r17
    195a:	e0 82       	st	Z, r14
    195c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1960:	85 ff       	sbrs	r24, 5
    1962:	fc cf       	rjmp	.-8      	; 0x195c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0x13a>
    1964:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1968:	0f 5f       	subi	r16, 0xFF	; 255
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	b2 e0       	ldi	r27, 0x02	; 2
    196e:	6b 1a       	sub	r6, r27
    1970:	71 08       	sbc	r7, r1
    1972:	29 f6       	brne	.-118    	; 0x18fe <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0xdc>
    1974:	c1 cf       	rjmp	.-126    	; 0x18f8 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_+0xd6>
    1976:	f1 01       	movw	r30, r2
    1978:	e0 0f       	add	r30, r16
    197a:	f1 1f       	adc	r31, r17
    197c:	10 82       	st	Z, r1
    197e:	6c e7       	ldi	r22, 0x7C	; 124
    1980:	71 e0       	ldi	r23, 0x01	; 1
    1982:	8e e9       	ldi	r24, 0x9E	; 158
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN13Adafruit_FONA9HTTP_termEv>
    1992:	8f 2d       	mov	r24, r15
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	9f 90       	pop	r9
    19b2:	8f 90       	pop	r8
    19b4:	7f 90       	pop	r7
    19b6:	6f 90       	pop	r6
    19b8:	5f 90       	pop	r5
    19ba:	4f 90       	pop	r4
    19bc:	3f 90       	pop	r3
    19be:	2f 90       	pop	r2
    19c0:	08 95       	ret

000019c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    19c2:	af 92       	push	r10
    19c4:	bf 92       	push	r11
    19c6:	cf 92       	push	r12
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	ec 01       	movw	r28, r24
    19d6:	6a 01       	movw	r12, r20
    19d8:	59 01       	movw	r10, r18
    19da:	10 2f       	mov	r17, r16
    19dc:	0e 2d       	mov	r16, r14
    19de:	44 ef       	ldi	r20, 0xF4	; 244
    19e0:	51 e0       	ldi	r21, 0x01	; 1
    19e2:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    19e6:	21 2f       	mov	r18, r17
    19e8:	a5 01       	movw	r20, r10
    19ea:	b6 01       	movw	r22, r12
    19ec:	ce 01       	movw	r24, r28
    19ee:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    19f2:	18 2f       	mov	r17, r24
    19f4:	88 23       	and	r24, r24
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	64 ef       	ldi	r22, 0xF4	; 244
    19fc:	71 e0       	ldi	r23, 0x01	; 1
    19fe:	ce 01       	movw	r24, r28
    1a00:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA8readlineEjb>
    1a04:	81 2f       	mov	r24, r17
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	08 95       	ret

00001a1a <_ZN13Adafruit_FONA14getBattPercentEPj>:
    1a1a:	ef 92       	push	r14
    1a1c:	0f 93       	push	r16
    1a1e:	9b 01       	movw	r18, r22
    1a20:	ee 24       	eor	r14, r14
    1a22:	e3 94       	inc	r14
    1a24:	0c e2       	ldi	r16, 0x2C	; 44
    1a26:	49 e3       	ldi	r20, 0x39	; 57
    1a28:	53 e0       	ldi	r21, 0x03	; 3
    1a2a:	62 e3       	ldi	r22, 0x32	; 50
    1a2c:	73 e0       	ldi	r23, 0x03	; 3
    1a2e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a32:	0f 91       	pop	r16
    1a34:	ef 90       	pop	r14
    1a36:	08 95       	ret

00001a38 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	28 97       	sbiw	r28, 0x08	; 8
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1a5a:	18 86       	std	Y+8, r1	; 0x08
    1a5c:	1f 82       	std	Y+7, r1	; 0x07
    1a5e:	1e 82       	std	Y+6, r1	; 0x06
    1a60:	1d 82       	std	Y+5, r1	; 0x05
    1a62:	1c 82       	std	Y+4, r1	; 0x04
    1a64:	1b 82       	std	Y+3, r1	; 0x03
    1a66:	1a 82       	std	Y+2, r1	; 0x02
    1a68:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1a6a:	e1 2c       	mov	r14, r1
    1a6c:	0c e2       	ldi	r16, 0x2C	; 44
    1a6e:	9e 01       	movw	r18, r28
    1a70:	29 5f       	subi	r18, 0xF9	; 249
    1a72:	3f 4f       	sbci	r19, 0xFF	; 255
    1a74:	4b e2       	ldi	r20, 0x2B	; 43
    1a76:	53 e0       	ldi	r21, 0x03	; 3
    1a78:	64 e2       	ldi	r22, 0x24	; 36
    1a7a:	73 e0       	ldi	r23, 0x03	; 3
    1a7c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a80:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1a82:	ee 24       	eor	r14, r14
    1a84:	e3 94       	inc	r14
    1a86:	9e 01       	movw	r18, r28
    1a88:	2b 5f       	subi	r18, 0xFB	; 251
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	4d e1       	ldi	r20, 0x1D	; 29
    1a8e:	53 e0       	ldi	r21, 0x03	; 3
    1a90:	66 e1       	ldi	r22, 0x16	; 22
    1a92:	73 e0       	ldi	r23, 0x03	; 3
    1a94:	c6 01       	movw	r24, r12
    1a96:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	f8 26       	eor	r15, r24
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1aa4:	ff 24       	eor	r15, r15
    1aa6:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1aa8:	e1 2c       	mov	r14, r1
    1aaa:	0c e2       	ldi	r16, 0x2C	; 44
    1aac:	9e 01       	movw	r18, r28
    1aae:	2d 5f       	subi	r18, 0xFD	; 253
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	4e e0       	ldi	r20, 0x0E	; 14
    1ab4:	53 e0       	ldi	r21, 0x03	; 3
    1ab6:	65 e0       	ldi	r22, 0x05	; 5
    1ab8:	73 e0       	ldi	r23, 0x03	; 3
    1aba:	c6 01       	movw	r24, r12
    1abc:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1ac0:	88 23       	and	r24, r24
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1ac4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1ac8:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1aca:	ee 24       	eor	r14, r14
    1acc:	e3 94       	inc	r14
    1ace:	0c e2       	ldi	r16, 0x2C	; 44
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	2f 5f       	subi	r18, 0xFF	; 255
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	4d ef       	ldi	r20, 0xFD	; 253
    1ad8:	52 e0       	ldi	r21, 0x02	; 2
    1ada:	64 ef       	ldi	r22, 0xF4	; 244
    1adc:	72 e0       	ldi	r23, 0x02	; 2
    1ade:	c6 01       	movw	r24, r12
    1ae0:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1ae8:	91 2f       	mov	r25, r17
    1aea:	90 62       	ori	r25, 0x20	; 32
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1aee:	99 81       	ldd	r25, Y+1	; 0x01
    1af0:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1af2:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1af6:	8f 2d       	mov	r24, r15
    1af8:	28 96       	adiw	r28, 0x08	; 8
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	08 95       	ret

00001b16 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1b16:	fc 01       	movw	r30, r24
    1b18:	10 82       	st	Z, r1
    1b1a:	12 82       	std	Z+2, r1	; 0x02
    1b1c:	11 82       	std	Z+1, r1	; 0x01
    1b1e:	13 82       	std	Z+3, r1	; 0x03
    1b20:	14 82       	std	Z+4, r1	; 0x04
    1b22:	15 82       	std	Z+5, r1	; 0x05
    1b24:	16 82       	std	Z+6, r1	; 0x06
    1b26:	17 82       	std	Z+7, r1	; 0x07
    1b28:	12 86       	std	Z+10, r1	; 0x0a
    1b2a:	11 86       	std	Z+9, r1	; 0x09
    1b2c:	14 86       	std	Z+12, r1	; 0x0c
    1b2e:	13 86       	std	Z+11, r1	; 0x0b
    1b30:	08 95       	ret

00001b32 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1b32:	2a e0       	ldi	r18, 0x0A	; 10
    1b34:	82 9f       	mul	r24, r18
    1b36:	c0 01       	movw	r24, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	09 96       	adiw	r24, 0x09	; 9
    1b3c:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <_ZN7Helpers14base64_enc_lenEi>

00001b40 <_ZN10GsmPayload16createRawPayloadEPh>:
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	ec 01       	movw	r28, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	29 e0       	ldi	r18, 0x09	; 9
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	db 01       	movw	r26, r22
    1b4e:	01 90       	ld	r0, Z+
    1b50:	0d 92       	st	X+, r0
    1b52:	2a 95       	dec	r18
    1b54:	e1 f7       	brne	.-8      	; 0x1b4e <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1b56:	4b 81       	ldd	r20, Y+3	; 0x03
    1b58:	2a e0       	ldi	r18, 0x0A	; 10
    1b5a:	42 9f       	mul	r20, r18
    1b5c:	a0 01       	movw	r20, r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	09 96       	adiw	r24, 0x09	; 9
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	0c 94 d3 23 	jmp	0x47a6	; 0x47a6 <memcpy>

00001b6e <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1b6e:	af 92       	push	r10
    1b70:	bf 92       	push	r11
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	6b 01       	movw	r12, r22
    1b88:	ed b6       	in	r14, 0x3d	; 61
    1b8a:	fe b6       	in	r15, 0x3e	; 62
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	03 81       	ldd	r16, Z+3	; 0x03
    1b90:	fa e0       	ldi	r31, 0x0A	; 10
    1b92:	0f 9f       	mul	r16, r31
    1b94:	80 01       	movw	r16, r0
    1b96:	11 24       	eor	r1, r1
    1b98:	07 5f       	subi	r16, 0xF7	; 247
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	2d b7       	in	r18, 0x3d	; 61
    1b9e:	3e b7       	in	r19, 0x3e	; 62
    1ba0:	20 1b       	sub	r18, r16
    1ba2:	31 0b       	sbc	r19, r17
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	3e bf       	out	0x3e, r19	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	2d bf       	out	0x3d, r18	; 61
    1bae:	ed b7       	in	r30, 0x3d	; 61
    1bb0:	fe b7       	in	r31, 0x3e	; 62
    1bb2:	31 96       	adiw	r30, 0x01	; 1
    1bb4:	5f 01       	movw	r10, r30
    1bb6:	bf 01       	movw	r22, r30
    1bb8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <_ZN10GsmPayload16createRawPayloadEPh>
    1bbc:	a8 01       	movw	r20, r16
    1bbe:	b5 01       	movw	r22, r10
    1bc0:	c6 01       	movw	r24, r12
    1bc2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_ZN7Helpers13base64_encodeEPcPhi>
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	fe be       	out	0x3e, r15	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	ed be       	out	0x3d, r14	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	bf 90       	pop	r11
    1be2:	af 90       	pop	r10
    1be4:	08 95       	ret

00001be6 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1be6:	fc 01       	movw	r30, r24
    1be8:	74 87       	std	Z+12, r23	; 0x0c
    1bea:	63 87       	std	Z+11, r22	; 0x0b
    1bec:	43 83       	std	Z+3, r20	; 0x03
    1bee:	08 95       	ret

00001bf0 <_ZN10GsmPayload11setModuleIdEh>:
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	60 83       	st	Z, r22
    1bf4:	08 95       	ret

00001bf6 <_ZN10GsmPayload13getBootNumberEv>:
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	81 81       	ldd	r24, Z+1	; 0x01
    1bfa:	92 81       	ldd	r25, Z+2	; 0x02
    1bfc:	08 95       	ret

00001bfe <_ZN10GsmPayload13setBootNumberEj>:
    1bfe:	fc 01       	movw	r30, r24
    1c00:	72 83       	std	Z+2, r23	; 0x02
    1c02:	61 83       	std	Z+1, r22	; 0x01
    1c04:	08 95       	ret

00001c06 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1c06:	fc 01       	movw	r30, r24
    1c08:	45 83       	std	Z+5, r20	; 0x05
    1c0a:	56 83       	std	Z+6, r21	; 0x06
    1c0c:	67 83       	std	Z+7, r22	; 0x07
    1c0e:	70 87       	std	Z+8, r23	; 0x08
    1c10:	08 95       	ret

00001c12 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	ec 01       	movw	r28, r24
    1c18:	6a e3       	ldi	r22, 0x3A	; 58
    1c1a:	74 e0       	ldi	r23, 0x04	; 4
    1c1c:	8e e9       	ldi	r24, 0x9E	; 158
    1c1e:	93 e0       	ldi	r25, 0x03	; 3
    1c20:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1c24:	4a e0       	ldi	r20, 0x0A	; 10
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	68 81       	ld	r22, Y
    1c2a:	8e e9       	ldi	r24, 0x9E	; 158
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <_ZN5Print5printEhi>
    1c32:	66 e3       	ldi	r22, 0x36	; 54
    1c34:	74 e0       	ldi	r23, 0x04	; 4
    1c36:	8e e9       	ldi	r24, 0x9E	; 158
    1c38:	93 e0       	ldi	r25, 0x03	; 3
    1c3a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1c3e:	61 e3       	ldi	r22, 0x31	; 49
    1c40:	74 e0       	ldi	r23, 0x04	; 4
    1c42:	8e e9       	ldi	r24, 0x9E	; 158
    1c44:	93 e0       	ldi	r25, 0x03	; 3
    1c46:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1c4a:	4a e0       	ldi	r20, 0x0A	; 10
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	69 81       	ldd	r22, Y+1	; 0x01
    1c50:	8e e9       	ldi	r24, 0x9E	; 158
    1c52:	93 e0       	ldi	r25, 0x03	; 3
    1c54:	0e 94 77 1b 	call	0x36ee	; 0x36ee <_ZN5Print5printEhi>
    1c58:	6d e2       	ldi	r22, 0x2D	; 45
    1c5a:	74 e0       	ldi	r23, 0x04	; 4
    1c5c:	8e e9       	ldi	r24, 0x9E	; 158
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1c64:	68 e1       	ldi	r22, 0x18	; 24
    1c66:	74 e0       	ldi	r23, 0x04	; 4
    1c68:	8e e9       	ldi	r24, 0x9E	; 158
    1c6a:	93 e0       	ldi	r25, 0x03	; 3
    1c6c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1c70:	6b 81       	ldd	r22, Y+3	; 0x03
    1c72:	63 70       	andi	r22, 0x03	; 3
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	4a e0       	ldi	r20, 0x0A	; 10
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	8e e9       	ldi	r24, 0x9E	; 158
    1c7c:	93 e0       	ldi	r25, 0x03	; 3
    1c7e:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN5Print5printEii>
    1c82:	6e e0       	ldi	r22, 0x0E	; 14
    1c84:	74 e0       	ldi	r23, 0x04	; 4
    1c86:	8e e9       	ldi	r24, 0x9E	; 158
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1c8e:	6b 81       	ldd	r22, Y+3	; 0x03
    1c90:	6c 71       	andi	r22, 0x1C	; 28
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	75 95       	asr	r23
    1c96:	67 95       	ror	r22
    1c98:	75 95       	asr	r23
    1c9a:	67 95       	ror	r22
    1c9c:	4a e0       	ldi	r20, 0x0A	; 10
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	8e e9       	ldi	r24, 0x9E	; 158
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN5Print5printEii>
    1ca8:	65 e0       	ldi	r22, 0x05	; 5
    1caa:	74 e0       	ldi	r23, 0x04	; 4
    1cac:	8e e9       	ldi	r24, 0x9E	; 158
    1cae:	93 e0       	ldi	r25, 0x03	; 3
    1cb0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1cb4:	6b 81       	ldd	r22, Y+3	; 0x03
    1cb6:	65 fb       	bst	r22, 5
    1cb8:	66 27       	eor	r22, r22
    1cba:	60 f9       	bld	r22, 0
    1cbc:	4a e0       	ldi	r20, 0x0A	; 10
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	8e e9       	ldi	r24, 0x9E	; 158
    1cc4:	93 e0       	ldi	r25, 0x03	; 3
    1cc6:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN5Print5printEii>
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	74 e0       	ldi	r23, 0x04	; 4
    1cce:	8e e9       	ldi	r24, 0x9E	; 158
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1cd6:	64 ef       	ldi	r22, 0xF4	; 244
    1cd8:	73 e0       	ldi	r23, 0x03	; 3
    1cda:	8e e9       	ldi	r24, 0x9E	; 158
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1ce2:	4a e0       	ldi	r20, 0x0A	; 10
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ce8:	8e e9       	ldi	r24, 0x9E	; 158
    1cea:	93 e0       	ldi	r25, 0x03	; 3
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <_ZN5Print7printlnEhi>

00001cf4 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	22 81       	ldd	r18, Z+2	; 0x02
    1cf8:	21 11       	cpse	r18, r1
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1cfc:	90 81       	ld	r25, Z
    1cfe:	93 36       	cpi	r25, 0x63	; 99
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	97 30       	cpi	r25, 0x07	; 7
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	08 95       	ret

00001d0c <_ZN7Helpers15printSensorDataEP10SensorData>:
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	ec 01       	movw	r28, r24
    1d12:	6c ee       	ldi	r22, 0xEC	; 236
    1d14:	73 e0       	ldi	r23, 0x03	; 3
    1d16:	8e e9       	ldi	r24, 0x9E	; 158
    1d18:	93 e0       	ldi	r25, 0x03	; 3
    1d1a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d1e:	69 81       	ldd	r22, Y+1	; 0x01
    1d20:	7a 81       	ldd	r23, Y+2	; 0x02
    1d22:	4a e0       	ldi	r20, 0x0A	; 10
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	8e e9       	ldi	r24, 0x9E	; 158
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    1d2e:	68 ee       	ldi	r22, 0xE8	; 232
    1d30:	73 e0       	ldi	r23, 0x03	; 3
    1d32:	8e e9       	ldi	r24, 0x9E	; 158
    1d34:	93 e0       	ldi	r25, 0x03	; 3
    1d36:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d3a:	62 ee       	ldi	r22, 0xE2	; 226
    1d3c:	73 e0       	ldi	r23, 0x03	; 3
    1d3e:	8e e9       	ldi	r24, 0x9E	; 158
    1d40:	93 e0       	ldi	r25, 0x03	; 3
    1d42:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d46:	6b 81       	ldd	r22, Y+3	; 0x03
    1d48:	7c 81       	ldd	r23, Y+4	; 0x04
    1d4a:	4a e0       	ldi	r20, 0x0A	; 10
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	8e e9       	ldi	r24, 0x9E	; 158
    1d50:	93 e0       	ldi	r25, 0x03	; 3
    1d52:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    1d56:	6e ed       	ldi	r22, 0xDE	; 222
    1d58:	73 e0       	ldi	r23, 0x03	; 3
    1d5a:	8e e9       	ldi	r24, 0x9E	; 158
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d62:	65 ed       	ldi	r22, 0xD5	; 213
    1d64:	73 e0       	ldi	r23, 0x03	; 3
    1d66:	8e e9       	ldi	r24, 0x9E	; 158
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d6e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d70:	7e 81       	ldd	r23, Y+6	; 0x06
    1d72:	4a e0       	ldi	r20, 0x0A	; 10
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	8e e9       	ldi	r24, 0x9E	; 158
    1d78:	93 e0       	ldi	r25, 0x03	; 3
    1d7a:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    1d7e:	61 ed       	ldi	r22, 0xD1	; 209
    1d80:	73 e0       	ldi	r23, 0x03	; 3
    1d82:	8e e9       	ldi	r24, 0x9E	; 158
    1d84:	93 e0       	ldi	r25, 0x03	; 3
    1d86:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d8a:	6b ec       	ldi	r22, 0xCB	; 203
    1d8c:	73 e0       	ldi	r23, 0x03	; 3
    1d8e:	8e e9       	ldi	r24, 0x9E	; 158
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	4a e0       	ldi	r20, 0x0A	; 10
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	8e e9       	ldi	r24, 0x9E	; 158
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    1da6:	67 ec       	ldi	r22, 0xC7	; 199
    1da8:	73 e0       	ldi	r23, 0x03	; 3
    1daa:	8e e9       	ldi	r24, 0x9E	; 158
    1dac:	93 e0       	ldi	r25, 0x03	; 3
    1dae:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1db2:	60 ec       	ldi	r22, 0xC0	; 192
    1db4:	73 e0       	ldi	r23, 0x03	; 3
    1db6:	8e e9       	ldi	r24, 0x9E	; 158
    1db8:	93 e0       	ldi	r25, 0x03	; 3
    1dba:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    1dbe:	4a e0       	ldi	r20, 0x0A	; 10
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	69 85       	ldd	r22, Y+9	; 0x09
    1dc4:	8e e9       	ldi	r24, 0x9E	; 158
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <_ZN5Print7printlnEhi>

00001dd0 <_ZN7Helpers12freeListSizeEv>:
    1dd0:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    1dd4:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	30 97       	sbiw	r30, 0x00	; 0
    1dde:	49 f0       	breq	.+18     	; 0x1df2 <_ZN7Helpers12freeListSizeEv+0x22>
    1de0:	02 96       	adiw	r24, 0x02	; 2
    1de2:	20 81       	ld	r18, Z
    1de4:	31 81       	ldd	r19, Z+1	; 0x01
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	02 80       	ldd	r0, Z+2	; 0x02
    1dec:	f3 81       	ldd	r31, Z+3	; 0x03
    1dee:	e0 2d       	mov	r30, r0
    1df0:	f5 cf       	rjmp	.-22     	; 0x1ddc <_ZN7Helpers12freeListSizeEv+0xc>
    1df2:	08 95       	ret

00001df4 <_ZN7Helpers10freeMemoryEv>:
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <_ZN7Helpers10freeMemoryEv+0xa>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    1e06:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    1e0a:	8e 01       	movw	r16, r28
    1e0c:	0f 5f       	subi	r16, 0xFF	; 255
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	29 f4       	brne	.+10     	; 0x1e1e <_ZN7Helpers10freeMemoryEv+0x2a>
    1e14:	0c 58       	subi	r16, 0x8C	; 140
    1e16:	14 40       	sbci	r17, 0x04	; 4
    1e18:	1a 83       	std	Y+2, r17	; 0x02
    1e1a:	09 83       	std	Y+1, r16	; 0x01
    1e1c:	0a c0       	rjmp	.+20     	; 0x1e32 <_ZN7Helpers10freeMemoryEv+0x3e>
    1e1e:	08 1b       	sub	r16, r24
    1e20:	19 0b       	sbc	r17, r25
    1e22:	1a 83       	std	Y+2, r17	; 0x02
    1e24:	09 83       	std	Y+1, r16	; 0x01
    1e26:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN7Helpers12freeListSizeEv>
    1e2a:	80 0f       	add	r24, r16
    1e2c:	91 1f       	adc	r25, r17
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <_ZN7Helpers14base64_enc_lenEi>:
    1e44:	9c 01       	movw	r18, r24
    1e46:	2e 5f       	subi	r18, 0xFE	; 254
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	e3 e0       	ldi	r30, 0x03	; 3
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	c9 01       	movw	r24, r18
    1e50:	bf 01       	movw	r22, r30
    1e52:	0e 94 47 21 	call	0x428e	; 0x428e <__divmodhi4>
    1e56:	a9 01       	movw	r20, r18
    1e58:	48 1b       	sub	r20, r24
    1e5a:	59 0b       	sbc	r21, r25
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	bf 01       	movw	r22, r30
    1e60:	0e 94 47 21 	call	0x428e	; 0x428e <__divmodhi4>
    1e64:	cb 01       	movw	r24, r22
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	08 95       	ret

00001e72 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1e72:	dc 01       	movw	r26, r24
    1e74:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1e76:	80 81       	ld	r24, Z
    1e78:	86 95       	lsr	r24
    1e7a:	86 95       	lsr	r24
    1e7c:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1e7e:	80 81       	ld	r24, Z
    1e80:	83 70       	andi	r24, 0x03	; 3
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	92 95       	swap	r25
    1e86:	9f 70       	andi	r25, 0x0F	; 15
    1e88:	20 e1       	ldi	r18, 0x10	; 16
    1e8a:	82 9f       	mul	r24, r18
    1e8c:	90 0d       	add	r25, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	11 96       	adiw	r26, 0x01	; 1
    1e92:	9c 93       	st	X, r25
    1e94:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	9f 70       	andi	r25, 0x0F	; 15
    1e9a:	99 0f       	add	r25, r25
    1e9c:	99 0f       	add	r25, r25
    1e9e:	22 81       	ldd	r18, Z+2	; 0x02
    1ea0:	22 95       	swap	r18
    1ea2:	26 95       	lsr	r18
    1ea4:	26 95       	lsr	r18
    1ea6:	23 70       	andi	r18, 0x03	; 3
    1ea8:	92 0f       	add	r25, r18
    1eaa:	12 96       	adiw	r26, 0x02	; 2
    1eac:	9c 93       	st	X, r25
    1eae:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	8f 73       	andi	r24, 0x3F	; 63
    1eb4:	13 96       	adiw	r26, 0x03	; 3
    1eb6:	8c 93       	st	X, r24
    1eb8:	08 95       	ret

00001eba <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1eba:	6f 92       	push	r6
    1ebc:	7f 92       	push	r7
    1ebe:	8f 92       	push	r8
    1ec0:	9f 92       	push	r9
    1ec2:	af 92       	push	r10
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	27 97       	sbiw	r28, 0x07	; 7
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	6c 01       	movw	r12, r24
    1ee8:	5b 01       	movw	r10, r22
    1eea:	3b 01       	movw	r6, r22
    1eec:	64 0e       	add	r6, r20
    1eee:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1ef0:	e1 2c       	mov	r14, r1
    1ef2:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1ef4:	00 e0       	ldi	r16, 0x00	; 0
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1ef8:	4e 01       	movw	r8, r28
    1efa:	85 e0       	ldi	r24, 0x05	; 5
    1efc:	88 0e       	add	r8, r24
    1efe:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1f00:	6a 14       	cp	r6, r10
    1f02:	7b 04       	cpc	r7, r11
    1f04:	49 f1       	breq	.+82     	; 0x1f58 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1f06:	c8 01       	movw	r24, r16
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	f5 01       	movw	r30, r10
    1f0c:	21 91       	ld	r18, Z+
    1f0e:	5f 01       	movw	r10, r30
    1f10:	f4 01       	movw	r30, r8
    1f12:	e0 0f       	add	r30, r16
    1f14:	f1 1f       	adc	r31, r17
    1f16:	20 83       	st	Z, r18
		if(i == 3) {
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	11 f0       	breq	.+4      	; 0x1f22 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1f1e:	8c 01       	movw	r16, r24
    1f20:	ef cf       	rjmp	.-34     	; 0x1f00 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1f22:	b4 01       	movw	r22, r8
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z8a3_to_a4PhS_>
    1f2c:	de 01       	movw	r26, r28
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	c6 01       	movw	r24, r12
    1f32:	8e 0d       	add	r24, r14
    1f34:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1f36:	ed 91       	ld	r30, X+
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	e0 5c       	subi	r30, 0xC0	; 192
    1f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f3e:	24 91       	lpm	r18, Z
    1f40:	fc 01       	movw	r30, r24
    1f42:	21 93       	st	Z+, r18
    1f44:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1f46:	a8 15       	cp	r26, r8
    1f48:	b9 05       	cpc	r27, r9
    1f4a:	a9 f7       	brne	.-22     	; 0x1f36 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1f4c:	f4 e0       	ldi	r31, 0x04	; 4
    1f4e:	ef 0e       	add	r14, r31
    1f50:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	e3 cf       	rjmp	.-58     	; 0x1f1e <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1f58:	01 15       	cp	r16, r1
    1f5a:	11 05       	cpc	r17, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1f5e:	3c c0       	rjmp	.+120    	; 0x1fd8 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1f60:	be 01       	movw	r22, r28
    1f62:	6b 5f       	subi	r22, 0xFB	; 251
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	fb 01       	movw	r30, r22
    1f68:	e0 0f       	add	r30, r16
    1f6a:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1f6c:	cf 01       	movw	r24, r30
    1f6e:	86 1b       	sub	r24, r22
    1f70:	97 0b       	sbc	r25, r23
    1f72:	03 97       	sbiw	r24, 0x03	; 3
    1f74:	14 f4       	brge	.+4      	; 0x1f7a <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1f76:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1f78:	f9 cf       	rjmp	.-14     	; 0x1f6c <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	5c 01       	movw	r10, r24
    1f80:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z8a3_to_a4PhS_>
    1f84:	c6 01       	movw	r24, r12
    1f86:	8e 0d       	add	r24, r14
    1f88:	9f 1d       	adc	r25, r15
    1f8a:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1f8c:	ed 91       	ld	r30, X+
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	e0 5c       	subi	r30, 0xC0	; 192
    1f92:	fb 4f       	sbci	r31, 0xFB	; 251
    1f94:	24 91       	lpm	r18, Z
    1f96:	fc 01       	movw	r30, r24
    1f98:	21 93       	st	Z+, r18
    1f9a:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1f9c:	9d 01       	movw	r18, r26
    1f9e:	2a 19       	sub	r18, r10
    1fa0:	3b 09       	sbc	r19, r11
    1fa2:	02 17       	cp	r16, r18
    1fa4:	13 07       	cpc	r17, r19
    1fa6:	94 f7       	brge	.-28     	; 0x1f8c <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1fa8:	ff ef       	ldi	r31, 0xFF	; 255
    1faa:	ef 1a       	sub	r14, r31
    1fac:	ff 0a       	sbc	r15, r31
    1fae:	e0 0e       	add	r14, r16
    1fb0:	f1 1e       	adc	r15, r17
    1fb2:	f6 01       	movw	r30, r12
    1fb4:	ee 0d       	add	r30, r14
    1fb6:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1fb8:	0c 19       	sub	r16, r12
    1fba:	1d 09       	sbc	r17, r13
    1fbc:	0e 19       	sub	r16, r14
    1fbe:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1fc0:	8d e3       	ldi	r24, 0x3D	; 61
    1fc2:	7f 01       	movw	r14, r30
    1fc4:	ec 18       	sub	r14, r12
    1fc6:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1fc8:	98 01       	movw	r18, r16
    1fca:	2e 0f       	add	r18, r30
    1fcc:	3f 1f       	adc	r19, r31
    1fce:	23 30       	cpi	r18, 0x03	; 3
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	14 f4       	brge	.+4      	; 0x1fd8 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1fd4:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1fd6:	f5 cf       	rjmp	.-22     	; 0x1fc2 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1fd8:	f6 01       	movw	r30, r12
    1fda:	ee 0d       	add	r30, r14
    1fdc:	ff 1d       	adc	r31, r15
    1fde:	10 82       	st	Z, r1
	
	return encLen;
}
    1fe0:	c7 01       	movw	r24, r14
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	27 96       	adiw	r28, 0x07	; 7
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	0f 91       	pop	r16
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	df 90       	pop	r13
    1ffe:	cf 90       	pop	r12
    2000:	bf 90       	pop	r11
    2002:	af 90       	pop	r10
    2004:	9f 90       	pop	r9
    2006:	8f 90       	pop	r8
    2008:	7f 90       	pop	r7
    200a:	6f 90       	pop	r6
    200c:	08 95       	ret

0000200e <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	85 e0       	ldi	r24, 0x05	; 5
    2012:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <pinMode>
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	85 e0       	ldi	r24, 0x05	; 5
    201a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
    201e:	68 eb       	ldi	r22, 0xB8	; 184
    2020:	7b e0       	ldi	r23, 0x0B	; 11
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	8d e0       	ldi	r24, 0x0D	; 13
    202e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <pinMode>
    2032:	26 e0       	ldi	r18, 0x06	; 6
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	55 e2       	ldi	r21, 0x25	; 37
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	8e e9       	ldi	r24, 0x9E	; 158
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN14HardwareSerial5beginEmh>
    2044:	6b ec       	ldi	r22, 0xCB	; 203
    2046:	76 e0       	ldi	r23, 0x06	; 6
    2048:	8e e9       	ldi	r24, 0x9E	; 158
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2050:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2054:	84 60       	ori	r24, 0x04	; 4
    2056:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
    205a:	08 95       	ret

0000205c <_Z21ensureFonaInitialisedb>:
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	2c 97       	sbiw	r28, 0x0c	; 12
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	18 2f       	mov	r17, r24
    2076:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    207a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__initState+0xa>
    2084:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__initState+0x9>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__initState+0x2>
    208e:	89 eb       	ldi	r24, 0xB9	; 185
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__initState+0x1>
    2096:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__initState>
    209a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    209e:	81 11       	cpse	r24, r1
    20a0:	34 c0       	rjmp	.+104    	; 0x210a <_Z21ensureFonaInitialisedb+0xae>
    20a2:	66 eb       	ldi	r22, 0xB6	; 182
    20a4:	76 e0       	ldi	r23, 0x06	; 6
    20a6:	8e e9       	ldi	r24, 0x9E	; 158
    20a8:	93 e0       	ldi	r25, 0x03	; 3
    20aa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20ae:	42 e0       	ldi	r20, 0x02	; 2
    20b0:	63 e0       	ldi	r22, 0x03	; 3
    20b2:	89 eb       	ldi	r24, 0xB9	; 185
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	0e 94 52 07 	call	0xea4	; 0xea4 <_ZN13Adafruit_FONA5beginEhh>
    20ba:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__initState+0x3>
    20be:	8e ea       	ldi	r24, 0xAE	; 174
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN12RmMemManager11getModuleIdEv>
    20c6:	08 2f       	mov	r16, r24
    20c8:	6b e3       	ldi	r22, 0x3B	; 59
    20ca:	71 e0       	ldi	r23, 0x01	; 1
    20cc:	ce 01       	movw	r24, r28
    20ce:	07 96       	adiw	r24, 0x07	; 7
    20d0:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <_ZN6StringC1EPKc>
    20d4:	60 2f       	mov	r22, r16
    20d6:	ce 01       	movw	r24, r28
    20d8:	07 96       	adiw	r24, 0x07	; 7
    20da:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_ZN6String6concatEh>
    20de:	be 01       	movw	r22, r28
    20e0:	69 5f       	subi	r22, 0xF9	; 249
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	ce 01       	movw	r24, r28
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <_ZN6StringC1ERKS_>
    20ec:	be 01       	movw	r22, r28
    20ee:	6f 5f       	subi	r22, 0xFF	; 255
    20f0:	7f 4f       	sbci	r23, 0xFF	; 255
    20f2:	89 eb       	ldi	r24, 0xB9	; 185
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_ZN13Adafruit_FONA12setUserAgentE6String>
    20fa:	ce 01       	movw	r24, r28
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <_ZN6StringD1Ev>
    2102:	ce 01       	movw	r24, r28
    2104:	07 96       	adiw	r24, 0x07	; 7
    2106:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <_ZN6StringD1Ev>
    210a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__initState+0x3>
    210e:	83 50       	subi	r24, 0x03	; 3
    2110:	82 30       	cpi	r24, 0x02	; 2
    2112:	b0 f4       	brcc	.+44     	; 0x2140 <_Z21ensureFonaInitialisedb+0xe4>
    2114:	6b e9       	ldi	r22, 0x9B	; 155
    2116:	76 e0       	ldi	r23, 0x06	; 6
    2118:	8e e9       	ldi	r24, 0x9E	; 158
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    2120:	69 e2       	ldi	r22, 0x29	; 41
    2122:	71 e0       	ldi	r23, 0x01	; 1
    2124:	8e e9       	ldi	r24, 0x9E	; 158
    2126:	93 e0       	ldi	r25, 0x03	; 3
    2128:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    212c:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <__initState+0x3>
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	4a e0       	ldi	r20, 0x0A	; 10
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	8e e9       	ldi	r24, 0x9E	; 158
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN5Print7printlnEii>
    213e:	65 c0       	rjmp	.+202    	; 0x220a <_Z21ensureFonaInitialisedb+0x1ae>
    2140:	11 23       	and	r17, r17
    2142:	09 f4       	brne	.+2      	; 0x2146 <_Z21ensureFonaInitialisedb+0xea>
    2144:	b1 c0       	rjmp	.+354    	; 0x22a8 <_Z21ensureFonaInitialisedb+0x24c>
    2146:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    214a:	81 11       	cpse	r24, r1
    214c:	49 c0       	rjmp	.+146    	; 0x21e0 <_Z21ensureFonaInitialisedb+0x184>
    214e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    2152:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    2156:	6a e0       	ldi	r22, 0x0A	; 10
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	0e 94 33 21 	call	0x4266	; 0x4266 <__udivmodhi4>
    215e:	89 2b       	or	r24, r25
    2160:	19 f0       	breq	.+6      	; 0x2168 <_Z21ensureFonaInitialisedb+0x10c>
    2162:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2166:	3c c0       	rjmp	.+120    	; 0x21e0 <_Z21ensureFonaInitialisedb+0x184>
    2168:	6e e7       	ldi	r22, 0x7E	; 126
    216a:	76 e0       	ldi	r23, 0x06	; 6
    216c:	8e e9       	ldi	r24, 0x9E	; 158
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	89 eb       	ldi	r24, 0xB9	; 185
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	0e 94 2e 09 	call	0x125c	; 0x125c <_ZN13Adafruit_FONA10enableGPRSEb>
    217e:	18 2f       	mov	r17, r24
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	81 0f       	add	r24, r17
    2184:	82 30       	cpi	r24, 0x02	; 2
    2186:	20 f1       	brcs	.+72     	; 0x21d0 <_Z21ensureFonaInitialisedb+0x174>
    2188:	66 e6       	ldi	r22, 0x66	; 102
    218a:	76 e0       	ldi	r23, 0x06	; 6
    218c:	8e e9       	ldi	r24, 0x9E	; 158
    218e:	93 e0       	ldi	r25, 0x03	; 3
    2190:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    2194:	69 e2       	ldi	r22, 0x29	; 41
    2196:	71 e0       	ldi	r23, 0x01	; 1
    2198:	8e e9       	ldi	r24, 0x9E	; 158
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    21a0:	61 2f       	mov	r22, r17
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	4a e0       	ldi	r20, 0x0A	; 10
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	8e e9       	ldi	r24, 0x9E	; 158
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN5Print7printlnEii>
    21b0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__initState+0x9>
    21b4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__initState+0xa>
    21b8:	cc 97       	sbiw	r24, 0x3c	; 60
    21ba:	28 f4       	brcc	.+10     	; 0x21c6 <_Z21ensureFonaInitialisedb+0x16a>
    21bc:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    21c0:	60 e4       	ldi	r22, 0x40	; 64
    21c2:	76 e0       	ldi	r23, 0x06	; 6
    21c4:	09 c0       	rjmp	.+18     	; 0x21d8 <_Z21ensureFonaInitialisedb+0x17c>
    21c6:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    21ca:	6d e1       	ldi	r22, 0x1D	; 29
    21cc:	76 e0       	ldi	r23, 0x06	; 6
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <_Z21ensureFonaInitialisedb+0x17c>
    21d0:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__initState+0x4>
    21d4:	6d ef       	ldi	r22, 0xFD	; 253
    21d6:	75 e0       	ldi	r23, 0x05	; 5
    21d8:	8e e9       	ldi	r24, 0x9E	; 158
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    21e0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__initState+0x4>
    21e4:	81 50       	subi	r24, 0x01	; 1
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	80 f4       	brcc	.+32     	; 0x220a <_Z21ensureFonaInitialisedb+0x1ae>
    21ea:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    21ee:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__initState+0xc>
    21f8:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__initState+0xb>
    21fc:	83 ea       	ldi	r24, 0xA3	; 163
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    2204:	88 23       	and	r24, r24
    2206:	31 f0       	breq	.+12     	; 0x2214 <_Z21ensureFonaInitialisedb+0x1b8>
    2208:	4f c0       	rjmp	.+158    	; 0x22a8 <_Z21ensureFonaInitialisedb+0x24c>
    220a:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <__initState+0x1>
    220e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <__initState>
    2212:	4a c0       	rjmp	.+148    	; 0x22a8 <_Z21ensureFonaInitialisedb+0x24c>
    2214:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    2218:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    221c:	6a e0       	ldi	r22, 0x0A	; 10
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	0e 94 33 21 	call	0x4266	; 0x4266 <__udivmodhi4>
    2224:	89 2b       	or	r24, r25
    2226:	19 f0       	breq	.+6      	; 0x222e <_Z21ensureFonaInitialisedb+0x1d2>
    2228:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    222c:	3d c0       	rjmp	.+122    	; 0x22a8 <_Z21ensureFonaInitialisedb+0x24c>
    222e:	62 ee       	ldi	r22, 0xE2	; 226
    2230:	75 e0       	ldi	r23, 0x05	; 5
    2232:	8e e9       	ldi	r24, 0x9E	; 158
    2234:	93 e0       	ldi	r25, 0x03	; 3
    2236:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    223a:	89 eb       	ldi	r24, 0xB9	; 185
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN13Adafruit_FONA7getRSSIEv>
    2242:	69 83       	std	Y+1, r22	; 0x01
    2244:	7a 83       	std	Y+2, r23	; 0x02
    2246:	8b 83       	std	Y+3, r24	; 0x03
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	ce 01       	movw	r24, r28
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    2252:	ce 01       	movw	r24, r28
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    225a:	81 11       	cpse	r24, r1
    225c:	13 c0       	rjmp	.+38     	; 0x2284 <_Z21ensureFonaInitialisedb+0x228>
    225e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__initState+0xb>
    2262:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__initState+0xc>
    2266:	8c 32       	cpi	r24, 0x2C	; 44
    2268:	91 40       	sbci	r25, 0x01	; 1
    226a:	48 f4       	brcc	.+18     	; 0x227e <_Z21ensureFonaInitialisedb+0x222>
    226c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__initState+0x2>
    2270:	63 eb       	ldi	r22, 0xB3	; 179
    2272:	75 e0       	ldi	r23, 0x05	; 5
    2274:	8e e9       	ldi	r24, 0x9E	; 158
    2276:	93 e0       	ldi	r25, 0x03	; 3
    2278:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    227c:	15 c0       	rjmp	.+42     	; 0x22a8 <_Z21ensureFonaInitialisedb+0x24c>
    227e:	6b e7       	ldi	r22, 0x7B	; 123
    2280:	75 e0       	ldi	r23, 0x05	; 5
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <_Z21ensureFonaInitialisedb+0x22c>
    2284:	65 e5       	ldi	r22, 0x55	; 85
    2286:	75 e0       	ldi	r23, 0x05	; 5
    2288:	8e e9       	ldi	r24, 0x9E	; 158
    228a:	93 e0       	ldi	r25, 0x03	; 3
    228c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	ab 81       	ldd	r26, Y+3	; 0x03
    2296:	bc 81       	ldd	r27, Y+4	; 0x04
    2298:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <__initState+0x5>
    229c:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__initState+0x6>
    22a0:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__initState+0x7>
    22a4:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__initState+0x8>
    22a8:	8e e9       	ldi	r24, 0x9E	; 158
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	2c 96       	adiw	r28, 0x0c	; 12
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <_Z15switchOffSystemv>:
    22c2:	69 e4       	ldi	r22, 0x49	; 73
    22c4:	71 e0       	ldi	r23, 0x01	; 1
    22c6:	8e e9       	ldi	r24, 0x9E	; 158
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	85 e0       	ldi	r24, 0x05	; 5
    22d2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
    22d6:	68 eb       	ldi	r22, 0xB8	; 184
    22d8:	7b e0       	ldi	r23, 0x0B	; 11
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0c 94 9c 1c 	jmp	0x3938	; 0x3938 <delay>

000022e2 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	2a 97       	sbiw	r28, 0x0a	; 10
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    22f6:	62 e4       	ldi	r22, 0x42	; 66
    22f8:	75 e0       	ldi	r23, 0x05	; 5
    22fa:	8e e9       	ldi	r24, 0x9E	; 158
    22fc:	93 e0       	ldi	r25, 0x03	; 3
    22fe:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	1b 82       	std	Y+3, r1	; 0x03
    2308:	1a 82       	std	Y+2, r1	; 0x02
    230a:	1d 82       	std	Y+5, r1	; 0x05
    230c:	1c 82       	std	Y+4, r1	; 0x04
    230e:	1f 82       	std	Y+7, r1	; 0x07
    2310:	1e 82       	std	Y+6, r1	; 0x06
    2312:	19 86       	std	Y+9, r1	; 0x09
    2314:	18 86       	std	Y+8, r1	; 0x08
    2316:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    2318:	be 01       	movw	r22, r28
    231a:	6f 5f       	subi	r22, 0xFF	; 255
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	8c ea       	ldi	r24, 0xAC	; 172
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	0e 94 6e 14 	call	0x28dc	; 0x28dc <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	2a 96       	adiw	r28, 0x0a	; 10
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	08 95       	ret

0000233a <_Z17createEncodedDataPcPhhP14DailyCycleData>:

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
    233a:	5f 92       	push	r5
    233c:	6f 92       	push	r6
    233e:	7f 92       	push	r7
    2340:	8f 92       	push	r8
    2342:	9f 92       	push	r9
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	2d 97       	sbiw	r28, 0x0d	; 13
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	4c 01       	movw	r8, r24
    236a:	5b 01       	movw	r10, r22
    236c:	54 2e       	mov	r5, r20
    236e:	69 01       	movw	r12, r18
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
	payload.setRSSI(cycleData->RSSI);
	payload.createEncodedPayload(encodedOutput);
	
	cycleData->BootNo = payload.getBootNumber();
}
    2370:	6d b6       	in	r6, 0x3d	; 61
    2372:	7e b6       	in	r7, 0x3e	; 62
}

void createEncodedData(char* encodedOutput, uint8_t* outputNumLoaded, uint8_t maxReadings, DailyCycleData* cycleData) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int16_t freeRAM = Helpers::freeMemory();
    2374:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_ZN7Helpers10freeMemoryEv>
    2378:	7c 01       	movw	r14, r24
	int16_t minRAM = (sizeof(SensorData)*maxReadings)
    237a:	05 2d       	mov	r16, r5
    237c:	10 e0       	ldi	r17, 0x00	; 0
					+sizeof(GsmPayload)
					+100; //Buffer

	if (freeRAM < minRAM)
    237e:	2a e0       	ldi	r18, 0x0A	; 10
    2380:	52 9e       	mul	r5, r18
    2382:	c0 01       	movw	r24, r0
    2384:	11 24       	eor	r1, r1
    2386:	8f 58       	subi	r24, 0x8F	; 143
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	e8 16       	cp	r14, r24
    238c:	f9 06       	cpc	r15, r25
    238e:	34 f4       	brge	.+12     	; 0x239c <_Z17createEncodedDataPcPhhP14DailyCycleData+0x62>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    2390:	62 e1       	ldi	r22, 0x12	; 18
    2392:	75 e0       	ldi	r23, 0x05	; 5
    2394:	8e e9       	ldi	r24, 0x9E	; 158
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    239c:	69 e2       	ldi	r22, 0x29	; 41
    239e:	71 e0       	ldi	r23, 0x01	; 1
    23a0:	8e e9       	ldi	r24, 0x9E	; 158
    23a2:	93 e0       	ldi	r25, 0x03	; 3
    23a4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    23a8:	4a e0       	ldi	r20, 0x0A	; 10
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	b7 01       	movw	r22, r14
    23ae:	8e e9       	ldi	r24, 0x9E	; 158
    23b0:	93 e0       	ldi	r25, 0x03	; 3
    23b2:	0e 94 09 1c 	call	0x3812	; 0x3812 <_ZN5Print7printlnEii>
	
	SensorData sData[maxReadings];
    23b6:	2a e0       	ldi	r18, 0x0A	; 10
    23b8:	20 9f       	mul	r18, r16
    23ba:	c0 01       	movw	r24, r0
    23bc:	21 9f       	mul	r18, r17
    23be:	90 0d       	add	r25, r0
    23c0:	11 24       	eor	r1, r1
    23c2:	ed b7       	in	r30, 0x3d	; 61
    23c4:	fe b7       	in	r31, 0x3e	; 62
    23c6:	e8 1b       	sub	r30, r24
    23c8:	f9 0b       	sbc	r31, r25
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	fe bf       	out	0x3e, r31	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	ed bf       	out	0x3d, r30	; 61
    23d4:	2d b7       	in	r18, 0x3d	; 61
    23d6:	3e b7       	in	r19, 0x3e	; 62
    23d8:	2f 5f       	subi	r18, 0xFF	; 255
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	79 01       	movw	r14, r18
    23de:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	01 50       	subi	r16, 0x01	; 1
    23e4:	11 09       	sbc	r17, r1
    23e6:	60 f0       	brcs	.+24     	; 0x2400 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xc6>
    23e8:	80 83       	st	Z, r24
    23ea:	12 82       	std	Z+2, r1	; 0x02
    23ec:	11 82       	std	Z+1, r1	; 0x01
    23ee:	14 82       	std	Z+4, r1	; 0x04
    23f0:	13 82       	std	Z+3, r1	; 0x03
    23f2:	16 82       	std	Z+6, r1	; 0x06
    23f4:	15 82       	std	Z+5, r1	; 0x05
    23f6:	10 86       	std	Z+8, r1	; 0x08
    23f8:	17 82       	std	Z+7, r1	; 0x07
    23fa:	11 86       	std	Z+9, r1	; 0x09
    23fc:	3a 96       	adiw	r30, 0x0a	; 10
    23fe:	f1 cf       	rjmp	.-30     	; 0x23e2 <_Z17createEncodedDataPcPhhP14DailyCycleData+0xa8>
	*outputNumLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    2400:	45 2d       	mov	r20, r5
    2402:	b7 01       	movw	r22, r14
    2404:	8e ea       	ldi	r24, 0xAE	; 174
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    240c:	f5 01       	movw	r30, r10
    240e:	80 83       	st	Z, r24
	
	GsmPayload payload;
    2410:	ce 01       	movw	r24, r28
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    2418:	67 ee       	ldi	r22, 0xE7	; 231
    241a:	ce 01       	movw	r24, r28
    241c:	01 96       	adiw	r24, 0x01	; 1
    241e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    2422:	61 e2       	ldi	r22, 0x21	; 33
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	ce 01       	movw	r24, r28
    2428:	01 96       	adiw	r24, 0x01	; 1
    242a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, *outputNumLoaded);
    242e:	f5 01       	movw	r30, r10
    2430:	40 81       	ld	r20, Z
    2432:	b7 01       	movw	r22, r14
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(cycleData->RSSI);
    243c:	f6 01       	movw	r30, r12
    243e:	42 85       	ldd	r20, Z+10	; 0x0a
    2440:	53 85       	ldd	r21, Z+11	; 0x0b
    2442:	64 85       	ldd	r22, Z+12	; 0x0c
    2444:	75 85       	ldd	r23, Z+13	; 0x0d
    2446:	ce 01       	movw	r24, r28
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    244e:	b4 01       	movw	r22, r8
    2450:	ce 01       	movw	r24, r28
    2452:	01 96       	adiw	r24, 0x01	; 1
    2454:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN10GsmPayload20createEncodedPayloadEPc>
	
	cycleData->BootNo = payload.getBootNumber();
    2458:	ce 01       	movw	r24, r28
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <_ZN10GsmPayload13getBootNumberEv>
    2460:	f6 01       	movw	r30, r12
    2462:	93 83       	std	Z+3, r25	; 0x03
    2464:	82 83       	std	Z+2, r24	; 0x02
}
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	7e be       	out	0x3e, r7	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	6d be       	out	0x3d, r6	; 61
    2470:	2d 96       	adiw	r28, 0x0d	; 13
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	5f 90       	pop	r5
    249a:	08 95       	ret

0000249c <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    249c:	2f 92       	push	r2
    249e:	3f 92       	push	r3
    24a0:	4f 92       	push	r4
    24a2:	5f 92       	push	r5
    24a4:	6f 92       	push	r6
    24a6:	7f 92       	push	r7
    24a8:	8f 92       	push	r8
    24aa:	9f 92       	push	r9
    24ac:	af 92       	push	r10
    24ae:	bf 92       	push	r11
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	a2 97       	sbiw	r28, 0x22	; 34
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
	sendData.HTMLStatusCode = statuscode;
		
	mem.appendDailyEntry(&sendData);
		
	return true;
}
    24d0:	2d b6       	in	r2, 0x3d	; 61
    24d2:	3e b6       	in	r3, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    24d4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_sendDataLoopCount>
    24d8:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <_sendDataLoopCount+0x1>
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <_sendDataLoopCount+0x1>
    24e2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	31 f4       	brne	.+12     	; 0x24f6 <_Z8sendDatav+0x5a>
		RM_LOGLN(F("Initialising Fona to send data"));
    24ea:	63 ef       	ldi	r22, 0xF3	; 243
    24ec:	74 e0       	ldi	r23, 0x04	; 4
    24ee:	8e e9       	ldi	r24, 0x9E	; 158
    24f0:	93 e0       	ldi	r25, 0x03	; 3
    24f2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	INITIALISING_STATE* sendDataFona = ensureFonaInitialised(true);
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	0e 94 2e 10 	call	0x205c	; 0x205c <_Z21ensureFonaInitialisedb>
    24fc:	fc 01       	movw	r30, r24
	
	if (!sendDataFona->isComplete) {
    24fe:	22 81       	ldd	r18, Z+2	; 0x02
    2500:	2a a3       	std	Y+34, r18	; 0x22
    2502:	21 11       	cpse	r18, r1
    2504:	07 c0       	rjmp	.+14     	; 0x2514 <_Z8sendDatav+0x78>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    2506:	6b ed       	ldi	r22, 0xDB	; 219
    2508:	74 e0       	ldi	r23, 0x04	; 4
    250a:	8e e9       	ldi	r24, 0x9E	; 158
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return false; //Still waiting to initialise
    2512:	8c c0       	rjmp	.+280    	; 0x262c <_Z8sendDatav+0x190>
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	1a 82       	std	Y+2, r1	; 0x02
    251a:	1c 82       	std	Y+4, r1	; 0x04
    251c:	1b 82       	std	Y+3, r1	; 0x03
    251e:	1d 82       	std	Y+5, r1	; 0x05
    2520:	18 86       	std	Y+8, r1	; 0x08
    2522:	1a 86       	std	Y+10, r1	; 0x0a
    2524:	19 86       	std	Y+9, r1	; 0x09
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    2526:	1b 86       	std	Y+11, r1	; 0x0b
    2528:	1c 86       	std	Y+12, r1	; 0x0c
    252a:	1d 86       	std	Y+13, r1	; 0x0d
	}
		
	DailyCycleData sendData;
	sendData.InitStatus = sendDataFona->_fonaStatusInit;
    252c:	83 81       	ldd	r24, Z+3	; 0x03
    252e:	8e 83       	std	Y+6, r24	; 0x06
	sendData.GPRSInitStatus = sendDataFona->_gprsStatusInit;
    2530:	84 81       	ldd	r24, Z+4	; 0x04
    2532:	8f 83       	std	Y+7, r24	; 0x07
	sendData.RSSI = sendDataFona->_rssiStatusInit;
    2534:	85 81       	ldd	r24, Z+5	; 0x05
    2536:	96 81       	ldd	r25, Z+6	; 0x06
    2538:	a7 81       	ldd	r26, Z+7	; 0x07
    253a:	b0 85       	ldd	r27, Z+8	; 0x08
    253c:	8b 87       	std	Y+11, r24	; 0x0b
    253e:	9c 87       	std	Y+12, r25	; 0x0c
    2540:	ad 87       	std	Y+13, r26	; 0x0d
    2542:	be 87       	std	Y+14, r27	; 0x0e
		
	if (sendDataFona->fona == NULL) {
    2544:	80 80       	ld	r8, Z
    2546:	91 80       	ldd	r9, Z+1	; 0x01
    2548:	81 14       	cp	r8, r1
    254a:	91 04       	cpc	r9, r1
    254c:	39 f4       	brne	.+14     	; 0x255c <_Z8sendDatav+0xc0>
		
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    254e:	68 ec       	ldi	r22, 0xC8	; 200
    2550:	74 e0       	ldi	r23, 0x04	; 4
    2552:	8e e9       	ldi	r24, 0x9E	; 158
    2554:	93 e0       	ldi	r25, 0x03	; 3
    2556:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    255a:	61 c0       	rjmp	.+194    	; 0x261e <_Z8sendDatav+0x182>
	
	Adafruit_FONA* fona = (Adafruit_FONA*)sendDataFona->fona;
	
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t fullEncodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    255c:	84 e1       	ldi	r24, 0x14	; 20
    255e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
	char encodedData[fullEncodedSz];
    2562:	2d b7       	in	r18, 0x3d	; 61
    2564:	3e b7       	in	r19, 0x3e	; 62
    2566:	28 1b       	sub	r18, r24
    2568:	39 0b       	sbc	r19, r25
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	3e bf       	out	0x3e, r19	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	2d bf       	out	0x3d, r18	; 61
    2574:	8d b7       	in	r24, 0x3d	; 61
    2576:	9e b7       	in	r25, 0x3e	; 62
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	3c 01       	movw	r6, r24
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	uint8_t numReadingsLoaded;
	createEncodedData(encodedData, &numReadingsLoaded, GPRS_MAX_READINGS_FOR_SEND, &sendData);
    257c:	9e 01       	movw	r18, r28
    257e:	2f 5f       	subi	r18, 0xFF	; 255
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	44 e1       	ldi	r20, 0x14	; 20
    2584:	be 01       	movw	r22, r28
    2586:	6f 5d       	subi	r22, 0xDF	; 223
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	0e 94 9d 11 	call	0x233a	; 0x233a <_Z17createEncodedDataPcPhhP14DailyCycleData>
	sendData.NoOfReadings = numReadingsLoaded;
    258e:	89 a1       	ldd	r24, Y+33	; 0x21
    2590:	8d 83       	std	Y+5, r24	; 0x05
	
	uint16_t actualEncodedSz = GsmPayload::getEncodedPayloadSize_S(numReadingsLoaded);
    2592:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    2596:	2c 01       	movw	r4, r24

	RM_LOGLN(F("Encoded data created and ready for send:"));
    2598:	6f e9       	ldi	r22, 0x9F	; 159
    259a:	74 e0       	ldi	r23, 0x04	; 4
    259c:	8e e9       	ldi	r24, 0x9E	; 158
    259e:	93 e0       	ldi	r25, 0x03	; 3
    25a0:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    25a4:	b3 01       	movw	r22, r6
    25a6:	8e e9       	ldi	r24, 0x9E	; 158
    25a8:	93 e0       	ldi	r25, 0x03	; 3
    25aa:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>
	
	char response[10];
	uint16_t statuscode=0;
    25ae:	18 a2       	std	Y+32, r1	; 0x20
    25b0:	1f 8e       	std	Y+31, r1	; 0x1f
	uint16_t actualResponseLen=0;
    25b2:	1e 8e       	std	Y+30, r1	; 0x1e
    25b4:	1d 8e       	std	Y+29, r1	; 0x1d
	uint16_t finalResponseLen=0; //Probably don't need this here
    25b6:	1c 8e       	std	Y+28, r1	; 0x1c
    25b8:	1b 8e       	std	Y+27, r1	; 0x1b
	FONA_STATUS_GPRS_SEND status =  fona->sendDataOverGprs(
		(uint8_t*)encodedData, actualEncodedSz, 
		response, 5000, &actualResponseLen, &finalResponseLen, &statuscode);
    25ba:	9e 01       	movw	r18, r28
    25bc:	21 5e       	subi	r18, 0xE1	; 225
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	59 01       	movw	r10, r18
    25c2:	ce 01       	movw	r24, r28
    25c4:	4b 96       	adiw	r24, 0x1b	; 27
    25c6:	6c 01       	movw	r12, r24
    25c8:	22 50       	subi	r18, 0x02	; 2
    25ca:	31 09       	sbc	r19, r1
    25cc:	79 01       	movw	r14, r18
    25ce:	08 e8       	ldi	r16, 0x88	; 136
    25d0:	13 e1       	ldi	r17, 0x13	; 19
    25d2:	2e 50       	subi	r18, 0x0E	; 14
    25d4:	31 09       	sbc	r19, r1
    25d6:	a2 01       	movw	r20, r4
    25d8:	b3 01       	movw	r22, r6
    25da:	c4 01       	movw	r24, r8
    25dc:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPcjPjS2_S2_>
    25e0:	78 2e       	mov	r7, r24

	RM_LOGLN(F("Response from send:"));
    25e2:	6b e8       	ldi	r22, 0x8B	; 139
    25e4:	74 e0       	ldi	r23, 0x04	; 4
    25e6:	8e e9       	ldi	r24, 0x9E	; 158
    25e8:	93 e0       	ldi	r25, 0x03	; 3
    25ea:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(response);
    25ee:	be 01       	movw	r22, r28
    25f0:	61 5f       	subi	r22, 0xF1	; 241
    25f2:	7f 4f       	sbci	r23, 0xFF	; 255
    25f4:	8e e9       	ldi	r24, 0x9E	; 158
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN5Print7printlnEPKc>

	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    25fc:	be 01       	movw	r22, r28
    25fe:	67 5e       	subi	r22, 0xE7	; 231
    2600:	7f 4f       	sbci	r23, 0xFF	; 255
    2602:	c4 01       	movw	r24, r8
    2604:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN13Adafruit_FONA14getBattPercentEPj>
    2608:	81 11       	cpse	r24, r1
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <_Z8sendDatav+0x174>
		sendData.BattPct = -1;
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <_Z8sendDatav+0x176>
	else
		sendData.BattPct = battPct;
    2610:	89 8d       	ldd	r24, Y+25	; 0x19
    2612:	8a 83       	std	Y+2, r24	; 0x02
	
	sendData.SendStatus = status;
    2614:	78 86       	std	Y+8, r7	; 0x08
	sendData.HTMLStatusCode = statuscode;
    2616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2618:	98 a1       	ldd	r25, Y+32	; 0x20
    261a:	9a 87       	std	Y+10, r25	; 0x0a
    261c:	89 87       	std	Y+9, r24	; 0x09
		
	mem.appendDailyEntry(&sendData);
    261e:	be 01       	movw	r22, r28
    2620:	6f 5f       	subi	r22, 0xFF	; 255
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	8e ea       	ldi	r24, 0xAE	; 174
    2626:	91 e0       	ldi	r25, 0x01	; 1
    2628:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
	return true;
}
    262c:	8a a1       	ldd	r24, Y+34	; 0x22
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	3e be       	out	0x3e, r3	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	2d be       	out	0x3d, r2	; 61
    2638:	a2 96       	adiw	r28, 0x22	; 34
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12
    2654:	bf 90       	pop	r11
    2656:	af 90       	pop	r10
    2658:	9f 90       	pop	r9
    265a:	8f 90       	pop	r8
    265c:	7f 90       	pop	r7
    265e:	6f 90       	pop	r6
    2660:	5f 90       	pop	r5
    2662:	4f 90       	pop	r4
    2664:	3f 90       	pop	r3
    2666:	2f 90       	pop	r2
    2668:	08 95       	ret

0000266a <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    266a:	68 ee       	ldi	r22, 0xE8	; 232
    266c:	73 e0       	ldi	r23, 0x03	; 3
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 9c 1c 	call	0x3938	; 0x3938 <delay>
	++_timerCounter;
    2676:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    267a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    2684:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    2688:	61 e8       	ldi	r22, 0x81	; 129
    268a:	74 e0       	ldi	r23, 0x04	; 4
    268c:	8e e9       	ldi	r24, 0x9E	; 158
    268e:	93 e0       	ldi	r25, 0x03	; 3
    2690:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    2694:	69 e2       	ldi	r22, 0x29	; 41
    2696:	71 e0       	ldi	r23, 0x01	; 1
    2698:	8e e9       	ldi	r24, 0x9E	; 158
    269a:	93 e0       	ldi	r25, 0x03	; 3
    269c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN5Print5printEPKc>
    26a0:	4a e0       	ldi	r20, 0x0A	; 10
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <_behaviour>
    26a8:	8e e9       	ldi	r24, 0x9E	; 158
    26aa:	93 e0       	ldi	r25, 0x03	; 3
    26ac:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    26b0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26b4:	80 ff       	sbrs	r24, 0
    26b6:	09 c0       	rjmp	.+18     	; 0x26ca <loop+0x60>
		
		if (takeReadings())
    26b8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_Z12takeReadingsv>
    26bc:	88 23       	and	r24, r24
    26be:	29 f0       	breq	.+10     	; 0x26ca <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    26c0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26c4:	8e 7f       	andi	r24, 0xFE	; 254
    26c6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    26ca:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26ce:	81 ff       	sbrs	r24, 1
    26d0:	09 c0       	rjmp	.+18     	; 0x26e4 <loop+0x7a>
		
		if (sendData())
    26d2:	0e 94 4e 12 	call	0x249c	; 0x249c <_Z8sendDatav>
    26d6:	88 23       	and	r24, r24
    26d8:	29 f0       	breq	.+10     	; 0x26e4 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    26da:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26de:	8d 7f       	andi	r24, 0xFD	; 253
    26e0:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    26e4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    26e8:	82 ff       	sbrs	r24, 2
    26ea:	17 c0       	rjmp	.+46     	; 0x271a <loop+0xb0>
	
		if (_timerCounter == 1)
    26ec:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    26f0:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	31 f4       	brne	.+12     	; 0x2704 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    26f8:	6e ea       	ldi	r22, 0xAE	; 174
    26fa:	71 e0       	ldi	r23, 0x01	; 1
    26fc:	89 eb       	ldi	r24, 0xB9	; 185
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	0e 94 4e 18 	call	0x309c	; 0x309c <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    2704:	0e 94 4e 12 	call	0x249c	; 0x249c <_Z8sendDatav>
    2708:	88 23       	and	r24, r24
    270a:	39 f0       	breq	.+14     	; 0x271a <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    270c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    2710:	8b 7f       	andi	r24, 0xFB	; 251
    2712:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    2716:	0e 94 42 18 	call	0x3084	; 0x3084 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    271a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_behaviour>
    271e:	81 11       	cpse	r24, r1
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <loop+0xbc>
		
		switchOffSystem();
    2722:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <_Z15switchOffSystemv>
    2726:	08 95       	ret

00002728 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	64 e0       	ldi	r22, 0x04	; 4
    272c:	89 eb       	ldi	r24, 0xB9	; 185
    272e:	91 e0       	ldi	r25, 0x01	; 1
    2730:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	8e ea       	ldi	r24, 0xAE	; 174
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	0e 94 c0 13 	call	0x2780	; 0x2780 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	8c ea       	ldi	r24, 0xAC	; 172
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN13SensorManagerC1Eb>
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2748:	ee e9       	ldi	r30, 0x9E	; 158
    274a:	f1 e0       	ldi	r31, 0x01	; 1
    274c:	12 82       	std	Z+2, r1	; 0x02
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    274e:	15 82       	std	Z+5, r1	; 0x05
    2750:	16 82       	std	Z+6, r1	; 0x06
    2752:	17 82       	std	Z+7, r1	; 0x07
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2754:	12 86       	std	Z+10, r1	; 0x0a
    2756:	11 86       	std	Z+9, r1	; 0x09
    2758:	14 86       	std	Z+12, r1	; 0x0c
    275a:	13 86       	std	Z+11, r1	; 0x0b
    275c:	08 95       	ret

0000275e <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    275e:	8f e2       	ldi	r24, 0x2F	; 47
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <__fona+0x1>
    2766:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <__fona>
    276a:	8e ec       	ldi	r24, 0xCE	; 206
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <_ZN6StringD1Ev>

00002772 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    2772:	dc 01       	movw	r26, r24
    2774:	ed 91       	ld	r30, X+
    2776:	fc 91       	ld	r31, X
    2778:	01 90       	ld	r0, Z+
    277a:	f0 81       	ld	r31, Z
    277c:	e0 2d       	mov	r30, r0
    277e:	09 94       	ijmp

00002780 <_ZN12RmMemManagerC1Eb>:
    2780:	fc 01       	movw	r30, r24
    2782:	14 82       	std	Z+4, r1	; 0x04
    2784:	15 82       	std	Z+5, r1	; 0x05
    2786:	16 82       	std	Z+6, r1	; 0x06
    2788:	17 82       	std	Z+7, r1	; 0x07
    278a:	80 e8       	ldi	r24, 0x80	; 128
    278c:	80 87       	std	Z+8, r24	; 0x08
    278e:	81 87       	std	Z+9, r24	; 0x09
    2790:	12 86       	std	Z+10, r1	; 0x0a
    2792:	63 83       	std	Z+3, r22	; 0x03
    2794:	61 11       	cpse	r22, r1
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <_ZN12RmMemManagerC1Eb+0x20>
    2798:	86 e4       	ldi	r24, 0x46	; 70
    279a:	93 e0       	ldi	r25, 0x03	; 3
    279c:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <_ZN7TwoWire5beginEv>
    27a0:	08 95       	ret

000027a2 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    27a2:	fc 01       	movw	r30, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	61 15       	cp	r22, r1
    27ac:	71 05       	cpc	r23, r1
    27ae:	39 f0       	breq	.+14     	; 0x27be <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    27b0:	42 81       	ldd	r20, Z+2	; 0x02
    27b2:	2a e0       	ldi	r18, 0x0A	; 10
    27b4:	42 9f       	mul	r20, r18
    27b6:	a0 01       	movw	r20, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <memcpy>
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	08 95       	ret

000027c2 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
    27c2:	08 95       	ret

000027c4 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	eb 01       	movw	r28, r22
    27d2:	7b 01       	movw	r14, r22
    27d4:	e4 0e       	add	r14, r20
    27d6:	f1 1c       	adc	r15, r1
    27d8:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    27da:	ce 15       	cp	r28, r14
    27dc:	df 05       	cpc	r29, r15
    27de:	71 f1       	breq	.+92     	; 0x283c <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    27e0:	60 e5       	ldi	r22, 0x50	; 80
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	86 e4       	ldi	r24, 0x46	; 70
    27e6:	93 e0       	ldi	r25, 0x03	; 3
    27e8:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    27ec:	61 2f       	mov	r22, r17
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	86 e4       	ldi	r24, 0x46	; 70
    27f2:	93 e0       	ldi	r25, 0x03	; 3
    27f4:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    27f8:	b8 01       	movw	r22, r16
    27fa:	77 27       	eor	r23, r23
    27fc:	86 e4       	ldi	r24, 0x46	; 70
    27fe:	93 e0       	ldi	r25, 0x03	; 3
    2800:	0e 94 b9 13 	call	0x2772	; 0x2772 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    2804:	86 e4       	ldi	r24, 0x46	; 70
    2806:	93 e0       	ldi	r25, 0x03	; 3
    2808:	0e 94 3b 18 	call	0x3076	; 0x3076 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	50 e0       	ldi	r21, 0x00	; 0
    2810:	60 e5       	ldi	r22, 0x50	; 80
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	86 e4       	ldi	r24, 0x46	; 70
    2816:	93 e0       	ldi	r25, 0x03	; 3
    2818:	0e 94 38 18 	call	0x3070	; 0x3070 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    281c:	86 e4       	ldi	r24, 0x46	; 70
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire9availableEv>
    2824:	89 2b       	or	r24, r25
    2826:	29 f0       	breq	.+10     	; 0x2832 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    2828:	86 e4       	ldi	r24, 0x46	; 70
    282a:	93 e0       	ldi	r25, 0x03	; 3
    282c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <_ZN7TwoWire4readEv>
    2830:	01 c0       	rjmp	.+2      	; 0x2834 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    2832:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    2834:	89 93       	st	Y+, r24
    2836:	0f 5f       	subi	r16, 0xFF	; 255
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    283a:	cf cf       	rjmp	.-98     	; 0x27da <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	08 95       	ret

0000284a <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	1f 92       	push	r1
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	be 01       	movw	r22, r28
    285a:	6f 5f       	subi	r22, 0xFF	; 255
    285c:	7f 4f       	sbci	r23, 0xFF	; 255
    285e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <_Z12internalReadjPhh>
	return value;
}
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	0f 90       	pop	r0
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	08 95       	ret

0000286c <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	0c 94 25 14 	jmp	0x284a	; 0x284a <_ZN12RmMemManager18getUCharFromMemoryEj>

00002874 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    2874:	fc 01       	movw	r30, r24
    2876:	60 83       	st	Z, r22
    2878:	08 95       	ret

0000287a <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    287a:	fc 01       	movw	r30, r24
    287c:	80 81       	ld	r24, Z
    287e:	81 11       	cpse	r24, r1
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    2882:	86 2f       	mov	r24, r22
    2884:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    2888:	85 e0       	ldi	r24, 0x05	; 5
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	08 95       	ret

0000288e <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    288e:	fc 01       	movw	r30, r24
    2890:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    2892:	81 81       	ldd	r24, Z+1	; 0x01
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	12 96       	adiw	r26, 0x02	; 2
    289c:	9c 93       	st	X, r25
    289e:	8e 93       	st	-X, r24
    28a0:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    28a2:	81 81       	ldd	r24, Z+1	; 0x01
    28a4:	2a e0       	ldi	r18, 0x0A	; 10
    28a6:	82 9f       	mul	r24, r18
    28a8:	c0 01       	movw	r24, r0
    28aa:	11 24       	eor	r1, r1
    28ac:	14 96       	adiw	r26, 0x04	; 4
    28ae:	9c 93       	st	X, r25
    28b0:	8e 93       	st	-X, r24
    28b2:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    28b4:	81 81       	ldd	r24, Z+1	; 0x01
    28b6:	67 e0       	ldi	r22, 0x07	; 7
    28b8:	0e 94 27 21 	call	0x424e	; 0x424e <__udivmodqi4>
    28bc:	89 2f       	mov	r24, r25
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	16 96       	adiw	r26, 0x06	; 6
    28c2:	9c 93       	st	X, r25
    28c4:	8e 93       	st	-X, r24
    28c6:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    28c8:	81 81       	ldd	r24, Z+1	; 0x01
    28ca:	24 e6       	ldi	r18, 0x64	; 100
    28cc:	82 9f       	mul	r24, r18
    28ce:	c0 01       	movw	r24, r0
    28d0:	11 24       	eor	r1, r1
    28d2:	18 96       	adiw	r26, 0x08	; 8
    28d4:	9c 93       	st	X, r25
    28d6:	8e 93       	st	-X, r24
    28d8:	17 97       	sbiw	r26, 0x07	; 7
    28da:	08 95       	ret

000028dc <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    28dc:	af 92       	push	r10
    28de:	bf 92       	push	r11
    28e0:	cf 92       	push	r12
    28e2:	df 92       	push	r13
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	8c 01       	movw	r16, r24
    28f2:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    28f4:	fc 01       	movw	r30, r24
    28f6:	80 81       	ld	r24, Z
    28f8:	88 23       	and	r24, r24
    28fa:	21 f0       	breq	.+8      	; 0x2904 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    28fc:	c8 01       	movw	r24, r16
    28fe:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN13SensorManager11getMockDataEP10SensorData>
    2902:	1b c0       	rjmp	.+54     	; 0x293a <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2904:	6e e0       	ldi	r22, 0x0E	; 14
    2906:	c8 01       	movw	r24, r16
    2908:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13SensorManager16takeSampleAnalogEh>
    290c:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    290e:	6f e0       	ldi	r22, 0x0F	; 15
    2910:	c8 01       	movw	r24, r16
    2912:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13SensorManager16takeSampleAnalogEh>
    2916:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2918:	61 e1       	ldi	r22, 0x11	; 17
    291a:	c8 01       	movw	r24, r16
    291c:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13SensorManager16takeSampleAnalogEh>
    2920:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    2922:	60 e1       	ldi	r22, 0x10	; 16
    2924:	c8 01       	movw	r24, r16
    2926:	0e 94 3d 14 	call	0x287a	; 0x287a <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    292a:	ba 82       	std	Y+2, r11	; 0x02
    292c:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    292e:	dc 82       	std	Y+4, r13	; 0x04
    2930:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    2932:	fe 82       	std	Y+6, r15	; 0x06
    2934:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    293a:	ce 01       	movw	r24, r28
	
	//return ret;
}
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
    294c:	bf 90       	pop	r11
    294e:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    2950:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <_ZN7Helpers15printSensorDataEP10SensorData>

00002954 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2954:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <twi_sendStop>
    295e:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	82 e1       	ldi	r24, 0x12	; 18
    2966:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
    296a:	61 e0       	ldi	r22, 0x01	; 1
    296c:	83 e1       	ldi	r24, 0x13	; 19
    296e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
    2972:	e9 eb       	ldi	r30, 0xB9	; 185
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8e 7f       	andi	r24, 0xFE	; 254
    297a:	80 83       	st	Z, r24
    297c:	80 81       	ld	r24, Z
    297e:	8d 7f       	andi	r24, 0xFD	; 253
    2980:	80 83       	st	Z, r24
    2982:	88 e4       	ldi	r24, 0x48	; 72
    2984:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2988:	85 e4       	ldi	r24, 0x45	; 69
    298a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    298e:	08 95       	ret

00002990 <twi_readFrom>:
    2990:	41 32       	cpi	r20, 0x21	; 33
    2992:	08 f0       	brcs	.+2      	; 0x2996 <twi_readFrom+0x6>
    2994:	43 c0       	rjmp	.+134    	; 0x2a1c <twi_readFrom+0x8c>
    2996:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    299a:	91 11       	cpse	r25, r1
    299c:	fc cf       	rjmp	.-8      	; 0x2996 <twi_readFrom+0x6>
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <twi_state>
    29a4:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <twi_sendStop>
    29a8:	2f ef       	ldi	r18, 0xFF	; 255
    29aa:	20 93 d8 02 	sts	0x02D8, r18	; 0x8002d8 <twi_error>
    29ae:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    29b2:	24 0f       	add	r18, r20
    29b4:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <twi_masterBufferLength>
    29b8:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <twi_slarw>
    29bc:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <twi_slarw>
    29c0:	88 0f       	add	r24, r24
    29c2:	89 2b       	or	r24, r25
    29c4:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    29c8:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    29cc:	81 30       	cpi	r24, 0x01	; 1
    29ce:	61 f4       	brne	.+24     	; 0x29e8 <twi_readFrom+0x58>
    29d0:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    29d4:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    29d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    29dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    29e0:	83 fd       	sbrc	r24, 3
    29e2:	f8 cf       	rjmp	.-16     	; 0x29d4 <twi_readFrom+0x44>
    29e4:	85 ec       	ldi	r24, 0xC5	; 197
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <twi_readFrom+0x5a>
    29e8:	85 ee       	ldi	r24, 0xE5	; 229
    29ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    29ee:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	e1 f3       	breq	.-8      	; 0x29ee <twi_readFrom+0x5e>
    29f6:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <twi_masterBufferIndex>
    29fa:	84 17       	cp	r24, r20
    29fc:	10 f4       	brcc	.+4      	; 0x2a02 <twi_readFrom+0x72>
    29fe:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2a02:	ae e1       	ldi	r26, 0x1E	; 30
    2a04:	b3 e0       	ldi	r27, 0x03	; 3
    2a06:	96 2f       	mov	r25, r22
    2a08:	fb 01       	movw	r30, r22
    2a0a:	8e 2f       	mov	r24, r30
    2a0c:	89 1b       	sub	r24, r25
    2a0e:	84 17       	cp	r24, r20
    2a10:	18 f4       	brcc	.+6      	; 0x2a18 <twi_readFrom+0x88>
    2a12:	8d 91       	ld	r24, X+
    2a14:	81 93       	st	Z+, r24
    2a16:	f9 cf       	rjmp	.-14     	; 0x2a0a <twi_readFrom+0x7a>
    2a18:	84 2f       	mov	r24, r20
    2a1a:	08 95       	ret
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	08 95       	ret

00002a20 <twi_writeTo>:
    2a20:	0f 93       	push	r16
    2a22:	41 32       	cpi	r20, 0x21	; 33
    2a24:	08 f0       	brcs	.+2      	; 0x2a28 <twi_writeTo+0x8>
    2a26:	4a c0       	rjmp	.+148    	; 0x2abc <twi_writeTo+0x9c>
    2a28:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <twi_state>
    2a2c:	91 11       	cpse	r25, r1
    2a2e:	fc cf       	rjmp	.-8      	; 0x2a28 <twi_writeTo+0x8>
    2a30:	32 e0       	ldi	r19, 0x02	; 2
    2a32:	30 93 45 03 	sts	0x0345, r19	; 0x800345 <twi_state>
    2a36:	00 93 43 03 	sts	0x0343, r16	; 0x800343 <twi_sendStop>
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <twi_error>
    2a40:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <twi_masterBufferIndex>
    2a44:	40 93 1c 03 	sts	0x031C, r20	; 0x80031c <twi_masterBufferLength>
    2a48:	56 2f       	mov	r21, r22
    2a4a:	ae e1       	ldi	r26, 0x1E	; 30
    2a4c:	b3 e0       	ldi	r27, 0x03	; 3
    2a4e:	fb 01       	movw	r30, r22
    2a50:	3e 2f       	mov	r19, r30
    2a52:	35 1b       	sub	r19, r21
    2a54:	34 17       	cp	r19, r20
    2a56:	18 f4       	brcc	.+6      	; 0x2a5e <twi_writeTo+0x3e>
    2a58:	31 91       	ld	r19, Z+
    2a5a:	3d 93       	st	X+, r19
    2a5c:	f9 cf       	rjmp	.-14     	; 0x2a50 <twi_writeTo+0x30>
    2a5e:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <twi_slarw>
    2a62:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <twi_slarw>
    2a66:	88 0f       	add	r24, r24
    2a68:	83 2b       	or	r24, r19
    2a6a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <twi_slarw>
    2a6e:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_inRepStart>
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	61 f4       	brne	.+24     	; 0x2a8e <twi_writeTo+0x6e>
    2a76:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_inRepStart>
    2a7a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2a7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a82:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a86:	83 fd       	sbrc	r24, 3
    2a88:	f8 cf       	rjmp	.-16     	; 0x2a7a <twi_writeTo+0x5a>
    2a8a:	85 ec       	ldi	r24, 0xC5	; 197
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <twi_writeTo+0x70>
    2a8e:	85 ee       	ldi	r24, 0xE5	; 229
    2a90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2a94:	22 23       	and	r18, r18
    2a96:	21 f0       	breq	.+8      	; 0x2aa0 <twi_writeTo+0x80>
    2a98:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <twi_state>
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	d1 f3       	breq	.-12     	; 0x2a94 <twi_writeTo+0x74>
    2aa0:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2aa4:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa6:	79 f0       	breq	.+30     	; 0x2ac6 <twi_writeTo+0xa6>
    2aa8:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2aac:	80 32       	cpi	r24, 0x20	; 32
    2aae:	41 f0       	breq	.+16     	; 0x2ac0 <twi_writeTo+0xa0>
    2ab0:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <twi_error>
    2ab4:	80 33       	cpi	r24, 0x30	; 48
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <twi_writeTo+0xa4>
    2ab8:	94 e0       	ldi	r25, 0x04	; 4
    2aba:	05 c0       	rjmp	.+10     	; 0x2ac6 <twi_writeTo+0xa6>
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	03 c0       	rjmp	.+6      	; 0x2ac6 <twi_writeTo+0xa6>
    2ac0:	92 e0       	ldi	r25, 0x02	; 2
    2ac2:	01 c0       	rjmp	.+2      	; 0x2ac6 <twi_writeTo+0xa6>
    2ac4:	93 e0       	ldi	r25, 0x03	; 3
    2ac6:	89 2f       	mov	r24, r25
    2ac8:	0f 91       	pop	r16
    2aca:	08 95       	ret

00002acc <twi_transmit>:
    2acc:	40 91 fa 02 	lds	r20, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2ad0:	26 2f       	mov	r18, r22
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	24 0f       	add	r18, r20
    2ad6:	31 1d       	adc	r19, r1
    2ad8:	21 32       	cpi	r18, 0x21	; 33
    2ada:	31 05       	cpc	r19, r1
    2adc:	dc f4       	brge	.+54     	; 0x2b14 <twi_transmit+0x48>
    2ade:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <twi_state>
    2ae2:	24 30       	cpi	r18, 0x04	; 4
    2ae4:	c9 f4       	brne	.+50     	; 0x2b18 <twi_transmit+0x4c>
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	86 17       	cp	r24, r22
    2aee:	58 f4       	brcc	.+22     	; 0x2b06 <twi_transmit+0x3a>
    2af0:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2af4:	21 91       	ld	r18, Z+
    2af6:	dc 01       	movw	r26, r24
    2af8:	a4 50       	subi	r26, 0x04	; 4
    2afa:	bd 4f       	sbci	r27, 0xFD	; 253
    2afc:	a3 0f       	add	r26, r19
    2afe:	b1 1d       	adc	r27, r1
    2b00:	2c 93       	st	X, r18
    2b02:	01 96       	adiw	r24, 0x01	; 1
    2b04:	f3 cf       	rjmp	.-26     	; 0x2aec <twi_transmit+0x20>
    2b06:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2b0a:	68 0f       	add	r22, r24
    2b0c:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <twi_txBufferLength>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	08 95       	ret
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	08 95       	ret
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	08 95       	ret

00002b1c <twi_attachSlaveRxEvent>:
    2b1c:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <twi_onSlaveReceive+0x1>
    2b20:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_onSlaveReceive>
    2b24:	08 95       	ret

00002b26 <twi_attachSlaveTxEvent>:
    2b26:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <twi_onSlaveTransmit+0x1>
    2b2a:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_onSlaveTransmit>
    2b2e:	08 95       	ret

00002b30 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b30:	85 ed       	ldi	r24, 0xD5	; 213
    2b32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2b3a:	84 fd       	sbrc	r24, 4
    2b3c:	fc cf       	rjmp	.-8      	; 0x2b36 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b3e:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2b42:	08 95       	ret

00002b44 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b44:	85 ec       	ldi	r24, 0xC5	; 197
    2b46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2b4a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
    2b4e:	08 95       	ret

00002b50 <__vector_24>:
}

ISR(TWI_vect)
{
    2b50:	1f 92       	push	r1
    2b52:	0f 92       	push	r0
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	0f 92       	push	r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	2f 93       	push	r18
    2b5c:	3f 93       	push	r19
    2b5e:	4f 93       	push	r20
    2b60:	5f 93       	push	r21
    2b62:	6f 93       	push	r22
    2b64:	7f 93       	push	r23
    2b66:	8f 93       	push	r24
    2b68:	9f 93       	push	r25
    2b6a:	af 93       	push	r26
    2b6c:	bf 93       	push	r27
    2b6e:	ef 93       	push	r30
    2b70:	ff 93       	push	r31
  switch(TW_STATUS){
    2b72:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2b76:	88 7f       	andi	r24, 0xF8	; 248
    2b78:	80 36       	cpi	r24, 0x60	; 96
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <__vector_24+0x2e>
    2b7c:	9e c0       	rjmp	.+316    	; 0x2cba <__vector_24+0x16a>
    2b7e:	78 f5       	brcc	.+94     	; 0x2bde <__vector_24+0x8e>
    2b80:	88 32       	cpi	r24, 0x28	; 40
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <__vector_24+0x36>
    2b84:	5d c0       	rjmp	.+186    	; 0x2c40 <__vector_24+0xf0>
    2b86:	90 f4       	brcc	.+36     	; 0x2bac <__vector_24+0x5c>
    2b88:	80 31       	cpi	r24, 0x10	; 16
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <__vector_24+0x3e>
    2b8c:	56 c0       	rjmp	.+172    	; 0x2c3a <__vector_24+0xea>
    2b8e:	38 f4       	brcc	.+14     	; 0x2b9e <__vector_24+0x4e>
    2b90:	88 23       	and	r24, r24
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <__vector_24+0x46>
    2b94:	f5 c0       	rjmp	.+490    	; 0x2d80 <__vector_24+0x230>
    2b96:	88 30       	cpi	r24, 0x08	; 8
    2b98:	09 f4       	brne	.+2      	; 0x2b9c <__vector_24+0x4c>
    2b9a:	4f c0       	rjmp	.+158    	; 0x2c3a <__vector_24+0xea>
    2b9c:	f5 c0       	rjmp	.+490    	; 0x2d88 <__vector_24+0x238>
    2b9e:	88 31       	cpi	r24, 0x18	; 24
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <__vector_24+0x54>
    2ba2:	4e c0       	rjmp	.+156    	; 0x2c40 <__vector_24+0xf0>
    2ba4:	80 32       	cpi	r24, 0x20	; 32
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <__vector_24+0x5a>
    2ba8:	5f c0       	rjmp	.+190    	; 0x2c68 <__vector_24+0x118>
    2baa:	ee c0       	rjmp	.+476    	; 0x2d88 <__vector_24+0x238>
    2bac:	80 34       	cpi	r24, 0x40	; 64
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <__vector_24+0x62>
    2bb0:	6a c0       	rjmp	.+212    	; 0x2c86 <__vector_24+0x136>
    2bb2:	58 f4       	brcc	.+22     	; 0x2bca <__vector_24+0x7a>
    2bb4:	80 33       	cpi	r24, 0x30	; 48
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <__vector_24+0x6a>
    2bb8:	57 c0       	rjmp	.+174    	; 0x2c68 <__vector_24+0x118>
    2bba:	88 33       	cpi	r24, 0x38	; 56
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <__vector_24+0x70>
    2bbe:	e4 c0       	rjmp	.+456    	; 0x2d88 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bc0:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
      twi_releaseBus();
    2bc4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <twi_releaseBus>
      break;
    2bc8:	df c0       	rjmp	.+446    	; 0x2d88 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bca:	80 35       	cpi	r24, 0x50	; 80
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <__vector_24+0x80>
    2bce:	4f c0       	rjmp	.+158    	; 0x2c6e <__vector_24+0x11e>
    2bd0:	88 35       	cpi	r24, 0x58	; 88
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <__vector_24+0x86>
    2bd4:	5d c0       	rjmp	.+186    	; 0x2c90 <__vector_24+0x140>
    2bd6:	88 34       	cpi	r24, 0x48	; 72
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <__vector_24+0x8c>
    2bda:	d6 c0       	rjmp	.+428    	; 0x2d88 <__vector_24+0x238>
    2bdc:	d3 c0       	rjmp	.+422    	; 0x2d84 <__vector_24+0x234>
    2bde:	88 39       	cpi	r24, 0x98	; 152
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <__vector_24+0x94>
    2be2:	c4 c0       	rjmp	.+392    	; 0x2d6c <__vector_24+0x21c>
    2be4:	a8 f4       	brcc	.+42     	; 0x2c10 <__vector_24+0xc0>
    2be6:	88 37       	cpi	r24, 0x78	; 120
    2be8:	09 f4       	brne	.+2      	; 0x2bec <__vector_24+0x9c>
    2bea:	67 c0       	rjmp	.+206    	; 0x2cba <__vector_24+0x16a>
    2bec:	38 f4       	brcc	.+14     	; 0x2bfc <__vector_24+0xac>
    2bee:	88 36       	cpi	r24, 0x68	; 104
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <__vector_24+0xa4>
    2bf2:	63 c0       	rjmp	.+198    	; 0x2cba <__vector_24+0x16a>
    2bf4:	80 37       	cpi	r24, 0x70	; 112
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <__vector_24+0xaa>
    2bf8:	60 c0       	rjmp	.+192    	; 0x2cba <__vector_24+0x16a>
    2bfa:	c6 c0       	rjmp	.+396    	; 0x2d88 <__vector_24+0x238>
    2bfc:	88 38       	cpi	r24, 0x88	; 136
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <__vector_24+0xb2>
    2c00:	b5 c0       	rjmp	.+362    	; 0x2d6c <__vector_24+0x21c>
    2c02:	80 39       	cpi	r24, 0x90	; 144
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <__vector_24+0xb8>
    2c06:	5f c0       	rjmp	.+190    	; 0x2cc6 <__vector_24+0x176>
    2c08:	80 38       	cpi	r24, 0x80	; 128
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <__vector_24+0xbe>
    2c0c:	bd c0       	rjmp	.+378    	; 0x2d88 <__vector_24+0x238>
    2c0e:	5b c0       	rjmp	.+182    	; 0x2cc6 <__vector_24+0x176>
    2c10:	80 3b       	cpi	r24, 0xB0	; 176
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <__vector_24+0xc6>
    2c14:	83 c0       	rjmp	.+262    	; 0x2d1c <__vector_24+0x1cc>
    2c16:	38 f4       	brcc	.+14     	; 0x2c26 <__vector_24+0xd6>
    2c18:	80 3a       	cpi	r24, 0xA0	; 160
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <__vector_24+0xce>
    2c1c:	66 c0       	rjmp	.+204    	; 0x2cea <__vector_24+0x19a>
    2c1e:	88 3a       	cpi	r24, 0xA8	; 168
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <__vector_24+0xd4>
    2c22:	7c c0       	rjmp	.+248    	; 0x2d1c <__vector_24+0x1cc>
    2c24:	b1 c0       	rjmp	.+354    	; 0x2d88 <__vector_24+0x238>
    2c26:	80 3c       	cpi	r24, 0xC0	; 192
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <__vector_24+0xdc>
    2c2a:	a4 c0       	rjmp	.+328    	; 0x2d74 <__vector_24+0x224>
    2c2c:	88 3c       	cpi	r24, 0xC8	; 200
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <__vector_24+0xe2>
    2c30:	a1 c0       	rjmp	.+322    	; 0x2d74 <__vector_24+0x224>
    2c32:	88 3b       	cpi	r24, 0xB8	; 184
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <__vector_24+0xe8>
    2c36:	87 c0       	rjmp	.+270    	; 0x2d46 <__vector_24+0x1f6>
    2c38:	a7 c0       	rjmp	.+334    	; 0x2d88 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2c3a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <twi_slarw>
    2c3e:	10 c0       	rjmp	.+32     	; 0x2c60 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c40:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c44:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2c48:	98 17       	cp	r25, r24
    2c4a:	70 f5       	brcc	.+92     	; 0x2ca8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c4c:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	8e 0f       	add	r24, r30
    2c54:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	e2 5e       	subi	r30, 0xE2	; 226
    2c5c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c5e:	80 81       	ld	r24, Z
    2c60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c64:	85 ec       	ldi	r24, 0xC5	; 197
    2c66:	83 c0       	rjmp	.+262    	; 0x2d6e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2c68:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <twi_error>
    2c6c:	8b c0       	rjmp	.+278    	; 0x2d84 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c6e:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	8e 0f       	add	r24, r30
    2c76:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2c7a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	e2 5e       	subi	r30, 0xE2	; 226
    2c82:	fc 4f       	sbci	r31, 0xFC	; 252
    2c84:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c86:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c8a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_masterBufferLength>
    2c8e:	6b c0       	rjmp	.+214    	; 0x2d66 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c90:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <twi_masterBufferIndex>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	8e 0f       	add	r24, r30
    2c98:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <twi_masterBufferIndex>
    2c9c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	e2 5e       	subi	r30, 0xE2	; 226
    2ca4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ca6:	80 83       	st	Z, r24
	if (twi_sendStop)
    2ca8:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <twi_sendStop>
    2cac:	81 11       	cpse	r24, r1
    2cae:	6a c0       	rjmp	.+212    	; 0x2d84 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2cb6:	84 ea       	ldi	r24, 0xA4	; 164
    2cb8:	5e c0       	rjmp	.+188    	; 0x2d76 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2cc0:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
    2cc4:	cf cf       	rjmp	.-98     	; 0x2c64 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cc6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2cca:	80 32       	cpi	r24, 0x20	; 32
    2ccc:	08 f0       	brcs	.+2      	; 0x2cd0 <__vector_24+0x180>
    2cce:	4e c0       	rjmp	.+156    	; 0x2d6c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2cd0:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	8e 0f       	add	r24, r30
    2cd8:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <twi_rxBufferIndex>
    2cdc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	e6 52       	subi	r30, 0x26	; 38
    2ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ce6:	80 83       	st	Z, r24
    2ce8:	bd cf       	rjmp	.-134    	; 0x2c64 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2cea:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cee:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2cf2:	80 32       	cpi	r24, 0x20	; 32
    2cf4:	30 f4       	brcc	.+12     	; 0x2d02 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2cf6:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	e6 52       	subi	r30, 0x26	; 38
    2cfe:	fd 4f       	sbci	r31, 0xFD	; 253
    2d00:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2d02:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <twi_rxBufferIndex>
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_onSlaveReceive>
    2d0c:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <twi_onSlaveReceive+0x1>
    2d10:	8a ed       	ldi	r24, 0xDA	; 218
    2d12:	92 e0       	ldi	r25, 0x02	; 2
    2d14:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2d16:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <twi_rxBufferIndex>
      break;
    2d1a:	36 c0       	rjmp	.+108    	; 0x2d88 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2d1c:	84 e0       	ldi	r24, 0x04	; 4
    2d1e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2d22:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2d26:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2d2a:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <twi_onSlaveTransmit>
    2d2e:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <twi_onSlaveTransmit+0x1>
    2d32:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2d34:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2d38:	81 11       	cpse	r24, r1
    2d3a:	05 c0       	rjmp	.+10     	; 0x2d46 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2d42:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d46:	e0 91 fb 02 	lds	r30, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	8e 0f       	add	r24, r30
    2d4e:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <twi_txBufferIndex>
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	e4 50       	subi	r30, 0x04	; 4
    2d56:	fd 4f       	sbci	r31, 0xFD	; 253
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d5e:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <twi_txBufferIndex>
    2d62:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <twi_txBufferLength>
    2d66:	98 17       	cp	r25, r24
    2d68:	08 f4       	brcc	.+2      	; 0x2d6c <__vector_24+0x21c>
    2d6a:	7c cf       	rjmp	.-264    	; 0x2c64 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d6c:	85 e8       	ldi	r24, 0x85	; 133
    2d6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2d72:	0a c0       	rjmp	.+20     	; 0x2d88 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d74:	85 ec       	ldi	r24, 0xC5	; 197
    2d76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d7a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <twi_state>
      break;
    2d7e:	04 c0       	rjmp	.+8      	; 0x2d88 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d80:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <twi_error>
      twi_stop();
    2d84:	0e 94 98 15 	call	0x2b30	; 0x2b30 <twi_stop>
      break;
  }
}
    2d88:	ff 91       	pop	r31
    2d8a:	ef 91       	pop	r30
    2d8c:	bf 91       	pop	r27
    2d8e:	af 91       	pop	r26
    2d90:	9f 91       	pop	r25
    2d92:	8f 91       	pop	r24
    2d94:	7f 91       	pop	r23
    2d96:	6f 91       	pop	r22
    2d98:	5f 91       	pop	r21
    2d9a:	4f 91       	pop	r20
    2d9c:	3f 91       	pop	r19
    2d9e:	2f 91       	pop	r18
    2da0:	0f 90       	pop	r0
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	0f 90       	pop	r0
    2da6:	1f 90       	pop	r1
    2da8:	18 95       	reti

00002daa <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2daa:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2db4:	82 1b       	sub	r24, r18
    2db6:	91 09       	sbc	r25, r1
    2db8:	08 95       	ret

00002dba <_ZN7TwoWire4readEv>:
    2dba:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2dbe:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dc2:	98 17       	cp	r25, r24
    2dc4:	50 f4       	brcc	.+20     	; 0x2dda <_ZN7TwoWire4readEv+0x20>
    2dc6:	e9 2f       	mov	r30, r25
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	e4 58       	subi	r30, 0x84	; 132
    2dcc:	fc 4f       	sbci	r31, 0xFC	; 252
    2dce:	20 81       	ld	r18, Z
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	9f 5f       	subi	r25, 0xFF	; 255
    2dd4:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <_ZN7TwoWire4readEv+0x24>
    2dda:	2f ef       	ldi	r18, 0xFF	; 255
    2ddc:	3f ef       	ldi	r19, 0xFF	; 255
    2dde:	c9 01       	movw	r24, r18
    2de0:	08 95       	ret

00002de2 <_ZN7TwoWire4peekEv>:
    2de2:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2de6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2dea:	e8 17       	cp	r30, r24
    2dec:	30 f4       	brcc	.+12     	; 0x2dfa <_ZN7TwoWire4peekEv+0x18>
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	e4 58       	subi	r30, 0x84	; 132
    2df2:	fc 4f       	sbci	r31, 0xFC	; 252
    2df4:	80 81       	ld	r24, Z
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	08 95       	ret
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
    2dfc:	9f ef       	ldi	r25, 0xFF	; 255
    2dfe:	08 95       	ret

00002e00 <_ZN7TwoWire5flushEv>:
    2e00:	08 95       	ret

00002e02 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	ec 01       	movw	r28, r24
    2e08:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <_ZN7TwoWire14user_onReceiveE>
    2e0c:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <_ZN7TwoWire14user_onReceiveE+0x1>
    2e10:	30 97       	sbiw	r30, 0x00	; 0
    2e12:	f1 f0       	breq	.+60     	; 0x2e50 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e14:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2e18:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2e1c:	98 17       	cp	r25, r24
    2e1e:	c0 f0       	brcs	.+48     	; 0x2e50 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	29 2f       	mov	r18, r25
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	26 17       	cp	r18, r22
    2e28:	37 07       	cpc	r19, r23
    2e2a:	54 f4       	brge	.+20     	; 0x2e40 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2e2c:	de 01       	movw	r26, r28
    2e2e:	a2 0f       	add	r26, r18
    2e30:	b3 1f       	adc	r27, r19
    2e32:	4c 91       	ld	r20, X
    2e34:	d9 01       	movw	r26, r18
    2e36:	a4 58       	subi	r26, 0x84	; 132
    2e38:	bc 4f       	sbci	r27, 0xFC	; 252
    2e3a:	4c 93       	st	X, r20
    2e3c:	9f 5f       	subi	r25, 0xFF	; 255
    2e3e:	f1 cf       	rjmp	.-30     	; 0x2e22 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2e40:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2e44:	60 93 7a 03 	sts	0x037A, r22	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2e48:	cb 01       	movw	r24, r22
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	09 94       	ijmp
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	08 95       	ret

00002e56 <_ZN7TwoWire16onRequestServiceEv>:
    2e56:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZN7TwoWire14user_onRequestE>
    2e5a:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZN7TwoWire14user_onRequestE+0x1>
    2e5e:	30 97       	sbiw	r30, 0x00	; 0
    2e60:	29 f0       	breq	.+10     	; 0x2e6c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2e62:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2e66:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2e6a:	09 94       	ijmp
    2e6c:	08 95       	ret

00002e6e <_ZN7TwoWire5writeEPKhj>:
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	7c 01       	movw	r14, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8a 01       	movw	r16, r20
    2e84:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    2e88:	22 23       	and	r18, r18
    2e8a:	89 f0       	breq	.+34     	; 0x2eae <_ZN7TwoWire5writeEPKhj+0x40>
    2e8c:	eb 01       	movw	r28, r22
    2e8e:	6b 01       	movw	r12, r22
    2e90:	c4 0e       	add	r12, r20
    2e92:	d5 1e       	adc	r13, r21
    2e94:	cc 15       	cp	r28, r12
    2e96:	dd 05       	cpc	r29, r13
    2e98:	69 f0       	breq	.+26     	; 0x2eb4 <_ZN7TwoWire5writeEPKhj+0x46>
    2e9a:	69 91       	ld	r22, Y+
    2e9c:	d7 01       	movw	r26, r14
    2e9e:	ed 91       	ld	r30, X+
    2ea0:	fc 91       	ld	r31, X
    2ea2:	01 90       	ld	r0, Z+
    2ea4:	f0 81       	ld	r31, Z
    2ea6:	e0 2d       	mov	r30, r0
    2ea8:	c7 01       	movw	r24, r14
    2eaa:	09 95       	icall
    2eac:	f3 cf       	rjmp	.-26     	; 0x2e94 <_ZN7TwoWire5writeEPKhj+0x26>
    2eae:	64 2f       	mov	r22, r20
    2eb0:	0e 94 66 15 	call	0x2acc	; 0x2acc <twi_transmit>
    2eb4:	c8 01       	movw	r24, r16
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	1f 91       	pop	r17
    2ebc:	0f 91       	pop	r16
    2ebe:	ff 90       	pop	r15
    2ec0:	ef 90       	pop	r14
    2ec2:	df 90       	pop	r13
    2ec4:	cf 90       	pop	r12
    2ec6:	08 95       	ret

00002ec8 <_ZN7TwoWire5writeEh>:
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	1f 92       	push	r1
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	69 83       	std	Y+1, r22	; 0x01
    2ed4:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <_ZN7TwoWire12transmittingE>
    2ed8:	22 23       	and	r18, r18
    2eda:	d1 f0       	breq	.+52     	; 0x2f10 <_ZN7TwoWire5writeEh+0x48>
    2edc:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2ee0:	20 32       	cpi	r18, 0x20	; 32
    2ee2:	40 f0       	brcs	.+16     	; 0x2ef4 <_ZN7TwoWire5writeEh+0x2c>
    2ee4:	21 e0       	ldi	r18, 0x01	; 1
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	fc 01       	movw	r30, r24
    2eea:	33 83       	std	Z+3, r19	; 0x03
    2eec:	22 83       	std	Z+2, r18	; 0x02
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	15 c0       	rjmp	.+42     	; 0x2f1e <_ZN7TwoWire5writeEh+0x56>
    2ef4:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2ef8:	e8 2f       	mov	r30, r24
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	e7 5a       	subi	r30, 0xA7	; 167
    2efe:	fc 4f       	sbci	r31, 0xFC	; 252
    2f00:	99 81       	ldd	r25, Y+1	; 0x01
    2f02:	90 83       	st	Z, r25
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f0a:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f0e:	05 c0       	rjmp	.+10     	; 0x2f1a <_ZN7TwoWire5writeEh+0x52>
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	ce 01       	movw	r24, r28
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	0e 94 66 15 	call	0x2acc	; 0x2acc <twi_transmit>
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0f 90       	pop	r0
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	08 95       	ret

00002f26 <_ZN7TwoWireC1Ev>:
    2f26:	fc 01       	movw	r30, r24
    2f28:	13 82       	std	Z+3, r1	; 0x03
    2f2a:	12 82       	std	Z+2, r1	; 0x02
    2f2c:	88 ee       	ldi	r24, 0xE8	; 232
    2f2e:	93 e0       	ldi	r25, 0x03	; 3
    2f30:	a0 e0       	ldi	r26, 0x00	; 0
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	84 83       	std	Z+4, r24	; 0x04
    2f36:	95 83       	std	Z+5, r25	; 0x05
    2f38:	a6 83       	std	Z+6, r26	; 0x06
    2f3a:	b7 83       	std	Z+7, r27	; 0x07
    2f3c:	8e e5       	ldi	r24, 0x5E	; 94
    2f3e:	91 e0       	ldi	r25, 0x01	; 1
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	80 83       	st	Z, r24
    2f44:	08 95       	ret

00002f46 <_ZN7TwoWire5beginEv>:
    2f46:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    2f4a:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    2f4e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f52:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f56:	0e 94 aa 14 	call	0x2954	; 0x2954 <twi_init>
    2f5a:	8b e2       	ldi	r24, 0x2B	; 43
    2f5c:	97 e1       	ldi	r25, 0x17	; 23
    2f5e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <twi_attachSlaveTxEvent>
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	97 e1       	ldi	r25, 0x17	; 23
    2f66:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <twi_attachSlaveRxEvent>

00002f6a <_ZN7TwoWire17beginTransmissionEh>:
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZN7TwoWire12transmittingE>
    2f70:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <_ZN7TwoWire9txAddressE>
    2f74:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f78:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f7c:	08 95       	ret

00002f7e <_ZN7TwoWire17beginTransmissionEi>:
    2f7e:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <_ZN7TwoWire17beginTransmissionEh>

00002f82 <_ZN7TwoWire15endTransmissionEh>:
    2f82:	0f 93       	push	r16
    2f84:	06 2f       	mov	r16, r22
    2f86:	21 e0       	ldi	r18, 0x01	; 1
    2f88:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2f8c:	69 e5       	ldi	r22, 0x59	; 89
    2f8e:	73 e0       	ldi	r23, 0x03	; 3
    2f90:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <_ZN7TwoWire9txAddressE>
    2f94:	0e 94 10 15 	call	0x2a20	; 0x2a20 <twi_writeTo>
    2f98:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN7TwoWire13txBufferIndexE>
    2f9c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZN7TwoWire14txBufferLengthE>
    2fa0:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZN7TwoWire12transmittingE>
    2fa4:	0f 91       	pop	r16
    2fa6:	08 95       	ret

00002fa8 <_ZN7TwoWire11requestFromEhhmhh>:
    2fa8:	4f 92       	push	r4
    2faa:	5f 92       	push	r5
    2fac:	6f 92       	push	r6
    2fae:	7f 92       	push	r7
    2fb0:	af 92       	push	r10
    2fb2:	bf 92       	push	r11
    2fb4:	cf 92       	push	r12
    2fb6:	ef 92       	push	r14
    2fb8:	ff 92       	push	r15
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	5c 01       	movw	r10, r24
    2fc4:	f6 2e       	mov	r15, r22
    2fc6:	d4 2f       	mov	r29, r20
    2fc8:	28 01       	movw	r4, r16
    2fca:	39 01       	movw	r6, r18
    2fcc:	ee 20       	and	r14, r14
    2fce:	21 f1       	breq	.+72     	; 0x3018 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2fd0:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_ZN7TwoWire17beginTransmissionEh>
    2fd4:	ce 2d       	mov	r28, r14
    2fd6:	c4 30       	cpi	r28, 0x04	; 4
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2fda:	c3 e0       	ldi	r28, 0x03	; 3
    2fdc:	c1 50       	subi	r28, 0x01	; 1
    2fde:	c0 f0       	brcs	.+48     	; 0x3010 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2fe0:	28 e0       	ldi	r18, 0x08	; 8
    2fe2:	c2 9f       	mul	r28, r18
    2fe4:	c0 01       	movw	r24, r0
    2fe6:	11 24       	eor	r1, r1
    2fe8:	a3 01       	movw	r20, r6
    2fea:	92 01       	movw	r18, r4
    2fec:	04 c0       	rjmp	.+8      	; 0x2ff6 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2fee:	56 95       	lsr	r21
    2ff0:	47 95       	ror	r20
    2ff2:	37 95       	ror	r19
    2ff4:	27 95       	ror	r18
    2ff6:	8a 95       	dec	r24
    2ff8:	d2 f7       	brpl	.-12     	; 0x2fee <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2ffa:	ca 01       	movw	r24, r20
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	d5 01       	movw	r26, r10
    3000:	ed 91       	ld	r30, X+
    3002:	fc 91       	ld	r31, X
    3004:	01 90       	ld	r0, Z+
    3006:	f0 81       	ld	r31, Z
    3008:	e0 2d       	mov	r30, r0
    300a:	c5 01       	movw	r24, r10
    300c:	09 95       	icall
    300e:	e6 cf       	rjmp	.-52     	; 0x2fdc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	c5 01       	movw	r24, r10
    3014:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN7TwoWire15endTransmissionEh>
    3018:	4d 2f       	mov	r20, r29
    301a:	d1 32       	cpi	r29, 0x21	; 33
    301c:	08 f0       	brcs	.+2      	; 0x3020 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    301e:	40 e2       	ldi	r20, 0x20	; 32
    3020:	2c 2d       	mov	r18, r12
    3022:	6c e7       	ldi	r22, 0x7C	; 124
    3024:	73 e0       	ldi	r23, 0x03	; 3
    3026:	8f 2d       	mov	r24, r15
    3028:	0e 94 c8 14 	call	0x2990	; 0x2990 <twi_readFrom>
    302c:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire13rxBufferIndexE>
    3030:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <_ZN7TwoWire14rxBufferLengthE>
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	cf 90       	pop	r12
    3042:	bf 90       	pop	r11
    3044:	af 90       	pop	r10
    3046:	7f 90       	pop	r7
    3048:	6f 90       	pop	r6
    304a:	5f 90       	pop	r5
    304c:	4f 90       	pop	r4
    304e:	08 95       	ret

00003050 <_ZN7TwoWire11requestFromEhhh>:
    3050:	cf 92       	push	r12
    3052:	ef 92       	push	r14
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	c2 2e       	mov	r12, r18
    305a:	e1 2c       	mov	r14, r1
    305c:	00 e0       	ldi	r16, 0x00	; 0
    305e:	10 e0       	ldi	r17, 0x00	; 0
    3060:	98 01       	movw	r18, r16
    3062:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7TwoWire11requestFromEhhmhh>
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ef 90       	pop	r14
    306c:	cf 90       	pop	r12
    306e:	08 95       	ret

00003070 <_ZN7TwoWire11requestFromEii>:
    3070:	21 e0       	ldi	r18, 0x01	; 1
    3072:	0c 94 28 18 	jmp	0x3050	; 0x3050 <_ZN7TwoWire11requestFromEhhh>

00003076 <_ZN7TwoWire15endTransmissionEv>:
    3076:	61 e0       	ldi	r22, 0x01	; 1
    3078:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <_ZN7TwoWire15endTransmissionEh>

0000307c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    307c:	86 e4       	ldi	r24, 0x46	; 70
    307e:	93 e0       	ldi	r25, 0x03	; 3
    3080:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <_ZN7TwoWireC1Ev>

00003084 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    3084:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    3088:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    308c:	0e 94 3a 22 	call	0x4474	; 0x4474 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    3090:	63 e0       	ldi	r22, 0x03	; 3
    3092:	77 e0       	ldi	r23, 0x07	; 7
    3094:	8e e9       	ldi	r24, 0x9E	; 158
    3096:	93 e0       	ldi	r25, 0x03	; 3
    3098:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>

0000309c <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    30a2:	6e ef       	ldi	r22, 0xFE	; 254
    30a4:	76 e0       	ldi	r23, 0x06	; 6
    30a6:	8e e9       	ldi	r24, 0x9E	; 158
    30a8:	93 e0       	ldi	r25, 0x03	; 3
    30aa:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    30ae:	84 e1       	ldi	r24, 0x14	; 20
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 a2 21 	call	0x4344	; 0x4344 <malloc>
    30b6:	fc 01       	movw	r30, r24
    30b8:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <_mockData+0x1>
    30bc:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	92 83       	std	Z+2, r25	; 0x02
    30c6:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    30c8:	8a e0       	ldi	r24, 0x0A	; 10
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	96 83       	std	Z+6, r25	; 0x06
    30ce:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    30d0:	84 e6       	ldi	r24, 0x64	; 100
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	94 83       	std	Z+4, r25	; 0x04
    30d6:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    30d8:	83 e3       	ldi	r24, 0x33	; 51
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	90 87       	std	Z+8, r25	; 0x08
    30de:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    30e0:	83 e0       	ldi	r24, 0x03	; 3
    30e2:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	94 87       	std	Z+12, r25	; 0x0c
    30ea:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    30ec:	84 e1       	ldi	r24, 0x14	; 20
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	90 8b       	std	Z+16, r25	; 0x10
    30f2:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    30f4:	88 ec       	ldi	r24, 0xC8	; 200
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	96 87       	std	Z+14, r25	; 0x0e
    30fa:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    30fc:	84 e3       	ldi	r24, 0x34	; 52
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	92 8b       	std	Z+18, r25	; 0x12
    3102:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    3104:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    3106:	67 ed       	ldi	r22, 0xD7	; 215
    3108:	76 e0       	ldi	r23, 0x06	; 6
    310a:	8e e9       	ldi	r24, 0x9E	; 158
    310c:	93 e0       	ldi	r25, 0x03	; 3
    310e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    3112:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    3116:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    311a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    311e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    3122:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3126:	0a 96       	adiw	r24, 0x0a	; 10
    3128:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    312c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_mockData>
    3130:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_mockData+0x1>
    3134:	99 83       	std	Y+1, r25	; 0x01
    3136:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3142:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3144:	91 8d       	ldd	r25, Z+25	; 0x19
    3146:	22 8d       	ldd	r18, Z+26	; 0x1a
    3148:	89 2f       	mov	r24, r25
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	80 5c       	subi	r24, 0xC0	; 192
    314e:	9f 4f       	sbci	r25, 0xFF	; 255
    3150:	82 1b       	sub	r24, r18
    3152:	91 09       	sbc	r25, r1
}
    3154:	8f 73       	andi	r24, 0x3F	; 63
    3156:	99 27       	eor	r25, r25
    3158:	08 95       	ret

0000315a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    315a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    315c:	91 8d       	ldd	r25, Z+25	; 0x19
    315e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3160:	98 17       	cp	r25, r24
    3162:	31 f0       	breq	.+12     	; 0x3170 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3164:	82 8d       	ldd	r24, Z+26	; 0x1a
    3166:	e8 0f       	add	r30, r24
    3168:	f1 1d       	adc	r31, r1
    316a:	85 8d       	ldd	r24, Z+29	; 0x1d
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3170:	8f ef       	ldi	r24, 0xFF	; 255
    3172:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3174:	08 95       	ret

00003176 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3176:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3178:	91 8d       	ldd	r25, Z+25	; 0x19
    317a:	82 8d       	ldd	r24, Z+26	; 0x1a
    317c:	98 17       	cp	r25, r24
    317e:	61 f0       	breq	.+24     	; 0x3198 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3180:	82 8d       	ldd	r24, Z+26	; 0x1a
    3182:	df 01       	movw	r26, r30
    3184:	a8 0f       	add	r26, r24
    3186:	b1 1d       	adc	r27, r1
    3188:	5d 96       	adiw	r26, 0x1d	; 29
    318a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    318c:	92 8d       	ldd	r25, Z+26	; 0x1a
    318e:	9f 5f       	subi	r25, 0xFF	; 255
    3190:	9f 73       	andi	r25, 0x3F	; 63
    3192:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3198:	8f ef       	ldi	r24, 0xFF	; 255
    319a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    319c:	08 95       	ret

0000319e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    319e:	84 e2       	ldi	r24, 0x24	; 36
    31a0:	9a e1       	ldi	r25, 0x1A	; 26
    31a2:	89 2b       	or	r24, r25
    31a4:	49 f0       	breq	.+18     	; 0x31b8 <_Z14serialEventRunv+0x1a>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	89 2b       	or	r24, r25
    31ac:	29 f0       	breq	.+10     	; 0x31b8 <_Z14serialEventRunv+0x1a>
    31ae:	0e 94 24 1a 	call	0x3448	; 0x3448 <_Z17Serial0_availablev>
    31b2:	81 11       	cpse	r24, r1
    31b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    31b8:	08 95       	ret

000031ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    31ba:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    31bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    31be:	df 01       	movw	r26, r30
    31c0:	a8 0f       	add	r26, r24
    31c2:	b1 1d       	adc	r27, r1
    31c4:	a3 5a       	subi	r26, 0xA3	; 163
    31c6:	bf 4f       	sbci	r27, 0xFF	; 255
    31c8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    31ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	8f 73       	andi	r24, 0x3F	; 63
    31d2:	99 27       	eor	r25, r25
    31d4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    31d6:	a6 89       	ldd	r26, Z+22	; 0x16
    31d8:	b7 89       	ldd	r27, Z+23	; 0x17
    31da:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    31dc:	a0 89       	ldd	r26, Z+16	; 0x10
    31de:	b1 89       	ldd	r27, Z+17	; 0x11
    31e0:	8c 91       	ld	r24, X
    31e2:	80 64       	ori	r24, 0x40	; 64
    31e4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    31e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    31e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    31ea:	98 13       	cpse	r25, r24
    31ec:	06 c0       	rjmp	.+12     	; 0x31fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    31ee:	02 88       	ldd	r0, Z+18	; 0x12
    31f0:	f3 89       	ldd	r31, Z+19	; 0x13
    31f2:	e0 2d       	mov	r30, r0
    31f4:	80 81       	ld	r24, Z
    31f6:	8f 7d       	andi	r24, 0xDF	; 223
    31f8:	80 83       	st	Z, r24
    31fa:	08 95       	ret

000031fc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	ec 01       	movw	r28, r24
  _written = true;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    320e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3210:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3212:	98 13       	cpse	r25, r24
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <_ZN14HardwareSerial5writeEh+0x24>
    3216:	e8 89       	ldd	r30, Y+16	; 0x10
    3218:	f9 89       	ldd	r31, Y+17	; 0x11
    321a:	80 81       	ld	r24, Z
    321c:	85 fd       	sbrc	r24, 5
    321e:	24 c0       	rjmp	.+72     	; 0x3268 <_ZN14HardwareSerial5writeEh+0x6c>
    3220:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3222:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3224:	10 e0       	ldi	r17, 0x00	; 0
    3226:	0f 5f       	subi	r16, 0xFF	; 255
    3228:	1f 4f       	sbci	r17, 0xFF	; 255
    322a:	0f 73       	andi	r16, 0x3F	; 63
    322c:	11 27       	eor	r17, r17
    322e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3230:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3232:	e8 12       	cpse	r14, r24
    3234:	0c c0       	rjmp	.+24     	; 0x324e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3236:	0f b6       	in	r0, 0x3f	; 63
    3238:	07 fc       	sbrc	r0, 7
    323a:	fa cf       	rjmp	.-12     	; 0x3230 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    323c:	e8 89       	ldd	r30, Y+16	; 0x10
    323e:	f9 89       	ldd	r31, Y+17	; 0x11
    3240:	80 81       	ld	r24, Z
    3242:	85 ff       	sbrs	r24, 5
    3244:	f5 cf       	rjmp	.-22     	; 0x3230 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3246:	ce 01       	movw	r24, r28
    3248:	0e 94 dd 18 	call	0x31ba	; 0x31ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    324c:	f1 cf       	rjmp	.-30     	; 0x3230 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    324e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3250:	fe 01       	movw	r30, r28
    3252:	e8 0f       	add	r30, r24
    3254:	f1 1d       	adc	r31, r1
    3256:	e3 5a       	subi	r30, 0xA3	; 163
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    325c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    325e:	ea 89       	ldd	r30, Y+18	; 0x12
    3260:	fb 89       	ldd	r31, Y+19	; 0x13
    3262:	80 81       	ld	r24, Z
    3264:	80 62       	ori	r24, 0x20	; 32
    3266:	07 c0       	rjmp	.+14     	; 0x3276 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3268:	ee 89       	ldd	r30, Y+22	; 0x16
    326a:	ff 89       	ldd	r31, Y+23	; 0x17
    326c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    326e:	e8 89       	ldd	r30, Y+16	; 0x10
    3270:	f9 89       	ldd	r31, Y+17	; 0x11
    3272:	80 81       	ld	r24, Z
    3274:	80 64       	ori	r24, 0x40	; 64
    3276:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	ff 90       	pop	r15
    3286:	ef 90       	pop	r14
    3288:	08 95       	ret

0000328a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3290:	88 8d       	ldd	r24, Y+24	; 0x18
    3292:	88 23       	and	r24, r24
    3294:	c9 f0       	breq	.+50     	; 0x32c8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3296:	ea 89       	ldd	r30, Y+18	; 0x12
    3298:	fb 89       	ldd	r31, Y+19	; 0x13
    329a:	80 81       	ld	r24, Z
    329c:	85 fd       	sbrc	r24, 5
    329e:	05 c0       	rjmp	.+10     	; 0x32aa <_ZN14HardwareSerial5flushEv+0x20>
    32a0:	a8 89       	ldd	r26, Y+16	; 0x10
    32a2:	b9 89       	ldd	r27, Y+17	; 0x11
    32a4:	8c 91       	ld	r24, X
    32a6:	86 fd       	sbrc	r24, 6
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	07 fc       	sbrc	r0, 7
    32ae:	f5 cf       	rjmp	.-22     	; 0x329a <_ZN14HardwareSerial5flushEv+0x10>
    32b0:	80 81       	ld	r24, Z
    32b2:	85 ff       	sbrs	r24, 5
    32b4:	f2 cf       	rjmp	.-28     	; 0x329a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    32b6:	a8 89       	ldd	r26, Y+16	; 0x10
    32b8:	b9 89       	ldd	r27, Y+17	; 0x11
    32ba:	8c 91       	ld	r24, X
    32bc:	85 ff       	sbrs	r24, 5
    32be:	ed cf       	rjmp	.-38     	; 0x329a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    32c0:	ce 01       	movw	r24, r28
    32c2:	0e 94 dd 18 	call	0x31ba	; 0x31ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    32c6:	e7 cf       	rjmp	.-50     	; 0x3296 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	08 95       	ret

000032ce <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    32ce:	cf 92       	push	r12
    32d0:	df 92       	push	r13
    32d2:	ef 92       	push	r14
    32d4:	ff 92       	push	r15
    32d6:	1f 93       	push	r17
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	ec 01       	movw	r28, r24
    32de:	6a 01       	movw	r12, r20
    32e0:	7b 01       	movw	r14, r22
    32e2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    32e4:	e8 89       	ldd	r30, Y+16	; 0x10
    32e6:	f9 89       	ldd	r31, Y+17	; 0x11
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    32ec:	41 15       	cp	r20, r1
    32ee:	51 4e       	sbci	r21, 0xE1	; 225
    32f0:	61 05       	cpc	r22, r1
    32f2:	71 05       	cpc	r23, r1
    32f4:	b1 f0       	breq	.+44     	; 0x3322 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	79 e0       	ldi	r23, 0x09	; 9
    32fa:	8d e3       	ldi	r24, 0x3D	; 61
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	a7 01       	movw	r20, r14
    3300:	96 01       	movw	r18, r12
    3302:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__udivmodsi4>
    3306:	da 01       	movw	r26, r20
    3308:	c9 01       	movw	r24, r18
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	a1 09       	sbc	r26, r1
    330e:	b1 09       	sbc	r27, r1
    3310:	b6 95       	lsr	r27
    3312:	a7 95       	ror	r26
    3314:	97 95       	ror	r25
    3316:	87 95       	ror	r24
    3318:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    331a:	21 15       	cp	r18, r1
    331c:	80 e1       	ldi	r24, 0x10	; 16
    331e:	38 07       	cpc	r19, r24
    3320:	a8 f0       	brcs	.+42     	; 0x334c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3322:	e8 89       	ldd	r30, Y+16	; 0x10
    3324:	f9 89       	ldd	r31, Y+17	; 0x11
    3326:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3328:	60 e8       	ldi	r22, 0x80	; 128
    332a:	74 e8       	ldi	r23, 0x84	; 132
    332c:	8e e1       	ldi	r24, 0x1E	; 30
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	a7 01       	movw	r20, r14
    3332:	96 01       	movw	r18, r12
    3334:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__udivmodsi4>
    3338:	da 01       	movw	r26, r20
    333a:	c9 01       	movw	r24, r18
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	a1 09       	sbc	r26, r1
    3340:	b1 09       	sbc	r27, r1
    3342:	b6 95       	lsr	r27
    3344:	a7 95       	ror	r26
    3346:	97 95       	ror	r25
    3348:	87 95       	ror	r24
    334a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    334c:	ec 85       	ldd	r30, Y+12	; 0x0c
    334e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3350:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3352:	ee 85       	ldd	r30, Y+14	; 0x0e
    3354:	ff 85       	ldd	r31, Y+15	; 0x0f
    3356:	20 83       	st	Z, r18

  _written = false;
    3358:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    335a:	ec 89       	ldd	r30, Y+20	; 0x14
    335c:	fd 89       	ldd	r31, Y+21	; 0x15
    335e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3360:	ea 89       	ldd	r30, Y+18	; 0x12
    3362:	fb 89       	ldd	r31, Y+19	; 0x13
    3364:	80 81       	ld	r24, Z
    3366:	80 61       	ori	r24, 0x10	; 16
    3368:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    336a:	ea 89       	ldd	r30, Y+18	; 0x12
    336c:	fb 89       	ldd	r31, Y+19	; 0x13
    336e:	80 81       	ld	r24, Z
    3370:	88 60       	ori	r24, 0x08	; 8
    3372:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3374:	ea 89       	ldd	r30, Y+18	; 0x12
    3376:	fb 89       	ldd	r31, Y+19	; 0x13
    3378:	80 81       	ld	r24, Z
    337a:	80 68       	ori	r24, 0x80	; 128
    337c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    337e:	ea 89       	ldd	r30, Y+18	; 0x12
    3380:	fb 89       	ldd	r31, Y+19	; 0x13
    3382:	80 81       	ld	r24, Z
    3384:	8f 7d       	andi	r24, 0xDF	; 223
    3386:	80 83       	st	Z, r24
}
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	1f 91       	pop	r17
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	df 90       	pop	r13
    3394:	cf 90       	pop	r12
    3396:	08 95       	ret

00003398 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	2f 93       	push	r18
    33a4:	8f 93       	push	r24
    33a6:	9f 93       	push	r25
    33a8:	ef 93       	push	r30
    33aa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    33ac:	e0 91 ae 03 	lds	r30, 0x03AE	; 0x8003ae <Serial+0x10>
    33b0:	f0 91 af 03 	lds	r31, 0x03AF	; 0x8003af <Serial+0x11>
    33b4:	80 81       	ld	r24, Z
    33b6:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <Serial+0x16>
    33ba:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <Serial+0x17>
    33be:	82 fd       	sbrc	r24, 2
    33c0:	12 c0       	rjmp	.+36     	; 0x33e6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    33c2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    33c4:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <Serial+0x19>
    33c8:	8f 5f       	subi	r24, 0xFF	; 255
    33ca:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    33cc:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <Serial+0x1a>
    33d0:	82 17       	cp	r24, r18
    33d2:	51 f0       	breq	.+20     	; 0x33e8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    33d4:	e0 91 b7 03 	lds	r30, 0x03B7	; 0x8003b7 <Serial+0x19>
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	e2 56       	subi	r30, 0x62	; 98
    33dc:	fc 4f       	sbci	r31, 0xFC	; 252
    33de:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    33e0:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <Serial+0x19>
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    33e6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    33e8:	ff 91       	pop	r31
    33ea:	ef 91       	pop	r30
    33ec:	9f 91       	pop	r25
    33ee:	8f 91       	pop	r24
    33f0:	2f 91       	pop	r18
    33f2:	0f 90       	pop	r0
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	0f 90       	pop	r0
    33f8:	1f 90       	pop	r1
    33fa:	18 95       	reti

000033fc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    33fc:	1f 92       	push	r1
    33fe:	0f 92       	push	r0
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	0f 92       	push	r0
    3404:	11 24       	eor	r1, r1
    3406:	2f 93       	push	r18
    3408:	3f 93       	push	r19
    340a:	4f 93       	push	r20
    340c:	5f 93       	push	r21
    340e:	6f 93       	push	r22
    3410:	7f 93       	push	r23
    3412:	8f 93       	push	r24
    3414:	9f 93       	push	r25
    3416:	af 93       	push	r26
    3418:	bf 93       	push	r27
    341a:	ef 93       	push	r30
    341c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    341e:	8e e9       	ldi	r24, 0x9E	; 158
    3420:	93 e0       	ldi	r25, 0x03	; 3
    3422:	0e 94 dd 18 	call	0x31ba	; 0x31ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3426:	ff 91       	pop	r31
    3428:	ef 91       	pop	r30
    342a:	bf 91       	pop	r27
    342c:	af 91       	pop	r26
    342e:	9f 91       	pop	r25
    3430:	8f 91       	pop	r24
    3432:	7f 91       	pop	r23
    3434:	6f 91       	pop	r22
    3436:	5f 91       	pop	r21
    3438:	4f 91       	pop	r20
    343a:	3f 91       	pop	r19
    343c:	2f 91       	pop	r18
    343e:	0f 90       	pop	r0
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	0f 90       	pop	r0
    3444:	1f 90       	pop	r1
    3446:	18 95       	reti

00003448 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3448:	8e e9       	ldi	r24, 0x9E	; 158
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	0e 94 a1 18 	call	0x3142	; 0x3142 <_ZN14HardwareSerial9availableEv>
    3450:	21 e0       	ldi	r18, 0x01	; 1
    3452:	89 2b       	or	r24, r25
    3454:	09 f4       	brne	.+2      	; 0x3458 <_Z17Serial0_availablev+0x10>
    3456:	20 e0       	ldi	r18, 0x00	; 0
}
    3458:	82 2f       	mov	r24, r18
    345a:	08 95       	ret

0000345c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    345c:	ee e9       	ldi	r30, 0x9E	; 158
    345e:	f3 e0       	ldi	r31, 0x03	; 3
    3460:	13 82       	std	Z+3, r1	; 0x03
    3462:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3464:	88 ee       	ldi	r24, 0xE8	; 232
    3466:	93 e0       	ldi	r25, 0x03	; 3
    3468:	a0 e0       	ldi	r26, 0x00	; 0
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	84 83       	std	Z+4, r24	; 0x04
    346e:	95 83       	std	Z+5, r25	; 0x05
    3470:	a6 83       	std	Z+6, r26	; 0x06
    3472:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3474:	8e e6       	ldi	r24, 0x6E	; 110
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	80 83       	st	Z, r24
    347c:	85 ec       	ldi	r24, 0xC5	; 197
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	95 87       	std	Z+13, r25	; 0x0d
    3482:	84 87       	std	Z+12, r24	; 0x0c
    3484:	84 ec       	ldi	r24, 0xC4	; 196
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	97 87       	std	Z+15, r25	; 0x0f
    348a:	86 87       	std	Z+14, r24	; 0x0e
    348c:	80 ec       	ldi	r24, 0xC0	; 192
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	91 8b       	std	Z+17, r25	; 0x11
    3492:	80 8b       	std	Z+16, r24	; 0x10
    3494:	81 ec       	ldi	r24, 0xC1	; 193
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	93 8b       	std	Z+19, r25	; 0x13
    349a:	82 8b       	std	Z+18, r24	; 0x12
    349c:	82 ec       	ldi	r24, 0xC2	; 194
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	95 8b       	std	Z+21, r25	; 0x15
    34a2:	84 8b       	std	Z+20, r24	; 0x14
    34a4:	86 ec       	ldi	r24, 0xC6	; 198
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	97 8b       	std	Z+23, r25	; 0x17
    34aa:	86 8b       	std	Z+22, r24	; 0x16
    34ac:	11 8e       	std	Z+25, r1	; 0x19
    34ae:	12 8e       	std	Z+26, r1	; 0x1a
    34b0:	13 8e       	std	Z+27, r1	; 0x1b
    34b2:	14 8e       	std	Z+28, r1	; 0x1c
    34b4:	08 95       	ret

000034b6 <initVariant>:
    34b6:	08 95       	ret

000034b8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    34b8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <init>

	initVariant();
    34bc:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    34c0:	0e 94 07 10 	call	0x200e	; 0x200e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    34c4:	cf ec       	ldi	r28, 0xCF	; 207
    34c6:	d8 e1       	ldi	r29, 0x18	; 24
#endif
	
	setup();
    
	for (;;) {
		loop();
    34c8:	0e 94 35 13 	call	0x266a	; 0x266a <loop>
		if (serialEventRun) serialEventRun();
    34cc:	20 97       	sbiw	r28, 0x00	; 0
    34ce:	e1 f3       	breq	.-8      	; 0x34c8 <main+0x10>
    34d0:	0e 94 cf 18 	call	0x319e	; 0x319e <_Z14serialEventRunv>
    34d4:	f9 cf       	rjmp	.-14     	; 0x34c8 <main+0x10>

000034d6 <_Znwj>:
    34d6:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <malloc>

000034da <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    34da:	cf 92       	push	r12
    34dc:	df 92       	push	r13
    34de:	ef 92       	push	r14
    34e0:	ff 92       	push	r15
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	6c 01       	movw	r12, r24
    34ec:	7a 01       	movw	r14, r20
    34ee:	8b 01       	movw	r16, r22
    34f0:	c0 e0       	ldi	r28, 0x00	; 0
    34f2:	d0 e0       	ldi	r29, 0x00	; 0
    34f4:	ce 15       	cp	r28, r14
    34f6:	df 05       	cpc	r29, r15
    34f8:	81 f0       	breq	.+32     	; 0x351a <_ZN5Print5writeEPKhj+0x40>
    34fa:	d8 01       	movw	r26, r16
    34fc:	6d 91       	ld	r22, X+
    34fe:	8d 01       	movw	r16, r26
    3500:	d6 01       	movw	r26, r12
    3502:	ed 91       	ld	r30, X+
    3504:	fc 91       	ld	r31, X
    3506:	01 90       	ld	r0, Z+
    3508:	f0 81       	ld	r31, Z
    350a:	e0 2d       	mov	r30, r0
    350c:	c6 01       	movw	r24, r12
    350e:	09 95       	icall
    3510:	89 2b       	or	r24, r25
    3512:	11 f0       	breq	.+4      	; 0x3518 <_ZN5Print5writeEPKhj+0x3e>
    3514:	21 96       	adiw	r28, 0x01	; 1
    3516:	ee cf       	rjmp	.-36     	; 0x34f4 <_ZN5Print5writeEPKhj+0x1a>
    3518:	7e 01       	movw	r14, r28
    351a:	c7 01       	movw	r24, r14
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
    3524:	ff 90       	pop	r15
    3526:	ef 90       	pop	r14
    3528:	df 90       	pop	r13
    352a:	cf 90       	pop	r12
    352c:	08 95       	ret

0000352e <_ZN5Print5writeEPKc>:
    352e:	61 15       	cp	r22, r1
    3530:	71 05       	cpc	r23, r1
    3532:	79 f0       	breq	.+30     	; 0x3552 <_ZN5Print5writeEPKc+0x24>
    3534:	fb 01       	movw	r30, r22
    3536:	01 90       	ld	r0, Z+
    3538:	00 20       	and	r0, r0
    353a:	e9 f7       	brne	.-6      	; 0x3536 <_ZN5Print5writeEPKc+0x8>
    353c:	31 97       	sbiw	r30, 0x01	; 1
    353e:	af 01       	movw	r20, r30
    3540:	46 1b       	sub	r20, r22
    3542:	57 0b       	sbc	r21, r23
    3544:	dc 01       	movw	r26, r24
    3546:	ed 91       	ld	r30, X+
    3548:	fc 91       	ld	r31, X
    354a:	02 80       	ldd	r0, Z+2	; 0x02
    354c:	f3 81       	ldd	r31, Z+3	; 0x03
    354e:	e0 2d       	mov	r30, r0
    3550:	09 94       	ijmp
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	08 95       	ret

00003558 <_ZN5Print5printEPK19__FlashStringHelper>:
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	8c 01       	movw	r16, r24
    3566:	7b 01       	movw	r14, r22
    3568:	c0 e0       	ldi	r28, 0x00	; 0
    356a:	d0 e0       	ldi	r29, 0x00	; 0
    356c:	f7 01       	movw	r30, r14
    356e:	ec 0f       	add	r30, r28
    3570:	fd 1f       	adc	r31, r29
    3572:	64 91       	lpm	r22, Z
    3574:	66 23       	and	r22, r22
    3576:	61 f0       	breq	.+24     	; 0x3590 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3578:	d8 01       	movw	r26, r16
    357a:	ed 91       	ld	r30, X+
    357c:	fc 91       	ld	r31, X
    357e:	01 90       	ld	r0, Z+
    3580:	f0 81       	ld	r31, Z
    3582:	e0 2d       	mov	r30, r0
    3584:	c8 01       	movw	r24, r16
    3586:	09 95       	icall
    3588:	89 2b       	or	r24, r25
    358a:	11 f0       	breq	.+4      	; 0x3590 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    358c:	21 96       	adiw	r28, 0x01	; 1
    358e:	ee cf       	rjmp	.-36     	; 0x356c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3590:	ce 01       	movw	r24, r28
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	ff 90       	pop	r15
    359c:	ef 90       	pop	r14
    359e:	08 95       	ret

000035a0 <_ZN5Print5printERK6String>:
    35a0:	db 01       	movw	r26, r22
    35a2:	14 96       	adiw	r26, 0x04	; 4
    35a4:	4d 91       	ld	r20, X+
    35a6:	5c 91       	ld	r21, X
    35a8:	15 97       	sbiw	r26, 0x05	; 5
    35aa:	6d 91       	ld	r22, X+
    35ac:	7c 91       	ld	r23, X
    35ae:	dc 01       	movw	r26, r24
    35b0:	ed 91       	ld	r30, X+
    35b2:	fc 91       	ld	r31, X
    35b4:	02 80       	ldd	r0, Z+2	; 0x02
    35b6:	f3 81       	ldd	r31, Z+3	; 0x03
    35b8:	e0 2d       	mov	r30, r0
    35ba:	09 94       	ijmp

000035bc <_ZN5Print5printEPKc>:
    35bc:	0c 94 97 1a 	jmp	0x352e	; 0x352e <_ZN5Print5writeEPKc>

000035c0 <_ZN5Print5printEc>:
    35c0:	dc 01       	movw	r26, r24
    35c2:	ed 91       	ld	r30, X+
    35c4:	fc 91       	ld	r31, X
    35c6:	01 90       	ld	r0, Z+
    35c8:	f0 81       	ld	r31, Z
    35ca:	e0 2d       	mov	r30, r0
    35cc:	09 94       	ijmp

000035ce <_ZN5Print7printlnEv>:
    35ce:	6a e7       	ldi	r22, 0x7A	; 122
    35d0:	71 e0       	ldi	r23, 0x01	; 1
    35d2:	0c 94 97 1a 	jmp	0x352e	; 0x352e <_ZN5Print5writeEPKc>

000035d6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	ec 01       	movw	r28, r24
    35e0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <_ZN5Print5printEPK19__FlashStringHelper>
    35e4:	8c 01       	movw	r16, r24
    35e6:	ce 01       	movw	r24, r28
    35e8:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
    35ec:	80 0f       	add	r24, r16
    35ee:	91 1f       	adc	r25, r17
    35f0:	df 91       	pop	r29
    35f2:	cf 91       	pop	r28
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	08 95       	ret

000035fa <_ZN5Print7printlnEPKc>:
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
    3604:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN5Print5writeEPKc>
    3608:	8c 01       	movw	r16, r24
    360a:	ce 01       	movw	r24, r28
    360c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
    3610:	80 0f       	add	r24, r16
    3612:	91 1f       	adc	r25, r17
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	08 95       	ret

0000361e <_ZN5Print7printlnEc>:
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	ec 01       	movw	r28, r24
    3628:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    362c:	8c 01       	movw	r16, r24
    362e:	ce 01       	movw	r24, r28
    3630:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
    3634:	80 0f       	add	r24, r16
    3636:	91 1f       	adc	r25, r17
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	08 95       	ret

00003642 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3642:	8f 92       	push	r8
    3644:	9f 92       	push	r9
    3646:	af 92       	push	r10
    3648:	bf 92       	push	r11
    364a:	ef 92       	push	r14
    364c:	ff 92       	push	r15
    364e:	0f 93       	push	r16
    3650:	1f 93       	push	r17
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	a1 97       	sbiw	r28, 0x21	; 33
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	7c 01       	movw	r14, r24
    3668:	fa 01       	movw	r30, r20
    366a:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    366c:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    366e:	22 30       	cpi	r18, 0x02	; 2
    3670:	08 f4       	brcc	.+2      	; 0x3674 <_ZN5Print11printNumberEmh+0x32>
    3672:	2a e0       	ldi	r18, 0x0A	; 10
    3674:	8e 01       	movw	r16, r28
    3676:	0f 5d       	subi	r16, 0xDF	; 223
    3678:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    367a:	82 2e       	mov	r8, r18
    367c:	91 2c       	mov	r9, r1
    367e:	a1 2c       	mov	r10, r1
    3680:	b1 2c       	mov	r11, r1
    3682:	bf 01       	movw	r22, r30
    3684:	a5 01       	movw	r20, r10
    3686:	94 01       	movw	r18, r8
    3688:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__udivmodsi4>
    n /= base;
    368c:	f9 01       	movw	r30, r18
    368e:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3690:	01 50       	subi	r16, 0x01	; 1
    3692:	11 09       	sbc	r17, r1
    3694:	6a 30       	cpi	r22, 0x0A	; 10
    3696:	10 f4       	brcc	.+4      	; 0x369c <_ZN5Print11printNumberEmh+0x5a>
    3698:	60 5d       	subi	r22, 0xD0	; 208
    369a:	01 c0       	rjmp	.+2      	; 0x369e <_ZN5Print11printNumberEmh+0x5c>
    369c:	69 5c       	subi	r22, 0xC9	; 201
    369e:	d8 01       	movw	r26, r16
    36a0:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    36a2:	23 2b       	or	r18, r19
    36a4:	24 2b       	or	r18, r20
    36a6:	25 2b       	or	r18, r21
    36a8:	61 f7       	brne	.-40     	; 0x3682 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    36aa:	b8 01       	movw	r22, r16
    36ac:	c7 01       	movw	r24, r14
    36ae:	0e 94 97 1a 	call	0x352e	; 0x352e <_ZN5Print5writeEPKc>
}
    36b2:	a1 96       	adiw	r28, 0x21	; 33
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	ff 90       	pop	r15
    36c8:	ef 90       	pop	r14
    36ca:	bf 90       	pop	r11
    36cc:	af 90       	pop	r10
    36ce:	9f 90       	pop	r9
    36d0:	8f 90       	pop	r8
    36d2:	08 95       	ret

000036d4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    36d4:	21 15       	cp	r18, r1
    36d6:	31 05       	cpc	r19, r1
    36d8:	41 f4       	brne	.+16     	; 0x36ea <_ZN5Print5printEmi+0x16>
    36da:	dc 01       	movw	r26, r24
    36dc:	ed 91       	ld	r30, X+
    36de:	fc 91       	ld	r31, X
    36e0:	01 90       	ld	r0, Z+
    36e2:	f0 81       	ld	r31, Z
    36e4:	e0 2d       	mov	r30, r0
    36e6:	64 2f       	mov	r22, r20
    36e8:	09 94       	ijmp
  else return printNumber(n, base);
    36ea:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <_ZN5Print11printNumberEmh>

000036ee <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    36ee:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    36f0:	46 2f       	mov	r20, r22
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <_ZN5Print5printEmi>

000036fc <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	cf 93       	push	r28
    3702:	df 93       	push	r29
    3704:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3706:	0e 94 77 1b 	call	0x36ee	; 0x36ee <_ZN5Print5printEhi>
    370a:	8c 01       	movw	r16, r24
  n += println();
    370c:	ce 01       	movw	r24, r28
    370e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
  return n;
}
    3712:	80 0f       	add	r24, r16
    3714:	91 1f       	adc	r25, r17
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	08 95       	ret

00003720 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3720:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3722:	ab 01       	movw	r20, r22
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <_ZN5Print5printEmi>

0000372c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3736:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN5Print5printEji>
    373a:	8c 01       	movw	r16, r24
  n += println();
    373c:	ce 01       	movw	r24, r28
    373e:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
  return n;
}
    3742:	80 0f       	add	r24, r16
    3744:	91 1f       	adc	r25, r17
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	08 95       	ret

00003750 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
    3758:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    375a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN5Print5printEmi>
    375e:	8c 01       	movw	r16, r24
  n += println();
    3760:	ce 01       	movw	r24, r28
    3762:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
  return n;
}
    3766:	80 0f       	add	r24, r16
    3768:	91 1f       	adc	r25, r17
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	08 95       	ret

00003774 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3774:	cf 92       	push	r12
    3776:	df 92       	push	r13
    3778:	ef 92       	push	r14
    377a:	ff 92       	push	r15
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
  if (base == 0) {
    3784:	21 15       	cp	r18, r1
    3786:	31 05       	cpc	r19, r1
    3788:	81 f4       	brne	.+32     	; 0x37aa <_ZN5Print5printEli+0x36>
    return write(n);
    378a:	dc 01       	movw	r26, r24
    378c:	ed 91       	ld	r30, X+
    378e:	fc 91       	ld	r31, X
    3790:	01 90       	ld	r0, Z+
    3792:	f0 81       	ld	r31, Z
    3794:	e0 2d       	mov	r30, r0
    3796:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    37a8:	09 94       	ijmp
  } else if (base == 10) {
    37aa:	2a 30       	cpi	r18, 0x0A	; 10
    37ac:	31 05       	cpc	r19, r1
    37ae:	01 f5       	brne	.+64     	; 0x37f0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    37b0:	77 ff       	sbrs	r23, 7
    37b2:	1d c0       	rjmp	.+58     	; 0x37ee <_ZN5Print5printEli+0x7a>
    37b4:	6a 01       	movw	r12, r20
    37b6:	7b 01       	movw	r14, r22
    37b8:	ec 01       	movw	r28, r24
      int t = print('-');
    37ba:	6d e2       	ldi	r22, 0x2D	; 45
    37bc:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    37c0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    37c2:	44 27       	eor	r20, r20
    37c4:	55 27       	eor	r21, r21
    37c6:	ba 01       	movw	r22, r20
    37c8:	4c 19       	sub	r20, r12
    37ca:	5d 09       	sbc	r21, r13
    37cc:	6e 09       	sbc	r22, r14
    37ce:	7f 09       	sbc	r23, r15
    37d0:	2a e0       	ldi	r18, 0x0A	; 10
    37d2:	ce 01       	movw	r24, r28
    37d4:	0e 94 21 1b 	call	0x3642	; 0x3642 <_ZN5Print11printNumberEmh>
    37d8:	80 0f       	add	r24, r16
    37da:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    37dc:	df 91       	pop	r29
    37de:	cf 91       	pop	r28
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	ff 90       	pop	r15
    37e6:	ef 90       	pop	r14
    37e8:	df 90       	pop	r13
    37ea:	cf 90       	pop	r12
    37ec:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    37ee:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	ff 90       	pop	r15
    37fa:	ef 90       	pop	r14
    37fc:	df 90       	pop	r13
    37fe:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3800:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <_ZN5Print11printNumberEmh>

00003804 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3804:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3806:	ab 01       	movw	r20, r22
    3808:	77 0f       	add	r23, r23
    380a:	66 0b       	sbc	r22, r22
    380c:	77 0b       	sbc	r23, r23
    380e:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <_ZN5Print5printEli>

00003812 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3812:	0f 93       	push	r16
    3814:	1f 93       	push	r17
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
    381a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    381c:	0e 94 02 1c 	call	0x3804	; 0x3804 <_ZN5Print5printEii>
    3820:	8c 01       	movw	r16, r24
  n += println();
    3822:	ce 01       	movw	r24, r28
    3824:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
  return n;
}
    3828:	80 0f       	add	r24, r16
    382a:	91 1f       	adc	r25, r17
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	08 95       	ret

00003836 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3840:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_ZN5Print5printEli>
    3844:	8c 01       	movw	r16, r24
  n += println();
    3846:	ce 01       	movw	r24, r28
    3848:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN5Print7printlnEv>
  return n;
}
    384c:	80 0f       	add	r24, r16
    384e:	91 1f       	adc	r25, r17
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	08 95       	ret

0000385a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    385a:	1f 92       	push	r1
    385c:	0f 92       	push	r0
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	0f 92       	push	r0
    3862:	11 24       	eor	r1, r1
    3864:	2f 93       	push	r18
    3866:	3f 93       	push	r19
    3868:	8f 93       	push	r24
    386a:	9f 93       	push	r25
    386c:	af 93       	push	r26
    386e:	bf 93       	push	r27
    3870:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <timer0_millis>
    3874:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <timer0_millis+0x1>
    3878:	a0 91 3e 04 	lds	r26, 0x043E	; 0x80043e <timer0_millis+0x2>
    387c:	b0 91 3f 04 	lds	r27, 0x043F	; 0x80043f <timer0_millis+0x3>
    3880:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <timer0_fract>
    3884:	23 e0       	ldi	r18, 0x03	; 3
    3886:	23 0f       	add	r18, r19
    3888:	2d 37       	cpi	r18, 0x7D	; 125
    388a:	20 f4       	brcc	.+8      	; 0x3894 <__vector_16+0x3a>
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	a1 1d       	adc	r26, r1
    3890:	b1 1d       	adc	r27, r1
    3892:	05 c0       	rjmp	.+10     	; 0x389e <__vector_16+0x44>
    3894:	26 e8       	ldi	r18, 0x86	; 134
    3896:	23 0f       	add	r18, r19
    3898:	02 96       	adiw	r24, 0x02	; 2
    389a:	a1 1d       	adc	r26, r1
    389c:	b1 1d       	adc	r27, r1
    389e:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <timer0_fract>
    38a2:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <timer0_millis>
    38a6:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <timer0_millis+0x1>
    38aa:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <timer0_millis+0x2>
    38ae:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <timer0_millis+0x3>
    38b2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    38b6:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    38ba:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    38be:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	a1 1d       	adc	r26, r1
    38c6:	b1 1d       	adc	r27, r1
    38c8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <timer0_overflow_count>
    38cc:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <timer0_overflow_count+0x1>
    38d0:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <timer0_overflow_count+0x2>
    38d4:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <timer0_overflow_count+0x3>
    38d8:	bf 91       	pop	r27
    38da:	af 91       	pop	r26
    38dc:	9f 91       	pop	r25
    38de:	8f 91       	pop	r24
    38e0:	3f 91       	pop	r19
    38e2:	2f 91       	pop	r18
    38e4:	0f 90       	pop	r0
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	0f 90       	pop	r0
    38ea:	1f 90       	pop	r1
    38ec:	18 95       	reti

000038ee <micros>:
    38ee:	3f b7       	in	r19, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <timer0_overflow_count>
    38f6:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <timer0_overflow_count+0x1>
    38fa:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <timer0_overflow_count+0x2>
    38fe:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <timer0_overflow_count+0x3>
    3902:	26 b5       	in	r18, 0x26	; 38
    3904:	a8 9b       	sbis	0x15, 0	; 21
    3906:	05 c0       	rjmp	.+10     	; 0x3912 <micros+0x24>
    3908:	2f 3f       	cpi	r18, 0xFF	; 255
    390a:	19 f0       	breq	.+6      	; 0x3912 <micros+0x24>
    390c:	01 96       	adiw	r24, 0x01	; 1
    390e:	a1 1d       	adc	r26, r1
    3910:	b1 1d       	adc	r27, r1
    3912:	3f bf       	out	0x3f, r19	; 63
    3914:	ba 2f       	mov	r27, r26
    3916:	a9 2f       	mov	r26, r25
    3918:	98 2f       	mov	r25, r24
    391a:	88 27       	eor	r24, r24
    391c:	82 0f       	add	r24, r18
    391e:	91 1d       	adc	r25, r1
    3920:	a1 1d       	adc	r26, r1
    3922:	b1 1d       	adc	r27, r1
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	42 e0       	ldi	r20, 0x02	; 2
    392a:	66 0f       	add	r22, r22
    392c:	77 1f       	adc	r23, r23
    392e:	88 1f       	adc	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	4a 95       	dec	r20
    3934:	d1 f7       	brne	.-12     	; 0x392a <micros+0x3c>
    3936:	08 95       	ret

00003938 <delay>:
    3938:	8f 92       	push	r8
    393a:	9f 92       	push	r9
    393c:	af 92       	push	r10
    393e:	bf 92       	push	r11
    3940:	cf 92       	push	r12
    3942:	df 92       	push	r13
    3944:	ef 92       	push	r14
    3946:	ff 92       	push	r15
    3948:	6b 01       	movw	r12, r22
    394a:	7c 01       	movw	r14, r24
    394c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <micros>
    3950:	4b 01       	movw	r8, r22
    3952:	5c 01       	movw	r10, r24
    3954:	c1 14       	cp	r12, r1
    3956:	d1 04       	cpc	r13, r1
    3958:	e1 04       	cpc	r14, r1
    395a:	f1 04       	cpc	r15, r1
    395c:	01 f1       	breq	.+64     	; 0x399e <delay+0x66>
    395e:	0e 94 26 21 	call	0x424c	; 0x424c <yield>
    3962:	0e 94 77 1c 	call	0x38ee	; 0x38ee <micros>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	88 19       	sub	r24, r8
    396c:	99 09       	sbc	r25, r9
    396e:	aa 09       	sbc	r26, r10
    3970:	bb 09       	sbc	r27, r11
    3972:	88 3e       	cpi	r24, 0xE8	; 232
    3974:	93 40       	sbci	r25, 0x03	; 3
    3976:	a1 05       	cpc	r26, r1
    3978:	b1 05       	cpc	r27, r1
    397a:	60 f3       	brcs	.-40     	; 0x3954 <delay+0x1c>
    397c:	21 e0       	ldi	r18, 0x01	; 1
    397e:	c2 1a       	sub	r12, r18
    3980:	d1 08       	sbc	r13, r1
    3982:	e1 08       	sbc	r14, r1
    3984:	f1 08       	sbc	r15, r1
    3986:	88 ee       	ldi	r24, 0xE8	; 232
    3988:	88 0e       	add	r8, r24
    398a:	83 e0       	ldi	r24, 0x03	; 3
    398c:	98 1e       	adc	r9, r24
    398e:	a1 1c       	adc	r10, r1
    3990:	b1 1c       	adc	r11, r1
    3992:	c1 14       	cp	r12, r1
    3994:	d1 04       	cpc	r13, r1
    3996:	e1 04       	cpc	r14, r1
    3998:	f1 04       	cpc	r15, r1
    399a:	19 f7       	brne	.-58     	; 0x3962 <delay+0x2a>
    399c:	db cf       	rjmp	.-74     	; 0x3954 <delay+0x1c>
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	df 90       	pop	r13
    39a4:	cf 90       	pop	r12
    39a6:	bf 90       	pop	r11
    39a8:	af 90       	pop	r10
    39aa:	9f 90       	pop	r9
    39ac:	8f 90       	pop	r8
    39ae:	08 95       	ret

000039b0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    39b0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    39b2:	84 b5       	in	r24, 0x24	; 36
    39b4:	82 60       	ori	r24, 0x02	; 2
    39b6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    39b8:	84 b5       	in	r24, 0x24	; 36
    39ba:	81 60       	ori	r24, 0x01	; 1
    39bc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    39be:	85 b5       	in	r24, 0x25	; 37
    39c0:	82 60       	ori	r24, 0x02	; 2
    39c2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    39c4:	85 b5       	in	r24, 0x25	; 37
    39c6:	81 60       	ori	r24, 0x01	; 1
    39c8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    39ca:	ee e6       	ldi	r30, 0x6E	; 110
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	81 60       	ori	r24, 0x01	; 1
    39d2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    39d4:	e1 e8       	ldi	r30, 0x81	; 129
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    39da:	80 81       	ld	r24, Z
    39dc:	82 60       	ori	r24, 0x02	; 2
    39de:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    39e0:	80 81       	ld	r24, Z
    39e2:	81 60       	ori	r24, 0x01	; 1
    39e4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    39e6:	e0 e8       	ldi	r30, 0x80	; 128
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	81 60       	ori	r24, 0x01	; 1
    39ee:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    39f0:	e1 eb       	ldi	r30, 0xB1	; 177
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	84 60       	ori	r24, 0x04	; 4
    39f8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    39fa:	e0 eb       	ldi	r30, 0xB0	; 176
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	81 60       	ori	r24, 0x01	; 1
    3a02:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3a04:	ea e7       	ldi	r30, 0x7A	; 122
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	84 60       	ori	r24, 0x04	; 4
    3a0c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3a0e:	80 81       	ld	r24, Z
    3a10:	82 60       	ori	r24, 0x02	; 2
    3a12:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3a14:	80 81       	ld	r24, Z
    3a16:	81 60       	ori	r24, 0x01	; 1
    3a18:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a1a:	80 81       	ld	r24, Z
    3a1c:	80 68       	ori	r24, 0x80	; 128
    3a1e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a20:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3a24:	08 95       	ret

00003a26 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3a26:	8e 30       	cpi	r24, 0x0E	; 14
    3a28:	08 f0       	brcs	.+2      	; 0x3a2c <analogRead+0x6>
    3a2a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3a2c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3a30:	90 e4       	ldi	r25, 0x40	; 64
    3a32:	29 9f       	mul	r18, r25
    3a34:	90 01       	movw	r18, r0
    3a36:	11 24       	eor	r1, r1
    3a38:	87 70       	andi	r24, 0x07	; 7
    3a3a:	82 2b       	or	r24, r18
    3a3c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3a40:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a44:	80 64       	ori	r24, 0x40	; 64
    3a46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3a4a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3a4e:	86 fd       	sbrc	r24, 6
    3a50:	fc cf       	rjmp	.-8      	; 0x3a4a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3a52:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3a56:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
}
    3a5c:	92 2b       	or	r25, r18
    3a5e:	08 95       	ret

00003a60 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3a60:	83 30       	cpi	r24, 0x03	; 3
    3a62:	81 f0       	breq	.+32     	; 0x3a84 <turnOffPWM+0x24>
    3a64:	28 f4       	brcc	.+10     	; 0x3a70 <turnOffPWM+0x10>
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	99 f0       	breq	.+38     	; 0x3a90 <turnOffPWM+0x30>
    3a6a:	82 30       	cpi	r24, 0x02	; 2
    3a6c:	a1 f0       	breq	.+40     	; 0x3a96 <turnOffPWM+0x36>
    3a6e:	08 95       	ret
    3a70:	87 30       	cpi	r24, 0x07	; 7
    3a72:	a9 f0       	breq	.+42     	; 0x3a9e <turnOffPWM+0x3e>
    3a74:	88 30       	cpi	r24, 0x08	; 8
    3a76:	b9 f0       	breq	.+46     	; 0x3aa6 <turnOffPWM+0x46>
    3a78:	84 30       	cpi	r24, 0x04	; 4
    3a7a:	d1 f4       	brne	.+52     	; 0x3ab0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a7c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a80:	8f 7d       	andi	r24, 0xDF	; 223
    3a82:	03 c0       	rjmp	.+6      	; 0x3a8a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3a84:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a88:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3a8a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3a8e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3a90:	84 b5       	in	r24, 0x24	; 36
    3a92:	8f 77       	andi	r24, 0x7F	; 127
    3a94:	02 c0       	rjmp	.+4      	; 0x3a9a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3a96:	84 b5       	in	r24, 0x24	; 36
    3a98:	8f 7d       	andi	r24, 0xDF	; 223
    3a9a:	84 bd       	out	0x24, r24	; 36
    3a9c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3a9e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3aa2:	8f 77       	andi	r24, 0x7F	; 127
    3aa4:	03 c0       	rjmp	.+6      	; 0x3aac <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3aa6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3aaa:	8f 7d       	andi	r24, 0xDF	; 223
    3aac:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3ab0:	08 95       	ret

00003ab2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	fc 01       	movw	r30, r24
    3aba:	ee 5a       	subi	r30, 0xAE	; 174
    3abc:	f8 4f       	sbci	r31, 0xF8	; 248
    3abe:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	ea 59       	subi	r30, 0x9A	; 154
    3ac4:	f8 4f       	sbci	r31, 0xF8	; 248
    3ac6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3ac8:	88 23       	and	r24, r24
    3aca:	61 f1       	breq	.+88     	; 0x3b24 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	88 0f       	add	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	e2 57       	subi	r30, 0x72	; 114
    3ad6:	f8 4f       	sbci	r31, 0xF8	; 248
    3ad8:	c5 91       	lpm	r28, Z+
    3ada:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3adc:	fc 01       	movw	r30, r24
    3ade:	ec 57       	subi	r30, 0x7C	; 124
    3ae0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ae2:	a5 91       	lpm	r26, Z+
    3ae4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3ae6:	61 11       	cpse	r22, r1
    3ae8:	09 c0       	rjmp	.+18     	; 0x3afc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3aea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3aec:	f8 94       	cli
		*reg &= ~bit;
    3aee:	88 81       	ld	r24, Y
    3af0:	20 95       	com	r18
    3af2:	82 23       	and	r24, r18
    3af4:	88 83       	st	Y, r24
		*out &= ~bit;
    3af6:	ec 91       	ld	r30, X
    3af8:	2e 23       	and	r18, r30
    3afa:	0b c0       	rjmp	.+22     	; 0x3b12 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3afc:	62 30       	cpi	r22, 0x02	; 2
    3afe:	61 f4       	brne	.+24     	; 0x3b18 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3b00:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b02:	f8 94       	cli
		*reg &= ~bit;
    3b04:	88 81       	ld	r24, Y
    3b06:	32 2f       	mov	r19, r18
    3b08:	30 95       	com	r19
    3b0a:	83 23       	and	r24, r19
    3b0c:	88 83       	st	Y, r24
		*out |= bit;
    3b0e:	ec 91       	ld	r30, X
    3b10:	2e 2b       	or	r18, r30
    3b12:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b14:	9f bf       	out	0x3f, r25	; 63
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b18:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b1a:	f8 94       	cli
		*reg |= bit;
    3b1c:	e8 81       	ld	r30, Y
    3b1e:	2e 2b       	or	r18, r30
    3b20:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b22:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	08 95       	ret

00003b2a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3b2a:	1f 93       	push	r17
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	f9 01       	movw	r30, r18
    3b36:	e2 5c       	subi	r30, 0xC2	; 194
    3b38:	f8 4f       	sbci	r31, 0xF8	; 248
    3b3a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3b3c:	f9 01       	movw	r30, r18
    3b3e:	ee 5a       	subi	r30, 0xAE	; 174
    3b40:	f8 4f       	sbci	r31, 0xF8	; 248
    3b42:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3b44:	f9 01       	movw	r30, r18
    3b46:	ea 59       	subi	r30, 0x9A	; 154
    3b48:	f8 4f       	sbci	r31, 0xF8	; 248
    3b4a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3b4c:	cc 23       	and	r28, r28
    3b4e:	c1 f0       	breq	.+48     	; 0x3b80 <digitalWrite+0x56>
    3b50:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3b52:	81 11       	cpse	r24, r1
    3b54:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <turnOffPWM>

	out = portOutputRegister(port);
    3b58:	ec 2f       	mov	r30, r28
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	ee 0f       	add	r30, r30
    3b5e:	ff 1f       	adc	r31, r31
    3b60:	ec 57       	subi	r30, 0x7C	; 124
    3b62:	f8 4f       	sbci	r31, 0xF8	; 248
    3b64:	a5 91       	lpm	r26, Z+
    3b66:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3b68:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3b6a:	f8 94       	cli

	if (val == LOW) {
    3b6c:	11 11       	cpse	r17, r1
    3b6e:	04 c0       	rjmp	.+8      	; 0x3b78 <digitalWrite+0x4e>
		*out &= ~bit;
    3b70:	8c 91       	ld	r24, X
    3b72:	d0 95       	com	r29
    3b74:	d8 23       	and	r29, r24
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <digitalWrite+0x52>
	} else {
		*out |= bit;
    3b78:	ec 91       	ld	r30, X
    3b7a:	de 2b       	or	r29, r30
    3b7c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3b7e:	9f bf       	out	0x3f, r25	; 63
}
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	1f 91       	pop	r17
    3b86:	08 95       	ret

00003b88 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3b88:	fc 01       	movw	r30, r24
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <free>

00003b92 <_ZN6String10invalidateEv>:
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	ec 01       	movw	r28, r24
    3b98:	88 81       	ld	r24, Y
    3b9a:	99 81       	ldd	r25, Y+1	; 0x01
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	11 f0       	breq	.+4      	; 0x3ba4 <_ZN6String10invalidateEv+0x12>
    3ba0:	0e 94 3a 22 	call	0x4474	; 0x4474 <free>
    3ba4:	19 82       	std	Y+1, r1	; 0x01
    3ba6:	18 82       	st	Y, r1
    3ba8:	1d 82       	std	Y+5, r1	; 0x05
    3baa:	1c 82       	std	Y+4, r1	; 0x04
    3bac:	1b 82       	std	Y+3, r1	; 0x03
    3bae:	1a 82       	std	Y+2, r1	; 0x02
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	08 95       	ret

00003bb6 <_ZN6String12changeBufferEj>:
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	ec 01       	movw	r28, r24
    3bc0:	8b 01       	movw	r16, r22
    3bc2:	6f 5f       	subi	r22, 0xFF	; 255
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc6:	88 81       	ld	r24, Y
    3bc8:	99 81       	ldd	r25, Y+1	; 0x01
    3bca:	0e 94 c3 22 	call	0x4586	; 0x4586 <realloc>
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	31 f0       	breq	.+12     	; 0x3bde <_ZN6String12changeBufferEj+0x28>
    3bd2:	99 83       	std	Y+1, r25	; 0x01
    3bd4:	88 83       	st	Y, r24
    3bd6:	1b 83       	std	Y+3, r17	; 0x03
    3bd8:	0a 83       	std	Y+2, r16	; 0x02
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <_ZN6String12changeBufferEj+0x2a>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	08 95       	ret

00003bea <_ZN6String7reserveEj>:
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	ec 01       	movw	r28, r24
    3bf0:	88 81       	ld	r24, Y
    3bf2:	99 81       	ldd	r25, Y+1	; 0x01
    3bf4:	89 2b       	or	r24, r25
    3bf6:	29 f0       	breq	.+10     	; 0x3c02 <_ZN6String7reserveEj+0x18>
    3bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfc:	86 17       	cp	r24, r22
    3bfe:	97 07       	cpc	r25, r23
    3c00:	60 f4       	brcc	.+24     	; 0x3c1a <_ZN6String7reserveEj+0x30>
    3c02:	ce 01       	movw	r24, r28
    3c04:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <_ZN6String12changeBufferEj>
    3c08:	88 23       	and	r24, r24
    3c0a:	41 f0       	breq	.+16     	; 0x3c1c <_ZN6String7reserveEj+0x32>
    3c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c10:	89 2b       	or	r24, r25
    3c12:	19 f4       	brne	.+6      	; 0x3c1a <_ZN6String7reserveEj+0x30>
    3c14:	e8 81       	ld	r30, Y
    3c16:	f9 81       	ldd	r31, Y+1	; 0x01
    3c18:	10 82       	st	Z, r1
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	08 95       	ret

00003c22 <_ZN6String4copyEPKcj>:
    3c22:	ef 92       	push	r14
    3c24:	ff 92       	push	r15
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	ec 01       	movw	r28, r24
    3c30:	7b 01       	movw	r14, r22
    3c32:	8a 01       	movw	r16, r20
    3c34:	ba 01       	movw	r22, r20
    3c36:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_ZN6String7reserveEj>
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	04 c0       	rjmp	.+8      	; 0x3c46 <_ZN6String4copyEPKcj+0x24>
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <_ZN6String10invalidateEv>
    3c44:	07 c0       	rjmp	.+14     	; 0x3c54 <_ZN6String4copyEPKcj+0x32>
    3c46:	1d 83       	std	Y+5, r17	; 0x05
    3c48:	0c 83       	std	Y+4, r16	; 0x04
    3c4a:	b7 01       	movw	r22, r14
    3c4c:	88 81       	ld	r24, Y
    3c4e:	99 81       	ldd	r25, Y+1	; 0x01
    3c50:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strcpy>
    3c54:	ce 01       	movw	r24, r28
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	ff 90       	pop	r15
    3c60:	ef 90       	pop	r14
    3c62:	08 95       	ret

00003c64 <_ZN6StringC1EPKc>:
    3c64:	fc 01       	movw	r30, r24
    3c66:	11 82       	std	Z+1, r1	; 0x01
    3c68:	10 82       	st	Z, r1
    3c6a:	13 82       	std	Z+3, r1	; 0x03
    3c6c:	12 82       	std	Z+2, r1	; 0x02
    3c6e:	15 82       	std	Z+5, r1	; 0x05
    3c70:	14 82       	std	Z+4, r1	; 0x04
    3c72:	61 15       	cp	r22, r1
    3c74:	71 05       	cpc	r23, r1
    3c76:	51 f0       	breq	.+20     	; 0x3c8c <_ZN6StringC1EPKc+0x28>
    3c78:	fb 01       	movw	r30, r22
    3c7a:	01 90       	ld	r0, Z+
    3c7c:	00 20       	and	r0, r0
    3c7e:	e9 f7       	brne	.-6      	; 0x3c7a <_ZN6StringC1EPKc+0x16>
    3c80:	31 97       	sbiw	r30, 0x01	; 1
    3c82:	af 01       	movw	r20, r30
    3c84:	46 1b       	sub	r20, r22
    3c86:	57 0b       	sbc	r21, r23
    3c88:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <_ZN6String4copyEPKcj>
    3c8c:	08 95       	ret

00003c8e <_ZN6StringaSERKS_>:
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	ec 01       	movw	r28, r24
    3c94:	fb 01       	movw	r30, r22
    3c96:	86 17       	cp	r24, r22
    3c98:	97 07       	cpc	r25, r23
    3c9a:	61 f0       	breq	.+24     	; 0x3cb4 <_ZN6StringaSERKS_+0x26>
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	61 15       	cp	r22, r1
    3ca2:	71 05       	cpc	r23, r1
    3ca4:	29 f0       	breq	.+10     	; 0x3cb0 <_ZN6StringaSERKS_+0x22>
    3ca6:	44 81       	ldd	r20, Z+4	; 0x04
    3ca8:	55 81       	ldd	r21, Z+5	; 0x05
    3caa:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <_ZN6String4copyEPKcj>
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <_ZN6StringaSERKS_+0x26>
    3cb0:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <_ZN6String10invalidateEv>
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <_ZN6StringC1ERKS_>:
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	11 82       	std	Z+1, r1	; 0x01
    3cc0:	10 82       	st	Z, r1
    3cc2:	13 82       	std	Z+3, r1	; 0x03
    3cc4:	12 82       	std	Z+2, r1	; 0x02
    3cc6:	15 82       	std	Z+5, r1	; 0x05
    3cc8:	14 82       	std	Z+4, r1	; 0x04
    3cca:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <_ZN6StringaSERKS_>

00003cce <_ZN6String6concatEPKcj>:
    3cce:	ef 92       	push	r14
    3cd0:	ff 92       	push	r15
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	61 15       	cp	r22, r1
    3cdc:	71 05       	cpc	r23, r1
    3cde:	11 f4       	brne	.+4      	; 0x3ce4 <_ZN6String6concatEPKcj+0x16>
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	1c c0       	rjmp	.+56     	; 0x3d1c <_ZN6String6concatEPKcj+0x4e>
    3ce4:	41 15       	cp	r20, r1
    3ce6:	51 05       	cpc	r21, r1
    3ce8:	c1 f0       	breq	.+48     	; 0x3d1a <_ZN6String6concatEPKcj+0x4c>
    3cea:	7b 01       	movw	r14, r22
    3cec:	ec 01       	movw	r28, r24
    3cee:	8c 81       	ldd	r24, Y+4	; 0x04
    3cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cf2:	8a 01       	movw	r16, r20
    3cf4:	08 0f       	add	r16, r24
    3cf6:	19 1f       	adc	r17, r25
    3cf8:	b8 01       	movw	r22, r16
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_ZN6String7reserveEj>
    3d00:	88 23       	and	r24, r24
    3d02:	71 f3       	breq	.-36     	; 0x3ce0 <_ZN6String6concatEPKcj+0x12>
    3d04:	28 81       	ld	r18, Y
    3d06:	39 81       	ldd	r19, Y+1	; 0x01
    3d08:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d0c:	b7 01       	movw	r22, r14
    3d0e:	82 0f       	add	r24, r18
    3d10:	93 1f       	adc	r25, r19
    3d12:	0e 94 e7 23 	call	0x47ce	; 0x47ce <strcpy>
    3d16:	1d 83       	std	Y+5, r17	; 0x05
    3d18:	0c 83       	std	Y+4, r16	; 0x04
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	ef 90       	pop	r14
    3d28:	08 95       	ret

00003d2a <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3d2a:	ef 92       	push	r14
    3d2c:	ff 92       	push	r15
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <_ZN6String6concatEh+0xe>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <_ZN6String6concatEh+0x10>
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	7c 01       	movw	r14, r24
    3d40:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3d42:	4a e0       	ldi	r20, 0x0A	; 10
    3d44:	8e 01       	movw	r16, r28
    3d46:	0f 5f       	subi	r16, 0xFF	; 255
    3d48:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4a:	b8 01       	movw	r22, r16
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	0e 94 ee 23 	call	0x47dc	; 0x47dc <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3d52:	f8 01       	movw	r30, r16
    3d54:	01 90       	ld	r0, Z+
    3d56:	00 20       	and	r0, r0
    3d58:	e9 f7       	brne	.-6      	; 0x3d54 <_ZN6String6concatEh+0x2a>
    3d5a:	31 97       	sbiw	r30, 0x01	; 1
    3d5c:	af 01       	movw	r20, r30
    3d5e:	40 1b       	sub	r20, r16
    3d60:	51 0b       	sbc	r21, r17
    3d62:	b8 01       	movw	r22, r16
    3d64:	c7 01       	movw	r24, r14
    3d66:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN6String6concatEPKcj>
}
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	08 95       	ret

00003d80 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3d80:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3d84:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d88:	28 17       	cp	r18, r24
    3d8a:	39 07       	cpc	r19, r25
    3d8c:	b9 f4       	brne	.+46     	; 0x3dbc <_ZN14SoftwareSerial4readEv+0x3c>
    3d8e:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d92:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d96:	98 17       	cp	r25, r24
    3d98:	89 f0       	breq	.+34     	; 0x3dbc <_ZN14SoftwareSerial4readEv+0x3c>
    3d9a:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	ea 5b       	subi	r30, 0xBA	; 186
    3da2:	fb 4f       	sbci	r31, 0xFB	; 251
    3da4:	80 81       	ld	r24, Z
    3da6:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	2f 5f       	subi	r18, 0xFF	; 255
    3dae:	3f 4f       	sbci	r19, 0xFF	; 255
    3db0:	2f 73       	andi	r18, 0x3F	; 63
    3db2:	33 27       	eor	r19, r19
    3db4:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	08 95       	ret
    3dbc:	8f ef       	ldi	r24, 0xFF	; 255
    3dbe:	9f ef       	ldi	r25, 0xFF	; 255
    3dc0:	08 95       	ret

00003dc2 <_ZN14SoftwareSerial5writeEh>:
    3dc2:	1f 93       	push	r17
    3dc4:	cf 93       	push	r28
    3dc6:	df 93       	push	r29
    3dc8:	dc 01       	movw	r26, r24
    3dca:	5c 96       	adiw	r26, 0x1c	; 28
    3dcc:	8d 91       	ld	r24, X+
    3dce:	9c 91       	ld	r25, X
    3dd0:	5d 97       	sbiw	r26, 0x1d	; 29
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	39 f4       	brne	.+14     	; 0x3de4 <_ZN14SoftwareSerial5writeEh+0x22>
    3dd6:	21 e0       	ldi	r18, 0x01	; 1
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	13 96       	adiw	r26, 0x03	; 3
    3ddc:	3c 93       	st	X, r19
    3dde:	2e 93       	st	-X, r18
    3de0:	12 97       	sbiw	r26, 0x02	; 2
    3de2:	3b c0       	rjmp	.+118    	; 0x3e5a <_ZN14SoftwareSerial5writeEh+0x98>
    3de4:	51 96       	adiw	r26, 0x11	; 17
    3de6:	ed 91       	ld	r30, X+
    3de8:	fc 91       	ld	r31, X
    3dea:	52 97       	sbiw	r26, 0x12	; 18
    3dec:	50 96       	adiw	r26, 0x10	; 16
    3dee:	2c 91       	ld	r18, X
    3df0:	50 97       	sbiw	r26, 0x10	; 16
    3df2:	32 2f       	mov	r19, r18
    3df4:	30 95       	com	r19
    3df6:	1f b7       	in	r17, 0x3f	; 63
    3df8:	5e 96       	adiw	r26, 0x1e	; 30
    3dfa:	4c 91       	ld	r20, X
    3dfc:	5e 97       	sbiw	r26, 0x1e	; 30
    3dfe:	74 2f       	mov	r23, r20
    3e00:	72 70       	andi	r23, 0x02	; 2
    3e02:	41 fd       	sbrc	r20, 1
    3e04:	60 95       	com	r22
    3e06:	f8 94       	cli
    3e08:	40 81       	ld	r20, Z
    3e0a:	77 23       	and	r23, r23
    3e0c:	11 f0       	breq	.+4      	; 0x3e12 <_ZN14SoftwareSerial5writeEh+0x50>
    3e0e:	42 2b       	or	r20, r18
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <_ZN14SoftwareSerial5writeEh+0x52>
    3e12:	43 23       	and	r20, r19
    3e14:	40 83       	st	Z, r20
    3e16:	ec 01       	movw	r28, r24
    3e18:	21 97       	sbiw	r28, 0x01	; 1
    3e1a:	f1 f7       	brne	.-4      	; 0x3e18 <_ZN14SoftwareSerial5writeEh+0x56>
    3e1c:	48 e0       	ldi	r20, 0x08	; 8
    3e1e:	50 81       	ld	r21, Z
    3e20:	60 ff       	sbrs	r22, 0
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <_ZN14SoftwareSerial5writeEh+0x66>
    3e24:	52 2b       	or	r21, r18
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <_ZN14SoftwareSerial5writeEh+0x68>
    3e28:	53 23       	and	r21, r19
    3e2a:	50 83       	st	Z, r21
    3e2c:	ec 01       	movw	r28, r24
    3e2e:	21 97       	sbiw	r28, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <_ZN14SoftwareSerial5writeEh+0x6c>
    3e32:	66 95       	lsr	r22
    3e34:	41 50       	subi	r20, 0x01	; 1
    3e36:	99 f7       	brne	.-26     	; 0x3e1e <_ZN14SoftwareSerial5writeEh+0x5c>
    3e38:	80 81       	ld	r24, Z
    3e3a:	77 23       	and	r23, r23
    3e3c:	19 f0       	breq	.+6      	; 0x3e44 <_ZN14SoftwareSerial5writeEh+0x82>
    3e3e:	83 23       	and	r24, r19
    3e40:	80 83       	st	Z, r24
    3e42:	02 c0       	rjmp	.+4      	; 0x3e48 <_ZN14SoftwareSerial5writeEh+0x86>
    3e44:	28 2b       	or	r18, r24
    3e46:	20 83       	st	Z, r18
    3e48:	1f bf       	out	0x3f, r17	; 63
    3e4a:	5c 96       	adiw	r26, 0x1c	; 28
    3e4c:	8d 91       	ld	r24, X+
    3e4e:	9c 91       	ld	r25, X
    3e50:	5d 97       	sbiw	r26, 0x1d	; 29
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	f1 f7       	brne	.-4      	; 0x3e52 <_ZN14SoftwareSerial5writeEh+0x90>
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	1f 91       	pop	r17
    3e60:	08 95       	ret

00003e62 <_ZN14SoftwareSerial5flushEv>:
    3e62:	08 95       	ret

00003e64 <_ZN14SoftwareSerial4peekEv>:
    3e64:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3e68:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e6c:	28 17       	cp	r18, r24
    3e6e:	39 07       	cpc	r19, r25
    3e70:	71 f4       	brne	.+28     	; 0x3e8e <_ZN14SoftwareSerial4peekEv+0x2a>
    3e72:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e76:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e7a:	98 17       	cp	r25, r24
    3e7c:	41 f0       	breq	.+16     	; 0x3e8e <_ZN14SoftwareSerial4peekEv+0x2a>
    3e7e:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	ea 5b       	subi	r30, 0xBA	; 186
    3e86:	fb 4f       	sbci	r31, 0xFB	; 251
    3e88:	80 81       	ld	r24, Z
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	08 95       	ret
    3e8e:	8f ef       	ldi	r24, 0xFF	; 255
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
    3e92:	08 95       	ret

00003e94 <_ZN14SoftwareSerial9availableEv>:
    3e94:	20 91 86 04 	lds	r18, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3e98:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3e9c:	28 17       	cp	r18, r24
    3e9e:	39 07       	cpc	r19, r25
    3ea0:	71 f4       	brne	.+28     	; 0x3ebe <_ZN14SoftwareSerial9availableEv+0x2a>
    3ea2:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3ea6:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	80 5c       	subi	r24, 0xC0	; 192
    3eae:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb0:	82 1b       	sub	r24, r18
    3eb2:	91 09       	sbc	r25, r1
    3eb4:	60 e4       	ldi	r22, 0x40	; 64
    3eb6:	70 e0       	ldi	r23, 0x00	; 0
    3eb8:	0e 94 47 21 	call	0x428e	; 0x428e <__divmodhi4>
    3ebc:	08 95       	ret
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	08 95       	ret

00003ec4 <_ZN14SoftwareSerial13stopListeningEv>:
    3ec4:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3ec8:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ecc:	e8 17       	cp	r30, r24
    3ece:	f9 07       	cpc	r31, r25
    3ed0:	69 f4       	brne	.+26     	; 0x3eec <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3ed2:	a3 89       	ldd	r26, Z+19	; 0x13
    3ed4:	b4 89       	ldd	r27, Z+20	; 0x14
    3ed6:	9c 91       	ld	r25, X
    3ed8:	85 89       	ldd	r24, Z+21	; 0x15
    3eda:	80 95       	com	r24
    3edc:	89 23       	and	r24, r25
    3ede:	8c 93       	st	X, r24
    3ee0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ee4:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	08 95       	ret
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	08 95       	ret

00003ef0 <_ZN14SoftwareSerial6listenEv>:
    3ef0:	cf 93       	push	r28
    3ef2:	df 93       	push	r29
    3ef4:	ec 01       	movw	r28, r24
    3ef6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ef8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3efa:	89 2b       	or	r24, r25
    3efc:	f1 f0       	breq	.+60     	; 0x3f3a <_ZN14SoftwareSerial6listenEv+0x4a>
    3efe:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f02:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f06:	c8 17       	cp	r28, r24
    3f08:	d9 07       	cpc	r29, r25
    3f0a:	b9 f0       	breq	.+46     	; 0x3f3a <_ZN14SoftwareSerial6listenEv+0x4a>
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	11 f0       	breq	.+4      	; 0x3f14 <_ZN14SoftwareSerial6listenEv+0x24>
    3f10:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <_ZN14SoftwareSerial13stopListeningEv>
    3f14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f16:	8e 7f       	andi	r24, 0xFE	; 254
    3f18:	8e 8f       	std	Y+30, r24	; 0x1e
    3f1a:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3f1e:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3f22:	d0 93 87 04 	sts	0x0487, r29	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f26:	c0 93 86 04 	sts	0x0486, r28	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f2a:	eb 89       	ldd	r30, Y+19	; 0x13
    3f2c:	fc 89       	ldd	r31, Y+20	; 0x14
    3f2e:	90 81       	ld	r25, Z
    3f30:	8d 89       	ldd	r24, Y+21	; 0x15
    3f32:	89 2b       	or	r24, r25
    3f34:	80 83       	st	Z, r24
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	01 c0       	rjmp	.+2      	; 0x3f3c <_ZN14SoftwareSerial6listenEv+0x4c>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	08 95       	ret

00003f42 <__vector_3>:
    3f42:	1f 92       	push	r1
    3f44:	0f 92       	push	r0
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	0f 92       	push	r0
    3f4a:	11 24       	eor	r1, r1
    3f4c:	2f 93       	push	r18
    3f4e:	3f 93       	push	r19
    3f50:	4f 93       	push	r20
    3f52:	5f 93       	push	r21
    3f54:	6f 93       	push	r22
    3f56:	7f 93       	push	r23
    3f58:	8f 93       	push	r24
    3f5a:	9f 93       	push	r25
    3f5c:	af 93       	push	r26
    3f5e:	bf 93       	push	r27
    3f60:	ef 93       	push	r30
    3f62:	ff 93       	push	r31
    3f64:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <_ZN14SoftwareSerial13active_objectE>
    3f68:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <_ZN14SoftwareSerial13active_objectE+0x1>
    3f6c:	30 97       	sbiw	r30, 0x00	; 0
    3f6e:	09 f4       	brne	.+2      	; 0x3f72 <__vector_3+0x30>
    3f70:	51 c0       	rjmp	.+162    	; 0x4014 <__vector_3+0xd2>
    3f72:	96 8d       	ldd	r25, Z+30	; 0x1e
    3f74:	a6 85       	ldd	r26, Z+14	; 0x0e
    3f76:	b7 85       	ldd	r27, Z+15	; 0x0f
    3f78:	85 85       	ldd	r24, Z+13	; 0x0d
    3f7a:	91 ff       	sbrs	r25, 1
    3f7c:	04 c0       	rjmp	.+8      	; 0x3f86 <__vector_3+0x44>
    3f7e:	9c 91       	ld	r25, X
    3f80:	89 23       	and	r24, r25
    3f82:	29 f4       	brne	.+10     	; 0x3f8e <__vector_3+0x4c>
    3f84:	47 c0       	rjmp	.+142    	; 0x4014 <__vector_3+0xd2>
    3f86:	9c 91       	ld	r25, X
    3f88:	89 23       	and	r24, r25
    3f8a:	09 f0       	breq	.+2      	; 0x3f8e <__vector_3+0x4c>
    3f8c:	43 c0       	rjmp	.+134    	; 0x4014 <__vector_3+0xd2>
    3f8e:	a3 89       	ldd	r26, Z+19	; 0x13
    3f90:	b4 89       	ldd	r27, Z+20	; 0x14
    3f92:	9c 91       	ld	r25, X
    3f94:	85 89       	ldd	r24, Z+21	; 0x15
    3f96:	80 95       	com	r24
    3f98:	89 23       	and	r24, r25
    3f9a:	8c 93       	st	X, r24
    3f9c:	86 89       	ldd	r24, Z+22	; 0x16
    3f9e:	97 89       	ldd	r25, Z+23	; 0x17
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <__vector_3+0x5e>
    3fa4:	60 8d       	ldd	r22, Z+24	; 0x18
    3fa6:	71 8d       	ldd	r23, Z+25	; 0x19
    3fa8:	a6 85       	ldd	r26, Z+14	; 0x0e
    3faa:	b7 85       	ldd	r27, Z+15	; 0x0f
    3fac:	55 85       	ldd	r21, Z+13	; 0x0d
    3fae:	38 e0       	ldi	r19, 0x08	; 8
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <__vector_3+0x72>
    3fb8:	82 2f       	mov	r24, r18
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	95 95       	asr	r25
    3fbe:	87 95       	ror	r24
    3fc0:	28 2f       	mov	r18, r24
    3fc2:	4c 91       	ld	r20, X
    3fc4:	45 23       	and	r20, r21
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <__vector_3+0x88>
    3fc8:	20 68       	ori	r18, 0x80	; 128
    3fca:	31 50       	subi	r19, 0x01	; 1
    3fcc:	91 f7       	brne	.-28     	; 0x3fb2 <__vector_3+0x70>
    3fce:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fd0:	81 fd       	sbrc	r24, 1
    3fd2:	20 95       	com	r18
    3fd4:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	8f 73       	andi	r24, 0x3F	; 63
    3fde:	99 27       	eor	r25, r25
    3fe0:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3fe4:	38 17       	cp	r19, r24
    3fe6:	49 f0       	breq	.+18     	; 0x3ffa <__vector_3+0xb8>
    3fe8:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	aa 5b       	subi	r26, 0xBA	; 186
    3ff0:	bb 4f       	sbci	r27, 0xFB	; 251
    3ff2:	2c 93       	st	X, r18
    3ff4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3ff8:	03 c0       	rjmp	.+6      	; 0x4000 <__vector_3+0xbe>
    3ffa:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ffc:	81 60       	ori	r24, 0x01	; 1
    3ffe:	86 8f       	std	Z+30, r24	; 0x1e
    4000:	82 8d       	ldd	r24, Z+26	; 0x1a
    4002:	93 8d       	ldd	r25, Z+27	; 0x1b
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <__vector_3+0xc2>
    4008:	a3 89       	ldd	r26, Z+19	; 0x13
    400a:	b4 89       	ldd	r27, Z+20	; 0x14
    400c:	9c 91       	ld	r25, X
    400e:	85 89       	ldd	r24, Z+21	; 0x15
    4010:	89 2b       	or	r24, r25
    4012:	8c 93       	st	X, r24
    4014:	ff 91       	pop	r31
    4016:	ef 91       	pop	r30
    4018:	bf 91       	pop	r27
    401a:	af 91       	pop	r26
    401c:	9f 91       	pop	r25
    401e:	8f 91       	pop	r24
    4020:	7f 91       	pop	r23
    4022:	6f 91       	pop	r22
    4024:	5f 91       	pop	r21
    4026:	4f 91       	pop	r20
    4028:	3f 91       	pop	r19
    402a:	2f 91       	pop	r18
    402c:	0f 90       	pop	r0
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	0f 90       	pop	r0
    4032:	1f 90       	pop	r1
    4034:	18 95       	reti

00004036 <_ZN14SoftwareSerial5setTXEh>:
    4036:	1f 93       	push	r17
    4038:	cf 93       	push	r28
    403a:	df 93       	push	r29
    403c:	ec 01       	movw	r28, r24
    403e:	16 2f       	mov	r17, r22
    4040:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4042:	66 95       	lsr	r22
    4044:	61 70       	andi	r22, 0x01	; 1
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	68 27       	eor	r22, r24
    404a:	81 2f       	mov	r24, r17
    404c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
    4050:	61 e0       	ldi	r22, 0x01	; 1
    4052:	81 2f       	mov	r24, r17
    4054:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <pinMode>
    4058:	81 2f       	mov	r24, r17
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	fc 01       	movw	r30, r24
    405e:	ee 5a       	subi	r30, 0xAE	; 174
    4060:	f8 4f       	sbci	r31, 0xF8	; 248
    4062:	e4 91       	lpm	r30, Z
    4064:	e8 8b       	std	Y+16, r30	; 0x10
    4066:	fc 01       	movw	r30, r24
    4068:	ea 59       	subi	r30, 0x9A	; 154
    406a:	f8 4f       	sbci	r31, 0xF8	; 248
    406c:	e4 91       	lpm	r30, Z
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	ee 0f       	add	r30, r30
    4072:	ff 1f       	adc	r31, r31
    4074:	ec 57       	subi	r30, 0x7C	; 124
    4076:	f8 4f       	sbci	r31, 0xF8	; 248
    4078:	85 91       	lpm	r24, Z+
    407a:	94 91       	lpm	r25, Z
    407c:	9a 8b       	std	Y+18, r25	; 0x12
    407e:	89 8b       	std	Y+17, r24	; 0x11
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	08 95       	ret

00004088 <_ZN14SoftwareSerial5setRXEh>:
    4088:	1f 93       	push	r17
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	ec 01       	movw	r28, r24
    4090:	16 2f       	mov	r17, r22
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	81 2f       	mov	r24, r17
    4096:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <pinMode>
    409a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    409c:	81 fd       	sbrc	r24, 1
    409e:	04 c0       	rjmp	.+8      	; 0x40a8 <_ZN14SoftwareSerial5setRXEh+0x20>
    40a0:	61 e0       	ldi	r22, 0x01	; 1
    40a2:	81 2f       	mov	r24, r17
    40a4:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <digitalWrite>
    40a8:	1c 87       	std	Y+12, r17	; 0x0c
    40aa:	81 2f       	mov	r24, r17
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	fc 01       	movw	r30, r24
    40b0:	ee 5a       	subi	r30, 0xAE	; 174
    40b2:	f8 4f       	sbci	r31, 0xF8	; 248
    40b4:	e4 91       	lpm	r30, Z
    40b6:	ed 87       	std	Y+13, r30	; 0x0d
    40b8:	fc 01       	movw	r30, r24
    40ba:	ea 59       	subi	r30, 0x9A	; 154
    40bc:	f8 4f       	sbci	r31, 0xF8	; 248
    40be:	e4 91       	lpm	r30, Z
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	ee 0f       	add	r30, r30
    40c4:	ff 1f       	adc	r31, r31
    40c6:	e6 58       	subi	r30, 0x86	; 134
    40c8:	f8 4f       	sbci	r31, 0xF8	; 248
    40ca:	85 91       	lpm	r24, Z+
    40cc:	94 91       	lpm	r25, Z
    40ce:	9f 87       	std	Y+15, r25	; 0x0f
    40d0:	8e 87       	std	Y+14, r24	; 0x0e
    40d2:	df 91       	pop	r29
    40d4:	cf 91       	pop	r28
    40d6:	1f 91       	pop	r17
    40d8:	08 95       	ret

000040da <_ZN14SoftwareSerialC1Ehhb>:
    40da:	1f 93       	push	r17
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	ec 01       	movw	r28, r24
    40e2:	16 2f       	mov	r17, r22
    40e4:	1b 82       	std	Y+3, r1	; 0x03
    40e6:	1a 82       	std	Y+2, r1	; 0x02
    40e8:	88 ee       	ldi	r24, 0xE8	; 232
    40ea:	93 e0       	ldi	r25, 0x03	; 3
    40ec:	a0 e0       	ldi	r26, 0x00	; 0
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	8c 83       	std	Y+4, r24	; 0x04
    40f2:	9d 83       	std	Y+5, r25	; 0x05
    40f4:	ae 83       	std	Y+6, r26	; 0x06
    40f6:	bf 83       	std	Y+7, r27	; 0x07
    40f8:	8d e8       	ldi	r24, 0x8D	; 141
    40fa:	91 e0       	ldi	r25, 0x01	; 1
    40fc:	99 83       	std	Y+1, r25	; 0x01
    40fe:	88 83       	st	Y, r24
    4100:	1f 8a       	std	Y+23, r1	; 0x17
    4102:	1e 8a       	std	Y+22, r1	; 0x16
    4104:	19 8e       	std	Y+25, r1	; 0x19
    4106:	18 8e       	std	Y+24, r1	; 0x18
    4108:	1b 8e       	std	Y+27, r1	; 0x1b
    410a:	1a 8e       	std	Y+26, r1	; 0x1a
    410c:	1d 8e       	std	Y+29, r1	; 0x1d
    410e:	1c 8e       	std	Y+28, r1	; 0x1c
    4110:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4112:	8e 7f       	andi	r24, 0xFE	; 254
    4114:	20 fb       	bst	r18, 0
    4116:	81 f9       	bld	r24, 1
    4118:	8e 8f       	std	Y+30, r24	; 0x1e
    411a:	64 2f       	mov	r22, r20
    411c:	ce 01       	movw	r24, r28
    411e:	0e 94 1b 20 	call	0x4036	; 0x4036 <_ZN14SoftwareSerial5setTXEh>
    4122:	61 2f       	mov	r22, r17
    4124:	ce 01       	movw	r24, r28
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0c 94 44 20 	jmp	0x4088	; 0x4088 <_ZN14SoftwareSerial5setRXEh>

00004130 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	ec 01       	movw	r28, r24
    4136:	9a 01       	movw	r18, r20
    4138:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    413a:	1b 8e       	std	Y+27, r1	; 0x1b
    413c:	1a 8e       	std	Y+26, r1	; 0x1a
    413e:	19 8e       	std	Y+25, r1	; 0x19
    4140:	18 8e       	std	Y+24, r1	; 0x18
    4142:	1f 8a       	std	Y+23, r1	; 0x17
    4144:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	79 e0       	ldi	r23, 0x09	; 9
    414a:	8d e3       	ldi	r24, 0x3D	; 61
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <__divmodsi4>
    4152:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4154:	24 30       	cpi	r18, 0x04	; 4
    4156:	31 05       	cpc	r19, r1
    4158:	18 f0       	brcs	.+6      	; 0x4160 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    415a:	c9 01       	movw	r24, r18
    415c:	03 97       	sbiw	r24, 0x03	; 3
    415e:	02 c0       	rjmp	.+4      	; 0x4164 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4164:	9d 8f       	std	Y+29, r25	; 0x1d
    4166:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4168:	6c 85       	ldd	r22, Y+12	; 0x0c
    416a:	66 31       	cpi	r22, 0x16	; 22
    416c:	08 f0       	brcs	.+2      	; 0x4170 <_ZN14SoftwareSerial5beginEl+0x40>
    416e:	69 c0       	rjmp	.+210    	; 0x4242 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4170:	c9 01       	movw	r24, r18
    4172:	96 95       	lsr	r25
    4174:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4176:	84 31       	cpi	r24, 0x14	; 20
    4178:	91 05       	cpc	r25, r1
    417a:	10 f0       	brcs	.+4      	; 0x4180 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    417c:	43 97       	sbiw	r24, 0x13	; 19
    417e:	02 c0       	rjmp	.+4      	; 0x4184 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4184:	9f 8b       	std	Y+23, r25	; 0x17
    4186:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4188:	36 97       	sbiw	r30, 0x06	; 6
    418a:	18 f0       	brcs	.+6      	; 0x4192 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    418c:	c9 01       	movw	r24, r18
    418e:	05 97       	sbiw	r24, 0x05	; 5
    4190:	02 c0       	rjmp	.+4      	; 0x4196 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4196:	99 8f       	std	Y+25, r25	; 0x19
    4198:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    419a:	c9 01       	movw	r24, r18
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	28 0f       	add	r18, r24
    41a2:	39 1f       	adc	r19, r25
    41a4:	36 95       	lsr	r19
    41a6:	27 95       	ror	r18
    41a8:	36 95       	lsr	r19
    41aa:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    41ac:	2d 30       	cpi	r18, 0x0D	; 13
    41ae:	31 05       	cpc	r19, r1
    41b0:	18 f0       	brcs	.+6      	; 0x41b8 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    41b2:	2c 50       	subi	r18, 0x0C	; 12
    41b4:	31 09       	sbc	r19, r1
    41b6:	02 c0       	rjmp	.+4      	; 0x41bc <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    41b8:	21 e0       	ldi	r18, 0x01	; 1
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    41bc:	3b 8f       	std	Y+27, r19	; 0x1b
    41be:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    41c0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    41c4:	68 30       	cpi	r22, 0x08	; 8
    41c6:	50 f0       	brcs	.+20     	; 0x41dc <_ZN14SoftwareSerial5beginEl+0xac>
    41c8:	21 e0       	ldi	r18, 0x01	; 1
    41ca:	6e 30       	cpi	r22, 0x0E	; 14
    41cc:	08 f4       	brcc	.+2      	; 0x41d0 <_ZN14SoftwareSerial5beginEl+0xa0>
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	01 c0       	rjmp	.+2      	; 0x41d6 <_ZN14SoftwareSerial5beginEl+0xa6>
    41d4:	88 0f       	add	r24, r24
    41d6:	2a 95       	dec	r18
    41d8:	ea f7       	brpl	.-6      	; 0x41d4 <_ZN14SoftwareSerial5beginEl+0xa4>
    41da:	01 c0       	rjmp	.+2      	; 0x41de <_ZN14SoftwareSerial5beginEl+0xae>
    41dc:	84 e0       	ldi	r24, 0x04	; 4
    41de:	89 2b       	or	r24, r25
    41e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    41e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    41e6:	98 30       	cpi	r25, 0x08	; 8
    41e8:	38 f0       	brcs	.+14     	; 0x41f8 <_ZN14SoftwareSerial5beginEl+0xc8>
    41ea:	9e 30       	cpi	r25, 0x0E	; 14
    41ec:	40 f0       	brcs	.+16     	; 0x41fe <_ZN14SoftwareSerial5beginEl+0xce>
    41ee:	96 31       	cpi	r25, 0x16	; 22
    41f0:	48 f0       	brcs	.+18     	; 0x4204 <_ZN14SoftwareSerial5beginEl+0xd4>
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	08 c0       	rjmp	.+16     	; 0x4208 <_ZN14SoftwareSerial5beginEl+0xd8>
    41f8:	2d e6       	ldi	r18, 0x6D	; 109
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	05 c0       	rjmp	.+10     	; 0x4208 <_ZN14SoftwareSerial5beginEl+0xd8>
    41fe:	2b e6       	ldi	r18, 0x6B	; 107
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	02 c0       	rjmp	.+4      	; 0x4208 <_ZN14SoftwareSerial5beginEl+0xd8>
    4204:	2c e6       	ldi	r18, 0x6C	; 108
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	3c 8b       	std	Y+20, r19	; 0x14
    420a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    420c:	98 30       	cpi	r25, 0x08	; 8
    420e:	30 f4       	brcc	.+12     	; 0x421c <_ZN14SoftwareSerial5beginEl+0xec>
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	01 c0       	rjmp	.+2      	; 0x4216 <_ZN14SoftwareSerial5beginEl+0xe6>
    4214:	88 0f       	add	r24, r24
    4216:	9a 95       	dec	r25
    4218:	ea f7       	brpl	.-6      	; 0x4214 <_ZN14SoftwareSerial5beginEl+0xe4>
    421a:	0e c0       	rjmp	.+28     	; 0x4238 <_ZN14SoftwareSerial5beginEl+0x108>
    421c:	29 2f       	mov	r18, r25
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	9e 30       	cpi	r25, 0x0E	; 14
    4222:	18 f4       	brcc	.+6      	; 0x422a <_ZN14SoftwareSerial5beginEl+0xfa>
    4224:	28 50       	subi	r18, 0x08	; 8
    4226:	31 09       	sbc	r19, r1
    4228:	02 c0       	rjmp	.+4      	; 0x422e <_ZN14SoftwareSerial5beginEl+0xfe>
    422a:	2e 50       	subi	r18, 0x0E	; 14
    422c:	31 09       	sbc	r19, r1
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	01 c0       	rjmp	.+2      	; 0x4234 <_ZN14SoftwareSerial5beginEl+0x104>
    4232:	88 0f       	add	r24, r24
    4234:	2a 95       	dec	r18
    4236:	ea f7       	brpl	.-6      	; 0x4232 <_ZN14SoftwareSerial5beginEl+0x102>
    4238:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    423a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    423c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    423e:	01 97       	sbiw	r24, 0x01	; 1
    4240:	f1 f7       	brne	.-4      	; 0x423e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4242:	ce 01       	movw	r24, r28
}
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4248:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <_ZN14SoftwareSerial6listenEv>

0000424c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    424c:	08 95       	ret

0000424e <__udivmodqi4>:
    424e:	99 1b       	sub	r25, r25
    4250:	79 e0       	ldi	r23, 0x09	; 9
    4252:	04 c0       	rjmp	.+8      	; 0x425c <__udivmodqi4_ep>

00004254 <__udivmodqi4_loop>:
    4254:	99 1f       	adc	r25, r25
    4256:	96 17       	cp	r25, r22
    4258:	08 f0       	brcs	.+2      	; 0x425c <__udivmodqi4_ep>
    425a:	96 1b       	sub	r25, r22

0000425c <__udivmodqi4_ep>:
    425c:	88 1f       	adc	r24, r24
    425e:	7a 95       	dec	r23
    4260:	c9 f7       	brne	.-14     	; 0x4254 <__udivmodqi4_loop>
    4262:	80 95       	com	r24
    4264:	08 95       	ret

00004266 <__udivmodhi4>:
    4266:	aa 1b       	sub	r26, r26
    4268:	bb 1b       	sub	r27, r27
    426a:	51 e1       	ldi	r21, 0x11	; 17
    426c:	07 c0       	rjmp	.+14     	; 0x427c <__udivmodhi4_ep>

0000426e <__udivmodhi4_loop>:
    426e:	aa 1f       	adc	r26, r26
    4270:	bb 1f       	adc	r27, r27
    4272:	a6 17       	cp	r26, r22
    4274:	b7 07       	cpc	r27, r23
    4276:	10 f0       	brcs	.+4      	; 0x427c <__udivmodhi4_ep>
    4278:	a6 1b       	sub	r26, r22
    427a:	b7 0b       	sbc	r27, r23

0000427c <__udivmodhi4_ep>:
    427c:	88 1f       	adc	r24, r24
    427e:	99 1f       	adc	r25, r25
    4280:	5a 95       	dec	r21
    4282:	a9 f7       	brne	.-22     	; 0x426e <__udivmodhi4_loop>
    4284:	80 95       	com	r24
    4286:	90 95       	com	r25
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	08 95       	ret

0000428e <__divmodhi4>:
    428e:	97 fb       	bst	r25, 7
    4290:	07 2e       	mov	r0, r23
    4292:	16 f4       	brtc	.+4      	; 0x4298 <__divmodhi4+0xa>
    4294:	00 94       	com	r0
    4296:	07 d0       	rcall	.+14     	; 0x42a6 <__divmodhi4_neg1>
    4298:	77 fd       	sbrc	r23, 7
    429a:	09 d0       	rcall	.+18     	; 0x42ae <__divmodhi4_neg2>
    429c:	0e 94 33 21 	call	0x4266	; 0x4266 <__udivmodhi4>
    42a0:	07 fc       	sbrc	r0, 7
    42a2:	05 d0       	rcall	.+10     	; 0x42ae <__divmodhi4_neg2>
    42a4:	3e f4       	brtc	.+14     	; 0x42b4 <__divmodhi4_exit>

000042a6 <__divmodhi4_neg1>:
    42a6:	90 95       	com	r25
    42a8:	81 95       	neg	r24
    42aa:	9f 4f       	sbci	r25, 0xFF	; 255
    42ac:	08 95       	ret

000042ae <__divmodhi4_neg2>:
    42ae:	70 95       	com	r23
    42b0:	61 95       	neg	r22
    42b2:	7f 4f       	sbci	r23, 0xFF	; 255

000042b4 <__divmodhi4_exit>:
    42b4:	08 95       	ret

000042b6 <__udivmodsi4>:
    42b6:	a1 e2       	ldi	r26, 0x21	; 33
    42b8:	1a 2e       	mov	r1, r26
    42ba:	aa 1b       	sub	r26, r26
    42bc:	bb 1b       	sub	r27, r27
    42be:	fd 01       	movw	r30, r26
    42c0:	0d c0       	rjmp	.+26     	; 0x42dc <__udivmodsi4_ep>

000042c2 <__udivmodsi4_loop>:
    42c2:	aa 1f       	adc	r26, r26
    42c4:	bb 1f       	adc	r27, r27
    42c6:	ee 1f       	adc	r30, r30
    42c8:	ff 1f       	adc	r31, r31
    42ca:	a2 17       	cp	r26, r18
    42cc:	b3 07       	cpc	r27, r19
    42ce:	e4 07       	cpc	r30, r20
    42d0:	f5 07       	cpc	r31, r21
    42d2:	20 f0       	brcs	.+8      	; 0x42dc <__udivmodsi4_ep>
    42d4:	a2 1b       	sub	r26, r18
    42d6:	b3 0b       	sbc	r27, r19
    42d8:	e4 0b       	sbc	r30, r20
    42da:	f5 0b       	sbc	r31, r21

000042dc <__udivmodsi4_ep>:
    42dc:	66 1f       	adc	r22, r22
    42de:	77 1f       	adc	r23, r23
    42e0:	88 1f       	adc	r24, r24
    42e2:	99 1f       	adc	r25, r25
    42e4:	1a 94       	dec	r1
    42e6:	69 f7       	brne	.-38     	; 0x42c2 <__udivmodsi4_loop>
    42e8:	60 95       	com	r22
    42ea:	70 95       	com	r23
    42ec:	80 95       	com	r24
    42ee:	90 95       	com	r25
    42f0:	9b 01       	movw	r18, r22
    42f2:	ac 01       	movw	r20, r24
    42f4:	bd 01       	movw	r22, r26
    42f6:	cf 01       	movw	r24, r30
    42f8:	08 95       	ret

000042fa <__divmodsi4>:
    42fa:	05 2e       	mov	r0, r21
    42fc:	97 fb       	bst	r25, 7
    42fe:	1e f4       	brtc	.+6      	; 0x4306 <__divmodsi4+0xc>
    4300:	00 94       	com	r0
    4302:	0e 94 94 21 	call	0x4328	; 0x4328 <__negsi2>
    4306:	57 fd       	sbrc	r21, 7
    4308:	07 d0       	rcall	.+14     	; 0x4318 <__divmodsi4_neg2>
    430a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__udivmodsi4>
    430e:	07 fc       	sbrc	r0, 7
    4310:	03 d0       	rcall	.+6      	; 0x4318 <__divmodsi4_neg2>
    4312:	4e f4       	brtc	.+18     	; 0x4326 <__divmodsi4_exit>
    4314:	0c 94 94 21 	jmp	0x4328	; 0x4328 <__negsi2>

00004318 <__divmodsi4_neg2>:
    4318:	50 95       	com	r21
    431a:	40 95       	com	r20
    431c:	30 95       	com	r19
    431e:	21 95       	neg	r18
    4320:	3f 4f       	sbci	r19, 0xFF	; 255
    4322:	4f 4f       	sbci	r20, 0xFF	; 255
    4324:	5f 4f       	sbci	r21, 0xFF	; 255

00004326 <__divmodsi4_exit>:
    4326:	08 95       	ret

00004328 <__negsi2>:
    4328:	90 95       	com	r25
    432a:	80 95       	com	r24
    432c:	70 95       	com	r23
    432e:	61 95       	neg	r22
    4330:	7f 4f       	sbci	r23, 0xFF	; 255
    4332:	8f 4f       	sbci	r24, 0xFF	; 255
    4334:	9f 4f       	sbci	r25, 0xFF	; 255
    4336:	08 95       	ret

00004338 <__tablejump2__>:
    4338:	ee 0f       	add	r30, r30
    433a:	ff 1f       	adc	r31, r31
    433c:	05 90       	lpm	r0, Z+
    433e:	f4 91       	lpm	r31, Z
    4340:	e0 2d       	mov	r30, r0
    4342:	09 94       	ijmp

00004344 <malloc>:
    4344:	0f 93       	push	r16
    4346:	1f 93       	push	r17
    4348:	cf 93       	push	r28
    434a:	df 93       	push	r29
    434c:	82 30       	cpi	r24, 0x02	; 2
    434e:	91 05       	cpc	r25, r1
    4350:	10 f4       	brcc	.+4      	; 0x4356 <malloc+0x12>
    4352:	82 e0       	ldi	r24, 0x02	; 2
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <__flp>
    435a:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <__flp+0x1>
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	a0 e0       	ldi	r26, 0x00	; 0
    4364:	b0 e0       	ldi	r27, 0x00	; 0
    4366:	30 97       	sbiw	r30, 0x00	; 0
    4368:	19 f1       	breq	.+70     	; 0x43b0 <malloc+0x6c>
    436a:	40 81       	ld	r20, Z
    436c:	51 81       	ldd	r21, Z+1	; 0x01
    436e:	02 81       	ldd	r16, Z+2	; 0x02
    4370:	13 81       	ldd	r17, Z+3	; 0x03
    4372:	48 17       	cp	r20, r24
    4374:	59 07       	cpc	r21, r25
    4376:	c8 f0       	brcs	.+50     	; 0x43aa <malloc+0x66>
    4378:	84 17       	cp	r24, r20
    437a:	95 07       	cpc	r25, r21
    437c:	69 f4       	brne	.+26     	; 0x4398 <malloc+0x54>
    437e:	10 97       	sbiw	r26, 0x00	; 0
    4380:	31 f0       	breq	.+12     	; 0x438e <malloc+0x4a>
    4382:	12 96       	adiw	r26, 0x02	; 2
    4384:	0c 93       	st	X, r16
    4386:	12 97       	sbiw	r26, 0x02	; 2
    4388:	13 96       	adiw	r26, 0x03	; 3
    438a:	1c 93       	st	X, r17
    438c:	27 c0       	rjmp	.+78     	; 0x43dc <malloc+0x98>
    438e:	00 93 8a 04 	sts	0x048A, r16	; 0x80048a <__flp>
    4392:	10 93 8b 04 	sts	0x048B, r17	; 0x80048b <__flp+0x1>
    4396:	22 c0       	rjmp	.+68     	; 0x43dc <malloc+0x98>
    4398:	21 15       	cp	r18, r1
    439a:	31 05       	cpc	r19, r1
    439c:	19 f0       	breq	.+6      	; 0x43a4 <malloc+0x60>
    439e:	42 17       	cp	r20, r18
    43a0:	53 07       	cpc	r21, r19
    43a2:	18 f4       	brcc	.+6      	; 0x43aa <malloc+0x66>
    43a4:	9a 01       	movw	r18, r20
    43a6:	bd 01       	movw	r22, r26
    43a8:	ef 01       	movw	r28, r30
    43aa:	df 01       	movw	r26, r30
    43ac:	f8 01       	movw	r30, r16
    43ae:	db cf       	rjmp	.-74     	; 0x4366 <malloc+0x22>
    43b0:	21 15       	cp	r18, r1
    43b2:	31 05       	cpc	r19, r1
    43b4:	f9 f0       	breq	.+62     	; 0x43f4 <malloc+0xb0>
    43b6:	28 1b       	sub	r18, r24
    43b8:	39 0b       	sbc	r19, r25
    43ba:	24 30       	cpi	r18, 0x04	; 4
    43bc:	31 05       	cpc	r19, r1
    43be:	80 f4       	brcc	.+32     	; 0x43e0 <malloc+0x9c>
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	61 15       	cp	r22, r1
    43c6:	71 05       	cpc	r23, r1
    43c8:	21 f0       	breq	.+8      	; 0x43d2 <malloc+0x8e>
    43ca:	fb 01       	movw	r30, r22
    43cc:	93 83       	std	Z+3, r25	; 0x03
    43ce:	82 83       	std	Z+2, r24	; 0x02
    43d0:	04 c0       	rjmp	.+8      	; 0x43da <malloc+0x96>
    43d2:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <__flp+0x1>
    43d6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <__flp>
    43da:	fe 01       	movw	r30, r28
    43dc:	32 96       	adiw	r30, 0x02	; 2
    43de:	44 c0       	rjmp	.+136    	; 0x4468 <malloc+0x124>
    43e0:	fe 01       	movw	r30, r28
    43e2:	e2 0f       	add	r30, r18
    43e4:	f3 1f       	adc	r31, r19
    43e6:	81 93       	st	Z+, r24
    43e8:	91 93       	st	Z+, r25
    43ea:	22 50       	subi	r18, 0x02	; 2
    43ec:	31 09       	sbc	r19, r1
    43ee:	39 83       	std	Y+1, r19	; 0x01
    43f0:	28 83       	st	Y, r18
    43f2:	3a c0       	rjmp	.+116    	; 0x4468 <malloc+0x124>
    43f4:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    43f8:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    43fc:	23 2b       	or	r18, r19
    43fe:	41 f4       	brne	.+16     	; 0x4410 <malloc+0xcc>
    4400:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4404:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4408:	30 93 89 04 	sts	0x0489, r19	; 0x800489 <__brkval+0x1>
    440c:	20 93 88 04 	sts	0x0488, r18	; 0x800488 <__brkval>
    4410:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4414:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4418:	21 15       	cp	r18, r1
    441a:	31 05       	cpc	r19, r1
    441c:	41 f4       	brne	.+16     	; 0x442e <malloc+0xea>
    441e:	2d b7       	in	r18, 0x3d	; 61
    4420:	3e b7       	in	r19, 0x3e	; 62
    4422:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4426:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    442a:	24 1b       	sub	r18, r20
    442c:	35 0b       	sbc	r19, r21
    442e:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <__brkval>
    4432:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <__brkval+0x1>
    4436:	e2 17       	cp	r30, r18
    4438:	f3 07       	cpc	r31, r19
    443a:	a0 f4       	brcc	.+40     	; 0x4464 <malloc+0x120>
    443c:	2e 1b       	sub	r18, r30
    443e:	3f 0b       	sbc	r19, r31
    4440:	28 17       	cp	r18, r24
    4442:	39 07       	cpc	r19, r25
    4444:	78 f0       	brcs	.+30     	; 0x4464 <malloc+0x120>
    4446:	ac 01       	movw	r20, r24
    4448:	4e 5f       	subi	r20, 0xFE	; 254
    444a:	5f 4f       	sbci	r21, 0xFF	; 255
    444c:	24 17       	cp	r18, r20
    444e:	35 07       	cpc	r19, r21
    4450:	48 f0       	brcs	.+18     	; 0x4464 <malloc+0x120>
    4452:	4e 0f       	add	r20, r30
    4454:	5f 1f       	adc	r21, r31
    4456:	50 93 89 04 	sts	0x0489, r21	; 0x800489 <__brkval+0x1>
    445a:	40 93 88 04 	sts	0x0488, r20	; 0x800488 <__brkval>
    445e:	81 93       	st	Z+, r24
    4460:	91 93       	st	Z+, r25
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <malloc+0x124>
    4464:	e0 e0       	ldi	r30, 0x00	; 0
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	cf 01       	movw	r24, r30
    446a:	df 91       	pop	r29
    446c:	cf 91       	pop	r28
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	08 95       	ret

00004474 <free>:
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	09 f4       	brne	.+2      	; 0x447e <free+0xa>
    447c:	81 c0       	rjmp	.+258    	; 0x4580 <free+0x10c>
    447e:	fc 01       	movw	r30, r24
    4480:	32 97       	sbiw	r30, 0x02	; 2
    4482:	13 82       	std	Z+3, r1	; 0x03
    4484:	12 82       	std	Z+2, r1	; 0x02
    4486:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    448a:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    448e:	10 97       	sbiw	r26, 0x00	; 0
    4490:	81 f4       	brne	.+32     	; 0x44b2 <free+0x3e>
    4492:	20 81       	ld	r18, Z
    4494:	31 81       	ldd	r19, Z+1	; 0x01
    4496:	82 0f       	add	r24, r18
    4498:	93 1f       	adc	r25, r19
    449a:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    449e:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    44a2:	28 17       	cp	r18, r24
    44a4:	39 07       	cpc	r19, r25
    44a6:	51 f5       	brne	.+84     	; 0x44fc <free+0x88>
    44a8:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    44ac:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    44b0:	67 c0       	rjmp	.+206    	; 0x4580 <free+0x10c>
    44b2:	ed 01       	movw	r28, r26
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	ce 17       	cp	r28, r30
    44ba:	df 07       	cpc	r29, r31
    44bc:	40 f4       	brcc	.+16     	; 0x44ce <free+0x5a>
    44be:	4a 81       	ldd	r20, Y+2	; 0x02
    44c0:	5b 81       	ldd	r21, Y+3	; 0x03
    44c2:	9e 01       	movw	r18, r28
    44c4:	41 15       	cp	r20, r1
    44c6:	51 05       	cpc	r21, r1
    44c8:	f1 f0       	breq	.+60     	; 0x4506 <free+0x92>
    44ca:	ea 01       	movw	r28, r20
    44cc:	f5 cf       	rjmp	.-22     	; 0x44b8 <free+0x44>
    44ce:	d3 83       	std	Z+3, r29	; 0x03
    44d0:	c2 83       	std	Z+2, r28	; 0x02
    44d2:	40 81       	ld	r20, Z
    44d4:	51 81       	ldd	r21, Z+1	; 0x01
    44d6:	84 0f       	add	r24, r20
    44d8:	95 1f       	adc	r25, r21
    44da:	c8 17       	cp	r28, r24
    44dc:	d9 07       	cpc	r29, r25
    44de:	59 f4       	brne	.+22     	; 0x44f6 <free+0x82>
    44e0:	88 81       	ld	r24, Y
    44e2:	99 81       	ldd	r25, Y+1	; 0x01
    44e4:	84 0f       	add	r24, r20
    44e6:	95 1f       	adc	r25, r21
    44e8:	02 96       	adiw	r24, 0x02	; 2
    44ea:	91 83       	std	Z+1, r25	; 0x01
    44ec:	80 83       	st	Z, r24
    44ee:	8a 81       	ldd	r24, Y+2	; 0x02
    44f0:	9b 81       	ldd	r25, Y+3	; 0x03
    44f2:	93 83       	std	Z+3, r25	; 0x03
    44f4:	82 83       	std	Z+2, r24	; 0x02
    44f6:	21 15       	cp	r18, r1
    44f8:	31 05       	cpc	r19, r1
    44fa:	29 f4       	brne	.+10     	; 0x4506 <free+0x92>
    44fc:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    4500:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    4504:	3d c0       	rjmp	.+122    	; 0x4580 <free+0x10c>
    4506:	e9 01       	movw	r28, r18
    4508:	fb 83       	std	Y+3, r31	; 0x03
    450a:	ea 83       	std	Y+2, r30	; 0x02
    450c:	49 91       	ld	r20, Y+
    450e:	59 91       	ld	r21, Y+
    4510:	c4 0f       	add	r28, r20
    4512:	d5 1f       	adc	r29, r21
    4514:	ec 17       	cp	r30, r28
    4516:	fd 07       	cpc	r31, r29
    4518:	61 f4       	brne	.+24     	; 0x4532 <free+0xbe>
    451a:	80 81       	ld	r24, Z
    451c:	91 81       	ldd	r25, Z+1	; 0x01
    451e:	84 0f       	add	r24, r20
    4520:	95 1f       	adc	r25, r21
    4522:	02 96       	adiw	r24, 0x02	; 2
    4524:	e9 01       	movw	r28, r18
    4526:	99 83       	std	Y+1, r25	; 0x01
    4528:	88 83       	st	Y, r24
    452a:	82 81       	ldd	r24, Z+2	; 0x02
    452c:	93 81       	ldd	r25, Z+3	; 0x03
    452e:	9b 83       	std	Y+3, r25	; 0x03
    4530:	8a 83       	std	Y+2, r24	; 0x02
    4532:	e0 e0       	ldi	r30, 0x00	; 0
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	12 96       	adiw	r26, 0x02	; 2
    4538:	8d 91       	ld	r24, X+
    453a:	9c 91       	ld	r25, X
    453c:	13 97       	sbiw	r26, 0x03	; 3
    453e:	00 97       	sbiw	r24, 0x00	; 0
    4540:	19 f0       	breq	.+6      	; 0x4548 <free+0xd4>
    4542:	fd 01       	movw	r30, r26
    4544:	dc 01       	movw	r26, r24
    4546:	f7 cf       	rjmp	.-18     	; 0x4536 <free+0xc2>
    4548:	8d 91       	ld	r24, X+
    454a:	9c 91       	ld	r25, X
    454c:	11 97       	sbiw	r26, 0x01	; 1
    454e:	9d 01       	movw	r18, r26
    4550:	2e 5f       	subi	r18, 0xFE	; 254
    4552:	3f 4f       	sbci	r19, 0xFF	; 255
    4554:	82 0f       	add	r24, r18
    4556:	93 1f       	adc	r25, r19
    4558:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__brkval>
    455c:	30 91 89 04 	lds	r19, 0x0489	; 0x800489 <__brkval+0x1>
    4560:	28 17       	cp	r18, r24
    4562:	39 07       	cpc	r19, r25
    4564:	69 f4       	brne	.+26     	; 0x4580 <free+0x10c>
    4566:	30 97       	sbiw	r30, 0x00	; 0
    4568:	29 f4       	brne	.+10     	; 0x4574 <free+0x100>
    456a:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <__flp+0x1>
    456e:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <__flp>
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <free+0x104>
    4574:	13 82       	std	Z+3, r1	; 0x03
    4576:	12 82       	std	Z+2, r1	; 0x02
    4578:	b0 93 89 04 	sts	0x0489, r27	; 0x800489 <__brkval+0x1>
    457c:	a0 93 88 04 	sts	0x0488, r26	; 0x800488 <__brkval>
    4580:	df 91       	pop	r29
    4582:	cf 91       	pop	r28
    4584:	08 95       	ret

00004586 <realloc>:
    4586:	a0 e0       	ldi	r26, 0x00	; 0
    4588:	b0 e0       	ldi	r27, 0x00	; 0
    458a:	e9 ec       	ldi	r30, 0xC9	; 201
    458c:	f2 e2       	ldi	r31, 0x22	; 34
    458e:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__prologue_saves__+0x8>
    4592:	ec 01       	movw	r28, r24
    4594:	00 97       	sbiw	r24, 0x00	; 0
    4596:	21 f4       	brne	.+8      	; 0x45a0 <realloc+0x1a>
    4598:	cb 01       	movw	r24, r22
    459a:	0e 94 a2 21 	call	0x4344	; 0x4344 <malloc>
    459e:	b4 c0       	rjmp	.+360    	; 0x4708 <realloc+0x182>
    45a0:	fc 01       	movw	r30, r24
    45a2:	e6 0f       	add	r30, r22
    45a4:	f7 1f       	adc	r31, r23
    45a6:	9c 01       	movw	r18, r24
    45a8:	22 50       	subi	r18, 0x02	; 2
    45aa:	31 09       	sbc	r19, r1
    45ac:	e2 17       	cp	r30, r18
    45ae:	f3 07       	cpc	r31, r19
    45b0:	08 f4       	brcc	.+2      	; 0x45b4 <realloc+0x2e>
    45b2:	a8 c0       	rjmp	.+336    	; 0x4704 <realloc+0x17e>
    45b4:	d9 01       	movw	r26, r18
    45b6:	0d 91       	ld	r16, X+
    45b8:	1c 91       	ld	r17, X
    45ba:	11 97       	sbiw	r26, 0x01	; 1
    45bc:	06 17       	cp	r16, r22
    45be:	17 07       	cpc	r17, r23
    45c0:	b0 f0       	brcs	.+44     	; 0x45ee <realloc+0x68>
    45c2:	05 30       	cpi	r16, 0x05	; 5
    45c4:	11 05       	cpc	r17, r1
    45c6:	08 f4       	brcc	.+2      	; 0x45ca <realloc+0x44>
    45c8:	9b c0       	rjmp	.+310    	; 0x4700 <realloc+0x17a>
    45ca:	c8 01       	movw	r24, r16
    45cc:	04 97       	sbiw	r24, 0x04	; 4
    45ce:	86 17       	cp	r24, r22
    45d0:	97 07       	cpc	r25, r23
    45d2:	08 f4       	brcc	.+2      	; 0x45d6 <realloc+0x50>
    45d4:	95 c0       	rjmp	.+298    	; 0x4700 <realloc+0x17a>
    45d6:	02 50       	subi	r16, 0x02	; 2
    45d8:	11 09       	sbc	r17, r1
    45da:	06 1b       	sub	r16, r22
    45dc:	17 0b       	sbc	r17, r23
    45de:	01 93       	st	Z+, r16
    45e0:	11 93       	st	Z+, r17
    45e2:	6d 93       	st	X+, r22
    45e4:	7c 93       	st	X, r23
    45e6:	cf 01       	movw	r24, r30
    45e8:	0e 94 3a 22 	call	0x4474	; 0x4474 <free>
    45ec:	89 c0       	rjmp	.+274    	; 0x4700 <realloc+0x17a>
    45ee:	5b 01       	movw	r10, r22
    45f0:	a0 1a       	sub	r10, r16
    45f2:	b1 0a       	sbc	r11, r17
    45f4:	4c 01       	movw	r8, r24
    45f6:	80 0e       	add	r8, r16
    45f8:	91 1e       	adc	r9, r17
    45fa:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <__flp>
    45fe:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <__flp+0x1>
    4602:	61 2c       	mov	r6, r1
    4604:	71 2c       	mov	r7, r1
    4606:	e1 2c       	mov	r14, r1
    4608:	f1 2c       	mov	r15, r1
    460a:	10 97       	sbiw	r26, 0x00	; 0
    460c:	09 f4       	brne	.+2      	; 0x4610 <realloc+0x8a>
    460e:	46 c0       	rjmp	.+140    	; 0x469c <realloc+0x116>
    4610:	8d 91       	ld	r24, X+
    4612:	9c 91       	ld	r25, X
    4614:	11 97       	sbiw	r26, 0x01	; 1
    4616:	a8 15       	cp	r26, r8
    4618:	b9 05       	cpc	r27, r9
    461a:	b1 f5       	brne	.+108    	; 0x4688 <realloc+0x102>
    461c:	6c 01       	movw	r12, r24
    461e:	42 e0       	ldi	r20, 0x02	; 2
    4620:	c4 0e       	add	r12, r20
    4622:	d1 1c       	adc	r13, r1
    4624:	ca 14       	cp	r12, r10
    4626:	db 04       	cpc	r13, r11
    4628:	78 f1       	brcs	.+94     	; 0x4688 <realloc+0x102>
    462a:	4c 01       	movw	r8, r24
    462c:	8a 18       	sub	r8, r10
    462e:	9b 08       	sbc	r9, r11
    4630:	64 01       	movw	r12, r8
    4632:	42 e0       	ldi	r20, 0x02	; 2
    4634:	c4 0e       	add	r12, r20
    4636:	d1 1c       	adc	r13, r1
    4638:	12 96       	adiw	r26, 0x02	; 2
    463a:	bc 90       	ld	r11, X
    463c:	12 97       	sbiw	r26, 0x02	; 2
    463e:	13 96       	adiw	r26, 0x03	; 3
    4640:	ac 91       	ld	r26, X
    4642:	b5 e0       	ldi	r27, 0x05	; 5
    4644:	cb 16       	cp	r12, r27
    4646:	d1 04       	cpc	r13, r1
    4648:	40 f0       	brcs	.+16     	; 0x465a <realloc+0xd4>
    464a:	b2 82       	std	Z+2, r11	; 0x02
    464c:	a3 83       	std	Z+3, r26	; 0x03
    464e:	91 82       	std	Z+1, r9	; 0x01
    4650:	80 82       	st	Z, r8
    4652:	d9 01       	movw	r26, r18
    4654:	6d 93       	st	X+, r22
    4656:	7c 93       	st	X, r23
    4658:	09 c0       	rjmp	.+18     	; 0x466c <realloc+0xe6>
    465a:	0e 5f       	subi	r16, 0xFE	; 254
    465c:	1f 4f       	sbci	r17, 0xFF	; 255
    465e:	80 0f       	add	r24, r16
    4660:	91 1f       	adc	r25, r17
    4662:	f9 01       	movw	r30, r18
    4664:	91 83       	std	Z+1, r25	; 0x01
    4666:	80 83       	st	Z, r24
    4668:	eb 2d       	mov	r30, r11
    466a:	fa 2f       	mov	r31, r26
    466c:	e1 14       	cp	r14, r1
    466e:	f1 04       	cpc	r15, r1
    4670:	31 f0       	breq	.+12     	; 0x467e <realloc+0xf8>
    4672:	d7 01       	movw	r26, r14
    4674:	13 96       	adiw	r26, 0x03	; 3
    4676:	fc 93       	st	X, r31
    4678:	ee 93       	st	-X, r30
    467a:	12 97       	sbiw	r26, 0x02	; 2
    467c:	41 c0       	rjmp	.+130    	; 0x4700 <realloc+0x17a>
    467e:	f0 93 8b 04 	sts	0x048B, r31	; 0x80048b <__flp+0x1>
    4682:	e0 93 8a 04 	sts	0x048A, r30	; 0x80048a <__flp>
    4686:	3c c0       	rjmp	.+120    	; 0x4700 <realloc+0x17a>
    4688:	68 16       	cp	r6, r24
    468a:	79 06       	cpc	r7, r25
    468c:	08 f4       	brcc	.+2      	; 0x4690 <realloc+0x10a>
    468e:	3c 01       	movw	r6, r24
    4690:	7d 01       	movw	r14, r26
    4692:	12 96       	adiw	r26, 0x02	; 2
    4694:	0d 90       	ld	r0, X+
    4696:	bc 91       	ld	r27, X
    4698:	a0 2d       	mov	r26, r0
    469a:	b7 cf       	rjmp	.-146    	; 0x460a <realloc+0x84>
    469c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__brkval>
    46a0:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <__brkval+0x1>
    46a4:	88 16       	cp	r8, r24
    46a6:	99 06       	cpc	r9, r25
    46a8:	e1 f4       	brne	.+56     	; 0x46e2 <realloc+0x15c>
    46aa:	66 16       	cp	r6, r22
    46ac:	77 06       	cpc	r7, r23
    46ae:	c8 f4       	brcc	.+50     	; 0x46e2 <realloc+0x15c>
    46b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    46b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    46b8:	00 97       	sbiw	r24, 0x00	; 0
    46ba:	41 f4       	brne	.+16     	; 0x46cc <realloc+0x146>
    46bc:	8d b7       	in	r24, 0x3d	; 61
    46be:	9e b7       	in	r25, 0x3e	; 62
    46c0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    46c4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    46c8:	84 1b       	sub	r24, r20
    46ca:	95 0b       	sbc	r25, r21
    46cc:	e8 17       	cp	r30, r24
    46ce:	f9 07       	cpc	r31, r25
    46d0:	c8 f4       	brcc	.+50     	; 0x4704 <realloc+0x17e>
    46d2:	f0 93 89 04 	sts	0x0489, r31	; 0x800489 <__brkval+0x1>
    46d6:	e0 93 88 04 	sts	0x0488, r30	; 0x800488 <__brkval>
    46da:	f9 01       	movw	r30, r18
    46dc:	71 83       	std	Z+1, r23	; 0x01
    46de:	60 83       	st	Z, r22
    46e0:	0f c0       	rjmp	.+30     	; 0x4700 <realloc+0x17a>
    46e2:	cb 01       	movw	r24, r22
    46e4:	0e 94 a2 21 	call	0x4344	; 0x4344 <malloc>
    46e8:	7c 01       	movw	r14, r24
    46ea:	00 97       	sbiw	r24, 0x00	; 0
    46ec:	59 f0       	breq	.+22     	; 0x4704 <realloc+0x17e>
    46ee:	a8 01       	movw	r20, r16
    46f0:	be 01       	movw	r22, r28
    46f2:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <memcpy>
    46f6:	ce 01       	movw	r24, r28
    46f8:	0e 94 3a 22 	call	0x4474	; 0x4474 <free>
    46fc:	c7 01       	movw	r24, r14
    46fe:	04 c0       	rjmp	.+8      	; 0x4708 <realloc+0x182>
    4700:	ce 01       	movw	r24, r28
    4702:	02 c0       	rjmp	.+4      	; 0x4708 <realloc+0x182>
    4704:	80 e0       	ldi	r24, 0x00	; 0
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	cd b7       	in	r28, 0x3d	; 61
    470a:	de b7       	in	r29, 0x3e	; 62
    470c:	ee e0       	ldi	r30, 0x0E	; 14
    470e:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <__epilogue_restores__+0x8>

00004712 <atoi>:
    4712:	fc 01       	movw	r30, r24
    4714:	88 27       	eor	r24, r24
    4716:	99 27       	eor	r25, r25
    4718:	e8 94       	clt
    471a:	21 91       	ld	r18, Z+
    471c:	20 32       	cpi	r18, 0x20	; 32
    471e:	e9 f3       	breq	.-6      	; 0x471a <atoi+0x8>
    4720:	29 30       	cpi	r18, 0x09	; 9
    4722:	10 f0       	brcs	.+4      	; 0x4728 <atoi+0x16>
    4724:	2e 30       	cpi	r18, 0x0E	; 14
    4726:	c8 f3       	brcs	.-14     	; 0x471a <atoi+0x8>
    4728:	2b 32       	cpi	r18, 0x2B	; 43
    472a:	41 f0       	breq	.+16     	; 0x473c <atoi+0x2a>
    472c:	2d 32       	cpi	r18, 0x2D	; 45
    472e:	39 f4       	brne	.+14     	; 0x473e <atoi+0x2c>
    4730:	68 94       	set
    4732:	04 c0       	rjmp	.+8      	; 0x473c <atoi+0x2a>
    4734:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <__mulhi_const_10>
    4738:	82 0f       	add	r24, r18
    473a:	91 1d       	adc	r25, r1
    473c:	21 91       	ld	r18, Z+
    473e:	20 53       	subi	r18, 0x30	; 48
    4740:	2a 30       	cpi	r18, 0x0A	; 10
    4742:	c0 f3       	brcs	.-16     	; 0x4734 <atoi+0x22>
    4744:	1e f4       	brtc	.+6      	; 0x474c <atoi+0x3a>
    4746:	90 95       	com	r25
    4748:	81 95       	neg	r24
    474a:	9f 4f       	sbci	r25, 0xFF	; 255
    474c:	08 95       	ret

0000474e <strcmp_P>:
    474e:	fb 01       	movw	r30, r22
    4750:	dc 01       	movw	r26, r24
    4752:	8d 91       	ld	r24, X+
    4754:	05 90       	lpm	r0, Z+
    4756:	80 19       	sub	r24, r0
    4758:	01 10       	cpse	r0, r1
    475a:	d9 f3       	breq	.-10     	; 0x4752 <strcmp_P+0x4>
    475c:	99 0b       	sbc	r25, r25
    475e:	08 95       	ret

00004760 <__strlen_P>:
    4760:	fc 01       	movw	r30, r24
    4762:	05 90       	lpm	r0, Z+
    4764:	00 20       	and	r0, r0
    4766:	e9 f7       	brne	.-6      	; 0x4762 <__strlen_P+0x2>
    4768:	80 95       	com	r24
    476a:	90 95       	com	r25
    476c:	8e 0f       	add	r24, r30
    476e:	9f 1f       	adc	r25, r31
    4770:	08 95       	ret

00004772 <strstr_P>:
    4772:	fb 01       	movw	r30, r22
    4774:	55 91       	lpm	r21, Z+
    4776:	55 23       	and	r21, r21
    4778:	a9 f0       	breq	.+42     	; 0x47a4 <strstr_P+0x32>
    477a:	bf 01       	movw	r22, r30
    477c:	dc 01       	movw	r26, r24
    477e:	4d 91       	ld	r20, X+
    4780:	45 17       	cp	r20, r21
    4782:	41 11       	cpse	r20, r1
    4784:	e1 f7       	brne	.-8      	; 0x477e <strstr_P+0xc>
    4786:	59 f4       	brne	.+22     	; 0x479e <strstr_P+0x2c>
    4788:	cd 01       	movw	r24, r26
    478a:	05 90       	lpm	r0, Z+
    478c:	00 20       	and	r0, r0
    478e:	49 f0       	breq	.+18     	; 0x47a2 <strstr_P+0x30>
    4790:	4d 91       	ld	r20, X+
    4792:	40 15       	cp	r20, r0
    4794:	41 11       	cpse	r20, r1
    4796:	c9 f3       	breq	.-14     	; 0x478a <strstr_P+0x18>
    4798:	fb 01       	movw	r30, r22
    479a:	41 11       	cpse	r20, r1
    479c:	ef cf       	rjmp	.-34     	; 0x477c <strstr_P+0xa>
    479e:	81 e0       	ldi	r24, 0x01	; 1
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	01 97       	sbiw	r24, 0x01	; 1
    47a4:	08 95       	ret

000047a6 <memcpy>:
    47a6:	fb 01       	movw	r30, r22
    47a8:	dc 01       	movw	r26, r24
    47aa:	02 c0       	rjmp	.+4      	; 0x47b0 <memcpy+0xa>
    47ac:	01 90       	ld	r0, Z+
    47ae:	0d 92       	st	X+, r0
    47b0:	41 50       	subi	r20, 0x01	; 1
    47b2:	50 40       	sbci	r21, 0x00	; 0
    47b4:	d8 f7       	brcc	.-10     	; 0x47ac <memcpy+0x6>
    47b6:	08 95       	ret

000047b8 <strchr>:
    47b8:	fc 01       	movw	r30, r24
    47ba:	81 91       	ld	r24, Z+
    47bc:	86 17       	cp	r24, r22
    47be:	21 f0       	breq	.+8      	; 0x47c8 <strchr+0x10>
    47c0:	88 23       	and	r24, r24
    47c2:	d9 f7       	brne	.-10     	; 0x47ba <strchr+0x2>
    47c4:	99 27       	eor	r25, r25
    47c6:	08 95       	ret
    47c8:	31 97       	sbiw	r30, 0x01	; 1
    47ca:	cf 01       	movw	r24, r30
    47cc:	08 95       	ret

000047ce <strcpy>:
    47ce:	fb 01       	movw	r30, r22
    47d0:	dc 01       	movw	r26, r24
    47d2:	01 90       	ld	r0, Z+
    47d4:	0d 92       	st	X+, r0
    47d6:	00 20       	and	r0, r0
    47d8:	e1 f7       	brne	.-8      	; 0x47d2 <strcpy+0x4>
    47da:	08 95       	ret

000047dc <__itoa_ncheck>:
    47dc:	bb 27       	eor	r27, r27
    47de:	4a 30       	cpi	r20, 0x0A	; 10
    47e0:	31 f4       	brne	.+12     	; 0x47ee <__itoa_ncheck+0x12>
    47e2:	99 23       	and	r25, r25
    47e4:	22 f4       	brpl	.+8      	; 0x47ee <__itoa_ncheck+0x12>
    47e6:	bd e2       	ldi	r27, 0x2D	; 45
    47e8:	90 95       	com	r25
    47ea:	81 95       	neg	r24
    47ec:	9f 4f       	sbci	r25, 0xFF	; 255
    47ee:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__utoa_common>

000047f2 <__mulhi_const_10>:
    47f2:	7a e0       	ldi	r23, 0x0A	; 10
    47f4:	97 9f       	mul	r25, r23
    47f6:	90 2d       	mov	r25, r0
    47f8:	87 9f       	mul	r24, r23
    47fa:	80 2d       	mov	r24, r0
    47fc:	91 0d       	add	r25, r1
    47fe:	11 24       	eor	r1, r1
    4800:	08 95       	ret

00004802 <__utoa_ncheck>:
    4802:	bb 27       	eor	r27, r27

00004804 <__utoa_common>:
    4804:	fb 01       	movw	r30, r22
    4806:	55 27       	eor	r21, r21
    4808:	aa 27       	eor	r26, r26
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	aa 1f       	adc	r26, r26
    4810:	a4 17       	cp	r26, r20
    4812:	10 f0       	brcs	.+4      	; 0x4818 <__utoa_common+0x14>
    4814:	a4 1b       	sub	r26, r20
    4816:	83 95       	inc	r24
    4818:	50 51       	subi	r21, 0x10	; 16
    481a:	b9 f7       	brne	.-18     	; 0x480a <__utoa_common+0x6>
    481c:	a0 5d       	subi	r26, 0xD0	; 208
    481e:	aa 33       	cpi	r26, 0x3A	; 58
    4820:	08 f0       	brcs	.+2      	; 0x4824 <__utoa_common+0x20>
    4822:	a9 5d       	subi	r26, 0xD9	; 217
    4824:	a1 93       	st	Z+, r26
    4826:	00 97       	sbiw	r24, 0x00	; 0
    4828:	79 f7       	brne	.-34     	; 0x4808 <__utoa_common+0x4>
    482a:	b1 11       	cpse	r27, r1
    482c:	b1 93       	st	Z+, r27
    482e:	11 92       	st	Z+, r1
    4830:	cb 01       	movw	r24, r22
    4832:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <strrev>

00004836 <strrev>:
    4836:	dc 01       	movw	r26, r24
    4838:	fc 01       	movw	r30, r24
    483a:	67 2f       	mov	r22, r23
    483c:	71 91       	ld	r23, Z+
    483e:	77 23       	and	r23, r23
    4840:	e1 f7       	brne	.-8      	; 0x483a <strrev+0x4>
    4842:	32 97       	sbiw	r30, 0x02	; 2
    4844:	04 c0       	rjmp	.+8      	; 0x484e <strrev+0x18>
    4846:	7c 91       	ld	r23, X
    4848:	6d 93       	st	X+, r22
    484a:	70 83       	st	Z, r23
    484c:	62 91       	ld	r22, -Z
    484e:	ae 17       	cp	r26, r30
    4850:	bf 07       	cpc	r27, r31
    4852:	c8 f3       	brcs	.-14     	; 0x4846 <strrev+0x10>
    4854:	08 95       	ret

00004856 <__prologue_saves__>:
    4856:	2f 92       	push	r2
    4858:	3f 92       	push	r3
    485a:	4f 92       	push	r4
    485c:	5f 92       	push	r5
    485e:	6f 92       	push	r6
    4860:	7f 92       	push	r7
    4862:	8f 92       	push	r8
    4864:	9f 92       	push	r9
    4866:	af 92       	push	r10
    4868:	bf 92       	push	r11
    486a:	cf 92       	push	r12
    486c:	df 92       	push	r13
    486e:	ef 92       	push	r14
    4870:	ff 92       	push	r15
    4872:	0f 93       	push	r16
    4874:	1f 93       	push	r17
    4876:	cf 93       	push	r28
    4878:	df 93       	push	r29
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	ca 1b       	sub	r28, r26
    4880:	db 0b       	sbc	r29, r27
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	f8 94       	cli
    4886:	de bf       	out	0x3e, r29	; 62
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	09 94       	ijmp

0000488e <__epilogue_restores__>:
    488e:	2a 88       	ldd	r2, Y+18	; 0x12
    4890:	39 88       	ldd	r3, Y+17	; 0x11
    4892:	48 88       	ldd	r4, Y+16	; 0x10
    4894:	5f 84       	ldd	r5, Y+15	; 0x0f
    4896:	6e 84       	ldd	r6, Y+14	; 0x0e
    4898:	7d 84       	ldd	r7, Y+13	; 0x0d
    489a:	8c 84       	ldd	r8, Y+12	; 0x0c
    489c:	9b 84       	ldd	r9, Y+11	; 0x0b
    489e:	aa 84       	ldd	r10, Y+10	; 0x0a
    48a0:	b9 84       	ldd	r11, Y+9	; 0x09
    48a2:	c8 84       	ldd	r12, Y+8	; 0x08
    48a4:	df 80       	ldd	r13, Y+7	; 0x07
    48a6:	ee 80       	ldd	r14, Y+6	; 0x06
    48a8:	fd 80       	ldd	r15, Y+5	; 0x05
    48aa:	0c 81       	ldd	r16, Y+4	; 0x04
    48ac:	1b 81       	ldd	r17, Y+3	; 0x03
    48ae:	aa 81       	ldd	r26, Y+2	; 0x02
    48b0:	b9 81       	ldd	r27, Y+1	; 0x01
    48b2:	ce 0f       	add	r28, r30
    48b4:	d1 1d       	adc	r29, r1
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	f8 94       	cli
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	ed 01       	movw	r28, r26
    48c2:	08 95       	ret

000048c4 <__do_global_dtors>:
    48c4:	13 e0       	ldi	r17, 0x03	; 3
    48c6:	cf ec       	ldi	r28, 0xCF	; 207
    48c8:	d3 e0       	ldi	r29, 0x03	; 3
    48ca:	04 c0       	rjmp	.+8      	; 0x48d4 <__do_global_dtors+0x10>
    48cc:	fe 01       	movw	r30, r28
    48ce:	0e 94 9c 21 	call	0x4338	; 0x4338 <__tablejump2__>
    48d2:	21 96       	adiw	r28, 0x01	; 1
    48d4:	c0 3d       	cpi	r28, 0xD0	; 208
    48d6:	d1 07       	cpc	r29, r17
    48d8:	c9 f7       	brne	.-14     	; 0x48cc <__do_global_dtors+0x8>
    48da:	f8 94       	cli

000048dc <__stop_program>:
    48dc:	ff cf       	rjmp	.-2      	; 0x48dc <__stop_program>
