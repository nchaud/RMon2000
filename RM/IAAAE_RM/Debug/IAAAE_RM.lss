
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000033e  00800100  00006980  00006a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000313  0080043e  0080043e  00006d52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006d52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b78  00000000  00000000  00006dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ecf0  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc3  00000000  00000000  00026630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006e71  00000000  00000000  0002a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002e6c  00000000  00000000  00031164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006129  00000000  00000000  00033fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f265  00000000  00000000  0003a0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae0  00000000  00000000  0004935e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__dtors_end>
       4:	0c 94 f3 32 	jmp	0x65e6	; 0x65e6 <__vector_1>
       8:	0c 94 1a 33 	jmp	0x6634	; 0x6634 <__vector_2>
       c:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <__vector_3>
      10:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <__vector_3>
      14:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <__vector_3>
      18:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      1c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      20:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      24:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      28:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      2c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      30:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      34:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      38:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      3c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      40:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__vector_16>
      44:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      48:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <__vector_18>
      4c:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__vector_19>
      50:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      54:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      58:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      5c:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      60:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__vector_24>
      64:	0c 94 9c 03 	jmp	0x738	; 0x738 <__bad_interrupt>
      68:	c1 1b       	sub	r28, r17
      6a:	c5 1b       	sub	r28, r21
      6c:	c5 1b       	sub	r28, r21
      6e:	c5 1b       	sub	r28, r21
      70:	c5 1b       	sub	r28, r21
      72:	c5 1b       	sub	r28, r21
      74:	c5 1b       	sub	r28, r21
      76:	c5 1b       	sub	r28, r21
      78:	d5 1a       	sub	r13, r21
      7a:	c5 1b       	sub	r28, r21
      7c:	c5 1b       	sub	r28, r21
      7e:	c5 1b       	sub	r28, r21
      80:	c5 1b       	sub	r28, r21
      82:	c5 1b       	sub	r28, r21
      84:	c5 1b       	sub	r28, r21
      86:	c5 1b       	sub	r28, r21
      88:	d5 1a       	sub	r13, r21
      8a:	c5 1b       	sub	r28, r21
      8c:	c5 1b       	sub	r28, r21
      8e:	c5 1b       	sub	r28, r21
      90:	c5 1b       	sub	r28, r21
      92:	c5 1b       	sub	r28, r21
      94:	c5 1b       	sub	r28, r21
      96:	c5 1b       	sub	r28, r21
      98:	dd 1a       	sub	r13, r29
      9a:	c5 1b       	sub	r28, r21
      9c:	c5 1b       	sub	r28, r21
      9e:	c5 1b       	sub	r28, r21
      a0:	c5 1b       	sub	r28, r21
      a2:	c5 1b       	sub	r28, r21
      a4:	c5 1b       	sub	r28, r21
      a6:	c5 1b       	sub	r28, r21
      a8:	03 1b       	sub	r16, r19
      aa:	c5 1b       	sub	r28, r21
      ac:	c5 1b       	sub	r28, r21
      ae:	c5 1b       	sub	r28, r21
      b0:	c5 1b       	sub	r28, r21
      b2:	c5 1b       	sub	r28, r21
      b4:	c5 1b       	sub	r28, r21
      b6:	c5 1b       	sub	r28, r21
      b8:	dd 1a       	sub	r13, r29
      ba:	c5 1b       	sub	r28, r21
      bc:	c5 1b       	sub	r28, r21
      be:	c5 1b       	sub	r28, r21
      c0:	c5 1b       	sub	r28, r21
      c2:	c5 1b       	sub	r28, r21
      c4:	c5 1b       	sub	r28, r21
      c6:	c5 1b       	sub	r28, r21
      c8:	09 1b       	sub	r16, r25
      ca:	c5 1b       	sub	r28, r21
      cc:	c5 1b       	sub	r28, r21
      ce:	c5 1b       	sub	r28, r21
      d0:	c5 1b       	sub	r28, r21
      d2:	c5 1b       	sub	r28, r21
      d4:	c5 1b       	sub	r28, r21
      d6:	c5 1b       	sub	r28, r21
      d8:	0f 1b       	sub	r16, r31
      da:	c5 1b       	sub	r28, r21
      dc:	c5 1b       	sub	r28, r21
      de:	c5 1b       	sub	r28, r21
      e0:	c5 1b       	sub	r28, r21
      e2:	c5 1b       	sub	r28, r21
      e4:	c5 1b       	sub	r28, r21
      e6:	c5 1b       	sub	r28, r21
      e8:	21 1b       	sub	r18, r17
      ea:	c5 1b       	sub	r28, r21
      ec:	c5 1b       	sub	r28, r21
      ee:	c5 1b       	sub	r28, r21
      f0:	c5 1b       	sub	r28, r21
      f2:	c5 1b       	sub	r28, r21
      f4:	c5 1b       	sub	r28, r21
      f6:	c5 1b       	sub	r28, r21
      f8:	4b 1b       	sub	r20, r27
      fa:	c5 1b       	sub	r28, r21
      fc:	c5 1b       	sub	r28, r21
      fe:	c5 1b       	sub	r28, r21
     100:	c5 1b       	sub	r28, r21
     102:	c5 1b       	sub	r28, r21
     104:	c5 1b       	sub	r28, r21
     106:	c5 1b       	sub	r28, r21
     108:	15 1b       	sub	r17, r21
     10a:	c5 1b       	sub	r28, r21
     10c:	c5 1b       	sub	r28, r21
     10e:	c5 1b       	sub	r28, r21
     110:	c5 1b       	sub	r28, r21
     112:	c5 1b       	sub	r28, r21
     114:	c5 1b       	sub	r28, r21
     116:	c5 1b       	sub	r28, r21
     118:	2f 1b       	sub	r18, r31
     11a:	c5 1b       	sub	r28, r21
     11c:	c5 1b       	sub	r28, r21
     11e:	c5 1b       	sub	r28, r21
     120:	c5 1b       	sub	r28, r21
     122:	c5 1b       	sub	r28, r21
     124:	c5 1b       	sub	r28, r21
     126:	c5 1b       	sub	r28, r21
     128:	4e 1b       	sub	r20, r30
     12a:	c5 1b       	sub	r28, r21
     12c:	c5 1b       	sub	r28, r21
     12e:	c5 1b       	sub	r28, r21
     130:	c5 1b       	sub	r28, r21
     132:	c5 1b       	sub	r28, r21
     134:	c5 1b       	sub	r28, r21
     136:	c5 1b       	sub	r28, r21
     138:	4e 1b       	sub	r20, r30
     13a:	c5 1b       	sub	r28, r21
     13c:	c5 1b       	sub	r28, r21
     13e:	c5 1b       	sub	r28, r21
     140:	c5 1b       	sub	r28, r21
     142:	c5 1b       	sub	r28, r21
     144:	c5 1b       	sub	r28, r21
     146:	c5 1b       	sub	r28, r21
     148:	4e 1b       	sub	r20, r30
     14a:	c5 1b       	sub	r28, r21
     14c:	c5 1b       	sub	r28, r21
     14e:	c5 1b       	sub	r28, r21
     150:	c5 1b       	sub	r28, r21
     152:	c5 1b       	sub	r28, r21
     154:	c5 1b       	sub	r28, r21
     156:	c5 1b       	sub	r28, r21
     158:	4e 1b       	sub	r20, r30
     15a:	c5 1b       	sub	r28, r21
     15c:	c5 1b       	sub	r28, r21
     15e:	c5 1b       	sub	r28, r21
     160:	c5 1b       	sub	r28, r21
     162:	c5 1b       	sub	r28, r21
     164:	c5 1b       	sub	r28, r21
     166:	c5 1b       	sub	r28, r21
     168:	57 1b       	sub	r21, r23
     16a:	c5 1b       	sub	r28, r21
     16c:	c5 1b       	sub	r28, r21
     16e:	c5 1b       	sub	r28, r21
     170:	c5 1b       	sub	r28, r21
     172:	c5 1b       	sub	r28, r21
     174:	c5 1b       	sub	r28, r21
     176:	c5 1b       	sub	r28, r21
     178:	88 1b       	sub	r24, r24
     17a:	c5 1b       	sub	r28, r21
     17c:	c5 1b       	sub	r28, r21
     17e:	c5 1b       	sub	r28, r21
     180:	c5 1b       	sub	r28, r21
     182:	c5 1b       	sub	r28, r21
     184:	c5 1b       	sub	r28, r21
     186:	c5 1b       	sub	r28, r21
     188:	57 1b       	sub	r21, r23
     18a:	c5 1b       	sub	r28, r21
     18c:	c5 1b       	sub	r28, r21
     18e:	c5 1b       	sub	r28, r21
     190:	c5 1b       	sub	r28, r21
     192:	c5 1b       	sub	r28, r21
     194:	c5 1b       	sub	r28, r21
     196:	c5 1b       	sub	r28, r21
     198:	88 1b       	sub	r24, r24
     19a:	c5 1b       	sub	r28, r21
     19c:	c5 1b       	sub	r28, r21
     19e:	c5 1b       	sub	r28, r21
     1a0:	c5 1b       	sub	r28, r21
     1a2:	c5 1b       	sub	r28, r21
     1a4:	c5 1b       	sub	r28, r21
     1a6:	c5 1b       	sub	r28, r21
     1a8:	6f 1b       	sub	r22, r31
     1aa:	c5 1b       	sub	r28, r21
     1ac:	c5 1b       	sub	r28, r21
     1ae:	c5 1b       	sub	r28, r21
     1b0:	c5 1b       	sub	r28, r21
     1b2:	c5 1b       	sub	r28, r21
     1b4:	c5 1b       	sub	r28, r21
     1b6:	c5 1b       	sub	r28, r21
     1b8:	8c 1b       	sub	r24, r28
     1ba:	c5 1b       	sub	r28, r21
     1bc:	c5 1b       	sub	r28, r21
     1be:	c5 1b       	sub	r28, r21
     1c0:	c5 1b       	sub	r28, r21
     1c2:	c5 1b       	sub	r28, r21
     1c4:	c5 1b       	sub	r28, r21
     1c6:	c5 1b       	sub	r28, r21
     1c8:	8c 1b       	sub	r24, r28
     1ca:	c5 1b       	sub	r28, r21
     1cc:	c5 1b       	sub	r28, r21
     1ce:	c5 1b       	sub	r28, r21
     1d0:	c5 1b       	sub	r28, r21
     1d2:	c5 1b       	sub	r28, r21
     1d4:	c5 1b       	sub	r28, r21
     1d6:	c5 1b       	sub	r28, r21
     1d8:	a1 1b       	sub	r26, r17
     1da:	c5 1b       	sub	r28, r21
     1dc:	c5 1b       	sub	r28, r21
     1de:	c5 1b       	sub	r28, r21
     1e0:	c5 1b       	sub	r28, r21
     1e2:	c5 1b       	sub	r28, r21
     1e4:	c5 1b       	sub	r28, r21
     1e6:	c5 1b       	sub	r28, r21
     1e8:	bb 1b       	sub	r27, r27
     1ea:	c5 1b       	sub	r28, r21
     1ec:	c5 1b       	sub	r28, r21
     1ee:	c5 1b       	sub	r28, r21
     1f0:	c5 1b       	sub	r28, r21
     1f2:	c5 1b       	sub	r28, r21
     1f4:	c5 1b       	sub	r28, r21
     1f6:	c5 1b       	sub	r28, r21
     1f8:	bb 1b       	sub	r27, r27

000001fa <__trampolines_end>:
     1fa:	74 65       	ori	r23, 0x54	; 84
     1fc:	78 74       	andi	r23, 0x48	; 72
     1fe:	2f 70       	andi	r18, 0x0F	; 15
     200:	6c 61       	ori	r22, 0x1C	; 28
     202:	69 6e       	ori	r22, 0xE9	; 233
	...

00000205 <_ZZN10GsmManager11sendViaGprsEPcE3__c_0>:
     205:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000210 <_ZZN10GsmManager11sendViaGprsEPcE3__c_1>:
	...

00000211 <_ZZN10GsmManager11sendViaGprsEPcE3__c_2>:
	...

00000212 <_ZZN10GsmManager11sendViaGprsEPcE3__c>:
     212:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000021d <_ZZ18ensureBatteryLevelvE3__c_0>:
     21d:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 52 65 74     BatteryLevel Ret
     22d:	72 69 65 76 65 64 00                                rieved.

00000234 <_ZZ18ensureBatteryLevelvE3__c>:
     234:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 46 61 69     BatteryLevel Fai
     244:	6c 65 64 00                                         led.

00000248 <_ZZ16readSensorsAsyncvE3__c_3>:
     248:	50 56 20 56 6f 6c 74 61 67 65 28 41 63 74 29 3a     PV Voltage(Act):
	...

00000259 <_ZZ16readSensorsAsyncvE3__c_2>:
     259:	50 56 20 56 6f 6c 74 61 67 65 28 52 61 77 29 3a     PV Voltage(Raw):
	...

0000026a <_ZZ16readSensorsAsyncvE3__c_1>:
     26a:	42 61 74 74 65 72 79 20 56 6f 6c 74 61 67 65 28     Battery Voltage(
     27a:	41 63 74 29 3a 00                                   Act):.

00000280 <_ZZ16readSensorsAsyncvE3__c_0>:
     280:	42 61 74 74 65 72 79 20 56 6f 6c 74 61 67 65 28     Battery Voltage(
     290:	52 61 77 29 3a 00                                   Raw):.

00000296 <_ZZ16readSensorsAsyncvE3__c>:
     296:	52 65 61 64 69 6e 67 20 53 65 6e 73 6f 72 73 00     Reading Sensors.

000002a6 <_ZZ20execTransmitReadingsR14DailyCycleDataE3__c_1>:
     2a6:	53 4d 53 20 53 65 6e 64 20 46 61 69 6c 65 64 20     SMS Send Failed 
     2b6:	21 21 00                                            !!.

000002b9 <_ZZ20execTransmitReadingsR14DailyCycleDataE3__c_0>:
     2b9:	53 65 6e 64 69 6e 67 20 53 65 6e 73 6f 72 73 20     Sending Sensors 
     2c9:	43 6d 70 74 00                                      Cmpt.

000002ce <_ZZ20execTransmitReadingsR14DailyCycleDataE3__c>:
     2ce:	47 50 52 53 20 46 61 69 6c 65 64 2d 54 72 79 69     GPRS Failed-Tryi
     2de:	6e 67 20 53 4d 53 2e 2e 2e 00                       ng SMS....

000002e8 <_ZZ9loopCyclevE3__c_2>:
     2e8:	46 72 65 65 4d 65 6d 6f 72 79 00                    FreeMemory.

000002f3 <_ZZ9loopCyclevE3__c_1>:
     2f3:	49 6e 20 44 61 69 6c 79 20 43 79 63 6c 65 2e 2e     In Daily Cycle..
     303:	2e 00                                               ..

00000305 <_ZZ9loopCyclevE3__c_0>:
     305:	50 65 72 73 69 73 74 69 6e 67 20 73 65 6e 73 6f     Persisting senso
     315:	72 20 64 61 74 61 2e 2e 2e 00                       r data....

0000031f <_ZZ9loopCyclevE3__c>:
     31f:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     32f:	2e 2e 00                                            ...

00000332 <_ZZ4loopE3__c>:
     332:	45 4e 44 20 43 59 43 4c 45 00                       END CYCLE.

0000033c <_ZZ5setupE3__c>:
     33c:	52 75 6e 6e 69 6e 67 00                             Running.

00000344 <digital_pin_to_timer_PGM>:
     344:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     354:	00 00 00 00                                         ....

00000358 <digital_pin_to_bit_mask_PGM>:
     358:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     368:	04 08 10 20                                         ... 

0000036c <digital_pin_to_port_PGM>:
     36c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     37c:	03 03 03 03                                         ....

00000380 <port_to_input_PGM>:
     380:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000038a <port_to_output_PGM>:
     38a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000394 <port_to_mode_PGM>:
     394:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000039e <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     39e:	09 3c 2d 2d 2d 20 00                                .<--- .

000003a5 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     3a5:	09 2d 2d 2d 3e 20 00                                .---> .

000003ac <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     3ac:	09 3c 2d 2d 2d 20 00                                .<--- .

000003b3 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     3b3:	09 2d 2d 2d 3e 20 00                                .---> .

000003ba <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     3ba:	09 3c 2d 2d 2d 20 00                                .<--- .

000003c1 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     3c1:	09 2d 2d 2d 3e 20 00                                .---> .

000003c8 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     3c8:	09 3c 2d 2d 2d 20 00                                .<--- .

000003cf <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     3cf:	09 2d 2d 2d 3e 20 00                                .---> .

000003d6 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     3d6:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000003de <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     3de:	53 50 41 43 45 00                                   SPACE.

000003e4 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     3e4:	09 3c 2d 2d 2d 20 00                                .<--- .

000003eb <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     3eb:	52 45 44 49 52 00                                   REDIR.

000003f1 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     3f1:	55 52 4c 00                                         URL.

000003f5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     3f5:	55 41 00                                            UA.

000003f8 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     3f8:	43 49 44 00                                         CID.

000003fc <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     3fc:	4c 65 6e 3a 20 00                                   Len: .

00000402 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     402:	53 74 61 74 75 73 3a 20 00                          Status: .

0000040b <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     40b:	43 4f 4e 54 45 4e 54 00                             CONTENT.

00000413 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     413:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

0000041f <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     41f:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000042a <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     42a:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000436 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     436:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000443 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     443:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000450 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     450:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

0000045f <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     45f:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

00000468 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     468:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000475 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     475:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000482 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     482:	09 2d 2d 2d 3e 20 00                                .---> .

00000489 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     489:	22 2c 00                                            ",.

0000048c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     48c:	22 2c 22 00                                         ",".

00000490 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     490:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000049e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     49e:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004ac <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     4ac:	09 2d 2d 2d 3e 20 00                                .---> .

000004b3 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     4b3:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

000004bf <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     4bf:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

000004cb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     4cb:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000004d6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     4d6:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000004e3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     4e3:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000004ee <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     4ee:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000004f6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     4f6:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000004ff <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     4ff:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

0000050c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     50c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     51c:	44 22 2c 00                                         D",.

00000520 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     520:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     530:	45 52 22 2c 00                                      ER",.

00000535 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     535:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000053f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     53f:	09 2d 2d 2d 3e 20 00                                .---> .

00000546 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     546:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000550 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     550:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     560:	4e 22 2c 00                                         N",.

00000564 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     564:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     574:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000582 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     582:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000058d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     58d:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000598 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     598:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000005a0 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     5a0:	3e 20 00                                            > .

000005a3 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     5a3:	3e 20 00                                            > .

000005a6 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     5a6:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

000005b0 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     5b0:	41 54 2b 43 53 51 00                                AT+CSQ.

000005b7 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     5b7:	2b 43 53 51 3a 20 00                                +CSQ: .

000005be <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     5be:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000005c7 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     5c7:	2b 43 52 45 47 3a 20 00                             +CREG: .

000005cf <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     5cf:	41 54 2b 43 42 43 00                                AT+CBC.

000005d6 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     5d6:	2b 43 42 43 3a 20 00                                +CBC: .

000005dd <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     5dd:	53 49 4d 38 30 30 48 00                             SIM800H.

000005e5 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     5e5:	09 3c 2d 2d 2d 20 00                                .<--- .

000005ec <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     5ec:	09 2d 2d 2d 3e 20 00                                .---> .

000005f3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     5f3:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000603 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     603:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000613 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     613:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

0000061e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     61e:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000629 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     629:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000634 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     634:	09 3c 2d 2d 2d 20 00                                .<--- .

0000063b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     63b:	09 2d 2d 2d 3e 20 00                                .---> .

00000642 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     642:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

0000064c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     64c:	41 54 45 30 00                                      ATE0.

00000651 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     651:	41 54 45 30 00                                      ATE0.

00000656 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     656:	41 54 00                                            AT.

00000659 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     659:	41 54 00                                            AT.

0000065c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     65c:	41 54 00                                            AT.

0000065f <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     65f:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     66f:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     67f:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     68f:	2e 00                                               ..

00000691 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     691:	41 54 00                                            AT.

00000694 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     694:	41 54 00                                            AT.

00000697 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     697:	41 54 00                                            AT.

0000069a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     69a:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     6aa:	61 62 6c 65 00                                      able.

000006af <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     6af:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     6bf:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000006d0 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     6d0:	4f 4b 00                                            OK.

000006d3 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     6d3:	46 4f 4e 41 00                                      FONA.

000006d8 <_ZZN13Adafruit_FONAC4EaE3__c>:
     6d8:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000006e0 <__ctors_start>:
     6e0:	61 1a       	sub	r6, r17
     6e2:	7d 1c       	adc	r7, r13
     6e4:	33 22       	and	r3, r19

000006e6 <__ctors_end>:
     6e6:	68 1a       	sub	r6, r24

000006e8 <__dtors_end>:
     6e8:	11 24       	eor	r1, r1
     6ea:	1f be       	out	0x3f, r1	; 63
     6ec:	cf ef       	ldi	r28, 0xFF	; 255
     6ee:	d8 e0       	ldi	r29, 0x08	; 8
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	cd bf       	out	0x3d, r28	; 61

000006f4 <__do_copy_data>:
     6f4:	14 e0       	ldi	r17, 0x04	; 4
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b1 e0       	ldi	r27, 0x01	; 1
     6fa:	e0 e8       	ldi	r30, 0x80	; 128
     6fc:	f9 e6       	ldi	r31, 0x69	; 105
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <__do_copy_data+0x10>
     700:	05 90       	lpm	r0, Z+
     702:	0d 92       	st	X+, r0
     704:	ae 33       	cpi	r26, 0x3E	; 62
     706:	b1 07       	cpc	r27, r17
     708:	d9 f7       	brne	.-10     	; 0x700 <__do_copy_data+0xc>

0000070a <__do_clear_bss>:
     70a:	27 e0       	ldi	r18, 0x07	; 7
     70c:	ae e3       	ldi	r26, 0x3E	; 62
     70e:	b4 e0       	ldi	r27, 0x04	; 4
     710:	01 c0       	rjmp	.+2      	; 0x714 <.do_clear_bss_start>

00000712 <.do_clear_bss_loop>:
     712:	1d 92       	st	X+, r1

00000714 <.do_clear_bss_start>:
     714:	a1 35       	cpi	r26, 0x51	; 81
     716:	b2 07       	cpc	r27, r18
     718:	e1 f7       	brne	.-8      	; 0x712 <.do_clear_bss_loop>

0000071a <__do_global_ctors>:
     71a:	13 e0       	ldi	r17, 0x03	; 3
     71c:	c3 e7       	ldi	r28, 0x73	; 115
     71e:	d3 e0       	ldi	r29, 0x03	; 3
     720:	04 c0       	rjmp	.+8      	; 0x72a <__do_global_ctors+0x10>
     722:	21 97       	sbiw	r28, 0x01	; 1
     724:	fe 01       	movw	r30, r28
     726:	0e 94 b0 33 	call	0x6760	; 0x6760 <__tablejump2__>
     72a:	c0 37       	cpi	r28, 0x70	; 112
     72c:	d1 07       	cpc	r29, r17
     72e:	c9 f7       	brne	.-14     	; 0x722 <__do_global_ctors+0x8>
     730:	0e 94 61 22 	call	0x44c2	; 0x44c2 <main>
     734:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <__do_global_dtors>

00000738 <__bad_interrupt>:
     738:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000073c <_ZN10GsmManagerC1Eh>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(uint8_t isMock)
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
     744:	16 2f       	mov	r17, r22
     746:	64 e0       	ldi	r22, 0x04	; 4
     748:	05 96       	adiw	r24, 0x05	; 5
     74a:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_ZN13Adafruit_FONAC1Ea>
{
	_isMock = isMock;
     74e:	1c 83       	std	Y+4, r17	; 0x04
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	08 95       	ret

00000758 <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager()
     758:	08 95       	ret

0000075a <_ZN10GsmManager5beginEv>:
{
}

bool GsmManager::begin(){
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	6f 97       	sbiw	r28, 0x1f	; 31
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61

	if (_isMock)
     77a:	fc 01       	movw	r30, r24
     77c:	24 81       	ldd	r18, Z+4	; 0x04
     77e:	21 11       	cpse	r18, r1
     780:	23 c0       	rjmp	.+70     	; 0x7c8 <_ZN10GsmManager5beginEv+0x6e>
     782:	8c 01       	movw	r16, r24
		return true;
		
	SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
     784:	42 e0       	ldi	r20, 0x02	; 2
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	7c 01       	movw	r14, r24
     78e:	0e 94 38 32 	call	0x6470	; 0x6470 <_ZN14SoftwareSerialC1Ehhb>
	fonaSerial = &fonaSS;
     792:	68 01       	movw	r12, r16
     794:	91 ee       	ldi	r25, 0xE1	; 225
     796:	c9 1a       	sub	r12, r25
     798:	9e ef       	ldi	r25, 0xFE	; 254
     79a:	d9 0a       	sbc	r13, r25
     79c:	f6 01       	movw	r30, r12
     79e:	f1 82       	std	Z+1, r15	; 0x01
     7a0:	e0 82       	st	Z, r14
	
	fonaSerial->begin(4800);
     7a2:	40 ec       	ldi	r20, 0xC0	; 192
     7a4:	52 e1       	ldi	r21, 0x12	; 18
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	c7 01       	movw	r24, r14
     7ac:	0e 94 63 32 	call	0x64c6	; 0x64c6 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     7b0:	f6 01       	movw	r30, r12
     7b2:	60 81       	ld	r22, Z
     7b4:	71 81       	ldd	r23, Z+1	; 0x01
     7b6:	c8 01       	movw	r24, r16
     7b8:	05 96       	adiw	r24, 0x05	; 5
     7ba:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <_ZN13Adafruit_FONA5beginER6Stream>
     7be:	18 2f       	mov	r17, r24
bool GsmManager::begin(){

	if (_isMock)
		return true;
		
	SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
     7c0:	c7 01       	movw	r24, r14
     7c2:	0e 94 df 31 	call	0x63be	; 0x63be <_ZN14SoftwareSerialD1Ev>
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_ZN10GsmManager5beginEv+0x70>
}

bool GsmManager::begin(){

	if (_isMock)
		return true;
     7c8:	11 e0       	ldi	r17, 0x01	; 1
	SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
	fonaSerial = &fonaSS;
	
	fonaSerial->begin(4800);
	return fona.begin(*fonaSerial);
}
     7ca:	81 2f       	mov	r24, r17
     7cc:	6f 96       	adiw	r28, 0x1f	; 31
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	08 95       	ret

000007ea <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
	
	if (_isMock)
     7ea:	fc 01       	movw	r30, r24
     7ec:	24 81       	ldd	r18, Z+4	; 0x04
     7ee:	22 23       	and	r18, r18
     7f0:	39 f0       	breq	.+14     	; 0x800 <_ZN10GsmManager14getBattPercentEPj+0x16>
	{
		*vbat = 99;
     7f2:	83 e6       	ldi	r24, 0x63	; 99
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	fb 01       	movw	r30, r22
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	80 83       	st	Z, r24
		return true;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	08 95       	ret
	}
	
	return fona.getBattPercent(vbat);
     800:	05 96       	adiw	r24, 0x05	; 5
     802:	0e 94 38 30 	call	0x6070	; 0x6070 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     806:	08 95       	ret

00000808 <_ZN10GsmManager10sendViaSmsEPc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(char* data) {
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	65 97       	sbiw	r28, 0x15	; 21
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61

	if (_isMock)
     81e:	dc 01       	movw	r26, r24
     820:	14 96       	adiw	r26, 0x04	; 4
     822:	1c 91       	ld	r17, X
     824:	14 97       	sbiw	r26, 0x04	; 4
     826:	11 23       	and	r17, r17
     828:	31 f0       	breq	.+12     	; 0x836 <_ZN10GsmManager10sendViaSmsEPc+0x2e>
	{
		MOCK_DATA_SENT_SMS = data;
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	7c 93       	st	X, r23
     82e:	6e 93       	st	-X, r22
     830:	12 97       	sbiw	r26, 0x02	; 2
		return 1;
     832:	11 e0       	ldi	r17, 0x01	; 1
     834:	1a c0       	rjmp	.+52     	; 0x86a <_ZN10GsmManager10sendViaSmsEPc+0x62>
     836:	ab 01       	movw	r20, r22
	}

	char sendto[21]="+447968988149";
     838:	2e e0       	ldi	r18, 0x0E	; 14
     83a:	ee e1       	ldi	r30, 0x1E	; 30
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	de 01       	movw	r26, r28
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	2a 95       	dec	r18
     848:	e1 f7       	brne	.-8      	; 0x842 <_ZN10GsmManager10sendViaSmsEPc+0x3a>
     84a:	fe 01       	movw	r30, r28
     84c:	3f 96       	adiw	r30, 0x0f	; 15
     84e:	27 e0       	ldi	r18, 0x07	; 7
     850:	df 01       	movw	r26, r30
     852:	1d 92       	st	X+, r1
     854:	2a 95       	dec	r18
     856:	e9 f7       	brne	.-6      	; 0x852 <_ZN10GsmManager10sendViaSmsEPc+0x4a>
	if (!fona.sendSMS(sendto, data)) {
     858:	be 01       	movw	r22, r28
     85a:	6f 5f       	subi	r22, 0xFF	; 255
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	0e 94 14 2c 	call	0x5828	; 0x5828 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     864:	81 11       	cpse	r24, r1
     866:	01 c0       	rjmp	.+2      	; 0x86a <_ZN10GsmManager10sendViaSmsEPc+0x62>
		return 1;
     868:	11 e0       	ldi	r17, 0x01	; 1
	} else {
		return 0;
	}
}
     86a:	81 2f       	mov	r24, r17
     86c:	65 96       	adiw	r28, 0x15	; 21
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
     880:	fc 01       	movw	r30, r24
     882:	24 81       	ldd	r18, Z+4	; 0x04
     884:	21 11       	cpse	r18, r1
     886:	04 c0       	rjmp	.+8      	; 0x890 <_ZN10GsmManager16getNetworkStatusEv+0x10>
		return 7; //magic
	else
		return fona.getNetworkStatus();
     888:	05 96       	adiw	r24, 0x05	; 5
     88a:	0e 94 47 30 	call	0x608e	; 0x608e <_ZN13Adafruit_FONA16getNetworkStatusEv>
     88e:	08 95       	ret
}

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
		return 7; //magic
     890:	87 e0       	ldi	r24, 0x07	; 7
	else
		return fona.getNetworkStatus();
}
     892:	08 95       	ret

00000894 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
     894:	fc 01       	movw	r30, r24
     896:	24 81       	ldd	r18, Z+4	; 0x04
     898:	21 11       	cpse	r18, r1
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <_ZN10GsmManager7getRSSIEv+0x10>
		return 21; //magic
	else
		return fona.getRSSI();
     89c:	05 96       	adiw	r24, 0x05	; 5
     89e:	0e 94 66 30 	call	0x60cc	; 0x60cc <_ZN13Adafruit_FONA7getRSSIEv>
     8a2:	08 95       	ret
}

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
		return 21; //magic
     8a4:	85 e1       	ldi	r24, 0x15	; 21
	else
		return fona.getRSSI();
}
     8a6:	08 95       	ret

000008a8 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
	return fona.enableGPRS(switchOn);
     8a8:	05 96       	adiw	r24, 0x05	; 5
     8aa:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     8ae:	08 95       	ret

000008b0 <_ZN10GsmManager11sendViaGprsEPc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(char* data)
{
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <_ZN10GsmManager11sendViaGprsEPc+0x1a>
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <_ZN10GsmManager11sendViaGprsEPc+0x1c>
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
	if (_isMock)
     8d0:	fc 01       	movw	r30, r24
     8d2:	24 81       	ldd	r18, Z+4	; 0x04
     8d4:	22 23       	and	r18, r18
     8d6:	29 f0       	breq	.+10     	; 0x8e2 <_ZN10GsmManager11sendViaGprsEPc+0x32>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		MOCK_DATA_SENT_GPRS = data;
     8d8:	71 83       	std	Z+1, r23	; 0x01
     8da:	60 83       	st	Z, r22
		return 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	60 c0       	rjmp	.+192    	; 0x9a2 <__stack+0xa3>
     8e2:	4b 01       	movw	r8, r22
	uint16_t statuscode;
	int16_t length;
	char* url="http://r.mkacars.org/do.php"; //TODO: should not require https?!
		                                                      
	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     8e4:	fb 01       	movw	r30, r22
     8e6:	01 90       	ld	r0, Z+
     8e8:	00 20       	and	r0, r0
     8ea:	e9 f7       	brne	.-6      	; 0x8e6 <_ZN10GsmManager11sendViaGprsEPc+0x36>
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	8f 01       	movw	r16, r30
     8f0:	06 1b       	sub	r16, r22
     8f2:	17 0b       	sbc	r17, r23
     8f4:	5c 01       	movw	r10, r24
     8f6:	f5 e0       	ldi	r31, 0x05	; 5
     8f8:	af 0e       	add	r10, r31
     8fa:	b1 1c       	adc	r11, r1
     8fc:	ce 01       	movw	r24, r28
     8fe:	03 96       	adiw	r24, 0x03	; 3
     900:	6c 01       	movw	r12, r24
     902:	fe 01       	movw	r30, r28
     904:	31 96       	adiw	r30, 0x01	; 1
     906:	7f 01       	movw	r14, r30
     908:	9b 01       	movw	r18, r22
     90a:	42 e1       	ldi	r20, 0x12	; 18
     90c:	52 e0       	ldi	r21, 0x02	; 2
     90e:	6f e8       	ldi	r22, 0x8F	; 143
     910:	72 e0       	ldi	r23, 0x02	; 2
     912:	c5 01       	movw	r24, r10
     914:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     918:	81 11       	cpse	r24, r1
     91a:	19 c0       	rjmp	.+50     	; 0x94e <__stack+0x4f>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     91c:	21 e1       	ldi	r18, 0x11	; 17
     91e:	32 e0       	ldi	r19, 0x02	; 2
     920:	40 e1       	ldi	r20, 0x10	; 16
     922:	52 e0       	ldi	r21, 0x02	; 2
     924:	65 e0       	ldi	r22, 0x05	; 5
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	c5 01       	movw	r24, r10
     92a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     92e:	f4 01       	movw	r30, r8
     930:	01 90       	ld	r0, Z+
     932:	00 20       	and	r0, r0
     934:	e9 f7       	brne	.-6      	; 0x930 <__stack+0x31>
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	8f 01       	movw	r16, r30
     93a:	08 19       	sub	r16, r8
     93c:	19 09       	sbc	r17, r9
     93e:	94 01       	movw	r18, r8
     940:	4a ef       	ldi	r20, 0xFA	; 250
     942:	51 e0       	ldi	r21, 0x01	; 1
     944:	6f e8       	ldi	r22, 0x8F	; 143
     946:	72 e0       	ldi	r23, 0x02	; 2
     948:	c5 01       	movw	r24, r10
     94a:	0e 94 6f 2f 	call	0x5ede	; 0x5ede <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
	}

	if (!succ)
     94e:	88 23       	and	r24, r24
     950:	31 f1       	breq	.+76     	; 0x99e <__stack+0x9f>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	9c 81       	ldd	r25, Y+4	; 0x04
     956:	18 16       	cp	r1, r24
     958:	19 06       	cpc	r1, r25
     95a:	b4 f4       	brge	.+44     	; 0x988 <__stack+0x89>
			while (fona.available()) {
     95c:	c5 01       	movw	r24, r10
     95e:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <_ZN13Adafruit_FONA9availableEv>
     962:	89 2b       	or	r24, r25
     964:	b1 f3       	breq	.-20     	; 0x952 <__stack+0x53>
				char c = fona.read();
     966:	c5 01       	movw	r24, r10
     968:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <_ZN13Adafruit_FONA4readEv>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     96c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     970:	95 ff       	sbrs	r25, 5
     972:	fc cf       	rjmp	.-8      	; 0x96c <__stack+0x6d>
				UDR0 = c;
     974:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
					                                                      
				length--;
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	9c 83       	std	Y+4, r25	; 0x04
     980:	8b 83       	std	Y+3, r24	; 0x03
				if (! length) break;
     982:	89 2b       	or	r24, r25
     984:	59 f7       	brne	.-42     	; 0x95c <__stack+0x5d>
     986:	e5 cf       	rjmp	.-54     	; 0x952 <__stack+0x53>
			}
		}
		fona.HTTP_POST_end();
     988:	c5 01       	movw	r24, r10
     98a:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	88 3c       	cpi	r24, 0xC8	; 200
     994:	91 05       	cpc	r25, r1
     996:	29 f4       	brne	.+10     	; 0x9a2 <__stack+0xa3>
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
	}

	if (!succ)
	{
		ret = 999;
     99e:	87 ee       	ldi	r24, 0xE7	; 231
     9a0:	93 e0       	ldi	r25, 0x03	; 3
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
	}
	                                                      
	return ret;
}
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	08 95       	ret

000009c4 <_Z16getNumOfPadCharsjh>:
		*(buffer++) = '0';
	
	*(buffer++) = value;

	return padChars + 1;
}
     9c4:	8a 30       	cpi	r24, 0x0A	; 10
     9c6:	91 05       	cpc	r25, r1
     9c8:	38 f4       	brcc	.+14     	; 0x9d8 <_Z16getNumOfPadCharsjh+0x14>
     9ca:	86 2f       	mov	r24, r22
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	42 f5       	brpl	.+80     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	08 95       	ret
     9d8:	84 36       	cpi	r24, 0x64	; 100
     9da:	91 05       	cpc	r25, r1
     9dc:	38 f4       	brcc	.+14     	; 0x9ec <_Z16getNumOfPadCharsjh+0x28>
     9de:	86 2f       	mov	r24, r22
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 97       	sbiw	r24, 0x02	; 2
     9e4:	f2 f4       	brpl	.+60     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	08 95       	ret
     9ec:	88 3e       	cpi	r24, 0xE8	; 232
     9ee:	23 e0       	ldi	r18, 0x03	; 3
     9f0:	92 07       	cpc	r25, r18
     9f2:	38 f4       	brcc	.+14     	; 0xa02 <_Z16getNumOfPadCharsjh+0x3e>
     9f4:	86 2f       	mov	r24, r22
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	03 97       	sbiw	r24, 0x03	; 3
     9fa:	9a f4       	brpl	.+38     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	08 95       	ret
     a02:	80 31       	cpi	r24, 0x10	; 16
     a04:	97 42       	sbci	r25, 0x27	; 39
     a06:	38 f4       	brcc	.+14     	; 0xa16 <_Z16getNumOfPadCharsjh+0x52>
     a08:	86 2f       	mov	r24, r22
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	04 97       	sbiw	r24, 0x04	; 4
     a0e:	4a f4       	brpl	.+18     	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	08 95       	ret
     a16:	86 2f       	mov	r24, r22
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	05 97       	sbiw	r24, 0x05	; 5
     a1c:	12 f4       	brpl	.+4      	; 0xa22 <_Z16getNumOfPadCharsjh+0x5e>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret

00000a24 <_Z19writeCharArrWithPadPcPKch>:



byte writeCharArrWithPad(char* buffer, const char* value, byte padLength)
{
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	fc 01       	movw	r30, r24
	byte valLen = strlen(value);
     a2a:	eb 01       	movw	r28, r22
     a2c:	09 90       	ld	r0, Y+
     a2e:	00 20       	and	r0, r0
     a30:	e9 f7       	brne	.-6      	; 0xa2c <_Z19writeCharArrWithPadPcPKch+0x8>
     a32:	21 97       	sbiw	r28, 0x01	; 1
     a34:	c6 1b       	sub	r28, r22
     a36:	d7 0b       	sbc	r29, r23
     a38:	8c 2f       	mov	r24, r28
	byte padChars = max(0, padLength-valLen);
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	4c 1b       	sub	r20, r28
     a3e:	51 09       	sbc	r21, r1
     a40:	12 f4       	brpl	.+4      	; 0xa46 <_Z19writeCharArrWithPadPcPKch+0x22>
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	94 17       	cp	r25, r20
     a4a:	28 f4       	brcc	.+10     	; 0xa56 <_Z19writeCharArrWithPadPcPKch+0x32>
		*(buffer++) = '0';
     a4c:	20 e3       	ldi	r18, 0x30	; 48
     a4e:	20 83       	st	Z, r18
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a50:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = '0';
     a52:	31 96       	adiw	r30, 0x01	; 1
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a54:	f9 cf       	rjmp	.-14     	; 0xa48 <_Z19writeCharArrWithPadPcPKch+0x24>
     a56:	90 e0       	ldi	r25, 0x00	; 0
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a58:	98 17       	cp	r25, r24
     a5a:	40 f4       	brcc	.+16     	; 0xa6c <_Z19writeCharArrWithPadPcPKch+0x48>
		*(buffer++) = *(value+i);
     a5c:	db 01       	movw	r26, r22
     a5e:	a9 0f       	add	r26, r25
     a60:	b1 1d       	adc	r27, r1
     a62:	2c 91       	ld	r18, X
     a64:	20 83       	st	Z, r18
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a66:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = *(value+i);
     a68:	31 96       	adiw	r30, 0x01	; 1
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     a6a:	f6 cf       	rjmp	.-20     	; 0xa58 <_Z19writeCharArrWithPadPcPKch+0x34>
		*(buffer++) = *(value+i);

	return padChars + valLen;
}
     a6c:	8c 2f       	mov	r24, r28
     a6e:	84 0f       	add	r24, r20
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <_Z16writeByteWithPadPchh>:
	//
	//return writeCharArrWithPad(buffer, strRaw, padLength);
//}

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
	byte padChars =getNumOfPadChars(value, padLength);
     a82:	e6 2e       	mov	r14, r22
     a84:	f1 2c       	mov	r15, r1
     a86:	64 2f       	mov	r22, r20
     a88:	c7 01       	movw	r24, r14
     a8a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z16getNumOfPadCharsjh>
     a8e:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	81 17       	cp	r24, r17
     a94:	28 f4       	brcc	.+10     	; 0xaa0 <_Z16writeByteWithPadPchh+0x2a>
		*(buffer++) = '0';
     a96:	90 e3       	ldi	r25, 0x30	; 48
     a98:	98 83       	st	Y, r25

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     a9c:	21 96       	adiw	r28, 0x01	; 1

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     a9e:	f9 cf       	rjmp	.-14     	; 0xa92 <_Z16writeByteWithPadPchh+0x1c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     aa0:	4a e0       	ldi	r20, 0x0A	; 10
     aa2:	be 01       	movw	r22, r28
     aa4:	c7 01       	movw	r24, r14
     aa6:	0e 94 73 34 	call	0x68e6	; 0x68e6 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     aac:	fe 01       	movw	r30, r28
     aae:	e8 0f       	add	r30, r24
     ab0:	f1 1d       	adc	r31, r1
     ab2:	90 81       	ld	r25, Z
     ab4:	99 23       	and	r25, r25
     ab6:	11 f0       	breq	.+4      	; 0xabc <_Z16writeByteWithPadPchh+0x46>
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
     aba:	f8 cf       	rjmp	.-16     	; 0xaac <_Z16writeByteWithPadPchh+0x36>
	
	return padChars + offset;	
}
     abc:	81 0f       	add	r24, r17
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <_Z12writeWithPadPcjh>:

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	7b 01       	movw	r14, r22
	byte padChars =getNumOfPadChars(value, padLength);
     ad8:	64 2f       	mov	r22, r20
     ada:	c7 01       	movw	r24, r14
     adc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z16getNumOfPadCharsjh>
     ae0:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	81 17       	cp	r24, r17
     ae6:	28 f4       	brcc	.+10     	; 0xaf2 <_Z12writeWithPadPcjh+0x28>
		*(buffer++) = '0';
     ae8:	90 e3       	ldi	r25, 0x30	; 48
     aea:	98 83       	st	Y, r25

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     aec:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     aee:	21 96       	adiw	r28, 0x01	; 1

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     af0:	f9 cf       	rjmp	.-14     	; 0xae4 <_Z12writeWithPadPcjh+0x1a>
     af2:	4a e0       	ldi	r20, 0x0A	; 10
     af4:	be 01       	movw	r22, r28
     af6:	c7 01       	movw	r24, r14
     af8:	0e 94 73 34 	call	0x68e6	; 0x68e6 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     afc:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     afe:	fe 01       	movw	r30, r28
     b00:	e8 0f       	add	r30, r24
     b02:	f1 1d       	adc	r31, r1
     b04:	90 81       	ld	r25, Z
     b06:	99 23       	and	r25, r25
     b08:	11 f0       	breq	.+4      	; 0xb0e <_Z12writeWithPadPcjh+0x44>
     b0a:	8f 5f       	subi	r24, 0xFF	; 255
     b0c:	f8 cf       	rjmp	.-16     	; 0xafe <_Z12writeWithPadPcjh+0x34>
	
	return padChars + offset;
}
     b0e:	81 0f       	add	r24, r17
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <_ZN12RmMemManagerC1Ev>:
	volatile byte byte1 = * ((byte*)&value); //LSB
	volatile byte byte2 = * (((byte*)&value)+1); //MSB
	
	EEPROM.write(address,   byte1);
	EEPROM.write(address+1, byte2);
}
     b1c:	08 95       	ret

00000b1e <_ZN12RmMemManagerD1Ev>:
     b1e:	08 95       	ret

00000b20 <_ZN12RmMemManager17getLongFromMemoryEj>:
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <_ZN12RmMemManager17getLongFromMemoryEj+0x10>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <_ZN12RmMemManager17getLongFromMemoryEj+0x12>
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	8b 01       	movw	r16, r22
     b38:	cb 01       	movw	r24, r22
     b3a:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_byte>
     b3e:	d8 2e       	mov	r13, r24
     b40:	c8 01       	movw	r24, r16
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_byte>
     b48:	e8 2e       	mov	r14, r24
     b4a:	c8 01       	movw	r24, r16
     b4c:	02 96       	adiw	r24, 0x02	; 2
     b4e:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_byte>
     b52:	f8 2e       	mov	r15, r24
     b54:	c8 01       	movw	r24, r16
     b56:	03 96       	adiw	r24, 0x03	; 3
     b58:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_byte>
     b5c:	4d 2d       	mov	r20, r13
     b5e:	5e 2d       	mov	r21, r14
     b60:	6f 2d       	mov	r22, r15
     b62:	78 2f       	mov	r23, r24
     b64:	49 83       	std	Y+1, r20	; 0x01
     b66:	5a 83       	std	Y+2, r21	; 0x02
     b68:	6b 83       	std	Y+3, r22	; 0x03
     b6a:	7c 83       	std	Y+4, r23	; 0x04
     b6c:	69 81       	ldd	r22, Y+1	; 0x01
     b6e:	7a 81       	ldd	r23, Y+2	; 0x02
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	9c 81       	ldd	r25, Y+4	; 0x04
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	08 95       	ret

00000b8c <_ZN12RmMemManager15setLongToMemoryEjm>:
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	28 97       	sbiw	r28, 0x08	; 8
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	8b 01       	movw	r16, r22
     ba6:	2d 83       	std	Y+5, r18	; 0x05
     ba8:	3e 83       	std	Y+6, r19	; 0x06
     baa:	4f 83       	std	Y+7, r20	; 0x07
     bac:	58 87       	std	Y+8, r21	; 0x08
     bae:	29 83       	std	Y+1, r18	; 0x01
     bb0:	8e 81       	ldd	r24, Y+6	; 0x06
     bb2:	8a 83       	std	Y+2, r24	; 0x02
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	8b 83       	std	Y+3, r24	; 0x03
     bb8:	88 85       	ldd	r24, Y+8	; 0x08
     bba:	8c 83       	std	Y+4, r24	; 0x04
     bbc:	69 81       	ldd	r22, Y+1	; 0x01
     bbe:	c8 01       	movw	r24, r16
     bc0:	0e 94 a5 34 	call	0x694a	; 0x694a <eeprom_write_byte>
     bc4:	6a 81       	ldd	r22, Y+2	; 0x02
     bc6:	c8 01       	movw	r24, r16
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 a5 34 	call	0x694a	; 0x694a <eeprom_write_byte>
     bce:	6b 81       	ldd	r22, Y+3	; 0x03
     bd0:	c8 01       	movw	r24, r16
     bd2:	02 96       	adiw	r24, 0x02	; 2
     bd4:	0e 94 a5 34 	call	0x694a	; 0x694a <eeprom_write_byte>
     bd8:	6c 81       	ldd	r22, Y+4	; 0x04
     bda:	c8 01       	movw	r24, r16
     bdc:	03 96       	adiw	r24, 0x03	; 3
     bde:	0e 94 a5 34 	call	0x694a	; 0x694a <eeprom_write_byte>
     be2:	28 96       	adiw	r28, 0x08	; 8
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
     bf8:	af 92       	push	r10
     bfa:	bf 92       	push	r11
     bfc:	cf 92       	push	r12
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	69 97       	sbiw	r28, 0x19	; 25
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	5c 01       	movw	r10, r24
     c1e:	7b 01       	movw	r14, r22
     c20:	8a 01       	movw	r16, r20
     c22:	69 01       	movw	r12, r18
	uint8_t readingSz = sizeof(SensorData);
	
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     c24:	64 e6       	ldi	r22, 0x64	; 100
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
     c2c:	69 83       	std	Y+1, r22	; 0x01
     c2e:	7a 83       	std	Y+2, r23	; 0x02
     c30:	8b 83       	std	Y+3, r24	; 0x03
     c32:	9c 83       	std	Y+4, r25	; 0x04
	volatile unsigned long alreadySentTo = getLongFromMemory(MEMLOC_SENT_UPTO);
     c34:	6c e0       	ldi	r22, 0x0C	; 12
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	c5 01       	movw	r24, r10
     c3a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
     c3e:	6d 83       	std	Y+5, r22	; 0x05
     c40:	7e 83       	std	Y+6, r23	; 0x06
     c42:	8f 83       	std	Y+7, r24	; 0x07
     c44:	98 87       	std	Y+8, r25	; 0x08
	
	//We need the last {<maxNoOfReadings}. This may mean we skip from {alreadySentTo-x} onwards.
	volatile unsigned long numOfLastReadings = min(entryCount-alreadySentTo, maxNoOfReadings); //Take last n readings
     c46:	49 81       	ldd	r20, Y+1	; 0x01
     c48:	5a 81       	ldd	r21, Y+2	; 0x02
     c4a:	6b 81       	ldd	r22, Y+3	; 0x03
     c4c:	7c 81       	ldd	r23, Y+4	; 0x04
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	af 81       	ldd	r26, Y+7	; 0x07
     c54:	b8 85       	ldd	r27, Y+8	; 0x08
     c56:	48 1b       	sub	r20, r24
     c58:	59 0b       	sbc	r21, r25
     c5a:	6a 0b       	sbc	r22, r26
     c5c:	7b 0b       	sbc	r23, r27
     c5e:	c8 01       	movw	r24, r16
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	48 17       	cp	r20, r24
     c66:	59 07       	cpc	r21, r25
     c68:	6a 07       	cpc	r22, r26
     c6a:	7b 07       	cpc	r23, r27
     c6c:	60 f4       	brcc	.+24     	; 0xc86 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x8e>
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	ab 81       	ldd	r26, Y+3	; 0x03
     c74:	bc 81       	ldd	r27, Y+4	; 0x04
     c76:	4d 81       	ldd	r20, Y+5	; 0x05
     c78:	5e 81       	ldd	r21, Y+6	; 0x06
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	84 1b       	sub	r24, r20
     c80:	95 0b       	sbc	r25, r21
     c82:	a6 0b       	sbc	r26, r22
     c84:	b7 0b       	sbc	r27, r23
     c86:	89 87       	std	Y+9, r24	; 0x09
     c88:	9a 87       	std	Y+10, r25	; 0x0a
     c8a:	ab 87       	std	Y+11, r26	; 0x0b
     c8c:	bc 87       	std	Y+12, r27	; 0x0c
	if (numOfLastReadings == 0)
     c8e:	69 85       	ldd	r22, Y+9	; 0x09
     c90:	7a 85       	ldd	r23, Y+10	; 0x0a
     c92:	8b 85       	ldd	r24, Y+11	; 0x0b
     c94:	9c 85       	ldd	r25, Y+12	; 0x0c
     c96:	61 15       	cp	r22, r1
     c98:	71 05       	cpc	r23, r1
     c9a:	81 05       	cpc	r24, r1
     c9c:	91 05       	cpc	r25, r1
     c9e:	51 f4       	brne	.+20     	; 0xcb4 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xbc>
	{
		*loadedUpTo = alreadySentTo; /* Nothing more */
     ca0:	0d 81       	ldd	r16, Y+5	; 0x05
     ca2:	1e 81       	ldd	r17, Y+6	; 0x06
     ca4:	2f 81       	ldd	r18, Y+7	; 0x07
     ca6:	38 85       	ldd	r19, Y+8	; 0x08
     ca8:	f6 01       	movw	r30, r12
     caa:	00 83       	st	Z, r16
     cac:	11 83       	std	Z+1, r17	; 0x01
     cae:	22 83       	std	Z+2, r18	; 0x02
     cb0:	33 83       	std	Z+3, r19	; 0x03
		return 0; //Nothing to send
     cb2:	69 c0       	rjmp	.+210    	; 0xd86 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x18e>
	}
	
	//Get read idx => 2 readings if 10 entry count => @ idx 8 offset
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	ab 81       	ldd	r26, Y+3	; 0x03
     cba:	bc 81       	ldd	r27, Y+4	; 0x04
     cbc:	49 85       	ldd	r20, Y+9	; 0x09
     cbe:	5a 85       	ldd	r21, Y+10	; 0x0a
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	84 1b       	sub	r24, r20
     cc6:	95 0b       	sbc	r25, r21
     cc8:	a6 0b       	sbc	r26, r22
     cca:	b7 0b       	sbc	r27, r23
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	9e 87       	std	Y+14, r25	; 0x0e
     cda:	8d 87       	std	Y+13, r24	; 0x0d
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;
     cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cde:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce0:	88 59       	subi	r24, 0x98	; 152
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	98 8b       	std	Y+16, r25	; 0x10
     ce6:	8f 87       	std	Y+15, r24	; 0x0f

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     ce8:	18 8e       	std	Y+24, r1	; 0x18
     cea:	1f 8a       	std	Y+23, r1	; 0x17
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	09 2e       	mov	r0, r25
     cf2:	00 0c       	add	r0, r0
     cf4:	aa 0b       	sbc	r26, r26
     cf6:	bb 0b       	sbc	r27, r27
     cf8:	49 85       	ldd	r20, Y+9	; 0x09
     cfa:	5a 85       	ldd	r21, Y+10	; 0x0a
     cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     d00:	84 17       	cp	r24, r20
     d02:	95 07       	cpc	r25, r21
     d04:	a6 07       	cpc	r26, r22
     d06:	b7 07       	cpc	r27, r23
     d08:	88 f5       	brcc	.+98     	; 0xd6c <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x174>
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     d0a:	1e 8a       	std	Y+22, r1	; 0x16
     d0c:	1d 8a       	std	Y+21, r1	; 0x15
     d0e:	8d 89       	ldd	r24, Y+21	; 0x15
     d10:	9e 89       	ldd	r25, Y+22	; 0x16
     d12:	08 97       	sbiw	r24, 0x08	; 8
     d14:	2c f5       	brge	.+74     	; 0xd60 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x168>
		{
			unsigned int currBufferOffset = (readingNo*readingSz)+byteIdx;//curr buffer offset
     d16:	0f 89       	ldd	r16, Y+23	; 0x17
     d18:	18 8d       	ldd	r17, Y+24	; 0x18
     d1a:	00 0f       	add	r16, r16
     d1c:	11 1f       	adc	r17, r17
     d1e:	00 0f       	add	r16, r16
     d20:	11 1f       	adc	r17, r17
     d22:	00 0f       	add	r16, r16
     d24:	11 1f       	adc	r17, r17
     d26:	8d 89       	ldd	r24, Y+21	; 0x15
     d28:	9e 89       	ldd	r25, Y+22	; 0x16
     d2a:	08 0f       	add	r16, r24
     d2c:	19 1f       	adc	r17, r25
			unsigned int currReadAddress = startReadAddress + currBufferOffset;
     d2e:	af 84       	ldd	r10, Y+15	; 0x0f
     d30:	b8 88       	ldd	r11, Y+16	; 0x10
     d32:	a0 0e       	add	r10, r16
     d34:	b1 1e       	adc	r11, r17
			unsigned volatile int stopme=currBufferOffset;
     d36:	1c 8b       	std	Y+20, r17	; 0x14
     d38:	0b 8b       	std	Y+19, r16	; 0x13
			unsigned volatile int stopme2=currReadAddress;
     d3a:	ba 8a       	std	Y+18, r11	; 0x12
     d3c:	a9 8a       	std	Y+17, r10	; 0x11

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     d3e:	c5 01       	movw	r24, r10
     d40:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_byte>
			volatile byte stopx = (byte)EEPROM.read(currReadAddress);
     d44:	89 8f       	std	Y+25, r24	; 0x19
			*(rPtr+currBufferOffset) = EEPROM.read(currReadAddress);
     d46:	0e 0d       	add	r16, r14
     d48:	1f 1d       	adc	r17, r15
     d4a:	c5 01       	movw	r24, r10
     d4c:	0e 94 9d 34 	call	0x693a	; 0x693a <eeprom_read_byte>
     d50:	f8 01       	movw	r30, r16
     d52:	80 83       	st	Z, r24
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     d54:	8d 89       	ldd	r24, Y+21	; 0x15
     d56:	9e 89       	ldd	r25, Y+22	; 0x16
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	9e 8b       	std	Y+22, r25	; 0x16
     d5c:	8d 8b       	std	Y+21, r24	; 0x15
     d5e:	d7 cf       	rjmp	.-82     	; 0xd0e <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x116>
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     d60:	8f 89       	ldd	r24, Y+23	; 0x17
     d62:	98 8d       	ldd	r25, Y+24	; 0x18
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	98 8f       	std	Y+24, r25	; 0x18
     d68:	8f 8b       	std	Y+23, r24	; 0x17
     d6a:	c0 cf       	rjmp	.-128    	; 0xcec <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xf4>
			unsigned volatile int stopme2=currReadAddress;
			volatile byte stopx = (byte)EEPROM.read(currReadAddress);
			*(rPtr+currBufferOffset) = EEPROM.read(currReadAddress);
		}
	
	*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	ab 81       	ldd	r26, Y+3	; 0x03
     d72:	bc 81       	ldd	r27, Y+4	; 0x04
     d74:	f6 01       	movw	r30, r12
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	a2 83       	std	Z+2, r26	; 0x02
     d7c:	b3 83       	std	Z+3, r27	; 0x03
	return numOfLastReadings;
     d7e:	69 85       	ldd	r22, Y+9	; 0x09
     d80:	7a 85       	ldd	r23, Y+10	; 0x0a
     d82:	8b 85       	ldd	r24, Y+11	; 0x0b
     d84:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     d86:	69 96       	adiw	r28, 0x19	; 25
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	08 95       	ret

00000da8 <_ZN12RmMemManager12markDataSentEm>:

void RmMemManager::markDataSent(unsigned long sentUpTo)
{
	setLongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
     da8:	9a 01       	movw	r18, r20
     daa:	ab 01       	movw	r20, r22
     dac:	6c e0       	ldi	r22, 0x0C	; 12
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
     db4:	08 95       	ret

00000db6 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
}

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
     db6:	08 95       	ret

00000db8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:
	//TODO
}

void RmMemManager::appendSensorEntry(SensorData* r)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	60 97       	sbiw	r28, 0x10	; 16
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	6c 01       	movw	r12, r24
     dda:	7b 01       	movw	r14, r22
	volatile unsigned int readingSz = sizeof(SensorData); //const
     ddc:	88 e0       	ldi	r24, 0x08	; 8
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
	
	//Read where next entry is free
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     de4:	64 e6       	ldi	r22, 0x64	; 100
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	c6 01       	movw	r24, r12
     dea:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
     dee:	6b 83       	std	Y+3, r22	; 0x03
     df0:	7c 83       	std	Y+4, r23	; 0x04
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	9e 83       	std	Y+6, r25	; 0x06
	volatile unsigned long nextFreeOffset = entryCount * sizeof(SensorData);
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	ad 81       	ldd	r26, Y+5	; 0x05
     dfc:	be 81       	ldd	r27, Y+6	; 0x06
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	aa 1f       	adc	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	aa 1f       	adc	r26, r26
     e0c:	bb 1f       	adc	r27, r27
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	aa 1f       	adc	r26, r26
     e14:	bb 1f       	adc	r27, r27
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
     e1a:	a9 87       	std	Y+9, r26	; 0x09
     e1c:	ba 87       	std	Y+10, r27	; 0x0a
	volatile unsigned long nextFreeAddress = MEMADDR_READING_DATA_START + nextFreeOffset;
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
     e20:	98 85       	ldd	r25, Y+8	; 0x08
     e22:	a9 85       	ldd	r26, Y+9	; 0x09
     e24:	ba 85       	ldd	r27, Y+10	; 0x0a
     e26:	88 59       	subi	r24, 0x98	; 152
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	af 4f       	sbci	r26, 0xFF	; 255
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	8b 87       	std	Y+11, r24	; 0x0b
     e30:	9c 87       	std	Y+12, r25	; 0x0c
     e32:	ad 87       	std	Y+13, r26	; 0x0d
     e34:	be 87       	std	Y+14, r27	; 0x0e

	//TODO: modulo both free address (AND entry count?)

	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     e36:	00 e0       	ldi	r16, 0x00	; 0
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	08 30       	cpi	r16, 0x08	; 8
     e3c:	11 05       	cpc	r17, r1
     e3e:	78 f4       	brcc	.+30     	; 0xe5e <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0xa6>
		EEPROM.write(nextFreeAddress+i, *(rPtr+i));
     e40:	f7 01       	movw	r30, r14
     e42:	e0 0f       	add	r30, r16
     e44:	f1 1f       	adc	r31, r17
     e46:	60 81       	ld	r22, Z
     e48:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4c:	ad 85       	ldd	r26, Y+13	; 0x0d
     e4e:	be 85       	ldd	r27, Y+14	; 0x0e
     e50:	80 0f       	add	r24, r16
     e52:	91 1f       	adc	r25, r17
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     e54:	0e 94 a5 34 	call	0x694a	; 0x694a <eeprom_write_byte>

	//TODO: modulo both free address (AND entry count?)

	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     e58:	0f 5f       	subi	r16, 0xFF	; 255
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	ee cf       	rjmp	.-36     	; 0xe3a <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x82>
		EEPROM.write(nextFreeAddress+i, *(rPtr+i));

	//Update entry count
	setLongToMemory(MEMLOC_READING_ENTRY_COUNT, entryCount+1);
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	ad 81       	ldd	r26, Y+5	; 0x05
     e64:	be 81       	ldd	r27, Y+6	; 0x06
     e66:	9c 01       	movw	r18, r24
     e68:	ad 01       	movw	r20, r26
     e6a:	2f 5f       	subi	r18, 0xFF	; 255
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	4f 4f       	sbci	r20, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	64 e6       	ldi	r22, 0x64	; 100
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	c6 01       	movw	r24, r12
     e78:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	volatile int stop=2;
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	98 8b       	std	Y+16, r25	; 0x10
     e82:	8f 87       	std	Y+15, r24	; 0x0f
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
     e84:	60 96       	adiw	r28, 0x10	; 16
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	08 95       	ret

00000ea2 <_Z13internalFlashRbS_9LED_STATEb>:
	)
{
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
     ea2:	40 32       	cpi	r20, 0x20	; 32
     ea4:	31 f4       	brne	.+12     	; 0xeb2 <_Z13internalFlashRbS_9LED_STATEb+0x10>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
     ea6:	fc 01       	movw	r30, r24
     ea8:	50 81       	ld	r21, Z
     eaa:	31 e0       	ldi	r19, 0x01	; 1
     eac:	35 27       	eor	r19, r21
     eae:	30 83       	st	Z, r19
     eb0:	0f c0       	rjmp	.+30     	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Slow) {
     eb2:	40 34       	cpi	r20, 0x40	; 64
     eb4:	19 f4       	brne	.+6      	; 0xebc <_Z13internalFlashRbS_9LED_STATEb+0x1a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Solid) {
     ebc:	40 31       	cpi	r20, 0x10	; 16
     ebe:	21 f4       	brne	.+8      	; 0xec8 <_Z13internalFlashRbS_9LED_STATEb+0x26>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
     ec0:	31 e0       	ldi	r19, 0x01	; 1
     ec2:	fc 01       	movw	r30, r24
     ec4:	30 83       	st	Z, r19
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == All_Clear) {
     ec8:	40 38       	cpi	r20, 0x80	; 128
     eca:	11 f4       	brne	.+4      	; 0xed0 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
     ecc:	fc 01       	movw	r30, r24
     ece:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
     ed0:	42 30       	cpi	r20, 0x02	; 2
     ed2:	31 f4       	brne	.+12     	; 0xee0 <_Z13internalFlashRbS_9LED_STATEb+0x3e>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
     ed4:	fb 01       	movw	r30, r22
     ed6:	90 81       	ld	r25, Z
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	89 27       	eor	r24, r25
     edc:	80 83       	st	Z, r24
     ede:	08 95       	ret
	}
	else if (currLedState == Red_Slow) {
     ee0:	44 30       	cpi	r20, 0x04	; 4
     ee2:	19 f4       	brne	.+6      	; 0xeea <_Z13internalFlashRbS_9LED_STATEb+0x48>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
     ee4:	fb 01       	movw	r30, r22
     ee6:	20 83       	st	Z, r18
     ee8:	08 95       	ret
	}
	else if (currLedState == Red_Solid) {
     eea:	41 30       	cpi	r20, 0x01	; 1
     eec:	21 f4       	brne	.+8      	; 0xef6 <_Z13internalFlashRbS_9LED_STATEb+0x54>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	fb 01       	movw	r30, r22
     ef2:	80 83       	st	Z, r24
     ef4:	08 95       	ret
	}
	else if (currLedState == All_Clear) {
     ef6:	40 38       	cpi	r20, 0x80	; 128
     ef8:	11 f4       	brne	.+4      	; 0xefe <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
     efa:	fb 01       	movw	r30, r22
     efc:	10 82       	st	Z, r1
     efe:	08 95       	ret

00000f00 <_ZN12RmMemManager8flashLEDEv>:

//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
     f00:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <__data_end>
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	8b ea       	ldi	r24, 0xAB	; 171
     f08:	98 9f       	mul	r25, r24
     f0a:	81 2d       	mov	r24, r1
     f0c:	11 24       	eor	r1, r1
     f0e:	86 95       	lsr	r24
     f10:	28 2f       	mov	r18, r24
     f12:	22 0f       	add	r18, r18
     f14:	82 0f       	add	r24, r18
     f16:	98 1b       	sub	r25, r24
     f18:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <__data_end>

	//Flash Bottom LED	
	internalFlash(
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	91 11       	cpse	r25, r1
     f20:	20 e0       	ldi	r18, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
     f22:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <_ledBottomState>
     f26:	61 e4       	ldi	r22, 0x41	; 65
     f28:	74 e0       	ldi	r23, 0x04	; 4
     f2a:	82 e4       	ldi	r24, 0x42	; 66
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
     f32:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <_ledBottomPinGreen>
     f36:	89 e0       	ldi	r24, 0x09	; 9
     f38:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
     f3c:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <_ledBottomPinRed>
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
				
	//Flash Top LED
	internalFlash(
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <__data_end>
     f4c:	81 11       	cpse	r24, r1
     f4e:	20 e0       	ldi	r18, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
     f50:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
     f54:	60 e4       	ldi	r22, 0x40	; 64
     f56:	74 e0       	ldi	r23, 0x04	; 4
     f58:	8f e3       	ldi	r24, 0x3F	; 63
     f5a:	94 e0       	ldi	r25, 0x04	; 4
     f5c:	0e 94 51 07 	call	0xea2	; 0xea2 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
     f60:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <_ledTopPinGreen>
     f64:	8b e0       	ldi	r24, 0x0B	; 11
     f66:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
     f6a:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <_ledTopPinRed>
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
     f74:	08 95       	ret

00000f76 <_Z41__static_initialization_and_destruction_0ii>:
{
	String actual(actualRaw);
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
	
	assertTrue(res);
}
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
     f90:	4b 01       	movw	r8, r22
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	31 f5       	brne	.+76     	; 0xfe2 <_Z41__static_initialization_and_destruction_0ii+0x6c>
     f96:	6f 3f       	cpi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	19 f5       	brne	.+70     	; 0xfe2 <_Z41__static_initialization_and_destruction_0ii+0x6c>
     f9c:	83 ea       	ldi	r24, 0xA3	; 163
     f9e:	95 e0       	ldi	r25, 0x05	; 5
     fa0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN12RmMemManagerC1Ev>
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	82 e8       	ldi	r24, 0x82	; 130
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN10GsmManagerC1Eh>
     fae:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <readingTime>
     fb2:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <readingTime+0x1>
     fb6:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <readingTime+0x2>
     fba:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <readingTime+0x3>
     fbe:	0f 2e       	mov	r0, r31
     fc0:	f0 e2       	ldi	r31, 0x20	; 32
     fc2:	af 2e       	mov	r10, r31
     fc4:	ff eb       	ldi	r31, 0xBF	; 191
     fc6:	bf 2e       	mov	r11, r31
     fc8:	f2 e0       	ldi	r31, 0x02	; 2
     fca:	cf 2e       	mov	r12, r31
     fcc:	d1 2c       	mov	r13, r1
     fce:	f0 2d       	mov	r31, r0
     fd0:	e1 2c       	mov	r14, r1
     fd2:	f1 2c       	mov	r15, r1
     fd4:	87 01       	movw	r16, r14
     fd6:	e3 94       	inc	r14
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	85 e5       	ldi	r24, 0x55	; 85
     fdc:	94 e0       	ldi	r25, 0x04	; 4
     fde:	0e 94 84 1c 	call	0x3908	; 0x3908 <_ZN6TimingC1Ehmmm>
     fe2:	cd 2b       	or	r28, r29
     fe4:	79 f4       	brne	.+30     	; 0x1004 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     fe6:	89 20       	and	r8, r9
     fe8:	80 94       	com	r8
     fea:	61 f4       	brne	.+24     	; 0x1004 <_Z41__static_initialization_and_destruction_0ii+0x8e>
     fec:	85 e5       	ldi	r24, 0x55	; 85
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	0e 94 b7 1c 	call	0x396e	; 0x396e <_ZN6TimingD1Ev>
     ff4:	82 e8       	ldi	r24, 0x82	; 130
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN10GsmManagerD1Ev>
     ffc:	83 ea       	ldi	r24, 0xA3	; 163
     ffe:	95 e0       	ldi	r25, 0x05	; 5
    1000:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN12RmMemManagerD1Ev>
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	08 95       	ret

0000101e <_Z15get_free_memoryv>:
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	00 d0       	rcall	.+0      	; 0x1024 <_Z15get_free_memoryv+0x6>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <__brkval>
    102c:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <__brkval+0x1>
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	31 f4       	brne	.+12     	; 0x1040 <_Z15get_free_memoryv+0x22>
    1034:	ce 01       	movw	r24, r28
    1036:	80 55       	subi	r24, 0x50	; 80
    1038:	97 40       	sbci	r25, 0x07	; 7
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <_Z15get_free_memoryv+0x32>
    1040:	9e 01       	movw	r18, r28
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	3f 4f       	sbci	r19, 0xFF	; 255
    1046:	a9 01       	movw	r20, r18
    1048:	48 1b       	sub	r20, r24
    104a:	59 0b       	sbc	r21, r25
    104c:	5a 83       	std	Y+2, r21	; 0x02
    104e:	49 83       	std	Y+1, r20	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <_Z24initialiseModulePristinej>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	28 97       	sbiw	r28, 0x08	; 8
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e2       	ldi	r21, 0x20	; 32
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	49 83       	std	Y+1, r20	; 0x01
    107c:	5a 83       	std	Y+2, r21	; 0x02
    107e:	6b 83       	std	Y+3, r22	; 0x03
    1080:	7c 83       	std	Y+4, r23	; 0x04
    1082:	4f ef       	ldi	r20, 0xFF	; 255
    1084:	5f ed       	ldi	r21, 0xDF	; 223
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	7f ef       	ldi	r23, 0xFF	; 255
    108a:	4d 83       	std	Y+5, r20	; 0x05
    108c:	5e 83       	std	Y+6, r21	; 0x06
    108e:	6f 83       	std	Y+7, r22	; 0x07
    1090:	78 87       	std	Y+8, r23	; 0x08
    1092:	9c 01       	movw	r18, r24
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	83 ea       	ldi	r24, 0xA3	; 163
    109e:	95 e0       	ldi	r25, 0x05	; 5
    10a0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	a9 01       	movw	r20, r18
    10aa:	68 e0       	ldi	r22, 0x08	; 8
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	83 ea       	ldi	r24, 0xA3	; 163
    10b0:	95 e0       	ldi	r25, 0x05	; 5
    10b2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	64 e6       	ldi	r22, 0x64	; 100
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	83 ea       	ldi	r24, 0xA3	; 163
    10c2:	95 e0       	ldi	r25, 0x05	; 5
    10c4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	a9 01       	movw	r20, r18
    10ce:	6c e0       	ldi	r22, 0x0C	; 12
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	83 ea       	ldi	r24, 0xA3	; 163
    10d4:	95 e0       	ldi	r25, 0x05	; 5
    10d6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
    10da:	28 96       	adiw	r28, 0x08	; 8
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <_Z8shutdownv>:
    10ec:	68 eb       	ldi	r22, 0xB8	; 184
    10ee:	7b e0       	ldi	r23, 0x0B	; 11
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <_moduleHasShutdown>
    1106:	08 95       	ret

00001108 <setup>:
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	00 d0       	rcall	.+0      	; 0x110e <setup+0x6>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	84 b7       	in	r24, 0x34	; 52
    1114:	89 e0       	ldi	r24, 0x09	; 9
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	14 be       	out	0x34, r1	; 52
    111e:	26 e0       	ldi	r18, 0x06	; 6
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	52 ec       	ldi	r21, 0xC2	; 194
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	83 e6       	ldi	r24, 0x63	; 99
    112a:	96 e0       	ldi	r25, 0x06	; 6
    112c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_ZN14HardwareSerial5beginEmh>
    1130:	6c e3       	ldi	r22, 0x3C	; 60
    1132:	73 e0       	ldi	r23, 0x03	; 3
    1134:	83 e6       	ldi	r24, 0x63	; 99
    1136:	96 e0       	ldi	r25, 0x06	; 6
    1138:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	89 e0       	ldi	r24, 0x09	; 9
    1148:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	88 e0       	ldi	r24, 0x08	; 8
    1150:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	8b e0       	ldi	r24, 0x0B	; 11
    1158:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	8a e0       	ldi	r24, 0x0A	; 10
    1160:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <_isAtCycleStart>
    116a:	82 e8       	ldi	r24, 0x82	; 130
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	0e 94 ad 03 	call	0x75a	; 0x75a <_ZN10GsmManager5beginEv>
    1172:	81 11       	cpse	r24, r1
    1174:	02 c0       	rjmp	.+4      	; 0x117a <setup+0x72>
    1176:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z8shutdownv>
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <_Z10toggleGPRSb>:
    1184:	68 2f       	mov	r22, r24
    1186:	82 e8       	ldi	r24, 0x82	; 130
    1188:	94 e0       	ldi	r25, 0x04	; 4
    118a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN10GsmManager10enableGPRSEb>
    118e:	08 95       	ret

00001190 <_Z10sendViaSmsPc>:
    1190:	bc 01       	movw	r22, r24
    1192:	82 e8       	ldi	r24, 0x82	; 130
    1194:	94 e0       	ldi	r25, 0x04	; 4
    1196:	0e 94 04 04 	call	0x808	; 0x808 <_ZN10GsmManager10sendViaSmsEPc>
    119a:	08 95       	ret

0000119c <_Z11sendViaGprsPc>:
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <_Z11sendViaGprsPc+0x6>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	bc 01       	movw	r22, r24
    11a8:	82 e8       	ldi	r24, 0x82	; 130
    11aa:	94 e0       	ldi	r25, 0x04	; 4
    11ac:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN10GsmManager11sendViaGprsEPc>
    11b0:	9a 83       	std	Y+2, r25	; 0x02
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <_Z15resetSensorDatav>:
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	28 97       	sbiw	r28, 0x08	; 8
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <noBattReadings>
    11de:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <noPVReadings>
    11e2:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <nocurrReadings>
    11e6:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <noTempReadings>
    11ea:	ce 01       	movw	r24, r28
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <currSensorData+0x1>
    11f2:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <currSensorData>
    11f6:	28 96       	adiw	r28, 0x08	; 8
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <_Z17resetAtCycleStartv>:
    1208:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_Z15resetSensorDatav>
    120c:	08 95       	ret

0000120e <_Z17persistSensorDatav>:
    120e:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <currSensorData>
    1212:	70 91 48 04 	lds	r23, 0x0448	; 0x800448 <currSensorData+0x1>
    1216:	83 ea       	ldi	r24, 0xA3	; 163
    1218:	95 e0       	ldi	r25, 0x05	; 5
    121a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
    121e:	08 95       	ret

00001220 <_Z7readVccv>:
    1220:	8e e4       	ldi	r24, 0x4E	; 78
    1222:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1226:	62 e0       	ldi	r22, 0x02	; 2
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    1232:	ea e7       	ldi	r30, 0x7A	; 122
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	80 83       	st	Z, r24
    123c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1240:	86 fd       	sbrc	r24, 6
    1242:	fc cf       	rjmp	.-8      	; 0x123c <_Z7readVccv+0x1c>
    1244:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1248:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	32 2f       	mov	r19, r18
    1250:	22 27       	eor	r18, r18
    1252:	a9 01       	movw	r20, r18
    1254:	33 0f       	add	r19, r19
    1256:	66 0b       	sbc	r22, r22
    1258:	77 0b       	sbc	r23, r23
    125a:	9a 01       	movw	r18, r20
    125c:	ab 01       	movw	r20, r22
    125e:	28 2b       	or	r18, r24
    1260:	64 eb       	ldi	r22, 0xB4	; 180
    1262:	7b e2       	ldi	r23, 0x2B	; 43
    1264:	81 e1       	ldi	r24, 0x11	; 17
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 91 33 	call	0x6722	; 0x6722 <__divmodsi4>
    126c:	ca 01       	movw	r24, r20
    126e:	b9 01       	movw	r22, r18
    1270:	28 ee       	ldi	r18, 0xE8	; 232
    1272:	33 e0       	ldi	r19, 0x03	; 3
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	0e 94 91 33 	call	0x6722	; 0x6722 <__divmodsi4>
    127c:	ca 01       	movw	r24, r20
    127e:	b9 01       	movw	r22, r18
    1280:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    1284:	08 95       	ret

00001286 <_Z16takeSampleAnalogi>:
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	0e 94 03 26 	call	0x4c06	; 0x4c06 <analogRead>
    1296:	ec 01       	movw	r28, r24
    1298:	0e 94 10 09 	call	0x1220	; 0x1220 <_Z7readVccv>
    129c:	6b 01       	movw	r12, r22
    129e:	7c 01       	movw	r14, r24
    12a0:	be 01       	movw	r22, r28
    12a2:	dd 0f       	add	r29, r29
    12a4:	88 0b       	sbc	r24, r24
    12a6:	99 0b       	sbc	r25, r25
    12a8:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    12ac:	a7 01       	movw	r20, r14
    12ae:	96 01       	movw	r18, r12
    12b0:	0e 94 15 20 	call	0x402a	; 0x402a <__mulsf3>
    12b4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__fixsfsi>
    12b8:	07 2e       	mov	r0, r23
    12ba:	00 0c       	add	r0, r0
    12bc:	88 0b       	sbc	r24, r24
    12be:	99 0b       	sbc	r25, r25
    12c0:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	08 95       	ret

000012d2 <_Z16readSensorsAsyncv>:
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	2c 97       	sbiw	r28, 0x0c	; 12
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	66 e9       	ldi	r22, 0x96	; 150
    1302:	72 e0       	ldi	r23, 0x02	; 2
    1304:	83 e6       	ldi	r24, 0x63	; 99
    1306:	96 e0       	ldi	r25, 0x06	; 6
    1308:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    130c:	8e e0       	ldi	r24, 0x0E	; 14
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z16takeSampleAnalogi>
    1314:	6b 01       	movw	r12, r22
    1316:	7c 01       	movw	r14, r24
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	5a e3       	ldi	r21, 0x3A	; 58
    1320:	0e 94 15 20 	call	0x402a	; 0x402a <__mulsf3>
    1324:	23 e5       	ldi	r18, 0x53	; 83
    1326:	3b e4       	ldi	r19, 0x4B	; 75
    1328:	4b e7       	ldi	r20, 0x7B	; 123
    132a:	51 e4       	ldi	r21, 0x41	; 65
    132c:	0e 94 15 20 	call	0x402a	; 0x402a <__mulsf3>
    1330:	6d 83       	std	Y+5, r22	; 0x05
    1332:	7e 83       	std	Y+6, r23	; 0x06
    1334:	8f 83       	std	Y+7, r24	; 0x07
    1336:	98 87       	std	Y+8, r25	; 0x08
    1338:	8f e0       	ldi	r24, 0x0F	; 15
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z16takeSampleAnalogi>
    1340:	4b 01       	movw	r8, r22
    1342:	5c 01       	movw	r10, r24
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5a e3       	ldi	r21, 0x3A	; 58
    134c:	0e 94 15 20 	call	0x402a	; 0x402a <__mulsf3>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 ec       	ldi	r20, 0xC0	; 192
    1356:	50 e4       	ldi	r21, 0x40	; 64
    1358:	0e 94 15 20 	call	0x402a	; 0x402a <__mulsf3>
    135c:	69 87       	std	Y+9, r22	; 0x09
    135e:	7a 87       	std	Y+10, r23	; 0x0a
    1360:	8b 87       	std	Y+11, r24	; 0x0b
    1362:	9c 87       	std	Y+12, r25	; 0x0c
    1364:	81 e1       	ldi	r24, 0x11	; 17
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z16takeSampleAnalogi>
    136c:	69 83       	std	Y+1, r22	; 0x01
    136e:	7a 83       	std	Y+2, r23	; 0x02
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	80 e1       	ldi	r24, 0x10	; 16
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 43 09 	call	0x1286	; 0x1286 <_Z16takeSampleAnalogi>
    137c:	2b 01       	movw	r4, r22
    137e:	3c 01       	movw	r6, r24
    1380:	60 e8       	ldi	r22, 0x80	; 128
    1382:	72 e0       	ldi	r23, 0x02	; 2
    1384:	83 e6       	ldi	r24, 0x63	; 99
    1386:	96 e0       	ldi	r25, 0x06	; 6
    1388:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    138c:	60 ee       	ldi	r22, 0xE0	; 224
    138e:	72 e0       	ldi	r23, 0x02	; 2
    1390:	83 e6       	ldi	r24, 0x63	; 99
    1392:	96 e0       	ldi	r25, 0x06	; 6
    1394:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    1398:	22 e0       	ldi	r18, 0x02	; 2
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	b5 01       	movw	r22, r10
    139e:	a4 01       	movw	r20, r8
    13a0:	83 e6       	ldi	r24, 0x63	; 99
    13a2:	96 e0       	ldi	r25, 0x06	; 6
    13a4:	0e 94 ff 24 	call	0x49fe	; 0x49fe <_ZN5Print7printlnEdi>
    13a8:	6a e6       	ldi	r22, 0x6A	; 106
    13aa:	72 e0       	ldi	r23, 0x02	; 2
    13ac:	83 e6       	ldi	r24, 0x63	; 99
    13ae:	96 e0       	ldi	r25, 0x06	; 6
    13b0:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    13b4:	60 ee       	ldi	r22, 0xE0	; 224
    13b6:	72 e0       	ldi	r23, 0x02	; 2
    13b8:	83 e6       	ldi	r24, 0x63	; 99
    13ba:	96 e0       	ldi	r25, 0x06	; 6
    13bc:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    13c0:	22 e0       	ldi	r18, 0x02	; 2
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	49 85       	ldd	r20, Y+9	; 0x09
    13c6:	5a 85       	ldd	r21, Y+10	; 0x0a
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	83 e6       	ldi	r24, 0x63	; 99
    13ce:	96 e0       	ldi	r25, 0x06	; 6
    13d0:	0e 94 ff 24 	call	0x49fe	; 0x49fe <_ZN5Print7printlnEdi>
    13d4:	69 e5       	ldi	r22, 0x59	; 89
    13d6:	72 e0       	ldi	r23, 0x02	; 2
    13d8:	83 e6       	ldi	r24, 0x63	; 99
    13da:	96 e0       	ldi	r25, 0x06	; 6
    13dc:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    13e0:	60 ee       	ldi	r22, 0xE0	; 224
    13e2:	72 e0       	ldi	r23, 0x02	; 2
    13e4:	83 e6       	ldi	r24, 0x63	; 99
    13e6:	96 e0       	ldi	r25, 0x06	; 6
    13e8:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    13ec:	22 e0       	ldi	r18, 0x02	; 2
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	b7 01       	movw	r22, r14
    13f2:	a6 01       	movw	r20, r12
    13f4:	83 e6       	ldi	r24, 0x63	; 99
    13f6:	96 e0       	ldi	r25, 0x06	; 6
    13f8:	0e 94 ff 24 	call	0x49fe	; 0x49fe <_ZN5Print7printlnEdi>
    13fc:	68 e4       	ldi	r22, 0x48	; 72
    13fe:	72 e0       	ldi	r23, 0x02	; 2
    1400:	83 e6       	ldi	r24, 0x63	; 99
    1402:	96 e0       	ldi	r25, 0x06	; 6
    1404:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    1408:	60 ee       	ldi	r22, 0xE0	; 224
    140a:	72 e0       	ldi	r23, 0x02	; 2
    140c:	83 e6       	ldi	r24, 0x63	; 99
    140e:	96 e0       	ldi	r25, 0x06	; 6
    1410:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    1414:	22 e0       	ldi	r18, 0x02	; 2
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4d 81       	ldd	r20, Y+5	; 0x05
    141a:	5e 81       	ldd	r21, Y+6	; 0x06
    141c:	6f 81       	ldd	r22, Y+7	; 0x07
    141e:	78 85       	ldd	r23, Y+8	; 0x08
    1420:	83 e6       	ldi	r24, 0x63	; 99
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	0e 94 ff 24 	call	0x49fe	; 0x49fe <_ZN5Print7printlnEdi>
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	c5 01       	movw	r24, r10
    1430:	b4 01       	movw	r22, r8
    1432:	0e 94 10 20 	call	0x4020	; 0x4020 <__gesf2>
    1436:	18 16       	cp	r1, r24
    1438:	7c f5       	brge	.+94     	; 0x1498 <_Z16readSensorsAsyncv+0x1c6>
    143a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <currSensorData>
    143e:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <currSensorData+0x1>
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	fc 01       	movw	r30, r24
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	10 91 4c 04 	lds	r17, 0x044C	; 0x80044c <noBattReadings>
    1450:	18 9f       	mul	r17, r24
    1452:	b0 01       	movw	r22, r0
    1454:	19 9f       	mul	r17, r25
    1456:	70 0d       	add	r23, r0
    1458:	11 24       	eor	r1, r1
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	1f 5f       	subi	r17, 0xFF	; 255
    1460:	10 93 4c 04 	sts	0x044C, r17	; 0x80044c <noBattReadings>
    1464:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    1468:	a5 01       	movw	r20, r10
    146a:	94 01       	movw	r18, r8
    146c:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__addsf3>
    1470:	4b 01       	movw	r8, r22
    1472:	5c 01       	movw	r10, r24
    1474:	61 2f       	mov	r22, r17
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	c5 01       	movw	r24, r10
    1486:	b4 01       	movw	r22, r8
    1488:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__divsf3>
    148c:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fixunssfsi>
    1490:	ed 81       	ldd	r30, Y+5	; 0x05
    1492:	fe 81       	ldd	r31, Y+6	; 0x06
    1494:	71 83       	std	Z+1, r23	; 0x01
    1496:	60 83       	st	Z, r22
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	a9 01       	movw	r20, r18
    149e:	c7 01       	movw	r24, r14
    14a0:	b6 01       	movw	r22, r12
    14a2:	0e 94 10 20 	call	0x4020	; 0x4020 <__gesf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	7c f5       	brge	.+94     	; 0x1508 <_Z16readSensorsAsyncv+0x236>
    14aa:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <currSensorData>
    14ae:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <currSensorData+0x1>
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	fc 01       	movw	r30, r24
    14b8:	84 81       	ldd	r24, Z+4	; 0x04
    14ba:	95 81       	ldd	r25, Z+5	; 0x05
    14bc:	b0 90 4b 04 	lds	r11, 0x044B	; 0x80044b <noPVReadings>
    14c0:	b8 9e       	mul	r11, r24
    14c2:	b0 01       	movw	r22, r0
    14c4:	b9 9e       	mul	r11, r25
    14c6:	70 0d       	add	r23, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	b3 94       	inc	r11
    14d0:	b0 92 4b 04 	sts	0x044B, r11	; 0x80044b <noPVReadings>
    14d4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    14d8:	a7 01       	movw	r20, r14
    14da:	96 01       	movw	r18, r12
    14dc:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__addsf3>
    14e0:	6b 01       	movw	r12, r22
    14e2:	7c 01       	movw	r14, r24
    14e4:	6b 2d       	mov	r22, r11
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	c7 01       	movw	r24, r14
    14f6:	b6 01       	movw	r22, r12
    14f8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__divsf3>
    14fc:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fixunssfsi>
    1500:	ed 81       	ldd	r30, Y+5	; 0x05
    1502:	fe 81       	ldd	r31, Y+6	; 0x06
    1504:	75 83       	std	Z+5, r23	; 0x05
    1506:	64 83       	std	Z+4, r22	; 0x04
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	69 81       	ldd	r22, Y+1	; 0x01
    1510:	7a 81       	ldd	r23, Y+2	; 0x02
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	0e 94 10 20 	call	0x4020	; 0x4020 <__gesf2>
    151a:	18 16       	cp	r1, r24
    151c:	8c f5       	brge	.+98     	; 0x1580 <_Z16readSensorsAsyncv+0x2ae>
    151e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <currSensorData>
    1522:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <currSensorData+0x1>
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	fc 01       	movw	r30, r24
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	f0 90 4a 04 	lds	r15, 0x044A	; 0x80044a <nocurrReadings>
    1534:	f8 9e       	mul	r15, r24
    1536:	b0 01       	movw	r22, r0
    1538:	f9 9e       	mul	r15, r25
    153a:	70 0d       	add	r23, r0
    153c:	11 24       	eor	r1, r1
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	f3 94       	inc	r15
    1544:	f0 92 4a 04 	sts	0x044A, r15	; 0x80044a <nocurrReadings>
    1548:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	3a 81       	ldd	r19, Y+2	; 0x02
    1550:	4b 81       	ldd	r20, Y+3	; 0x03
    1552:	5c 81       	ldd	r21, Y+4	; 0x04
    1554:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__addsf3>
    1558:	4b 01       	movw	r8, r22
    155a:	5c 01       	movw	r10, r24
    155c:	6f 2d       	mov	r22, r15
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	c5 01       	movw	r24, r10
    156e:	b4 01       	movw	r22, r8
    1570:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__divsf3>
    1574:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fixunssfsi>
    1578:	ed 81       	ldd	r30, Y+5	; 0x05
    157a:	fe 81       	ldd	r31, Y+6	; 0x06
    157c:	73 83       	std	Z+3, r23	; 0x03
    157e:	62 83       	std	Z+2, r22	; 0x02
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	c3 01       	movw	r24, r6
    1588:	b2 01       	movw	r22, r4
    158a:	0e 94 10 20 	call	0x4020	; 0x4020 <__gesf2>
    158e:	18 16       	cp	r1, r24
    1590:	7c f5       	brge	.+94     	; 0x15f0 <_Z16readSensorsAsyncv+0x31e>
    1592:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <currSensorData>
    1596:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <currSensorData+0x1>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	fc 01       	movw	r30, r24
    15a0:	86 81       	ldd	r24, Z+6	; 0x06
    15a2:	97 81       	ldd	r25, Z+7	; 0x07
    15a4:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <noTempReadings>
    15a8:	f8 9e       	mul	r15, r24
    15aa:	b0 01       	movw	r22, r0
    15ac:	f9 9e       	mul	r15, r25
    15ae:	70 0d       	add	r23, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	f3 94       	inc	r15
    15b8:	f0 92 49 04 	sts	0x0449, r15	; 0x800449 <noTempReadings>
    15bc:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    15c0:	a3 01       	movw	r20, r6
    15c2:	92 01       	movw	r18, r4
    15c4:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__addsf3>
    15c8:	4b 01       	movw	r8, r22
    15ca:	5c 01       	movw	r10, r24
    15cc:	6f 2d       	mov	r22, r15
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	c5 01       	movw	r24, r10
    15de:	b4 01       	movw	r22, r8
    15e0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__divsf3>
    15e4:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fixunssfsi>
    15e8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ea:	fa 81       	ldd	r31, Y+2	; 0x02
    15ec:	77 83       	std	Z+7, r23	; 0x07
    15ee:	66 83       	std	Z+6, r22	; 0x06
    15f0:	2c 96       	adiw	r28, 0x0c	; 12
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	7f 90       	pop	r7
    1614:	6f 90       	pop	r6
    1616:	5f 90       	pop	r5
    1618:	4f 90       	pop	r4
    161a:	08 95       	ret

0000161c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>:
    161c:	4f 92       	push	r4
    161e:	5f 92       	push	r5
    1620:	6f 92       	push	r6
    1622:	7f 92       	push	r7
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	2d 97       	sbiw	r28, 0x0d	; 13
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	2c 01       	movw	r4, r24
    164c:	3b 01       	movw	r6, r22
    164e:	ca 01       	movw	r24, r20
    1650:	b9 01       	movw	r22, r18
    1652:	ea 86       	std	Y+10, r14	; 0x0a
    1654:	fb 86       	std	Y+11, r15	; 0x0b
    1656:	0c 87       	std	Y+12, r16	; 0x0c
    1658:	1d 87       	std	Y+13, r17	; 0x0d
    165a:	ef 8c       	ldd	r14, Y+31	; 0x1f
    165c:	f8 a0       	ldd	r15, Y+32	; 0x20
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	c7 01       	movw	r24, r14
    1664:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	09 81       	ldd	r16, Y+1	; 0x01
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	f7 01       	movw	r30, r14
    1670:	e0 0f       	add	r30, r16
    1672:	f1 1f       	adc	r31, r17
    1674:	0f 5f       	subi	r16, 0xFF	; 255
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	0e 0d       	add	r16, r14
    167a:	1f 1d       	adc	r17, r15
    167c:	0f 2e       	mov	r0, r31
    167e:	fd e2       	ldi	r31, 0x2D	; 45
    1680:	df 2e       	mov	r13, r31
    1682:	f0 2d       	mov	r31, r0
    1684:	d0 82       	st	Z, r13
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	6a 85       	ldd	r22, Y+10	; 0x0a
    168a:	7b 85       	ldd	r23, Y+11	; 0x0b
    168c:	c8 01       	movw	r24, r16
    168e:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	f8 01       	movw	r30, r16
    169a:	e8 0f       	add	r30, r24
    169c:	f9 1f       	adc	r31, r25
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	08 0f       	add	r16, r24
    16a2:	19 1f       	adc	r17, r25
    16a4:	d0 82       	st	Z, r13
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	6c 2d       	mov	r22, r12
    16aa:	c8 01       	movw	r24, r16
    16ac:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	f8 01       	movw	r30, r16
    16b8:	e8 0f       	add	r30, r24
    16ba:	f9 1f       	adc	r31, r25
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	08 0f       	add	r16, r24
    16c0:	19 1f       	adc	r17, r25
    16c2:	d0 82       	st	Z, r13
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	6a 2d       	mov	r22, r10
    16c8:	c8 01       	movw	r24, r16
    16ca:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	f8 01       	movw	r30, r16
    16d6:	e8 0f       	add	r30, r24
    16d8:	f9 1f       	adc	r31, r25
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	08 0f       	add	r16, r24
    16de:	19 1f       	adc	r17, r25
    16e0:	d0 82       	st	Z, r13
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	b4 01       	movw	r22, r8
    16e6:	c8 01       	movw	r24, r16
    16e8:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	08 0f       	add	r16, r24
    16f2:	11 1d       	adc	r17, r1
    16f4:	61 14       	cp	r6, r1
    16f6:	71 04       	cpc	r7, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xe0>
    16fa:	51 c0       	rjmp	.+162    	; 0x179e <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
    16fc:	8d e2       	ldi	r24, 0x2D	; 45
    16fe:	f8 01       	movw	r30, r16
    1700:	80 83       	st	Z, r24
    1702:	0f 5f       	subi	r16, 0xFF	; 255
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	c1 2c       	mov	r12, r1
    1708:	d1 2c       	mov	r13, r1
    170a:	c6 14       	cp	r12, r6
    170c:	d7 04       	cpc	r13, r7
    170e:	08 f0       	brcs	.+2      	; 0x1712 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xf6>
    1710:	46 c0       	rjmp	.+140    	; 0x179e <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
    1712:	f6 01       	movw	r30, r12
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	e4 0d       	add	r30, r4
    1722:	f5 1d       	adc	r31, r5
    1724:	88 e0       	ldi	r24, 0x08	; 8
    1726:	de 01       	movw	r26, r28
    1728:	12 96       	adiw	r26, 0x02	; 2
    172a:	01 90       	ld	r0, Z+
    172c:	0d 92       	st	X+, r0
    172e:	8a 95       	dec	r24
    1730:	e1 f7       	brne	.-8      	; 0x172a <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x10e>
    1732:	6a 81       	ldd	r22, Y+2	; 0x02
    1734:	7b 81       	ldd	r23, Y+3	; 0x03
    1736:	44 e0       	ldi	r20, 0x04	; 4
    1738:	c8 01       	movw	r24, r16
    173a:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	08 0f       	add	r16, r24
    1744:	11 1d       	adc	r17, r1
    1746:	6c 81       	ldd	r22, Y+4	; 0x04
    1748:	7d 81       	ldd	r23, Y+5	; 0x05
    174a:	44 e0       	ldi	r20, 0x04	; 4
    174c:	c8 01       	movw	r24, r16
    174e:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	08 0f       	add	r16, r24
    1758:	11 1d       	adc	r17, r1
    175a:	6e 81       	ldd	r22, Y+6	; 0x06
    175c:	7f 81       	ldd	r23, Y+7	; 0x07
    175e:	44 e0       	ldi	r20, 0x04	; 4
    1760:	c8 01       	movw	r24, r16
    1762:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	08 0f       	add	r16, r24
    176c:	11 1d       	adc	r17, r1
    176e:	68 85       	ldd	r22, Y+8	; 0x08
    1770:	79 85       	ldd	r23, Y+9	; 0x09
    1772:	44 e0       	ldi	r20, 0x04	; 4
    1774:	c8 01       	movw	r24, r16
    1776:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	08 0f       	add	r16, r24
    1780:	11 1d       	adc	r17, r1
    1782:	c3 01       	movw	r24, r6
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	c8 16       	cp	r12, r24
    1788:	d9 06       	cpc	r13, r25
    178a:	28 f4       	brcc	.+10     	; 0x1796 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x17a>
    178c:	8c e2       	ldi	r24, 0x2C	; 44
    178e:	f8 01       	movw	r30, r16
    1790:	80 83       	st	Z, r24
    1792:	0f 5f       	subi	r16, 0xFF	; 255
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	ff ef       	ldi	r31, 0xFF	; 255
    1798:	cf 1a       	sub	r12, r31
    179a:	df 0a       	sbc	r13, r31
    179c:	b6 cf       	rjmp	.-148    	; 0x170a <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xee>
    179e:	f8 01       	movw	r30, r16
    17a0:	10 82       	st	Z, r1
    17a2:	c8 01       	movw	r24, r16
    17a4:	8e 19       	sub	r24, r14
    17a6:	9f 09       	sbc	r25, r15
    17a8:	2d 96       	adiw	r28, 0x0d	; 13
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	7f 90       	pop	r7
    17cc:	6f 90       	pop	r6
    17ce:	5f 90       	pop	r5
    17d0:	4f 90       	pop	r4
    17d2:	08 95       	ret

000017d4 <_Z20execTransmitReadingsR14DailyCycleData>:
    17d4:	4f 92       	push	r4
    17d6:	5f 92       	push	r5
    17d8:	6f 92       	push	r6
    17da:	7f 92       	push	r7
    17dc:	8f 92       	push	r8
    17de:	9f 92       	push	r9
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	c0 58       	subi	r28, 0x80	; 128
    17fa:	d1 09       	sbc	r29, r1
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	3c 01       	movw	r6, r24
    1808:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_currCycleNumber>
    180c:	90 91 4f 04 	lds	r25, 0x044F	; 0x80044f <_currCycleNumber+0x1>
    1810:	a0 91 50 04 	lds	r26, 0x0450	; 0x800450 <_currCycleNumber+0x2>
    1814:	b0 91 51 04 	lds	r27, 0x0451	; 0x800451 <_currCycleNumber+0x3>
    1818:	f3 01       	movw	r30, r6
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
    1822:	19 8a       	std	Y+17, r1	; 0x11
    1824:	1a 8a       	std	Y+18, r1	; 0x12
    1826:	1b 8a       	std	Y+19, r1	; 0x13
    1828:	1c 8a       	std	Y+20, r1	; 0x14
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fe 01       	movw	r30, r28
    1830:	31 96       	adiw	r30, 0x01	; 1
    1832:	8f 3f       	cpi	r24, 0xFF	; 255
    1834:	2f ef       	ldi	r18, 0xFF	; 255
    1836:	92 07       	cpc	r25, r18
    1838:	59 f0       	breq	.+22     	; 0x1850 <_Z20execTransmitReadingsR14DailyCycleData+0x7c>
    183a:	11 82       	std	Z+1, r1	; 0x01
    183c:	10 82       	st	Z, r1
    183e:	13 82       	std	Z+3, r1	; 0x03
    1840:	12 82       	std	Z+2, r1	; 0x02
    1842:	15 82       	std	Z+5, r1	; 0x05
    1844:	14 82       	std	Z+4, r1	; 0x04
    1846:	17 82       	std	Z+7, r1	; 0x07
    1848:	16 82       	std	Z+6, r1	; 0x06
    184a:	38 96       	adiw	r30, 0x08	; 8
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 cf       	rjmp	.-30     	; 0x1832 <_Z20execTransmitReadingsR14DailyCycleData+0x5e>
    1850:	9e 01       	movw	r18, r28
    1852:	2f 5e       	subi	r18, 0xEF	; 239
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	42 e0       	ldi	r20, 0x02	; 2
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	83 ea       	ldi	r24, 0xA3	; 163
    1862:	95 e0       	ldi	r25, 0x05	; 5
    1864:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    1868:	d6 2e       	mov	r13, r22
    186a:	b7 2e       	mov	r11, r23
    186c:	d3 01       	movw	r26, r6
    186e:	16 96       	adiw	r26, 0x06	; 6
    1870:	6c 93       	st	X, r22
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	83 ea       	ldi	r24, 0xA3	; 163
    1878:	95 e0       	ldi	r25, 0x05	; 5
    187a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    187e:	c3 58       	subi	r28, 0x83	; 131
    1880:	df 4f       	sbci	r29, 0xFF	; 255
    1882:	68 83       	st	Y, r22
    1884:	79 83       	std	Y+1, r23	; 0x01
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	cd 57       	subi	r28, 0x7D	; 125
    188c:	d0 40       	sbci	r29, 0x00	; 0
    188e:	82 e8       	ldi	r24, 0x82	; 130
    1890:	94 e0       	ldi	r25, 0x04	; 4
    1892:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN10GsmManager7getRSSIEv>
    1896:	f3 01       	movw	r30, r6
    1898:	86 87       	std	Z+14, r24	; 0x0e
    189a:	82 e8       	ldi	r24, 0x82	; 130
    189c:	94 e0       	ldi	r25, 0x04	; 4
    189e:	0e 94 40 04 	call	0x880	; 0x880 <_ZN10GsmManager16getNetworkStatusEv>
    18a2:	d3 01       	movw	r26, r6
    18a4:	1d 96       	adiw	r26, 0x0d	; 13
    18a6:	8c 93       	st	X, r24
    18a8:	1e 8a       	std	Y+22, r1	; 0x16
    18aa:	1d 8a       	std	Y+21, r1	; 0x15
    18ac:	be 01       	movw	r22, r28
    18ae:	6b 5e       	subi	r22, 0xEB	; 235
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	82 e8       	ldi	r24, 0x82	; 130
    18b4:	94 e0       	ldi	r25, 0x04	; 4
    18b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN10GsmManager14getBattPercentEPj>
    18ba:	81 11       	cpse	r24, r1
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <_Z20execTransmitReadingsR14DailyCycleData+0xf2>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	f3 01       	movw	r30, r6
    18c2:	85 83       	std	Z+5, r24	; 0x05
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <_Z20execTransmitReadingsR14DailyCycleData+0xfa>
    18c6:	8d 89       	ldd	r24, Y+21	; 0x15
    18c8:	d3 01       	movw	r26, r6
    18ca:	1c 96       	adiw	r26, 0x0c	; 12
    18cc:	8c 93       	st	X, r24
    18ce:	1a 8e       	std	Y+26, r1	; 0x1a
    18d0:	19 8e       	std	Y+25, r1	; 0x19
    18d2:	fe 01       	movw	r30, r28
    18d4:	7b 96       	adiw	r30, 0x1b	; 27
    18d6:	82 e6       	ldi	r24, 0x62	; 98
    18d8:	df 01       	movw	r26, r30
    18da:	1d 92       	st	X+, r1
    18dc:	8a 95       	dec	r24
    18de:	e9 f7       	brne	.-6      	; 0x18da <_Z20execTransmitReadingsR14DailyCycleData+0x106>
    18e0:	f3 01       	movw	r30, r6
    18e2:	e0 80       	ld	r14, Z
    18e4:	f1 80       	ldd	r15, Z+1	; 0x01
    18e6:	02 81       	ldd	r16, Z+2	; 0x02
    18e8:	13 81       	ldd	r17, Z+3	; 0x03
    18ea:	8d 88       	ldd	r8, Y+21	; 0x15
    18ec:	9e 88       	ldd	r9, Y+22	; 0x16
    18ee:	1f 92       	push	r1
    18f0:	84 e6       	ldi	r24, 0x64	; 100
    18f2:	8f 93       	push	r24
    18f4:	2e 01       	movw	r4, r28
    18f6:	f9 e1       	ldi	r31, 0x19	; 25
    18f8:	4f 0e       	add	r4, r31
    18fa:	51 1c       	adc	r5, r1
    18fc:	5f 92       	push	r5
    18fe:	4f 92       	push	r4
    1900:	d3 01       	movw	r26, r6
    1902:	1e 96       	adiw	r26, 0x0e	; 14
    1904:	ac 90       	ld	r10, X
    1906:	1e 97       	sbiw	r26, 0x0e	; 14
    1908:	1d 96       	adiw	r26, 0x0d	; 13
    190a:	cc 90       	ld	r12, X
    190c:	c3 58       	subi	r28, 0x83	; 131
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	28 81       	ld	r18, Y
    1912:	39 81       	ldd	r19, Y+1	; 0x01
    1914:	4a 81       	ldd	r20, Y+2	; 0x02
    1916:	5b 81       	ldd	r21, Y+3	; 0x03
    1918:	cd 57       	subi	r28, 0x7D	; 125
    191a:	d0 40       	sbci	r29, 0x00	; 0
    191c:	6d 2d       	mov	r22, r13
    191e:	7b 2d       	mov	r23, r11
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 0e 0b 	call	0x161c	; 0x161c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>
    1928:	f3 01       	movw	r30, r6
    192a:	90 87       	std	Z+8, r25	; 0x08
    192c:	87 83       	std	Z+7, r24	; 0x07
    192e:	f2 01       	movw	r30, r4
    1930:	01 90       	ld	r0, Z+
    1932:	00 20       	and	r0, r0
    1934:	e9 f7       	brne	.-6      	; 0x1930 <_Z20execTransmitReadingsR14DailyCycleData+0x15c>
    1936:	31 97       	sbiw	r30, 0x01	; 1
    1938:	e4 19       	sub	r30, r4
    193a:	f5 09       	sbc	r31, r5
    193c:	f8 8f       	std	Y+24, r31	; 0x18
    193e:	ef 8b       	std	Y+23, r30	; 0x17
    1940:	c2 01       	movw	r24, r4
    1942:	0e 94 ce 08 	call	0x119c	; 0x119c <_Z11sendViaGprsPc>
    1946:	d3 01       	movw	r26, r6
    1948:	1a 96       	adiw	r26, 0x0a	; 10
    194a:	9c 93       	st	X, r25
    194c:	8e 93       	st	-X, r24
    194e:	19 97       	sbiw	r26, 0x09	; 9
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	89 2b       	or	r24, r25
    195a:	09 f4       	brne	.+2      	; 0x195e <_Z20execTransmitReadingsR14DailyCycleData+0x18a>
    195c:	47 c0       	rjmp	.+142    	; 0x19ec <_Z20execTransmitReadingsR14DailyCycleData+0x218>
    195e:	6e ec       	ldi	r22, 0xCE	; 206
    1960:	72 e0       	ldi	r23, 0x02	; 2
    1962:	83 e6       	ldi	r24, 0x63	; 99
    1964:	96 e0       	ldi	r25, 0x06	; 6
    1966:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    196a:	60 ee       	ldi	r22, 0xE0	; 224
    196c:	72 e0       	ldi	r23, 0x02	; 2
    196e:	83 e6       	ldi	r24, 0x63	; 99
    1970:	96 e0       	ldi	r25, 0x06	; 6
    1972:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    1976:	f3 01       	movw	r30, r6
    1978:	61 85       	ldd	r22, Z+9	; 0x09
    197a:	72 85       	ldd	r23, Z+10	; 0x0a
    197c:	4a e0       	ldi	r20, 0x0A	; 10
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	83 e6       	ldi	r24, 0x63	; 99
    1982:	96 e0       	ldi	r25, 0x06	; 6
    1984:	0e 94 8b 23 	call	0x4716	; 0x4716 <_ZN5Print7printlnEji>
    1988:	84 e6       	ldi	r24, 0x64	; 100
    198a:	d2 01       	movw	r26, r4
    198c:	1d 92       	st	X+, r1
    198e:	8a 95       	dec	r24
    1990:	e9 f7       	brne	.-6      	; 0x198c <_Z20execTransmitReadingsR14DailyCycleData+0x1b8>
    1992:	69 eb       	ldi	r22, 0xB9	; 185
    1994:	72 e0       	ldi	r23, 0x02	; 2
    1996:	83 e6       	ldi	r24, 0x63	; 99
    1998:	96 e0       	ldi	r25, 0x06	; 6
    199a:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    199e:	60 ee       	ldi	r22, 0xE0	; 224
    19a0:	72 e0       	ldi	r23, 0x02	; 2
    19a2:	83 e6       	ldi	r24, 0x63	; 99
    19a4:	96 e0       	ldi	r25, 0x06	; 6
    19a6:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    19aa:	b2 01       	movw	r22, r4
    19ac:	83 e6       	ldi	r24, 0x63	; 99
    19ae:	96 e0       	ldi	r25, 0x06	; 6
    19b0:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    19b4:	c2 01       	movw	r24, r4
    19b6:	0e 94 c8 08 	call	0x1190	; 0x1190 <_Z10sendViaSmsPc>
    19ba:	f3 01       	movw	r30, r6
    19bc:	83 87       	std	Z+11, r24	; 0x0b
    19be:	88 23       	and	r24, r24
    19c0:	a9 f0       	breq	.+42     	; 0x19ec <_Z20execTransmitReadingsR14DailyCycleData+0x218>
    19c2:	66 ea       	ldi	r22, 0xA6	; 166
    19c4:	72 e0       	ldi	r23, 0x02	; 2
    19c6:	83 e6       	ldi	r24, 0x63	; 99
    19c8:	96 e0       	ldi	r25, 0x06	; 6
    19ca:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    19ce:	60 ee       	ldi	r22, 0xE0	; 224
    19d0:	72 e0       	ldi	r23, 0x02	; 2
    19d2:	83 e6       	ldi	r24, 0x63	; 99
    19d4:	96 e0       	ldi	r25, 0x06	; 6
    19d6:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    19da:	d3 01       	movw	r26, r6
    19dc:	1b 96       	adiw	r26, 0x0b	; 11
    19de:	6c 91       	ld	r22, X
    19e0:	4a e0       	ldi	r20, 0x0A	; 10
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	83 e6       	ldi	r24, 0x63	; 99
    19e6:	96 e0       	ldi	r25, 0x06	; 6
    19e8:	0e 94 73 23 	call	0x46e6	; 0x46e6 <_ZN5Print7printlnEhi>
    19ec:	f3 01       	movw	r30, r6
    19ee:	86 81       	ldd	r24, Z+6	; 0x06
    19f0:	88 23       	and	r24, r24
    19f2:	79 f0       	breq	.+30     	; 0x1a12 <_Z20execTransmitReadingsR14DailyCycleData+0x23e>
    19f4:	81 85       	ldd	r24, Z+9	; 0x09
    19f6:	92 85       	ldd	r25, Z+10	; 0x0a
    19f8:	89 2b       	or	r24, r25
    19fa:	19 f0       	breq	.+6      	; 0x1a02 <_Z20execTransmitReadingsR14DailyCycleData+0x22e>
    19fc:	83 85       	ldd	r24, Z+11	; 0x0b
    19fe:	81 11       	cpse	r24, r1
    1a00:	08 c0       	rjmp	.+16     	; 0x1a12 <_Z20execTransmitReadingsR14DailyCycleData+0x23e>
    1a02:	49 89       	ldd	r20, Y+17	; 0x11
    1a04:	5a 89       	ldd	r21, Y+18	; 0x12
    1a06:	6b 89       	ldd	r22, Y+19	; 0x13
    1a08:	7c 89       	ldd	r23, Y+20	; 0x14
    1a0a:	83 ea       	ldi	r24, 0xA3	; 163
    1a0c:	95 e0       	ldi	r25, 0x05	; 5
    1a0e:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN12RmMemManager12markDataSentEm>
    1a12:	c0 58       	subi	r28, 0x80	; 128
    1a14:	df 4f       	sbci	r29, 0xFF	; 255
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	ff 90       	pop	r15
    1a2a:	ef 90       	pop	r14
    1a2c:	df 90       	pop	r13
    1a2e:	cf 90       	pop	r12
    1a30:	bf 90       	pop	r11
    1a32:	af 90       	pop	r10
    1a34:	9f 90       	pop	r9
    1a36:	8f 90       	pop	r8
    1a38:	7f 90       	pop	r7
    1a3a:	6f 90       	pop	r6
    1a3c:	5f 90       	pop	r5
    1a3e:	4f 90       	pop	r4
    1a40:	08 95       	ret

00001a42 <_Z18ensureBatteryLevelv>:
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <_Z18ensureBatteryLevelv+0x8>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	be 01       	movw	r22, r28
    1a50:	6f 5f       	subi	r22, 0xFF	; 255
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	82 e8       	ldi	r24, 0x82	; 130
    1a56:	94 e0       	ldi	r25, 0x04	; 4
    1a58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN10GsmManager14getBattPercentEPj>
    1a5c:	18 2f       	mov	r17, r24
    1a5e:	81 11       	cpse	r24, r1
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <_Z18ensureBatteryLevelv+0x2e>
    1a62:	64 e3       	ldi	r22, 0x34	; 52
    1a64:	72 e0       	ldi	r23, 0x02	; 2
    1a66:	83 e6       	ldi	r24, 0x63	; 99
    1a68:	96 e0       	ldi	r25, 0x06	; 6
    1a6a:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a6e:	1b c0       	rjmp	.+54     	; 0x1aa6 <_Z18ensureBatteryLevelv+0x64>
    1a70:	6d e1       	ldi	r22, 0x1D	; 29
    1a72:	72 e0       	ldi	r23, 0x02	; 2
    1a74:	83 e6       	ldi	r24, 0x63	; 99
    1a76:	96 e0       	ldi	r25, 0x06	; 6
    1a78:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    1a7c:	60 ee       	ldi	r22, 0xE0	; 224
    1a7e:	72 e0       	ldi	r23, 0x02	; 2
    1a80:	83 e6       	ldi	r24, 0x63	; 99
    1a82:	96 e0       	ldi	r25, 0x06	; 6
    1a84:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    1a88:	69 81       	ldd	r22, Y+1	; 0x01
    1a8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a8c:	4a e0       	ldi	r20, 0x0A	; 10
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	83 e6       	ldi	r24, 0x63	; 99
    1a92:	96 e0       	ldi	r25, 0x06	; 6
    1a94:	0e 94 8b 23 	call	0x4716	; 0x4716 <_ZN5Print7printlnEji>
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	11 e0       	ldi	r17, 0x01	; 1
    1a9e:	81 35       	cpi	r24, 0x51	; 81
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <_Z18ensureBatteryLevelv+0x64>
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
    1aa6:	81 2f       	mov	r24, r17
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	08 95       	ret

00001ab4 <_Z9loopCyclev>:
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	61 97       	sbiw	r28, 0x11	; 17
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <timer+0x16>
    1ace:	81 11       	cpse	r24, r1
    1ad0:	0a c0       	rjmp	.+20     	; 0x1ae6 <_Z9loopCyclev+0x32>
    1ad2:	6f e1       	ldi	r22, 0x1F	; 31
    1ad4:	73 e0       	ldi	r23, 0x03	; 3
    1ad6:	83 e6       	ldi	r24, 0x63	; 99
    1ad8:	96 e0       	ldi	r25, 0x06	; 6
    1ada:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ade:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z16readSensorsAsyncv>
    1ae2:	11 e0       	ldi	r17, 0x01	; 1
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <_Z9loopCyclev+0x34>
    1ae6:	10 e0       	ldi	r17, 0x00	; 0
    1ae8:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer+0xc>
    1aec:	88 23       	and	r24, r24
    1aee:	41 f0       	breq	.+16     	; 0x1b00 <_Z9loopCyclev+0x4c>
    1af0:	65 e0       	ldi	r22, 0x05	; 5
    1af2:	73 e0       	ldi	r23, 0x03	; 3
    1af4:	83 e6       	ldi	r24, 0x63	; 99
    1af6:	96 e0       	ldi	r25, 0x06	; 6
    1af8:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1afc:	0e 94 07 09 	call	0x120e	; 0x120e <_Z17persistSensorDatav>
    1b00:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_isDailyCycle>
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <_Z9loopCyclev+0x56>
    1b08:	46 c0       	rjmp	.+140    	; 0x1b96 <_Z9loopCyclev+0xe2>
    1b0a:	63 ef       	ldi	r22, 0xF3	; 243
    1b0c:	72 e0       	ldi	r23, 0x02	; 2
    1b0e:	83 e6       	ldi	r24, 0x63	; 99
    1b10:	96 e0       	ldi	r25, 0x06	; 6
    1b12:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b16:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_isAtCycleStart>
    1b1a:	88 23       	and	r24, r24
    1b1c:	d1 f0       	breq	.+52     	; 0x1b52 <_Z9loopCyclev+0x9e>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	31 96       	adiw	r30, 0x01	; 1
    1b22:	81 e1       	ldi	r24, 0x11	; 17
    1b24:	df 01       	movw	r26, r30
    1b26:	1d 92       	st	X+, r1
    1b28:	8a 95       	dec	r24
    1b2a:	e9 f7       	brne	.-6      	; 0x1b26 <_Z9loopCyclev+0x72>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e4       	ldi	r25, 0x40	; 64
    1b30:	99 8b       	std	Y+17, r25	; 0x11
    1b32:	88 8b       	std	Y+16, r24	; 0x10
    1b34:	81 e1       	ldi	r24, 0x11	; 17
    1b36:	a2 e0       	ldi	r26, 0x02	; 2
    1b38:	b1 e0       	ldi	r27, 0x01	; 1
    1b3a:	01 90       	ld	r0, Z+
    1b3c:	0d 92       	st	X+, r0
    1b3e:	8a 95       	dec	r24
    1b40:	e1 f7       	brne	.-8      	; 0x1b3a <_Z9loopCyclev+0x86>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z10toggleGPRSb>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <_Z9loopCyclev+0x9e>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_dailyCycleData+0x4>
    1b52:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <timer+0xd>
    1b56:	88 23       	and	r24, r24
    1b58:	21 f0       	breq	.+8      	; 0x1b62 <_Z9loopCyclev+0xae>
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_Z20execTransmitReadingsR14DailyCycleData>
    1b62:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <timer+0xe>
    1b66:	88 23       	and	r24, r24
    1b68:	89 f0       	breq	.+34     	; 0x1b8c <_Z9loopCyclev+0xd8>
    1b6a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_currSystemState>
    1b6e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_currSystemState+0x1>
    1b72:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_dailyCycleData+0x10>
    1b76:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_dailyCycleData+0xf>
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	71 e0       	ldi	r23, 0x01	; 1
    1b7e:	83 ea       	ldi	r24, 0xA3	; 163
    1b80:	95 e0       	ldi	r25, 0x05	; 5
    1b82:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 c2 08 	call	0x1184	; 0x1184 <_Z10toggleGPRSb>
    1b8c:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <timer+0x13>
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	89 27       	eor	r24, r25
    1b94:	18 2b       	or	r17, r24
    1b96:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_isAtCycleStart>
    1b9a:	88 23       	and	r24, r24
    1b9c:	d1 f0       	breq	.+52     	; 0x1bd2 <_Z9loopCyclev+0x11e>
    1b9e:	68 ee       	ldi	r22, 0xE8	; 232
    1ba0:	72 e0       	ldi	r23, 0x02	; 2
    1ba2:	83 e6       	ldi	r24, 0x63	; 99
    1ba4:	96 e0       	ldi	r25, 0x06	; 6
    1ba6:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    1baa:	60 ee       	ldi	r22, 0xE0	; 224
    1bac:	72 e0       	ldi	r23, 0x02	; 2
    1bae:	83 e6       	ldi	r24, 0x63	; 99
    1bb0:	96 e0       	ldi	r25, 0x06	; 6
    1bb2:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    1bb6:	0e 94 0f 08 	call	0x101e	; 0x101e <_Z15get_free_memoryv>
    1bba:	4a e0       	ldi	r20, 0x0A	; 10
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	83 e6       	ldi	r24, 0x63	; 99
    1bc2:	96 e0       	ldi	r25, 0x06	; 6
    1bc4:	0e 94 fe 23 	call	0x47fc	; 0x47fc <_ZN5Print7printlnEii>
    1bc8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_Z18ensureBatteryLevelv>
    1bcc:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_chargingInProgress>
    1bd0:	18 2b       	or	r17, r24
    1bd2:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <_chargingInProgress>
    1bd6:	88 23       	and	r24, r24
    1bd8:	c1 f0       	breq	.+48     	; 0x1c0a <_Z9loopCyclev+0x156>
    1bda:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <timer+0x11>
    1bde:	88 23       	and	r24, r24
    1be0:	99 f0       	breq	.+38     	; 0x1c08 <_Z9loopCyclev+0x154>
    1be2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_Z18ensureBatteryLevelv>
    1be6:	88 23       	and	r24, r24
    1be8:	31 f0       	breq	.+12     	; 0x1bf6 <_Z9loopCyclev+0x142>
    1bea:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <timer+0x17>
    1bee:	88 23       	and	r24, r24
    1bf0:	21 f0       	breq	.+8      	; 0x1bfa <_Z9loopCyclev+0x146>
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <_Z9loopCyclev+0x148>
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <_Z9loopCyclev+0x148>
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 27       	eor	r24, r25
    1c00:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_chargingInProgress>
    1c04:	18 2b       	or	r17, r24
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <_Z9loopCyclev+0x156>
    1c08:	11 e0       	ldi	r17, 0x01	; 1
    1c0a:	81 2f       	mov	r24, r17
    1c0c:	61 96       	adiw	r28, 0x11	; 17
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	08 95       	ret

00001c20 <_Z10assertTrueb>:
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <_Z10assertTrueb+0x6>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	08 c0       	rjmp	.+16     	; 0x1c3e <_Z10assertTrueb+0x1e>
    1c2e:	8a e0       	ldi	r24, 0x0A	; 10
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodhi4>
    1c3a:	7a 83       	std	Y+2, r23	; 0x02
    1c3c:	69 83       	std	Y+1, r22	; 0x01
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <_Z6assertmmPc>:
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <_Z6assertmmPc+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <_Z6assertmmPc+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	69 83       	std	Y+1, r22	; 0x01
    1c56:	7a 83       	std	Y+2, r23	; 0x02
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	e1 e0       	ldi	r30, 0x01	; 1
    1c5e:	62 17       	cp	r22, r18
    1c60:	73 07       	cpc	r23, r19
    1c62:	84 07       	cpc	r24, r20
    1c64:	95 07       	cpc	r25, r21
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <_Z6assertmmPc+0x22>
    1c68:	e0 e0       	ldi	r30, 0x00	; 0
    1c6a:	8e 2f       	mov	r24, r30
    1c6c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <_Z26assertCharStringsIdenticalPKcS0_i>:
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <_Z26assertCharStringsIdenticalPKcS0_i+0x6>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <_Z26assertCharStringsIdenticalPKcS0_i+0x8>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	0e 94 39 34 	call	0x6872	; 0x6872 <strcmp>
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	29 81       	ldd	r18, Y+1	; 0x01
    1c94:	3a 81       	ldd	r19, Y+2	; 0x02
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	23 2b       	or	r18, r19
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <_Z26assertCharStringsIdenticalPKcS0_i+0x24>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	23 2b       	or	r18, r19
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <_Z26assertCharStringsIdenticalPKcS0_i+0x34>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	08 95       	ret

00001cc4 <_Z23assertReadingsIdentical10SensorDataS_>:
//{
	//return assertStringsIdentical(expected, actual.c_str());
//}

void assertReadingsIdentical(SensorData expected, SensorData r1)
{
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	60 97       	sbiw	r28, 0x10	; 16
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	29 83       	std	Y+1, r18	; 0x01
    1cea:	3a 83       	std	Y+2, r19	; 0x02
    1cec:	4b 83       	std	Y+3, r20	; 0x03
    1cee:	5c 83       	std	Y+4, r21	; 0x04
    1cf0:	6d 83       	std	Y+5, r22	; 0x05
    1cf2:	7e 83       	std	Y+6, r23	; 0x06
    1cf4:	8f 83       	std	Y+7, r24	; 0x07
    1cf6:	98 87       	std	Y+8, r25	; 0x08
    1cf8:	a9 86       	std	Y+9, r10	; 0x09
    1cfa:	ba 86       	std	Y+10, r11	; 0x0a
    1cfc:	cb 86       	std	Y+11, r12	; 0x0b
    1cfe:	dc 86       	std	Y+12, r13	; 0x0c
    1d00:	ed 86       	std	Y+13, r14	; 0x0d
    1d02:	fe 86       	std	Y+14, r15	; 0x0e
    1d04:	0f 87       	std	Y+15, r16	; 0x0f
    1d06:	18 8b       	std	Y+16, r17	; 0x10
	assert(expected.BattVoltage, r1.BattVoltage, "batt");
    1d08:	29 85       	ldd	r18, Y+9	; 0x09
    1d0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	69 81       	ldd	r22, Y+1	; 0x01
    1d12:	7a 81       	ldd	r23, Y+2	; 0x02
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 ee       	ldi	r16, 0xE2	; 226
    1d1a:	12 e0       	ldi	r17, 0x02	; 2
    1d1c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(expected.Current, r1.Current, "current");
    1d20:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d22:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	6b 81       	ldd	r22, Y+3	; 0x03
    1d2a:	7c 81       	ldd	r23, Y+4	; 0x04
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	07 ee       	ldi	r16, 0xE7	; 231
    1d32:	12 e0       	ldi	r17, 0x02	; 2
    1d34:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(expected.PVVoltage, r1.PVVoltage, "pv");
    1d38:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	6d 81       	ldd	r22, Y+5	; 0x05
    1d42:	7e 81       	ldd	r23, Y+6	; 0x06
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	0f ee       	ldi	r16, 0xEF	; 239
    1d4a:	12 e0       	ldi	r17, 0x02	; 2
    1d4c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(expected.Temperature, r1.Temperature, "temp");
    1d50:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d52:	38 89       	ldd	r19, Y+16	; 0x10
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 ef       	ldi	r16, 0xF2	; 242
    1d62:	12 e0       	ldi	r17, 0x02	; 2
    1d64:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	//assert(expected.ErrorChar, r1.ErrorChar, "errorCode");
}
    1d68:	60 96       	adiw	r28, 0x10	; 16
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	08 95       	ret

00001d8a <_Z17createMockReadingbc>:

int _mockNo = 0;
SensorData createMockReading(bool append = true, char errorChar = 0)
{
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	60 97       	sbiw	r28, 0x10	; 16
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
	++_mockNo;
    1d9e:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <_mockNo>
    1da2:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <_mockNo+0x1>
    1da6:	2f 5f       	subi	r18, 0xFF	; 255
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <_mockNo+0x1>
    1dae:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <_mockNo>
	
	SensorData r2;
    1db2:	fe 01       	movw	r30, r28
    1db4:	39 96       	adiw	r30, 0x09	; 9
    1db6:	98 e0       	ldi	r25, 0x08	; 8
    1db8:	df 01       	movw	r26, r30
    1dba:	1d 92       	st	X+, r1
    1dbc:	9a 95       	dec	r25
    1dbe:	e9 f7       	brne	.-6      	; 0x1dba <_Z17createMockReadingbc+0x30>
	r2.BattVoltage=_mockNo*2;
    1dc0:	a9 01       	movw	r20, r18
    1dc2:	44 0f       	add	r20, r20
    1dc4:	55 1f       	adc	r21, r21
    1dc6:	5a 87       	std	Y+10, r21	; 0x0a
    1dc8:	49 87       	std	Y+9, r20	; 0x09
	r2.Current=_mockNo*30;
    1dca:	9e e1       	ldi	r25, 0x1E	; 30
    1dcc:	92 9f       	mul	r25, r18
    1dce:	a0 01       	movw	r20, r0
    1dd0:	93 9f       	mul	r25, r19
    1dd2:	50 0d       	add	r21, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	5c 87       	std	Y+12, r21	; 0x0c
    1dd8:	4b 87       	std	Y+11, r20	; 0x0b
	r2.PVVoltage=_mockNo*29;
    1dda:	9d e1       	ldi	r25, 0x1D	; 29
    1ddc:	92 9f       	mul	r25, r18
    1dde:	a0 01       	movw	r20, r0
    1de0:	93 9f       	mul	r25, r19
    1de2:	50 0d       	add	r21, r0
    1de4:	11 24       	eor	r1, r1
    1de6:	5e 87       	std	Y+14, r21	; 0x0e
    1de8:	4d 87       	std	Y+13, r20	; 0x0d
	r2.Temperature=_mockNo*37;
    1dea:	95 e2       	ldi	r25, 0x25	; 37
    1dec:	92 9f       	mul	r25, r18
    1dee:	a0 01       	movw	r20, r0
    1df0:	93 9f       	mul	r25, r19
    1df2:	50 0d       	add	r21, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	58 8b       	std	Y+16, r21	; 0x10
    1df8:	4f 87       	std	Y+15, r20	; 0x0f
	//r2.ErrorChar=errorChar;
	if (append)
    1dfa:	88 23       	and	r24, r24
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <_Z17createMockReadingbc+0x7e>
		mem.appendSensorEntry(&r2);
    1dfe:	bf 01       	movw	r22, r30
    1e00:	83 ea       	ldi	r24, 0xA3	; 163
    1e02:	95 e0       	ldi	r25, 0x05	; 5
    1e04:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	return r2;
    1e08:	88 e0       	ldi	r24, 0x08	; 8
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	39 96       	adiw	r30, 0x09	; 9
    1e0e:	de 01       	movw	r26, r28
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	01 90       	ld	r0, Z+
    1e14:	0d 92       	st	X+, r0
    1e16:	8a 95       	dec	r24
    1e18:	e1 f7       	brne	.-8      	; 0x1e12 <_Z17createMockReadingbc+0x88>
    1e1a:	29 81       	ldd	r18, Y+1	; 0x01
    1e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1e:	4b 81       	ldd	r20, Y+3	; 0x03
    1e20:	5c 81       	ldd	r21, Y+4	; 0x04
    1e22:	6d 81       	ldd	r22, Y+5	; 0x05
    1e24:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1e26:	8f 81       	ldd	r24, Y+7	; 0x07
    1e28:	98 85       	ldd	r25, Y+8	; 0x08
    1e2a:	60 96       	adiw	r28, 0x10	; 16
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <_Z11runLoadTestv>:

void runLoadTest()
{
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	cc 57       	subi	r28, 0x7C	; 124
    1e5c:	d1 09       	sbc	r29, r1
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
	//Load some fake readings
	SensorData 
		r0=createMockReading(),
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_Z17createMockReadingbc>
    1e70:	29 83       	std	Y+1, r18	; 0x01
    1e72:	3a 83       	std	Y+2, r19	; 0x02
    1e74:	4b 83       	std	Y+3, r20	; 0x03
    1e76:	5c 83       	std	Y+4, r21	; 0x04
    1e78:	6d 83       	std	Y+5, r22	; 0x05
    1e7a:	7e 83       	std	Y+6, r23	; 0x06
    1e7c:	8f 83       	std	Y+7, r24	; 0x07
    1e7e:	98 87       	std	Y+8, r25	; 0x08
		r1=createMockReading(),
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_Z17createMockReadingbc>
    1e88:	29 87       	std	Y+9, r18	; 0x09
    1e8a:	3a 87       	std	Y+10, r19	; 0x0a
    1e8c:	4b 87       	std	Y+11, r20	; 0x0b
    1e8e:	5c 87       	std	Y+12, r21	; 0x0c
    1e90:	6d 87       	std	Y+13, r22	; 0x0d
    1e92:	7e 87       	std	Y+14, r23	; 0x0e
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
    1e96:	98 8b       	std	Y+16, r25	; 0x10
		r2=createMockReading(),
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_Z17createMockReadingbc>
    1ea0:	29 8b       	std	Y+17, r18	; 0x11
    1ea2:	3a 8b       	std	Y+18, r19	; 0x12
    1ea4:	4b 8b       	std	Y+19, r20	; 0x13
    1ea6:	5c 8b       	std	Y+20, r21	; 0x14
    1ea8:	6d 8b       	std	Y+21, r22	; 0x15
    1eaa:	7e 8b       	std	Y+22, r23	; 0x16
    1eac:	8f 8b       	std	Y+23, r24	; 0x17
    1eae:	98 8f       	std	Y+24, r25	; 0x18
		r3=createMockReading(),
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_Z17createMockReadingbc>
    1eb8:	29 8f       	std	Y+25, r18	; 0x19
    1eba:	3a 8f       	std	Y+26, r19	; 0x1a
    1ebc:	4b 8f       	std	Y+27, r20	; 0x1b
    1ebe:	5c 8f       	std	Y+28, r21	; 0x1c
    1ec0:	6d 8f       	std	Y+29, r22	; 0x1d
    1ec2:	7e 8f       	std	Y+30, r23	; 0x1e
    1ec4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec6:	98 a3       	std	Y+32, r25	; 0x20
		r4=createMockReading();
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_Z17createMockReadingbc>
    1ed0:	29 a3       	std	Y+33, r18	; 0x21
    1ed2:	3a a3       	std	Y+34, r19	; 0x22
    1ed4:	4b a3       	std	Y+35, r20	; 0x23
    1ed6:	5c a3       	std	Y+36, r21	; 0x24
    1ed8:	6d a3       	std	Y+37, r22	; 0x25
    1eda:	7e a3       	std	Y+38, r23	; 0x26
    1edc:	8f a3       	std	Y+39, r24	; 0x27
    1ede:	98 a7       	std	Y+40, r25	; 0x28
		
	SensorData buffer[10];
    1ee0:	0f 2e       	mov	r0, r31
    1ee2:	f0 e5       	ldi	r31, 0x50	; 80
    1ee4:	7f 2e       	mov	r7, r31
    1ee6:	f0 2d       	mov	r31, r0
    1ee8:	4e 01       	movw	r8, r28
    1eea:	89 e2       	ldi	r24, 0x29	; 41
    1eec:	88 0e       	add	r8, r24
    1eee:	91 1c       	adc	r9, r1
    1ef0:	f4 01       	movw	r30, r8
    1ef2:	87 2d       	mov	r24, r7
    1ef4:	11 92       	st	Z+, r1
    1ef6:	8a 95       	dec	r24
    1ef8:	e9 f7       	brne	.-6      	; 0x1ef4 <_Z11runLoadTestv+0xb8>
	unsigned long loadedTo;
	
	assert(5, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT));
    1efa:	64 e6       	ldi	r22, 0x64	; 100
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	83 ea       	ldi	r24, 0xA3	; 163
    1f00:	95 e0       	ldi	r25, 0x05	; 5
    1f02:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	00 e0       	ldi	r16, 0x00	; 0
    1f0c:	10 e0       	ldi	r17, 0x00	; 0
    1f0e:	65 e0       	ldi	r22, 0x05	; 5
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Requested for 3, sent-to=0 => return last 3
	loadedTo=0;
    1f1a:	ed 96       	adiw	r28, 0x3d	; 61
    1f1c:	1c ae       	std	Y+60, r1	; 0x3c
    1f1e:	1d ae       	std	Y+61, r1	; 0x3d
    1f20:	1e ae       	std	Y+62, r1	; 0x3e
    1f22:	1f ae       	std	Y+63, r1	; 0x3f
    1f24:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    1f26:	f4 01       	movw	r30, r8
    1f28:	87 2d       	mov	r24, r7
    1f2a:	11 92       	st	Z+, r1
    1f2c:	8a 95       	dec	r24
    1f2e:	e9 f7       	brne	.-6      	; 0x1f2a <_Z11runLoadTestv+0xee>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	6c e0       	ldi	r22, 0x0C	; 12
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	83 ea       	ldi	r24, 0xA3	; 163
    1f3c:	95 e0       	ldi	r25, 0x05	; 5
    1f3e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.loadSensorData(buffer, 3, &loadedTo);
    1f42:	9e 01       	movw	r18, r28
    1f44:	27 58       	subi	r18, 0x87	; 135
    1f46:	3f 4f       	sbci	r19, 0xFF	; 255
    1f48:	43 e0       	ldi	r20, 0x03	; 3
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	b4 01       	movw	r22, r8
    1f4e:	83 ea       	ldi	r24, 0xA3	; 163
    1f50:	95 e0       	ldi	r25, 0x05	; 5
    1f52:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
	assert(5, loadedTo);
    1f56:	ed 96       	adiw	r28, 0x3d	; 61
    1f58:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f5a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f5c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f5e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f60:	ed 97       	sbiw	r28, 0x3d	; 61
    1f62:	65 e0       	ldi	r22, 0x05	; 5
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertReadingsIdentical(r2, buffer[0]);
    1f6e:	a9 a4       	ldd	r10, Y+41	; 0x29
    1f70:	ba a4       	ldd	r11, Y+42	; 0x2a
    1f72:	cb a4       	ldd	r12, Y+43	; 0x2b
    1f74:	dc a4       	ldd	r13, Y+44	; 0x2c
    1f76:	ed a4       	ldd	r14, Y+45	; 0x2d
    1f78:	fe a4       	ldd	r15, Y+46	; 0x2e
    1f7a:	0f a5       	ldd	r16, Y+47	; 0x2f
    1f7c:	18 a9       	ldd	r17, Y+48	; 0x30
    1f7e:	29 89       	ldd	r18, Y+17	; 0x11
    1f80:	3a 89       	ldd	r19, Y+18	; 0x12
    1f82:	4b 89       	ldd	r20, Y+19	; 0x13
    1f84:	5c 89       	ldd	r21, Y+20	; 0x14
    1f86:	6d 89       	ldd	r22, Y+21	; 0x15
    1f88:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r3, buffer[1]);
    1f92:	a9 a8       	ldd	r10, Y+49	; 0x31
    1f94:	ba a8       	ldd	r11, Y+50	; 0x32
    1f96:	cb a8       	ldd	r12, Y+51	; 0x33
    1f98:	dc a8       	ldd	r13, Y+52	; 0x34
    1f9a:	ed a8       	ldd	r14, Y+53	; 0x35
    1f9c:	fe a8       	ldd	r15, Y+54	; 0x36
    1f9e:	0f a9       	ldd	r16, Y+55	; 0x37
    1fa0:	18 ad       	ldd	r17, Y+56	; 0x38
    1fa2:	29 8d       	ldd	r18, Y+25	; 0x19
    1fa4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1fa6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1fa8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1faa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fac:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1fae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb0:	98 a1       	ldd	r25, Y+32	; 0x20
    1fb2:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[2]);
    1fb6:	a9 ac       	ldd	r10, Y+57	; 0x39
    1fb8:	ba ac       	ldd	r11, Y+58	; 0x3a
    1fba:	cb ac       	ldd	r12, Y+59	; 0x3b
    1fbc:	dc ac       	ldd	r13, Y+60	; 0x3c
    1fbe:	ed ac       	ldd	r14, Y+61	; 0x3d
    1fc0:	fe ac       	ldd	r15, Y+62	; 0x3e
    1fc2:	0f ad       	ldd	r16, Y+63	; 0x3f
    1fc4:	21 96       	adiw	r28, 0x01	; 1
    1fc6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fc8:	21 97       	sbiw	r28, 0x01	; 1
    1fca:	29 a1       	ldd	r18, Y+33	; 0x21
    1fcc:	3a a1       	ldd	r19, Y+34	; 0x22
    1fce:	4b a1       	ldd	r20, Y+35	; 0x23
    1fd0:	5c a1       	ldd	r21, Y+36	; 0x24
    1fd2:	6d a1       	ldd	r22, Y+37	; 0x25
    1fd4:	7e a1       	ldd	r23, Y+38	; 0x26
    1fd6:	8f a1       	ldd	r24, Y+39	; 0x27
    1fd8:	98 a5       	ldd	r25, Y+40	; 0x28
    1fda:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[3].BattVoltage); //Sanity check - no others populated
    1fde:	23 96       	adiw	r28, 0x03	; 3
    1fe0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fe2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fe4:	23 97       	sbiw	r28, 0x03	; 3
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	00 e0       	ldi	r16, 0x00	; 0
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>

	//Requested for 3, sent-upto=3 => return last 2
	loadedTo=0;
    1ff8:	ed 96       	adiw	r28, 0x3d	; 61
    1ffa:	1c ae       	std	Y+60, r1	; 0x3c
    1ffc:	1d ae       	std	Y+61, r1	; 0x3d
    1ffe:	1e ae       	std	Y+62, r1	; 0x3e
    2000:	1f ae       	std	Y+63, r1	; 0x3f
    2002:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2004:	f4 01       	movw	r30, r8
    2006:	87 2d       	mov	r24, r7
    2008:	11 92       	st	Z+, r1
    200a:	8a 95       	dec	r24
    200c:	e9 f7       	brne	.-6      	; 0x2008 <_Z11runLoadTestv+0x1cc>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 3);
    200e:	23 e0       	ldi	r18, 0x03	; 3
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	6c e0       	ldi	r22, 0x0C	; 12
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	83 ea       	ldi	r24, 0xA3	; 163
    201c:	95 e0       	ldi	r25, 0x05	; 5
    201e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(2,mem.loadSensorData(buffer, 3, &loadedTo));
    2022:	9e 01       	movw	r18, r28
    2024:	27 58       	subi	r18, 0x87	; 135
    2026:	3f 4f       	sbci	r19, 0xFF	; 255
    2028:	43 e0       	ldi	r20, 0x03	; 3
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	b4 01       	movw	r22, r8
    202e:	83 ea       	ldi	r24, 0xA3	; 163
    2030:	95 e0       	ldi	r25, 0x05	; 5
    2032:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2036:	9b 01       	movw	r18, r22
    2038:	ac 01       	movw	r20, r24
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(5, loadedTo);
    2046:	ed 96       	adiw	r28, 0x3d	; 61
    2048:	2c ad       	ldd	r18, Y+60	; 0x3c
    204a:	3d ad       	ldd	r19, Y+61	; 0x3d
    204c:	4e ad       	ldd	r20, Y+62	; 0x3e
    204e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2050:	ed 97       	sbiw	r28, 0x3d	; 61
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertReadingsIdentical(r3, buffer[0]);
    205e:	a9 a4       	ldd	r10, Y+41	; 0x29
    2060:	ba a4       	ldd	r11, Y+42	; 0x2a
    2062:	cb a4       	ldd	r12, Y+43	; 0x2b
    2064:	dc a4       	ldd	r13, Y+44	; 0x2c
    2066:	ed a4       	ldd	r14, Y+45	; 0x2d
    2068:	fe a4       	ldd	r15, Y+46	; 0x2e
    206a:	0f a5       	ldd	r16, Y+47	; 0x2f
    206c:	18 a9       	ldd	r17, Y+48	; 0x30
    206e:	29 8d       	ldd	r18, Y+25	; 0x19
    2070:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2072:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2074:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2076:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2078:	7e 8d       	ldd	r23, Y+30	; 0x1e
    207a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    207c:	98 a1       	ldd	r25, Y+32	; 0x20
    207e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[1]);
    2082:	a9 a8       	ldd	r10, Y+49	; 0x31
    2084:	ba a8       	ldd	r11, Y+50	; 0x32
    2086:	cb a8       	ldd	r12, Y+51	; 0x33
    2088:	dc a8       	ldd	r13, Y+52	; 0x34
    208a:	ed a8       	ldd	r14, Y+53	; 0x35
    208c:	fe a8       	ldd	r15, Y+54	; 0x36
    208e:	0f a9       	ldd	r16, Y+55	; 0x37
    2090:	18 ad       	ldd	r17, Y+56	; 0x38
    2092:	29 a1       	ldd	r18, Y+33	; 0x21
    2094:	3a a1       	ldd	r19, Y+34	; 0x22
    2096:	4b a1       	ldd	r20, Y+35	; 0x23
    2098:	5c a1       	ldd	r21, Y+36	; 0x24
    209a:	6d a1       	ldd	r22, Y+37	; 0x25
    209c:	7e a1       	ldd	r23, Y+38	; 0x26
    209e:	8f a1       	ldd	r24, Y+39	; 0x27
    20a0:	98 a5       	ldd	r25, Y+40	; 0x28
    20a2:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[2].BattVoltage); //Sanity check - no others populated
    20a6:	29 ad       	ldd	r18, Y+57	; 0x39
    20a8:	3a ad       	ldd	r19, Y+58	; 0x3a
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	00 e0       	ldi	r16, 0x00	; 0
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	cb 01       	movw	r24, r22
    20b8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Requested for 8, sent-to=0 => return all 4
	loadedTo=0;
    20bc:	ed 96       	adiw	r28, 0x3d	; 61
    20be:	1c ae       	std	Y+60, r1	; 0x3c
    20c0:	1d ae       	std	Y+61, r1	; 0x3d
    20c2:	1e ae       	std	Y+62, r1	; 0x3e
    20c4:	1f ae       	std	Y+63, r1	; 0x3f
    20c6:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    20c8:	f4 01       	movw	r30, r8
    20ca:	87 2d       	mov	r24, r7
    20cc:	11 92       	st	Z+, r1
    20ce:	8a 95       	dec	r24
    20d0:	e9 f7       	brne	.-6      	; 0x20cc <_Z11runLoadTestv+0x290>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	6c e0       	ldi	r22, 0x0C	; 12
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	83 ea       	ldi	r24, 0xA3	; 163
    20de:	95 e0       	ldi	r25, 0x05	; 5
    20e0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(5,mem.loadSensorData(buffer, 8, &loadedTo));
    20e4:	9e 01       	movw	r18, r28
    20e6:	27 58       	subi	r18, 0x87	; 135
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	48 e0       	ldi	r20, 0x08	; 8
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	b4 01       	movw	r22, r8
    20f0:	83 ea       	ldi	r24, 0xA3	; 163
    20f2:	95 e0       	ldi	r25, 0x05	; 5
    20f4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	65 e0       	ldi	r22, 0x05	; 5
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(5, loadedTo);
    2108:	ed 96       	adiw	r28, 0x3d	; 61
    210a:	2c ad       	ldd	r18, Y+60	; 0x3c
    210c:	3d ad       	ldd	r19, Y+61	; 0x3d
    210e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2110:	5f ad       	ldd	r21, Y+63	; 0x3f
    2112:	ed 97       	sbiw	r28, 0x3d	; 61
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertReadingsIdentical(r0, buffer[0]);
    2120:	a9 a4       	ldd	r10, Y+41	; 0x29
    2122:	ba a4       	ldd	r11, Y+42	; 0x2a
    2124:	cb a4       	ldd	r12, Y+43	; 0x2b
    2126:	dc a4       	ldd	r13, Y+44	; 0x2c
    2128:	ed a4       	ldd	r14, Y+45	; 0x2d
    212a:	fe a4       	ldd	r15, Y+46	; 0x2e
    212c:	0f a5       	ldd	r16, Y+47	; 0x2f
    212e:	18 a9       	ldd	r17, Y+48	; 0x30
    2130:	29 81       	ldd	r18, Y+1	; 0x01
    2132:	3a 81       	ldd	r19, Y+2	; 0x02
    2134:	4b 81       	ldd	r20, Y+3	; 0x03
    2136:	5c 81       	ldd	r21, Y+4	; 0x04
    2138:	6d 81       	ldd	r22, Y+5	; 0x05
    213a:	7e 81       	ldd	r23, Y+6	; 0x06
    213c:	8f 81       	ldd	r24, Y+7	; 0x07
    213e:	98 85       	ldd	r25, Y+8	; 0x08
    2140:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r1, buffer[1]);
    2144:	a9 a8       	ldd	r10, Y+49	; 0x31
    2146:	ba a8       	ldd	r11, Y+50	; 0x32
    2148:	cb a8       	ldd	r12, Y+51	; 0x33
    214a:	dc a8       	ldd	r13, Y+52	; 0x34
    214c:	ed a8       	ldd	r14, Y+53	; 0x35
    214e:	fe a8       	ldd	r15, Y+54	; 0x36
    2150:	0f a9       	ldd	r16, Y+55	; 0x37
    2152:	18 ad       	ldd	r17, Y+56	; 0x38
    2154:	29 85       	ldd	r18, Y+9	; 0x09
    2156:	3a 85       	ldd	r19, Y+10	; 0x0a
    2158:	4b 85       	ldd	r20, Y+11	; 0x0b
    215a:	5c 85       	ldd	r21, Y+12	; 0x0c
    215c:	6d 85       	ldd	r22, Y+13	; 0x0d
    215e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2160:	8f 85       	ldd	r24, Y+15	; 0x0f
    2162:	98 89       	ldd	r25, Y+16	; 0x10
    2164:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r2, buffer[2]);
    2168:	a9 ac       	ldd	r10, Y+57	; 0x39
    216a:	ba ac       	ldd	r11, Y+58	; 0x3a
    216c:	cb ac       	ldd	r12, Y+59	; 0x3b
    216e:	dc ac       	ldd	r13, Y+60	; 0x3c
    2170:	ed ac       	ldd	r14, Y+61	; 0x3d
    2172:	fe ac       	ldd	r15, Y+62	; 0x3e
    2174:	0f ad       	ldd	r16, Y+63	; 0x3f
    2176:	21 96       	adiw	r28, 0x01	; 1
    2178:	1f ad       	ldd	r17, Y+63	; 0x3f
    217a:	21 97       	sbiw	r28, 0x01	; 1
    217c:	29 89       	ldd	r18, Y+17	; 0x11
    217e:	3a 89       	ldd	r19, Y+18	; 0x12
    2180:	4b 89       	ldd	r20, Y+19	; 0x13
    2182:	5c 89       	ldd	r21, Y+20	; 0x14
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r3, buffer[3]);
    2190:	22 96       	adiw	r28, 0x02	; 2
    2192:	af ac       	ldd	r10, Y+63	; 0x3f
    2194:	22 97       	sbiw	r28, 0x02	; 2
    2196:	23 96       	adiw	r28, 0x03	; 3
    2198:	bf ac       	ldd	r11, Y+63	; 0x3f
    219a:	23 97       	sbiw	r28, 0x03	; 3
    219c:	24 96       	adiw	r28, 0x04	; 4
    219e:	cf ac       	ldd	r12, Y+63	; 0x3f
    21a0:	24 97       	sbiw	r28, 0x04	; 4
    21a2:	25 96       	adiw	r28, 0x05	; 5
    21a4:	df ac       	ldd	r13, Y+63	; 0x3f
    21a6:	25 97       	sbiw	r28, 0x05	; 5
    21a8:	26 96       	adiw	r28, 0x06	; 6
    21aa:	ef ac       	ldd	r14, Y+63	; 0x3f
    21ac:	26 97       	sbiw	r28, 0x06	; 6
    21ae:	27 96       	adiw	r28, 0x07	; 7
    21b0:	ff ac       	ldd	r15, Y+63	; 0x3f
    21b2:	27 97       	sbiw	r28, 0x07	; 7
    21b4:	28 96       	adiw	r28, 0x08	; 8
    21b6:	0f ad       	ldd	r16, Y+63	; 0x3f
    21b8:	28 97       	sbiw	r28, 0x08	; 8
    21ba:	29 96       	adiw	r28, 0x09	; 9
    21bc:	1f ad       	ldd	r17, Y+63	; 0x3f
    21be:	29 97       	sbiw	r28, 0x09	; 9
    21c0:	29 8d       	ldd	r18, Y+25	; 0x19
    21c2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    21c4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    21c6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    21c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    21ca:	7e 8d       	ldd	r23, Y+30	; 0x1e
    21cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ce:	98 a1       	ldd	r25, Y+32	; 0x20
    21d0:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[4]);
    21d4:	2a 96       	adiw	r28, 0x0a	; 10
    21d6:	af ac       	ldd	r10, Y+63	; 0x3f
    21d8:	2a 97       	sbiw	r28, 0x0a	; 10
    21da:	2b 96       	adiw	r28, 0x0b	; 11
    21dc:	bf ac       	ldd	r11, Y+63	; 0x3f
    21de:	2b 97       	sbiw	r28, 0x0b	; 11
    21e0:	2c 96       	adiw	r28, 0x0c	; 12
    21e2:	cf ac       	ldd	r12, Y+63	; 0x3f
    21e4:	2c 97       	sbiw	r28, 0x0c	; 12
    21e6:	2d 96       	adiw	r28, 0x0d	; 13
    21e8:	df ac       	ldd	r13, Y+63	; 0x3f
    21ea:	2d 97       	sbiw	r28, 0x0d	; 13
    21ec:	2e 96       	adiw	r28, 0x0e	; 14
    21ee:	ef ac       	ldd	r14, Y+63	; 0x3f
    21f0:	2e 97       	sbiw	r28, 0x0e	; 14
    21f2:	2f 96       	adiw	r28, 0x0f	; 15
    21f4:	ff ac       	ldd	r15, Y+63	; 0x3f
    21f6:	2f 97       	sbiw	r28, 0x0f	; 15
    21f8:	60 96       	adiw	r28, 0x10	; 16
    21fa:	0f ad       	ldd	r16, Y+63	; 0x3f
    21fc:	60 97       	sbiw	r28, 0x10	; 16
    21fe:	61 96       	adiw	r28, 0x11	; 17
    2200:	1f ad       	ldd	r17, Y+63	; 0x3f
    2202:	61 97       	sbiw	r28, 0x11	; 17
    2204:	29 a1       	ldd	r18, Y+33	; 0x21
    2206:	3a a1       	ldd	r19, Y+34	; 0x22
    2208:	4b a1       	ldd	r20, Y+35	; 0x23
    220a:	5c a1       	ldd	r21, Y+36	; 0x24
    220c:	6d a1       	ldd	r22, Y+37	; 0x25
    220e:	7e a1       	ldd	r23, Y+38	; 0x26
    2210:	8f a1       	ldd	r24, Y+39	; 0x27
    2212:	98 a5       	ldd	r25, Y+40	; 0x28
    2214:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[5].BattVoltage); //Sanity check - no others populated
    2218:	63 96       	adiw	r28, 0x13	; 19
    221a:	2e ad       	ldd	r18, Y+62	; 0x3e
    221c:	3f ad       	ldd	r19, Y+63	; 0x3f
    221e:	63 97       	sbiw	r28, 0x13	; 19
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	10 e0       	ldi	r17, 0x00	; 0
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	cb 01       	movw	r24, r22
    222e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Requested for 5, sent-to=5 => return none
	loadedTo=0;
    2232:	ed 96       	adiw	r28, 0x3d	; 61
    2234:	1c ae       	std	Y+60, r1	; 0x3c
    2236:	1d ae       	std	Y+61, r1	; 0x3d
    2238:	1e ae       	std	Y+62, r1	; 0x3e
    223a:	1f ae       	std	Y+63, r1	; 0x3f
    223c:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    223e:	f4 01       	movw	r30, r8
    2240:	87 2d       	mov	r24, r7
    2242:	11 92       	st	Z+, r1
    2244:	8a 95       	dec	r24
    2246:	e9 f7       	brne	.-6      	; 0x2242 <_Z11runLoadTestv+0x406>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    2248:	25 e0       	ldi	r18, 0x05	; 5
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	6c e0       	ldi	r22, 0x0C	; 12
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	83 ea       	ldi	r24, 0xA3	; 163
    2256:	95 e0       	ldi	r25, 0x05	; 5
    2258:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(0, mem.loadSensorData(buffer, 5, &loadedTo));
    225c:	9e 01       	movw	r18, r28
    225e:	27 58       	subi	r18, 0x87	; 135
    2260:	3f 4f       	sbci	r19, 0xFF	; 255
    2262:	45 e0       	ldi	r20, 0x05	; 5
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	b4 01       	movw	r22, r8
    2268:	83 ea       	ldi	r24, 0xA3	; 163
    226a:	95 e0       	ldi	r25, 0x05	; 5
    226c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2270:	9b 01       	movw	r18, r22
    2272:	ac 01       	movw	r20, r24
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	cb 01       	movw	r24, r22
    227a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(5, loadedTo); //Loaded becomes sent-to as no extra readings input
    227e:	ed 96       	adiw	r28, 0x3d	; 61
    2280:	2c ad       	ldd	r18, Y+60	; 0x3c
    2282:	3d ad       	ldd	r19, Y+61	; 0x3d
    2284:	4e ad       	ldd	r20, Y+62	; 0x3e
    2286:	5f ad       	ldd	r21, Y+63	; 0x3f
    2288:	ed 97       	sbiw	r28, 0x3d	; 61
    228a:	65 e0       	ldi	r22, 0x05	; 5
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    2296:	29 a5       	ldd	r18, Y+41	; 0x29
    2298:	3a a5       	ldd	r19, Y+42	; 0x2a
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	cb 01       	movw	r24, r22
    22a4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Requested for 9, sent-to=5 => return none
	loadedTo=0;
    22a8:	ed 96       	adiw	r28, 0x3d	; 61
    22aa:	1c ae       	std	Y+60, r1	; 0x3c
    22ac:	1d ae       	std	Y+61, r1	; 0x3d
    22ae:	1e ae       	std	Y+62, r1	; 0x3e
    22b0:	1f ae       	std	Y+63, r1	; 0x3f
    22b2:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    22b4:	f4 01       	movw	r30, r8
    22b6:	87 2d       	mov	r24, r7
    22b8:	11 92       	st	Z+, r1
    22ba:	8a 95       	dec	r24
    22bc:	e9 f7       	brne	.-6      	; 0x22b8 <_Z11runLoadTestv+0x47c>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    22be:	25 e0       	ldi	r18, 0x05	; 5
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	6c e0       	ldi	r22, 0x0C	; 12
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	83 ea       	ldi	r24, 0xA3	; 163
    22cc:	95 e0       	ldi	r25, 0x05	; 5
    22ce:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(0,mem.loadSensorData(buffer, 9, &loadedTo));
    22d2:	9e 01       	movw	r18, r28
    22d4:	27 58       	subi	r18, 0x87	; 135
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	49 e0       	ldi	r20, 0x09	; 9
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	b4 01       	movw	r22, r8
    22de:	83 ea       	ldi	r24, 0xA3	; 163
    22e0:	95 e0       	ldi	r25, 0x05	; 5
    22e2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	cb 01       	movw	r24, r22
    22f0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(5, loadedTo);
    22f4:	ed 96       	adiw	r28, 0x3d	; 61
    22f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    22f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    22fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    22fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    22fe:	ed 97       	sbiw	r28, 0x3d	; 61
    2300:	65 e0       	ldi	r22, 0x05	; 5
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    230c:	29 a5       	ldd	r18, Y+41	; 0x29
    230e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	cb 01       	movw	r24, r22
    231a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>

	//NONE loaded, requested for 5, sent-to=0 => return none
	initialiseModulePristine(1); //Clear existing loads
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
	loadedTo=0;
    2326:	ed 96       	adiw	r28, 0x3d	; 61
    2328:	1c ae       	std	Y+60, r1	; 0x3c
    232a:	1d ae       	std	Y+61, r1	; 0x3d
    232c:	1e ae       	std	Y+62, r1	; 0x3e
    232e:	1f ae       	std	Y+63, r1	; 0x3f
    2330:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2332:	f4 01       	movw	r30, r8
    2334:	11 92       	st	Z+, r1
    2336:	7a 94       	dec	r7
    2338:	e9 f7       	brne	.-6      	; 0x2334 <_Z11runLoadTestv+0x4f8>
	assert(0, mem.loadSensorData(buffer, 5, &loadedTo));
    233a:	9e 01       	movw	r18, r28
    233c:	27 58       	subi	r18, 0x87	; 135
    233e:	3f 4f       	sbci	r19, 0xFF	; 255
    2340:	45 e0       	ldi	r20, 0x05	; 5
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	b4 01       	movw	r22, r8
    2346:	83 ea       	ldi	r24, 0xA3	; 163
    2348:	95 e0       	ldi	r25, 0x05	; 5
    234a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	cb 01       	movw	r24, r22
    2358:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(0, loadedTo);
    235c:	ed 96       	adiw	r28, 0x3d	; 61
    235e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2360:	3d ad       	ldd	r19, Y+61	; 0x3d
    2362:	4e ad       	ldd	r20, Y+62	; 0x3e
    2364:	5f ad       	ldd	r21, Y+63	; 0x3f
    2366:	ed 97       	sbiw	r28, 0x3d	; 61
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	70 e0       	ldi	r23, 0x00	; 0
    236c:	cb 01       	movw	r24, r22
    236e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    2372:	29 a5       	ldd	r18, Y+41	; 0x29
    2374:	3a a5       	ldd	r19, Y+42	; 0x2a
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	cb 01       	movw	r24, r22
    2380:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
}
    2384:	c4 58       	subi	r28, 0x84	; 132
    2386:	df 4f       	sbci	r29, 0xFF	; 255
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	9f 90       	pop	r9
    23a8:	8f 90       	pop	r8
    23aa:	7f 90       	pop	r7
    23ac:	08 95       	ret

000023ae <_Z10runPadTestv>:

void runPadTest()
{
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	6d 97       	sbiw	r28, 0x1d	; 29
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
	byte buffSz=16;
	char buff[buffSz];

	//Integer test
	assert(1, writeWithPad(buff, 0, 0));
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	ce 01       	movw	r24, r28
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	7c 01       	movw	r14, r24
    23d8:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	00 e0       	ldi	r16, 0x00	; 0
    23e6:	10 e0       	ldi	r17, 0x00	; 0
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0", buff);
    23f4:	4f ef       	ldi	r20, 0xFF	; 255
    23f6:	5f ef       	ldi	r21, 0xFF	; 255
    23f8:	b7 01       	movw	r22, r14
    23fa:	80 e2       	ldi	r24, 0x20	; 32
    23fc:	93 e0       	ldi	r25, 0x03	; 3
    23fe:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2402:	68 94       	set
    2404:	dd 24       	eor	r13, r13
    2406:	d4 f8       	bld	r13, 4
    2408:	f7 01       	movw	r30, r14
    240a:	8d 2d       	mov	r24, r13
    240c:	11 92       	st	Z+, r1
    240e:	8a 95       	dec	r24
    2410:	e9 f7       	brne	.-6      	; 0x240c <_Z10runPadTestv+0x5e>
	
	assert(3,writeWithPad(buff, 456, 0));
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	68 ec       	ldi	r22, 0xC8	; 200
    2416:	71 e0       	ldi	r23, 0x01	; 1
    2418:	c7 01       	movw	r24, r14
    241a:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	63 e0       	ldi	r22, 0x03	; 3
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("456", buff);
    2432:	4f ef       	ldi	r20, 0xFF	; 255
    2434:	5f ef       	ldi	r21, 0xFF	; 255
    2436:	b7 01       	movw	r22, r14
    2438:	87 ef       	ldi	r24, 0xF7	; 247
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2440:	f7 01       	movw	r30, r14
    2442:	8d 2d       	mov	r24, r13
    2444:	11 92       	st	Z+, r1
    2446:	8a 95       	dec	r24
    2448:	e9 f7       	brne	.-6      	; 0x2444 <_Z10runPadTestv+0x96>
	
	assert(4, writeWithPad(buff, 6, 4));
    244a:	44 e0       	ldi	r20, 0x04	; 4
    244c:	66 e0       	ldi	r22, 0x06	; 6
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	c7 01       	movw	r24, r14
    2452:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	64 e0       	ldi	r22, 0x04	; 4
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0006", buff);
    246a:	4f ef       	ldi	r20, 0xFF	; 255
    246c:	5f ef       	ldi	r21, 0xFF	; 255
    246e:	b7 01       	movw	r22, r14
    2470:	8b ef       	ldi	r24, 0xFB	; 251
    2472:	92 e0       	ldi	r25, 0x02	; 2
    2474:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2478:	f7 01       	movw	r30, r14
    247a:	8d 2d       	mov	r24, r13
    247c:	11 92       	st	Z+, r1
    247e:	8a 95       	dec	r24
    2480:	e9 f7       	brne	.-6      	; 0x247c <_Z10runPadTestv+0xce>
	
	assert(4, writeWithPad(buff, 23, 4));
    2482:	44 e0       	ldi	r20, 0x04	; 4
    2484:	67 e1       	ldi	r22, 0x17	; 23
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	c7 01       	movw	r24, r14
    248a:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	64 e0       	ldi	r22, 0x04	; 4
    2498:	70 e0       	ldi	r23, 0x00	; 0
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0023", buff);
    24a2:	4f ef       	ldi	r20, 0xFF	; 255
    24a4:	5f ef       	ldi	r21, 0xFF	; 255
    24a6:	b7 01       	movw	r22, r14
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	93 e0       	ldi	r25, 0x03	; 3
    24ac:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    24b0:	f7 01       	movw	r30, r14
    24b2:	8d 2d       	mov	r24, r13
    24b4:	11 92       	st	Z+, r1
    24b6:	8a 95       	dec	r24
    24b8:	e9 f7       	brne	.-6      	; 0x24b4 <_Z10runPadTestv+0x106>
	
	assert(4, writeWithPad(buff, 785, 4));
    24ba:	44 e0       	ldi	r20, 0x04	; 4
    24bc:	61 e1       	ldi	r22, 0x11	; 17
    24be:	73 e0       	ldi	r23, 0x03	; 3
    24c0:	c7 01       	movw	r24, r14
    24c2:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0785", buff);
    24da:	4f ef       	ldi	r20, 0xFF	; 255
    24dc:	5f ef       	ldi	r21, 0xFF	; 255
    24de:	b7 01       	movw	r22, r14
    24e0:	85 e0       	ldi	r24, 0x05	; 5
    24e2:	93 e0       	ldi	r25, 0x03	; 3
    24e4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    24e8:	f7 01       	movw	r30, r14
    24ea:	8d 2d       	mov	r24, r13
    24ec:	11 92       	st	Z+, r1
    24ee:	8a 95       	dec	r24
    24f0:	e9 f7       	brne	.-6      	; 0x24ec <_Z10runPadTestv+0x13e>
	
	assert(4, writeWithPad(buff, 1022, 4));
    24f2:	44 e0       	ldi	r20, 0x04	; 4
    24f4:	6e ef       	ldi	r22, 0xFE	; 254
    24f6:	73 e0       	ldi	r23, 0x03	; 3
    24f8:	c7 01       	movw	r24, r14
    24fa:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	64 e0       	ldi	r22, 0x04	; 4
    2508:	70 e0       	ldi	r23, 0x00	; 0
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("1022", buff);
    2512:	4f ef       	ldi	r20, 0xFF	; 255
    2514:	5f ef       	ldi	r21, 0xFF	; 255
    2516:	b7 01       	movw	r22, r14
    2518:	8a e0       	ldi	r24, 0x0A	; 10
    251a:	93 e0       	ldi	r25, 0x03	; 3
    251c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2520:	f7 01       	movw	r30, r14
    2522:	8d 2d       	mov	r24, r13
    2524:	11 92       	st	Z+, r1
    2526:	8a 95       	dec	r24
    2528:	e9 f7       	brne	.-6      	; 0x2524 <_Z10runPadTestv+0x176>
	
	assert(5, writeWithPad(buff, 10100, 4));
    252a:	44 e0       	ldi	r20, 0x04	; 4
    252c:	64 e7       	ldi	r22, 0x74	; 116
    252e:	77 e2       	ldi	r23, 0x27	; 39
    2530:	c7 01       	movw	r24, r14
    2532:	0e 94 65 05 	call	0xaca	; 0xaca <_Z12writeWithPadPcjh>
    2536:	28 2f       	mov	r18, r24
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	65 e0       	ldi	r22, 0x05	; 5
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("10100", buff);
    254a:	4f ef       	ldi	r20, 0xFF	; 255
    254c:	5f ef       	ldi	r21, 0xFF	; 255
    254e:	b7 01       	movw	r22, r14
    2550:	8f e0       	ldi	r24, 0x0F	; 15
    2552:	93 e0       	ldi	r25, 0x03	; 3
    2554:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2558:	f7 01       	movw	r30, r14
    255a:	8d 2d       	mov	r24, r13
    255c:	11 92       	st	Z+, r1
    255e:	8a 95       	dec	r24
    2560:	e9 f7       	brne	.-6      	; 0x255c <_Z10runPadTestv+0x1ae>


	//byte test
	assert(1, writeByteWithPad(buff, 0, 0));
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	c7 01       	movw	r24, r14
    2568:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	61 e0       	ldi	r22, 0x01	; 1
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0", buff);
    2580:	4f ef       	ldi	r20, 0xFF	; 255
    2582:	5f ef       	ldi	r21, 0xFF	; 255
    2584:	b7 01       	movw	r22, r14
    2586:	80 e2       	ldi	r24, 0x20	; 32
    2588:	93 e0       	ldi	r25, 0x03	; 3
    258a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    258e:	f7 01       	movw	r30, r14
    2590:	8d 2d       	mov	r24, r13
    2592:	11 92       	st	Z+, r1
    2594:	8a 95       	dec	r24
    2596:	e9 f7       	brne	.-6      	; 0x2592 <_Z10runPadTestv+0x1e4>
	
	assert(3, writeByteWithPad(buff, 138, 2));
    2598:	42 e0       	ldi	r20, 0x02	; 2
    259a:	6a e8       	ldi	r22, 0x8A	; 138
    259c:	c7 01       	movw	r24, r14
    259e:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	63 e0       	ldi	r22, 0x03	; 3
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("138", buff);
    25b6:	4f ef       	ldi	r20, 0xFF	; 255
    25b8:	5f ef       	ldi	r21, 0xFF	; 255
    25ba:	b7 01       	movw	r22, r14
    25bc:	85 e1       	ldi	r24, 0x15	; 21
    25be:	93 e0       	ldi	r25, 0x03	; 3
    25c0:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    25c4:	f7 01       	movw	r30, r14
    25c6:	8d 2d       	mov	r24, r13
    25c8:	11 92       	st	Z+, r1
    25ca:	8a 95       	dec	r24
    25cc:	e9 f7       	brne	.-6      	; 0x25c8 <_Z10runPadTestv+0x21a>
	
	assert(4, writeByteWithPad(buff, 6, 4));
    25ce:	44 e0       	ldi	r20, 0x04	; 4
    25d0:	66 e0       	ldi	r22, 0x06	; 6
    25d2:	c7 01       	movw	r24, r14
    25d4:	0e 94 3b 05 	call	0xa76	; 0xa76 <_Z16writeByteWithPadPchh>
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	64 e0       	ldi	r22, 0x04	; 4
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0006", buff);
    25ec:	4f ef       	ldi	r20, 0xFF	; 255
    25ee:	5f ef       	ldi	r21, 0xFF	; 255
    25f0:	b7 01       	movw	r22, r14
    25f2:	8b ef       	ldi	r24, 0xFB	; 251
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    25fa:	f7 01       	movw	r30, r14
    25fc:	8d 2d       	mov	r24, r13
    25fe:	11 92       	st	Z+, r1
    2600:	8a 95       	dec	r24
    2602:	e9 f7       	brne	.-6      	; 0x25fe <_Z10runPadTestv+0x250>
	
	//char* from string test
	assert(1, writeCharArrWithPad(buff, "T", 0));
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	6a e1       	ldi	r22, 0x1A	; 26
    2608:	73 e0       	ldi	r23, 0x03	; 3
    260a:	c7 01       	movw	r24, r14
    260c:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	61 e0       	ldi	r22, 0x01	; 1
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("T", buff);
    2624:	4f ef       	ldi	r20, 0xFF	; 255
    2626:	5f ef       	ldi	r21, 0xFF	; 255
    2628:	b7 01       	movw	r22, r14
    262a:	8a e1       	ldi	r24, 0x1A	; 26
    262c:	93 e0       	ldi	r25, 0x03	; 3
    262e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2632:	f7 01       	movw	r30, r14
    2634:	8d 2d       	mov	r24, r13
    2636:	11 92       	st	Z+, r1
    2638:	8a 95       	dec	r24
    263a:	e9 f7       	brne	.-6      	; 0x2636 <_Z10runPadTestv+0x288>
	
	assert(2, writeCharArrWithPad(buff, "T", 2));
    263c:	42 e0       	ldi	r20, 0x02	; 2
    263e:	6a e1       	ldi	r22, 0x1A	; 26
    2640:	73 e0       	ldi	r23, 0x03	; 3
    2642:	c7 01       	movw	r24, r14
    2644:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    265c:	4f ef       	ldi	r20, 0xFF	; 255
    265e:	5f ef       	ldi	r21, 0xFF	; 255
    2660:	b7 01       	movw	r22, r14
    2662:	89 e1       	ldi	r24, 0x19	; 25
    2664:	93 e0       	ldi	r25, 0x03	; 3
    2666:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    266a:	f7 01       	movw	r30, r14
    266c:	8d 2d       	mov	r24, r13
    266e:	11 92       	st	Z+, r1
    2670:	8a 95       	dec	r24
    2672:	e9 f7       	brne	.-6      	; 0x266e <_Z10runPadTestv+0x2c0>
	
	assert(5, writeCharArrWithPad(buff, "", 5));
    2674:	45 e0       	ldi	r20, 0x05	; 5
    2676:	66 eb       	ldi	r22, 0xB6	; 182
    2678:	73 e0       	ldi	r23, 0x03	; 3
    267a:	c7 01       	movw	r24, r14
    267c:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	65 e0       	ldi	r22, 0x05	; 5
    268a:	70 e0       	ldi	r23, 0x00	; 0
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("00000", buff);
    2694:	4f ef       	ldi	r20, 0xFF	; 255
    2696:	5f ef       	ldi	r21, 0xFF	; 255
    2698:	b7 01       	movw	r22, r14
    269a:	8c e1       	ldi	r24, 0x1C	; 28
    269c:	93 e0       	ldi	r25, 0x03	; 3
    269e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    26a2:	f7 01       	movw	r30, r14
    26a4:	8d 2d       	mov	r24, r13
    26a6:	11 92       	st	Z+, r1
    26a8:	8a 95       	dec	r24
    26aa:	e9 f7       	brne	.-6      	; 0x26a6 <_Z10runPadTestv+0x2f8>
	
	assert(13, writeCharArrWithPad(buff, "Serious Error", 2));
    26ac:	42 e0       	ldi	r20, 0x02	; 2
    26ae:	62 e2       	ldi	r22, 0x22	; 34
    26b0:	73 e0       	ldi	r23, 0x03	; 3
    26b2:	c7 01       	movw	r24, r14
    26b4:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	6d e0       	ldi	r22, 0x0D	; 13
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("Serious Error", buff);
    26cc:	4f ef       	ldi	r20, 0xFF	; 255
    26ce:	5f ef       	ldi	r21, 0xFF	; 255
    26d0:	b7 01       	movw	r22, r14
    26d2:	82 e2       	ldi	r24, 0x22	; 34
    26d4:	93 e0       	ldi	r25, 0x03	; 3
    26d6:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    26da:	f7 01       	movw	r30, r14
    26dc:	8d 2d       	mov	r24, r13
    26de:	11 92       	st	Z+, r1
    26e0:	8a 95       	dec	r24
    26e2:	e9 f7       	brne	.-6      	; 0x26de <_Z10runPadTestv+0x330>
//	String test((const char*)"T");
//	assert(1, writeStrToStrWithPad(strDest,0, test, 0));
//	assertRealStringsIdentical("T", strDest);
		
	//Char* test
	char testMsg[]={'T', '\0'};
    26e4:	84 e5       	ldi	r24, 0x54	; 84
    26e6:	89 8b       	std	Y+17, r24	; 0x11
    26e8:	1a 8a       	std	Y+18, r1	; 0x12
	assert(2, writeCharArrWithPad(buff, testMsg, 2));
    26ea:	42 e0       	ldi	r20, 0x02	; 2
    26ec:	be 01       	movw	r22, r28
    26ee:	6f 5e       	subi	r22, 0xEF	; 239
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255
    26f2:	c7 01       	movw	r24, r14
    26f4:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	62 e0       	ldi	r22, 0x02	; 2
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    270c:	4f ef       	ldi	r20, 0xFF	; 255
    270e:	5f ef       	ldi	r21, 0xFF	; 255
    2710:	b7 01       	movw	r22, r14
    2712:	89 e1       	ldi	r24, 0x19	; 25
    2714:	93 e0       	ldi	r25, 0x03	; 3
    2716:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    271a:	f7 01       	movw	r30, r14
    271c:	8d 2d       	mov	r24, r13
    271e:	11 92       	st	Z+, r1
    2720:	8a 95       	dec	r24
    2722:	e9 f7       	brne	.-6      	; 0x271e <_Z10runPadTestv+0x370>
	
	char testMsg2[]={'E','r','r','o','r',' ','S','o','m','e','\0'};
    2724:	8b e0       	ldi	r24, 0x0B	; 11
    2726:	e3 e3       	ldi	r30, 0x33	; 51
    2728:	f1 e0       	ldi	r31, 0x01	; 1
    272a:	de 01       	movw	r26, r28
    272c:	53 96       	adiw	r26, 0x13	; 19
    272e:	01 90       	ld	r0, Z+
    2730:	0d 92       	st	X+, r0
    2732:	8a 95       	dec	r24
    2734:	e1 f7       	brne	.-8      	; 0x272e <_Z10runPadTestv+0x380>
	assert(10, writeCharArrWithPad(buff, testMsg2, 2));
    2736:	42 e0       	ldi	r20, 0x02	; 2
    2738:	be 01       	movw	r22, r28
    273a:	6d 5e       	subi	r22, 0xED	; 237
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	c7 01       	movw	r24, r14
    2740:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	6a e0       	ldi	r22, 0x0A	; 10
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("Error Some", buff);
    2758:	4f ef       	ldi	r20, 0xFF	; 255
    275a:	5f ef       	ldi	r21, 0xFF	; 255
    275c:	b7 01       	movw	r22, r14
    275e:	80 e3       	ldi	r24, 0x30	; 48
    2760:	93 e0       	ldi	r25, 0x03	; 3
    2762:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2766:	f7 01       	movw	r30, r14
    2768:	8d 2d       	mov	r24, r13
    276a:	11 92       	st	Z+, r1
    276c:	8a 95       	dec	r24
    276e:	e9 f7       	brne	.-6      	; 0x276a <_Z10runPadTestv+0x3bc>
	
	assert(2, writeCharArrWithPad(buff, "T", 2));
    2770:	42 e0       	ldi	r20, 0x02	; 2
    2772:	6a e1       	ldi	r22, 0x1A	; 26
    2774:	73 e0       	ldi	r23, 0x03	; 3
    2776:	c7 01       	movw	r24, r14
    2778:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	70 e0       	ldi	r23, 0x00	; 0
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    2790:	4f ef       	ldi	r20, 0xFF	; 255
    2792:	5f ef       	ldi	r21, 0xFF	; 255
    2794:	b7 01       	movw	r22, r14
    2796:	89 e1       	ldi	r24, 0x19	; 25
    2798:	93 e0       	ldi	r25, 0x03	; 3
    279a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    279e:	f7 01       	movw	r30, r14
    27a0:	8d 2d       	mov	r24, r13
    27a2:	11 92       	st	Z+, r1
    27a4:	8a 95       	dec	r24
    27a6:	e9 f7       	brne	.-6      	; 0x27a2 <_Z10runPadTestv+0x3f4>
	
	assert(13, writeCharArrWithPad(buff, "Serious Error", 2));
    27a8:	42 e0       	ldi	r20, 0x02	; 2
    27aa:	62 e2       	ldi	r22, 0x22	; 34
    27ac:	73 e0       	ldi	r23, 0x03	; 3
    27ae:	c7 01       	movw	r24, r14
    27b0:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19writeCharArrWithPadPcPKch>
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	50 e0       	ldi	r21, 0x00	; 0
    27bc:	6d e0       	ldi	r22, 0x0D	; 13
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertCharStringsIdentical("Serious Error", buff);
    27c8:	4f ef       	ldi	r20, 0xFF	; 255
    27ca:	5f ef       	ldi	r21, 0xFF	; 255
    27cc:	b7 01       	movw	r22, r14
    27ce:	82 e2       	ldi	r24, 0x22	; 34
    27d0:	93 e0       	ldi	r25, 0x03	; 3
    27d2:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    27d6:	f7 01       	movw	r30, r14
    27d8:	11 92       	st	Z+, r1
    27da:	da 94       	dec	r13
    27dc:	e9 f7       	brne	.-6      	; 0x27d8 <_Z10runPadTestv+0x42a>
}
    27de:	6d 96       	adiw	r28, 0x1d	; 29
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	ff 90       	pop	r15
    27f4:	ef 90       	pop	r14
    27f6:	df 90       	pop	r13
    27f8:	08 95       	ret

000027fa <_Z11runSendTestv>:

void runSendTest()
{
    27fa:	5f 92       	push	r5
    27fc:	6f 92       	push	r6
    27fe:	7f 92       	push	r7
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	c3 5f       	subi	r28, 0xF3	; 243
    281e:	d1 09       	sbc	r29, r1
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
	//Check numbers save and load OK in correct endian order
	unsigned long testCases[7] = {0, 1, 100, 262144, 2048, 4+32+128+1024+2048,4};
    282a:	8c e1       	ldi	r24, 0x1C	; 28
    282c:	ee e3       	ldi	r30, 0x3E	; 62
    282e:	f1 e0       	ldi	r31, 0x01	; 1
    2830:	de 01       	movw	r26, r28
    2832:	11 96       	adiw	r26, 0x01	; 1
    2834:	01 90       	ld	r0, Z+
    2836:	0d 92       	st	X+, r0
    2838:	8a 95       	dec	r24
    283a:	e1 f7       	brne	.-8      	; 0x2834 <_Z11runSendTestv+0x3a>
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
    283c:	e1 2c       	mov	r14, r1
    283e:	f1 2c       	mov	r15, r1
    2840:	87 e0       	ldi	r24, 0x07	; 7
    2842:	e8 16       	cp	r14, r24
    2844:	f1 04       	cpc	r15, r1
    2846:	ec f4       	brge	.+58     	; 0x2882 <_Z11runSendTestv+0x88>
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
    2848:	b7 01       	movw	r22, r14
    284a:	66 0f       	add	r22, r22
    284c:	77 1f       	adc	r23, r23
    284e:	66 0f       	add	r22, r22
    2850:	77 1f       	adc	r23, r23
    2852:	e1 e0       	ldi	r30, 0x01	; 1
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	ec 0f       	add	r30, r28
    2858:	fd 1f       	adc	r31, r29
    285a:	e6 0f       	add	r30, r22
    285c:	f7 1f       	adc	r31, r23
    285e:	20 81       	ld	r18, Z
    2860:	31 81       	ldd	r19, Z+1	; 0x01
    2862:	42 81       	ldd	r20, Z+2	; 0x02
    2864:	53 81       	ldd	r21, Z+3	; 0x03
    2866:	ad e1       	ldi	r26, 0x1D	; 29
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	ac 0f       	add	r26, r28
    286c:	bd 1f       	adc	r27, r29
    286e:	6a 0f       	add	r22, r26
    2870:	7b 1f       	adc	r23, r27
    2872:	83 ea       	ldi	r24, 0xA3	; 163
    2874:	95 e0       	ldi	r25, 0x05	; 5
    2876:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
{
	//Check numbers save and load OK in correct endian order
	unsigned long testCases[7] = {0, 1, 100, 262144, 2048, 4+32+128+1024+2048,4};
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
    287a:	bf ef       	ldi	r27, 0xFF	; 255
    287c:	eb 1a       	sub	r14, r27
    287e:	fb 0a       	sbc	r15, r27
    2880:	df cf       	rjmp	.-66     	; 0x2840 <_Z11runSendTestv+0x46>
    2882:	e1 2c       	mov	r14, r1
    2884:	f1 2c       	mov	r15, r1
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
	
	for(int t=0 ; t<7 ; t++)
    2886:	e7 e0       	ldi	r30, 0x07	; 7
    2888:	ee 16       	cp	r14, r30
    288a:	f1 04       	cpc	r15, r1
    288c:	9c f5       	brge	.+102    	; 0x28f4 <_Z11runSendTestv+0xfa>
	{
		long test = testCases[t];
    288e:	b7 01       	movw	r22, r14
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	e1 e0       	ldi	r30, 0x01	; 1
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	ec 0f       	add	r30, r28
    289e:	fd 1f       	adc	r31, r29
    28a0:	e6 0f       	add	r30, r22
    28a2:	f7 1f       	adc	r31, r23
    28a4:	80 80       	ld	r8, Z
    28a6:	91 80       	ldd	r9, Z+1	; 0x01
    28a8:	a2 80       	ldd	r10, Z+2	; 0x02
    28aa:	b3 80       	ldd	r11, Z+3	; 0x03
		volatile unsigned long readValue = mem.getLongFromMemory((int)(bufferTest+t));
    28ac:	8d e1       	ldi	r24, 0x1D	; 29
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	8c 0f       	add	r24, r28
    28b2:	9d 1f       	adc	r25, r29
    28b4:	68 0f       	add	r22, r24
    28b6:	79 1f       	adc	r23, r25
    28b8:	83 ea       	ldi	r24, 0xA3	; 163
    28ba:	95 e0       	ldi	r25, 0x05	; 5
    28bc:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    28c0:	c0 51       	subi	r28, 0x10	; 16
    28c2:	df 4f       	sbci	r29, 0xFF	; 255
    28c4:	68 83       	st	Y, r22
    28c6:	79 83       	std	Y+1, r23	; 0x01
    28c8:	8a 83       	std	Y+2, r24	; 0x02
    28ca:	9b 83       	std	Y+3, r25	; 0x03
    28cc:	c0 5f       	subi	r28, 0xF0	; 240
    28ce:	d0 40       	sbci	r29, 0x00	; 0
		assert(test, readValue, "long test");
    28d0:	c0 51       	subi	r28, 0x10	; 16
    28d2:	df 4f       	sbci	r29, 0xFF	; 255
    28d4:	28 81       	ld	r18, Y
    28d6:	39 81       	ldd	r19, Y+1	; 0x01
    28d8:	4a 81       	ldd	r20, Y+2	; 0x02
    28da:	5b 81       	ldd	r21, Y+3	; 0x03
    28dc:	c0 5f       	subi	r28, 0xF0	; 240
    28de:	d0 40       	sbci	r29, 0x00	; 0
    28e0:	0b e3       	ldi	r16, 0x3B	; 59
    28e2:	13 e0       	ldi	r17, 0x03	; 3
    28e4:	c5 01       	movw	r24, r10
    28e6:	b4 01       	movw	r22, r8
    28e8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
	
	for(int t=0 ; t<7 ; t++)
    28ec:	9f ef       	ldi	r25, 0xFF	; 255
    28ee:	e9 1a       	sub	r14, r25
    28f0:	f9 0a       	sbc	r15, r25
    28f2:	c9 cf       	rjmp	.-110    	; 0x2886 <_Z11runSendTestv+0x8c>
		volatile unsigned long readValue = mem.getLongFromMemory((int)(bufferTest+t));
		assert(test, readValue, "long test");
	}
	
	//Check values set at address are ok and don't overwrite each other
	mem.setLongToMemory(MEMLOC_MODULE_ID, 5);
    28f4:	25 e0       	ldi	r18, 0x05	; 5
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	83 ea       	ldi	r24, 0xA3	; 163
    2902:	95 e0       	ldi	r25, 0x05	; 5
    2904:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_BOOTCOUNT, 343); //TODO: Test for overflow - if continues ok, leave it
    2908:	27 e5       	ldi	r18, 0x57	; 87
    290a:	31 e0       	ldi	r19, 0x01	; 1
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	68 e0       	ldi	r22, 0x08	; 8
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	83 ea       	ldi	r24, 0xA3	; 163
    2916:	95 e0       	ldi	r25, 0x05	; 5
    2918:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_VERSION, 843);
    291c:	2b e4       	ldi	r18, 0x4B	; 75
    291e:	33 e0       	ldi	r19, 0x03	; 3
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	64 e0       	ldi	r22, 0x04	; 4
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	83 ea       	ldi	r24, 0xA3	; 163
    292a:	95 e0       	ldi	r25, 0x05	; 5
    292c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    2930:	25 e0       	ldi	r18, 0x05	; 5
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	6c e0       	ldi	r22, 0x0C	; 12
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	83 ea       	ldi	r24, 0xA3	; 163
    293e:	95 e0       	ldi	r25, 0x05	; 5
    2940:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(5, mem.getLongFromMemory(MEMLOC_MODULE_ID), "module id test");
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	83 ea       	ldi	r24, 0xA3	; 163
    294a:	95 e0       	ldi	r25, 0x05	; 5
    294c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2950:	9b 01       	movw	r18, r22
    2952:	ac 01       	movw	r20, r24
    2954:	05 e4       	ldi	r16, 0x45	; 69
    2956:	13 e0       	ldi	r17, 0x03	; 3
    2958:	65 e0       	ldi	r22, 0x05	; 5
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(343, mem.getLongFromMemory(MEMLOC_BOOTCOUNT), "bootcount test");
    2964:	68 e0       	ldi	r22, 0x08	; 8
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	83 ea       	ldi	r24, 0xA3	; 163
    296a:	95 e0       	ldi	r25, 0x05	; 5
    296c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2970:	9b 01       	movw	r18, r22
    2972:	ac 01       	movw	r20, r24
    2974:	04 e5       	ldi	r16, 0x54	; 84
    2976:	13 e0       	ldi	r17, 0x03	; 3
    2978:	67 e5       	ldi	r22, 0x57	; 87
    297a:	71 e0       	ldi	r23, 0x01	; 1
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(843, mem.getLongFromMemory(MEMLOC_VERSION), "version test");
    2984:	64 e0       	ldi	r22, 0x04	; 4
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	83 ea       	ldi	r24, 0xA3	; 163
    298a:	95 e0       	ldi	r25, 0x05	; 5
    298c:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2990:	9b 01       	movw	r18, r22
    2992:	ac 01       	movw	r20, r24
    2994:	03 e6       	ldi	r16, 0x63	; 99
    2996:	13 e0       	ldi	r17, 0x03	; 3
    2998:	6b e4       	ldi	r22, 0x4B	; 75
    299a:	73 e0       	ldi	r23, 0x03	; 3
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>

	_currCycleNumber = 343; //Normally done in loop() setup
    29a4:	87 e5       	ldi	r24, 0x57	; 87
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	a0 e0       	ldi	r26, 0x00	; 0
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_currCycleNumber>
    29b0:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <_currCycleNumber+0x1>
    29b4:	a0 93 50 04 	sts	0x0450, r26	; 0x800450 <_currCycleNumber+0x2>
    29b8:	b0 93 51 04 	sts	0x0451, r27	; 0x800451 <_currCycleNumber+0x3>
	
	//Test a single reading save
	//Simulate 5 entries already being present
	int expNoOfReadings = 5;
	mem.setLongToMemory(MEMLOC_READING_ENTRY_COUNT, expNoOfReadings);
    29bc:	25 e0       	ldi	r18, 0x05	; 5
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	64 e6       	ldi	r22, 0x64	; 100
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	83 ea       	ldi	r24, 0xA3	; 163
    29ca:	95 e0       	ldi	r25, 0x05	; 5
    29cc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
	
	SensorData r1;
    29d0:	68 94       	set
    29d2:	55 24       	eor	r5, r5
    29d4:	53 f8       	bld	r5, 3
    29d6:	be 01       	movw	r22, r28
    29d8:	67 5c       	subi	r22, 0xC7	; 199
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	db 01       	movw	r26, r22
    29de:	e5 2d       	mov	r30, r5
    29e0:	1d 92       	st	X+, r1
    29e2:	ea 95       	dec	r30
    29e4:	e9 f7       	brne	.-6      	; 0x29e0 <_Z11runSendTestv+0x1e6>
	r1.BattVoltage=1088;
    29e6:	80 e4       	ldi	r24, 0x40	; 64
    29e8:	94 e0       	ldi	r25, 0x04	; 4
    29ea:	9a af       	std	Y+58, r25	; 0x3a
    29ec:	89 af       	std	Y+57, r24	; 0x39
	r1.Current=433;
    29ee:	81 eb       	ldi	r24, 0xB1	; 177
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	9c af       	std	Y+60, r25	; 0x3c
    29f4:	8b af       	std	Y+59, r24	; 0x3b
	r1.PVVoltage=1045;
    29f6:	85 e1       	ldi	r24, 0x15	; 21
    29f8:	94 e0       	ldi	r25, 0x04	; 4
    29fa:	9e af       	std	Y+62, r25	; 0x3e
    29fc:	8d af       	std	Y+61, r24	; 0x3d
	r1.Temperature=308;
    29fe:	84 e3       	ldi	r24, 0x34	; 52
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	21 96       	adiw	r28, 0x01	; 1
    2a04:	9f af       	std	Y+63, r25	; 0x3f
    2a06:	8e af       	std	Y+62, r24	; 0x3e
    2a08:	21 97       	sbiw	r28, 0x01	; 1
	mem.appendSensorEntry(&r1);
    2a0a:	83 ea       	ldi	r24, 0xA3	; 163
    2a0c:	95 e0       	ldi	r25, 0x05	; 5
    2a0e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	
	//Check reading and should have increased entry count by now
	SensorData dszReading[1];
    2a12:	7e 01       	movw	r14, r28
    2a14:	f1 e4       	ldi	r31, 0x41	; 65
    2a16:	ef 0e       	add	r14, r31
    2a18:	f1 1c       	adc	r15, r1
    2a1a:	d7 01       	movw	r26, r14
    2a1c:	e5 2d       	mov	r30, r5
    2a1e:	1d 92       	st	X+, r1
    2a20:	ea 95       	dec	r30
    2a22:	e9 f7       	brne	.-6      	; 0x2a1e <_Z11runSendTestv+0x224>
	unsigned long loadedTo;
	unsigned int loadCount = mem.loadSensorData(dszReading, 1, &loadedTo);
    2a24:	9e 01       	movw	r18, r28
    2a26:	27 5b       	subi	r18, 0xB7	; 183
    2a28:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	b7 01       	movw	r22, r14
    2a30:	83 ea       	ldi	r24, 0xA3	; 163
    2a32:	95 e0       	ldi	r25, 0x05	; 5
    2a34:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2a38:	4b 01       	movw	r8, r22
    2a3a:	5c 01       	movw	r10, r24
	assert(++expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2a3c:	64 e6       	ldi	r22, 0x64	; 100
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	83 ea       	ldi	r24, 0xA3	; 163
    2a42:	95 e0       	ldi	r25, 0x05	; 5
    2a44:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2a48:	9b 01       	movw	r18, r22
    2a4a:	ac 01       	movw	r20, r24
    2a4c:	00 e7       	ldi	r16, 0x70	; 112
    2a4e:	13 e0       	ldi	r17, 0x03	; 3
    2a50:	66 e0       	ldi	r22, 0x06	; 6
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(1, loadCount, "load count");
    2a5c:	a5 01       	movw	r20, r10
    2a5e:	94 01       	movw	r18, r8
    2a60:	44 27       	eor	r20, r20
    2a62:	55 27       	eor	r21, r21
    2a64:	0b e7       	ldi	r16, 0x7B	; 123
    2a66:	13 e0       	ldi	r17, 0x03	; 3
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertReadingsIdentical(r1, (SensorData)dszReading[0]);
    2a74:	d7 01       	movw	r26, r14
    2a76:	ac 90       	ld	r10, X
    2a78:	23 96       	adiw	r28, 0x03	; 3
    2a7a:	bf ac       	ldd	r11, Y+63	; 0x3f
    2a7c:	23 97       	sbiw	r28, 0x03	; 3
    2a7e:	24 96       	adiw	r28, 0x04	; 4
    2a80:	cf ac       	ldd	r12, Y+63	; 0x3f
    2a82:	24 97       	sbiw	r28, 0x04	; 4
    2a84:	25 96       	adiw	r28, 0x05	; 5
    2a86:	df ac       	ldd	r13, Y+63	; 0x3f
    2a88:	25 97       	sbiw	r28, 0x05	; 5
    2a8a:	26 96       	adiw	r28, 0x06	; 6
    2a8c:	ef ac       	ldd	r14, Y+63	; 0x3f
    2a8e:	26 97       	sbiw	r28, 0x06	; 6
    2a90:	27 96       	adiw	r28, 0x07	; 7
    2a92:	ff ac       	ldd	r15, Y+63	; 0x3f
    2a94:	27 97       	sbiw	r28, 0x07	; 7
    2a96:	28 96       	adiw	r28, 0x08	; 8
    2a98:	0f ad       	ldd	r16, Y+63	; 0x3f
    2a9a:	28 97       	sbiw	r28, 0x08	; 8
    2a9c:	29 96       	adiw	r28, 0x09	; 9
    2a9e:	1f ad       	ldd	r17, Y+63	; 0x3f
    2aa0:	29 97       	sbiw	r28, 0x09	; 9
    2aa2:	29 ad       	ldd	r18, Y+57	; 0x39
    2aa4:	3a ad       	ldd	r19, Y+58	; 0x3a
    2aa6:	4b ad       	ldd	r20, Y+59	; 0x3b
    2aa8:	5c ad       	ldd	r21, Y+60	; 0x3c
    2aaa:	6d ad       	ldd	r22, Y+61	; 0x3d
    2aac:	7e ad       	ldd	r23, Y+62	; 0x3e
    2aae:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ab0:	21 96       	adiw	r28, 0x01	; 1
    2ab2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ab4:	21 97       	sbiw	r28, 0x01	; 1
    2ab6:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>

	SensorData r2;
    2aba:	4e 01       	movw	r8, r28
    2abc:	bd e4       	ldi	r27, 0x4D	; 77
    2abe:	8b 0e       	add	r8, r27
    2ac0:	91 1c       	adc	r9, r1
    2ac2:	f4 01       	movw	r30, r8
    2ac4:	85 2d       	mov	r24, r5
    2ac6:	11 92       	st	Z+, r1
    2ac8:	8a 95       	dec	r24
    2aca:	e9 f7       	brne	.-6      	; 0x2ac6 <_Z11runSendTestv+0x2cc>
	r2.BattVoltage=7456;
    2acc:	80 e2       	ldi	r24, 0x20	; 32
    2ace:	9d e1       	ldi	r25, 0x1D	; 29
    2ad0:	d4 01       	movw	r26, r8
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24
	r2.Current=1785;
    2ad8:	89 ef       	ldi	r24, 0xF9	; 249
    2ada:	96 e0       	ldi	r25, 0x06	; 6
    2adc:	13 96       	adiw	r26, 0x03	; 3
    2ade:	9c 93       	st	X, r25
    2ae0:	8e 93       	st	-X, r24
    2ae2:	12 97       	sbiw	r26, 0x02	; 2
	r2.PVVoltage=8943;
    2ae4:	8f ee       	ldi	r24, 0xEF	; 239
    2ae6:	92 e2       	ldi	r25, 0x22	; 34
    2ae8:	15 96       	adiw	r26, 0x05	; 5
    2aea:	9c 93       	st	X, r25
    2aec:	8e 93       	st	-X, r24
    2aee:	14 97       	sbiw	r26, 0x04	; 4
	r2.Temperature=1866;
    2af0:	8a e4       	ldi	r24, 0x4A	; 74
    2af2:	97 e0       	ldi	r25, 0x07	; 7
    2af4:	17 96       	adiw	r26, 0x07	; 7
    2af6:	9c 93       	st	X, r25
    2af8:	8e 93       	st	-X, r24
    2afa:	16 97       	sbiw	r26, 0x06	; 6
	//r2.ErrorChar='T';
	mem.appendSensorEntry(&r2);
    2afc:	b4 01       	movw	r22, r8
    2afe:	83 ea       	ldi	r24, 0xA3	; 163
    2b00:	95 e0       	ldi	r25, 0x05	; 5
    2b02:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	
	
	//Check reading and should have increased entry count by now
	SensorData dszReading2[1];
    2b06:	3e 01       	movw	r6, r28
    2b08:	b5 e5       	ldi	r27, 0x55	; 85
    2b0a:	6b 0e       	add	r6, r27
    2b0c:	71 1c       	adc	r7, r1
    2b0e:	f3 01       	movw	r30, r6
    2b10:	11 92       	st	Z+, r1
    2b12:	5a 94       	dec	r5
    2b14:	e9 f7       	brne	.-6      	; 0x2b10 <_Z11runSendTestv+0x316>
	loadCount = mem.loadSensorData(dszReading2, 1, &loadedTo);
    2b16:	9e 01       	movw	r18, r28
    2b18:	27 5b       	subi	r18, 0xB7	; 183
    2b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	b3 01       	movw	r22, r6
    2b22:	83 ea       	ldi	r24, 0xA3	; 163
    2b24:	95 e0       	ldi	r25, 0x05	; 5
    2b26:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2b2a:	6b 01       	movw	r12, r22
    2b2c:	7c 01       	movw	r14, r24
	assert(++expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2b2e:	64 e6       	ldi	r22, 0x64	; 100
    2b30:	70 e0       	ldi	r23, 0x00	; 0
    2b32:	83 ea       	ldi	r24, 0xA3	; 163
    2b34:	95 e0       	ldi	r25, 0x05	; 5
    2b36:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2b3a:	9b 01       	movw	r18, r22
    2b3c:	ac 01       	movw	r20, r24
    2b3e:	00 e7       	ldi	r16, 0x70	; 112
    2b40:	13 e0       	ldi	r17, 0x03	; 3
    2b42:	67 e0       	ldi	r22, 0x07	; 7
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(1, loadCount, "load count");
    2b4e:	a7 01       	movw	r20, r14
    2b50:	96 01       	movw	r18, r12
    2b52:	44 27       	eor	r20, r20
    2b54:	55 27       	eor	r21, r21
    2b56:	0b e7       	ldi	r16, 0x7B	; 123
    2b58:	13 e0       	ldi	r17, 0x03	; 3
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	//assert(r2.Sent, (byte)0);//TODO
	assertReadingsIdentical(r2, (SensorData)dszReading2[0]);
    2b66:	d3 01       	movw	r26, r6
    2b68:	ac 90       	ld	r10, X
    2b6a:	11 96       	adiw	r26, 0x01	; 1
    2b6c:	bc 90       	ld	r11, X
    2b6e:	11 97       	sbiw	r26, 0x01	; 1
    2b70:	12 96       	adiw	r26, 0x02	; 2
    2b72:	cc 90       	ld	r12, X
    2b74:	12 97       	sbiw	r26, 0x02	; 2
    2b76:	13 96       	adiw	r26, 0x03	; 3
    2b78:	dc 90       	ld	r13, X
    2b7a:	13 97       	sbiw	r26, 0x03	; 3
    2b7c:	14 96       	adiw	r26, 0x04	; 4
    2b7e:	ec 90       	ld	r14, X
    2b80:	14 97       	sbiw	r26, 0x04	; 4
    2b82:	15 96       	adiw	r26, 0x05	; 5
    2b84:	fc 90       	ld	r15, X
    2b86:	15 97       	sbiw	r26, 0x05	; 5
    2b88:	16 96       	adiw	r26, 0x06	; 6
    2b8a:	0c 91       	ld	r16, X
    2b8c:	16 97       	sbiw	r26, 0x06	; 6
    2b8e:	17 96       	adiw	r26, 0x07	; 7
    2b90:	1c 91       	ld	r17, X
    2b92:	f4 01       	movw	r30, r8
    2b94:	20 81       	ld	r18, Z
    2b96:	31 81       	ldd	r19, Z+1	; 0x01
    2b98:	42 81       	ldd	r20, Z+2	; 0x02
    2b9a:	53 81       	ldd	r21, Z+3	; 0x03
    2b9c:	64 81       	ldd	r22, Z+4	; 0x04
    2b9e:	75 81       	ldd	r23, Z+5	; 0x05
    2ba0:	86 81       	ldd	r24, Z+6	; 0x06
    2ba2:	97 81       	ldd	r25, Z+7	; 0x07
    2ba4:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	
	volatile int stop5=0;
    2ba8:	6f 96       	adiw	r28, 0x1f	; 31
    2baa:	1f ae       	std	Y+63, r1	; 0x3f
    2bac:	1e ae       	std	Y+62, r1	; 0x3e
    2bae:	6f 97       	sbiw	r28, 0x1f	; 31
	
	//Now get last 2 readings and ensure order preserved
	SensorData dszReadings[2];
    2bb0:	3e 01       	movw	r6, r28
    2bb2:	ff e5       	ldi	r31, 0x5F	; 95
    2bb4:	6f 0e       	add	r6, r31
    2bb6:	71 1c       	adc	r7, r1
    2bb8:	80 e1       	ldi	r24, 0x10	; 16
    2bba:	d3 01       	movw	r26, r6
    2bbc:	1d 92       	st	X+, r1
    2bbe:	8a 95       	dec	r24
    2bc0:	e9 f7       	brne	.-6      	; 0x2bbc <_Z11runSendTestv+0x3c2>
	loadCount = mem.loadSensorData(dszReadings, 2, &loadedTo);
    2bc2:	9e 01       	movw	r18, r28
    2bc4:	27 5b       	subi	r18, 0xB7	; 183
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	42 e0       	ldi	r20, 0x02	; 2
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	b3 01       	movw	r22, r6
    2bce:	83 ea       	ldi	r24, 0xA3	; 163
    2bd0:	95 e0       	ldi	r25, 0x05	; 5
    2bd2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2bd6:	6b 01       	movw	r12, r22
    2bd8:	7c 01       	movw	r14, r24
	assert(expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2bda:	64 e6       	ldi	r22, 0x64	; 100
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	83 ea       	ldi	r24, 0xA3	; 163
    2be0:	95 e0       	ldi	r25, 0x05	; 5
    2be2:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2be6:	9b 01       	movw	r18, r22
    2be8:	ac 01       	movw	r20, r24
    2bea:	00 e7       	ldi	r16, 0x70	; 112
    2bec:	13 e0       	ldi	r17, 0x03	; 3
    2bee:	67 e0       	ldi	r22, 0x07	; 7
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(2, loadCount, "load count");
    2bfa:	a7 01       	movw	r20, r14
    2bfc:	96 01       	movw	r18, r12
    2bfe:	44 27       	eor	r20, r20
    2c00:	55 27       	eor	r21, r21
    2c02:	0b e7       	ldi	r16, 0x7B	; 123
    2c04:	13 e0       	ldi	r17, 0x03	; 3
    2c06:	62 e0       	ldi	r22, 0x02	; 2
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assertReadingsIdentical(r1, (SensorData)dszReadings[0]); //Make sure 1 isn't clobbered !
    2c12:	f3 01       	movw	r30, r6
    2c14:	a0 80       	ld	r10, Z
    2c16:	b1 80       	ldd	r11, Z+1	; 0x01
    2c18:	c2 80       	ldd	r12, Z+2	; 0x02
    2c1a:	d3 80       	ldd	r13, Z+3	; 0x03
    2c1c:	e4 80       	ldd	r14, Z+4	; 0x04
    2c1e:	f5 80       	ldd	r15, Z+5	; 0x05
    2c20:	06 81       	ldd	r16, Z+6	; 0x06
    2c22:	17 81       	ldd	r17, Z+7	; 0x07
    2c24:	29 ad       	ldd	r18, Y+57	; 0x39
    2c26:	3a ad       	ldd	r19, Y+58	; 0x3a
    2c28:	4b ad       	ldd	r20, Y+59	; 0x3b
    2c2a:	5c ad       	ldd	r21, Y+60	; 0x3c
    2c2c:	6d ad       	ldd	r22, Y+61	; 0x3d
    2c2e:	7e ad       	ldd	r23, Y+62	; 0x3e
    2c30:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c32:	21 96       	adiw	r28, 0x01	; 1
    2c34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c36:	21 97       	sbiw	r28, 0x01	; 1
    2c38:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r2, (SensorData)dszReadings[1]);
    2c3c:	d3 01       	movw	r26, r6
    2c3e:	18 96       	adiw	r26, 0x08	; 8
    2c40:	ac 90       	ld	r10, X
    2c42:	18 97       	sbiw	r26, 0x08	; 8
    2c44:	19 96       	adiw	r26, 0x09	; 9
    2c46:	bc 90       	ld	r11, X
    2c48:	19 97       	sbiw	r26, 0x09	; 9
    2c4a:	1a 96       	adiw	r26, 0x0a	; 10
    2c4c:	cc 90       	ld	r12, X
    2c4e:	1a 97       	sbiw	r26, 0x0a	; 10
    2c50:	1b 96       	adiw	r26, 0x0b	; 11
    2c52:	dc 90       	ld	r13, X
    2c54:	1b 97       	sbiw	r26, 0x0b	; 11
    2c56:	1c 96       	adiw	r26, 0x0c	; 12
    2c58:	ec 90       	ld	r14, X
    2c5a:	1c 97       	sbiw	r26, 0x0c	; 12
    2c5c:	1d 96       	adiw	r26, 0x0d	; 13
    2c5e:	fc 90       	ld	r15, X
    2c60:	1d 97       	sbiw	r26, 0x0d	; 13
    2c62:	1e 96       	adiw	r26, 0x0e	; 14
    2c64:	0c 91       	ld	r16, X
    2c66:	1e 97       	sbiw	r26, 0x0e	; 14
    2c68:	1f 96       	adiw	r26, 0x0f	; 15
    2c6a:	1c 91       	ld	r17, X
    2c6c:	f4 01       	movw	r30, r8
    2c6e:	20 81       	ld	r18, Z
    2c70:	31 81       	ldd	r19, Z+1	; 0x01
    2c72:	42 81       	ldd	r20, Z+2	; 0x02
    2c74:	53 81       	ldd	r21, Z+3	; 0x03
    2c76:	64 81       	ldd	r22, Z+4	; 0x04
    2c78:	75 81       	ldd	r23, Z+5	; 0x05
    2c7a:	86 81       	ldd	r24, Z+6	; 0x06
    2c7c:	97 81       	ldd	r25, Z+7	; 0x07
    2c7e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_Z23assertReadingsIdentical10SensorDataS_>
	
	//Before GPRS sending, just verify last-sent-to flag value
	assert(5, mem.getLongFromMemory(MEMLOC_SENT_UPTO));
    2c82:	6c e0       	ldi	r22, 0x0C	; 12
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	83 ea       	ldi	r24, 0xA3	; 163
    2c88:	95 e0       	ldi	r25, 0x05	; 5
    2c8a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	00 e0       	ldi	r16, 0x00	; 0
    2c94:	10 e0       	ldi	r17, 0x00	; 0
    2c96:	65 e0       	ldi	r22, 0x05	; 5
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>

	//Send another batch of readings
	execTransmitReadings(_dailyCycleData);
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_Z20execTransmitReadingsR14DailyCycleData>
	
	//First check data sent is as expected
	char* actualStr = gsm.MOCK_DATA_SENT_GPRS;
    2caa:	0f 2e       	mov	r0, r31
    2cac:	f2 e8       	ldi	r31, 0x82	; 130
    2cae:	ef 2e       	mov	r14, r31
    2cb0:	f4 e0       	ldi	r31, 0x04	; 4
    2cb2:	ff 2e       	mov	r15, r31
    2cb4:	f0 2d       	mov	r31, r0
    2cb6:	d7 01       	movw	r26, r14
    2cb8:	6d 91       	ld	r22, X+
    2cba:	7c 91       	ld	r23, X
	char expectedStr[100] = "5-343-7-21-99-1088043310450308,7456178589431866";
    2cbc:	80 e3       	ldi	r24, 0x30	; 48
    2cbe:	ea e5       	ldi	r30, 0x5A	; 90
    2cc0:	f1 e0       	ldi	r31, 0x01	; 1
    2cc2:	de 01       	movw	r26, r28
    2cc4:	a1 59       	subi	r26, 0x91	; 145
    2cc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc8:	01 90       	ld	r0, Z+
    2cca:	0d 92       	st	X+, r0
    2ccc:	8a 95       	dec	r24
    2cce:	e1 f7       	brne	.-8      	; 0x2cc8 <_Z11runSendTestv+0x4ce>
    2cd0:	ef e6       	ldi	r30, 0x6F	; 111
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	ec 0f       	add	r30, r28
    2cd6:	fd 1f       	adc	r31, r29
    2cd8:	f0 96       	adiw	r30, 0x30	; 48
    2cda:	84 e3       	ldi	r24, 0x34	; 52
    2cdc:	df 01       	movw	r26, r30
    2cde:	1d 92       	st	X+, r1
    2ce0:	8a 95       	dec	r24
    2ce2:	e9 f7       	brne	.-6      	; 0x2cde <_Z11runSendTestv+0x4e4>
	assertCharStringsIdentical(expectedStr, actualStr);
    2ce4:	4f ef       	ldi	r20, 0xFF	; 255
    2ce6:	5f ef       	ldi	r21, 0xFF	; 255
    2ce8:	ce 01       	movw	r24, r28
    2cea:	81 59       	subi	r24, 0x91	; 145
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>

volatile int fake=1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	cd 52       	subi	r28, 0x2D	; 45
    2cf8:	df 4f       	sbci	r29, 0xFF	; 255
    2cfa:	99 83       	std	Y+1, r25	; 0x01
    2cfc:	88 83       	st	Y, r24
    2cfe:	c3 5d       	subi	r28, 0xD3	; 211
    2d00:	d0 40       	sbci	r29, 0x00	; 0
	//Ensure sent-to flag updated
	assert(5+2, mem.getLongFromMemory(MEMLOC_SENT_UPTO));
    2d02:	6c e0       	ldi	r22, 0x0C	; 12
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	83 ea       	ldi	r24, 0xA3	; 163
    2d08:	95 e0       	ldi	r25, 0x05	; 5
    2d0a:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2d0e:	9b 01       	movw	r18, r22
    2d10:	ac 01       	movw	r20, r24
    2d12:	67 e0       	ldi	r22, 0x07	; 7
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Send again. No data but still expect to receive base-level data.
	DailyCycleData reset;
    2d1e:	fe 01       	movw	r30, r28
    2d20:	eb 52       	subi	r30, 0x2B	; 43
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	81 e1       	ldi	r24, 0x11	; 17
    2d26:	df 01       	movw	r26, r30
    2d28:	1d 92       	st	X+, r1
    2d2a:	8a 95       	dec	r24
    2d2c:	e9 f7       	brne	.-6      	; 0x2d28 <_Z11runSendTestv+0x52e>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e4       	ldi	r25, 0x40	; 64
    2d32:	90 8b       	std	Z+16, r25	; 0x10
    2d34:	87 87       	std	Z+15, r24	; 0x0f
	_dailyCycleData = reset;
    2d36:	81 e1       	ldi	r24, 0x11	; 17
    2d38:	a2 e0       	ldi	r26, 0x02	; 2
    2d3a:	b1 e0       	ldi	r27, 0x01	; 1
    2d3c:	01 90       	ld	r0, Z+
    2d3e:	0d 92       	st	X+, r0
    2d40:	8a 95       	dec	r24
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <_Z11runSendTestv+0x542>
	gsm.MOCK_DATA_SENT_GPRS = (""); //reset mock
    2d44:	0f 2e       	mov	r0, r31
    2d46:	f6 eb       	ldi	r31, 0xB6	; 182
    2d48:	cf 2e       	mov	r12, r31
    2d4a:	f3 e0       	ldi	r31, 0x03	; 3
    2d4c:	df 2e       	mov	r13, r31
    2d4e:	f0 2d       	mov	r31, r0
    2d50:	f7 01       	movw	r30, r14
    2d52:	d1 82       	std	Z+1, r13	; 0x01
    2d54:	c0 82       	st	Z, r12
	execTransmitReadings(_dailyCycleData);
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	91 e0       	ldi	r25, 0x01	; 1
    2d5a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_Z20execTransmitReadingsR14DailyCycleData>
	assertCharStringsIdentical("5-343-7-21-99", gsm.MOCK_DATA_SENT_GPRS);
    2d5e:	d7 01       	movw	r26, r14
    2d60:	6d 91       	ld	r22, X+
    2d62:	7c 91       	ld	r23, X
    2d64:	4f ef       	ldi	r20, 0xFF	; 255
    2d66:	5f ef       	ldi	r21, 0xFF	; 255
    2d68:	86 e8       	ldi	r24, 0x86	; 134
    2d6a:	93 e0       	ldi	r25, 0x03	; 3
    2d6c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_Z26assertCharStringsIdenticalPKcS0_i>
	assert(5+2, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
    2d70:	6c e0       	ldi	r22, 0x0C	; 12
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	83 ea       	ldi	r24, 0xA3	; 163
    2d76:	95 e0       	ldi	r25, 0x05	; 5
    2d78:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2d7c:	9b 01       	movw	r18, r22
    2d7e:	ac 01       	movw	r20, r24
    2d80:	67 e0       	ldi	r22, 0x07	; 7
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Add a new reading and ONLY that reading should've been sent
	gsm.MOCK_DATA_SENT_GPRS = (""); //reset mock
    2d8c:	f7 01       	movw	r30, r14
    2d8e:	d1 82       	std	Z+1, r13	; 0x01
    2d90:	c0 82       	st	Z, r12
	SensorData newReading = createMockReading();
    2d92:	60 e0       	ldi	r22, 0x00	; 0
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_Z17createMockReadingbc>
    2d9a:	ca 51       	subi	r28, 0x1A	; 26
    2d9c:	df 4f       	sbci	r29, 0xFF	; 255
    2d9e:	28 83       	st	Y, r18
    2da0:	c6 5e       	subi	r28, 0xE6	; 230
    2da2:	d0 40       	sbci	r29, 0x00	; 0
    2da4:	c9 51       	subi	r28, 0x19	; 25
    2da6:	df 4f       	sbci	r29, 0xFF	; 255
    2da8:	38 83       	st	Y, r19
    2daa:	c7 5e       	subi	r28, 0xE7	; 231
    2dac:	d0 40       	sbci	r29, 0x00	; 0
    2dae:	c8 51       	subi	r28, 0x18	; 24
    2db0:	df 4f       	sbci	r29, 0xFF	; 255
    2db2:	48 83       	st	Y, r20
    2db4:	c8 5e       	subi	r28, 0xE8	; 232
    2db6:	d0 40       	sbci	r29, 0x00	; 0
    2db8:	c7 51       	subi	r28, 0x17	; 23
    2dba:	df 4f       	sbci	r29, 0xFF	; 255
    2dbc:	58 83       	st	Y, r21
    2dbe:	c9 5e       	subi	r28, 0xE9	; 233
    2dc0:	d0 40       	sbci	r29, 0x00	; 0
    2dc2:	c6 51       	subi	r28, 0x16	; 22
    2dc4:	df 4f       	sbci	r29, 0xFF	; 255
    2dc6:	68 83       	st	Y, r22
    2dc8:	ca 5e       	subi	r28, 0xEA	; 234
    2dca:	d0 40       	sbci	r29, 0x00	; 0
    2dcc:	c5 51       	subi	r28, 0x15	; 21
    2dce:	df 4f       	sbci	r29, 0xFF	; 255
    2dd0:	78 83       	st	Y, r23
    2dd2:	cb 5e       	subi	r28, 0xEB	; 235
    2dd4:	d0 40       	sbci	r29, 0x00	; 0
    2dd6:	c4 51       	subi	r28, 0x14	; 20
    2dd8:	df 4f       	sbci	r29, 0xFF	; 255
    2dda:	88 83       	st	Y, r24
    2ddc:	cc 5e       	subi	r28, 0xEC	; 236
    2dde:	d0 40       	sbci	r29, 0x00	; 0
    2de0:	c3 51       	subi	r28, 0x13	; 19
    2de2:	df 4f       	sbci	r29, 0xFF	; 255
    2de4:	98 83       	st	Y, r25
    2de6:	cd 5e       	subi	r28, 0xED	; 237
    2de8:	d0 40       	sbci	r29, 0x00	; 0
	execTransmitReadings(_dailyCycleData);
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	91 e0       	ldi	r25, 0x01	; 1
    2dee:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_Z20execTransmitReadingsR14DailyCycleData>
	volatile int len = strlen(gsm.MOCK_DATA_SENT_GPRS);
    2df2:	f7 01       	movw	r30, r14
    2df4:	a0 81       	ld	r26, Z
    2df6:	b1 81       	ldd	r27, Z+1	; 0x01
    2df8:	fd 01       	movw	r30, r26
    2dfa:	01 90       	ld	r0, Z+
    2dfc:	00 20       	and	r0, r0
    2dfe:	e9 f7       	brne	.-6      	; 0x2dfa <_Z11runSendTestv+0x600>
    2e00:	31 97       	sbiw	r30, 0x01	; 1
    2e02:	ea 1b       	sub	r30, r26
    2e04:	fb 0b       	sbc	r31, r27
    2e06:	c2 51       	subi	r28, 0x12	; 18
    2e08:	df 4f       	sbci	r29, 0xFF	; 255
    2e0a:	f9 83       	std	Y+1, r31	; 0x01
    2e0c:	e8 83       	st	Y, r30
    2e0e:	ce 5e       	subi	r28, 0xEE	; 238
    2e10:	d0 40       	sbci	r29, 0x00	; 0
	assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS) < 35); //Could also check for commas
    2e12:	fd 01       	movw	r30, r26
    2e14:	01 90       	ld	r0, Z+
    2e16:	00 20       	and	r0, r0
    2e18:	e9 f7       	brne	.-6      	; 0x2e14 <_Z11runSendTestv+0x61a>
    2e1a:	31 97       	sbiw	r30, 0x01	; 1
    2e1c:	ea 1b       	sub	r30, r26
    2e1e:	fb 0b       	sbc	r31, r27
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	b3 97       	sbiw	r30, 0x23	; 35
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <_Z11runSendTestv+0x62e>
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
	assert(5+3, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
    2e2c:	6c e0       	ldi	r22, 0x0C	; 12
    2e2e:	70 e0       	ldi	r23, 0x00	; 0
    2e30:	83 ea       	ldi	r24, 0xA3	; 163
    2e32:	95 e0       	ldi	r25, 0x05	; 5
    2e34:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    2e38:	9b 01       	movw	r18, r22
    2e3a:	ac 01       	movw	r20, r24
    2e3c:	00 e0       	ldi	r16, 0x00	; 0
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
    2e40:	68 e0       	ldi	r22, 0x08	; 8
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	
		
	assertTrue(!gsm.MOCK_DATA_SENT_GPRS || strlen(gsm.MOCK_DATA_SENT_GPRS)==0); //Nothing sent yet
    2e4c:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <gsm>
    2e50:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <gsm+0x1>
    2e54:	30 97       	sbiw	r30, 0x00	; 0
    2e56:	29 f0       	breq	.+10     	; 0x2e62 <_Z11runSendTestv+0x668>
    2e58:	80 81       	ld	r24, Z
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	04 c0       	rjmp	.+8      	; 0x2e66 <_Z11runSendTestv+0x66c>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	03 c0       	rjmp	.+6      	; 0x2e68 <_Z11runSendTestv+0x66e>
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <_Z11runSendTestv+0x66e>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
	assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS)>0); //Readings sent now
    2e6c:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <gsm>
    2e70:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <gsm+0x1>
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 81       	ld	r25, Z
    2e78:	91 11       	cpse	r25, r1
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <_Z11runSendTestv+0x684>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
		
	//volatile long millis = testTimer.getMillis();
}
    2e82:	cd 50       	subi	r28, 0x0D	; 13
    2e84:	df 4f       	sbci	r29, 0xFF	; 255
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	ff 90       	pop	r15
    2e9a:	ef 90       	pop	r14
    2e9c:	df 90       	pop	r13
    2e9e:	cf 90       	pop	r12
    2ea0:	bf 90       	pop	r11
    2ea2:	af 90       	pop	r10
    2ea4:	9f 90       	pop	r9
    2ea6:	8f 90       	pop	r8
    2ea8:	7f 90       	pop	r7
    2eaa:	6f 90       	pop	r6
    2eac:	5f 90       	pop	r5
    2eae:	08 95       	ret

00002eb0 <_Z16runFullCycleTestv>:
	
//TODO: Test timing flags

uint16_t _testFullCycleLoopCount=0;
boolean runFullCycleTest()
{	
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
	//TODO: Calculate time per cycle
	
	if(++_testFullCycleLoopCount < 10) {
    2ec0:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_testFullCycleLoopCount>
    2ec4:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_testFullCycleLoopCount+0x1>
    2ec8:	01 96       	adiw	r24, 0x01	; 1
    2eca:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <_testFullCycleLoopCount+0x1>
    2ece:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_testFullCycleLoopCount>
    2ed2:	0a 97       	sbiw	r24, 0x0a	; 10
    2ed4:	18 f4       	brcc	.+6      	; 0x2edc <_Z16runFullCycleTestv+0x2c>
	
		//Call normal looping function
		boolean doContinue = loopCycle();
    2ed6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_Z9loopCyclev>
		return true;
    2eda:	66 c0       	rjmp	.+204    	; 0x2fa8 <_Z16runFullCycleTestv+0xf8>
    2edc:	c1 2c       	mov	r12, r1
    2ede:	d1 2c       	mov	r13, r1
	}
		
	boolean ret = true;
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
    2ee0:	84 e6       	ldi	r24, 0x64	; 100
    2ee2:	c8 16       	cp	r12, r24
    2ee4:	d1 04       	cpc	r13, r1
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <_Z16runFullCycleTestv+0x3a>
    2ee8:	5f c0       	rjmp	.+190    	; 0x2fa8 <_Z16runFullCycleTestv+0xf8>
    2eea:	e1 2c       	mov	r14, r1
    2eec:	f1 2c       	mov	r15, r1
	{
		//Let 23 hours pass, should end up with ?? readings
		for(int hrCtr=0;hrCtr<23;hrCtr++)
    2eee:	87 e1       	ldi	r24, 0x17	; 23
    2ef0:	e8 16       	cp	r14, r24
    2ef2:	f1 04       	cpc	r15, r1
    2ef4:	94 f5       	brge	.+100    	; 0x2f5a <_Z16runFullCycleTestv+0xaa>
		{
			loopCycle();
    2ef6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_Z9loopCyclev>
			assert(0, strlen(gsm.MOCK_DATA_SENT_GPRS));
    2efa:	c2 e8       	ldi	r28, 0x82	; 130
    2efc:	d4 e0       	ldi	r29, 0x04	; 4
    2efe:	a8 81       	ld	r26, Y
    2f00:	b9 81       	ldd	r27, Y+1	; 0x01
    2f02:	fd 01       	movw	r30, r26
    2f04:	01 90       	ld	r0, Z+
    2f06:	00 20       	and	r0, r0
    2f08:	e9 f7       	brne	.-6      	; 0x2f04 <_Z16runFullCycleTestv+0x54>
    2f0a:	31 97       	sbiw	r30, 0x01	; 1
    2f0c:	9f 01       	movw	r18, r30
    2f0e:	2a 1b       	sub	r18, r26
    2f10:	3b 0b       	sbc	r19, r27
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	50 e0       	ldi	r21, 0x00	; 0
    2f16:	00 e0       	ldi	r16, 0x00	; 0
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	70 e0       	ldi	r23, 0x00	; 0
    2f1e:	cb 01       	movw	r24, r22
    2f20:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
			assert(0, strlen(gsm.MOCK_DATA_SENT_SMS));
    2f24:	aa 81       	ldd	r26, Y+2	; 0x02
    2f26:	bb 81       	ldd	r27, Y+3	; 0x03
    2f28:	fd 01       	movw	r30, r26
    2f2a:	01 90       	ld	r0, Z+
    2f2c:	00 20       	and	r0, r0
    2f2e:	e9 f7       	brne	.-6      	; 0x2f2a <_Z16runFullCycleTestv+0x7a>
    2f30:	31 97       	sbiw	r30, 0x01	; 1
    2f32:	9f 01       	movw	r18, r30
    2f34:	2a 1b       	sub	r18, r26
    2f36:	3b 0b       	sbc	r19, r27
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	70 e0       	ldi	r23, 0x00	; 0
    2f40:	cb 01       	movw	r24, r22
    2f42:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
			assertTrue(!_isDailyCycle);
    2f46:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <_isDailyCycle>
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	89 27       	eor	r24, r25
    2f4e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
	{
		//Let 23 hours pass, should end up with ?? readings
		for(int hrCtr=0;hrCtr<23;hrCtr++)
    2f52:	8f ef       	ldi	r24, 0xFF	; 255
    2f54:	e8 1a       	sub	r14, r24
    2f56:	f8 0a       	sbc	r15, r24
    2f58:	ca cf       	rjmp	.-108    	; 0x2eee <_Z16runFullCycleTestv+0x3e>
			assert(0, strlen(gsm.MOCK_DATA_SENT_SMS));
			assertTrue(!_isDailyCycle);
		}
		
		//EOD loop - after 1 day, should've transmitted
		loopCycle();
    2f5a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_Z9loopCyclev>
		assertTrue(_isDailyCycle);
    2f5e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <_isDailyCycle>
    2f62:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS)>0);
    2f66:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <gsm>
    2f6a:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <gsm+0x1>
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 81       	ld	r25, Z
    2f72:	91 11       	cpse	r25, r1
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <_Z16runFullCycleTestv+0xc8>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_SMS)==0);
    2f7c:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <gsm+0x2>
    2f80:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <gsm+0x3>
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 81       	ld	r25, Z
    2f88:	91 11       	cpse	r25, r1
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_Z10assertTrueb>

		//Reset
		gsm.MOCK_DATA_SENT_GPRS = "";
    2f90:	e2 e8       	ldi	r30, 0x82	; 130
    2f92:	f4 e0       	ldi	r31, 0x04	; 4
    2f94:	86 eb       	ldi	r24, 0xB6	; 182
    2f96:	93 e0       	ldi	r25, 0x03	; 3
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	80 83       	st	Z, r24
		gsm.MOCK_DATA_SENT_SMS = "";
    2f9c:	93 83       	std	Z+3, r25	; 0x03
    2f9e:	82 83       	std	Z+2, r24	; 0x02
	}
		
	boolean ret = true;
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
    2fa0:	8f ef       	ldi	r24, 0xFF	; 255
    2fa2:	c8 1a       	sub	r12, r24
    2fa4:	d8 0a       	sbc	r13, r24
    2fa6:	9c cf       	rjmp	.-200    	; 0x2ee0 <_Z16runFullCycleTestv+0x30>
		gsm.MOCK_DATA_SENT_GPRS = "";
		gsm.MOCK_DATA_SENT_SMS = "";
	}
	
	return ret;
}
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	ff 90       	pop	r15
    2fb4:	ef 90       	pop	r14
    2fb6:	df 90       	pop	r13
    2fb8:	cf 90       	pop	r12
    2fba:	08 95       	ret

00002fbc <_Z23runIntraCycleTimerTestsv>:

#endif //End define UNIT_TESTS

boolean runIntraCycleTimerTests(){
    2fbc:	af 92       	push	r10
    2fbe:	bf 92       	push	r11
    2fc0:	cf 92       	push	r12
    2fc2:	df 92       	push	r13
    2fc4:	ef 92       	push	r14
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	ad 97       	sbiw	r28, 0x2d	; 45
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    2fe0:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <readingTime>
    2fe4:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <readingTime+0x1>
    2fe8:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <readingTime+0x2>
    2fec:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <readingTime+0x3>
    2ff0:	0f 2e       	mov	r0, r31
    2ff2:	f0 e2       	ldi	r31, 0x20	; 32
    2ff4:	af 2e       	mov	r10, r31
    2ff6:	ff eb       	ldi	r31, 0xBF	; 191
    2ff8:	bf 2e       	mov	r11, r31
    2ffa:	f2 e0       	ldi	r31, 0x02	; 2
    2ffc:	cf 2e       	mov	r12, r31
    2ffe:	d1 2c       	mov	r13, r1
    3000:	f0 2d       	mov	r31, r0
    3002:	e1 2c       	mov	r14, r1
    3004:	f1 2c       	mov	r15, r1
    3006:	87 01       	movw	r16, r14
    3008:	e3 94       	inc	r14
    300a:	61 e0       	ldi	r22, 0x01	; 1
    300c:	ce 01       	movw	r24, r28
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	0e 94 84 1c 	call	0x3908	; 0x3908 <_ZN6TimingC1Ehmmm>
	
	testTimer.MOCK_ADVANCE_TIME(9*1000);  //not early
    3014:	48 e2       	ldi	r20, 0x28	; 40
    3016:	53 e2       	ldi	r21, 0x23	; 35
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	70 e0       	ldi	r23, 0x00	; 0
    301c:	ce 01       	movw	r24, r28
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN6Timing11onCycleLoopEv>
	assert(false, testTimer._at10Secs);
    302c:	2d 85       	ldd	r18, Y+13	; 0x0d
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	00 e0       	ldi	r16, 0x00	; 0
    3036:	10 e0       	ldi	r17, 0x00	; 0
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	cb 01       	movw	r24, r22
    303e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	testTimer.MOCK_ADVANCE_TIME(11*1000); //even if time passed
    3042:	48 ef       	ldi	r20, 0xF8	; 248
    3044:	5a e2       	ldi	r21, 0x2A	; 42
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	ce 01       	movw	r24, r28
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    3052:	ce 01       	movw	r24, r28
    3054:	01 96       	adiw	r24, 0x01	; 1
    3056:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN6Timing11onCycleLoopEv>
	assert(true, testTimer._at10Secs);
    305a:	2d 85       	ldd	r18, Y+13	; 0x0d
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	50 e0       	ldi	r21, 0x00	; 0
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	testTimer.MOCK_ADVANCE_TIME(12*1000); //only once
    306e:	40 ee       	ldi	r20, 0xE0	; 224
    3070:	5e e2       	ldi	r21, 0x2E	; 46
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	ce 01       	movw	r24, r28
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	0e 94 b8 1c 	call	0x3970	; 0x3970 <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    307e:	ce 01       	movw	r24, r28
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN6Timing11onCycleLoopEv>
	assert(false, testTimer._at10Secs);
    3086:	2d 85       	ldd	r18, Y+13	; 0x0d
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e0       	ldi	r20, 0x00	; 0
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	cb 01       	movw	r24, r22
    3094:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>

#endif //End define UNIT_TESTS

boolean runIntraCycleTimerTests(){
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	0e 94 b7 1c 	call	0x396e	; 0x396e <_ZN6TimingD1Ev>
	assert(true, testTimer._at10Secs);
	
	testTimer.MOCK_ADVANCE_TIME(12*1000); //only once
	testTimer.onCycleLoop();
	assert(false, testTimer._at10Secs);
}
    30a0:	ad 96       	adiw	r28, 0x2d	; 45
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	ff 90       	pop	r15
    30b6:	ef 90       	pop	r14
    30b8:	df 90       	pop	r13
    30ba:	cf 90       	pop	r12
    30bc:	bf 90       	pop	r11
    30be:	af 90       	pop	r10
    30c0:	08 95       	ret

000030c2 <_Z23runInterCycleTimerTestsv>:

boolean runInterCycleTimerTests(){
    30c2:	4f 92       	push	r4
    30c4:	5f 92       	push	r5
    30c6:	6f 92       	push	r6
    30c8:	7f 92       	push	r7
    30ca:	8f 92       	push	r8
    30cc:	9f 92       	push	r9
    30ce:	af 92       	push	r10
    30d0:	bf 92       	push	r11
    30d2:	cf 92       	push	r12
    30d4:	df 92       	push	r13
    30d6:	ef 92       	push	r14
    30d8:	ff 92       	push	r15
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	c2 56       	subi	r28, 0x62	; 98
    30e8:	d1 09       	sbc	r29, r1
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    30f4:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <readingTime>
    30f8:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <readingTime+0x1>
    30fc:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <readingTime+0x2>
    3100:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <readingTime+0x3>
    3104:	0f 2e       	mov	r0, r31
    3106:	f0 e2       	ldi	r31, 0x20	; 32
    3108:	af 2e       	mov	r10, r31
    310a:	ff eb       	ldi	r31, 0xBF	; 191
    310c:	bf 2e       	mov	r11, r31
    310e:	f2 e0       	ldi	r31, 0x02	; 2
    3110:	cf 2e       	mov	r12, r31
    3112:	d1 2c       	mov	r13, r1
    3114:	f0 2d       	mov	r31, r0
    3116:	e1 2c       	mov	r14, r1
    3118:	f1 2c       	mov	r15, r1
    311a:	87 01       	movw	r16, r14
    311c:	e3 94       	inc	r14
    311e:	61 e0       	ldi	r22, 0x01	; 1
    3120:	ce 01       	movw	r24, r28
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	0e 94 84 1c 	call	0x3908	; 0x3908 <_ZN6TimingC1Ehmmm>
	
	//Move forward and check daily-cycle flag set
	volatile uint32_t oneCycleTime = (INTRA_CYCLE_DOWNTIME+readingTime+LOOP_DELAY)/1000;
    3128:	40 90 13 01 	lds	r4, 0x0113	; 0x800113 <readingTime>
    312c:	50 90 14 01 	lds	r5, 0x0114	; 0x800114 <readingTime+0x1>
    3130:	60 90 15 01 	lds	r6, 0x0115	; 0x800115 <readingTime+0x2>
    3134:	70 90 16 01 	lds	r7, 0x0116	; 0x800116 <readingTime+0x3>
    3138:	c3 01       	movw	r24, r6
    313a:	b2 01       	movw	r22, r4
    313c:	6f 5d       	subi	r22, 0xDF	; 223
    313e:	70 44       	sbci	r23, 0x40	; 64
    3140:	8d 4f       	sbci	r24, 0xFD	; 253
    3142:	9f 4f       	sbci	r25, 0xFF	; 255
    3144:	28 ee       	ldi	r18, 0xE8	; 232
    3146:	33 e0       	ldi	r19, 0x03	; 3
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	50 e0       	ldi	r21, 0x00	; 0
    314c:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    3150:	2e a7       	std	Y+46, r18	; 0x2e
    3152:	3f a7       	std	Y+47, r19	; 0x2f
    3154:	48 ab       	std	Y+48, r20	; 0x30
    3156:	59 ab       	std	Y+49, r21	; 0x31
	volatile uint32_t cyclesInOneDay = (24UL*60*60)/oneCycleTime;
    3158:	2e a5       	ldd	r18, Y+46	; 0x2e
    315a:	3f a5       	ldd	r19, Y+47	; 0x2f
    315c:	48 a9       	ldd	r20, Y+48	; 0x30
    315e:	59 a9       	ldd	r21, Y+49	; 0x31
    3160:	60 e8       	ldi	r22, 0x80	; 128
    3162:	71 e5       	ldi	r23, 0x51	; 81
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    316c:	2a ab       	std	Y+50, r18	; 0x32
    316e:	3b ab       	std	Y+51, r19	; 0x33
    3170:	4c ab       	std	Y+52, r20	; 0x34
    3172:	5d ab       	std	Y+53, r21	; 0x35
	
	Timing t2(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    3174:	a3 01       	movw	r20, r6
    3176:	92 01       	movw	r18, r4
    3178:	61 e0       	ldi	r22, 0x01	; 1
    317a:	ce 01       	movw	r24, r28
    317c:	c6 96       	adiw	r24, 0x36	; 54
    317e:	0e 94 84 1c 	call	0x3908	; 0x3908 <_ZN6TimingC1Ehmmm>
	testTimer = t2;//new Timing(true, 1, 3*60); //say module wakes every 3 minutes
    3182:	8d e2       	ldi	r24, 0x2D	; 45
    3184:	fe 01       	movw	r30, r28
    3186:	f6 96       	adiw	r30, 0x36	; 54
    3188:	de 01       	movw	r26, r28
    318a:	11 96       	adiw	r26, 0x01	; 1
    318c:	01 90       	ld	r0, Z+
    318e:	0d 92       	st	X+, r0
    3190:	8a 95       	dec	r24
    3192:	e1 f7       	brne	.-8      	; 0x318c <_Z23runInterCycleTimerTestsv+0xca>
	testTimer.onCycleLoop();
    3194:	ce 01       	movw	r24, r28
    3196:	01 96       	adiw	r24, 0x01	; 1
    3198:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN6Timing11onCycleLoopEv>
	
	//The first is daily exactly once
	int32_t currTestCycle=0;
    319c:	c1 2c       	mov	r12, r1
    319e:	d1 2c       	mov	r13, r1
    31a0:	76 01       	movw	r14, r12
	for(;currTestCycle<cyclesInOneDay;currTestCycle++)
    31a2:	4c 2d       	mov	r20, r12
    31a4:	5d 2d       	mov	r21, r13
    31a6:	6e 2d       	mov	r22, r14
    31a8:	7f 2d       	mov	r23, r15
    31aa:	8a a9       	ldd	r24, Y+50	; 0x32
    31ac:	9b a9       	ldd	r25, Y+51	; 0x33
    31ae:	ac a9       	ldd	r26, Y+52	; 0x34
    31b0:	bd a9       	ldd	r27, Y+53	; 0x35
    31b2:	c8 16       	cp	r12, r24
    31b4:	d9 06       	cpc	r13, r25
    31b6:	ea 06       	cpc	r14, r26
    31b8:	fb 06       	cpc	r15, r27
    31ba:	b8 f4       	brcc	.+46     	; 0x31ea <_Z23runInterCycleTimerTestsv+0x128>
		assert(false, testTimer.isDailyCycle(currTestCycle));
    31bc:	b7 01       	movw	r22, r14
    31be:	a6 01       	movw	r20, r12
    31c0:	ce 01       	movw	r24, r28
    31c2:	01 96       	adiw	r24, 0x01	; 1
    31c4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e0       	ldi	r20, 0x00	; 0
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	00 e0       	ldi	r16, 0x00	; 0
    31d2:	10 e0       	ldi	r17, 0x00	; 0
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	cb 01       	movw	r24, r22
    31da:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	testTimer = t2;//new Timing(true, 1, 3*60); //say module wakes every 3 minutes
	testTimer.onCycleLoop();
	
	//The first is daily exactly once
	int32_t currTestCycle=0;
	for(;currTestCycle<cyclesInOneDay;currTestCycle++)
    31de:	2f ef       	ldi	r18, 0xFF	; 255
    31e0:	c2 1a       	sub	r12, r18
    31e2:	d2 0a       	sbc	r13, r18
    31e4:	e2 0a       	sbc	r14, r18
    31e6:	f2 0a       	sbc	r15, r18
    31e8:	dc cf       	rjmp	.-72     	; 0x31a2 <_Z23runInterCycleTimerTestsv+0xe0>
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
    31ea:	ce 01       	movw	r24, r28
    31ec:	01 96       	adiw	r24, 0x01	; 1
    31ee:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	00 e0       	ldi	r16, 0x00	; 0
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	61 e0       	ldi	r22, 0x01	; 1
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	c3 1a       	sub	r12, r19
    320e:	d3 0a       	sbc	r13, r19
    3210:	e3 0a       	sbc	r14, r19
    3212:	f3 0a       	sbc	r15, r19
			  -
			 (++currTestCycle*oneCycleTime)
    3214:	6e a5       	ldd	r22, Y+46	; 0x2e
    3216:	7f a5       	ldd	r23, Y+47	; 0x2f
    3218:	88 a9       	ldd	r24, Y+48	; 0x30
    321a:	99 a9       	ldd	r25, Y+49	; 0x31
    321c:	a7 01       	movw	r20, r14
    321e:	96 01       	movw	r18, r12
    3220:	0e 94 4b 33 	call	0x6696	; 0x6696 <__mulsi3>

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
			  -
    3224:	0f 2e       	mov	r0, r31
    3226:	81 2c       	mov	r8, r1
    3228:	f3 ea       	ldi	r31, 0xA3	; 163
    322a:	9f 2e       	mov	r9, r31
    322c:	f2 e0       	ldi	r31, 0x02	; 2
    322e:	af 2e       	mov	r10, r31
    3230:	b1 2c       	mov	r11, r1
    3232:	f0 2d       	mov	r31, r0
    3234:	a5 01       	movw	r20, r10
    3236:	94 01       	movw	r18, r8
    3238:	26 1b       	sub	r18, r22
    323a:	37 0b       	sbc	r19, r23
    323c:	48 0b       	sbc	r20, r24
    323e:	59 0b       	sbc	r21, r25
    3240:	da 01       	movw	r26, r20
    3242:	c9 01       	movw	r24, r18
			 (++currTestCycle*oneCycleTime)
			) > oneCycleTime)
    3244:	4e a5       	ldd	r20, Y+46	; 0x2e
    3246:	5f a5       	ldd	r21, Y+47	; 0x2f
    3248:	68 a9       	ldd	r22, Y+48	; 0x30
    324a:	79 a9       	ldd	r23, Y+49	; 0x31
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
    324c:	48 17       	cp	r20, r24
    324e:	59 07       	cpc	r21, r25
    3250:	6a 07       	cpc	r22, r26
    3252:	7b 07       	cpc	r23, r27
    3254:	90 f4       	brcc	.+36     	; 0x327a <_Z23runInterCycleTimerTestsv+0x1b8>
			  -
			 (++currTestCycle*oneCycleTime)
			) > oneCycleTime)
		assert(false, testTimer.isDailyCycle(currTestCycle));
    3256:	b7 01       	movw	r22, r14
    3258:	a6 01       	movw	r20, r12
    325a:	ce 01       	movw	r24, r28
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	00 e0       	ldi	r16, 0x00	; 0
    326c:	10 e0       	ldi	r17, 0x00	; 0
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	cb 01       	movw	r24, r22
    3274:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
    3278:	c8 cf       	rjmp	.-112    	; 0x320a <_Z23runInterCycleTimerTestsv+0x148>
			  -
			 (++currTestCycle*oneCycleTime)
			) > oneCycleTime)
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
    327a:	4c 2d       	mov	r20, r12
    327c:	5d 2d       	mov	r21, r13
    327e:	6e 2d       	mov	r22, r14
    3280:	7f 2d       	mov	r23, r15
    3282:	ce 01       	movw	r24, r28
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e0       	ldi	r20, 0x00	; 0
    3290:	50 e0       	ldi	r21, 0x00	; 0
    3292:	00 e0       	ldi	r16, 0x00	; 0
    3294:	10 e0       	ldi	r17, 0x00	; 0
    3296:	61 e0       	ldi	r22, 0x01	; 1
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//And 3rd cycle
	while(( (24UL*3*3600)
    32a2:	46 01       	movw	r8, r12
    32a4:	57 01       	movw	r10, r14
    32a6:	3f ef       	ldi	r19, 0xFF	; 255
    32a8:	83 1a       	sub	r8, r19
    32aa:	93 0a       	sbc	r9, r19
    32ac:	a3 0a       	sbc	r10, r19
    32ae:	b3 0a       	sbc	r11, r19
			  -
			(++currTestCycle*oneCycleTime)
    32b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    32b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    32b4:	88 a9       	ldd	r24, Y+48	; 0x30
    32b6:	99 a9       	ldd	r25, Y+49	; 0x31
    32b8:	a5 01       	movw	r20, r10
    32ba:	94 01       	movw	r18, r8
    32bc:	0e 94 4b 33 	call	0x6696	; 0x6696 <__mulsi3>

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
	
	//And 3rd cycle
	while(( (24UL*3*3600)
			  -
    32c0:	0f 2e       	mov	r0, r31
    32c2:	f0 e8       	ldi	r31, 0x80	; 128
    32c4:	4f 2e       	mov	r4, r31
    32c6:	f4 ef       	ldi	r31, 0xF4	; 244
    32c8:	5f 2e       	mov	r5, r31
    32ca:	f3 e0       	ldi	r31, 0x03	; 3
    32cc:	6f 2e       	mov	r6, r31
    32ce:	71 2c       	mov	r7, r1
    32d0:	f0 2d       	mov	r31, r0
    32d2:	a3 01       	movw	r20, r6
    32d4:	92 01       	movw	r18, r4
    32d6:	26 1b       	sub	r18, r22
    32d8:	37 0b       	sbc	r19, r23
    32da:	48 0b       	sbc	r20, r24
    32dc:	59 0b       	sbc	r21, r25
    32de:	da 01       	movw	r26, r20
    32e0:	c9 01       	movw	r24, r18
			(++currTestCycle*oneCycleTime)
			) > oneCycleTime)
    32e2:	4e a5       	ldd	r20, Y+46	; 0x2e
    32e4:	5f a5       	ldd	r21, Y+47	; 0x2f
    32e6:	68 a9       	ldd	r22, Y+48	; 0x30
    32e8:	79 a9       	ldd	r23, Y+49	; 0x31
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
	
	//And 3rd cycle
	while(( (24UL*3*3600)
    32ea:	48 17       	cp	r20, r24
    32ec:	59 07       	cpc	r21, r25
    32ee:	6a 07       	cpc	r22, r26
    32f0:	7b 07       	cpc	r23, r27
    32f2:	a0 f4       	brcc	.+40     	; 0x331c <_Z23runInterCycleTimerTestsv+0x25a>
			  -
			(++currTestCycle*oneCycleTime)
			) > oneCycleTime)
	assert(false, testTimer.isDailyCycle(currTestCycle));
    32f4:	b5 01       	movw	r22, r10
    32f6:	a4 01       	movw	r20, r8
    32f8:	ce 01       	movw	r24, r28
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	00 e0       	ldi	r16, 0x00	; 0
    330a:	10 e0       	ldi	r17, 0x00	; 0
    330c:	60 e0       	ldi	r22, 0x00	; 0
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	cb 01       	movw	r24, r22
    3312:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
	
	//And 3rd cycle
	while(( (24UL*3*3600)
    3316:	75 01       	movw	r14, r10
    3318:	64 01       	movw	r12, r8
    331a:	c3 cf       	rjmp	.-122    	; 0x32a2 <_Z23runInterCycleTimerTestsv+0x1e0>
			  -
			(++currTestCycle*oneCycleTime)
			) > oneCycleTime)
	assert(false, testTimer.isDailyCycle(currTestCycle));
		
	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+2~23:59:59
    331c:	48 2d       	mov	r20, r8
    331e:	59 2d       	mov	r21, r9
    3320:	6a 2d       	mov	r22, r10
    3322:	7b 2d       	mov	r23, r11
    3324:	ce 01       	movw	r24, r28
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e0       	ldi	r20, 0x00	; 0
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	00 e0       	ldi	r16, 0x00	; 0
    3336:	10 e0       	ldi	r17, 0x00	; 0
    3338:	61 e0       	ldi	r22, 0x01	; 1
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	assert(false, testTimer.isDailyCycle(++currTestCycle)); //at T+3~00:00:01
    3344:	b7 01       	movw	r22, r14
    3346:	a6 01       	movw	r20, r12
    3348:	4e 5f       	subi	r20, 0xFE	; 254
    334a:	5f 4f       	sbci	r21, 0xFF	; 255
    334c:	6f 4f       	sbci	r22, 0xFF	; 255
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	60 e0       	ldi	r22, 0x00	; 0
    3362:	70 e0       	ldi	r23, 0x00	; 0
    3364:	cb 01       	movw	r24, r22
    3366:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z6assertmmPc>
	
	//Move forward and check daily-cycle flag set
	volatile uint32_t oneCycleTime = (INTRA_CYCLE_DOWNTIME+readingTime+LOOP_DELAY)/1000;
	volatile uint32_t cyclesInOneDay = (24UL*60*60)/oneCycleTime;
	
	Timing t2(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    336a:	ce 01       	movw	r24, r28
    336c:	c6 96       	adiw	r24, 0x36	; 54
    336e:	0e 94 b7 1c 	call	0x396e	; 0x396e <_ZN6TimingD1Ev>
	assert(false, testTimer._at10Secs);
}

boolean runInterCycleTimerTests(){
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    3372:	ce 01       	movw	r24, r28
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	0e 94 b7 1c 	call	0x396e	; 0x396e <_ZN6TimingD1Ev>
			) > oneCycleTime)
	assert(false, testTimer.isDailyCycle(currTestCycle));
		
	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+2~23:59:59
	assert(false, testTimer.isDailyCycle(++currTestCycle)); //at T+3~00:00:01
}
    337a:	ce 59       	subi	r28, 0x9E	; 158
    337c:	df 4f       	sbci	r29, 0xFF	; 255
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	ff 90       	pop	r15
    3392:	ef 90       	pop	r14
    3394:	df 90       	pop	r13
    3396:	cf 90       	pop	r12
    3398:	bf 90       	pop	r11
    339a:	af 90       	pop	r10
    339c:	9f 90       	pop	r9
    339e:	8f 90       	pop	r8
    33a0:	7f 90       	pop	r7
    33a2:	6f 90       	pop	r6
    33a4:	5f 90       	pop	r5
    33a6:	4f 90       	pop	r4
    33a8:	08 95       	ret

000033aa <_Z11runAllTestsv>:
bool runAllTests()
{
#ifdef UNIT_TESTS

	//Non-looping run-once tests
	if (_isAtCycleStart)
    33aa:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_isAtCycleStart>
    33ae:	88 23       	and	r24, r24
    33b0:	11 f1       	breq	.+68     	; 0x33f6 <_Z11runAllTestsv+0x4c>
	{		
		initialiseModulePristine(1);
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
		runSendTest();
    33ba:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_Z11runSendTestv>
	
		initialiseModulePristine(1);
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
		runPadTest();
    33c6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_Z10runPadTestv>
	
		initialiseModulePristine(1);
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
		runLoadTest();
    33d2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_Z11runLoadTestv>

		initialiseModulePristine(1);
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
		runIntraCycleTimerTests();
    33de:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_Z23runIntraCycleTimerTestsv>

		initialiseModulePristine(1);
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
		runInterCycleTimerTests();
    33ea:	0e 94 61 18 	call	0x30c2	; 0x30c2 <_Z23runInterCycleTimerTestsv>
		
		initialiseModulePristine(1);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z24initialiseModulePristinej>
	}
	
	//custom initialise timing()
	
	//Looping test
	bool doContinue = runFullCycleTest();
    33f6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_Z16runFullCycleTestv>
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    33fa:	08 95       	ret

000033fc <loop>:
//boolean _isWeeklyCycle;   //Will be true ONLY once in 1 particular loop in 1 particular cycle

boolean _moduleHasShutdown;
unsigned long _currCycleNumber = 0;

void loop() {
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	00 d0       	rcall	.+0      	; 0x3402 <loop+0x6>
    3402:	00 d0       	rcall	.+0      	; 0x3404 <loop+0x8>
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62

	if (_moduleHasShutdown)
    3408:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <_moduleHasShutdown>
    340c:	81 11       	cpse	r24, r1
    340e:	52 c0       	rjmp	.+164    	; 0x34b4 <loop+0xb8>
		return;

	volatile unsigned long currentMillis = timer.getMillis();
    3410:	85 e5       	ldi	r24, 0x55	; 85
    3412:	94 e0       	ldi	r25, 0x04	; 4
    3414:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_ZN6Timing9getMillisEv>
    3418:	69 83       	std	Y+1, r22	; 0x01
    341a:	7a 83       	std	Y+2, r23	; 0x02
    341c:	8b 83       	std	Y+3, r24	; 0x03
    341e:	9c 83       	std	Y+4, r25	; 0x04

	//If board being powered up for the first time, start timer before running 1st cycle
	if (_isAtCycleStart) {
    3420:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_isAtCycleStart>
    3424:	88 23       	and	r24, r24
    3426:	51 f1       	breq	.+84     	; 0x347c <loop+0x80>
				
		//Update bootcount
		_currCycleNumber = 1 + mem.getLongFromMemory(MEMLOC_BOOTCOUNT);
    3428:	68 e0       	ldi	r22, 0x08	; 8
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	83 ea       	ldi	r24, 0xA3	; 163
    342e:	95 e0       	ldi	r25, 0x05	; 5
    3430:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN12RmMemManager17getLongFromMemoryEj>
    3434:	9b 01       	movw	r18, r22
    3436:	ac 01       	movw	r20, r24
    3438:	2f 5f       	subi	r18, 0xFF	; 255
    343a:	3f 4f       	sbci	r19, 0xFF	; 255
    343c:	4f 4f       	sbci	r20, 0xFF	; 255
    343e:	5f 4f       	sbci	r21, 0xFF	; 255
    3440:	20 93 4e 04 	sts	0x044E, r18	; 0x80044e <_currCycleNumber>
    3444:	30 93 4f 04 	sts	0x044F, r19	; 0x80044f <_currCycleNumber+0x1>
    3448:	40 93 50 04 	sts	0x0450, r20	; 0x800450 <_currCycleNumber+0x2>
    344c:	50 93 51 04 	sts	0x0451, r21	; 0x800451 <_currCycleNumber+0x3>
		mem.setLongToMemory(MEMLOC_BOOTCOUNT, _currCycleNumber);
    3450:	68 e0       	ldi	r22, 0x08	; 8
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	83 ea       	ldi	r24, 0xA3	; 163
    3456:	95 e0       	ldi	r25, 0x05	; 5
    3458:	0e 94 c6 05 	call	0xb8c	; 0xb8c <_ZN12RmMemManager15setLongToMemoryEjm>
					
		_isDailyCycle = timer.isDailyCycle(_currCycleNumber);
    345c:	40 91 4e 04 	lds	r20, 0x044E	; 0x80044e <_currCycleNumber>
    3460:	50 91 4f 04 	lds	r21, 0x044F	; 0x80044f <_currCycleNumber+0x1>
    3464:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <_currCycleNumber+0x2>
    3468:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <_currCycleNumber+0x3>
    346c:	85 e5       	ldi	r24, 0x55	; 85
    346e:	94 e0       	ldi	r25, 0x04	; 4
    3470:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <_ZN6Timing12isDailyCycleEm>
    3474:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <_isDailyCycle>
		
		//Reset all data before new cycle begins
		//Strictly not necessary as it gets re-booted each time
		resetAtCycleStart();
    3478:	0e 94 04 09 	call	0x1208	; 0x1208 <_Z17resetAtCycleStartv>
	}

	timer.onCycleLoop();
    347c:	85 e5       	ldi	r24, 0x55	; 85
    347e:	94 e0       	ldi	r25, 0x04	; 4
    3480:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <_ZN6Timing11onCycleLoopEv>
	//Run the cycle !
	boolean doContinue = false;
	
	//Toggle LED flash first to show any error conditions etc. incase next loop errors out
	//and we can't call flash
	mem.flashLED();
    3484:	83 ea       	ldi	r24, 0xA3	; 163
    3486:	95 e0       	ldi	r25, 0x05	; 5
    3488:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN12RmMemManager8flashLEDEv>
	
	#ifdef UNIT_TESTS
		doContinue = runAllTests();
    348c:	0e 94 d5 19 	call	0x33aa	; 0x33aa <_Z11runAllTestsv>
			doContinue = loopSystemTest();
		else
			doContinue = loopCycle();
	#endif
	
	_isAtCycleStart = false;
    3490:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <_isAtCycleStart>

	//If all work done, shut down
	if (!doContinue) {
    3494:	81 11       	cpse	r24, r1
    3496:	08 c0       	rjmp	.+16     	; 0x34a8 <loop+0xac>
		
		RM_LOG(F("END CYCLE"));
    3498:	62 e3       	ldi	r22, 0x32	; 50
    349a:	73 e0       	ldi	r23, 0x03	; 3
    349c:	83 e6       	ldi	r24, 0x63	; 99
    349e:	96 e0       	ldi	r25, 0x06	; 6
    34a0:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
		shutdown();
    34a4:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z8shutdownv>
	}

	//Try POST to site with large timeout
	//(2 minutes)

	delay(LOOP_DELAY);
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	70 e0       	ldi	r23, 0x00	; 0
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
}
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	08 95       	ret

000034c2 <_GLOBAL__sub_I__isSystemTest>:
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    34c2:	6f ef       	ldi	r22, 0xFF	; 255
    34c4:	7f ef       	ldi	r23, 0xFF	; 255
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	0e 94 bb 07 	call	0xf76	; 0xf76 <_Z41__static_initialization_and_destruction_0ii>
    34ce:	08 95       	ret

000034d0 <_GLOBAL__sub_D__isSystemTest>:
    34d0:	6f ef       	ldi	r22, 0xFF	; 255
    34d2:	7f ef       	ldi	r23, 0xFF	; 255
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0e 94 bb 07 	call	0xf76	; 0xf76 <_Z41__static_initialization_and_destruction_0ii>
    34dc:	08 95       	ret

000034de <twi_transmit>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    34de:	ac 01       	movw	r20, r24
    34e0:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <twi_txBufferLength>
    34e4:	26 2f       	mov	r18, r22
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	29 0f       	add	r18, r25
    34ea:	31 1d       	adc	r19, r1
    34ec:	21 32       	cpi	r18, 0x21	; 33
    34ee:	31 05       	cpc	r19, r1
    34f0:	f4 f4       	brge	.+60     	; 0x352e <twi_transmit+0x50>
    34f2:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <twi_state>
    34f6:	84 30       	cpi	r24, 0x04	; 4
    34f8:	e1 f4       	brne	.+56     	; 0x3532 <twi_transmit+0x54>
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	0f c0       	rjmp	.+30     	; 0x351c <twi_transmit+0x3e>
    34fe:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <twi_txBufferLength>
    3502:	29 2f       	mov	r18, r25
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	f9 01       	movw	r30, r18
    3508:	e8 0f       	add	r30, r24
    350a:	f1 1d       	adc	r31, r1
    350c:	da 01       	movw	r26, r20
    350e:	a2 0f       	add	r26, r18
    3510:	b3 1f       	adc	r27, r19
    3512:	8c 91       	ld	r24, X
    3514:	e8 53       	subi	r30, 0x38	; 56
    3516:	fa 4f       	sbci	r31, 0xFA	; 250
    3518:	80 83       	st	Z, r24
    351a:	9f 5f       	subi	r25, 0xFF	; 255
    351c:	96 17       	cp	r25, r22
    351e:	78 f3       	brcs	.-34     	; 0x34fe <twi_transmit+0x20>
    3520:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <twi_txBufferLength>
    3524:	68 0f       	add	r22, r24
    3526:	60 93 c6 05 	sts	0x05C6, r22	; 0x8005c6 <twi_txBufferLength>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	08 95       	ret
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	08 95       	ret
    3532:	82 e0       	ldi	r24, 0x02	; 2
    3534:	08 95       	ret

00003536 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    3536:	88 23       	and	r24, r24
    3538:	21 f0       	breq	.+8      	; 0x3542 <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    353a:	85 ec       	ldi	r24, 0xC5	; 197
    353c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3540:	08 95       	ret
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3542:	85 e8       	ldi	r24, 0x85	; 133
    3544:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3548:	08 95       	ret

0000354a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    354a:	85 ed       	ldi	r24, 0xD5	; 213
    354c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3550:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3554:	84 fd       	sbrc	r24, 4
    3556:	fc cf       	rjmp	.-8      	; 0x3550 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3558:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <twi_state>
    355c:	08 95       	ret

0000355e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    355e:	85 ec       	ldi	r24, 0xC5	; 197
    3560:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3564:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <twi_state>
    3568:	08 95       	ret

0000356a <__vector_24>:
}

ISR(TWI_vect)
{
    356a:	1f 92       	push	r1
    356c:	0f 92       	push	r0
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	0f 92       	push	r0
    3572:	11 24       	eor	r1, r1
    3574:	2f 93       	push	r18
    3576:	3f 93       	push	r19
    3578:	4f 93       	push	r20
    357a:	5f 93       	push	r21
    357c:	6f 93       	push	r22
    357e:	7f 93       	push	r23
    3580:	8f 93       	push	r24
    3582:	9f 93       	push	r25
    3584:	af 93       	push	r26
    3586:	bf 93       	push	r27
    3588:	ef 93       	push	r30
    358a:	ff 93       	push	r31
  switch(TW_STATUS){
    358c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3590:	e8 2f       	mov	r30, r24
    3592:	e8 7f       	andi	r30, 0xF8	; 248
    3594:	8e 2f       	mov	r24, r30
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	89 3c       	cpi	r24, 0xC9	; 201
    359a:	91 05       	cpc	r25, r1
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <__vector_24+0x36>
    359e:	f5 c0       	rjmp	.+490    	; 0x378a <__vector_24+0x220>
    35a0:	fc 01       	movw	r30, r24
    35a2:	ec 5c       	subi	r30, 0xCC	; 204
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	0c 94 b0 33 	jmp	0x6760	; 0x6760 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    35aa:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <twi_slarw>
    35ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      twi_reply(1);
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
      break;
    35b8:	e8 c0       	rjmp	.+464    	; 0x378a <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    35ba:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <twi_masterBufferIndex>
    35be:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <twi_masterBufferLength>
    35c2:	98 17       	cp	r25, r24
    35c4:	80 f4       	brcc	.+32     	; 0x35e6 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    35c6:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <twi_masterBufferIndex>
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	8e 0f       	add	r24, r30
    35ce:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <twi_masterBufferIndex>
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	e6 51       	subi	r30, 0x16	; 22
    35d6:	fa 4f       	sbci	r31, 0xFA	; 250
    35d8:	80 81       	ld	r24, Z
    35da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        twi_reply(1);
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    35e4:	d2 c0       	rjmp	.+420    	; 0x378a <__vector_24+0x220>
      }else{
	if (twi_sendStop)
    35e6:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <twi_sendStop>
    35ea:	88 23       	and	r24, r24
    35ec:	19 f0       	breq	.+6      	; 0x35f4 <__vector_24+0x8a>
          twi_stop();
    35ee:	0e 94 a5 1a 	call	0x354a	; 0x354a <twi_stop>
    35f2:	cb c0       	rjmp	.+406    	; 0x378a <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    35fa:	84 ea       	ldi	r24, 0xA4	; 164
    35fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
    3600:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <twi_state>
    3604:	c2 c0       	rjmp	.+388    	; 0x378a <__vector_24+0x220>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3606:	80 e2       	ldi	r24, 0x20	; 32
    3608:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <twi_error>
      twi_stop();
    360c:	0e 94 a5 1a 	call	0x354a	; 0x354a <twi_stop>
      break;
    3610:	bc c0       	rjmp	.+376    	; 0x378a <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3612:	80 e3       	ldi	r24, 0x30	; 48
    3614:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <twi_error>
      twi_stop();
    3618:	0e 94 a5 1a 	call	0x354a	; 0x354a <twi_stop>
      break;
    361c:	b6 c0       	rjmp	.+364    	; 0x378a <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    361e:	88 e3       	ldi	r24, 0x38	; 56
    3620:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <twi_error>
      twi_releaseBus();
    3624:	0e 94 af 1a 	call	0x355e	; 0x355e <twi_releaseBus>
      break;
    3628:	b0 c0       	rjmp	.+352    	; 0x378a <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    362a:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <twi_masterBufferIndex>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	8e 0f       	add	r24, r30
    3632:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <twi_masterBufferIndex>
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    363c:	e6 51       	subi	r30, 0x16	; 22
    363e:	fa 4f       	sbci	r31, 0xFA	; 250
    3640:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3642:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <twi_masterBufferIndex>
    3646:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <twi_masterBufferLength>
    364a:	98 17       	cp	r25, r24
    364c:	20 f4       	brcc	.+8      	; 0x3656 <__vector_24+0xec>
        twi_reply(1);
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    3654:	9a c0       	rjmp	.+308    	; 0x378a <__vector_24+0x220>
      }else{
        twi_reply(0);
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    365c:	96 c0       	rjmp	.+300    	; 0x378a <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    365e:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <twi_masterBufferIndex>
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	8e 0f       	add	r24, r30
    3666:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <twi_masterBufferIndex>
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3670:	e6 51       	subi	r30, 0x16	; 22
    3672:	fa 4f       	sbci	r31, 0xFA	; 250
    3674:	80 83       	st	Z, r24
	if (twi_sendStop)
    3676:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <twi_sendStop>
    367a:	88 23       	and	r24, r24
    367c:	19 f0       	breq	.+6      	; 0x3684 <__vector_24+0x11a>
          twi_stop();
    367e:	0e 94 a5 1a 	call	0x354a	; 0x354a <twi_stop>
    3682:	83 c0       	rjmp	.+262    	; 0x378a <__vector_24+0x220>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	80 93 0e 06 	sts	0x060E, r24	; 0x80060e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    368a:	84 ea       	ldi	r24, 0xA4	; 164
    368c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
    3690:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <twi_state>
    3694:	7a c0       	rjmp	.+244    	; 0x378a <__vector_24+0x220>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3696:	0e 94 a5 1a 	call	0x354a	; 0x354a <twi_stop>
      break;
    369a:	77 c0       	rjmp	.+238    	; 0x378a <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    369c:	83 e0       	ldi	r24, 0x03	; 3
    369e:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    36a2:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <twi_rxBufferIndex>
      twi_reply(1);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
      break;
    36ac:	6e c0       	rjmp	.+220    	; 0x378a <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    36ae:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_rxBufferIndex>
    36b2:	80 32       	cpi	r24, 0x20	; 32
    36b4:	80 f4       	brcc	.+32     	; 0x36d6 <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    36b6:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <twi_rxBufferIndex>
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	8e 0f       	add	r24, r30
    36be:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_rxBufferIndex>
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    36c8:	ea 55       	subi	r30, 0x5A	; 90
    36ca:	fa 4f       	sbci	r31, 0xFA	; 250
    36cc:	80 83       	st	Z, r24
        twi_reply(1);
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    36d4:	5a c0       	rjmp	.+180    	; 0x378a <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    36dc:	56 c0       	rjmp	.+172    	; 0x378a <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    36de:	0e 94 af 1a 	call	0x355e	; 0x355e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    36e2:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_rxBufferIndex>
    36e6:	80 32       	cpi	r24, 0x20	; 32
    36e8:	30 f4       	brcc	.+12     	; 0x36f6 <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    36ea:	e0 91 a5 05 	lds	r30, 0x05A5	; 0x8005a5 <twi_rxBufferIndex>
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	ea 55       	subi	r30, 0x5A	; 90
    36f2:	fa 4f       	sbci	r31, 0xFA	; 250
    36f4:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    36f6:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <twi_rxBufferIndex>
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	e0 91 0a 06 	lds	r30, 0x060A	; 0x80060a <twi_onSlaveReceive>
    3700:	f0 91 0b 06 	lds	r31, 0x060B	; 0x80060b <twi_onSlaveReceive+0x1>
    3704:	86 ea       	ldi	r24, 0xA6	; 166
    3706:	95 e0       	ldi	r25, 0x05	; 5
    3708:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    370a:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <twi_rxBufferIndex>
      break;
    370e:	3d c0       	rjmp	.+122    	; 0x378a <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
      break;
    3716:	39 c0       	rjmp	.+114    	; 0x378a <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3718:	84 e0       	ldi	r24, 0x04	; 4
    371a:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    371e:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3722:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3726:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <twi_onSlaveTransmit>
    372a:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <twi_onSlaveTransmit+0x1>
    372e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3730:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <twi_txBufferLength>
    3734:	81 11       	cpse	r24, r1
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    373e:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3742:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <twi_txBufferIndex>
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	8e 0f       	add	r24, r30
    374a:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <twi_txBufferIndex>
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	e8 53       	subi	r30, 0x38	; 56
    3752:	fa 4f       	sbci	r31, 0xFA	; 250
    3754:	80 81       	ld	r24, Z
    3756:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    375a:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <twi_txBufferIndex>
    375e:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <twi_txBufferLength>
    3762:	98 17       	cp	r25, r24
    3764:	20 f4       	brcc	.+8      	; 0x376e <__vector_24+0x204>
        twi_reply(1);
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    376c:	0e c0       	rjmp	.+28     	; 0x378a <__vector_24+0x220>
      }else{
        twi_reply(0);
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
    3774:	0a c0       	rjmp	.+20     	; 0x378a <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	0e 94 9b 1a 	call	0x3536	; 0x3536 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    377c:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <twi_state>
      break;
    3780:	04 c0       	rjmp	.+8      	; 0x378a <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3782:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <twi_error>
      twi_stop();
    3786:	0e 94 a5 1a 	call	0x354a	; 0x354a <twi_stop>
      break;
  }
}
    378a:	ff 91       	pop	r31
    378c:	ef 91       	pop	r30
    378e:	bf 91       	pop	r27
    3790:	af 91       	pop	r26
    3792:	9f 91       	pop	r25
    3794:	8f 91       	pop	r24
    3796:	7f 91       	pop	r23
    3798:	6f 91       	pop	r22
    379a:	5f 91       	pop	r21
    379c:	4f 91       	pop	r20
    379e:	3f 91       	pop	r19
    37a0:	2f 91       	pop	r18
    37a2:	0f 90       	pop	r0
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	0f 90       	pop	r0
    37a8:	1f 90       	pop	r1
    37aa:	18 95       	reti

000037ac <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    37ac:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <_ZN7TwoWire14rxBufferLengthE>
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	20 91 42 06 	lds	r18, 0x0642	; 0x800642 <_ZN7TwoWire13rxBufferIndexE>
    37b6:	82 1b       	sub	r24, r18
    37b8:	91 09       	sbc	r25, r1
    37ba:	08 95       	ret

000037bc <_ZN7TwoWire4readEv>:
    37bc:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <_ZN7TwoWire13rxBufferIndexE>
    37c0:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <_ZN7TwoWire14rxBufferLengthE>
    37c4:	98 17       	cp	r25, r24
    37c6:	50 f4       	brcc	.+20     	; 0x37dc <_ZN7TwoWire4readEv+0x20>
    37c8:	e9 2f       	mov	r30, r25
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	ed 5b       	subi	r30, 0xBD	; 189
    37ce:	f9 4f       	sbci	r31, 0xF9	; 249
    37d0:	20 81       	ld	r18, Z
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	9f 5f       	subi	r25, 0xFF	; 255
    37d6:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <_ZN7TwoWire13rxBufferIndexE>
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <_ZN7TwoWire4readEv+0x24>
    37dc:	2f ef       	ldi	r18, 0xFF	; 255
    37de:	3f ef       	ldi	r19, 0xFF	; 255
    37e0:	c9 01       	movw	r24, r18
    37e2:	08 95       	ret

000037e4 <_ZN7TwoWire4peekEv>:
    37e4:	e0 91 42 06 	lds	r30, 0x0642	; 0x800642 <_ZN7TwoWire13rxBufferIndexE>
    37e8:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <_ZN7TwoWire14rxBufferLengthE>
    37ec:	e8 17       	cp	r30, r24
    37ee:	30 f4       	brcc	.+12     	; 0x37fc <_ZN7TwoWire4peekEv+0x18>
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	ed 5b       	subi	r30, 0xBD	; 189
    37f4:	f9 4f       	sbci	r31, 0xF9	; 249
    37f6:	80 81       	ld	r24, Z
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	08 95       	ret
    37fc:	8f ef       	ldi	r24, 0xFF	; 255
    37fe:	9f ef       	ldi	r25, 0xFF	; 255
    3800:	08 95       	ret

00003802 <_ZN7TwoWire5flushEv>:
    3802:	08 95       	ret

00003804 <_ZN7TwoWire5writeEPKhj>:
    3804:	cf 92       	push	r12
    3806:	df 92       	push	r13
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	8c 01       	movw	r16, r24
    3816:	6b 01       	movw	r12, r22
    3818:	7a 01       	movw	r14, r20
    381a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <_ZN7TwoWire12transmittingE>
    381e:	88 23       	and	r24, r24
    3820:	99 f0       	breq	.+38     	; 0x3848 <_ZN7TwoWire5writeEPKhj+0x44>
    3822:	c0 e0       	ldi	r28, 0x00	; 0
    3824:	d0 e0       	ldi	r29, 0x00	; 0
    3826:	ce 15       	cp	r28, r14
    3828:	df 05       	cpc	r29, r15
    382a:	90 f4       	brcc	.+36     	; 0x3850 <_ZN7TwoWire5writeEPKhj+0x4c>
    382c:	d8 01       	movw	r26, r16
    382e:	ed 91       	ld	r30, X+
    3830:	fc 91       	ld	r31, X
    3832:	01 90       	ld	r0, Z+
    3834:	f0 81       	ld	r31, Z
    3836:	e0 2d       	mov	r30, r0
    3838:	d6 01       	movw	r26, r12
    383a:	ac 0f       	add	r26, r28
    383c:	bd 1f       	adc	r27, r29
    383e:	6c 91       	ld	r22, X
    3840:	c8 01       	movw	r24, r16
    3842:	09 95       	icall
    3844:	21 96       	adiw	r28, 0x01	; 1
    3846:	ef cf       	rjmp	.-34     	; 0x3826 <_ZN7TwoWire5writeEPKhj+0x22>
    3848:	64 2f       	mov	r22, r20
    384a:	c6 01       	movw	r24, r12
    384c:	0e 94 6f 1a 	call	0x34de	; 0x34de <twi_transmit>
    3850:	c7 01       	movw	r24, r14
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	ff 90       	pop	r15
    385c:	ef 90       	pop	r14
    385e:	df 90       	pop	r13
    3860:	cf 90       	pop	r12
    3862:	08 95       	ret

00003864 <_ZN7TwoWire5writeEh>:
    3864:	cf 93       	push	r28
    3866:	df 93       	push	r29
    3868:	1f 92       	push	r1
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	fc 01       	movw	r30, r24
    3870:	69 83       	std	Y+1, r22	; 0x01
    3872:	90 91 1e 06 	lds	r25, 0x061E	; 0x80061e <_ZN7TwoWire12transmittingE>
    3876:	99 23       	and	r25, r25
    3878:	d9 f0       	breq	.+54     	; 0x38b0 <_ZN7TwoWire5writeEh+0x4c>
    387a:	90 91 1f 06 	lds	r25, 0x061F	; 0x80061f <_ZN7TwoWire14txBufferLengthE>
    387e:	90 32       	cpi	r25, 0x20	; 32
    3880:	38 f0       	brcs	.+14     	; 0x3890 <_ZN7TwoWire5writeEh+0x2c>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	93 83       	std	Z+3, r25	; 0x03
    3888:	82 83       	std	Z+2, r24	; 0x02
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	17 c0       	rjmp	.+46     	; 0x38be <_ZN7TwoWire5writeEh+0x5a>
    3890:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <_ZN7TwoWire13txBufferIndexE>
    3894:	e8 2f       	mov	r30, r24
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	ef 5d       	subi	r30, 0xDF	; 223
    389a:	f9 4f       	sbci	r31, 0xF9	; 249
    389c:	99 81       	ldd	r25, Y+1	; 0x01
    389e:	90 83       	st	Z, r25
    38a0:	8f 5f       	subi	r24, 0xFF	; 255
    38a2:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <_ZN7TwoWire13txBufferIndexE>
    38a6:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <_ZN7TwoWire14txBufferLengthE>
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	07 c0       	rjmp	.+14     	; 0x38be <_ZN7TwoWire5writeEh+0x5a>
    38b0:	61 e0       	ldi	r22, 0x01	; 1
    38b2:	ce 01       	movw	r24, r28
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	0e 94 6f 1a 	call	0x34de	; 0x34de <twi_transmit>
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	0f 90       	pop	r0
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	08 95       	ret

000038c6 <_ZN7TwoWireC1Ev>:
    38c6:	fc 01       	movw	r30, r24
    38c8:	13 82       	std	Z+3, r1	; 0x03
    38ca:	12 82       	std	Z+2, r1	; 0x02
    38cc:	88 ee       	ldi	r24, 0xE8	; 232
    38ce:	93 e0       	ldi	r25, 0x03	; 3
    38d0:	a0 e0       	ldi	r26, 0x00	; 0
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	84 83       	std	Z+4, r24	; 0x04
    38d6:	95 83       	std	Z+5, r25	; 0x05
    38d8:	a6 83       	std	Z+6, r26	; 0x06
    38da:	b7 83       	std	Z+7, r27	; 0x07
    38dc:	88 e9       	ldi	r24, 0x98	; 152
    38de:	93 e0       	ldi	r25, 0x03	; 3
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	08 95       	ret

000038e6 <_Z41__static_initialization_and_destruction_0ii>:
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	39 f4       	brne	.+14     	; 0x38f8 <_Z41__static_initialization_and_destruction_0ii+0x12>
    38ea:	6f 3f       	cpi	r22, 0xFF	; 255
    38ec:	7f 4f       	sbci	r23, 0xFF	; 255
    38ee:	21 f4       	brne	.+8      	; 0x38f8 <_Z41__static_initialization_and_destruction_0ii+0x12>
    38f0:	82 e1       	ldi	r24, 0x12	; 18
    38f2:	96 e0       	ldi	r25, 0x06	; 6
    38f4:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <_ZN7TwoWireC1Ev>
    38f8:	08 95       	ret

000038fa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    38fa:	6f ef       	ldi	r22, 0xFF	; 255
    38fc:	7f ef       	ldi	r23, 0xFF	; 255
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <_Z41__static_initialization_and_destruction_0ii>
    3906:	08 95       	ret

00003908 <_ZN6TimingC1Ehmmm>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "Timing.h"

Timing::Timing(uint8_t isMock, volatile uint32_t readingTime, volatile uint32_t loopDelay, volatile uint32_t intercycleDownTime)
    3908:	af 92       	push	r10
    390a:	bf 92       	push	r11
    390c:	cf 92       	push	r12
    390e:	df 92       	push	r13
    3910:	ef 92       	push	r14
    3912:	ff 92       	push	r15
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	fc 01       	movw	r30, r24
    391a:	10 82       	st	Z, r1
    391c:	11 82       	std	Z+1, r1	; 0x01
    391e:	12 82       	std	Z+2, r1	; 0x02
    3920:	13 82       	std	Z+3, r1	; 0x03
    3922:	14 82       	std	Z+4, r1	; 0x04
    3924:	15 82       	std	Z+5, r1	; 0x05
    3926:	16 82       	std	Z+6, r1	; 0x06
    3928:	17 82       	std	Z+7, r1	; 0x07
    392a:	10 86       	std	Z+8, r1	; 0x08
    392c:	11 86       	std	Z+9, r1	; 0x09
    392e:	12 86       	std	Z+10, r1	; 0x0a
    3930:	13 86       	std	Z+11, r1	; 0x0b
    3932:	11 8e       	std	Z+25, r1	; 0x19
    3934:	12 8e       	std	Z+26, r1	; 0x1a
    3936:	13 8e       	std	Z+27, r1	; 0x1b
    3938:	14 8e       	std	Z+28, r1	; 0x1c
    393a:	15 8e       	std	Z+29, r1	; 0x1d
    393c:	16 8e       	std	Z+30, r1	; 0x1e
    393e:	17 8e       	std	Z+31, r1	; 0x1f
    3940:	10 a2       	std	Z+32, r1	; 0x20
{
	_loopDelay = loopDelay;
    3942:	e4 82       	std	Z+4, r14	; 0x04
    3944:	f5 82       	std	Z+5, r15	; 0x05
    3946:	06 83       	std	Z+6, r16	; 0x06
    3948:	17 83       	std	Z+7, r17	; 0x07
	_readingTime = readingTime;
    394a:	20 87       	std	Z+8, r18	; 0x08
    394c:	31 87       	std	Z+9, r19	; 0x09
    394e:	42 87       	std	Z+10, r20	; 0x0a
    3950:	53 87       	std	Z+11, r21	; 0x0b
	_intercycleDownTime = intercycleDownTime;
    3952:	a0 82       	st	Z, r10
    3954:	b1 82       	std	Z+1, r11	; 0x01
    3956:	c2 82       	std	Z+2, r12	; 0x02
    3958:	d3 82       	std	Z+3, r13	; 0x03
	_isMock = isMock;
    395a:	60 8f       	std	Z+24, r22	; 0x18
}
    395c:	1f 91       	pop	r17
    395e:	0f 91       	pop	r16
    3960:	ff 90       	pop	r15
    3962:	ef 90       	pop	r14
    3964:	df 90       	pop	r13
    3966:	cf 90       	pop	r12
    3968:	bf 90       	pop	r11
    396a:	af 90       	pop	r10
    396c:	08 95       	ret

0000396e <_ZN6TimingD1Ev>:

Timing::~Timing() {}
    396e:	08 95       	ret

00003970 <_ZN6Timing17MOCK_ADVANCE_TIMEEm>:

void Timing::MOCK_ADVANCE_TIME(unsigned long milliseconds){
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
	_MOCK_ADVANCED_BY += milliseconds;
    3974:	fc 01       	movw	r30, r24
    3976:	01 8d       	ldd	r16, Z+25	; 0x19
    3978:	12 8d       	ldd	r17, Z+26	; 0x1a
    397a:	23 8d       	ldd	r18, Z+27	; 0x1b
    397c:	34 8d       	ldd	r19, Z+28	; 0x1c
    397e:	40 0f       	add	r20, r16
    3980:	51 1f       	adc	r21, r17
    3982:	62 1f       	adc	r22, r18
    3984:	73 1f       	adc	r23, r19
    3986:	41 8f       	std	Z+25, r20	; 0x19
    3988:	52 8f       	std	Z+26, r21	; 0x1a
    398a:	63 8f       	std	Z+27, r22	; 0x1b
    398c:	74 8f       	std	Z+28, r23	; 0x1c
}
    398e:	1f 91       	pop	r17
    3990:	0f 91       	pop	r16
    3992:	08 95       	ret

00003994 <_ZN6Timing9getMillisEv>:
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}

unsigned long Timing::getMillis()
{
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	00 d0       	rcall	.+0      	; 0x399e <_ZN6Timing9getMillisEv+0xa>
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <_ZN6Timing9getMillisEv+0xc>
    39a0:	cd b7       	in	r28, 0x3d	; 61
    39a2:	de b7       	in	r29, 0x3e	; 62
    39a4:	8c 01       	movw	r16, r24
	if (_isMock)
    39a6:	fc 01       	movw	r30, r24
    39a8:	80 8d       	ldd	r24, Z+24	; 0x18
    39aa:	88 23       	and	r24, r24
    39ac:	e1 f0       	breq	.+56     	; 0x39e6 <_ZN6Timing9getMillisEv+0x52>
	{
		//Speed up time in DEBUG mode ! // Each second=>x minutes
		volatile unsigned long currentMillis = millis();
    39ae:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <millis>
    39b2:	69 83       	std	Y+1, r22	; 0x01
    39b4:	7a 83       	std	Y+2, r23	; 0x02
    39b6:	8b 83       	std	Y+3, r24	; 0x03
    39b8:	9c 83       	std	Y+4, r25	; 0x04
		currentMillis += _MOCK_ADVANCED_BY;
    39ba:	f8 01       	movw	r30, r16
    39bc:	41 8d       	ldd	r20, Z+25	; 0x19
    39be:	52 8d       	ldd	r21, Z+26	; 0x1a
    39c0:	63 8d       	ldd	r22, Z+27	; 0x1b
    39c2:	74 8d       	ldd	r23, Z+28	; 0x1c
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
    39c6:	9a 81       	ldd	r25, Y+2	; 0x02
    39c8:	ab 81       	ldd	r26, Y+3	; 0x03
    39ca:	bc 81       	ldd	r27, Y+4	; 0x04
    39cc:	84 0f       	add	r24, r20
    39ce:	95 1f       	adc	r25, r21
    39d0:	a6 1f       	adc	r26, r22
    39d2:	b7 1f       	adc	r27, r23
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	9a 83       	std	Y+2, r25	; 0x02
    39d8:	ab 83       	std	Y+3, r26	; 0x03
    39da:	bc 83       	std	Y+4, r27	; 0x04
		return currentMillis;
    39dc:	69 81       	ldd	r22, Y+1	; 0x01
    39de:	7a 81       	ldd	r23, Y+2	; 0x02
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	9c 81       	ldd	r25, Y+4	; 0x04
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <_ZN6Timing9getMillisEv+0x56>
		//currentMillis = 1L*40*60*1000*secsFromStart;
		//return currentMillis;
	}
	else
	{
		return millis();
    39e6:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <millis>
	}
}
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	1f 91       	pop	r17
    39f8:	0f 91       	pop	r16
    39fa:	08 95       	ret

000039fc <_ZN6Timing11onCycleLoopEv>:

void Timing::MOCK_ADVANCE_TIME(unsigned long milliseconds){
	_MOCK_ADVANCED_BY += milliseconds;
}

void Timing::onCycleLoop(){
    39fc:	0f 93       	push	r16
    39fe:	1f 93       	push	r17
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	28 97       	sbiw	r28, 0x08	; 8
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	de bf       	out	0x3e, r29	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	8c 01       	movw	r16, r24
	
	volatile unsigned long currentMillis = getMillis();
    3a16:	0e 94 ca 1c 	call	0x3994	; 0x3994 <_ZN6Timing9getMillisEv>
    3a1a:	69 83       	std	Y+1, r22	; 0x01
    3a1c:	7a 83       	std	Y+2, r23	; 0x02
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
    3a20:	9c 83       	std	Y+4, r25	; 0x04
	
	if (_currCycleStartTime == 0)
    3a22:	f8 01       	movw	r30, r16
    3a24:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a26:	96 8d       	ldd	r25, Z+30	; 0x1e
    3a28:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3a2a:	b0 a1       	ldd	r27, Z+32	; 0x20
    3a2c:	89 2b       	or	r24, r25
    3a2e:	8a 2b       	or	r24, r26
    3a30:	8b 2b       	or	r24, r27
    3a32:	41 f4       	brne	.+16     	; 0x3a44 <_ZN6Timing11onCycleLoopEv+0x48>
		_currCycleStartTime = currentMillis;
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	ab 81       	ldd	r26, Y+3	; 0x03
    3a3a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a3c:	85 8f       	std	Z+29, r24	; 0x1d
    3a3e:	96 8f       	std	Z+30, r25	; 0x1e
    3a40:	a7 8f       	std	Z+31, r26	; 0x1f
    3a42:	b0 a3       	std	Z+32, r27	; 0x20
	
	//How long has this cycle been running for ?
	volatile unsigned long currCycleDuration = currentMillis - _currCycleStartTime;
    3a44:	89 81       	ldd	r24, Y+1	; 0x01
    3a46:	9a 81       	ldd	r25, Y+2	; 0x02
    3a48:	ab 81       	ldd	r26, Y+3	; 0x03
    3a4a:	bc 81       	ldd	r27, Y+4	; 0x04
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	45 8d       	ldd	r20, Z+29	; 0x1d
    3a50:	56 8d       	ldd	r21, Z+30	; 0x1e
    3a52:	67 8d       	ldd	r22, Z+31	; 0x1f
    3a54:	70 a1       	ldd	r23, Z+32	; 0x20
    3a56:	84 1b       	sub	r24, r20
    3a58:	95 0b       	sbc	r25, r21
    3a5a:	a6 0b       	sbc	r26, r22
    3a5c:	b7 0b       	sbc	r27, r23
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	9e 83       	std	Y+6, r25	; 0x06
    3a62:	af 83       	std	Y+7, r26	; 0x07
    3a64:	b8 87       	std	Y+8, r27	; 0x08
	//RM_LOG2(F("CurrCycleDuration"), currCycleDuration);
		
	//Some don't latch, so reset them
	_at10Secs = false;
    3a66:	14 86       	std	Z+12, r1	; 0x0c
	_at1Min = false;
    3a68:	15 86       	std	Z+13, r1	; 0x0d
	_at1Min30Secs = false;
    3a6a:	16 86       	std	Z+14, r1	; 0x0e
	_at2Mins = false;
    3a6c:	17 86       	std	Z+15, r1	; 0x0f
	_at30SecInterval = false;
    3a6e:	11 8a       	std	Z+17, r1	; 0x11
	_at1SecInterval = false;
    3a70:	10 8a       	std	Z+16, r1	; 0x10
	//__is1MinTriggered = false;
	//__is2MinTriggered = false;


	//10 seconds
	if (currCycleDuration >= 10*1000) {
    3a72:	8d 81       	ldd	r24, Y+5	; 0x05
    3a74:	9e 81       	ldd	r25, Y+6	; 0x06
    3a76:	af 81       	ldd	r26, Y+7	; 0x07
    3a78:	b8 85       	ldd	r27, Y+8	; 0x08
    3a7a:	80 31       	cpi	r24, 0x10	; 16
    3a7c:	97 42       	sbci	r25, 0x27	; 39
    3a7e:	a1 05       	cpc	r26, r1
    3a80:	b1 05       	cpc	r27, r1
    3a82:	48 f0       	brcs	.+18     	; 0x3a96 <_ZN6Timing11onCycleLoopEv+0x9a>
		_has10SecsElapsed = true;
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	f8 01       	movw	r30, r16
    3a88:	86 8b       	std	Z+22, r24	; 0x16
			
		//One-Time @10-Secs triggered
		if (!__is10SecsTriggered) {
    3a8a:	84 a1       	ldd	r24, Z+36	; 0x24
    3a8c:	81 11       	cpse	r24, r1
    3a8e:	03 c0       	rjmp	.+6      	; 0x3a96 <_ZN6Timing11onCycleLoopEv+0x9a>
				
			_at10Secs = true;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	84 87       	std	Z+12, r24	; 0x0c
			__is10SecsTriggered = true;
    3a94:	84 a3       	std	Z+36, r24	; 0x24
		}
	}
		
	//1 minute
	if (currCycleDuration >= 1L*60*1000) {
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	af 81       	ldd	r26, Y+7	; 0x07
    3a9c:	b8 85       	ldd	r27, Y+8	; 0x08
    3a9e:	80 36       	cpi	r24, 0x60	; 96
    3aa0:	9a 4e       	sbci	r25, 0xEA	; 234
    3aa2:	a1 05       	cpc	r26, r1
    3aa4:	b1 05       	cpc	r27, r1
    3aa6:	48 f0       	brcs	.+18     	; 0x3aba <_ZN6Timing11onCycleLoopEv+0xbe>
		_has1MinElapsed = true;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	f8 01       	movw	r30, r16
    3aac:	82 8b       	std	Z+18, r24	; 0x12
			
		//One-Time @1-Min triggered
		if (!__is1MinTriggered) {
    3aae:	81 a1       	ldd	r24, Z+33	; 0x21
    3ab0:	81 11       	cpse	r24, r1
    3ab2:	03 c0       	rjmp	.+6      	; 0x3aba <_ZN6Timing11onCycleLoopEv+0xbe>
				
			_at1Min = true;
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	85 87       	std	Z+13, r24	; 0x0d
			__is1MinTriggered = true;
    3ab8:	81 a3       	std	Z+33, r24	; 0x21
		}
	}
		
	//1 minute 30 secs
	if (currCycleDuration >= 3L*60*1000/2) {
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	af 81       	ldd	r26, Y+7	; 0x07
    3ac0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ac2:	80 39       	cpi	r24, 0x90	; 144
    3ac4:	9f 45       	sbci	r25, 0x5F	; 95
    3ac6:	a1 40       	sbci	r26, 0x01	; 1
    3ac8:	b1 05       	cpc	r27, r1
    3aca:	48 f0       	brcs	.+18     	; 0x3ade <_ZN6Timing11onCycleLoopEv+0xe2>
		_has1Min30SecsElapsed = true;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	f8 01       	movw	r30, r16
    3ad0:	83 8b       	std	Z+19, r24	; 0x13
			
		//One-Time @1-Min triggered
		if (!__is1Min30SecsTriggered) {
    3ad2:	82 a1       	ldd	r24, Z+34	; 0x22
    3ad4:	81 11       	cpse	r24, r1
    3ad6:	03 c0       	rjmp	.+6      	; 0x3ade <_ZN6Timing11onCycleLoopEv+0xe2>
				
			_at1Min30Secs = true;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	86 87       	std	Z+14, r24	; 0x0e
			__is1Min30SecsTriggered = true;
    3adc:	82 a3       	std	Z+34, r24	; 0x22
		}
	}
		
	//2 minutes
	if (currCycleDuration >= 2L*60*1000) {
    3ade:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae2:	af 81       	ldd	r26, Y+7	; 0x07
    3ae4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ae6:	80 3c       	cpi	r24, 0xC0	; 192
    3ae8:	94 4d       	sbci	r25, 0xD4	; 212
    3aea:	a1 40       	sbci	r26, 0x01	; 1
    3aec:	b1 05       	cpc	r27, r1
    3aee:	48 f0       	brcs	.+18     	; 0x3b02 <_ZN6Timing11onCycleLoopEv+0x106>
		_has2MinElapsed = true;
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	f8 01       	movw	r30, r16
    3af4:	85 8b       	std	Z+21, r24	; 0x15
			
		//One-Time @2-Min triggered
		if (!__is2MinTriggered) {
    3af6:	83 a1       	ldd	r24, Z+35	; 0x23
    3af8:	81 11       	cpse	r24, r1
    3afa:	03 c0       	rjmp	.+6      	; 0x3b02 <_ZN6Timing11onCycleLoopEv+0x106>
				
			_at2Mins = true;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	87 87       	std	Z+15, r24	; 0x0f
			__is2MinTriggered = true;
    3b00:	83 a3       	std	Z+35, r24	; 0x23
		}
	}
		
	//5 mins
	if (currCycleDuration >= 5L*60*1000)
    3b02:	8d 81       	ldd	r24, Y+5	; 0x05
    3b04:	9e 81       	ldd	r25, Y+6	; 0x06
    3b06:	af 81       	ldd	r26, Y+7	; 0x07
    3b08:	b8 85       	ldd	r27, Y+8	; 0x08
    3b0a:	80 3e       	cpi	r24, 0xE0	; 224
    3b0c:	93 49       	sbci	r25, 0x93	; 147
    3b0e:	a4 40       	sbci	r26, 0x04	; 4
    3b10:	b1 05       	cpc	r27, r1
    3b12:	18 f0       	brcs	.+6      	; 0x3b1a <_ZN6Timing11onCycleLoopEv+0x11e>
	_has5MinElapsed=true;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	f8 01       	movw	r30, r16
    3b18:	84 8b       	std	Z+20, r24	; 0x14
		
	//15 mins
	if (currCycleDuration >= 15L*60*1000)
    3b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1e:	af 81       	ldd	r26, Y+7	; 0x07
    3b20:	b8 85       	ldd	r27, Y+8	; 0x08
    3b22:	80 3a       	cpi	r24, 0xA0	; 160
    3b24:	9b 4b       	sbci	r25, 0xBB	; 187
    3b26:	ad 40       	sbci	r26, 0x0D	; 13
    3b28:	b1 05       	cpc	r27, r1
    3b2a:	18 f0       	brcs	.+6      	; 0x3b32 <_ZN6Timing11onCycleLoopEv+0x136>
	_has15MinElapsed=true;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	f8 01       	movw	r30, r16
    3b30:	87 8b       	std	Z+23, r24	; 0x17
		
	//1 sec interval
	if ( (currentMillis - __last1SecInterval) >= 1L*1000) {
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	9a 81       	ldd	r25, Y+2	; 0x02
    3b36:	ab 81       	ldd	r26, Y+3	; 0x03
    3b38:	bc 81       	ldd	r27, Y+4	; 0x04
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	45 a1       	ldd	r20, Z+37	; 0x25
    3b3e:	56 a1       	ldd	r21, Z+38	; 0x26
    3b40:	67 a1       	ldd	r22, Z+39	; 0x27
    3b42:	70 a5       	ldd	r23, Z+40	; 0x28
    3b44:	84 1b       	sub	r24, r20
    3b46:	95 0b       	sbc	r25, r21
    3b48:	a6 0b       	sbc	r26, r22
    3b4a:	b7 0b       	sbc	r27, r23
    3b4c:	88 3e       	cpi	r24, 0xE8	; 232
    3b4e:	93 40       	sbci	r25, 0x03	; 3
    3b50:	a1 05       	cpc	r26, r1
    3b52:	b1 05       	cpc	r27, r1
    3b54:	58 f0       	brcs	.+22     	; 0x3b6c <_ZN6Timing11onCycleLoopEv+0x170>
		_at1SecInterval = true;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	f8 01       	movw	r30, r16
    3b5a:	80 8b       	std	Z+16, r24	; 0x10
		__last1SecInterval = currentMillis;
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b60:	ab 81       	ldd	r26, Y+3	; 0x03
    3b62:	bc 81       	ldd	r27, Y+4	; 0x04
    3b64:	85 a3       	std	Z+37, r24	; 0x25
    3b66:	96 a3       	std	Z+38, r25	; 0x26
    3b68:	a7 a3       	std	Z+39, r26	; 0x27
    3b6a:	b0 a7       	std	Z+40, r27	; 0x28
	}
		
	//30 sec interval
	if ( (currentMillis - __last30SecInterval) >= 30L*1000) {
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b70:	ab 81       	ldd	r26, Y+3	; 0x03
    3b72:	bc 81       	ldd	r27, Y+4	; 0x04
    3b74:	f8 01       	movw	r30, r16
    3b76:	41 a5       	ldd	r20, Z+41	; 0x29
    3b78:	52 a5       	ldd	r21, Z+42	; 0x2a
    3b7a:	63 a5       	ldd	r22, Z+43	; 0x2b
    3b7c:	74 a5       	ldd	r23, Z+44	; 0x2c
    3b7e:	84 1b       	sub	r24, r20
    3b80:	95 0b       	sbc	r25, r21
    3b82:	a6 0b       	sbc	r26, r22
    3b84:	b7 0b       	sbc	r27, r23
    3b86:	80 33       	cpi	r24, 0x30	; 48
    3b88:	95 47       	sbci	r25, 0x75	; 117
    3b8a:	a1 05       	cpc	r26, r1
    3b8c:	b1 05       	cpc	r27, r1
    3b8e:	58 f0       	brcs	.+22     	; 0x3ba6 <_ZN6Timing11onCycleLoopEv+0x1aa>
		_at30SecInterval = true;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	f8 01       	movw	r30, r16
    3b94:	81 8b       	std	Z+17, r24	; 0x11
		__last30SecInterval = currentMillis;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9a:	ab 81       	ldd	r26, Y+3	; 0x03
    3b9c:	bc 81       	ldd	r27, Y+4	; 0x04
    3b9e:	81 a7       	std	Z+41, r24	; 0x29
    3ba0:	92 a7       	std	Z+42, r25	; 0x2a
    3ba2:	a3 a7       	std	Z+43, r26	; 0x2b
    3ba4:	b4 a7       	std	Z+44, r27	; 0x2c
	//RM_LOG("_is30SecInterval",_is30SecInterval);
	//RM_LOG("_at1SecInterval",_is1SecInterval);
	//RM_LOG2("_gpsFetchInProgress",_gpsFetchInProgress);
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}
    3ba6:	28 96       	adiw	r28, 0x08	; 8
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	1f 91       	pop	r17
    3bb8:	0f 91       	pop	r16
    3bba:	08 95       	ret

00003bbc <_ZN6Timing12isDailyCycleEm>:
		return millis();
	}
}

boolean Timing::isDailyCycle(unsigned long currCycleNumber)
{
    3bbc:	8f 92       	push	r8
    3bbe:	9f 92       	push	r9
    3bc0:	af 92       	push	r10
    3bc2:	bf 92       	push	r11
    3bc4:	cf 92       	push	r12
    3bc6:	df 92       	push	r13
    3bc8:	ef 92       	push	r14
    3bca:	ff 92       	push	r15
    3bcc:	0f 93       	push	r16
    3bce:	1f 93       	push	r17
    3bd0:	cf 93       	push	r28
    3bd2:	df 93       	push	r29
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	2c 97       	sbiw	r28, 0x0c	; 12
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	fc 01       	movw	r30, r24
    3be6:	6a 01       	movw	r12, r20
    3be8:	7b 01       	movw	r14, r22
	//Calc approximate time between cycles. Divide by 1000 to prevent overflow when multiplied later.
	volatile uint32_t durationPerCycleInSecs =
		(_intercycleDownTime + _readingTime + _loopDelay)/1000;
    3bea:	80 81       	ld	r24, Z
    3bec:	91 81       	ldd	r25, Z+1	; 0x01
    3bee:	a2 81       	ldd	r26, Z+2	; 0x02
    3bf0:	b3 81       	ldd	r27, Z+3	; 0x03
    3bf2:	40 85       	ldd	r20, Z+8	; 0x08
    3bf4:	51 85       	ldd	r21, Z+9	; 0x09
    3bf6:	62 85       	ldd	r22, Z+10	; 0x0a
    3bf8:	73 85       	ldd	r23, Z+11	; 0x0b
    3bfa:	48 0f       	add	r20, r24
    3bfc:	59 1f       	adc	r21, r25
    3bfe:	6a 1f       	adc	r22, r26
    3c00:	7b 1f       	adc	r23, r27
    3c02:	84 81       	ldd	r24, Z+4	; 0x04
    3c04:	95 81       	ldd	r25, Z+5	; 0x05
    3c06:	a6 81       	ldd	r26, Z+6	; 0x06
    3c08:	b7 81       	ldd	r27, Z+7	; 0x07
    3c0a:	8a 01       	movw	r16, r20
    3c0c:	9b 01       	movw	r18, r22
    3c0e:	08 0f       	add	r16, r24
    3c10:	19 1f       	adc	r17, r25
    3c12:	2a 1f       	adc	r18, r26
    3c14:	3b 1f       	adc	r19, r27
    3c16:	c9 01       	movw	r24, r18
    3c18:	b8 01       	movw	r22, r16
    3c1a:	28 ee       	ldi	r18, 0xE8	; 232
    3c1c:	33 e0       	ldi	r19, 0x03	; 3
    3c1e:	40 e0       	ldi	r20, 0x00	; 0
    3c20:	50 e0       	ldi	r21, 0x00	; 0
    3c22:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    3c26:	29 83       	std	Y+1, r18	; 0x01
    3c28:	3a 83       	std	Y+2, r19	; 0x02
    3c2a:	4b 83       	std	Y+3, r20	; 0x03
    3c2c:	5c 83       	std	Y+4, r21	; 0x04
	//- todo: if kept up by battery? whilst sending? add a EEPROM entry when cycle finishes?
	
	//Calc current time since module was installed
	volatile uint32_t totalDurationHrs = (currCycleNumber*durationPerCycleInSecs)/(60*60);
    3c2e:	29 81       	ldd	r18, Y+1	; 0x01
    3c30:	3a 81       	ldd	r19, Y+2	; 0x02
    3c32:	4b 81       	ldd	r20, Y+3	; 0x03
    3c34:	5c 81       	ldd	r21, Y+4	; 0x04
    3c36:	c7 01       	movw	r24, r14
    3c38:	b6 01       	movw	r22, r12
    3c3a:	0e 94 4b 33 	call	0x6696	; 0x6696 <__mulsi3>
    3c3e:	0f 2e       	mov	r0, r31
    3c40:	f0 e1       	ldi	r31, 0x10	; 16
    3c42:	8f 2e       	mov	r8, r31
    3c44:	fe e0       	ldi	r31, 0x0E	; 14
    3c46:	9f 2e       	mov	r9, r31
    3c48:	a1 2c       	mov	r10, r1
    3c4a:	b1 2c       	mov	r11, r1
    3c4c:	f0 2d       	mov	r31, r0
    3c4e:	a5 01       	movw	r20, r10
    3c50:	94 01       	movw	r18, r8
    3c52:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    3c56:	2d 83       	std	Y+5, r18	; 0x05
    3c58:	3e 83       	std	Y+6, r19	; 0x06
    3c5a:	4f 83       	std	Y+7, r20	; 0x07
    3c5c:	58 87       	std	Y+8, r21	; 0x08
	
	//Check if 1 hour is almost up by looking at totalDuration of next cycle
	volatile uint32_t nextDurationHrs = ((currCycleNumber+1)*durationPerCycleInSecs)/(60*60);
    3c5e:	a7 01       	movw	r20, r14
    3c60:	96 01       	movw	r18, r12
    3c62:	2f 5f       	subi	r18, 0xFF	; 255
    3c64:	3f 4f       	sbci	r19, 0xFF	; 255
    3c66:	4f 4f       	sbci	r20, 0xFF	; 255
    3c68:	5f 4f       	sbci	r21, 0xFF	; 255
    3c6a:	69 81       	ldd	r22, Y+1	; 0x01
    3c6c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c70:	9c 81       	ldd	r25, Y+4	; 0x04
    3c72:	0e 94 4b 33 	call	0x6696	; 0x6696 <__mulsi3>
    3c76:	a5 01       	movw	r20, r10
    3c78:	94 01       	movw	r18, r8
    3c7a:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    3c7e:	29 87       	std	Y+9, r18	; 0x09
    3c80:	3a 87       	std	Y+10, r19	; 0x0a
    3c82:	4b 87       	std	Y+11, r20	; 0x0b
    3c84:	5c 87       	std	Y+12, r21	; 0x0c
	
	//Check if it's a daily/weekly cycle by seeing if next cycle will rollover
	if ((int)totalDurationHrs/HOURS_IN_DAY < (int)nextDurationHrs/HOURS_IN_DAY)
    3c86:	8d 81       	ldd	r24, Y+5	; 0x05
    3c88:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8a:	af 81       	ldd	r26, Y+7	; 0x07
    3c8c:	b8 85       	ldd	r27, Y+8	; 0x08
    3c8e:	28 e1       	ldi	r18, 0x18	; 24
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	b9 01       	movw	r22, r18
    3c94:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodhi4>
    3c98:	fb 01       	movw	r30, r22
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ca0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ca2:	b9 01       	movw	r22, r18
    3ca4:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodhi4>
    3ca8:	e6 17       	cp	r30, r22
    3caa:	f7 07       	cpc	r31, r23
    3cac:	14 f4       	brge	.+4      	; 0x3cb2 <_ZN6Timing12isDailyCycleEm+0xf6>
		return true;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	01 c0       	rjmp	.+2      	; 0x3cb4 <_ZN6Timing12isDailyCycleEm+0xf8>
	else
		return false;	
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
}
    3cb4:	2c 96       	adiw	r28, 0x0c	; 12
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	1f 91       	pop	r17
    3cc6:	0f 91       	pop	r16
    3cc8:	ff 90       	pop	r15
    3cca:	ef 90       	pop	r14
    3ccc:	df 90       	pop	r13
    3cce:	cf 90       	pop	r12
    3cd0:	bf 90       	pop	r11
    3cd2:	af 90       	pop	r10
    3cd4:	9f 90       	pop	r9
    3cd6:	8f 90       	pop	r8
    3cd8:	08 95       	ret

00003cda <__subsf3>:
    3cda:	50 58       	subi	r21, 0x80	; 128

00003cdc <__addsf3>:
    3cdc:	bb 27       	eor	r27, r27
    3cde:	aa 27       	eor	r26, r26
    3ce0:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__addsf3x>
    3ce4:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__fp_round>
    3ce8:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <__fp_pscA>
    3cec:	38 f0       	brcs	.+14     	; 0x3cfc <__addsf3+0x20>
    3cee:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fp_pscB>
    3cf2:	20 f0       	brcs	.+8      	; 0x3cfc <__addsf3+0x20>
    3cf4:	39 f4       	brne	.+14     	; 0x3d04 <__addsf3+0x28>
    3cf6:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf8:	19 f4       	brne	.+6      	; 0x3d00 <__addsf3+0x24>
    3cfa:	26 f4       	brtc	.+8      	; 0x3d04 <__addsf3+0x28>
    3cfc:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__fp_nan>
    3d00:	0e f4       	brtc	.+2      	; 0x3d04 <__addsf3+0x28>
    3d02:	e0 95       	com	r30
    3d04:	e7 fb       	bst	r30, 7
    3d06:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_inf>

00003d0a <__addsf3x>:
    3d0a:	e9 2f       	mov	r30, r25
    3d0c:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__fp_split3>
    3d10:	58 f3       	brcs	.-42     	; 0x3ce8 <__addsf3+0xc>
    3d12:	ba 17       	cp	r27, r26
    3d14:	62 07       	cpc	r22, r18
    3d16:	73 07       	cpc	r23, r19
    3d18:	84 07       	cpc	r24, r20
    3d1a:	95 07       	cpc	r25, r21
    3d1c:	20 f0       	brcs	.+8      	; 0x3d26 <__addsf3x+0x1c>
    3d1e:	79 f4       	brne	.+30     	; 0x3d3e <__addsf3x+0x34>
    3d20:	a6 f5       	brtc	.+104    	; 0x3d8a <__addsf3x+0x80>
    3d22:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__fp_zero>
    3d26:	0e f4       	brtc	.+2      	; 0x3d2a <__addsf3x+0x20>
    3d28:	e0 95       	com	r30
    3d2a:	0b 2e       	mov	r0, r27
    3d2c:	ba 2f       	mov	r27, r26
    3d2e:	a0 2d       	mov	r26, r0
    3d30:	0b 01       	movw	r0, r22
    3d32:	b9 01       	movw	r22, r18
    3d34:	90 01       	movw	r18, r0
    3d36:	0c 01       	movw	r0, r24
    3d38:	ca 01       	movw	r24, r20
    3d3a:	a0 01       	movw	r20, r0
    3d3c:	11 24       	eor	r1, r1
    3d3e:	ff 27       	eor	r31, r31
    3d40:	59 1b       	sub	r21, r25
    3d42:	99 f0       	breq	.+38     	; 0x3d6a <__addsf3x+0x60>
    3d44:	59 3f       	cpi	r21, 0xF9	; 249
    3d46:	50 f4       	brcc	.+20     	; 0x3d5c <__addsf3x+0x52>
    3d48:	50 3e       	cpi	r21, 0xE0	; 224
    3d4a:	68 f1       	brcs	.+90     	; 0x3da6 <__addsf3x+0x9c>
    3d4c:	1a 16       	cp	r1, r26
    3d4e:	f0 40       	sbci	r31, 0x00	; 0
    3d50:	a2 2f       	mov	r26, r18
    3d52:	23 2f       	mov	r18, r19
    3d54:	34 2f       	mov	r19, r20
    3d56:	44 27       	eor	r20, r20
    3d58:	58 5f       	subi	r21, 0xF8	; 248
    3d5a:	f3 cf       	rjmp	.-26     	; 0x3d42 <__addsf3x+0x38>
    3d5c:	46 95       	lsr	r20
    3d5e:	37 95       	ror	r19
    3d60:	27 95       	ror	r18
    3d62:	a7 95       	ror	r26
    3d64:	f0 40       	sbci	r31, 0x00	; 0
    3d66:	53 95       	inc	r21
    3d68:	c9 f7       	brne	.-14     	; 0x3d5c <__addsf3x+0x52>
    3d6a:	7e f4       	brtc	.+30     	; 0x3d8a <__addsf3x+0x80>
    3d6c:	1f 16       	cp	r1, r31
    3d6e:	ba 0b       	sbc	r27, r26
    3d70:	62 0b       	sbc	r22, r18
    3d72:	73 0b       	sbc	r23, r19
    3d74:	84 0b       	sbc	r24, r20
    3d76:	ba f0       	brmi	.+46     	; 0x3da6 <__addsf3x+0x9c>
    3d78:	91 50       	subi	r25, 0x01	; 1
    3d7a:	a1 f0       	breq	.+40     	; 0x3da4 <__addsf3x+0x9a>
    3d7c:	ff 0f       	add	r31, r31
    3d7e:	bb 1f       	adc	r27, r27
    3d80:	66 1f       	adc	r22, r22
    3d82:	77 1f       	adc	r23, r23
    3d84:	88 1f       	adc	r24, r24
    3d86:	c2 f7       	brpl	.-16     	; 0x3d78 <__addsf3x+0x6e>
    3d88:	0e c0       	rjmp	.+28     	; 0x3da6 <__addsf3x+0x9c>
    3d8a:	ba 0f       	add	r27, r26
    3d8c:	62 1f       	adc	r22, r18
    3d8e:	73 1f       	adc	r23, r19
    3d90:	84 1f       	adc	r24, r20
    3d92:	48 f4       	brcc	.+18     	; 0x3da6 <__addsf3x+0x9c>
    3d94:	87 95       	ror	r24
    3d96:	77 95       	ror	r23
    3d98:	67 95       	ror	r22
    3d9a:	b7 95       	ror	r27
    3d9c:	f7 95       	ror	r31
    3d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    3da0:	08 f0       	brcs	.+2      	; 0x3da4 <__addsf3x+0x9a>
    3da2:	b0 cf       	rjmp	.-160    	; 0x3d04 <__addsf3+0x28>
    3da4:	93 95       	inc	r25
    3da6:	88 0f       	add	r24, r24
    3da8:	08 f0       	brcs	.+2      	; 0x3dac <__addsf3x+0xa2>
    3daa:	99 27       	eor	r25, r25
    3dac:	ee 0f       	add	r30, r30
    3dae:	97 95       	ror	r25
    3db0:	87 95       	ror	r24
    3db2:	08 95       	ret

00003db4 <__divsf3>:
    3db4:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__divsf3x>
    3db8:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__fp_round>
    3dbc:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fp_pscB>
    3dc0:	58 f0       	brcs	.+22     	; 0x3dd8 <__divsf3+0x24>
    3dc2:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <__fp_pscA>
    3dc6:	40 f0       	brcs	.+16     	; 0x3dd8 <__divsf3+0x24>
    3dc8:	29 f4       	brne	.+10     	; 0x3dd4 <__divsf3+0x20>
    3dca:	5f 3f       	cpi	r21, 0xFF	; 255
    3dcc:	29 f0       	breq	.+10     	; 0x3dd8 <__divsf3+0x24>
    3dce:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_inf>
    3dd2:	51 11       	cpse	r21, r1
    3dd4:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__fp_szero>
    3dd8:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__fp_nan>

00003ddc <__divsf3x>:
    3ddc:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__fp_split3>
    3de0:	68 f3       	brcs	.-38     	; 0x3dbc <__divsf3+0x8>

00003de2 <__divsf3_pse>:
    3de2:	99 23       	and	r25, r25
    3de4:	b1 f3       	breq	.-20     	; 0x3dd2 <__divsf3+0x1e>
    3de6:	55 23       	and	r21, r21
    3de8:	91 f3       	breq	.-28     	; 0x3dce <__divsf3+0x1a>
    3dea:	95 1b       	sub	r25, r21
    3dec:	55 0b       	sbc	r21, r21
    3dee:	bb 27       	eor	r27, r27
    3df0:	aa 27       	eor	r26, r26
    3df2:	62 17       	cp	r22, r18
    3df4:	73 07       	cpc	r23, r19
    3df6:	84 07       	cpc	r24, r20
    3df8:	38 f0       	brcs	.+14     	; 0x3e08 <__divsf3_pse+0x26>
    3dfa:	9f 5f       	subi	r25, 0xFF	; 255
    3dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dfe:	22 0f       	add	r18, r18
    3e00:	33 1f       	adc	r19, r19
    3e02:	44 1f       	adc	r20, r20
    3e04:	aa 1f       	adc	r26, r26
    3e06:	a9 f3       	breq	.-22     	; 0x3df2 <__divsf3_pse+0x10>
    3e08:	35 d0       	rcall	.+106    	; 0x3e74 <__divsf3_pse+0x92>
    3e0a:	0e 2e       	mov	r0, r30
    3e0c:	3a f0       	brmi	.+14     	; 0x3e1c <__divsf3_pse+0x3a>
    3e0e:	e0 e8       	ldi	r30, 0x80	; 128
    3e10:	32 d0       	rcall	.+100    	; 0x3e76 <__divsf3_pse+0x94>
    3e12:	91 50       	subi	r25, 0x01	; 1
    3e14:	50 40       	sbci	r21, 0x00	; 0
    3e16:	e6 95       	lsr	r30
    3e18:	00 1c       	adc	r0, r0
    3e1a:	ca f7       	brpl	.-14     	; 0x3e0e <__divsf3_pse+0x2c>
    3e1c:	2b d0       	rcall	.+86     	; 0x3e74 <__divsf3_pse+0x92>
    3e1e:	fe 2f       	mov	r31, r30
    3e20:	29 d0       	rcall	.+82     	; 0x3e74 <__divsf3_pse+0x92>
    3e22:	66 0f       	add	r22, r22
    3e24:	77 1f       	adc	r23, r23
    3e26:	88 1f       	adc	r24, r24
    3e28:	bb 1f       	adc	r27, r27
    3e2a:	26 17       	cp	r18, r22
    3e2c:	37 07       	cpc	r19, r23
    3e2e:	48 07       	cpc	r20, r24
    3e30:	ab 07       	cpc	r26, r27
    3e32:	b0 e8       	ldi	r27, 0x80	; 128
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <__divsf3_pse+0x56>
    3e36:	bb 0b       	sbc	r27, r27
    3e38:	80 2d       	mov	r24, r0
    3e3a:	bf 01       	movw	r22, r30
    3e3c:	ff 27       	eor	r31, r31
    3e3e:	93 58       	subi	r25, 0x83	; 131
    3e40:	5f 4f       	sbci	r21, 0xFF	; 255
    3e42:	3a f0       	brmi	.+14     	; 0x3e52 <__divsf3_pse+0x70>
    3e44:	9e 3f       	cpi	r25, 0xFE	; 254
    3e46:	51 05       	cpc	r21, r1
    3e48:	78 f0       	brcs	.+30     	; 0x3e68 <__divsf3_pse+0x86>
    3e4a:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_inf>
    3e4e:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__fp_szero>
    3e52:	5f 3f       	cpi	r21, 0xFF	; 255
    3e54:	e4 f3       	brlt	.-8      	; 0x3e4e <__divsf3_pse+0x6c>
    3e56:	98 3e       	cpi	r25, 0xE8	; 232
    3e58:	d4 f3       	brlt	.-12     	; 0x3e4e <__divsf3_pse+0x6c>
    3e5a:	86 95       	lsr	r24
    3e5c:	77 95       	ror	r23
    3e5e:	67 95       	ror	r22
    3e60:	b7 95       	ror	r27
    3e62:	f7 95       	ror	r31
    3e64:	9f 5f       	subi	r25, 0xFF	; 255
    3e66:	c9 f7       	brne	.-14     	; 0x3e5a <__divsf3_pse+0x78>
    3e68:	88 0f       	add	r24, r24
    3e6a:	91 1d       	adc	r25, r1
    3e6c:	96 95       	lsr	r25
    3e6e:	87 95       	ror	r24
    3e70:	97 f9       	bld	r25, 7
    3e72:	08 95       	ret
    3e74:	e1 e0       	ldi	r30, 0x01	; 1
    3e76:	66 0f       	add	r22, r22
    3e78:	77 1f       	adc	r23, r23
    3e7a:	88 1f       	adc	r24, r24
    3e7c:	bb 1f       	adc	r27, r27
    3e7e:	62 17       	cp	r22, r18
    3e80:	73 07       	cpc	r23, r19
    3e82:	84 07       	cpc	r24, r20
    3e84:	ba 07       	cpc	r27, r26
    3e86:	20 f0       	brcs	.+8      	; 0x3e90 <__divsf3_pse+0xae>
    3e88:	62 1b       	sub	r22, r18
    3e8a:	73 0b       	sbc	r23, r19
    3e8c:	84 0b       	sbc	r24, r20
    3e8e:	ba 0b       	sbc	r27, r26
    3e90:	ee 1f       	adc	r30, r30
    3e92:	88 f7       	brcc	.-30     	; 0x3e76 <__divsf3_pse+0x94>
    3e94:	e0 95       	com	r30
    3e96:	08 95       	ret

00003e98 <__fixsfsi>:
    3e98:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fixunssfsi>
    3e9c:	68 94       	set
    3e9e:	b1 11       	cpse	r27, r1
    3ea0:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__fp_szero>
    3ea4:	08 95       	ret

00003ea6 <__fixunssfsi>:
    3ea6:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <__fp_splitA>
    3eaa:	88 f0       	brcs	.+34     	; 0x3ece <__fixunssfsi+0x28>
    3eac:	9f 57       	subi	r25, 0x7F	; 127
    3eae:	98 f0       	brcs	.+38     	; 0x3ed6 <__fixunssfsi+0x30>
    3eb0:	b9 2f       	mov	r27, r25
    3eb2:	99 27       	eor	r25, r25
    3eb4:	b7 51       	subi	r27, 0x17	; 23
    3eb6:	b0 f0       	brcs	.+44     	; 0x3ee4 <__fixunssfsi+0x3e>
    3eb8:	e1 f0       	breq	.+56     	; 0x3ef2 <__fixunssfsi+0x4c>
    3eba:	66 0f       	add	r22, r22
    3ebc:	77 1f       	adc	r23, r23
    3ebe:	88 1f       	adc	r24, r24
    3ec0:	99 1f       	adc	r25, r25
    3ec2:	1a f0       	brmi	.+6      	; 0x3eca <__fixunssfsi+0x24>
    3ec4:	ba 95       	dec	r27
    3ec6:	c9 f7       	brne	.-14     	; 0x3eba <__fixunssfsi+0x14>
    3ec8:	14 c0       	rjmp	.+40     	; 0x3ef2 <__fixunssfsi+0x4c>
    3eca:	b1 30       	cpi	r27, 0x01	; 1
    3ecc:	91 f0       	breq	.+36     	; 0x3ef2 <__fixunssfsi+0x4c>
    3ece:	0e 94 09 20 	call	0x4012	; 0x4012 <__fp_zero>
    3ed2:	b1 e0       	ldi	r27, 0x01	; 1
    3ed4:	08 95       	ret
    3ed6:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__fp_zero>
    3eda:	67 2f       	mov	r22, r23
    3edc:	78 2f       	mov	r23, r24
    3ede:	88 27       	eor	r24, r24
    3ee0:	b8 5f       	subi	r27, 0xF8	; 248
    3ee2:	39 f0       	breq	.+14     	; 0x3ef2 <__fixunssfsi+0x4c>
    3ee4:	b9 3f       	cpi	r27, 0xF9	; 249
    3ee6:	cc f3       	brlt	.-14     	; 0x3eda <__fixunssfsi+0x34>
    3ee8:	86 95       	lsr	r24
    3eea:	77 95       	ror	r23
    3eec:	67 95       	ror	r22
    3eee:	b3 95       	inc	r27
    3ef0:	d9 f7       	brne	.-10     	; 0x3ee8 <__fixunssfsi+0x42>
    3ef2:	3e f4       	brtc	.+14     	; 0x3f02 <__fixunssfsi+0x5c>
    3ef4:	90 95       	com	r25
    3ef6:	80 95       	com	r24
    3ef8:	70 95       	com	r23
    3efa:	61 95       	neg	r22
    3efc:	7f 4f       	sbci	r23, 0xFF	; 255
    3efe:	8f 4f       	sbci	r24, 0xFF	; 255
    3f00:	9f 4f       	sbci	r25, 0xFF	; 255
    3f02:	08 95       	ret

00003f04 <__floatunsisf>:
    3f04:	e8 94       	clt
    3f06:	09 c0       	rjmp	.+18     	; 0x3f1a <__floatsisf+0x12>

00003f08 <__floatsisf>:
    3f08:	97 fb       	bst	r25, 7
    3f0a:	3e f4       	brtc	.+14     	; 0x3f1a <__floatsisf+0x12>
    3f0c:	90 95       	com	r25
    3f0e:	80 95       	com	r24
    3f10:	70 95       	com	r23
    3f12:	61 95       	neg	r22
    3f14:	7f 4f       	sbci	r23, 0xFF	; 255
    3f16:	8f 4f       	sbci	r24, 0xFF	; 255
    3f18:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1a:	99 23       	and	r25, r25
    3f1c:	a9 f0       	breq	.+42     	; 0x3f48 <__floatsisf+0x40>
    3f1e:	f9 2f       	mov	r31, r25
    3f20:	96 e9       	ldi	r25, 0x96	; 150
    3f22:	bb 27       	eor	r27, r27
    3f24:	93 95       	inc	r25
    3f26:	f6 95       	lsr	r31
    3f28:	87 95       	ror	r24
    3f2a:	77 95       	ror	r23
    3f2c:	67 95       	ror	r22
    3f2e:	b7 95       	ror	r27
    3f30:	f1 11       	cpse	r31, r1
    3f32:	f8 cf       	rjmp	.-16     	; 0x3f24 <__floatsisf+0x1c>
    3f34:	fa f4       	brpl	.+62     	; 0x3f74 <__floatsisf+0x6c>
    3f36:	bb 0f       	add	r27, r27
    3f38:	11 f4       	brne	.+4      	; 0x3f3e <__floatsisf+0x36>
    3f3a:	60 ff       	sbrs	r22, 0
    3f3c:	1b c0       	rjmp	.+54     	; 0x3f74 <__floatsisf+0x6c>
    3f3e:	6f 5f       	subi	r22, 0xFF	; 255
    3f40:	7f 4f       	sbci	r23, 0xFF	; 255
    3f42:	8f 4f       	sbci	r24, 0xFF	; 255
    3f44:	9f 4f       	sbci	r25, 0xFF	; 255
    3f46:	16 c0       	rjmp	.+44     	; 0x3f74 <__floatsisf+0x6c>
    3f48:	88 23       	and	r24, r24
    3f4a:	11 f0       	breq	.+4      	; 0x3f50 <__floatsisf+0x48>
    3f4c:	96 e9       	ldi	r25, 0x96	; 150
    3f4e:	11 c0       	rjmp	.+34     	; 0x3f72 <__floatsisf+0x6a>
    3f50:	77 23       	and	r23, r23
    3f52:	21 f0       	breq	.+8      	; 0x3f5c <__floatsisf+0x54>
    3f54:	9e e8       	ldi	r25, 0x8E	; 142
    3f56:	87 2f       	mov	r24, r23
    3f58:	76 2f       	mov	r23, r22
    3f5a:	05 c0       	rjmp	.+10     	; 0x3f66 <__floatsisf+0x5e>
    3f5c:	66 23       	and	r22, r22
    3f5e:	71 f0       	breq	.+28     	; 0x3f7c <__floatsisf+0x74>
    3f60:	96 e8       	ldi	r25, 0x86	; 134
    3f62:	86 2f       	mov	r24, r22
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	2a f0       	brmi	.+10     	; 0x3f74 <__floatsisf+0x6c>
    3f6a:	9a 95       	dec	r25
    3f6c:	66 0f       	add	r22, r22
    3f6e:	77 1f       	adc	r23, r23
    3f70:	88 1f       	adc	r24, r24
    3f72:	da f7       	brpl	.-10     	; 0x3f6a <__floatsisf+0x62>
    3f74:	88 0f       	add	r24, r24
    3f76:	96 95       	lsr	r25
    3f78:	87 95       	ror	r24
    3f7a:	97 f9       	bld	r25, 7
    3f7c:	08 95       	ret

00003f7e <__fp_inf>:
    3f7e:	97 f9       	bld	r25, 7
    3f80:	9f 67       	ori	r25, 0x7F	; 127
    3f82:	80 e8       	ldi	r24, 0x80	; 128
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	08 95       	ret

00003f8a <__fp_nan>:
    3f8a:	9f ef       	ldi	r25, 0xFF	; 255
    3f8c:	80 ec       	ldi	r24, 0xC0	; 192
    3f8e:	08 95       	ret

00003f90 <__fp_pscA>:
    3f90:	00 24       	eor	r0, r0
    3f92:	0a 94       	dec	r0
    3f94:	16 16       	cp	r1, r22
    3f96:	17 06       	cpc	r1, r23
    3f98:	18 06       	cpc	r1, r24
    3f9a:	09 06       	cpc	r0, r25
    3f9c:	08 95       	ret

00003f9e <__fp_pscB>:
    3f9e:	00 24       	eor	r0, r0
    3fa0:	0a 94       	dec	r0
    3fa2:	12 16       	cp	r1, r18
    3fa4:	13 06       	cpc	r1, r19
    3fa6:	14 06       	cpc	r1, r20
    3fa8:	05 06       	cpc	r0, r21
    3faa:	08 95       	ret

00003fac <__fp_round>:
    3fac:	09 2e       	mov	r0, r25
    3fae:	03 94       	inc	r0
    3fb0:	00 0c       	add	r0, r0
    3fb2:	11 f4       	brne	.+4      	; 0x3fb8 <__fp_round+0xc>
    3fb4:	88 23       	and	r24, r24
    3fb6:	52 f0       	brmi	.+20     	; 0x3fcc <__fp_round+0x20>
    3fb8:	bb 0f       	add	r27, r27
    3fba:	40 f4       	brcc	.+16     	; 0x3fcc <__fp_round+0x20>
    3fbc:	bf 2b       	or	r27, r31
    3fbe:	11 f4       	brne	.+4      	; 0x3fc4 <__fp_round+0x18>
    3fc0:	60 ff       	sbrs	r22, 0
    3fc2:	04 c0       	rjmp	.+8      	; 0x3fcc <__fp_round+0x20>
    3fc4:	6f 5f       	subi	r22, 0xFF	; 255
    3fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fca:	9f 4f       	sbci	r25, 0xFF	; 255
    3fcc:	08 95       	ret

00003fce <__fp_split3>:
    3fce:	57 fd       	sbrc	r21, 7
    3fd0:	90 58       	subi	r25, 0x80	; 128
    3fd2:	44 0f       	add	r20, r20
    3fd4:	55 1f       	adc	r21, r21
    3fd6:	59 f0       	breq	.+22     	; 0x3fee <__fp_splitA+0x10>
    3fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    3fda:	71 f0       	breq	.+28     	; 0x3ff8 <__fp_splitA+0x1a>
    3fdc:	47 95       	ror	r20

00003fde <__fp_splitA>:
    3fde:	88 0f       	add	r24, r24
    3fe0:	97 fb       	bst	r25, 7
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	61 f0       	breq	.+24     	; 0x3ffe <__fp_splitA+0x20>
    3fe6:	9f 3f       	cpi	r25, 0xFF	; 255
    3fe8:	79 f0       	breq	.+30     	; 0x4008 <__fp_splitA+0x2a>
    3fea:	87 95       	ror	r24
    3fec:	08 95       	ret
    3fee:	12 16       	cp	r1, r18
    3ff0:	13 06       	cpc	r1, r19
    3ff2:	14 06       	cpc	r1, r20
    3ff4:	55 1f       	adc	r21, r21
    3ff6:	f2 cf       	rjmp	.-28     	; 0x3fdc <__fp_split3+0xe>
    3ff8:	46 95       	lsr	r20
    3ffa:	f1 df       	rcall	.-30     	; 0x3fde <__fp_splitA>
    3ffc:	08 c0       	rjmp	.+16     	; 0x400e <__fp_splitA+0x30>
    3ffe:	16 16       	cp	r1, r22
    4000:	17 06       	cpc	r1, r23
    4002:	18 06       	cpc	r1, r24
    4004:	99 1f       	adc	r25, r25
    4006:	f1 cf       	rjmp	.-30     	; 0x3fea <__fp_splitA+0xc>
    4008:	86 95       	lsr	r24
    400a:	71 05       	cpc	r23, r1
    400c:	61 05       	cpc	r22, r1
    400e:	08 94       	sec
    4010:	08 95       	ret

00004012 <__fp_zero>:
    4012:	e8 94       	clt

00004014 <__fp_szero>:
    4014:	bb 27       	eor	r27, r27
    4016:	66 27       	eor	r22, r22
    4018:	77 27       	eor	r23, r23
    401a:	cb 01       	movw	r24, r22
    401c:	97 f9       	bld	r25, 7
    401e:	08 95       	ret

00004020 <__gesf2>:
    4020:	0e 94 82 20 	call	0x4104	; 0x4104 <__fp_cmp>
    4024:	08 f4       	brcc	.+2      	; 0x4028 <__gesf2+0x8>
    4026:	8f ef       	ldi	r24, 0xFF	; 255
    4028:	08 95       	ret

0000402a <__mulsf3>:
    402a:	0e 94 28 20 	call	0x4050	; 0x4050 <__mulsf3x>
    402e:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__fp_round>
    4032:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <__fp_pscA>
    4036:	38 f0       	brcs	.+14     	; 0x4046 <__mulsf3+0x1c>
    4038:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__fp_pscB>
    403c:	20 f0       	brcs	.+8      	; 0x4046 <__mulsf3+0x1c>
    403e:	95 23       	and	r25, r21
    4040:	11 f0       	breq	.+4      	; 0x4046 <__mulsf3+0x1c>
    4042:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_inf>
    4046:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__fp_nan>
    404a:	11 24       	eor	r1, r1
    404c:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__fp_szero>

00004050 <__mulsf3x>:
    4050:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__fp_split3>
    4054:	70 f3       	brcs	.-36     	; 0x4032 <__mulsf3+0x8>

00004056 <__mulsf3_pse>:
    4056:	95 9f       	mul	r25, r21
    4058:	c1 f3       	breq	.-16     	; 0x404a <__mulsf3+0x20>
    405a:	95 0f       	add	r25, r21
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	55 1f       	adc	r21, r21
    4060:	62 9f       	mul	r22, r18
    4062:	f0 01       	movw	r30, r0
    4064:	72 9f       	mul	r23, r18
    4066:	bb 27       	eor	r27, r27
    4068:	f0 0d       	add	r31, r0
    406a:	b1 1d       	adc	r27, r1
    406c:	63 9f       	mul	r22, r19
    406e:	aa 27       	eor	r26, r26
    4070:	f0 0d       	add	r31, r0
    4072:	b1 1d       	adc	r27, r1
    4074:	aa 1f       	adc	r26, r26
    4076:	64 9f       	mul	r22, r20
    4078:	66 27       	eor	r22, r22
    407a:	b0 0d       	add	r27, r0
    407c:	a1 1d       	adc	r26, r1
    407e:	66 1f       	adc	r22, r22
    4080:	82 9f       	mul	r24, r18
    4082:	22 27       	eor	r18, r18
    4084:	b0 0d       	add	r27, r0
    4086:	a1 1d       	adc	r26, r1
    4088:	62 1f       	adc	r22, r18
    408a:	73 9f       	mul	r23, r19
    408c:	b0 0d       	add	r27, r0
    408e:	a1 1d       	adc	r26, r1
    4090:	62 1f       	adc	r22, r18
    4092:	83 9f       	mul	r24, r19
    4094:	a0 0d       	add	r26, r0
    4096:	61 1d       	adc	r22, r1
    4098:	22 1f       	adc	r18, r18
    409a:	74 9f       	mul	r23, r20
    409c:	33 27       	eor	r19, r19
    409e:	a0 0d       	add	r26, r0
    40a0:	61 1d       	adc	r22, r1
    40a2:	23 1f       	adc	r18, r19
    40a4:	84 9f       	mul	r24, r20
    40a6:	60 0d       	add	r22, r0
    40a8:	21 1d       	adc	r18, r1
    40aa:	82 2f       	mov	r24, r18
    40ac:	76 2f       	mov	r23, r22
    40ae:	6a 2f       	mov	r22, r26
    40b0:	11 24       	eor	r1, r1
    40b2:	9f 57       	subi	r25, 0x7F	; 127
    40b4:	50 40       	sbci	r21, 0x00	; 0
    40b6:	9a f0       	brmi	.+38     	; 0x40de <__mulsf3_pse+0x88>
    40b8:	f1 f0       	breq	.+60     	; 0x40f6 <__mulsf3_pse+0xa0>
    40ba:	88 23       	and	r24, r24
    40bc:	4a f0       	brmi	.+18     	; 0x40d0 <__mulsf3_pse+0x7a>
    40be:	ee 0f       	add	r30, r30
    40c0:	ff 1f       	adc	r31, r31
    40c2:	bb 1f       	adc	r27, r27
    40c4:	66 1f       	adc	r22, r22
    40c6:	77 1f       	adc	r23, r23
    40c8:	88 1f       	adc	r24, r24
    40ca:	91 50       	subi	r25, 0x01	; 1
    40cc:	50 40       	sbci	r21, 0x00	; 0
    40ce:	a9 f7       	brne	.-22     	; 0x40ba <__mulsf3_pse+0x64>
    40d0:	9e 3f       	cpi	r25, 0xFE	; 254
    40d2:	51 05       	cpc	r21, r1
    40d4:	80 f0       	brcs	.+32     	; 0x40f6 <__mulsf3_pse+0xa0>
    40d6:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__fp_inf>
    40da:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__fp_szero>
    40de:	5f 3f       	cpi	r21, 0xFF	; 255
    40e0:	e4 f3       	brlt	.-8      	; 0x40da <__mulsf3_pse+0x84>
    40e2:	98 3e       	cpi	r25, 0xE8	; 232
    40e4:	d4 f3       	brlt	.-12     	; 0x40da <__mulsf3_pse+0x84>
    40e6:	86 95       	lsr	r24
    40e8:	77 95       	ror	r23
    40ea:	67 95       	ror	r22
    40ec:	b7 95       	ror	r27
    40ee:	f7 95       	ror	r31
    40f0:	e7 95       	ror	r30
    40f2:	9f 5f       	subi	r25, 0xFF	; 255
    40f4:	c1 f7       	brne	.-16     	; 0x40e6 <__mulsf3_pse+0x90>
    40f6:	fe 2b       	or	r31, r30
    40f8:	88 0f       	add	r24, r24
    40fa:	91 1d       	adc	r25, r1
    40fc:	96 95       	lsr	r25
    40fe:	87 95       	ror	r24
    4100:	97 f9       	bld	r25, 7
    4102:	08 95       	ret

00004104 <__fp_cmp>:
    4104:	99 0f       	add	r25, r25
    4106:	00 08       	sbc	r0, r0
    4108:	55 0f       	add	r21, r21
    410a:	aa 0b       	sbc	r26, r26
    410c:	e0 e8       	ldi	r30, 0x80	; 128
    410e:	fe ef       	ldi	r31, 0xFE	; 254
    4110:	16 16       	cp	r1, r22
    4112:	17 06       	cpc	r1, r23
    4114:	e8 07       	cpc	r30, r24
    4116:	f9 07       	cpc	r31, r25
    4118:	c0 f0       	brcs	.+48     	; 0x414a <__fp_cmp+0x46>
    411a:	12 16       	cp	r1, r18
    411c:	13 06       	cpc	r1, r19
    411e:	e4 07       	cpc	r30, r20
    4120:	f5 07       	cpc	r31, r21
    4122:	98 f0       	brcs	.+38     	; 0x414a <__fp_cmp+0x46>
    4124:	62 1b       	sub	r22, r18
    4126:	73 0b       	sbc	r23, r19
    4128:	84 0b       	sbc	r24, r20
    412a:	95 0b       	sbc	r25, r21
    412c:	39 f4       	brne	.+14     	; 0x413c <__fp_cmp+0x38>
    412e:	0a 26       	eor	r0, r26
    4130:	61 f0       	breq	.+24     	; 0x414a <__fp_cmp+0x46>
    4132:	23 2b       	or	r18, r19
    4134:	24 2b       	or	r18, r20
    4136:	25 2b       	or	r18, r21
    4138:	21 f4       	brne	.+8      	; 0x4142 <__fp_cmp+0x3e>
    413a:	08 95       	ret
    413c:	0a 26       	eor	r0, r26
    413e:	09 f4       	brne	.+2      	; 0x4142 <__fp_cmp+0x3e>
    4140:	a1 40       	sbci	r26, 0x01	; 1
    4142:	a6 95       	lsr	r26
    4144:	8f ef       	ldi	r24, 0xFF	; 255
    4146:	81 1d       	adc	r24, r1
    4148:	81 1d       	adc	r24, r1
    414a:	08 95       	ret

0000414c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    414c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    414e:	91 8d       	ldd	r25, Z+25	; 0x19
    4150:	22 8d       	ldd	r18, Z+26	; 0x1a
    4152:	89 2f       	mov	r24, r25
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	80 5c       	subi	r24, 0xC0	; 192
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	82 1b       	sub	r24, r18
    415c:	91 09       	sbc	r25, r1
}
    415e:	8f 73       	andi	r24, 0x3F	; 63
    4160:	99 27       	eor	r25, r25
    4162:	08 95       	ret

00004164 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4164:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4166:	91 8d       	ldd	r25, Z+25	; 0x19
    4168:	82 8d       	ldd	r24, Z+26	; 0x1a
    416a:	98 17       	cp	r25, r24
    416c:	31 f0       	breq	.+12     	; 0x417a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    416e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4170:	e8 0f       	add	r30, r24
    4172:	f1 1d       	adc	r31, r1
    4174:	85 8d       	ldd	r24, Z+29	; 0x1d
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    417e:	08 95       	ret

00004180 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4180:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4182:	91 8d       	ldd	r25, Z+25	; 0x19
    4184:	82 8d       	ldd	r24, Z+26	; 0x1a
    4186:	98 17       	cp	r25, r24
    4188:	61 f0       	breq	.+24     	; 0x41a2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    418a:	82 8d       	ldd	r24, Z+26	; 0x1a
    418c:	df 01       	movw	r26, r30
    418e:	a8 0f       	add	r26, r24
    4190:	b1 1d       	adc	r27, r1
    4192:	5d 96       	adiw	r26, 0x1d	; 29
    4194:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4196:	92 8d       	ldd	r25, Z+26	; 0x1a
    4198:	9f 5f       	subi	r25, 0xFF	; 255
    419a:	9f 73       	andi	r25, 0x3F	; 63
    419c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    41a2:	8f ef       	ldi	r24, 0xFF	; 255
    41a4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    41a6:	08 95       	ret

000041a8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    41a8:	89 e2       	ldi	r24, 0x29	; 41
    41aa:	92 e2       	ldi	r25, 0x22	; 34
    41ac:	89 2b       	or	r24, r25
    41ae:	49 f0       	breq	.+18     	; 0x41c2 <_Z14serialEventRunv+0x1a>
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	89 2b       	or	r24, r25
    41b6:	29 f0       	breq	.+10     	; 0x41c2 <_Z14serialEventRunv+0x1a>
    41b8:	0e 94 29 22 	call	0x4452	; 0x4452 <_Z17Serial0_availablev>
    41bc:	81 11       	cpse	r24, r1
    41be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    41c2:	08 95       	ret

000041c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    41c4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    41c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    41c8:	df 01       	movw	r26, r30
    41ca:	a8 0f       	add	r26, r24
    41cc:	b1 1d       	adc	r27, r1
    41ce:	a3 5a       	subi	r26, 0xA3	; 163
    41d0:	bf 4f       	sbci	r27, 0xFF	; 255
    41d2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    41d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	01 96       	adiw	r24, 0x01	; 1
    41da:	8f 73       	andi	r24, 0x3F	; 63
    41dc:	99 27       	eor	r25, r25
    41de:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    41e0:	a6 89       	ldd	r26, Z+22	; 0x16
    41e2:	b7 89       	ldd	r27, Z+23	; 0x17
    41e4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    41e6:	a0 89       	ldd	r26, Z+16	; 0x10
    41e8:	b1 89       	ldd	r27, Z+17	; 0x11
    41ea:	8c 91       	ld	r24, X
    41ec:	80 64       	ori	r24, 0x40	; 64
    41ee:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    41f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    41f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    41f4:	98 13       	cpse	r25, r24
    41f6:	06 c0       	rjmp	.+12     	; 0x4204 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    41f8:	02 88       	ldd	r0, Z+18	; 0x12
    41fa:	f3 89       	ldd	r31, Z+19	; 0x13
    41fc:	e0 2d       	mov	r30, r0
    41fe:	80 81       	ld	r24, Z
    4200:	8f 7d       	andi	r24, 0xDF	; 223
    4202:	80 83       	st	Z, r24
    4204:	08 95       	ret

00004206 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	ec 01       	movw	r28, r24
  _written = true;
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4218:	9b 8d       	ldd	r25, Y+27	; 0x1b
    421a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    421c:	98 13       	cpse	r25, r24
    421e:	05 c0       	rjmp	.+10     	; 0x422a <_ZN14HardwareSerial5writeEh+0x24>
    4220:	e8 89       	ldd	r30, Y+16	; 0x10
    4222:	f9 89       	ldd	r31, Y+17	; 0x11
    4224:	80 81       	ld	r24, Z
    4226:	85 fd       	sbrc	r24, 5
    4228:	24 c0       	rjmp	.+72     	; 0x4272 <_ZN14HardwareSerial5writeEh+0x6c>
    422a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    422c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    422e:	10 e0       	ldi	r17, 0x00	; 0
    4230:	0f 5f       	subi	r16, 0xFF	; 255
    4232:	1f 4f       	sbci	r17, 0xFF	; 255
    4234:	0f 73       	andi	r16, 0x3F	; 63
    4236:	11 27       	eor	r17, r17
    4238:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    423a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    423c:	e8 12       	cpse	r14, r24
    423e:	0c c0       	rjmp	.+24     	; 0x4258 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	07 fc       	sbrc	r0, 7
    4244:	fa cf       	rjmp	.-12     	; 0x423a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4246:	e8 89       	ldd	r30, Y+16	; 0x10
    4248:	f9 89       	ldd	r31, Y+17	; 0x11
    424a:	80 81       	ld	r24, Z
    424c:	85 ff       	sbrs	r24, 5
    424e:	f5 cf       	rjmp	.-22     	; 0x423a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4250:	ce 01       	movw	r24, r28
    4252:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4256:	f1 cf       	rjmp	.-30     	; 0x423a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    425a:	fe 01       	movw	r30, r28
    425c:	e8 0f       	add	r30, r24
    425e:	f1 1d       	adc	r31, r1
    4260:	e3 5a       	subi	r30, 0xA3	; 163
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    4266:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    4268:	ea 89       	ldd	r30, Y+18	; 0x12
    426a:	fb 89       	ldd	r31, Y+19	; 0x13
    426c:	80 81       	ld	r24, Z
    426e:	80 62       	ori	r24, 0x20	; 32
    4270:	07 c0       	rjmp	.+14     	; 0x4280 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4272:	ee 89       	ldd	r30, Y+22	; 0x16
    4274:	ff 89       	ldd	r31, Y+23	; 0x17
    4276:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4278:	e8 89       	ldd	r30, Y+16	; 0x10
    427a:	f9 89       	ldd	r31, Y+17	; 0x11
    427c:	80 81       	ld	r24, Z
    427e:	80 64       	ori	r24, 0x40	; 64
    4280:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	1f 91       	pop	r17
    428c:	0f 91       	pop	r16
    428e:	ff 90       	pop	r15
    4290:	ef 90       	pop	r14
    4292:	08 95       	ret

00004294 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4294:	cf 93       	push	r28
    4296:	df 93       	push	r29
    4298:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    429a:	88 8d       	ldd	r24, Y+24	; 0x18
    429c:	88 23       	and	r24, r24
    429e:	c9 f0       	breq	.+50     	; 0x42d2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    42a0:	ea 89       	ldd	r30, Y+18	; 0x12
    42a2:	fb 89       	ldd	r31, Y+19	; 0x13
    42a4:	80 81       	ld	r24, Z
    42a6:	85 fd       	sbrc	r24, 5
    42a8:	05 c0       	rjmp	.+10     	; 0x42b4 <_ZN14HardwareSerial5flushEv+0x20>
    42aa:	a8 89       	ldd	r26, Y+16	; 0x10
    42ac:	b9 89       	ldd	r27, Y+17	; 0x11
    42ae:	8c 91       	ld	r24, X
    42b0:	86 fd       	sbrc	r24, 6
    42b2:	0f c0       	rjmp	.+30     	; 0x42d2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	07 fc       	sbrc	r0, 7
    42b8:	f5 cf       	rjmp	.-22     	; 0x42a4 <_ZN14HardwareSerial5flushEv+0x10>
    42ba:	80 81       	ld	r24, Z
    42bc:	85 ff       	sbrs	r24, 5
    42be:	f2 cf       	rjmp	.-28     	; 0x42a4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    42c0:	a8 89       	ldd	r26, Y+16	; 0x10
    42c2:	b9 89       	ldd	r27, Y+17	; 0x11
    42c4:	8c 91       	ld	r24, X
    42c6:	85 ff       	sbrs	r24, 5
    42c8:	ed cf       	rjmp	.-38     	; 0x42a4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    42ca:	ce 01       	movw	r24, r28
    42cc:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    42d0:	e7 cf       	rjmp	.-50     	; 0x42a0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	08 95       	ret

000042d8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    42d8:	cf 92       	push	r12
    42da:	df 92       	push	r13
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	1f 93       	push	r17
    42e2:	cf 93       	push	r28
    42e4:	df 93       	push	r29
    42e6:	ec 01       	movw	r28, r24
    42e8:	6a 01       	movw	r12, r20
    42ea:	7b 01       	movw	r14, r22
    42ec:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    42ee:	e8 89       	ldd	r30, Y+16	; 0x10
    42f0:	f9 89       	ldd	r31, Y+17	; 0x11
    42f2:	82 e0       	ldi	r24, 0x02	; 2
    42f4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    42f6:	41 15       	cp	r20, r1
    42f8:	51 4e       	sbci	r21, 0xE1	; 225
    42fa:	61 05       	cpc	r22, r1
    42fc:	71 05       	cpc	r23, r1
    42fe:	b1 f0       	breq	.+44     	; 0x432c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	79 e0       	ldi	r23, 0x09	; 9
    4304:	8d e3       	ldi	r24, 0x3D	; 61
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	a7 01       	movw	r20, r14
    430a:	96 01       	movw	r18, r12
    430c:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    4310:	da 01       	movw	r26, r20
    4312:	c9 01       	movw	r24, r18
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	a1 09       	sbc	r26, r1
    4318:	b1 09       	sbc	r27, r1
    431a:	b6 95       	lsr	r27
    431c:	a7 95       	ror	r26
    431e:	97 95       	ror	r25
    4320:	87 95       	ror	r24
    4322:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4324:	21 15       	cp	r18, r1
    4326:	80 e1       	ldi	r24, 0x10	; 16
    4328:	38 07       	cpc	r19, r24
    432a:	a8 f0       	brcs	.+42     	; 0x4356 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    432c:	e8 89       	ldd	r30, Y+16	; 0x10
    432e:	f9 89       	ldd	r31, Y+17	; 0x11
    4330:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4332:	60 e8       	ldi	r22, 0x80	; 128
    4334:	74 e8       	ldi	r23, 0x84	; 132
    4336:	8e e1       	ldi	r24, 0x1E	; 30
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	a7 01       	movw	r20, r14
    433c:	96 01       	movw	r18, r12
    433e:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    4342:	da 01       	movw	r26, r20
    4344:	c9 01       	movw	r24, r18
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	a1 09       	sbc	r26, r1
    434a:	b1 09       	sbc	r27, r1
    434c:	b6 95       	lsr	r27
    434e:	a7 95       	ror	r26
    4350:	97 95       	ror	r25
    4352:	87 95       	ror	r24
    4354:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4356:	ec 85       	ldd	r30, Y+12	; 0x0c
    4358:	fd 85       	ldd	r31, Y+13	; 0x0d
    435a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    435c:	ee 85       	ldd	r30, Y+14	; 0x0e
    435e:	ff 85       	ldd	r31, Y+15	; 0x0f
    4360:	20 83       	st	Z, r18

  _written = false;
    4362:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4364:	ec 89       	ldd	r30, Y+20	; 0x14
    4366:	fd 89       	ldd	r31, Y+21	; 0x15
    4368:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    436a:	ea 89       	ldd	r30, Y+18	; 0x12
    436c:	fb 89       	ldd	r31, Y+19	; 0x13
    436e:	80 81       	ld	r24, Z
    4370:	80 61       	ori	r24, 0x10	; 16
    4372:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4374:	ea 89       	ldd	r30, Y+18	; 0x12
    4376:	fb 89       	ldd	r31, Y+19	; 0x13
    4378:	80 81       	ld	r24, Z
    437a:	88 60       	ori	r24, 0x08	; 8
    437c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    437e:	ea 89       	ldd	r30, Y+18	; 0x12
    4380:	fb 89       	ldd	r31, Y+19	; 0x13
    4382:	80 81       	ld	r24, Z
    4384:	80 68       	ori	r24, 0x80	; 128
    4386:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4388:	ea 89       	ldd	r30, Y+18	; 0x12
    438a:	fb 89       	ldd	r31, Y+19	; 0x13
    438c:	80 81       	ld	r24, Z
    438e:	8f 7d       	andi	r24, 0xDF	; 223
    4390:	80 83       	st	Z, r24
}
    4392:	df 91       	pop	r29
    4394:	cf 91       	pop	r28
    4396:	1f 91       	pop	r17
    4398:	ff 90       	pop	r15
    439a:	ef 90       	pop	r14
    439c:	df 90       	pop	r13
    439e:	cf 90       	pop	r12
    43a0:	08 95       	ret

000043a2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    43a2:	1f 92       	push	r1
    43a4:	0f 92       	push	r0
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	0f 92       	push	r0
    43aa:	11 24       	eor	r1, r1
    43ac:	2f 93       	push	r18
    43ae:	8f 93       	push	r24
    43b0:	9f 93       	push	r25
    43b2:	ef 93       	push	r30
    43b4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    43b6:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <Serial+0x10>
    43ba:	f0 91 74 06 	lds	r31, 0x0674	; 0x800674 <Serial+0x11>
    43be:	80 81       	ld	r24, Z
    43c0:	e0 91 79 06 	lds	r30, 0x0679	; 0x800679 <Serial+0x16>
    43c4:	f0 91 7a 06 	lds	r31, 0x067A	; 0x80067a <Serial+0x17>
    43c8:	82 fd       	sbrc	r24, 2
    43ca:	12 c0       	rjmp	.+36     	; 0x43f0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    43cc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    43ce:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <Serial+0x19>
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    43d6:	20 91 7d 06 	lds	r18, 0x067D	; 0x80067d <Serial+0x1a>
    43da:	82 17       	cp	r24, r18
    43dc:	51 f0       	breq	.+20     	; 0x43f2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    43de:	e0 91 7c 06 	lds	r30, 0x067C	; 0x80067c <Serial+0x19>
    43e2:	f0 e0       	ldi	r31, 0x00	; 0
    43e4:	ed 59       	subi	r30, 0x9D	; 157
    43e6:	f9 4f       	sbci	r31, 0xF9	; 249
    43e8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    43ea:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <Serial+0x19>
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    43f0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    43f2:	ff 91       	pop	r31
    43f4:	ef 91       	pop	r30
    43f6:	9f 91       	pop	r25
    43f8:	8f 91       	pop	r24
    43fa:	2f 91       	pop	r18
    43fc:	0f 90       	pop	r0
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	0f 90       	pop	r0
    4402:	1f 90       	pop	r1
    4404:	18 95       	reti

00004406 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4406:	1f 92       	push	r1
    4408:	0f 92       	push	r0
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	0f 92       	push	r0
    440e:	11 24       	eor	r1, r1
    4410:	2f 93       	push	r18
    4412:	3f 93       	push	r19
    4414:	4f 93       	push	r20
    4416:	5f 93       	push	r21
    4418:	6f 93       	push	r22
    441a:	7f 93       	push	r23
    441c:	8f 93       	push	r24
    441e:	9f 93       	push	r25
    4420:	af 93       	push	r26
    4422:	bf 93       	push	r27
    4424:	ef 93       	push	r30
    4426:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4428:	83 e6       	ldi	r24, 0x63	; 99
    442a:	96 e0       	ldi	r25, 0x06	; 6
    442c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4430:	ff 91       	pop	r31
    4432:	ef 91       	pop	r30
    4434:	bf 91       	pop	r27
    4436:	af 91       	pop	r26
    4438:	9f 91       	pop	r25
    443a:	8f 91       	pop	r24
    443c:	7f 91       	pop	r23
    443e:	6f 91       	pop	r22
    4440:	5f 91       	pop	r21
    4442:	4f 91       	pop	r20
    4444:	3f 91       	pop	r19
    4446:	2f 91       	pop	r18
    4448:	0f 90       	pop	r0
    444a:	0f be       	out	0x3f, r0	; 63
    444c:	0f 90       	pop	r0
    444e:	1f 90       	pop	r1
    4450:	18 95       	reti

00004452 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4452:	83 e6       	ldi	r24, 0x63	; 99
    4454:	96 e0       	ldi	r25, 0x06	; 6
    4456:	0e 94 a6 20 	call	0x414c	; 0x414c <_ZN14HardwareSerial9availableEv>
    445a:	21 e0       	ldi	r18, 0x01	; 1
    445c:	89 2b       	or	r24, r25
    445e:	09 f4       	brne	.+2      	; 0x4462 <_Z17Serial0_availablev+0x10>
    4460:	20 e0       	ldi	r18, 0x00	; 0
}
    4462:	82 2f       	mov	r24, r18
    4464:	08 95       	ret

00004466 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4466:	e3 e6       	ldi	r30, 0x63	; 99
    4468:	f6 e0       	ldi	r31, 0x06	; 6
    446a:	13 82       	std	Z+3, r1	; 0x03
    446c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    446e:	88 ee       	ldi	r24, 0xE8	; 232
    4470:	93 e0       	ldi	r25, 0x03	; 3
    4472:	a0 e0       	ldi	r26, 0x00	; 0
    4474:	b0 e0       	ldi	r27, 0x00	; 0
    4476:	84 83       	std	Z+4, r24	; 0x04
    4478:	95 83       	std	Z+5, r25	; 0x05
    447a:	a6 83       	std	Z+6, r26	; 0x06
    447c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    447e:	88 ea       	ldi	r24, 0xA8	; 168
    4480:	93 e0       	ldi	r25, 0x03	; 3
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
    4486:	85 ec       	ldi	r24, 0xC5	; 197
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	95 87       	std	Z+13, r25	; 0x0d
    448c:	84 87       	std	Z+12, r24	; 0x0c
    448e:	84 ec       	ldi	r24, 0xC4	; 196
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	97 87       	std	Z+15, r25	; 0x0f
    4494:	86 87       	std	Z+14, r24	; 0x0e
    4496:	80 ec       	ldi	r24, 0xC0	; 192
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	91 8b       	std	Z+17, r25	; 0x11
    449c:	80 8b       	std	Z+16, r24	; 0x10
    449e:	81 ec       	ldi	r24, 0xC1	; 193
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	93 8b       	std	Z+19, r25	; 0x13
    44a4:	82 8b       	std	Z+18, r24	; 0x12
    44a6:	82 ec       	ldi	r24, 0xC2	; 194
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	95 8b       	std	Z+21, r25	; 0x15
    44ac:	84 8b       	std	Z+20, r24	; 0x14
    44ae:	86 ec       	ldi	r24, 0xC6	; 198
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	97 8b       	std	Z+23, r25	; 0x17
    44b4:	86 8b       	std	Z+22, r24	; 0x16
    44b6:	11 8e       	std	Z+25, r1	; 0x19
    44b8:	12 8e       	std	Z+26, r1	; 0x1a
    44ba:	13 8e       	std	Z+27, r1	; 0x1b
    44bc:	14 8e       	std	Z+28, r1	; 0x1c
    44be:	08 95       	ret

000044c0 <initVariant>:
    44c0:	08 95       	ret

000044c2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    44c2:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <init>

	initVariant();
    44c6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    44ca:	0e 94 84 08 	call	0x1108	; 0x1108 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    44ce:	c4 ed       	ldi	r28, 0xD4	; 212
    44d0:	d0 e2       	ldi	r29, 0x20	; 32
#endif
	
	setup();
    
	for (;;) {
		loop();
    44d2:	0e 94 fe 19 	call	0x33fc	; 0x33fc <loop>
		if (serialEventRun) serialEventRun();
    44d6:	20 97       	sbiw	r28, 0x00	; 0
    44d8:	e1 f3       	breq	.-8      	; 0x44d2 <main+0x10>
    44da:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <_Z14serialEventRunv>
    44de:	f9 cf       	rjmp	.-14     	; 0x44d2 <main+0x10>

000044e0 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44e0:	cf 92       	push	r12
    44e2:	df 92       	push	r13
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	6c 01       	movw	r12, r24
    44f2:	7a 01       	movw	r14, r20
    44f4:	8b 01       	movw	r16, r22
    44f6:	c0 e0       	ldi	r28, 0x00	; 0
    44f8:	d0 e0       	ldi	r29, 0x00	; 0
    44fa:	ce 15       	cp	r28, r14
    44fc:	df 05       	cpc	r29, r15
    44fe:	81 f0       	breq	.+32     	; 0x4520 <_ZN5Print5writeEPKhj+0x40>
    4500:	d8 01       	movw	r26, r16
    4502:	6d 91       	ld	r22, X+
    4504:	8d 01       	movw	r16, r26
    4506:	d6 01       	movw	r26, r12
    4508:	ed 91       	ld	r30, X+
    450a:	fc 91       	ld	r31, X
    450c:	01 90       	ld	r0, Z+
    450e:	f0 81       	ld	r31, Z
    4510:	e0 2d       	mov	r30, r0
    4512:	c6 01       	movw	r24, r12
    4514:	09 95       	icall
    4516:	89 2b       	or	r24, r25
    4518:	11 f0       	breq	.+4      	; 0x451e <_ZN5Print5writeEPKhj+0x3e>
    451a:	21 96       	adiw	r28, 0x01	; 1
    451c:	ee cf       	rjmp	.-36     	; 0x44fa <_ZN5Print5writeEPKhj+0x1a>
    451e:	7e 01       	movw	r14, r28
    4520:	c7 01       	movw	r24, r14
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	ff 90       	pop	r15
    452c:	ef 90       	pop	r14
    452e:	df 90       	pop	r13
    4530:	cf 90       	pop	r12
    4532:	08 95       	ret

00004534 <_ZN5Print5writeEPKc>:
    4534:	61 15       	cp	r22, r1
    4536:	71 05       	cpc	r23, r1
    4538:	79 f0       	breq	.+30     	; 0x4558 <_ZN5Print5writeEPKc+0x24>
    453a:	fb 01       	movw	r30, r22
    453c:	01 90       	ld	r0, Z+
    453e:	00 20       	and	r0, r0
    4540:	e9 f7       	brne	.-6      	; 0x453c <_ZN5Print5writeEPKc+0x8>
    4542:	31 97       	sbiw	r30, 0x01	; 1
    4544:	af 01       	movw	r20, r30
    4546:	46 1b       	sub	r20, r22
    4548:	57 0b       	sbc	r21, r23
    454a:	dc 01       	movw	r26, r24
    454c:	ed 91       	ld	r30, X+
    454e:	fc 91       	ld	r31, X
    4550:	02 80       	ldd	r0, Z+2	; 0x02
    4552:	f3 81       	ldd	r31, Z+3	; 0x03
    4554:	e0 2d       	mov	r30, r0
    4556:	09 94       	ijmp
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	08 95       	ret

0000455e <_ZN5Print5printEPK19__FlashStringHelper>:
    455e:	ef 92       	push	r14
    4560:	ff 92       	push	r15
    4562:	0f 93       	push	r16
    4564:	1f 93       	push	r17
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
    456a:	8c 01       	movw	r16, r24
    456c:	7b 01       	movw	r14, r22
    456e:	c0 e0       	ldi	r28, 0x00	; 0
    4570:	d0 e0       	ldi	r29, 0x00	; 0
    4572:	f7 01       	movw	r30, r14
    4574:	ec 0f       	add	r30, r28
    4576:	fd 1f       	adc	r31, r29
    4578:	64 91       	lpm	r22, Z
    457a:	66 23       	and	r22, r22
    457c:	61 f0       	breq	.+24     	; 0x4596 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    457e:	d8 01       	movw	r26, r16
    4580:	ed 91       	ld	r30, X+
    4582:	fc 91       	ld	r31, X
    4584:	01 90       	ld	r0, Z+
    4586:	f0 81       	ld	r31, Z
    4588:	e0 2d       	mov	r30, r0
    458a:	c8 01       	movw	r24, r16
    458c:	09 95       	icall
    458e:	89 2b       	or	r24, r25
    4590:	11 f0       	breq	.+4      	; 0x4596 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4592:	21 96       	adiw	r28, 0x01	; 1
    4594:	ee cf       	rjmp	.-36     	; 0x4572 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    4596:	ce 01       	movw	r24, r28
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	ff 90       	pop	r15
    45a2:	ef 90       	pop	r14
    45a4:	08 95       	ret

000045a6 <_ZN5Print5printEPKc>:
    45a6:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <_ZN5Print5writeEPKc>

000045aa <_ZN5Print5printEc>:
    45aa:	dc 01       	movw	r26, r24
    45ac:	ed 91       	ld	r30, X+
    45ae:	fc 91       	ld	r31, X
    45b0:	01 90       	ld	r0, Z+
    45b2:	f0 81       	ld	r31, Z
    45b4:	e0 2d       	mov	r30, r0
    45b6:	09 94       	ijmp

000045b8 <_ZN5Print7printlnEv>:
    45b8:	64 eb       	ldi	r22, 0xB4	; 180
    45ba:	73 e0       	ldi	r23, 0x03	; 3
    45bc:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <_ZN5Print5writeEPKc>

000045c0 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	ec 01       	movw	r28, r24
    45ca:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    45ce:	8c 01       	movw	r16, r24
    45d0:	ce 01       	movw	r24, r28
    45d2:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    45d6:	80 0f       	add	r24, r16
    45d8:	91 1f       	adc	r25, r17
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	08 95       	ret

000045e4 <_ZN5Print7printlnEPKc>:
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	cf 93       	push	r28
    45ea:	df 93       	push	r29
    45ec:	ec 01       	movw	r28, r24
    45ee:	0e 94 9a 22 	call	0x4534	; 0x4534 <_ZN5Print5writeEPKc>
    45f2:	8c 01       	movw	r16, r24
    45f4:	ce 01       	movw	r24, r28
    45f6:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    45fa:	80 0f       	add	r24, r16
    45fc:	91 1f       	adc	r25, r17
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	1f 91       	pop	r17
    4604:	0f 91       	pop	r16
    4606:	08 95       	ret

00004608 <_ZN5Print7printlnEc>:
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	ec 01       	movw	r28, r24
    4612:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN5Print5printEc>
    4616:	8c 01       	movw	r16, r24
    4618:	ce 01       	movw	r24, r28
    461a:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    461e:	80 0f       	add	r24, r16
    4620:	91 1f       	adc	r25, r17
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	08 95       	ret

0000462c <_ZN5Print11printNumberEmh>:
    462c:	8f 92       	push	r8
    462e:	9f 92       	push	r9
    4630:	af 92       	push	r10
    4632:	bf 92       	push	r11
    4634:	ef 92       	push	r14
    4636:	ff 92       	push	r15
    4638:	0f 93       	push	r16
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	cd b7       	in	r28, 0x3d	; 61
    4642:	de b7       	in	r29, 0x3e	; 62
    4644:	a1 97       	sbiw	r28, 0x21	; 33
    4646:	0f b6       	in	r0, 0x3f	; 63
    4648:	f8 94       	cli
    464a:	de bf       	out	0x3e, r29	; 62
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	cd bf       	out	0x3d, r28	; 61
    4650:	7c 01       	movw	r14, r24
    4652:	fa 01       	movw	r30, r20
    4654:	cb 01       	movw	r24, r22
    4656:	19 a2       	std	Y+33, r1	; 0x21
    4658:	22 30       	cpi	r18, 0x02	; 2
    465a:	08 f4       	brcc	.+2      	; 0x465e <_ZN5Print11printNumberEmh+0x32>
    465c:	2a e0       	ldi	r18, 0x0A	; 10
    465e:	8e 01       	movw	r16, r28
    4660:	0f 5d       	subi	r16, 0xDF	; 223
    4662:	1f 4f       	sbci	r17, 0xFF	; 255
    4664:	82 2e       	mov	r8, r18
    4666:	91 2c       	mov	r9, r1
    4668:	a1 2c       	mov	r10, r1
    466a:	b1 2c       	mov	r11, r1
    466c:	bf 01       	movw	r22, r30
    466e:	a5 01       	movw	r20, r10
    4670:	94 01       	movw	r18, r8
    4672:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    4676:	f9 01       	movw	r30, r18
    4678:	ca 01       	movw	r24, r20
    467a:	01 50       	subi	r16, 0x01	; 1
    467c:	11 09       	sbc	r17, r1
    467e:	6a 30       	cpi	r22, 0x0A	; 10
    4680:	10 f4       	brcc	.+4      	; 0x4686 <_ZN5Print11printNumberEmh+0x5a>
    4682:	60 5d       	subi	r22, 0xD0	; 208
    4684:	01 c0       	rjmp	.+2      	; 0x4688 <_ZN5Print11printNumberEmh+0x5c>
    4686:	69 5c       	subi	r22, 0xC9	; 201
    4688:	d8 01       	movw	r26, r16
    468a:	6c 93       	st	X, r22
    468c:	23 2b       	or	r18, r19
    468e:	24 2b       	or	r18, r20
    4690:	25 2b       	or	r18, r21
    4692:	61 f7       	brne	.-40     	; 0x466c <_ZN5Print11printNumberEmh+0x40>
    4694:	b8 01       	movw	r22, r16
    4696:	c7 01       	movw	r24, r14
    4698:	0e 94 9a 22 	call	0x4534	; 0x4534 <_ZN5Print5writeEPKc>
    469c:	a1 96       	adiw	r28, 0x21	; 33
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	de bf       	out	0x3e, r29	; 62
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	cd bf       	out	0x3d, r28	; 61
    46a8:	df 91       	pop	r29
    46aa:	cf 91       	pop	r28
    46ac:	1f 91       	pop	r17
    46ae:	0f 91       	pop	r16
    46b0:	ff 90       	pop	r15
    46b2:	ef 90       	pop	r14
    46b4:	bf 90       	pop	r11
    46b6:	af 90       	pop	r10
    46b8:	9f 90       	pop	r9
    46ba:	8f 90       	pop	r8
    46bc:	08 95       	ret

000046be <_ZN5Print5printEmi>:
    46be:	21 15       	cp	r18, r1
    46c0:	31 05       	cpc	r19, r1
    46c2:	41 f4       	brne	.+16     	; 0x46d4 <_ZN5Print5printEmi+0x16>
    46c4:	dc 01       	movw	r26, r24
    46c6:	ed 91       	ld	r30, X+
    46c8:	fc 91       	ld	r31, X
    46ca:	01 90       	ld	r0, Z+
    46cc:	f0 81       	ld	r31, Z
    46ce:	e0 2d       	mov	r30, r0
    46d0:	64 2f       	mov	r22, r20
    46d2:	09 94       	ijmp
    46d4:	0c 94 16 23 	jmp	0x462c	; 0x462c <_ZN5Print11printNumberEmh>

000046d8 <_ZN5Print5printEhi>:
    46d8:	9a 01       	movw	r18, r20
    46da:	46 2f       	mov	r20, r22
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	70 e0       	ldi	r23, 0x00	; 0
    46e2:	0c 94 5f 23 	jmp	0x46be	; 0x46be <_ZN5Print5printEmi>

000046e6 <_ZN5Print7printlnEhi>:
    46e6:	0f 93       	push	r16
    46e8:	1f 93       	push	r17
    46ea:	cf 93       	push	r28
    46ec:	df 93       	push	r29
    46ee:	ec 01       	movw	r28, r24
    46f0:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_ZN5Print5printEhi>
    46f4:	8c 01       	movw	r16, r24
    46f6:	ce 01       	movw	r24, r28
    46f8:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    46fc:	80 0f       	add	r24, r16
    46fe:	91 1f       	adc	r25, r17
    4700:	df 91       	pop	r29
    4702:	cf 91       	pop	r28
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	08 95       	ret

0000470a <_ZN5Print5printEji>:
    470a:	9a 01       	movw	r18, r20
    470c:	ab 01       	movw	r20, r22
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	0c 94 5f 23 	jmp	0x46be	; 0x46be <_ZN5Print5printEmi>

00004716 <_ZN5Print7printlnEji>:
    4716:	0f 93       	push	r16
    4718:	1f 93       	push	r17
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
    471e:	ec 01       	movw	r28, r24
    4720:	0e 94 85 23 	call	0x470a	; 0x470a <_ZN5Print5printEji>
    4724:	8c 01       	movw	r16, r24
    4726:	ce 01       	movw	r24, r28
    4728:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    472c:	80 0f       	add	r24, r16
    472e:	91 1f       	adc	r25, r17
    4730:	df 91       	pop	r29
    4732:	cf 91       	pop	r28
    4734:	1f 91       	pop	r17
    4736:	0f 91       	pop	r16
    4738:	08 95       	ret

0000473a <_ZN5Print7printlnEmi>:
    473a:	0f 93       	push	r16
    473c:	1f 93       	push	r17
    473e:	cf 93       	push	r28
    4740:	df 93       	push	r29
    4742:	ec 01       	movw	r28, r24
    4744:	0e 94 5f 23 	call	0x46be	; 0x46be <_ZN5Print5printEmi>
    4748:	8c 01       	movw	r16, r24
    474a:	ce 01       	movw	r24, r28
    474c:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    4750:	80 0f       	add	r24, r16
    4752:	91 1f       	adc	r25, r17
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	0f 91       	pop	r16
    475c:	08 95       	ret

0000475e <_ZN5Print5printEli>:
    475e:	cf 92       	push	r12
    4760:	df 92       	push	r13
    4762:	ef 92       	push	r14
    4764:	ff 92       	push	r15
    4766:	0f 93       	push	r16
    4768:	1f 93       	push	r17
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	21 15       	cp	r18, r1
    4770:	31 05       	cpc	r19, r1
    4772:	81 f4       	brne	.+32     	; 0x4794 <_ZN5Print5printEli+0x36>
    4774:	dc 01       	movw	r26, r24
    4776:	ed 91       	ld	r30, X+
    4778:	fc 91       	ld	r31, X
    477a:	01 90       	ld	r0, Z+
    477c:	f0 81       	ld	r31, Z
    477e:	e0 2d       	mov	r30, r0
    4780:	64 2f       	mov	r22, r20
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	1f 91       	pop	r17
    4788:	0f 91       	pop	r16
    478a:	ff 90       	pop	r15
    478c:	ef 90       	pop	r14
    478e:	df 90       	pop	r13
    4790:	cf 90       	pop	r12
    4792:	09 94       	ijmp
    4794:	2a 30       	cpi	r18, 0x0A	; 10
    4796:	31 05       	cpc	r19, r1
    4798:	01 f5       	brne	.+64     	; 0x47da <_ZN5Print5printEli+0x7c>
    479a:	77 ff       	sbrs	r23, 7
    479c:	1d c0       	rjmp	.+58     	; 0x47d8 <_ZN5Print5printEli+0x7a>
    479e:	6a 01       	movw	r12, r20
    47a0:	7b 01       	movw	r14, r22
    47a2:	ec 01       	movw	r28, r24
    47a4:	6d e2       	ldi	r22, 0x2D	; 45
    47a6:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN5Print5printEc>
    47aa:	8c 01       	movw	r16, r24
    47ac:	44 27       	eor	r20, r20
    47ae:	55 27       	eor	r21, r21
    47b0:	ba 01       	movw	r22, r20
    47b2:	4c 19       	sub	r20, r12
    47b4:	5d 09       	sbc	r21, r13
    47b6:	6e 09       	sbc	r22, r14
    47b8:	7f 09       	sbc	r23, r15
    47ba:	2a e0       	ldi	r18, 0x0A	; 10
    47bc:	ce 01       	movw	r24, r28
    47be:	0e 94 16 23 	call	0x462c	; 0x462c <_ZN5Print11printNumberEmh>
    47c2:	80 0f       	add	r24, r16
    47c4:	91 1f       	adc	r25, r17
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	1f 91       	pop	r17
    47cc:	0f 91       	pop	r16
    47ce:	ff 90       	pop	r15
    47d0:	ef 90       	pop	r14
    47d2:	df 90       	pop	r13
    47d4:	cf 90       	pop	r12
    47d6:	08 95       	ret
    47d8:	2a e0       	ldi	r18, 0x0A	; 10
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	1f 91       	pop	r17
    47e0:	0f 91       	pop	r16
    47e2:	ff 90       	pop	r15
    47e4:	ef 90       	pop	r14
    47e6:	df 90       	pop	r13
    47e8:	cf 90       	pop	r12
    47ea:	0c 94 16 23 	jmp	0x462c	; 0x462c <_ZN5Print11printNumberEmh>

000047ee <_ZN5Print5printEii>:
    47ee:	9a 01       	movw	r18, r20
    47f0:	ab 01       	movw	r20, r22
    47f2:	77 0f       	add	r23, r23
    47f4:	66 0b       	sbc	r22, r22
    47f6:	77 0b       	sbc	r23, r23
    47f8:	0c 94 af 23 	jmp	0x475e	; 0x475e <_ZN5Print5printEli>

000047fc <_ZN5Print7printlnEii>:
    47fc:	0f 93       	push	r16
    47fe:	1f 93       	push	r17
    4800:	cf 93       	push	r28
    4802:	df 93       	push	r29
    4804:	ec 01       	movw	r28, r24
    4806:	0e 94 f7 23 	call	0x47ee	; 0x47ee <_ZN5Print5printEii>
    480a:	8c 01       	movw	r16, r24
    480c:	ce 01       	movw	r24, r28
    480e:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    4812:	80 0f       	add	r24, r16
    4814:	91 1f       	adc	r25, r17
    4816:	df 91       	pop	r29
    4818:	cf 91       	pop	r28
    481a:	1f 91       	pop	r17
    481c:	0f 91       	pop	r16
    481e:	08 95       	ret

00004820 <_ZN5Print7printlnEli>:
    4820:	0f 93       	push	r16
    4822:	1f 93       	push	r17
    4824:	cf 93       	push	r28
    4826:	df 93       	push	r29
    4828:	ec 01       	movw	r28, r24
    482a:	0e 94 af 23 	call	0x475e	; 0x475e <_ZN5Print5printEli>
    482e:	8c 01       	movw	r16, r24
    4830:	ce 01       	movw	r24, r28
    4832:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    4836:	80 0f       	add	r24, r16
    4838:	91 1f       	adc	r25, r17
    483a:	df 91       	pop	r29
    483c:	cf 91       	pop	r28
    483e:	1f 91       	pop	r17
    4840:	0f 91       	pop	r16
    4842:	08 95       	ret

00004844 <_ZN5Print10printFloatEdh>:
    4844:	7f 92       	push	r7
    4846:	8f 92       	push	r8
    4848:	9f 92       	push	r9
    484a:	af 92       	push	r10
    484c:	bf 92       	push	r11
    484e:	cf 92       	push	r12
    4850:	df 92       	push	r13
    4852:	ef 92       	push	r14
    4854:	ff 92       	push	r15
    4856:	0f 93       	push	r16
    4858:	1f 93       	push	r17
    485a:	cf 93       	push	r28
    485c:	df 93       	push	r29
    485e:	8c 01       	movw	r16, r24
    4860:	6a 01       	movw	r12, r20
    4862:	7b 01       	movw	r14, r22
    4864:	72 2e       	mov	r7, r18
    4866:	9a 01       	movw	r18, r20
    4868:	ab 01       	movw	r20, r22
    486a:	c7 01       	movw	r24, r14
    486c:	b6 01       	movw	r22, r12
    486e:	0e 94 46 33 	call	0x668c	; 0x668c <__unordsf2>
    4872:	88 23       	and	r24, r24
    4874:	19 f0       	breq	.+6      	; 0x487c <_ZN5Print10printFloatEdh+0x38>
    4876:	67 eb       	ldi	r22, 0xB7	; 183
    4878:	73 e0       	ldi	r23, 0x03	; 3
    487a:	27 c0       	rjmp	.+78     	; 0x48ca <_ZN5Print10printFloatEdh+0x86>
    487c:	46 01       	movw	r8, r12
    487e:	57 01       	movw	r10, r14
    4880:	e8 94       	clt
    4882:	b7 f8       	bld	r11, 7
    4884:	2f ef       	ldi	r18, 0xFF	; 255
    4886:	3f ef       	ldi	r19, 0xFF	; 255
    4888:	4f e7       	ldi	r20, 0x7F	; 127
    488a:	5f e7       	ldi	r21, 0x7F	; 127
    488c:	c5 01       	movw	r24, r10
    488e:	b4 01       	movw	r22, r8
    4890:	0e 94 46 33 	call	0x668c	; 0x668c <__unordsf2>
    4894:	81 11       	cpse	r24, r1
    4896:	0d c0       	rjmp	.+26     	; 0x48b2 <_ZN5Print10printFloatEdh+0x6e>
    4898:	2f ef       	ldi	r18, 0xFF	; 255
    489a:	3f ef       	ldi	r19, 0xFF	; 255
    489c:	4f e7       	ldi	r20, 0x7F	; 127
    489e:	5f e7       	ldi	r21, 0x7F	; 127
    48a0:	c5 01       	movw	r24, r10
    48a2:	b4 01       	movw	r22, r8
    48a4:	0e 94 41 33 	call	0x6682	; 0x6682 <__cmpsf2>
    48a8:	18 16       	cp	r1, r24
    48aa:	1c f4       	brge	.+6      	; 0x48b2 <_ZN5Print10printFloatEdh+0x6e>
    48ac:	6b eb       	ldi	r22, 0xBB	; 187
    48ae:	73 e0       	ldi	r23, 0x03	; 3
    48b0:	0c c0       	rjmp	.+24     	; 0x48ca <_ZN5Print10printFloatEdh+0x86>
    48b2:	2f ef       	ldi	r18, 0xFF	; 255
    48b4:	3f ef       	ldi	r19, 0xFF	; 255
    48b6:	4f e7       	ldi	r20, 0x7F	; 127
    48b8:	5f e4       	ldi	r21, 0x4F	; 79
    48ba:	c7 01       	movw	r24, r14
    48bc:	b6 01       	movw	r22, r12
    48be:	0e 94 10 20 	call	0x4020	; 0x4020 <__gesf2>
    48c2:	18 16       	cp	r1, r24
    48c4:	94 f4       	brge	.+36     	; 0x48ea <_ZN5Print10printFloatEdh+0xa6>
    48c6:	6f eb       	ldi	r22, 0xBF	; 191
    48c8:	73 e0       	ldi	r23, 0x03	; 3
    48ca:	c8 01       	movw	r24, r16
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	1f 91       	pop	r17
    48d2:	0f 91       	pop	r16
    48d4:	ff 90       	pop	r15
    48d6:	ef 90       	pop	r14
    48d8:	df 90       	pop	r13
    48da:	cf 90       	pop	r12
    48dc:	bf 90       	pop	r11
    48de:	af 90       	pop	r10
    48e0:	9f 90       	pop	r9
    48e2:	8f 90       	pop	r8
    48e4:	7f 90       	pop	r7
    48e6:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <_ZN5Print5writeEPKc>
    48ea:	2f ef       	ldi	r18, 0xFF	; 255
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	5f ec       	ldi	r21, 0xCF	; 207
    48f2:	c7 01       	movw	r24, r14
    48f4:	b6 01       	movw	r22, r12
    48f6:	0e 94 41 33 	call	0x6682	; 0x6682 <__cmpsf2>
    48fa:	87 fd       	sbrc	r24, 7
    48fc:	e4 cf       	rjmp	.-56     	; 0x48c6 <_ZN5Print10printFloatEdh+0x82>
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	a9 01       	movw	r20, r18
    4904:	c7 01       	movw	r24, r14
    4906:	b6 01       	movw	r22, r12
    4908:	0e 94 41 33 	call	0x6682	; 0x6682 <__cmpsf2>
    490c:	87 ff       	sbrs	r24, 7
    490e:	0a c0       	rjmp	.+20     	; 0x4924 <_ZN5Print10printFloatEdh+0xe0>
    4910:	6d e2       	ldi	r22, 0x2D	; 45
    4912:	c8 01       	movw	r24, r16
    4914:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN5Print5printEc>
    4918:	ec 01       	movw	r28, r24
    491a:	f7 fa       	bst	r15, 7
    491c:	f0 94       	com	r15
    491e:	f7 f8       	bld	r15, 7
    4920:	f0 94       	com	r15
    4922:	02 c0       	rjmp	.+4      	; 0x4928 <_ZN5Print10printFloatEdh+0xe4>
    4924:	c0 e0       	ldi	r28, 0x00	; 0
    4926:	d0 e0       	ldi	r29, 0x00	; 0
    4928:	b1 2c       	mov	r11, r1
    492a:	60 e0       	ldi	r22, 0x00	; 0
    492c:	70 e0       	ldi	r23, 0x00	; 0
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	9f e3       	ldi	r25, 0x3F	; 63
    4932:	7b 14       	cp	r7, r11
    4934:	41 f0       	breq	.+16     	; 0x4946 <_ZN5Print10printFloatEdh+0x102>
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e2       	ldi	r20, 0x20	; 32
    493c:	51 e4       	ldi	r21, 0x41	; 65
    493e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__divsf3>
    4942:	b3 94       	inc	r11
    4944:	f6 cf       	rjmp	.-20     	; 0x4932 <_ZN5Print10printFloatEdh+0xee>
    4946:	a7 01       	movw	r20, r14
    4948:	96 01       	movw	r18, r12
    494a:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <__addsf3>
    494e:	6b 01       	movw	r12, r22
    4950:	7c 01       	movw	r14, r24
    4952:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__fixunssfsi>
    4956:	4b 01       	movw	r8, r22
    4958:	5c 01       	movw	r10, r24
    495a:	2a e0       	ldi	r18, 0x0A	; 10
    495c:	ab 01       	movw	r20, r22
    495e:	bc 01       	movw	r22, r24
    4960:	c8 01       	movw	r24, r16
    4962:	0e 94 16 23 	call	0x462c	; 0x462c <_ZN5Print11printNumberEmh>
    4966:	c8 0f       	add	r28, r24
    4968:	d9 1f       	adc	r29, r25
    496a:	77 20       	and	r7, r7
    496c:	c9 f1       	breq	.+114    	; 0x49e0 <_ZN5Print10printFloatEdh+0x19c>
    496e:	c5 01       	movw	r24, r10
    4970:	b4 01       	movw	r22, r8
    4972:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <__floatunsisf>
    4976:	9b 01       	movw	r18, r22
    4978:	ac 01       	movw	r20, r24
    497a:	c7 01       	movw	r24, r14
    497c:	b6 01       	movw	r22, r12
    497e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__subsf3>
    4982:	6b 01       	movw	r12, r22
    4984:	7c 01       	movw	r14, r24
    4986:	63 ec       	ldi	r22, 0xC3	; 195
    4988:	73 e0       	ldi	r23, 0x03	; 3
    498a:	c8 01       	movw	r24, r16
    498c:	0e 94 9a 22 	call	0x4534	; 0x4534 <_ZN5Print5writeEPKc>
    4990:	c8 0f       	add	r28, r24
    4992:	d9 1f       	adc	r29, r25
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	40 e2       	ldi	r20, 0x20	; 32
    499a:	51 e4       	ldi	r21, 0x41	; 65
    499c:	c7 01       	movw	r24, r14
    499e:	b6 01       	movw	r22, r12
    49a0:	0e 94 15 20 	call	0x402a	; 0x402a <__mulsf3>
    49a4:	4b 01       	movw	r8, r22
    49a6:	5c 01       	movw	r10, r24
    49a8:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__fixsfsi>
    49ac:	6b 01       	movw	r12, r22
    49ae:	7c 01       	movw	r14, r24
    49b0:	4a e0       	ldi	r20, 0x0A	; 10
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	c8 01       	movw	r24, r16
    49b6:	0e 94 f7 23 	call	0x47ee	; 0x47ee <_ZN5Print5printEii>
    49ba:	c8 0f       	add	r28, r24
    49bc:	d9 1f       	adc	r29, r25
    49be:	b6 01       	movw	r22, r12
    49c0:	dd 0c       	add	r13, r13
    49c2:	88 0b       	sbc	r24, r24
    49c4:	99 0b       	sbc	r25, r25
    49c6:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__floatsisf>
    49ca:	9b 01       	movw	r18, r22
    49cc:	ac 01       	movw	r20, r24
    49ce:	c5 01       	movw	r24, r10
    49d0:	b4 01       	movw	r22, r8
    49d2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__subsf3>
    49d6:	6b 01       	movw	r12, r22
    49d8:	7c 01       	movw	r14, r24
    49da:	7a 94       	dec	r7
    49dc:	71 10       	cpse	r7, r1
    49de:	da cf       	rjmp	.-76     	; 0x4994 <_ZN5Print10printFloatEdh+0x150>
    49e0:	ce 01       	movw	r24, r28
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	df 90       	pop	r13
    49f0:	cf 90       	pop	r12
    49f2:	bf 90       	pop	r11
    49f4:	af 90       	pop	r10
    49f6:	9f 90       	pop	r9
    49f8:	8f 90       	pop	r8
    49fa:	7f 90       	pop	r7
    49fc:	08 95       	ret

000049fe <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    49fe:	0f 93       	push	r16
    4a00:	1f 93       	push	r17
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4a08:	0e 94 22 24 	call	0x4844	; 0x4844 <_ZN5Print10printFloatEdh>
    4a0c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    4a0e:	ce 01       	movw	r24, r28
    4a10:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
  return n;
}
    4a14:	80 0f       	add	r24, r16
    4a16:	91 1f       	adc	r25, r17
    4a18:	df 91       	pop	r29
    4a1a:	cf 91       	pop	r28
    4a1c:	1f 91       	pop	r17
    4a1e:	0f 91       	pop	r16
    4a20:	08 95       	ret

00004a22 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4a22:	1f 92       	push	r1
    4a24:	0f 92       	push	r0
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	0f 92       	push	r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	2f 93       	push	r18
    4a2e:	3f 93       	push	r19
    4a30:	8f 93       	push	r24
    4a32:	9f 93       	push	r25
    4a34:	af 93       	push	r26
    4a36:	bf 93       	push	r27
    4a38:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <timer0_millis>
    4a3c:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <timer0_millis+0x1>
    4a40:	a0 91 03 07 	lds	r26, 0x0703	; 0x800703 <timer0_millis+0x2>
    4a44:	b0 91 04 07 	lds	r27, 0x0704	; 0x800704 <timer0_millis+0x3>
    4a48:	30 91 00 07 	lds	r19, 0x0700	; 0x800700 <timer0_fract>
    4a4c:	23 e0       	ldi	r18, 0x03	; 3
    4a4e:	23 0f       	add	r18, r19
    4a50:	2d 37       	cpi	r18, 0x7D	; 125
    4a52:	20 f4       	brcc	.+8      	; 0x4a5c <__vector_16+0x3a>
    4a54:	01 96       	adiw	r24, 0x01	; 1
    4a56:	a1 1d       	adc	r26, r1
    4a58:	b1 1d       	adc	r27, r1
    4a5a:	05 c0       	rjmp	.+10     	; 0x4a66 <__vector_16+0x44>
    4a5c:	26 e8       	ldi	r18, 0x86	; 134
    4a5e:	23 0f       	add	r18, r19
    4a60:	02 96       	adiw	r24, 0x02	; 2
    4a62:	a1 1d       	adc	r26, r1
    4a64:	b1 1d       	adc	r27, r1
    4a66:	20 93 00 07 	sts	0x0700, r18	; 0x800700 <timer0_fract>
    4a6a:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <timer0_millis>
    4a6e:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <timer0_millis+0x1>
    4a72:	a0 93 03 07 	sts	0x0703, r26	; 0x800703 <timer0_millis+0x2>
    4a76:	b0 93 04 07 	sts	0x0704, r27	; 0x800704 <timer0_millis+0x3>
    4a7a:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <timer0_overflow_count>
    4a7e:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <timer0_overflow_count+0x1>
    4a82:	a0 91 07 07 	lds	r26, 0x0707	; 0x800707 <timer0_overflow_count+0x2>
    4a86:	b0 91 08 07 	lds	r27, 0x0708	; 0x800708 <timer0_overflow_count+0x3>
    4a8a:	01 96       	adiw	r24, 0x01	; 1
    4a8c:	a1 1d       	adc	r26, r1
    4a8e:	b1 1d       	adc	r27, r1
    4a90:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <timer0_overflow_count>
    4a94:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <timer0_overflow_count+0x1>
    4a98:	a0 93 07 07 	sts	0x0707, r26	; 0x800707 <timer0_overflow_count+0x2>
    4a9c:	b0 93 08 07 	sts	0x0708, r27	; 0x800708 <timer0_overflow_count+0x3>
    4aa0:	bf 91       	pop	r27
    4aa2:	af 91       	pop	r26
    4aa4:	9f 91       	pop	r25
    4aa6:	8f 91       	pop	r24
    4aa8:	3f 91       	pop	r19
    4aaa:	2f 91       	pop	r18
    4aac:	0f 90       	pop	r0
    4aae:	0f be       	out	0x3f, r0	; 63
    4ab0:	0f 90       	pop	r0
    4ab2:	1f 90       	pop	r1
    4ab4:	18 95       	reti

00004ab6 <millis>:
    4ab6:	2f b7       	in	r18, 0x3f	; 63
    4ab8:	f8 94       	cli
    4aba:	60 91 01 07 	lds	r22, 0x0701	; 0x800701 <timer0_millis>
    4abe:	70 91 02 07 	lds	r23, 0x0702	; 0x800702 <timer0_millis+0x1>
    4ac2:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <timer0_millis+0x2>
    4ac6:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <timer0_millis+0x3>
    4aca:	2f bf       	out	0x3f, r18	; 63
    4acc:	08 95       	ret

00004ace <micros>:
    4ace:	3f b7       	in	r19, 0x3f	; 63
    4ad0:	f8 94       	cli
    4ad2:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <timer0_overflow_count>
    4ad6:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <timer0_overflow_count+0x1>
    4ada:	a0 91 07 07 	lds	r26, 0x0707	; 0x800707 <timer0_overflow_count+0x2>
    4ade:	b0 91 08 07 	lds	r27, 0x0708	; 0x800708 <timer0_overflow_count+0x3>
    4ae2:	26 b5       	in	r18, 0x26	; 38
    4ae4:	a8 9b       	sbis	0x15, 0	; 21
    4ae6:	05 c0       	rjmp	.+10     	; 0x4af2 <micros+0x24>
    4ae8:	2f 3f       	cpi	r18, 0xFF	; 255
    4aea:	19 f0       	breq	.+6      	; 0x4af2 <micros+0x24>
    4aec:	01 96       	adiw	r24, 0x01	; 1
    4aee:	a1 1d       	adc	r26, r1
    4af0:	b1 1d       	adc	r27, r1
    4af2:	3f bf       	out	0x3f, r19	; 63
    4af4:	ba 2f       	mov	r27, r26
    4af6:	a9 2f       	mov	r26, r25
    4af8:	98 2f       	mov	r25, r24
    4afa:	88 27       	eor	r24, r24
    4afc:	82 0f       	add	r24, r18
    4afe:	91 1d       	adc	r25, r1
    4b00:	a1 1d       	adc	r26, r1
    4b02:	b1 1d       	adc	r27, r1
    4b04:	bc 01       	movw	r22, r24
    4b06:	cd 01       	movw	r24, r26
    4b08:	42 e0       	ldi	r20, 0x02	; 2
    4b0a:	66 0f       	add	r22, r22
    4b0c:	77 1f       	adc	r23, r23
    4b0e:	88 1f       	adc	r24, r24
    4b10:	99 1f       	adc	r25, r25
    4b12:	4a 95       	dec	r20
    4b14:	d1 f7       	brne	.-12     	; 0x4b0a <micros+0x3c>
    4b16:	08 95       	ret

00004b18 <delay>:
    4b18:	8f 92       	push	r8
    4b1a:	9f 92       	push	r9
    4b1c:	af 92       	push	r10
    4b1e:	bf 92       	push	r11
    4b20:	cf 92       	push	r12
    4b22:	df 92       	push	r13
    4b24:	ef 92       	push	r14
    4b26:	ff 92       	push	r15
    4b28:	6b 01       	movw	r12, r22
    4b2a:	7c 01       	movw	r14, r24
    4b2c:	0e 94 67 25 	call	0x4ace	; 0x4ace <micros>
    4b30:	4b 01       	movw	r8, r22
    4b32:	5c 01       	movw	r10, r24
    4b34:	c1 14       	cp	r12, r1
    4b36:	d1 04       	cpc	r13, r1
    4b38:	e1 04       	cpc	r14, r1
    4b3a:	f1 04       	cpc	r15, r1
    4b3c:	01 f1       	breq	.+64     	; 0x4b7e <delay+0x66>
    4b3e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <yield>
    4b42:	0e 94 67 25 	call	0x4ace	; 0x4ace <micros>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	88 19       	sub	r24, r8
    4b4c:	99 09       	sbc	r25, r9
    4b4e:	aa 09       	sbc	r26, r10
    4b50:	bb 09       	sbc	r27, r11
    4b52:	88 3e       	cpi	r24, 0xE8	; 232
    4b54:	93 40       	sbci	r25, 0x03	; 3
    4b56:	a1 05       	cpc	r26, r1
    4b58:	b1 05       	cpc	r27, r1
    4b5a:	60 f3       	brcs	.-40     	; 0x4b34 <delay+0x1c>
    4b5c:	21 e0       	ldi	r18, 0x01	; 1
    4b5e:	c2 1a       	sub	r12, r18
    4b60:	d1 08       	sbc	r13, r1
    4b62:	e1 08       	sbc	r14, r1
    4b64:	f1 08       	sbc	r15, r1
    4b66:	88 ee       	ldi	r24, 0xE8	; 232
    4b68:	88 0e       	add	r8, r24
    4b6a:	83 e0       	ldi	r24, 0x03	; 3
    4b6c:	98 1e       	adc	r9, r24
    4b6e:	a1 1c       	adc	r10, r1
    4b70:	b1 1c       	adc	r11, r1
    4b72:	c1 14       	cp	r12, r1
    4b74:	d1 04       	cpc	r13, r1
    4b76:	e1 04       	cpc	r14, r1
    4b78:	f1 04       	cpc	r15, r1
    4b7a:	19 f7       	brne	.-58     	; 0x4b42 <delay+0x2a>
    4b7c:	db cf       	rjmp	.-74     	; 0x4b34 <delay+0x1c>
    4b7e:	ff 90       	pop	r15
    4b80:	ef 90       	pop	r14
    4b82:	df 90       	pop	r13
    4b84:	cf 90       	pop	r12
    4b86:	bf 90       	pop	r11
    4b88:	af 90       	pop	r10
    4b8a:	9f 90       	pop	r9
    4b8c:	8f 90       	pop	r8
    4b8e:	08 95       	ret

00004b90 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4b90:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4b92:	84 b5       	in	r24, 0x24	; 36
    4b94:	82 60       	ori	r24, 0x02	; 2
    4b96:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4b98:	84 b5       	in	r24, 0x24	; 36
    4b9a:	81 60       	ori	r24, 0x01	; 1
    4b9c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4b9e:	85 b5       	in	r24, 0x25	; 37
    4ba0:	82 60       	ori	r24, 0x02	; 2
    4ba2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4ba4:	85 b5       	in	r24, 0x25	; 37
    4ba6:	81 60       	ori	r24, 0x01	; 1
    4ba8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4baa:	ee e6       	ldi	r30, 0x6E	; 110
    4bac:	f0 e0       	ldi	r31, 0x00	; 0
    4bae:	80 81       	ld	r24, Z
    4bb0:	81 60       	ori	r24, 0x01	; 1
    4bb2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4bb4:	e1 e8       	ldi	r30, 0x81	; 129
    4bb6:	f0 e0       	ldi	r31, 0x00	; 0
    4bb8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4bba:	80 81       	ld	r24, Z
    4bbc:	82 60       	ori	r24, 0x02	; 2
    4bbe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4bc0:	80 81       	ld	r24, Z
    4bc2:	81 60       	ori	r24, 0x01	; 1
    4bc4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4bc6:	e0 e8       	ldi	r30, 0x80	; 128
    4bc8:	f0 e0       	ldi	r31, 0x00	; 0
    4bca:	80 81       	ld	r24, Z
    4bcc:	81 60       	ori	r24, 0x01	; 1
    4bce:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4bd0:	e1 eb       	ldi	r30, 0xB1	; 177
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	80 81       	ld	r24, Z
    4bd6:	84 60       	ori	r24, 0x04	; 4
    4bd8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4bda:	e0 eb       	ldi	r30, 0xB0	; 176
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	80 81       	ld	r24, Z
    4be0:	81 60       	ori	r24, 0x01	; 1
    4be2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4be4:	ea e7       	ldi	r30, 0x7A	; 122
    4be6:	f0 e0       	ldi	r31, 0x00	; 0
    4be8:	80 81       	ld	r24, Z
    4bea:	84 60       	ori	r24, 0x04	; 4
    4bec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4bee:	80 81       	ld	r24, Z
    4bf0:	82 60       	ori	r24, 0x02	; 2
    4bf2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4bf4:	80 81       	ld	r24, Z
    4bf6:	81 60       	ori	r24, 0x01	; 1
    4bf8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4bfa:	80 81       	ld	r24, Z
    4bfc:	80 68       	ori	r24, 0x80	; 128
    4bfe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4c00:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4c04:	08 95       	ret

00004c06 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    4c06:	8e 30       	cpi	r24, 0x0E	; 14
    4c08:	08 f0       	brcs	.+2      	; 0x4c0c <analogRead+0x6>
    4c0a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4c0c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <analog_reference>
    4c10:	90 e4       	ldi	r25, 0x40	; 64
    4c12:	29 9f       	mul	r18, r25
    4c14:	90 01       	movw	r18, r0
    4c16:	11 24       	eor	r1, r1
    4c18:	87 70       	andi	r24, 0x07	; 7
    4c1a:	82 2b       	or	r24, r18
    4c1c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4c20:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4c24:	80 64       	ori	r24, 0x40	; 64
    4c26:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4c2a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4c2e:	86 fd       	sbrc	r24, 6
    4c30:	fc cf       	rjmp	.-8      	; 0x4c2a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4c32:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    4c36:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
}
    4c3c:	92 2b       	or	r25, r18
    4c3e:	08 95       	ret

00004c40 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4c40:	83 30       	cpi	r24, 0x03	; 3
    4c42:	81 f0       	breq	.+32     	; 0x4c64 <turnOffPWM+0x24>
    4c44:	28 f4       	brcc	.+10     	; 0x4c50 <turnOffPWM+0x10>
    4c46:	81 30       	cpi	r24, 0x01	; 1
    4c48:	99 f0       	breq	.+38     	; 0x4c70 <turnOffPWM+0x30>
    4c4a:	82 30       	cpi	r24, 0x02	; 2
    4c4c:	a1 f0       	breq	.+40     	; 0x4c76 <turnOffPWM+0x36>
    4c4e:	08 95       	ret
    4c50:	87 30       	cpi	r24, 0x07	; 7
    4c52:	a9 f0       	breq	.+42     	; 0x4c7e <turnOffPWM+0x3e>
    4c54:	88 30       	cpi	r24, 0x08	; 8
    4c56:	b9 f0       	breq	.+46     	; 0x4c86 <turnOffPWM+0x46>
    4c58:	84 30       	cpi	r24, 0x04	; 4
    4c5a:	d1 f4       	brne	.+52     	; 0x4c90 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4c5c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4c60:	8f 7d       	andi	r24, 0xDF	; 223
    4c62:	03 c0       	rjmp	.+6      	; 0x4c6a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4c64:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4c68:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4c6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4c6e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4c70:	84 b5       	in	r24, 0x24	; 36
    4c72:	8f 77       	andi	r24, 0x7F	; 127
    4c74:	02 c0       	rjmp	.+4      	; 0x4c7a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4c76:	84 b5       	in	r24, 0x24	; 36
    4c78:	8f 7d       	andi	r24, 0xDF	; 223
    4c7a:	84 bd       	out	0x24, r24	; 36
    4c7c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4c7e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4c82:	8f 77       	andi	r24, 0x7F	; 127
    4c84:	03 c0       	rjmp	.+6      	; 0x4c8c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4c86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4c8a:	8f 7d       	andi	r24, 0xDF	; 223
    4c8c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4c90:	08 95       	ret

00004c92 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	fc 01       	movw	r30, r24
    4c9a:	e8 5a       	subi	r30, 0xA8	; 168
    4c9c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c9e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	e4 59       	subi	r30, 0x94	; 148
    4ca4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ca6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4ca8:	88 23       	and	r24, r24
    4caa:	61 f1       	breq	.+88     	; 0x4d04 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	88 0f       	add	r24, r24
    4cb0:	99 1f       	adc	r25, r25
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	ec 56       	subi	r30, 0x6C	; 108
    4cb6:	fc 4f       	sbci	r31, 0xFC	; 252
    4cb8:	c5 91       	lpm	r28, Z+
    4cba:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	e6 57       	subi	r30, 0x76	; 118
    4cc0:	fc 4f       	sbci	r31, 0xFC	; 252
    4cc2:	a5 91       	lpm	r26, Z+
    4cc4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4cc6:	61 11       	cpse	r22, r1
    4cc8:	09 c0       	rjmp	.+18     	; 0x4cdc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4cca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4ccc:	f8 94       	cli
		*reg &= ~bit;
    4cce:	88 81       	ld	r24, Y
    4cd0:	20 95       	com	r18
    4cd2:	82 23       	and	r24, r18
    4cd4:	88 83       	st	Y, r24
		*out &= ~bit;
    4cd6:	ec 91       	ld	r30, X
    4cd8:	2e 23       	and	r18, r30
    4cda:	0b c0       	rjmp	.+22     	; 0x4cf2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4cdc:	62 30       	cpi	r22, 0x02	; 2
    4cde:	61 f4       	brne	.+24     	; 0x4cf8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4ce0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4ce2:	f8 94       	cli
		*reg &= ~bit;
    4ce4:	88 81       	ld	r24, Y
    4ce6:	32 2f       	mov	r19, r18
    4ce8:	30 95       	com	r19
    4cea:	83 23       	and	r24, r19
    4cec:	88 83       	st	Y, r24
		*out |= bit;
    4cee:	ec 91       	ld	r30, X
    4cf0:	2e 2b       	or	r18, r30
    4cf2:	2c 93       	st	X, r18
		SREG = oldSREG;
    4cf4:	9f bf       	out	0x3f, r25	; 63
    4cf6:	06 c0       	rjmp	.+12     	; 0x4d04 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4cf8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4cfa:	f8 94       	cli
		*reg |= bit;
    4cfc:	e8 81       	ld	r30, Y
    4cfe:	2e 2b       	or	r18, r30
    4d00:	28 83       	st	Y, r18
		SREG = oldSREG;
    4d02:	8f bf       	out	0x3f, r24	; 63
	}
}
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	08 95       	ret

00004d0a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4d0a:	1f 93       	push	r17
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4d10:	28 2f       	mov	r18, r24
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	f9 01       	movw	r30, r18
    4d16:	ec 5b       	subi	r30, 0xBC	; 188
    4d18:	fc 4f       	sbci	r31, 0xFC	; 252
    4d1a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4d1c:	f9 01       	movw	r30, r18
    4d1e:	e8 5a       	subi	r30, 0xA8	; 168
    4d20:	fc 4f       	sbci	r31, 0xFC	; 252
    4d22:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4d24:	f9 01       	movw	r30, r18
    4d26:	e4 59       	subi	r30, 0x94	; 148
    4d28:	fc 4f       	sbci	r31, 0xFC	; 252
    4d2a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4d2c:	cc 23       	and	r28, r28
    4d2e:	c1 f0       	breq	.+48     	; 0x4d60 <digitalWrite+0x56>
    4d30:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4d32:	81 11       	cpse	r24, r1
    4d34:	0e 94 20 26 	call	0x4c40	; 0x4c40 <turnOffPWM>

	out = portOutputRegister(port);
    4d38:	ec 2f       	mov	r30, r28
    4d3a:	f0 e0       	ldi	r31, 0x00	; 0
    4d3c:	ee 0f       	add	r30, r30
    4d3e:	ff 1f       	adc	r31, r31
    4d40:	e6 57       	subi	r30, 0x76	; 118
    4d42:	fc 4f       	sbci	r31, 0xFC	; 252
    4d44:	a5 91       	lpm	r26, Z+
    4d46:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4d48:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4d4a:	f8 94       	cli

	if (val == LOW) {
    4d4c:	11 11       	cpse	r17, r1
    4d4e:	04 c0       	rjmp	.+8      	; 0x4d58 <digitalWrite+0x4e>
		*out &= ~bit;
    4d50:	8c 91       	ld	r24, X
    4d52:	d0 95       	com	r29
    4d54:	d8 23       	and	r29, r24
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <digitalWrite+0x52>
	} else {
		*out |= bit;
    4d58:	ec 91       	ld	r30, X
    4d5a:	de 2b       	or	r29, r30
    4d5c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4d5e:	9f bf       	out	0x3f, r25	; 63
}
    4d60:	df 91       	pop	r29
    4d62:	cf 91       	pop	r28
    4d64:	1f 91       	pop	r17
    4d66:	08 95       	ret

00004d68 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    4d68:	88 5e       	subi	r24, 0xE8	; 232
    4d6a:	9e 4f       	sbci	r25, 0xFE	; 254
    4d6c:	dc 01       	movw	r26, r24
    4d6e:	8d 91       	ld	r24, X+
    4d70:	9c 91       	ld	r25, X
    4d72:	dc 01       	movw	r26, r24
    4d74:	ed 91       	ld	r30, X+
    4d76:	fc 91       	ld	r31, X
    4d78:	04 80       	ldd	r0, Z+4	; 0x04
    4d7a:	f5 81       	ldd	r31, Z+5	; 0x05
    4d7c:	e0 2d       	mov	r30, r0
    4d7e:	09 94       	ijmp

00004d80 <_ZN13Adafruit_FONA5writeEh>:
    4d80:	88 5e       	subi	r24, 0xE8	; 232
    4d82:	9e 4f       	sbci	r25, 0xFE	; 254
    4d84:	dc 01       	movw	r26, r24
    4d86:	8d 91       	ld	r24, X+
    4d88:	9c 91       	ld	r25, X
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	ed 91       	ld	r30, X+
    4d8e:	fc 91       	ld	r31, X
    4d90:	01 90       	ld	r0, Z+
    4d92:	f0 81       	ld	r31, Z
    4d94:	e0 2d       	mov	r30, r0
    4d96:	09 94       	ijmp

00004d98 <_ZN13Adafruit_FONA4readEv>:
    4d98:	88 5e       	subi	r24, 0xE8	; 232
    4d9a:	9e 4f       	sbci	r25, 0xFE	; 254
    4d9c:	dc 01       	movw	r26, r24
    4d9e:	8d 91       	ld	r24, X+
    4da0:	9c 91       	ld	r25, X
    4da2:	dc 01       	movw	r26, r24
    4da4:	ed 91       	ld	r30, X+
    4da6:	fc 91       	ld	r31, X
    4da8:	06 80       	ldd	r0, Z+6	; 0x06
    4daa:	f7 81       	ldd	r31, Z+7	; 0x07
    4dac:	e0 2d       	mov	r30, r0
    4dae:	09 94       	ijmp

00004db0 <_ZN13Adafruit_FONA4peekEv>:
    4db0:	88 5e       	subi	r24, 0xE8	; 232
    4db2:	9e 4f       	sbci	r25, 0xFE	; 254
    4db4:	dc 01       	movw	r26, r24
    4db6:	8d 91       	ld	r24, X+
    4db8:	9c 91       	ld	r25, X
    4dba:	dc 01       	movw	r26, r24
    4dbc:	ed 91       	ld	r30, X+
    4dbe:	fc 91       	ld	r31, X
    4dc0:	00 84       	ldd	r0, Z+8	; 0x08
    4dc2:	f1 85       	ldd	r31, Z+9	; 0x09
    4dc4:	e0 2d       	mov	r30, r0
    4dc6:	09 94       	ijmp

00004dc8 <_ZN13Adafruit_FONA5flushEv>:
    4dc8:	88 5e       	subi	r24, 0xE8	; 232
    4dca:	9e 4f       	sbci	r25, 0xFE	; 254
    4dcc:	dc 01       	movw	r26, r24
    4dce:	8d 91       	ld	r24, X+
    4dd0:	9c 91       	ld	r25, X
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	ed 91       	ld	r30, X+
    4dd6:	fc 91       	ld	r31, X
    4dd8:	02 84       	ldd	r0, Z+10	; 0x0a
    4dda:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ddc:	e0 2d       	mov	r30, r0
    4dde:	09 94       	ijmp

00004de0 <_ZN13Adafruit_FONAC1Ea>:
    4de0:	fc 01       	movw	r30, r24
    4de2:	13 82       	std	Z+3, r1	; 0x03
    4de4:	12 82       	std	Z+2, r1	; 0x02
    4de6:	88 ee       	ldi	r24, 0xE8	; 232
    4de8:	93 e0       	ldi	r25, 0x03	; 3
    4dea:	a0 e0       	ldi	r26, 0x00	; 0
    4dec:	b0 e0       	ldi	r27, 0x00	; 0
    4dee:	84 83       	std	Z+4, r24	; 0x04
    4df0:	95 83       	std	Z+5, r25	; 0x05
    4df2:	a6 83       	std	Z+6, r26	; 0x06
    4df4:	b7 83       	std	Z+7, r27	; 0x07
    4df6:	82 e2       	ldi	r24, 0x22	; 34
    4df8:	94 e0       	ldi	r25, 0x04	; 4
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	80 83       	st	Z, r24
    4dfe:	64 87       	std	Z+12, r22	; 0x0c
    4e00:	df 01       	movw	r26, r30
    4e02:	a3 5f       	subi	r26, 0xF3	; 243
    4e04:	be 4f       	sbci	r27, 0xFE	; 254
    4e06:	88 ed       	ldi	r24, 0xD8	; 216
    4e08:	96 e0       	ldi	r25, 0x06	; 6
    4e0a:	11 96       	adiw	r26, 0x01	; 1
    4e0c:	9c 93       	st	X, r25
    4e0e:	8e 93       	st	-X, r24
    4e10:	12 96       	adiw	r26, 0x02	; 2
    4e12:	11 96       	adiw	r26, 0x01	; 1
    4e14:	1c 92       	st	X, r1
    4e16:	1e 92       	st	-X, r1
    4e18:	12 96       	adiw	r26, 0x02	; 2
    4e1a:	11 96       	adiw	r26, 0x01	; 1
    4e1c:	1c 92       	st	X, r1
    4e1e:	1e 92       	st	-X, r1
    4e20:	17 96       	adiw	r26, 0x07	; 7
    4e22:	11 96       	adiw	r26, 0x01	; 1
    4e24:	1c 92       	st	X, r1
    4e26:	1e 92       	st	-X, r1
    4e28:	15 97       	sbiw	r26, 0x05	; 5
    4e2a:	1c 92       	st	X, r1
    4e2c:	11 96       	adiw	r26, 0x01	; 1
    4e2e:	83 ed       	ldi	r24, 0xD3	; 211
    4e30:	96 e0       	ldi	r25, 0x06	; 6
    4e32:	8d 93       	st	X+, r24
    4e34:	9c 93       	st	X, r25
    4e36:	ea 5e       	subi	r30, 0xEA	; 234
    4e38:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3a:	80 ed       	ldi	r24, 0xD0	; 208
    4e3c:	96 e0       	ldi	r25, 0x06	; 6
    4e3e:	91 83       	std	Z+1, r25	; 0x01
    4e40:	80 83       	st	Z, r24
    4e42:	08 95       	ret

00004e44 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    4e44:	fc 01       	movw	r30, r24
    4e46:	e3 5f       	subi	r30, 0xF3	; 243
    4e48:	fe 4f       	sbci	r31, 0xFE	; 254
    4e4a:	71 83       	std	Z+1, r23	; 0x01
    4e4c:	60 83       	st	Z, r22
    4e4e:	32 96       	adiw	r30, 0x02	; 2
    4e50:	51 83       	std	Z+1, r21	; 0x01
    4e52:	40 83       	st	Z, r20
    4e54:	32 96       	adiw	r30, 0x02	; 2
    4e56:	31 83       	std	Z+1, r19	; 0x01
    4e58:	20 83       	st	Z, r18
    4e5a:	08 95       	ret

00004e5c <_ZN13Adafruit_FONA10flushInputEv>:
    4e5c:	0f 93       	push	r16
    4e5e:	1f 93       	push	r17
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	ec 01       	movw	r28, r24
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	8c 01       	movw	r16, r24
    4e6c:	0f 5f       	subi	r16, 0xFF	; 255
    4e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e70:	88 97       	sbiw	r24, 0x28	; 40
    4e72:	d8 f4       	brcc	.+54     	; 0x4eaa <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    4e74:	e8 81       	ld	r30, Y
    4e76:	f9 81       	ldd	r31, Y+1	; 0x01
    4e78:	04 80       	ldd	r0, Z+4	; 0x04
    4e7a:	f5 81       	ldd	r31, Z+5	; 0x05
    4e7c:	e0 2d       	mov	r30, r0
    4e7e:	ce 01       	movw	r24, r28
    4e80:	09 95       	icall
    4e82:	89 2b       	or	r24, r25
    4e84:	51 f0       	breq	.+20     	; 0x4e9a <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    4e86:	e8 81       	ld	r30, Y
    4e88:	f9 81       	ldd	r31, Y+1	; 0x01
    4e8a:	06 80       	ldd	r0, Z+6	; 0x06
    4e8c:	f7 81       	ldd	r31, Z+7	; 0x07
    4e8e:	e0 2d       	mov	r30, r0
    4e90:	ce 01       	movw	r24, r28
    4e92:	09 95       	icall
    4e94:	00 e0       	ldi	r16, 0x00	; 0
    4e96:	10 e0       	ldi	r17, 0x00	; 0
    4e98:	ed cf       	rjmp	.-38     	; 0x4e74 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    4e9a:	61 e0       	ldi	r22, 0x01	; 1
    4e9c:	70 e0       	ldi	r23, 0x00	; 0
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    4ea6:	c8 01       	movw	r24, r16
    4ea8:	e0 cf       	rjmp	.-64     	; 0x4e6a <_ZN13Adafruit_FONA10flushInputEv+0xe>
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	08 95       	ret

00004eb4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    4eb4:	ff 92       	push	r15
    4eb6:	0f 93       	push	r16
    4eb8:	1f 93       	push	r17
    4eba:	cf 93       	push	r28
    4ebc:	df 93       	push	r29
    4ebe:	ec 01       	movw	r28, r24
    4ec0:	8b 01       	movw	r16, r22
    4ec2:	f4 2e       	mov	r15, r20
    4ec4:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    4ec8:	6c ea       	ldi	r22, 0xAC	; 172
    4eca:	74 e0       	ldi	r23, 0x04	; 4
    4ecc:	83 e6       	ldi	r24, 0x63	; 99
    4ece:	96 e0       	ldi	r25, 0x06	; 6
    4ed0:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    4ed4:	6e e9       	ldi	r22, 0x9E	; 158
    4ed6:	74 e0       	ldi	r23, 0x04	; 4
    4ed8:	83 e6       	ldi	r24, 0x63	; 99
    4eda:	96 e0       	ldi	r25, 0x06	; 6
    4edc:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    4ee0:	b8 01       	movw	r22, r16
    4ee2:	83 e6       	ldi	r24, 0x63	; 99
    4ee4:	96 e0       	ldi	r25, 0x06	; 6
    4ee6:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    4eea:	62 e2       	ldi	r22, 0x22	; 34
    4eec:	83 e6       	ldi	r24, 0x63	; 99
    4eee:	96 e0       	ldi	r25, 0x06	; 6
    4ef0:	0e 94 04 23 	call	0x4608	; 0x4608 <_ZN5Print7printlnEc>
    4ef4:	c8 5e       	subi	r28, 0xE8	; 232
    4ef6:	de 4f       	sbci	r29, 0xFE	; 254
    4ef8:	60 e9       	ldi	r22, 0x90	; 144
    4efa:	74 e0       	ldi	r23, 0x04	; 4
    4efc:	88 81       	ld	r24, Y
    4efe:	99 81       	ldd	r25, Y+1	; 0x01
    4f00:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    4f04:	b8 01       	movw	r22, r16
    4f06:	88 81       	ld	r24, Y
    4f08:	99 81       	ldd	r25, Y+1	; 0x01
    4f0a:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    4f0e:	88 81       	ld	r24, Y
    4f10:	99 81       	ldd	r25, Y+1	; 0x01
    4f12:	ff 20       	and	r15, r15
    4f14:	19 f0       	breq	.+6      	; 0x4f1c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    4f16:	6c e8       	ldi	r22, 0x8C	; 140
    4f18:	74 e0       	ldi	r23, 0x04	; 4
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    4f1c:	69 e8       	ldi	r22, 0x89	; 137
    4f1e:	74 e0       	ldi	r23, 0x04	; 4
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	1f 91       	pop	r17
    4f26:	0f 91       	pop	r16
    4f28:	ff 90       	pop	r15
    4f2a:	0c 94 af 22 	jmp	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>

00004f2e <_ZN13Adafruit_FONA8readlineEjb>:
    4f2e:	9f 92       	push	r9
    4f30:	af 92       	push	r10
    4f32:	bf 92       	push	r11
    4f34:	cf 92       	push	r12
    4f36:	df 92       	push	r13
    4f38:	ef 92       	push	r14
    4f3a:	ff 92       	push	r15
    4f3c:	0f 93       	push	r16
    4f3e:	1f 93       	push	r17
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	7c 01       	movw	r14, r24
    4f46:	94 2e       	mov	r9, r20
    4f48:	8b 01       	movw	r16, r22
    4f4a:	00 0f       	add	r16, r16
    4f4c:	11 1f       	adc	r17, r17
    4f4e:	00 0f       	add	r16, r16
    4f50:	11 1f       	adc	r17, r17
    4f52:	c0 e0       	ldi	r28, 0x00	; 0
    4f54:	d0 e0       	ldi	r29, 0x00	; 0
    4f56:	57 01       	movw	r10, r14
    4f58:	88 ee       	ldi	r24, 0xE8	; 232
    4f5a:	a8 1a       	sub	r10, r24
    4f5c:	8e ef       	ldi	r24, 0xFE	; 254
    4f5e:	b8 0a       	sbc	r11, r24
    4f60:	01 15       	cp	r16, r1
    4f62:	11 05       	cpc	r17, r1
    4f64:	09 f4       	brne	.+2      	; 0x4f68 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    4f66:	50 c0       	rjmp	.+160    	; 0x5008 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4f68:	ce 3f       	cpi	r28, 0xFE	; 254
    4f6a:	d1 05       	cpc	r29, r1
    4f6c:	80 f0       	brcs	.+32     	; 0x4f8e <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4f6e:	6e ed       	ldi	r22, 0xDE	; 222
    4f70:	73 e0       	ldi	r23, 0x03	; 3
    4f72:	22 c0       	rjmp	.+68     	; 0x4fb8 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    4f74:	f5 01       	movw	r30, r10
    4f76:	80 81       	ld	r24, Z
    4f78:	91 81       	ldd	r25, Z+1	; 0x01
    4f7a:	dc 01       	movw	r26, r24
    4f7c:	ed 91       	ld	r30, X+
    4f7e:	fc 91       	ld	r31, X
    4f80:	06 80       	ldd	r0, Z+6	; 0x06
    4f82:	f7 81       	ldd	r31, Z+7	; 0x07
    4f84:	e0 2d       	mov	r30, r0
    4f86:	09 95       	icall
    4f88:	6c 01       	movw	r12, r24
    4f8a:	8d 30       	cpi	r24, 0x0D	; 13
    4f8c:	69 f4       	brne	.+26     	; 0x4fa8 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    4f8e:	d5 01       	movw	r26, r10
    4f90:	8d 91       	ld	r24, X+
    4f92:	9c 91       	ld	r25, X
    4f94:	dc 01       	movw	r26, r24
    4f96:	ed 91       	ld	r30, X+
    4f98:	fc 91       	ld	r31, X
    4f9a:	04 80       	ldd	r0, Z+4	; 0x04
    4f9c:	f5 81       	ldd	r31, Z+5	; 0x05
    4f9e:	e0 2d       	mov	r30, r0
    4fa0:	09 95       	icall
    4fa2:	89 2b       	or	r24, r25
    4fa4:	39 f7       	brne	.-50     	; 0x4f74 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    4fa6:	26 c0       	rjmp	.+76     	; 0x4ff4 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    4fa8:	8a 30       	cpi	r24, 0x0A	; 10
    4faa:	59 f4       	brne	.+22     	; 0x4fc2 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4fac:	20 97       	sbiw	r28, 0x00	; 0
    4fae:	79 f3       	breq	.-34     	; 0x4f8e <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4fb0:	91 10       	cpse	r9, r1
    4fb2:	07 c0       	rjmp	.+14     	; 0x4fc2 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    4fb4:	66 ed       	ldi	r22, 0xD6	; 214
    4fb6:	73 e0       	ldi	r23, 0x03	; 3
    4fb8:	83 e6       	ldi	r24, 0x63	; 99
    4fba:	96 e0       	ldi	r25, 0x06	; 6
    4fbc:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4fc0:	23 c0       	rjmp	.+70     	; 0x5008 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    4fc2:	f7 01       	movw	r30, r14
    4fc4:	ec 0f       	add	r30, r28
    4fc6:	fd 1f       	adc	r31, r29
    4fc8:	c6 86       	std	Z+14, r12	; 0x0e
    4fca:	b6 01       	movw	r22, r12
    4fcc:	77 27       	eor	r23, r23
    4fce:	40 e1       	ldi	r20, 0x10	; 16
    4fd0:	50 e0       	ldi	r21, 0x00	; 0
    4fd2:	83 e6       	ldi	r24, 0x63	; 99
    4fd4:	96 e0       	ldi	r25, 0x06	; 6
    4fd6:	0e 94 f7 23 	call	0x47ee	; 0x47ee <_ZN5Print5printEii>
    4fda:	65 ec       	ldi	r22, 0xC5	; 197
    4fdc:	73 e0       	ldi	r23, 0x03	; 3
    4fde:	83 e6       	ldi	r24, 0x63	; 99
    4fe0:	96 e0       	ldi	r25, 0x06	; 6
    4fe2:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    4fe6:	6c 2d       	mov	r22, r12
    4fe8:	83 e6       	ldi	r24, 0x63	; 99
    4fea:	96 e0       	ldi	r25, 0x06	; 6
    4fec:	0e 94 04 23 	call	0x4608	; 0x4608 <_ZN5Print7printlnEc>
    4ff0:	21 96       	adiw	r28, 0x01	; 1
    4ff2:	cd cf       	rjmp	.-102    	; 0x4f8e <_ZN13Adafruit_FONA8readlineEjb+0x60>
    4ff4:	01 50       	subi	r16, 0x01	; 1
    4ff6:	11 09       	sbc	r17, r1
    4ff8:	e9 f2       	breq	.-70     	; 0x4fb4 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    4ffa:	61 e0       	ldi	r22, 0x01	; 1
    4ffc:	70 e0       	ldi	r23, 0x00	; 0
    4ffe:	80 e0       	ldi	r24, 0x00	; 0
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    5006:	ac cf       	rjmp	.-168    	; 0x4f60 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    5008:	f7 01       	movw	r30, r14
    500a:	ec 0f       	add	r30, r28
    500c:	fd 1f       	adc	r31, r29
    500e:	16 86       	std	Z+14, r1	; 0x0e
    5010:	8c 2f       	mov	r24, r28
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	1f 91       	pop	r17
    5018:	0f 91       	pop	r16
    501a:	ff 90       	pop	r15
    501c:	ef 90       	pop	r14
    501e:	df 90       	pop	r13
    5020:	cf 90       	pop	r12
    5022:	bf 90       	pop	r11
    5024:	af 90       	pop	r10
    5026:	9f 90       	pop	r9
    5028:	08 95       	ret

0000502a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    502a:	0f 93       	push	r16
    502c:	1f 93       	push	r17
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
    5032:	ec 01       	movw	r28, r24
    5034:	8b 01       	movw	r16, r22
    5036:	ba 01       	movw	r22, r20
    5038:	40 e0       	ldi	r20, 0x00	; 0
    503a:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    503e:	64 ee       	ldi	r22, 0xE4	; 228
    5040:	73 e0       	ldi	r23, 0x03	; 3
    5042:	83 e6       	ldi	r24, 0x63	; 99
    5044:	96 e0       	ldi	r25, 0x06	; 6
    5046:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    504a:	2e 96       	adiw	r28, 0x0e	; 14
    504c:	be 01       	movw	r22, r28
    504e:	83 e6       	ldi	r24, 0x63	; 99
    5050:	96 e0       	ldi	r25, 0x06	; 6
    5052:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    5056:	b8 01       	movw	r22, r16
    5058:	ce 01       	movw	r24, r28
    505a:	0e 94 02 34 	call	0x6804	; 0x6804 <strcmp_P>
    505e:	21 e0       	ldi	r18, 0x01	; 1
    5060:	89 2b       	or	r24, r25
    5062:	09 f0       	breq	.+2      	; 0x5066 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	82 2f       	mov	r24, r18
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	08 95       	ret

00005072 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    5072:	cf 93       	push	r28
    5074:	df 93       	push	r29
    5076:	ec 01       	movw	r28, r24
    5078:	fc 01       	movw	r30, r24
    507a:	e8 5e       	subi	r30, 0xE8	; 232
    507c:	fe 4f       	sbci	r31, 0xFE	; 254
    507e:	66 23       	and	r22, r22
    5080:	31 f0       	breq	.+12     	; 0x508e <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    5082:	62 e2       	ldi	r22, 0x22	; 34
    5084:	80 81       	ld	r24, Z
    5086:	91 81       	ldd	r25, Z+1	; 0x01
    5088:	0e 94 04 23 	call	0x4608	; 0x4608 <_ZN5Print7printlnEc>
    508c:	04 c0       	rjmp	.+8      	; 0x5096 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    508e:	80 81       	ld	r24, Z
    5090:	91 81       	ldd	r25, Z+1	; 0x01
    5092:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    5096:	fe 01       	movw	r30, r28
    5098:	ea 5e       	subi	r30, 0xEA	; 234
    509a:	fe 4f       	sbci	r31, 0xFE	; 254
    509c:	60 81       	ld	r22, Z
    509e:	71 81       	ldd	r23, Z+1	; 0x01
    50a0:	40 e1       	ldi	r20, 0x10	; 16
    50a2:	57 e2       	ldi	r21, 0x27	; 39
    50a4:	ce 01       	movw	r24, r28
    50a6:	df 91       	pop	r29
    50a8:	cf 91       	pop	r28
    50aa:	0c 94 15 28 	jmp	0x502a	; 0x502a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

000050ae <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	ec 01       	movw	r28, r24
    50b8:	8a 01       	movw	r16, r20
    50ba:	41 e0       	ldi	r20, 0x01	; 1
    50bc:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    50c0:	fe 01       	movw	r30, r28
    50c2:	e8 5e       	subi	r30, 0xE8	; 232
    50c4:	fe 4f       	sbci	r31, 0xFE	; 254
    50c6:	b8 01       	movw	r22, r16
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    50d0:	61 e0       	ldi	r22, 0x01	; 1
    50d2:	ce 01       	movw	r24, r28
    50d4:	df 91       	pop	r29
    50d6:	cf 91       	pop	r28
    50d8:	1f 91       	pop	r17
    50da:	0f 91       	pop	r16
    50dc:	0c 94 39 28 	jmp	0x5072	; 0x5072 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000050e0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    50e0:	0f 93       	push	r16
    50e2:	1f 93       	push	r17
    50e4:	cf 93       	push	r28
    50e6:	df 93       	push	r29
    50e8:	ec 01       	movw	r28, r24
    50ea:	8a 01       	movw	r16, r20
    50ec:	41 e0       	ldi	r20, 0x01	; 1
    50ee:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    50f2:	fe 01       	movw	r30, r28
    50f4:	e8 5e       	subi	r30, 0xE8	; 232
    50f6:	fe 4f       	sbci	r31, 0xFE	; 254
    50f8:	b8 01       	movw	r22, r16
    50fa:	80 81       	ld	r24, Z
    50fc:	91 81       	ldd	r25, Z+1	; 0x01
    50fe:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5102:	61 e0       	ldi	r22, 0x01	; 1
    5104:	ce 01       	movw	r24, r28
    5106:	df 91       	pop	r29
    5108:	cf 91       	pop	r28
    510a:	1f 91       	pop	r17
    510c:	0f 91       	pop	r16
    510e:	0c 94 39 28 	jmp	0x5072	; 0x5072 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00005112 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    5112:	cf 92       	push	r12
    5114:	df 92       	push	r13
    5116:	ef 92       	push	r14
    5118:	ff 92       	push	r15
    511a:	cf 93       	push	r28
    511c:	df 93       	push	r29
    511e:	ec 01       	movw	r28, r24
    5120:	69 01       	movw	r12, r18
    5122:	7a 01       	movw	r14, r20
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    512a:	fe 01       	movw	r30, r28
    512c:	e8 5e       	subi	r30, 0xE8	; 232
    512e:	fe 4f       	sbci	r31, 0xFE	; 254
    5130:	2a e0       	ldi	r18, 0x0A	; 10
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	b7 01       	movw	r22, r14
    5136:	a6 01       	movw	r20, r12
    5138:	80 81       	ld	r24, Z
    513a:	91 81       	ldd	r25, Z+1	; 0x01
    513c:	0e 94 af 23 	call	0x475e	; 0x475e <_ZN5Print5printEli>
    5140:	60 e0       	ldi	r22, 0x00	; 0
    5142:	ce 01       	movw	r24, r28
    5144:	df 91       	pop	r29
    5146:	cf 91       	pop	r28
    5148:	ff 90       	pop	r15
    514a:	ef 90       	pop	r14
    514c:	df 90       	pop	r13
    514e:	cf 90       	pop	r12
    5150:	0c 94 39 28 	jmp	0x5072	; 0x5072 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00005154 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    5154:	4f 92       	push	r4
    5156:	5f 92       	push	r5
    5158:	6f 92       	push	r6
    515a:	7f 92       	push	r7
    515c:	8f 92       	push	r8
    515e:	9f 92       	push	r9
    5160:	af 92       	push	r10
    5162:	bf 92       	push	r11
    5164:	ef 92       	push	r14
    5166:	ff 92       	push	r15
    5168:	0f 93       	push	r16
    516a:	1f 93       	push	r17
    516c:	cf 93       	push	r28
    516e:	df 93       	push	r29
    5170:	7c 01       	movw	r14, r24
    5172:	2a 01       	movw	r4, r20
    5174:	3b 01       	movw	r6, r22
    5176:	48 01       	movw	r8, r16
    5178:	59 01       	movw	r10, r18
    517a:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    517e:	62 e8       	ldi	r22, 0x82	; 130
    5180:	74 e0       	ldi	r23, 0x04	; 4
    5182:	83 e6       	ldi	r24, 0x63	; 99
    5184:	96 e0       	ldi	r25, 0x06	; 6
    5186:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    518a:	65 e7       	ldi	r22, 0x75	; 117
    518c:	74 e0       	ldi	r23, 0x04	; 4
    518e:	83 e6       	ldi	r24, 0x63	; 99
    5190:	96 e0       	ldi	r25, 0x06	; 6
    5192:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5196:	2a e0       	ldi	r18, 0x0A	; 10
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	b3 01       	movw	r22, r6
    519c:	a2 01       	movw	r20, r4
    519e:	83 e6       	ldi	r24, 0x63	; 99
    51a0:	96 e0       	ldi	r25, 0x06	; 6
    51a2:	0e 94 5f 23 	call	0x46be	; 0x46be <_ZN5Print5printEmi>
    51a6:	6c e2       	ldi	r22, 0x2C	; 44
    51a8:	83 e6       	ldi	r24, 0x63	; 99
    51aa:	96 e0       	ldi	r25, 0x06	; 6
    51ac:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN5Print5printEc>
    51b0:	2a e0       	ldi	r18, 0x0A	; 10
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	b5 01       	movw	r22, r10
    51b6:	a4 01       	movw	r20, r8
    51b8:	83 e6       	ldi	r24, 0x63	; 99
    51ba:	96 e0       	ldi	r25, 0x06	; 6
    51bc:	0e 94 9d 23 	call	0x473a	; 0x473a <_ZN5Print7printlnEmi>
    51c0:	e7 01       	movw	r28, r14
    51c2:	c8 5e       	subi	r28, 0xE8	; 232
    51c4:	de 4f       	sbci	r29, 0xFE	; 254
    51c6:	68 e6       	ldi	r22, 0x68	; 104
    51c8:	74 e0       	ldi	r23, 0x04	; 4
    51ca:	88 81       	ld	r24, Y
    51cc:	99 81       	ldd	r25, Y+1	; 0x01
    51ce:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    51d2:	2a e0       	ldi	r18, 0x0A	; 10
    51d4:	30 e0       	ldi	r19, 0x00	; 0
    51d6:	b3 01       	movw	r22, r6
    51d8:	a2 01       	movw	r20, r4
    51da:	88 81       	ld	r24, Y
    51dc:	99 81       	ldd	r25, Y+1	; 0x01
    51de:	0e 94 5f 23 	call	0x46be	; 0x46be <_ZN5Print5printEmi>
    51e2:	6f ec       	ldi	r22, 0xCF	; 207
    51e4:	73 e0       	ldi	r23, 0x03	; 3
    51e6:	88 81       	ld	r24, Y
    51e8:	99 81       	ldd	r25, Y+1	; 0x01
    51ea:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    51ee:	2a e0       	ldi	r18, 0x0A	; 10
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	b5 01       	movw	r22, r10
    51f4:	a4 01       	movw	r20, r8
    51f6:	88 81       	ld	r24, Y
    51f8:	99 81       	ldd	r25, Y+1	; 0x01
    51fa:	0e 94 9d 23 	call	0x473a	; 0x473a <_ZN5Print7printlnEmi>
    51fe:	40 e1       	ldi	r20, 0x10	; 16
    5200:	57 e2       	ldi	r21, 0x27	; 39
    5202:	6f e5       	ldi	r22, 0x5F	; 95
    5204:	74 e0       	ldi	r23, 0x04	; 4
    5206:	c7 01       	movw	r24, r14
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	ff 90       	pop	r15
    5212:	ef 90       	pop	r14
    5214:	bf 90       	pop	r11
    5216:	af 90       	pop	r10
    5218:	9f 90       	pop	r9
    521a:	8f 90       	pop	r8
    521c:	7f 90       	pop	r7
    521e:	6f 90       	pop	r6
    5220:	5f 90       	pop	r5
    5222:	4f 90       	pop	r4
    5224:	0c 94 15 28 	jmp	0x502a	; 0x502a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00005228 <_ZN13Adafruit_FONA8getReplyEPcj>:
    5228:	ef 92       	push	r14
    522a:	ff 92       	push	r15
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	ec 01       	movw	r28, r24
    5236:	8b 01       	movw	r16, r22
    5238:	7a 01       	movw	r14, r20
    523a:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    523e:	6f ec       	ldi	r22, 0xCF	; 207
    5240:	73 e0       	ldi	r23, 0x03	; 3
    5242:	83 e6       	ldi	r24, 0x63	; 99
    5244:	96 e0       	ldi	r25, 0x06	; 6
    5246:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    524a:	b8 01       	movw	r22, r16
    524c:	83 e6       	ldi	r24, 0x63	; 99
    524e:	96 e0       	ldi	r25, 0x06	; 6
    5250:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    5254:	fe 01       	movw	r30, r28
    5256:	e8 5e       	subi	r30, 0xE8	; 232
    5258:	fe 4f       	sbci	r31, 0xFE	; 254
    525a:	b8 01       	movw	r22, r16
    525c:	80 81       	ld	r24, Z
    525e:	91 81       	ldd	r25, Z+1	; 0x01
    5260:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    5264:	40 e0       	ldi	r20, 0x00	; 0
    5266:	b7 01       	movw	r22, r14
    5268:	ce 01       	movw	r24, r28
    526a:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    526e:	18 2f       	mov	r17, r24
    5270:	68 ec       	ldi	r22, 0xC8	; 200
    5272:	73 e0       	ldi	r23, 0x03	; 3
    5274:	83 e6       	ldi	r24, 0x63	; 99
    5276:	96 e0       	ldi	r25, 0x06	; 6
    5278:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    527c:	be 01       	movw	r22, r28
    527e:	62 5f       	subi	r22, 0xF2	; 242
    5280:	7f 4f       	sbci	r23, 0xFF	; 255
    5282:	83 e6       	ldi	r24, 0x63	; 99
    5284:	96 e0       	ldi	r25, 0x06	; 6
    5286:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    528a:	81 2f       	mov	r24, r17
    528c:	df 91       	pop	r29
    528e:	cf 91       	pop	r28
    5290:	1f 91       	pop	r17
    5292:	0f 91       	pop	r16
    5294:	ff 90       	pop	r15
    5296:	ef 90       	pop	r14
    5298:	08 95       	ret

0000529a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    529a:	ef 92       	push	r14
    529c:	ff 92       	push	r15
    529e:	0f 93       	push	r16
    52a0:	1f 93       	push	r17
    52a2:	cf 93       	push	r28
    52a4:	df 93       	push	r29
    52a6:	ec 01       	movw	r28, r24
    52a8:	8b 01       	movw	r16, r22
    52aa:	7a 01       	movw	r14, r20
    52ac:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    52b0:	61 ec       	ldi	r22, 0xC1	; 193
    52b2:	73 e0       	ldi	r23, 0x03	; 3
    52b4:	83 e6       	ldi	r24, 0x63	; 99
    52b6:	96 e0       	ldi	r25, 0x06	; 6
    52b8:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    52bc:	b8 01       	movw	r22, r16
    52be:	83 e6       	ldi	r24, 0x63	; 99
    52c0:	96 e0       	ldi	r25, 0x06	; 6
    52c2:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    52c6:	fe 01       	movw	r30, r28
    52c8:	e8 5e       	subi	r30, 0xE8	; 232
    52ca:	fe 4f       	sbci	r31, 0xFE	; 254
    52cc:	b8 01       	movw	r22, r16
    52ce:	80 81       	ld	r24, Z
    52d0:	91 81       	ldd	r25, Z+1	; 0x01
    52d2:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    52d6:	40 e0       	ldi	r20, 0x00	; 0
    52d8:	b7 01       	movw	r22, r14
    52da:	ce 01       	movw	r24, r28
    52dc:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    52e0:	18 2f       	mov	r17, r24
    52e2:	6a eb       	ldi	r22, 0xBA	; 186
    52e4:	73 e0       	ldi	r23, 0x03	; 3
    52e6:	83 e6       	ldi	r24, 0x63	; 99
    52e8:	96 e0       	ldi	r25, 0x06	; 6
    52ea:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    52ee:	be 01       	movw	r22, r28
    52f0:	62 5f       	subi	r22, 0xF2	; 242
    52f2:	7f 4f       	sbci	r23, 0xFF	; 255
    52f4:	83 e6       	ldi	r24, 0x63	; 99
    52f6:	96 e0       	ldi	r25, 0x06	; 6
    52f8:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    52fc:	81 2f       	mov	r24, r17
    52fe:	df 91       	pop	r29
    5300:	cf 91       	pop	r28
    5302:	1f 91       	pop	r17
    5304:	0f 91       	pop	r16
    5306:	ff 90       	pop	r15
    5308:	ef 90       	pop	r14
    530a:	08 95       	ret

0000530c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    530c:	8f 92       	push	r8
    530e:	9f 92       	push	r9
    5310:	af 92       	push	r10
    5312:	bf 92       	push	r11
    5314:	cf 92       	push	r12
    5316:	df 92       	push	r13
    5318:	ef 92       	push	r14
    531a:	ff 92       	push	r15
    531c:	0f 93       	push	r16
    531e:	1f 93       	push	r17
    5320:	cf 93       	push	r28
    5322:	df 93       	push	r29
    5324:	ec 01       	movw	r28, r24
    5326:	6b 01       	movw	r12, r22
    5328:	49 01       	movw	r8, r18
    532a:	5a 01       	movw	r10, r20
    532c:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    5330:	63 eb       	ldi	r22, 0xB3	; 179
    5332:	73 e0       	ldi	r23, 0x03	; 3
    5334:	83 e6       	ldi	r24, 0x63	; 99
    5336:	96 e0       	ldi	r25, 0x06	; 6
    5338:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    533c:	b6 01       	movw	r22, r12
    533e:	83 e6       	ldi	r24, 0x63	; 99
    5340:	96 e0       	ldi	r25, 0x06	; 6
    5342:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5346:	2a e0       	ldi	r18, 0x0A	; 10
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	b5 01       	movw	r22, r10
    534c:	a4 01       	movw	r20, r8
    534e:	83 e6       	ldi	r24, 0x63	; 99
    5350:	96 e0       	ldi	r25, 0x06	; 6
    5352:	0e 94 10 24 	call	0x4820	; 0x4820 <_ZN5Print7printlnEli>
    5356:	7e 01       	movw	r14, r28
    5358:	88 ee       	ldi	r24, 0xE8	; 232
    535a:	e8 1a       	sub	r14, r24
    535c:	8e ef       	ldi	r24, 0xFE	; 254
    535e:	f8 0a       	sbc	r15, r24
    5360:	b6 01       	movw	r22, r12
    5362:	f7 01       	movw	r30, r14
    5364:	80 81       	ld	r24, Z
    5366:	91 81       	ldd	r25, Z+1	; 0x01
    5368:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    536c:	2a e0       	ldi	r18, 0x0A	; 10
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	b5 01       	movw	r22, r10
    5372:	a4 01       	movw	r20, r8
    5374:	f7 01       	movw	r30, r14
    5376:	80 81       	ld	r24, Z
    5378:	91 81       	ldd	r25, Z+1	; 0x01
    537a:	0e 94 10 24 	call	0x4820	; 0x4820 <_ZN5Print7printlnEli>
    537e:	40 e0       	ldi	r20, 0x00	; 0
    5380:	b8 01       	movw	r22, r16
    5382:	ce 01       	movw	r24, r28
    5384:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    5388:	18 2f       	mov	r17, r24
    538a:	6c ea       	ldi	r22, 0xAC	; 172
    538c:	73 e0       	ldi	r23, 0x03	; 3
    538e:	83 e6       	ldi	r24, 0x63	; 99
    5390:	96 e0       	ldi	r25, 0x06	; 6
    5392:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5396:	be 01       	movw	r22, r28
    5398:	62 5f       	subi	r22, 0xF2	; 242
    539a:	7f 4f       	sbci	r23, 0xFF	; 255
    539c:	83 e6       	ldi	r24, 0x63	; 99
    539e:	96 e0       	ldi	r25, 0x06	; 6
    53a0:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    53a4:	81 2f       	mov	r24, r17
    53a6:	df 91       	pop	r29
    53a8:	cf 91       	pop	r28
    53aa:	1f 91       	pop	r17
    53ac:	0f 91       	pop	r16
    53ae:	ff 90       	pop	r15
    53b0:	ef 90       	pop	r14
    53b2:	df 90       	pop	r13
    53b4:	cf 90       	pop	r12
    53b6:	bf 90       	pop	r11
    53b8:	af 90       	pop	r10
    53ba:	9f 90       	pop	r9
    53bc:	8f 90       	pop	r8
    53be:	08 95       	ret

000053c0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    53c0:	af 92       	push	r10
    53c2:	bf 92       	push	r11
    53c4:	cf 92       	push	r12
    53c6:	df 92       	push	r13
    53c8:	ef 92       	push	r14
    53ca:	ff 92       	push	r15
    53cc:	0f 93       	push	r16
    53ce:	1f 93       	push	r17
    53d0:	cf 93       	push	r28
    53d2:	df 93       	push	r29
    53d4:	ec 01       	movw	r28, r24
    53d6:	6b 01       	movw	r12, r22
    53d8:	7a 01       	movw	r14, r20
    53da:	59 01       	movw	r10, r18
    53dc:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    53e0:	65 ea       	ldi	r22, 0xA5	; 165
    53e2:	73 e0       	ldi	r23, 0x03	; 3
    53e4:	83 e6       	ldi	r24, 0x63	; 99
    53e6:	96 e0       	ldi	r25, 0x06	; 6
    53e8:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    53ec:	b6 01       	movw	r22, r12
    53ee:	83 e6       	ldi	r24, 0x63	; 99
    53f0:	96 e0       	ldi	r25, 0x06	; 6
    53f2:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    53f6:	62 e2       	ldi	r22, 0x22	; 34
    53f8:	83 e6       	ldi	r24, 0x63	; 99
    53fa:	96 e0       	ldi	r25, 0x06	; 6
    53fc:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN5Print5printEc>
    5400:	b7 01       	movw	r22, r14
    5402:	83 e6       	ldi	r24, 0x63	; 99
    5404:	96 e0       	ldi	r25, 0x06	; 6
    5406:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    540a:	62 e2       	ldi	r22, 0x22	; 34
    540c:	83 e6       	ldi	r24, 0x63	; 99
    540e:	96 e0       	ldi	r25, 0x06	; 6
    5410:	0e 94 04 23 	call	0x4608	; 0x4608 <_ZN5Print7printlnEc>
    5414:	8e 01       	movw	r16, r28
    5416:	08 5e       	subi	r16, 0xE8	; 232
    5418:	1e 4f       	sbci	r17, 0xFE	; 254
    541a:	b6 01       	movw	r22, r12
    541c:	f8 01       	movw	r30, r16
    541e:	80 81       	ld	r24, Z
    5420:	91 81       	ldd	r25, Z+1	; 0x01
    5422:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5426:	62 e2       	ldi	r22, 0x22	; 34
    5428:	f8 01       	movw	r30, r16
    542a:	80 81       	ld	r24, Z
    542c:	91 81       	ldd	r25, Z+1	; 0x01
    542e:	0e 94 d5 22 	call	0x45aa	; 0x45aa <_ZN5Print5printEc>
    5432:	b7 01       	movw	r22, r14
    5434:	f8 01       	movw	r30, r16
    5436:	80 81       	ld	r24, Z
    5438:	91 81       	ldd	r25, Z+1	; 0x01
    543a:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    543e:	62 e2       	ldi	r22, 0x22	; 34
    5440:	f8 01       	movw	r30, r16
    5442:	80 81       	ld	r24, Z
    5444:	91 81       	ldd	r25, Z+1	; 0x01
    5446:	0e 94 04 23 	call	0x4608	; 0x4608 <_ZN5Print7printlnEc>
    544a:	40 e0       	ldi	r20, 0x00	; 0
    544c:	b5 01       	movw	r22, r10
    544e:	ce 01       	movw	r24, r28
    5450:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    5454:	18 2f       	mov	r17, r24
    5456:	6e e9       	ldi	r22, 0x9E	; 158
    5458:	73 e0       	ldi	r23, 0x03	; 3
    545a:	83 e6       	ldi	r24, 0x63	; 99
    545c:	96 e0       	ldi	r25, 0x06	; 6
    545e:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5462:	be 01       	movw	r22, r28
    5464:	62 5f       	subi	r22, 0xF2	; 242
    5466:	7f 4f       	sbci	r23, 0xFF	; 255
    5468:	83 e6       	ldi	r24, 0x63	; 99
    546a:	96 e0       	ldi	r25, 0x06	; 6
    546c:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    5470:	81 2f       	mov	r24, r17
    5472:	df 91       	pop	r29
    5474:	cf 91       	pop	r28
    5476:	1f 91       	pop	r17
    5478:	0f 91       	pop	r16
    547a:	ff 90       	pop	r15
    547c:	ef 90       	pop	r14
    547e:	df 90       	pop	r13
    5480:	cf 90       	pop	r12
    5482:	bf 90       	pop	r11
    5484:	af 90       	pop	r10
    5486:	08 95       	ret

00005488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    5488:	0f 93       	push	r16
    548a:	1f 93       	push	r17
    548c:	cf 93       	push	r28
    548e:	df 93       	push	r29
    5490:	ec 01       	movw	r28, r24
    5492:	8a 01       	movw	r16, r20
    5494:	a9 01       	movw	r20, r18
    5496:	0e 94 4d 29 	call	0x529a	; 0x529a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    549a:	88 23       	and	r24, r24
    549c:	41 f0       	breq	.+16     	; 0x54ae <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    549e:	b8 01       	movw	r22, r16
    54a0:	ce 01       	movw	r24, r28
    54a2:	0e 96       	adiw	r24, 0x0e	; 14
    54a4:	0e 94 02 34 	call	0x6804	; 0x6804 <strcmp_P>
    54a8:	21 e0       	ldi	r18, 0x01	; 1
    54aa:	89 2b       	or	r24, r25
    54ac:	09 f0       	breq	.+2      	; 0x54b0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    54ae:	20 e0       	ldi	r18, 0x00	; 0
    54b0:	82 2f       	mov	r24, r18
    54b2:	df 91       	pop	r29
    54b4:	cf 91       	pop	r28
    54b6:	1f 91       	pop	r17
    54b8:	0f 91       	pop	r16
    54ba:	08 95       	ret

000054bc <_ZN13Adafruit_FONA5beginER6Stream>:
    54bc:	cf 92       	push	r12
    54be:	df 92       	push	r13
    54c0:	ef 92       	push	r14
    54c2:	ff 92       	push	r15
    54c4:	0f 93       	push	r16
    54c6:	1f 93       	push	r17
    54c8:	cf 93       	push	r28
    54ca:	df 93       	push	r29
    54cc:	ec 01       	movw	r28, r24
    54ce:	7c 01       	movw	r14, r24
    54d0:	88 ee       	ldi	r24, 0xE8	; 232
    54d2:	e8 1a       	sub	r14, r24
    54d4:	8e ef       	ldi	r24, 0xFE	; 254
    54d6:	f8 0a       	sbc	r15, r24
    54d8:	d7 01       	movw	r26, r14
    54da:	6d 93       	st	X+, r22
    54dc:	7c 93       	st	X, r23
    54de:	61 e0       	ldi	r22, 0x01	; 1
    54e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    54e2:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    54e6:	61 e0       	ldi	r22, 0x01	; 1
    54e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    54ea:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
    54ee:	6a e0       	ldi	r22, 0x0A	; 10
    54f0:	70 e0       	ldi	r23, 0x00	; 0
    54f2:	80 e0       	ldi	r24, 0x00	; 0
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    54fa:	60 e0       	ldi	r22, 0x00	; 0
    54fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    54fe:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
    5502:	64 e6       	ldi	r22, 0x64	; 100
    5504:	70 e0       	ldi	r23, 0x00	; 0
    5506:	80 e0       	ldi	r24, 0x00	; 0
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    550e:	61 e0       	ldi	r22, 0x01	; 1
    5510:	8c 85       	ldd	r24, Y+12	; 0x0c
    5512:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
    5516:	6f ea       	ldi	r22, 0xAF	; 175
    5518:	76 e0       	ldi	r23, 0x06	; 6
    551a:	83 e6       	ldi	r24, 0x63	; 99
    551c:	96 e0       	ldi	r25, 0x06	; 6
    551e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5522:	8e e0       	ldi	r24, 0x0E	; 14
    5524:	c8 2e       	mov	r12, r24
    5526:	d1 2c       	mov	r13, r1
    5528:	8e 01       	movw	r16, r28
    552a:	0a 5e       	subi	r16, 0xEA	; 234
    552c:	1e 4f       	sbci	r17, 0xFE	; 254
    552e:	f7 01       	movw	r30, r14
    5530:	80 81       	ld	r24, Z
    5532:	91 81       	ldd	r25, Z+1	; 0x01
    5534:	dc 01       	movw	r26, r24
    5536:	ed 91       	ld	r30, X+
    5538:	fc 91       	ld	r31, X
    553a:	04 80       	ldd	r0, Z+4	; 0x04
    553c:	f5 81       	ldd	r31, Z+5	; 0x05
    553e:	e0 2d       	mov	r30, r0
    5540:	09 95       	icall
    5542:	89 2b       	or	r24, r25
    5544:	89 f0       	breq	.+34     	; 0x5568 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    5546:	6a e9       	ldi	r22, 0x9A	; 154
    5548:	76 e0       	ldi	r23, 0x06	; 6
    554a:	83 e6       	ldi	r24, 0x63	; 99
    554c:	96 e0       	ldi	r25, 0x06	; 6
    554e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5552:	f7 01       	movw	r30, r14
    5554:	80 81       	ld	r24, Z
    5556:	91 81       	ldd	r25, Z+1	; 0x01
    5558:	dc 01       	movw	r26, r24
    555a:	ed 91       	ld	r30, X+
    555c:	fc 91       	ld	r31, X
    555e:	06 80       	ldd	r0, Z+6	; 0x06
    5560:	f7 81       	ldd	r31, Z+7	; 0x07
    5562:	e0 2d       	mov	r30, r0
    5564:	09 95       	icall
    5566:	e3 cf       	rjmp	.-58     	; 0x552e <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    5568:	f8 01       	movw	r30, r16
    556a:	40 81       	ld	r20, Z
    556c:	51 81       	ldd	r21, Z+1	; 0x01
    556e:	24 ef       	ldi	r18, 0xF4	; 244
    5570:	31 e0       	ldi	r19, 0x01	; 1
    5572:	67 e9       	ldi	r22, 0x97	; 151
    5574:	76 e0       	ldi	r23, 0x06	; 6
    5576:	ce 01       	movw	r24, r28
    5578:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    557c:	81 11       	cpse	r24, r1
    557e:	63 c0       	rjmp	.+198    	; 0x5646 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    5580:	d7 01       	movw	r26, r14
    5582:	8d 91       	ld	r24, X+
    5584:	9c 91       	ld	r25, X
    5586:	dc 01       	movw	r26, r24
    5588:	ed 91       	ld	r30, X+
    558a:	fc 91       	ld	r31, X
    558c:	04 80       	ldd	r0, Z+4	; 0x04
    558e:	f5 81       	ldd	r31, Z+5	; 0x05
    5590:	e0 2d       	mov	r30, r0
    5592:	09 95       	icall
    5594:	89 2b       	or	r24, r25
    5596:	59 f0       	breq	.+22     	; 0x55ae <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    5598:	f7 01       	movw	r30, r14
    559a:	80 81       	ld	r24, Z
    559c:	91 81       	ldd	r25, Z+1	; 0x01
    559e:	dc 01       	movw	r26, r24
    55a0:	ed 91       	ld	r30, X+
    55a2:	fc 91       	ld	r31, X
    55a4:	06 80       	ldd	r0, Z+6	; 0x06
    55a6:	f7 81       	ldd	r31, Z+7	; 0x07
    55a8:	e0 2d       	mov	r30, r0
    55aa:	09 95       	icall
    55ac:	e9 cf       	rjmp	.-46     	; 0x5580 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    55ae:	24 ef       	ldi	r18, 0xF4	; 244
    55b0:	31 e0       	ldi	r19, 0x01	; 1
    55b2:	44 e9       	ldi	r20, 0x94	; 148
    55b4:	56 e0       	ldi	r21, 0x06	; 6
    55b6:	61 e9       	ldi	r22, 0x91	; 145
    55b8:	76 e0       	ldi	r23, 0x06	; 6
    55ba:	ce 01       	movw	r24, r28
    55bc:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    55c0:	81 11       	cpse	r24, r1
    55c2:	41 c0       	rjmp	.+130    	; 0x5646 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    55c4:	64 ef       	ldi	r22, 0xF4	; 244
    55c6:	71 e0       	ldi	r23, 0x01	; 1
    55c8:	80 e0       	ldi	r24, 0x00	; 0
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    55d0:	b1 e0       	ldi	r27, 0x01	; 1
    55d2:	cb 1a       	sub	r12, r27
    55d4:	d1 08       	sbc	r13, r1
    55d6:	09 f0       	breq	.+2      	; 0x55da <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    55d8:	aa cf       	rjmp	.-172    	; 0x552e <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    55da:	6f e5       	ldi	r22, 0x5F	; 95
    55dc:	76 e0       	ldi	r23, 0x06	; 6
    55de:	83 e6       	ldi	r24, 0x63	; 99
    55e0:	96 e0       	ldi	r25, 0x06	; 6
    55e2:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <_ZN5Print7printlnEPK19__FlashStringHelper>
    55e6:	d8 01       	movw	r26, r16
    55e8:	4d 91       	ld	r20, X+
    55ea:	5c 91       	ld	r21, X
    55ec:	24 ef       	ldi	r18, 0xF4	; 244
    55ee:	31 e0       	ldi	r19, 0x01	; 1
    55f0:	6c e5       	ldi	r22, 0x5C	; 92
    55f2:	76 e0       	ldi	r23, 0x06	; 6
    55f4:	ce 01       	movw	r24, r28
    55f6:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    55fa:	64 e6       	ldi	r22, 0x64	; 100
    55fc:	70 e0       	ldi	r23, 0x00	; 0
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    5606:	f8 01       	movw	r30, r16
    5608:	40 81       	ld	r20, Z
    560a:	51 81       	ldd	r21, Z+1	; 0x01
    560c:	24 ef       	ldi	r18, 0xF4	; 244
    560e:	31 e0       	ldi	r19, 0x01	; 1
    5610:	69 e5       	ldi	r22, 0x59	; 89
    5612:	76 e0       	ldi	r23, 0x06	; 6
    5614:	ce 01       	movw	r24, r28
    5616:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    561a:	64 e6       	ldi	r22, 0x64	; 100
    561c:	70 e0       	ldi	r23, 0x00	; 0
    561e:	80 e0       	ldi	r24, 0x00	; 0
    5620:	90 e0       	ldi	r25, 0x00	; 0
    5622:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    5626:	d8 01       	movw	r26, r16
    5628:	4d 91       	ld	r20, X+
    562a:	5c 91       	ld	r21, X
    562c:	24 ef       	ldi	r18, 0xF4	; 244
    562e:	31 e0       	ldi	r19, 0x01	; 1
    5630:	66 e5       	ldi	r22, 0x56	; 86
    5632:	76 e0       	ldi	r23, 0x06	; 6
    5634:	ce 01       	movw	r24, r28
    5636:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    563a:	64 e6       	ldi	r22, 0x64	; 100
    563c:	70 e0       	ldi	r23, 0x00	; 0
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    5646:	f8 01       	movw	r30, r16
    5648:	40 81       	ld	r20, Z
    564a:	51 81       	ldd	r21, Z+1	; 0x01
    564c:	24 ef       	ldi	r18, 0xF4	; 244
    564e:	31 e0       	ldi	r19, 0x01	; 1
    5650:	61 e5       	ldi	r22, 0x51	; 81
    5652:	76 e0       	ldi	r23, 0x06	; 6
    5654:	ce 01       	movw	r24, r28
    5656:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    565a:	64 e6       	ldi	r22, 0x64	; 100
    565c:	70 e0       	ldi	r23, 0x00	; 0
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    5666:	d8 01       	movw	r26, r16
    5668:	4d 91       	ld	r20, X+
    566a:	5c 91       	ld	r21, X
    566c:	24 ef       	ldi	r18, 0xF4	; 244
    566e:	31 e0       	ldi	r19, 0x01	; 1
    5670:	6c e4       	ldi	r22, 0x4C	; 76
    5672:	76 e0       	ldi	r23, 0x06	; 6
    5674:	ce 01       	movw	r24, r28
    5676:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    567a:	d8 2e       	mov	r13, r24
    567c:	88 23       	and	r24, r24
    567e:	09 f4       	brne	.+2      	; 0x5682 <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    5680:	97 c0       	rjmp	.+302    	; 0x57b0 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    5682:	f8 01       	movw	r30, r16
    5684:	40 81       	ld	r20, Z
    5686:	51 81       	ldd	r21, Z+1	; 0x01
    5688:	24 ef       	ldi	r18, 0xF4	; 244
    568a:	31 e0       	ldi	r19, 0x01	; 1
    568c:	62 e4       	ldi	r22, 0x42	; 66
    568e:	76 e0       	ldi	r23, 0x06	; 6
    5690:	ce 01       	movw	r24, r28
    5692:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5696:	64 e6       	ldi	r22, 0x64	; 100
    5698:	70 e0       	ldi	r23, 0x00	; 0
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <delay>
    56a2:	ce 01       	movw	r24, r28
    56a4:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    56a8:	6b e3       	ldi	r22, 0x3B	; 59
    56aa:	76 e0       	ldi	r23, 0x06	; 6
    56ac:	83 e6       	ldi	r24, 0x63	; 99
    56ae:	96 e0       	ldi	r25, 0x06	; 6
    56b0:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    56b4:	69 ed       	ldi	r22, 0xD9	; 217
    56b6:	73 e0       	ldi	r23, 0x03	; 3
    56b8:	83 e6       	ldi	r24, 0x63	; 99
    56ba:	96 e0       	ldi	r25, 0x06	; 6
    56bc:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    56c0:	69 ed       	ldi	r22, 0xD9	; 217
    56c2:	73 e0       	ldi	r23, 0x03	; 3
    56c4:	d7 01       	movw	r26, r14
    56c6:	8d 91       	ld	r24, X+
    56c8:	9c 91       	ld	r25, X
    56ca:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    56ce:	41 e0       	ldi	r20, 0x01	; 1
    56d0:	64 ef       	ldi	r22, 0xF4	; 244
    56d2:	71 e0       	ldi	r23, 0x01	; 1
    56d4:	ce 01       	movw	r24, r28
    56d6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    56da:	64 e3       	ldi	r22, 0x34	; 52
    56dc:	76 e0       	ldi	r23, 0x06	; 6
    56de:	83 e6       	ldi	r24, 0x63	; 99
    56e0:	96 e0       	ldi	r25, 0x06	; 6
    56e2:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    56e6:	8e 01       	movw	r16, r28
    56e8:	02 5f       	subi	r16, 0xF2	; 242
    56ea:	1f 4f       	sbci	r17, 0xFF	; 255
    56ec:	b8 01       	movw	r22, r16
    56ee:	83 e6       	ldi	r24, 0x63	; 99
    56f0:	96 e0       	ldi	r25, 0x06	; 6
    56f2:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    56f6:	69 e2       	ldi	r22, 0x29	; 41
    56f8:	76 e0       	ldi	r23, 0x06	; 6
    56fa:	c8 01       	movw	r24, r16
    56fc:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    5700:	89 2b       	or	r24, r25
    5702:	11 f0       	breq	.+4      	; 0x5708 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    5704:	83 e0       	ldi	r24, 0x03	; 3
    5706:	23 c0       	rjmp	.+70     	; 0x574e <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    5708:	6e e1       	ldi	r22, 0x1E	; 30
    570a:	76 e0       	ldi	r23, 0x06	; 6
    570c:	c8 01       	movw	r24, r16
    570e:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    5712:	89 2b       	or	r24, r25
    5714:	11 f0       	breq	.+4      	; 0x571a <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    5716:	82 e0       	ldi	r24, 0x02	; 2
    5718:	1a c0       	rjmp	.+52     	; 0x574e <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    571a:	63 e1       	ldi	r22, 0x13	; 19
    571c:	76 e0       	ldi	r23, 0x06	; 6
    571e:	c8 01       	movw	r24, r16
    5720:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    5724:	89 2b       	or	r24, r25
    5726:	11 f0       	breq	.+4      	; 0x572c <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    5728:	81 e0       	ldi	r24, 0x01	; 1
    572a:	11 c0       	rjmp	.+34     	; 0x574e <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    572c:	63 e0       	ldi	r22, 0x03	; 3
    572e:	76 e0       	ldi	r23, 0x06	; 6
    5730:	c8 01       	movw	r24, r16
    5732:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    5736:	89 2b       	or	r24, r25
    5738:	11 f0       	breq	.+4      	; 0x573e <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    573a:	84 e0       	ldi	r24, 0x04	; 4
    573c:	08 c0       	rjmp	.+16     	; 0x574e <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    573e:	63 ef       	ldi	r22, 0xF3	; 243
    5740:	75 e0       	ldi	r23, 0x05	; 5
    5742:	c8 01       	movw	r24, r16
    5744:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    5748:	89 2b       	or	r24, r25
    574a:	11 f0       	breq	.+4      	; 0x5750 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    574c:	85 e0       	ldi	r24, 0x05	; 5
    574e:	8d 87       	std	Y+13, r24	; 0x0d
    5750:	8d 85       	ldd	r24, Y+13	; 0x0d
    5752:	81 30       	cpi	r24, 0x01	; 1
    5754:	69 f5       	brne	.+90     	; 0x57b0 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    5756:	6c ee       	ldi	r22, 0xEC	; 236
    5758:	75 e0       	ldi	r23, 0x05	; 5
    575a:	83 e6       	ldi	r24, 0x63	; 99
    575c:	96 e0       	ldi	r25, 0x06	; 6
    575e:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5762:	6d ed       	ldi	r22, 0xDD	; 221
    5764:	73 e0       	ldi	r23, 0x03	; 3
    5766:	83 e6       	ldi	r24, 0x63	; 99
    5768:	96 e0       	ldi	r25, 0x06	; 6
    576a:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    576e:	6d ed       	ldi	r22, 0xDD	; 221
    5770:	73 e0       	ldi	r23, 0x03	; 3
    5772:	f7 01       	movw	r30, r14
    5774:	80 81       	ld	r24, Z
    5776:	91 81       	ldd	r25, Z+1	; 0x01
    5778:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    577c:	41 e0       	ldi	r20, 0x01	; 1
    577e:	64 ef       	ldi	r22, 0xF4	; 244
    5780:	71 e0       	ldi	r23, 0x01	; 1
    5782:	ce 01       	movw	r24, r28
    5784:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    5788:	65 ee       	ldi	r22, 0xE5	; 229
    578a:	75 e0       	ldi	r23, 0x05	; 5
    578c:	83 e6       	ldi	r24, 0x63	; 99
    578e:	96 e0       	ldi	r25, 0x06	; 6
    5790:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5794:	b8 01       	movw	r22, r16
    5796:	83 e6       	ldi	r24, 0x63	; 99
    5798:	96 e0       	ldi	r25, 0x06	; 6
    579a:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    579e:	6d ed       	ldi	r22, 0xDD	; 221
    57a0:	75 e0       	ldi	r23, 0x05	; 5
    57a2:	c8 01       	movw	r24, r16
    57a4:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    57a8:	89 2b       	or	r24, r25
    57aa:	11 f0       	breq	.+4      	; 0x57b0 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    57ac:	86 e0       	ldi	r24, 0x06	; 6
    57ae:	8d 87       	std	Y+13, r24	; 0x0d
    57b0:	8d 2d       	mov	r24, r13
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	ef 90       	pop	r14
    57be:	df 90       	pop	r13
    57c0:	cf 90       	pop	r12
    57c2:	08 95       	ret

000057c4 <_ZN13Adafruit_FONA9HTTP_initEv>:
    57c4:	fc 01       	movw	r30, r24
    57c6:	ea 5e       	subi	r30, 0xEA	; 234
    57c8:	fe 4f       	sbci	r31, 0xFE	; 254
    57ca:	40 81       	ld	r20, Z
    57cc:	51 81       	ldd	r21, Z+1	; 0x01
    57ce:	24 ef       	ldi	r18, 0xF4	; 244
    57d0:	31 e0       	ldi	r19, 0x01	; 1
    57d2:	6f eb       	ldi	r22, 0xBF	; 191
    57d4:	74 e0       	ldi	r23, 0x04	; 4
    57d6:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000057da <_ZN13Adafruit_FONA9HTTP_termEv>:
    57da:	fc 01       	movw	r30, r24
    57dc:	ea 5e       	subi	r30, 0xEA	; 234
    57de:	fe 4f       	sbci	r31, 0xFE	; 254
    57e0:	40 81       	ld	r20, Z
    57e2:	51 81       	ldd	r21, Z+1	; 0x01
    57e4:	24 ef       	ldi	r18, 0xF4	; 244
    57e6:	31 e0       	ldi	r19, 0x01	; 1
    57e8:	63 eb       	ldi	r22, 0xB3	; 179
    57ea:	74 e0       	ldi	r23, 0x04	; 4
    57ec:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000057f0 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    57f0:	0c 94 ed 2b 	jmp	0x57da	; 0x57da <_ZN13Adafruit_FONA9HTTP_termEv>

000057f4 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    57f4:	0f 93       	push	r16
    57f6:	1f 93       	push	r17
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	ec 01       	movw	r28, r24
    57fe:	8a 01       	movw	r16, r20
    5800:	a9 01       	movw	r20, r18
    5802:	0e 94 14 29 	call	0x5228	; 0x5228 <_ZN13Adafruit_FONA8getReplyEPcj>
    5806:	88 23       	and	r24, r24
    5808:	41 f0       	breq	.+16     	; 0x581a <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    580a:	b8 01       	movw	r22, r16
    580c:	ce 01       	movw	r24, r28
    580e:	0e 96       	adiw	r24, 0x0e	; 14
    5810:	0e 94 02 34 	call	0x6804	; 0x6804 <strcmp_P>
    5814:	21 e0       	ldi	r18, 0x01	; 1
    5816:	89 2b       	or	r24, r25
    5818:	09 f0       	breq	.+2      	; 0x581c <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	82 2f       	mov	r24, r18
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	1f 91       	pop	r17
    5824:	0f 91       	pop	r16
    5826:	08 95       	ret

00005828 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    5828:	af 92       	push	r10
    582a:	bf 92       	push	r11
    582c:	cf 92       	push	r12
    582e:	df 92       	push	r13
    5830:	ef 92       	push	r14
    5832:	ff 92       	push	r15
    5834:	0f 93       	push	r16
    5836:	1f 93       	push	r17
    5838:	cf 93       	push	r28
    583a:	df 93       	push	r29
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
    5840:	6e 97       	sbiw	r28, 0x1e	; 30
    5842:	0f b6       	in	r0, 0x3f	; 63
    5844:	f8 94       	cli
    5846:	de bf       	out	0x3e, r29	; 62
    5848:	0f be       	out	0x3f, r0	; 63
    584a:	cd bf       	out	0x3d, r28	; 61
    584c:	8c 01       	movw	r16, r24
    584e:	5b 01       	movw	r10, r22
    5850:	6a 01       	movw	r12, r20
    5852:	fc 01       	movw	r30, r24
    5854:	ea 5e       	subi	r30, 0xEA	; 234
    5856:	fe 4f       	sbci	r31, 0xFE	; 254
    5858:	40 81       	ld	r20, Z
    585a:	51 81       	ldd	r21, Z+1	; 0x01
    585c:	24 ef       	ldi	r18, 0xF4	; 244
    585e:	31 e0       	ldi	r19, 0x01	; 1
    5860:	66 ea       	ldi	r22, 0xA6	; 166
    5862:	75 e0       	ldi	r23, 0x05	; 5
    5864:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5868:	88 23       	and	r24, r24
    586a:	09 f4       	brne	.+2      	; 0x586e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    586c:	88 c0       	rjmp	.+272    	; 0x597e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    586e:	8a e0       	ldi	r24, 0x0A	; 10
    5870:	ef ee       	ldi	r30, 0xEF	; 239
    5872:	f1 e0       	ldi	r31, 0x01	; 1
    5874:	9e 01       	movw	r18, r28
    5876:	2f 5f       	subi	r18, 0xFF	; 255
    5878:	3f 4f       	sbci	r19, 0xFF	; 255
    587a:	79 01       	movw	r14, r18
    587c:	d9 01       	movw	r26, r18
    587e:	01 90       	ld	r0, Z+
    5880:	0d 92       	st	X+, r0
    5882:	8a 95       	dec	r24
    5884:	e1 f7       	brne	.-8      	; 0x587e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    5886:	fe 01       	movw	r30, r28
    5888:	3b 96       	adiw	r30, 0x0b	; 11
    588a:	84 e1       	ldi	r24, 0x14	; 20
    588c:	df 01       	movw	r26, r30
    588e:	1d 92       	st	X+, r1
    5890:	8a 95       	dec	r24
    5892:	e9 f7       	brne	.-6      	; 0x588e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    5894:	43 e1       	ldi	r20, 0x13	; 19
    5896:	50 e0       	ldi	r21, 0x00	; 0
    5898:	b5 01       	movw	r22, r10
    589a:	ce 01       	movw	r24, r28
    589c:	0a 96       	adiw	r24, 0x0a	; 10
    589e:	0e 94 42 34 	call	0x6884	; 0x6884 <strncpy>
    58a2:	f7 01       	movw	r30, r14
    58a4:	01 90       	ld	r0, Z+
    58a6:	00 20       	and	r0, r0
    58a8:	e9 f7       	brne	.-6      	; 0x58a4 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    58aa:	31 97       	sbiw	r30, 0x01	; 1
    58ac:	82 e2       	ldi	r24, 0x22	; 34
    58ae:	80 83       	st	Z, r24
    58b0:	24 ef       	ldi	r18, 0xF4	; 244
    58b2:	31 e0       	ldi	r19, 0x01	; 1
    58b4:	43 ea       	ldi	r20, 0xA3	; 163
    58b6:	55 e0       	ldi	r21, 0x05	; 5
    58b8:	b7 01       	movw	r22, r14
    58ba:	c8 01       	movw	r24, r16
    58bc:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    58c0:	88 23       	and	r24, r24
    58c2:	09 f4       	brne	.+2      	; 0x58c6 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    58c4:	5c c0       	rjmp	.+184    	; 0x597e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    58c6:	60 ea       	ldi	r22, 0xA0	; 160
    58c8:	75 e0       	ldi	r23, 0x05	; 5
    58ca:	83 e6       	ldi	r24, 0x63	; 99
    58cc:	96 e0       	ldi	r25, 0x06	; 6
    58ce:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    58d2:	b6 01       	movw	r22, r12
    58d4:	83 e6       	ldi	r24, 0x63	; 99
    58d6:	96 e0       	ldi	r25, 0x06	; 6
    58d8:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    58dc:	b6 01       	movw	r22, r12
    58de:	78 01       	movw	r14, r16
    58e0:	b8 ee       	ldi	r27, 0xE8	; 232
    58e2:	eb 1a       	sub	r14, r27
    58e4:	be ef       	ldi	r27, 0xFE	; 254
    58e6:	fb 0a       	sbc	r15, r27
    58e8:	f7 01       	movw	r30, r14
    58ea:	80 81       	ld	r24, Z
    58ec:	91 81       	ldd	r25, Z+1	; 0x01
    58ee:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    58f2:	d7 01       	movw	r26, r14
    58f4:	8d 91       	ld	r24, X+
    58f6:	9c 91       	ld	r25, X
    58f8:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_ZN5Print7printlnEv>
    58fc:	f7 01       	movw	r30, r14
    58fe:	80 81       	ld	r24, Z
    5900:	91 81       	ldd	r25, Z+1	; 0x01
    5902:	dc 01       	movw	r26, r24
    5904:	ed 91       	ld	r30, X+
    5906:	fc 91       	ld	r31, X
    5908:	01 90       	ld	r0, Z+
    590a:	f0 81       	ld	r31, Z
    590c:	e0 2d       	mov	r30, r0
    590e:	6a e1       	ldi	r22, 0x1A	; 26
    5910:	09 95       	icall
    5912:	66 ef       	ldi	r22, 0xF6	; 246
    5914:	73 e0       	ldi	r23, 0x03	; 3
    5916:	83 e6       	ldi	r24, 0x63	; 99
    5918:	96 e0       	ldi	r25, 0x06	; 6
    591a:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    591e:	f8 01       	movw	r30, r16
    5920:	85 85       	ldd	r24, Z+13	; 0x0d
    5922:	84 50       	subi	r24, 0x04	; 4
    5924:	82 30       	cpi	r24, 0x02	; 2
    5926:	60 f4       	brcc	.+24     	; 0x5940 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    5928:	40 e0       	ldi	r20, 0x00	; 0
    592a:	68 ec       	ldi	r22, 0xC8	; 200
    592c:	70 e0       	ldi	r23, 0x00	; 0
    592e:	c8 01       	movw	r24, r16
    5930:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    5934:	40 e0       	ldi	r20, 0x00	; 0
    5936:	68 ec       	ldi	r22, 0xC8	; 200
    5938:	70 e0       	ldi	r23, 0x00	; 0
    593a:	c8 01       	movw	r24, r16
    593c:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    5940:	40 e0       	ldi	r20, 0x00	; 0
    5942:	60 e1       	ldi	r22, 0x10	; 16
    5944:	77 e2       	ldi	r23, 0x27	; 39
    5946:	c8 01       	movw	r24, r16
    5948:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    594c:	78 01       	movw	r14, r16
    594e:	fe e0       	ldi	r31, 0x0E	; 14
    5950:	ef 0e       	add	r14, r31
    5952:	f1 1c       	adc	r15, r1
    5954:	69 ef       	ldi	r22, 0xF9	; 249
    5956:	73 e0       	ldi	r23, 0x03	; 3
    5958:	c7 01       	movw	r24, r14
    595a:	0e 94 51 34 	call	0x68a2	; 0x68a2 <strstr>
    595e:	89 2b       	or	r24, r25
    5960:	71 f0       	breq	.+28     	; 0x597e <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    5962:	40 e0       	ldi	r20, 0x00	; 0
    5964:	68 ee       	ldi	r22, 0xE8	; 232
    5966:	73 e0       	ldi	r23, 0x03	; 3
    5968:	c8 01       	movw	r24, r16
    596a:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    596e:	6c ec       	ldi	r22, 0xCC	; 204
    5970:	73 e0       	ldi	r23, 0x03	; 3
    5972:	c7 01       	movw	r24, r14
    5974:	0e 94 39 34 	call	0x6872	; 0x6872 <strcmp>
    5978:	21 e0       	ldi	r18, 0x01	; 1
    597a:	89 2b       	or	r24, r25
    597c:	09 f0       	breq	.+2      	; 0x5980 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	82 2f       	mov	r24, r18
    5982:	6e 96       	adiw	r28, 0x1e	; 30
    5984:	0f b6       	in	r0, 0x3f	; 63
    5986:	f8 94       	cli
    5988:	de bf       	out	0x3e, r29	; 62
    598a:	0f be       	out	0x3f, r0	; 63
    598c:	cd bf       	out	0x3d, r28	; 61
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	1f 91       	pop	r17
    5994:	0f 91       	pop	r16
    5996:	ff 90       	pop	r15
    5998:	ef 90       	pop	r14
    599a:	df 90       	pop	r13
    599c:	cf 90       	pop	r12
    599e:	bf 90       	pop	r11
    59a0:	af 90       	pop	r10
    59a2:	08 95       	ret

000059a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    59a4:	cf 92       	push	r12
    59a6:	df 92       	push	r13
    59a8:	ef 92       	push	r14
    59aa:	ff 92       	push	r15
    59ac:	0f 93       	push	r16
    59ae:	1f 93       	push	r17
    59b0:	cf 93       	push	r28
    59b2:	df 93       	push	r29
    59b4:	ec 01       	movw	r28, r24
    59b6:	68 01       	movw	r12, r16
    59b8:	87 01       	movw	r16, r14
    59ba:	0e 94 86 29 	call	0x530c	; 0x530c <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    59be:	b6 01       	movw	r22, r12
    59c0:	ce 01       	movw	r24, r28
    59c2:	0e 96       	adiw	r24, 0x0e	; 14
    59c4:	0e 94 02 34 	call	0x6804	; 0x6804 <strcmp_P>
    59c8:	21 e0       	ldi	r18, 0x01	; 1
    59ca:	89 2b       	or	r24, r25
    59cc:	09 f0       	breq	.+2      	; 0x59d0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	82 2f       	mov	r24, r18
    59d2:	df 91       	pop	r29
    59d4:	cf 91       	pop	r28
    59d6:	1f 91       	pop	r17
    59d8:	0f 91       	pop	r16
    59da:	ff 90       	pop	r15
    59dc:	ef 90       	pop	r14
    59de:	df 90       	pop	r13
    59e0:	cf 90       	pop	r12
    59e2:	08 95       	ret

000059e4 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    59e4:	ef 92       	push	r14
    59e6:	ff 92       	push	r15
    59e8:	0f 93       	push	r16
    59ea:	1f 93       	push	r17
    59ec:	fc 01       	movw	r30, r24
    59ee:	ea 5e       	subi	r30, 0xEA	; 234
    59f0:	fe 4f       	sbci	r31, 0xFE	; 254
    59f2:	00 81       	ld	r16, Z
    59f4:	11 81       	ldd	r17, Z+1	; 0x01
    59f6:	26 2f       	mov	r18, r22
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e0       	ldi	r20, 0x00	; 0
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	64 ef       	ldi	r22, 0xF4	; 244
    5a00:	e6 2e       	mov	r14, r22
    5a02:	ff 24       	eor	r15, r15
    5a04:	f3 94       	inc	r15
    5a06:	63 e1       	ldi	r22, 0x13	; 19
    5a08:	74 e0       	ldi	r23, 0x04	; 4
    5a0a:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    5a0e:	1f 91       	pop	r17
    5a10:	0f 91       	pop	r16
    5a12:	ff 90       	pop	r15
    5a14:	ef 90       	pop	r14
    5a16:	08 95       	ret

00005a18 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    5a18:	0f 93       	push	r16
    5a1a:	1f 93       	push	r17
    5a1c:	cf 93       	push	r28
    5a1e:	df 93       	push	r29
    5a20:	ec 01       	movw	r28, r24
    5a22:	8b 01       	movw	r16, r22
    5a24:	0e 94 ed 2b 	call	0x57da	; 0x57da <_ZN13Adafruit_FONA9HTTP_termEv>
    5a28:	ce 01       	movw	r24, r28
    5a2a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN13Adafruit_FONA9HTTP_initEv>
    5a2e:	81 11       	cpse	r24, r1
    5a30:	02 c0       	rjmp	.+4      	; 0x5a36 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	38 c0       	rjmp	.+112    	; 0x5aa6 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    5a36:	21 e0       	ldi	r18, 0x01	; 1
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	40 e0       	ldi	r20, 0x00	; 0
    5a3c:	50 e0       	ldi	r21, 0x00	; 0
    5a3e:	68 ef       	ldi	r22, 0xF8	; 248
    5a40:	73 e0       	ldi	r23, 0x03	; 3
    5a42:	ce 01       	movw	r24, r28
    5a44:	0e 94 89 28 	call	0x5112	; 0x5112 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    5a48:	88 23       	and	r24, r24
    5a4a:	99 f3       	breq	.-26     	; 0x5a32 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5a4c:	fe 01       	movw	r30, r28
    5a4e:	ec 5e       	subi	r30, 0xEC	; 236
    5a50:	fe 4f       	sbci	r31, 0xFE	; 254
    5a52:	40 81       	ld	r20, Z
    5a54:	51 81       	ldd	r21, Z+1	; 0x01
    5a56:	65 ef       	ldi	r22, 0xF5	; 245
    5a58:	73 e0       	ldi	r23, 0x03	; 3
    5a5a:	ce 01       	movw	r24, r28
    5a5c:	0e 94 70 28 	call	0x50e0	; 0x50e0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5a60:	88 23       	and	r24, r24
    5a62:	39 f3       	breq	.-50     	; 0x5a32 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5a64:	a8 01       	movw	r20, r16
    5a66:	61 ef       	ldi	r22, 0xF1	; 241
    5a68:	73 e0       	ldi	r23, 0x03	; 3
    5a6a:	ce 01       	movw	r24, r28
    5a6c:	0e 94 57 28 	call	0x50ae	; 0x50ae <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    5a70:	88 23       	and	r24, r24
    5a72:	f9 f2       	breq	.-66     	; 0x5a32 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5a74:	fe 01       	movw	r30, r28
    5a76:	ed 5e       	subi	r30, 0xED	; 237
    5a78:	fe 4f       	sbci	r31, 0xFE	; 254
    5a7a:	90 81       	ld	r25, Z
    5a7c:	99 23       	and	r25, r25
    5a7e:	99 f0       	breq	.+38     	; 0x5aa6 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    5a80:	21 e0       	ldi	r18, 0x01	; 1
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	40 e0       	ldi	r20, 0x00	; 0
    5a86:	50 e0       	ldi	r21, 0x00	; 0
    5a88:	6b ee       	ldi	r22, 0xEB	; 235
    5a8a:	73 e0       	ldi	r23, 0x03	; 3
    5a8c:	ce 01       	movw	r24, r28
    5a8e:	0e 94 89 28 	call	0x5112	; 0x5112 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    5a92:	88 23       	and	r24, r24
    5a94:	71 f2       	breq	.-100    	; 0x5a32 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    5a96:	61 e0       	ldi	r22, 0x01	; 1
    5a98:	ce 01       	movw	r24, r28
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	1f 91       	pop	r17
    5aa0:	0f 91       	pop	r16
    5aa2:	0c 94 f2 2c 	jmp	0x59e4	; 0x59e4 <_ZN13Adafruit_FONA8HTTP_sslEb>
    5aa6:	df 91       	pop	r29
    5aa8:	cf 91       	pop	r28
    5aaa:	1f 91       	pop	r17
    5aac:	0f 91       	pop	r16
    5aae:	08 95       	ret

00005ab0 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    5ab0:	ef 92       	push	r14
    5ab2:	ff 92       	push	r15
    5ab4:	0f 93       	push	r16
    5ab6:	1f 93       	push	r17
    5ab8:	cf 93       	push	r28
    5aba:	df 93       	push	r29
    5abc:	ec 01       	movw	r28, r24
    5abe:	79 01       	movw	r14, r18
    5ac0:	98 01       	movw	r18, r16
    5ac2:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    5ac6:	b7 01       	movw	r22, r14
    5ac8:	ce 01       	movw	r24, r28
    5aca:	0e 96       	adiw	r24, 0x0e	; 14
    5acc:	0e 94 02 34 	call	0x6804	; 0x6804 <strcmp_P>
    5ad0:	21 e0       	ldi	r18, 0x01	; 1
    5ad2:	89 2b       	or	r24, r25
    5ad4:	09 f0       	breq	.+2      	; 0x5ad8 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    5ad6:	20 e0       	ldi	r18, 0x00	; 0
    5ad8:	82 2f       	mov	r24, r18
    5ada:	df 91       	pop	r29
    5adc:	cf 91       	pop	r28
    5ade:	1f 91       	pop	r17
    5ae0:	0f 91       	pop	r16
    5ae2:	ff 90       	pop	r15
    5ae4:	ef 90       	pop	r14
    5ae6:	08 95       	ret

00005ae8 <_ZN13Adafruit_FONA10enableGPRSEb>:
    5ae8:	8f 92       	push	r8
    5aea:	9f 92       	push	r9
    5aec:	af 92       	push	r10
    5aee:	bf 92       	push	r11
    5af0:	cf 92       	push	r12
    5af2:	df 92       	push	r13
    5af4:	ef 92       	push	r14
    5af6:	ff 92       	push	r15
    5af8:	0f 93       	push	r16
    5afa:	1f 93       	push	r17
    5afc:	cf 93       	push	r28
    5afe:	df 93       	push	r29
    5b00:	ec 01       	movw	r28, r24
    5b02:	20 e2       	ldi	r18, 0x20	; 32
    5b04:	3e e4       	ldi	r19, 0x4E	; 78
    5b06:	66 23       	and	r22, r22
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    5b0a:	0f c1       	rjmp	.+542    	; 0x5d2a <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    5b0c:	48 e9       	ldi	r20, 0x98	; 152
    5b0e:	55 e0       	ldi	r21, 0x05	; 5
    5b10:	6d e8       	ldi	r22, 0x8D	; 141
    5b12:	75 e0       	ldi	r23, 0x05	; 5
    5b14:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5b18:	7e 01       	movw	r14, r28
    5b1a:	8a ee       	ldi	r24, 0xEA	; 234
    5b1c:	e8 1a       	sub	r14, r24
    5b1e:	8e ef       	ldi	r24, 0xFE	; 254
    5b20:	f8 0a       	sbc	r15, r24
    5b22:	f7 01       	movw	r30, r14
    5b24:	40 81       	ld	r20, Z
    5b26:	51 81       	ldd	r21, Z+1	; 0x01
    5b28:	20 e1       	ldi	r18, 0x10	; 16
    5b2a:	37 e2       	ldi	r19, 0x27	; 39
    5b2c:	62 e8       	ldi	r22, 0x82	; 130
    5b2e:	75 e0       	ldi	r23, 0x05	; 5
    5b30:	ce 01       	movw	r24, r28
    5b32:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5b36:	88 23       	and	r24, r24
    5b38:	09 f4       	brne	.+2      	; 0x5b3c <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    5b3a:	24 c1       	rjmp	.+584    	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5b3c:	f7 01       	movw	r30, r14
    5b3e:	40 81       	ld	r20, Z
    5b40:	51 81       	ldd	r21, Z+1	; 0x01
    5b42:	20 e1       	ldi	r18, 0x10	; 16
    5b44:	37 e2       	ldi	r19, 0x27	; 39
    5b46:	64 e6       	ldi	r22, 0x64	; 100
    5b48:	75 e0       	ldi	r23, 0x05	; 5
    5b4a:	ce 01       	movw	r24, r28
    5b4c:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5b50:	88 23       	and	r24, r24
    5b52:	09 f4       	brne	.+2      	; 0x5b56 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    5b54:	17 c1       	rjmp	.+558    	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5b56:	4e 01       	movw	r8, r28
    5b58:	f3 ef       	ldi	r31, 0xF3	; 243
    5b5a:	8f 1a       	sub	r8, r31
    5b5c:	fe ef       	ldi	r31, 0xFE	; 254
    5b5e:	9f 0a       	sbc	r9, r31
    5b60:	f4 01       	movw	r30, r8
    5b62:	40 81       	ld	r20, Z
    5b64:	51 81       	ldd	r21, Z+1	; 0x01
    5b66:	41 15       	cp	r20, r1
    5b68:	51 05       	cpc	r21, r1
    5b6a:	a9 f4       	brne	.+42     	; 0x5b96 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    5b6c:	f7 01       	movw	r30, r14
    5b6e:	40 81       	ld	r20, Z
    5b70:	51 81       	ldd	r21, Z+1	; 0x01
    5b72:	20 e3       	ldi	r18, 0x30	; 48
    5b74:	35 e7       	ldi	r19, 0x75	; 117
    5b76:	6f ef       	ldi	r22, 0xFF	; 255
    5b78:	74 e0       	ldi	r23, 0x04	; 4
    5b7a:	ce 01       	movw	r24, r28
    5b7c:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5b80:	88 23       	and	r24, r24
    5b82:	09 f4       	brne	.+2      	; 0x5b86 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    5b84:	ff c0       	rjmp	.+510    	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5b86:	f7 01       	movw	r30, r14
    5b88:	40 81       	ld	r20, Z
    5b8a:	51 81       	ldd	r21, Z+1	; 0x01
    5b8c:	20 e1       	ldi	r18, 0x10	; 16
    5b8e:	37 e2       	ldi	r19, 0x27	; 39
    5b90:	66 ef       	ldi	r22, 0xF6	; 246
    5b92:	74 e0       	ldi	r23, 0x04	; 4
    5b94:	e8 c0       	rjmp	.+464    	; 0x5d66 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    5b96:	f7 01       	movw	r30, r14
    5b98:	20 81       	ld	r18, Z
    5b9a:	31 81       	ldd	r19, Z+1	; 0x01
    5b9c:	00 e1       	ldi	r16, 0x10	; 16
    5b9e:	17 e2       	ldi	r17, 0x27	; 39
    5ba0:	60 e5       	ldi	r22, 0x50	; 80
    5ba2:	75 e0       	ldi	r23, 0x05	; 5
    5ba4:	ce 01       	movw	r24, r28
    5ba6:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5baa:	88 23       	and	r24, r24
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    5bae:	ea c0       	rjmp	.+468    	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5bb0:	ce 01       	movw	r24, r28
    5bb2:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <_ZN13Adafruit_FONA10flushInputEv>
    5bb6:	8e 01       	movw	r16, r28
    5bb8:	08 5e       	subi	r16, 0xE8	; 232
    5bba:	1e 4f       	sbci	r17, 0xFE	; 254
    5bbc:	66 e4       	ldi	r22, 0x46	; 70
    5bbe:	75 e0       	ldi	r23, 0x05	; 5
    5bc0:	f8 01       	movw	r30, r16
    5bc2:	80 81       	ld	r24, Z
    5bc4:	91 81       	ldd	r25, Z+1	; 0x01
    5bc6:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5bca:	f4 01       	movw	r30, r8
    5bcc:	60 81       	ld	r22, Z
    5bce:	71 81       	ldd	r23, Z+1	; 0x01
    5bd0:	f8 01       	movw	r30, r16
    5bd2:	80 81       	ld	r24, Z
    5bd4:	91 81       	ldd	r25, Z+1	; 0x01
    5bd6:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5bda:	5e 01       	movw	r10, r28
    5bdc:	f1 ef       	ldi	r31, 0xF1	; 241
    5bde:	af 1a       	sub	r10, r31
    5be0:	fe ef       	ldi	r31, 0xFE	; 254
    5be2:	bf 0a       	sbc	r11, r31
    5be4:	f5 01       	movw	r30, r10
    5be6:	80 81       	ld	r24, Z
    5be8:	91 81       	ldd	r25, Z+1	; 0x01
    5bea:	89 2b       	or	r24, r25
    5bec:	79 f0       	breq	.+30     	; 0x5c0c <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    5bee:	6a e1       	ldi	r22, 0x1A	; 26
    5bf0:	74 e0       	ldi	r23, 0x04	; 4
    5bf2:	f8 01       	movw	r30, r16
    5bf4:	80 81       	ld	r24, Z
    5bf6:	91 81       	ldd	r25, Z+1	; 0x01
    5bf8:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    5bfc:	f5 01       	movw	r30, r10
    5bfe:	60 81       	ld	r22, Z
    5c00:	71 81       	ldd	r23, Z+1	; 0x01
    5c02:	f8 01       	movw	r30, r16
    5c04:	80 81       	ld	r24, Z
    5c06:	91 81       	ldd	r25, Z+1	; 0x01
    5c08:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5c0c:	6e 01       	movw	r12, r28
    5c0e:	ff ee       	ldi	r31, 0xEF	; 239
    5c10:	cf 1a       	sub	r12, r31
    5c12:	fe ef       	ldi	r31, 0xFE	; 254
    5c14:	df 0a       	sbc	r13, r31
    5c16:	f6 01       	movw	r30, r12
    5c18:	80 81       	ld	r24, Z
    5c1a:	91 81       	ldd	r25, Z+1	; 0x01
    5c1c:	89 2b       	or	r24, r25
    5c1e:	79 f0       	breq	.+30     	; 0x5c3e <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    5c20:	6a e1       	ldi	r22, 0x1A	; 26
    5c22:	74 e0       	ldi	r23, 0x04	; 4
    5c24:	f8 01       	movw	r30, r16
    5c26:	80 81       	ld	r24, Z
    5c28:	91 81       	ldd	r25, Z+1	; 0x01
    5c2a:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    5c2e:	f6 01       	movw	r30, r12
    5c30:	60 81       	ld	r22, Z
    5c32:	71 81       	ldd	r23, Z+1	; 0x01
    5c34:	f8 01       	movw	r30, r16
    5c36:	80 81       	ld	r24, Z
    5c38:	91 81       	ldd	r25, Z+1	; 0x01
    5c3a:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5c3e:	6c e1       	ldi	r22, 0x1C	; 28
    5c40:	74 e0       	ldi	r23, 0x04	; 4
    5c42:	f8 01       	movw	r30, r16
    5c44:	80 81       	ld	r24, Z
    5c46:	91 81       	ldd	r25, Z+1	; 0x01
    5c48:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    5c4c:	6f e3       	ldi	r22, 0x3F	; 63
    5c4e:	75 e0       	ldi	r23, 0x05	; 5
    5c50:	83 e6       	ldi	r24, 0x63	; 99
    5c52:	96 e0       	ldi	r25, 0x06	; 6
    5c54:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5c58:	65 e3       	ldi	r22, 0x35	; 53
    5c5a:	75 e0       	ldi	r23, 0x05	; 5
    5c5c:	83 e6       	ldi	r24, 0x63	; 99
    5c5e:	96 e0       	ldi	r25, 0x06	; 6
    5c60:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5c64:	f4 01       	movw	r30, r8
    5c66:	60 81       	ld	r22, Z
    5c68:	71 81       	ldd	r23, Z+1	; 0x01
    5c6a:	83 e6       	ldi	r24, 0x63	; 99
    5c6c:	96 e0       	ldi	r25, 0x06	; 6
    5c6e:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5c72:	f5 01       	movw	r30, r10
    5c74:	80 81       	ld	r24, Z
    5c76:	91 81       	ldd	r25, Z+1	; 0x01
    5c78:	89 2b       	or	r24, r25
    5c7a:	69 f0       	breq	.+26     	; 0x5c96 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    5c7c:	6a e1       	ldi	r22, 0x1A	; 26
    5c7e:	74 e0       	ldi	r23, 0x04	; 4
    5c80:	83 e6       	ldi	r24, 0x63	; 99
    5c82:	96 e0       	ldi	r25, 0x06	; 6
    5c84:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    5c88:	f5 01       	movw	r30, r10
    5c8a:	60 81       	ld	r22, Z
    5c8c:	71 81       	ldd	r23, Z+1	; 0x01
    5c8e:	83 e6       	ldi	r24, 0x63	; 99
    5c90:	96 e0       	ldi	r25, 0x06	; 6
    5c92:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5c96:	f6 01       	movw	r30, r12
    5c98:	80 81       	ld	r24, Z
    5c9a:	91 81       	ldd	r25, Z+1	; 0x01
    5c9c:	89 2b       	or	r24, r25
    5c9e:	69 f0       	breq	.+26     	; 0x5cba <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    5ca0:	6a e1       	ldi	r22, 0x1A	; 26
    5ca2:	74 e0       	ldi	r23, 0x04	; 4
    5ca4:	83 e6       	ldi	r24, 0x63	; 99
    5ca6:	96 e0       	ldi	r25, 0x06	; 6
    5ca8:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <_ZN5Print5printEPKc>
    5cac:	f6 01       	movw	r30, r12
    5cae:	60 81       	ld	r22, Z
    5cb0:	71 81       	ldd	r23, Z+1	; 0x01
    5cb2:	83 e6       	ldi	r24, 0x63	; 99
    5cb4:	96 e0       	ldi	r25, 0x06	; 6
    5cb6:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5cba:	6c e1       	ldi	r22, 0x1C	; 28
    5cbc:	74 e0       	ldi	r23, 0x04	; 4
    5cbe:	83 e6       	ldi	r24, 0x63	; 99
    5cc0:	96 e0       	ldi	r25, 0x06	; 6
    5cc2:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN5Print7printlnEPKc>
    5cc6:	f7 01       	movw	r30, r14
    5cc8:	60 81       	ld	r22, Z
    5cca:	71 81       	ldd	r23, Z+1	; 0x01
    5ccc:	40 e1       	ldi	r20, 0x10	; 16
    5cce:	57 e2       	ldi	r21, 0x27	; 39
    5cd0:	ce 01       	movw	r24, r28
    5cd2:	0e 94 15 28 	call	0x502a	; 0x502a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5cd6:	88 23       	and	r24, r24
    5cd8:	09 f4       	brne	.+2      	; 0x5cdc <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    5cda:	54 c0       	rjmp	.+168    	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5cdc:	f5 01       	movw	r30, r10
    5cde:	40 81       	ld	r20, Z
    5ce0:	51 81       	ldd	r21, Z+1	; 0x01
    5ce2:	41 15       	cp	r20, r1
    5ce4:	51 05       	cpc	r21, r1
    5ce6:	39 f4       	brne	.+14     	; 0x5cf6 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    5ce8:	f6 01       	movw	r30, r12
    5cea:	40 81       	ld	r20, Z
    5cec:	51 81       	ldd	r21, Z+1	; 0x01
    5cee:	41 15       	cp	r20, r1
    5cf0:	51 05       	cpc	r21, r1
    5cf2:	71 f4       	brne	.+28     	; 0x5d10 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    5cf4:	3b cf       	rjmp	.-394    	; 0x5b6c <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5cf6:	f7 01       	movw	r30, r14
    5cf8:	20 81       	ld	r18, Z
    5cfa:	31 81       	ldd	r19, Z+1	; 0x01
    5cfc:	00 e1       	ldi	r16, 0x10	; 16
    5cfe:	17 e2       	ldi	r17, 0x27	; 39
    5d00:	60 e2       	ldi	r22, 0x20	; 32
    5d02:	75 e0       	ldi	r23, 0x05	; 5
    5d04:	ce 01       	movw	r24, r28
    5d06:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5d0a:	81 11       	cpse	r24, r1
    5d0c:	ed cf       	rjmp	.-38     	; 0x5ce8 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    5d0e:	3a c0       	rjmp	.+116    	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5d10:	f7 01       	movw	r30, r14
    5d12:	20 81       	ld	r18, Z
    5d14:	31 81       	ldd	r19, Z+1	; 0x01
    5d16:	00 e1       	ldi	r16, 0x10	; 16
    5d18:	17 e2       	ldi	r17, 0x27	; 39
    5d1a:	6c e0       	ldi	r22, 0x0C	; 12
    5d1c:	75 e0       	ldi	r23, 0x05	; 5
    5d1e:	ce 01       	movw	r24, r28
    5d20:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    5d24:	81 11       	cpse	r24, r1
    5d26:	22 cf       	rjmp	.-444    	; 0x5b6c <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    5d28:	2d c0       	rjmp	.+90     	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5d2a:	4e ee       	ldi	r20, 0xEE	; 238
    5d2c:	54 e0       	ldi	r21, 0x04	; 4
    5d2e:	63 ee       	ldi	r22, 0xE3	; 227
    5d30:	74 e0       	ldi	r23, 0x04	; 4
    5d32:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5d36:	88 23       	and	r24, r24
    5d38:	29 f1       	breq	.+74     	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5d3a:	8e 01       	movw	r16, r28
    5d3c:	0a 5e       	subi	r16, 0xEA	; 234
    5d3e:	1e 4f       	sbci	r17, 0xFE	; 254
    5d40:	f8 01       	movw	r30, r16
    5d42:	40 81       	ld	r20, Z
    5d44:	51 81       	ldd	r21, Z+1	; 0x01
    5d46:	20 e1       	ldi	r18, 0x10	; 16
    5d48:	37 e2       	ldi	r19, 0x27	; 39
    5d4a:	66 ed       	ldi	r22, 0xD6	; 214
    5d4c:	74 e0       	ldi	r23, 0x04	; 4
    5d4e:	ce 01       	movw	r24, r28
    5d50:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5d54:	88 23       	and	r24, r24
    5d56:	b1 f0       	breq	.+44     	; 0x5d84 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    5d58:	f8 01       	movw	r30, r16
    5d5a:	40 81       	ld	r20, Z
    5d5c:	51 81       	ldd	r21, Z+1	; 0x01
    5d5e:	20 e1       	ldi	r18, 0x10	; 16
    5d60:	37 e2       	ldi	r19, 0x27	; 39
    5d62:	6b ec       	ldi	r22, 0xCB	; 203
    5d64:	74 e0       	ldi	r23, 0x04	; 4
    5d66:	ce 01       	movw	r24, r28
    5d68:	df 91       	pop	r29
    5d6a:	cf 91       	pop	r28
    5d6c:	1f 91       	pop	r17
    5d6e:	0f 91       	pop	r16
    5d70:	ff 90       	pop	r15
    5d72:	ef 90       	pop	r14
    5d74:	df 90       	pop	r13
    5d76:	cf 90       	pop	r12
    5d78:	bf 90       	pop	r11
    5d7a:	af 90       	pop	r10
    5d7c:	9f 90       	pop	r9
    5d7e:	8f 90       	pop	r8
    5d80:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	df 91       	pop	r29
    5d88:	cf 91       	pop	r28
    5d8a:	1f 91       	pop	r17
    5d8c:	0f 91       	pop	r16
    5d8e:	ff 90       	pop	r15
    5d90:	ef 90       	pop	r14
    5d92:	df 90       	pop	r13
    5d94:	cf 90       	pop	r12
    5d96:	bf 90       	pop	r11
    5d98:	af 90       	pop	r10
    5d9a:	9f 90       	pop	r9
    5d9c:	8f 90       	pop	r8
    5d9e:	08 95       	ret

00005da0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    5da0:	af 92       	push	r10
    5da2:	bf 92       	push	r11
    5da4:	cf 92       	push	r12
    5da6:	df 92       	push	r13
    5da8:	ef 92       	push	r14
    5daa:	ff 92       	push	r15
    5dac:	0f 93       	push	r16
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	5b 01       	movw	r10, r22
    5db4:	6a 01       	movw	r12, r20
    5db6:	e2 2e       	mov	r14, r18
    5db8:	0e 96       	adiw	r24, 0x0e	; 14
    5dba:	0e 94 14 34 	call	0x6828	; 0x6828 <strstr_P>
    5dbe:	ec 01       	movw	r28, r24
    5dc0:	89 2b       	or	r24, r25
    5dc2:	c1 f0       	breq	.+48     	; 0x5df4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5dc4:	c5 01       	movw	r24, r10
    5dc6:	0e 94 0b 34 	call	0x6816	; 0x6816 <__strlen_P>
    5dca:	8c 0f       	add	r24, r28
    5dcc:	9d 1f       	adc	r25, r29
    5dce:	c0 e0       	ldi	r28, 0x00	; 0
    5dd0:	f1 2c       	mov	r15, r1
    5dd2:	c0 17       	cp	r28, r16
    5dd4:	41 f0       	breq	.+16     	; 0x5de6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    5dd6:	b7 01       	movw	r22, r14
    5dd8:	0e 94 2e 34 	call	0x685c	; 0x685c <strchr>
    5ddc:	00 97       	sbiw	r24, 0x00	; 0
    5dde:	51 f0       	breq	.+20     	; 0x5df4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    5de0:	01 96       	adiw	r24, 0x01	; 1
    5de2:	cf 5f       	subi	r28, 0xFF	; 255
    5de4:	f6 cf       	rjmp	.-20     	; 0x5dd2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    5de6:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <atoi>
    5dea:	f6 01       	movw	r30, r12
    5dec:	91 83       	std	Z+1, r25	; 0x01
    5dee:	80 83       	st	Z, r24
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    5df4:	80 e0       	ldi	r24, 0x00	; 0
    5df6:	df 91       	pop	r29
    5df8:	cf 91       	pop	r28
    5dfa:	0f 91       	pop	r16
    5dfc:	ff 90       	pop	r15
    5dfe:	ef 90       	pop	r14
    5e00:	df 90       	pop	r13
    5e02:	cf 90       	pop	r12
    5e04:	bf 90       	pop	r11
    5e06:	af 90       	pop	r10
    5e08:	08 95       	ret

00005e0a <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    5e0a:	ef 92       	push	r14
    5e0c:	ff 92       	push	r15
    5e0e:	0f 93       	push	r16
    5e10:	cf 93       	push	r28
    5e12:	df 93       	push	r29
    5e14:	ec 01       	movw	r28, r24
    5e16:	7b 01       	movw	r14, r22
    5e18:	44 ef       	ldi	r20, 0xF4	; 244
    5e1a:	51 e0       	ldi	r21, 0x01	; 1
    5e1c:	6a e2       	ldi	r22, 0x2A	; 42
    5e1e:	74 e0       	ldi	r23, 0x04	; 4
    5e20:	0e 94 4d 29 	call	0x529a	; 0x529a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5e24:	00 e0       	ldi	r16, 0x00	; 0
    5e26:	2c e2       	ldi	r18, 0x2C	; 44
    5e28:	a7 01       	movw	r20, r14
    5e2a:	6f e1       	ldi	r22, 0x1F	; 31
    5e2c:	74 e0       	ldi	r23, 0x04	; 4
    5e2e:	ce 01       	movw	r24, r28
    5e30:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5e34:	df 91       	pop	r29
    5e36:	cf 91       	pop	r28
    5e38:	0f 91       	pop	r16
    5e3a:	ff 90       	pop	r15
    5e3c:	ef 90       	pop	r14
    5e3e:	08 95       	ret

00005e40 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    5e40:	4f 92       	push	r4
    5e42:	5f 92       	push	r5
    5e44:	6f 92       	push	r6
    5e46:	7f 92       	push	r7
    5e48:	af 92       	push	r10
    5e4a:	bf 92       	push	r11
    5e4c:	cf 92       	push	r12
    5e4e:	df 92       	push	r13
    5e50:	ef 92       	push	r14
    5e52:	ff 92       	push	r15
    5e54:	0f 93       	push	r16
    5e56:	1f 93       	push	r17
    5e58:	cf 93       	push	r28
    5e5a:	df 93       	push	r29
    5e5c:	ec 01       	movw	r28, r24
    5e5e:	5a 01       	movw	r10, r20
    5e60:	69 01       	movw	r12, r18
    5e62:	27 01       	movw	r4, r14
    5e64:	38 01       	movw	r6, r16
    5e66:	fc 01       	movw	r30, r24
    5e68:	ea 5e       	subi	r30, 0xEA	; 234
    5e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    5e6c:	00 81       	ld	r16, Z
    5e6e:	11 81       	ldd	r17, Z+1	; 0x01
    5e70:	26 2f       	mov	r18, r22
    5e72:	30 e0       	ldi	r19, 0x00	; 0
    5e74:	40 e0       	ldi	r20, 0x00	; 0
    5e76:	50 e0       	ldi	r21, 0x00	; 0
    5e78:	84 ef       	ldi	r24, 0xF4	; 244
    5e7a:	e8 2e       	mov	r14, r24
    5e7c:	ff 24       	eor	r15, r15
    5e7e:	f3 94       	inc	r15
    5e80:	60 e5       	ldi	r22, 0x50	; 80
    5e82:	74 e0       	ldi	r23, 0x04	; 4
    5e84:	ce 01       	movw	r24, r28
    5e86:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    5e8a:	81 11       	cpse	r24, r1
    5e8c:	02 c0       	rjmp	.+4      	; 0x5e92 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    5e8e:	80 e0       	ldi	r24, 0x00	; 0
    5e90:	17 c0       	rjmp	.+46     	; 0x5ec0 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    5e92:	40 e0       	ldi	r20, 0x00	; 0
    5e94:	b2 01       	movw	r22, r4
    5e96:	ce 01       	movw	r24, r28
    5e98:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    5e9c:	01 e0       	ldi	r16, 0x01	; 1
    5e9e:	2c e2       	ldi	r18, 0x2C	; 44
    5ea0:	a5 01       	movw	r20, r10
    5ea2:	63 e4       	ldi	r22, 0x43	; 67
    5ea4:	74 e0       	ldi	r23, 0x04	; 4
    5ea6:	ce 01       	movw	r24, r28
    5ea8:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5eac:	88 23       	and	r24, r24
    5eae:	79 f3       	breq	.-34     	; 0x5e8e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    5eb0:	02 e0       	ldi	r16, 0x02	; 2
    5eb2:	2c e2       	ldi	r18, 0x2C	; 44
    5eb4:	a6 01       	movw	r20, r12
    5eb6:	66 e3       	ldi	r22, 0x36	; 54
    5eb8:	74 e0       	ldi	r23, 0x04	; 4
    5eba:	ce 01       	movw	r24, r28
    5ebc:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	1f 91       	pop	r17
    5ec6:	0f 91       	pop	r16
    5ec8:	ff 90       	pop	r15
    5eca:	ef 90       	pop	r14
    5ecc:	df 90       	pop	r13
    5ece:	cf 90       	pop	r12
    5ed0:	bf 90       	pop	r11
    5ed2:	af 90       	pop	r10
    5ed4:	7f 90       	pop	r7
    5ed6:	6f 90       	pop	r6
    5ed8:	5f 90       	pop	r5
    5eda:	4f 90       	pop	r4
    5edc:	08 95       	ret

00005ede <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    5ede:	4f 92       	push	r4
    5ee0:	5f 92       	push	r5
    5ee2:	6f 92       	push	r6
    5ee4:	7f 92       	push	r7
    5ee6:	8f 92       	push	r8
    5ee8:	9f 92       	push	r9
    5eea:	af 92       	push	r10
    5eec:	bf 92       	push	r11
    5eee:	cf 92       	push	r12
    5ef0:	df 92       	push	r13
    5ef2:	ef 92       	push	r14
    5ef4:	ff 92       	push	r15
    5ef6:	0f 93       	push	r16
    5ef8:	1f 93       	push	r17
    5efa:	cf 93       	push	r28
    5efc:	df 93       	push	r29
    5efe:	ec 01       	movw	r28, r24
    5f00:	2a 01       	movw	r4, r20
    5f02:	39 01       	movw	r6, r18
    5f04:	48 01       	movw	r8, r16
    5f06:	57 01       	movw	r10, r14
    5f08:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    5f0c:	88 23       	and	r24, r24
    5f0e:	09 f4       	brne	.+2      	; 0x5f12 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    5f10:	71 c0       	rjmp	.+226    	; 0x5ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5f12:	a2 01       	movw	r20, r4
    5f14:	6b e0       	ldi	r22, 0x0B	; 11
    5f16:	74 e0       	ldi	r23, 0x04	; 4
    5f18:	ce 01       	movw	r24, r28
    5f1a:	0e 94 70 28 	call	0x50e0	; 0x50e0 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5f1e:	88 23       	and	r24, r24
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    5f22:	68 c0       	rjmp	.+208    	; 0x5ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5f24:	a8 01       	movw	r20, r16
    5f26:	60 e0       	ldi	r22, 0x00	; 0
    5f28:	70 e0       	ldi	r23, 0x00	; 0
    5f2a:	00 e1       	ldi	r16, 0x10	; 16
    5f2c:	17 e2       	ldi	r17, 0x27	; 39
    5f2e:	20 e0       	ldi	r18, 0x00	; 0
    5f30:	30 e0       	ldi	r19, 0x00	; 0
    5f32:	ce 01       	movw	r24, r28
    5f34:	0e 94 aa 28 	call	0x5154	; 0x5154 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    5f38:	88 23       	and	r24, r24
    5f3a:	09 f4       	brne	.+2      	; 0x5f3e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    5f3c:	5b c0       	rjmp	.+182    	; 0x5ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5f3e:	fe 01       	movw	r30, r28
    5f40:	e8 5e       	subi	r30, 0xE8	; 232
    5f42:	fe 4f       	sbci	r31, 0xFE	; 254
    5f44:	80 81       	ld	r24, Z
    5f46:	91 81       	ldd	r25, Z+1	; 0x01
    5f48:	dc 01       	movw	r26, r24
    5f4a:	ed 91       	ld	r30, X+
    5f4c:	fc 91       	ld	r31, X
    5f4e:	02 80       	ldd	r0, Z+2	; 0x02
    5f50:	f3 81       	ldd	r31, Z+3	; 0x03
    5f52:	e0 2d       	mov	r30, r0
    5f54:	a4 01       	movw	r20, r8
    5f56:	b3 01       	movw	r22, r6
    5f58:	09 95       	icall
    5f5a:	fe 01       	movw	r30, r28
    5f5c:	ea 5e       	subi	r30, 0xEA	; 234
    5f5e:	fe 4f       	sbci	r31, 0xFE	; 254
    5f60:	60 81       	ld	r22, Z
    5f62:	71 81       	ldd	r23, Z+1	; 0x01
    5f64:	40 e1       	ldi	r20, 0x10	; 16
    5f66:	57 e2       	ldi	r21, 0x27	; 39
    5f68:	ce 01       	movw	r24, r28
    5f6a:	0e 94 15 28 	call	0x502a	; 0x502a <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5f6e:	88 23       	and	r24, r24
    5f70:	09 f4       	brne	.+2      	; 0x5f74 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    5f72:	40 c0       	rjmp	.+128    	; 0x5ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5f74:	10 e1       	ldi	r17, 0x10	; 16
    5f76:	e1 2e       	mov	r14, r17
    5f78:	17 e2       	ldi	r17, 0x27	; 39
    5f7a:	f1 2e       	mov	r15, r17
    5f7c:	00 e0       	ldi	r16, 0x00	; 0
    5f7e:	10 e0       	ldi	r17, 0x00	; 0
    5f80:	96 01       	movw	r18, r12
    5f82:	a5 01       	movw	r20, r10
    5f84:	61 e0       	ldi	r22, 0x01	; 1
    5f86:	ce 01       	movw	r24, r28
    5f88:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    5f8c:	88 23       	and	r24, r24
    5f8e:	91 f1       	breq	.+100    	; 0x5ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5f90:	62 e0       	ldi	r22, 0x02	; 2
    5f92:	74 e0       	ldi	r23, 0x04	; 4
    5f94:	83 e6       	ldi	r24, 0x63	; 99
    5f96:	96 e0       	ldi	r25, 0x06	; 6
    5f98:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5f9c:	f5 01       	movw	r30, r10
    5f9e:	60 81       	ld	r22, Z
    5fa0:	71 81       	ldd	r23, Z+1	; 0x01
    5fa2:	4a e0       	ldi	r20, 0x0A	; 10
    5fa4:	50 e0       	ldi	r21, 0x00	; 0
    5fa6:	83 e6       	ldi	r24, 0x63	; 99
    5fa8:	96 e0       	ldi	r25, 0x06	; 6
    5faa:	0e 94 8b 23 	call	0x4716	; 0x4716 <_ZN5Print7printlnEji>
    5fae:	6c ef       	ldi	r22, 0xFC	; 252
    5fb0:	73 e0       	ldi	r23, 0x03	; 3
    5fb2:	83 e6       	ldi	r24, 0x63	; 99
    5fb4:	96 e0       	ldi	r25, 0x06	; 6
    5fb6:	0e 94 af 22 	call	0x455e	; 0x455e <_ZN5Print5printEPK19__FlashStringHelper>
    5fba:	d6 01       	movw	r26, r12
    5fbc:	6d 91       	ld	r22, X+
    5fbe:	7c 91       	ld	r23, X
    5fc0:	4a e0       	ldi	r20, 0x0A	; 10
    5fc2:	50 e0       	ldi	r21, 0x00	; 0
    5fc4:	83 e6       	ldi	r24, 0x63	; 99
    5fc6:	96 e0       	ldi	r25, 0x06	; 6
    5fc8:	0e 94 8b 23 	call	0x4716	; 0x4716 <_ZN5Print7printlnEji>
    5fcc:	b6 01       	movw	r22, r12
    5fce:	ce 01       	movw	r24, r28
    5fd0:	df 91       	pop	r29
    5fd2:	cf 91       	pop	r28
    5fd4:	1f 91       	pop	r17
    5fd6:	0f 91       	pop	r16
    5fd8:	ff 90       	pop	r15
    5fda:	ef 90       	pop	r14
    5fdc:	df 90       	pop	r13
    5fde:	cf 90       	pop	r12
    5fe0:	bf 90       	pop	r11
    5fe2:	af 90       	pop	r10
    5fe4:	9f 90       	pop	r9
    5fe6:	8f 90       	pop	r8
    5fe8:	7f 90       	pop	r7
    5fea:	6f 90       	pop	r6
    5fec:	5f 90       	pop	r5
    5fee:	4f 90       	pop	r4
    5ff0:	0c 94 05 2f 	jmp	0x5e0a	; 0x5e0a <_ZN13Adafruit_FONA12HTTP_readallEPj>
    5ff4:	80 e0       	ldi	r24, 0x00	; 0
    5ff6:	df 91       	pop	r29
    5ff8:	cf 91       	pop	r28
    5ffa:	1f 91       	pop	r17
    5ffc:	0f 91       	pop	r16
    5ffe:	ff 90       	pop	r15
    6000:	ef 90       	pop	r14
    6002:	df 90       	pop	r13
    6004:	cf 90       	pop	r12
    6006:	bf 90       	pop	r11
    6008:	af 90       	pop	r10
    600a:	9f 90       	pop	r9
    600c:	8f 90       	pop	r8
    600e:	7f 90       	pop	r7
    6010:	6f 90       	pop	r6
    6012:	5f 90       	pop	r5
    6014:	4f 90       	pop	r4
    6016:	08 95       	ret

00006018 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    6018:	af 92       	push	r10
    601a:	bf 92       	push	r11
    601c:	cf 92       	push	r12
    601e:	df 92       	push	r13
    6020:	ef 92       	push	r14
    6022:	0f 93       	push	r16
    6024:	1f 93       	push	r17
    6026:	cf 93       	push	r28
    6028:	df 93       	push	r29
    602a:	ec 01       	movw	r28, r24
    602c:	6a 01       	movw	r12, r20
    602e:	59 01       	movw	r10, r18
    6030:	10 2f       	mov	r17, r16
    6032:	0e 2d       	mov	r16, r14
    6034:	44 ef       	ldi	r20, 0xF4	; 244
    6036:	51 e0       	ldi	r21, 0x01	; 1
    6038:	0e 94 4d 29 	call	0x529a	; 0x529a <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    603c:	21 2f       	mov	r18, r17
    603e:	a5 01       	movw	r20, r10
    6040:	b6 01       	movw	r22, r12
    6042:	ce 01       	movw	r24, r28
    6044:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    6048:	18 2f       	mov	r17, r24
    604a:	88 23       	and	r24, r24
    604c:	31 f0       	breq	.+12     	; 0x605a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    604e:	40 e0       	ldi	r20, 0x00	; 0
    6050:	64 ef       	ldi	r22, 0xF4	; 244
    6052:	71 e0       	ldi	r23, 0x01	; 1
    6054:	ce 01       	movw	r24, r28
    6056:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN13Adafruit_FONA8readlineEjb>
    605a:	81 2f       	mov	r24, r17
    605c:	df 91       	pop	r29
    605e:	cf 91       	pop	r28
    6060:	1f 91       	pop	r17
    6062:	0f 91       	pop	r16
    6064:	ef 90       	pop	r14
    6066:	df 90       	pop	r13
    6068:	cf 90       	pop	r12
    606a:	bf 90       	pop	r11
    606c:	af 90       	pop	r10
    606e:	08 95       	ret

00006070 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    6070:	ef 92       	push	r14
    6072:	0f 93       	push	r16
    6074:	9b 01       	movw	r18, r22
    6076:	ee 24       	eor	r14, r14
    6078:	e3 94       	inc	r14
    607a:	0c e2       	ldi	r16, 0x2C	; 44
    607c:	46 ed       	ldi	r20, 0xD6	; 214
    607e:	55 e0       	ldi	r21, 0x05	; 5
    6080:	6f ec       	ldi	r22, 0xCF	; 207
    6082:	75 e0       	ldi	r23, 0x05	; 5
    6084:	0e 94 0c 30 	call	0x6018	; 0x6018 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    6088:	0f 91       	pop	r16
    608a:	ef 90       	pop	r14
    608c:	08 95       	ret

0000608e <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    608e:	ef 92       	push	r14
    6090:	0f 93       	push	r16
    6092:	cf 93       	push	r28
    6094:	df 93       	push	r29
    6096:	00 d0       	rcall	.+0      	; 0x6098 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    6098:	cd b7       	in	r28, 0x3d	; 61
    609a:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    609c:	ee 24       	eor	r14, r14
    609e:	e3 94       	inc	r14
    60a0:	0c e2       	ldi	r16, 0x2C	; 44
    60a2:	9e 01       	movw	r18, r28
    60a4:	2f 5f       	subi	r18, 0xFF	; 255
    60a6:	3f 4f       	sbci	r19, 0xFF	; 255
    60a8:	47 ec       	ldi	r20, 0xC7	; 199
    60aa:	55 e0       	ldi	r21, 0x05	; 5
    60ac:	6e eb       	ldi	r22, 0xBE	; 190
    60ae:	75 e0       	ldi	r23, 0x05	; 5
    60b0:	0e 94 0c 30 	call	0x6018	; 0x6018 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    60b4:	88 23       	and	r24, r24
    60b6:	11 f0       	breq	.+4      	; 0x60bc <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    60b8:	89 81       	ldd	r24, Y+1	; 0x01
    60ba:	01 c0       	rjmp	.+2      	; 0x60be <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    60bc:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    60be:	0f 90       	pop	r0
    60c0:	0f 90       	pop	r0
    60c2:	df 91       	pop	r29
    60c4:	cf 91       	pop	r28
    60c6:	0f 91       	pop	r16
    60c8:	ef 90       	pop	r14
    60ca:	08 95       	ret

000060cc <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    60cc:	ef 92       	push	r14
    60ce:	0f 93       	push	r16
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	00 d0       	rcall	.+0      	; 0x60d6 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    60d6:	cd b7       	in	r28, 0x3d	; 61
    60d8:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    60da:	e1 2c       	mov	r14, r1
    60dc:	0c e2       	ldi	r16, 0x2C	; 44
    60de:	9e 01       	movw	r18, r28
    60e0:	2f 5f       	subi	r18, 0xFF	; 255
    60e2:	3f 4f       	sbci	r19, 0xFF	; 255
    60e4:	47 eb       	ldi	r20, 0xB7	; 183
    60e6:	55 e0       	ldi	r21, 0x05	; 5
    60e8:	60 eb       	ldi	r22, 0xB0	; 176
    60ea:	75 e0       	ldi	r23, 0x05	; 5
    60ec:	0e 94 0c 30 	call	0x6018	; 0x6018 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    60f0:	88 23       	and	r24, r24
    60f2:	11 f0       	breq	.+4      	; 0x60f8 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    60f4:	89 81       	ldd	r24, Y+1	; 0x01
    60f6:	01 c0       	rjmp	.+2      	; 0x60fa <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    60f8:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    60fa:	0f 90       	pop	r0
    60fc:	0f 90       	pop	r0
    60fe:	df 91       	pop	r29
    6100:	cf 91       	pop	r28
    6102:	0f 91       	pop	r16
    6104:	ef 90       	pop	r14
    6106:	08 95       	ret

00006108 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    6108:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    610c:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    6110:	28 17       	cp	r18, r24
    6112:	39 07       	cpc	r19, r25
    6114:	b9 f4       	brne	.+46     	; 0x6144 <_ZN14SoftwareSerial4readEv+0x3c>
    6116:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    611a:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    611e:	98 17       	cp	r25, r24
    6120:	89 f0       	breq	.+34     	; 0x6144 <_ZN14SoftwareSerial4readEv+0x3c>
    6122:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    6126:	f0 e0       	ldi	r31, 0x00	; 0
    6128:	e5 5f       	subi	r30, 0xF5	; 245
    612a:	f8 4f       	sbci	r31, 0xF8	; 248
    612c:	80 81       	ld	r24, Z
    612e:	20 91 09 07 	lds	r18, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    6132:	30 e0       	ldi	r19, 0x00	; 0
    6134:	2f 5f       	subi	r18, 0xFF	; 255
    6136:	3f 4f       	sbci	r19, 0xFF	; 255
    6138:	2f 73       	andi	r18, 0x3F	; 63
    613a:	33 27       	eor	r19, r19
    613c:	20 93 09 07 	sts	0x0709, r18	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	08 95       	ret
    6144:	8f ef       	ldi	r24, 0xFF	; 255
    6146:	9f ef       	ldi	r25, 0xFF	; 255
    6148:	08 95       	ret

0000614a <_ZN14SoftwareSerial5writeEh>:
    614a:	1f 93       	push	r17
    614c:	cf 93       	push	r28
    614e:	df 93       	push	r29
    6150:	dc 01       	movw	r26, r24
    6152:	5c 96       	adiw	r26, 0x1c	; 28
    6154:	8d 91       	ld	r24, X+
    6156:	9c 91       	ld	r25, X
    6158:	5d 97       	sbiw	r26, 0x1d	; 29
    615a:	00 97       	sbiw	r24, 0x00	; 0
    615c:	39 f4       	brne	.+14     	; 0x616c <_ZN14SoftwareSerial5writeEh+0x22>
    615e:	21 e0       	ldi	r18, 0x01	; 1
    6160:	30 e0       	ldi	r19, 0x00	; 0
    6162:	13 96       	adiw	r26, 0x03	; 3
    6164:	3c 93       	st	X, r19
    6166:	2e 93       	st	-X, r18
    6168:	12 97       	sbiw	r26, 0x02	; 2
    616a:	3b c0       	rjmp	.+118    	; 0x61e2 <_ZN14SoftwareSerial5writeEh+0x98>
    616c:	51 96       	adiw	r26, 0x11	; 17
    616e:	ed 91       	ld	r30, X+
    6170:	fc 91       	ld	r31, X
    6172:	52 97       	sbiw	r26, 0x12	; 18
    6174:	50 96       	adiw	r26, 0x10	; 16
    6176:	2c 91       	ld	r18, X
    6178:	50 97       	sbiw	r26, 0x10	; 16
    617a:	32 2f       	mov	r19, r18
    617c:	30 95       	com	r19
    617e:	1f b7       	in	r17, 0x3f	; 63
    6180:	5e 96       	adiw	r26, 0x1e	; 30
    6182:	4c 91       	ld	r20, X
    6184:	5e 97       	sbiw	r26, 0x1e	; 30
    6186:	74 2f       	mov	r23, r20
    6188:	72 70       	andi	r23, 0x02	; 2
    618a:	41 fd       	sbrc	r20, 1
    618c:	60 95       	com	r22
    618e:	f8 94       	cli
    6190:	40 81       	ld	r20, Z
    6192:	77 23       	and	r23, r23
    6194:	11 f0       	breq	.+4      	; 0x619a <_ZN14SoftwareSerial5writeEh+0x50>
    6196:	42 2b       	or	r20, r18
    6198:	01 c0       	rjmp	.+2      	; 0x619c <_ZN14SoftwareSerial5writeEh+0x52>
    619a:	43 23       	and	r20, r19
    619c:	40 83       	st	Z, r20
    619e:	ec 01       	movw	r28, r24
    61a0:	21 97       	sbiw	r28, 0x01	; 1
    61a2:	f1 f7       	brne	.-4      	; 0x61a0 <_ZN14SoftwareSerial5writeEh+0x56>
    61a4:	48 e0       	ldi	r20, 0x08	; 8
    61a6:	50 81       	ld	r21, Z
    61a8:	60 ff       	sbrs	r22, 0
    61aa:	02 c0       	rjmp	.+4      	; 0x61b0 <_ZN14SoftwareSerial5writeEh+0x66>
    61ac:	52 2b       	or	r21, r18
    61ae:	01 c0       	rjmp	.+2      	; 0x61b2 <_ZN14SoftwareSerial5writeEh+0x68>
    61b0:	53 23       	and	r21, r19
    61b2:	50 83       	st	Z, r21
    61b4:	ec 01       	movw	r28, r24
    61b6:	21 97       	sbiw	r28, 0x01	; 1
    61b8:	f1 f7       	brne	.-4      	; 0x61b6 <_ZN14SoftwareSerial5writeEh+0x6c>
    61ba:	66 95       	lsr	r22
    61bc:	41 50       	subi	r20, 0x01	; 1
    61be:	99 f7       	brne	.-26     	; 0x61a6 <_ZN14SoftwareSerial5writeEh+0x5c>
    61c0:	80 81       	ld	r24, Z
    61c2:	77 23       	and	r23, r23
    61c4:	19 f0       	breq	.+6      	; 0x61cc <_ZN14SoftwareSerial5writeEh+0x82>
    61c6:	83 23       	and	r24, r19
    61c8:	80 83       	st	Z, r24
    61ca:	02 c0       	rjmp	.+4      	; 0x61d0 <_ZN14SoftwareSerial5writeEh+0x86>
    61cc:	28 2b       	or	r18, r24
    61ce:	20 83       	st	Z, r18
    61d0:	1f bf       	out	0x3f, r17	; 63
    61d2:	5c 96       	adiw	r26, 0x1c	; 28
    61d4:	8d 91       	ld	r24, X+
    61d6:	9c 91       	ld	r25, X
    61d8:	5d 97       	sbiw	r26, 0x1d	; 29
    61da:	01 97       	sbiw	r24, 0x01	; 1
    61dc:	f1 f7       	brne	.-4      	; 0x61da <_ZN14SoftwareSerial5writeEh+0x90>
    61de:	81 e0       	ldi	r24, 0x01	; 1
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	df 91       	pop	r29
    61e4:	cf 91       	pop	r28
    61e6:	1f 91       	pop	r17
    61e8:	08 95       	ret

000061ea <_ZN14SoftwareSerial5flushEv>:
    61ea:	08 95       	ret

000061ec <_ZN14SoftwareSerial4peekEv>:
    61ec:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    61f0:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    61f4:	28 17       	cp	r18, r24
    61f6:	39 07       	cpc	r19, r25
    61f8:	71 f4       	brne	.+28     	; 0x6216 <_ZN14SoftwareSerial4peekEv+0x2a>
    61fa:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    61fe:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6202:	98 17       	cp	r25, r24
    6204:	41 f0       	breq	.+16     	; 0x6216 <_ZN14SoftwareSerial4peekEv+0x2a>
    6206:	e0 91 09 07 	lds	r30, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    620a:	f0 e0       	ldi	r31, 0x00	; 0
    620c:	e5 5f       	subi	r30, 0xF5	; 245
    620e:	f8 4f       	sbci	r31, 0xF8	; 248
    6210:	80 81       	ld	r24, Z
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	08 95       	ret
    6216:	8f ef       	ldi	r24, 0xFF	; 255
    6218:	9f ef       	ldi	r25, 0xFF	; 255
    621a:	08 95       	ret

0000621c <_ZN14SoftwareSerial9availableEv>:
    621c:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    6220:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    6224:	28 17       	cp	r18, r24
    6226:	39 07       	cpc	r19, r25
    6228:	71 f4       	brne	.+28     	; 0x6246 <_ZN14SoftwareSerial9availableEv+0x2a>
    622a:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    622e:	20 91 09 07 	lds	r18, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    6232:	90 e0       	ldi	r25, 0x00	; 0
    6234:	80 5c       	subi	r24, 0xC0	; 192
    6236:	9f 4f       	sbci	r25, 0xFF	; 255
    6238:	82 1b       	sub	r24, r18
    623a:	91 09       	sbc	r25, r1
    623c:	60 e4       	ldi	r22, 0x40	; 64
    623e:	70 e0       	ldi	r23, 0x00	; 0
    6240:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divmodhi4>
    6244:	08 95       	ret
    6246:	80 e0       	ldi	r24, 0x00	; 0
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	08 95       	ret

0000624c <_ZN14SoftwareSerial13stopListeningEv>:
    624c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    6250:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    6254:	e8 17       	cp	r30, r24
    6256:	f9 07       	cpc	r31, r25
    6258:	69 f4       	brne	.+26     	; 0x6274 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    625a:	a3 89       	ldd	r26, Z+19	; 0x13
    625c:	b4 89       	ldd	r27, Z+20	; 0x14
    625e:	9c 91       	ld	r25, X
    6260:	85 89       	ldd	r24, Z+21	; 0x15
    6262:	80 95       	com	r24
    6264:	89 23       	and	r24, r25
    6266:	8c 93       	st	X, r24
    6268:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    626c:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    6270:	81 e0       	ldi	r24, 0x01	; 1
    6272:	08 95       	ret
    6274:	80 e0       	ldi	r24, 0x00	; 0
    6276:	08 95       	ret

00006278 <_ZN14SoftwareSerial6listenEv>:
    6278:	cf 93       	push	r28
    627a:	df 93       	push	r29
    627c:	ec 01       	movw	r28, r24
    627e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6280:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6282:	89 2b       	or	r24, r25
    6284:	f1 f0       	breq	.+60     	; 0x62c2 <_ZN14SoftwareSerial6listenEv+0x4a>
    6286:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    628a:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    628e:	c8 17       	cp	r28, r24
    6290:	d9 07       	cpc	r29, r25
    6292:	b9 f0       	breq	.+46     	; 0x62c2 <_ZN14SoftwareSerial6listenEv+0x4a>
    6294:	00 97       	sbiw	r24, 0x00	; 0
    6296:	11 f0       	breq	.+4      	; 0x629c <_ZN14SoftwareSerial6listenEv+0x24>
    6298:	0e 94 26 31 	call	0x624c	; 0x624c <_ZN14SoftwareSerial13stopListeningEv>
    629c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    629e:	8e 7f       	andi	r24, 0xFE	; 254
    62a0:	8e 8f       	std	Y+30, r24	; 0x1e
    62a2:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    62a6:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    62aa:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    62ae:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    62b2:	eb 89       	ldd	r30, Y+19	; 0x13
    62b4:	fc 89       	ldd	r31, Y+20	; 0x14
    62b6:	90 81       	ld	r25, Z
    62b8:	8d 89       	ldd	r24, Y+21	; 0x15
    62ba:	89 2b       	or	r24, r25
    62bc:	80 83       	st	Z, r24
    62be:	81 e0       	ldi	r24, 0x01	; 1
    62c0:	01 c0       	rjmp	.+2      	; 0x62c4 <_ZN14SoftwareSerial6listenEv+0x4c>
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	df 91       	pop	r29
    62c6:	cf 91       	pop	r28
    62c8:	08 95       	ret

000062ca <__vector_3>:
    62ca:	1f 92       	push	r1
    62cc:	0f 92       	push	r0
    62ce:	0f b6       	in	r0, 0x3f	; 63
    62d0:	0f 92       	push	r0
    62d2:	11 24       	eor	r1, r1
    62d4:	2f 93       	push	r18
    62d6:	3f 93       	push	r19
    62d8:	4f 93       	push	r20
    62da:	5f 93       	push	r21
    62dc:	6f 93       	push	r22
    62de:	7f 93       	push	r23
    62e0:	8f 93       	push	r24
    62e2:	9f 93       	push	r25
    62e4:	af 93       	push	r26
    62e6:	bf 93       	push	r27
    62e8:	ef 93       	push	r30
    62ea:	ff 93       	push	r31
    62ec:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <_ZN14SoftwareSerial13active_objectE>
    62f0:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <_ZN14SoftwareSerial13active_objectE+0x1>
    62f4:	30 97       	sbiw	r30, 0x00	; 0
    62f6:	09 f4       	brne	.+2      	; 0x62fa <__vector_3+0x30>
    62f8:	51 c0       	rjmp	.+162    	; 0x639c <__vector_3+0xd2>
    62fa:	96 8d       	ldd	r25, Z+30	; 0x1e
    62fc:	a6 85       	ldd	r26, Z+14	; 0x0e
    62fe:	b7 85       	ldd	r27, Z+15	; 0x0f
    6300:	85 85       	ldd	r24, Z+13	; 0x0d
    6302:	91 ff       	sbrs	r25, 1
    6304:	04 c0       	rjmp	.+8      	; 0x630e <__vector_3+0x44>
    6306:	9c 91       	ld	r25, X
    6308:	89 23       	and	r24, r25
    630a:	29 f4       	brne	.+10     	; 0x6316 <__vector_3+0x4c>
    630c:	47 c0       	rjmp	.+142    	; 0x639c <__vector_3+0xd2>
    630e:	9c 91       	ld	r25, X
    6310:	89 23       	and	r24, r25
    6312:	09 f0       	breq	.+2      	; 0x6316 <__vector_3+0x4c>
    6314:	43 c0       	rjmp	.+134    	; 0x639c <__vector_3+0xd2>
    6316:	a3 89       	ldd	r26, Z+19	; 0x13
    6318:	b4 89       	ldd	r27, Z+20	; 0x14
    631a:	9c 91       	ld	r25, X
    631c:	85 89       	ldd	r24, Z+21	; 0x15
    631e:	80 95       	com	r24
    6320:	89 23       	and	r24, r25
    6322:	8c 93       	st	X, r24
    6324:	86 89       	ldd	r24, Z+22	; 0x16
    6326:	97 89       	ldd	r25, Z+23	; 0x17
    6328:	01 97       	sbiw	r24, 0x01	; 1
    632a:	f1 f7       	brne	.-4      	; 0x6328 <__vector_3+0x5e>
    632c:	60 8d       	ldd	r22, Z+24	; 0x18
    632e:	71 8d       	ldd	r23, Z+25	; 0x19
    6330:	a6 85       	ldd	r26, Z+14	; 0x0e
    6332:	b7 85       	ldd	r27, Z+15	; 0x0f
    6334:	55 85       	ldd	r21, Z+13	; 0x0d
    6336:	38 e0       	ldi	r19, 0x08	; 8
    6338:	20 e0       	ldi	r18, 0x00	; 0
    633a:	cb 01       	movw	r24, r22
    633c:	01 97       	sbiw	r24, 0x01	; 1
    633e:	f1 f7       	brne	.-4      	; 0x633c <__vector_3+0x72>
    6340:	82 2f       	mov	r24, r18
    6342:	90 e0       	ldi	r25, 0x00	; 0
    6344:	95 95       	asr	r25
    6346:	87 95       	ror	r24
    6348:	28 2f       	mov	r18, r24
    634a:	4c 91       	ld	r20, X
    634c:	45 23       	and	r20, r21
    634e:	09 f0       	breq	.+2      	; 0x6352 <__vector_3+0x88>
    6350:	20 68       	ori	r18, 0x80	; 128
    6352:	31 50       	subi	r19, 0x01	; 1
    6354:	91 f7       	brne	.-28     	; 0x633a <__vector_3+0x70>
    6356:	86 8d       	ldd	r24, Z+30	; 0x1e
    6358:	81 fd       	sbrc	r24, 1
    635a:	20 95       	com	r18
    635c:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	01 96       	adiw	r24, 0x01	; 1
    6364:	8f 73       	andi	r24, 0x3F	; 63
    6366:	99 27       	eor	r25, r25
    6368:	30 91 09 07 	lds	r19, 0x0709	; 0x800709 <_ZN14SoftwareSerial20_receive_buffer_headE>
    636c:	38 17       	cp	r19, r24
    636e:	49 f0       	breq	.+18     	; 0x6382 <__vector_3+0xb8>
    6370:	a0 91 0a 07 	lds	r26, 0x070A	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6374:	b0 e0       	ldi	r27, 0x00	; 0
    6376:	a5 5f       	subi	r26, 0xF5	; 245
    6378:	b8 4f       	sbci	r27, 0xF8	; 248
    637a:	2c 93       	st	X, r18
    637c:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6380:	03 c0       	rjmp	.+6      	; 0x6388 <__vector_3+0xbe>
    6382:	86 8d       	ldd	r24, Z+30	; 0x1e
    6384:	81 60       	ori	r24, 0x01	; 1
    6386:	86 8f       	std	Z+30, r24	; 0x1e
    6388:	82 8d       	ldd	r24, Z+26	; 0x1a
    638a:	93 8d       	ldd	r25, Z+27	; 0x1b
    638c:	01 97       	sbiw	r24, 0x01	; 1
    638e:	f1 f7       	brne	.-4      	; 0x638c <__vector_3+0xc2>
    6390:	a3 89       	ldd	r26, Z+19	; 0x13
    6392:	b4 89       	ldd	r27, Z+20	; 0x14
    6394:	9c 91       	ld	r25, X
    6396:	85 89       	ldd	r24, Z+21	; 0x15
    6398:	89 2b       	or	r24, r25
    639a:	8c 93       	st	X, r24
    639c:	ff 91       	pop	r31
    639e:	ef 91       	pop	r30
    63a0:	bf 91       	pop	r27
    63a2:	af 91       	pop	r26
    63a4:	9f 91       	pop	r25
    63a6:	8f 91       	pop	r24
    63a8:	7f 91       	pop	r23
    63aa:	6f 91       	pop	r22
    63ac:	5f 91       	pop	r21
    63ae:	4f 91       	pop	r20
    63b0:	3f 91       	pop	r19
    63b2:	2f 91       	pop	r18
    63b4:	0f 90       	pop	r0
    63b6:	0f be       	out	0x3f, r0	; 63
    63b8:	0f 90       	pop	r0
    63ba:	1f 90       	pop	r1
    63bc:	18 95       	reti

000063be <_ZN14SoftwareSerialD1Ev>:
    63be:	22 e3       	ldi	r18, 0x32	; 50
    63c0:	34 e0       	ldi	r19, 0x04	; 4
    63c2:	fc 01       	movw	r30, r24
    63c4:	31 83       	std	Z+1, r19	; 0x01
    63c6:	20 83       	st	Z, r18
    63c8:	0c 94 26 31 	jmp	0x624c	; 0x624c <_ZN14SoftwareSerial13stopListeningEv>

000063cc <_ZN14SoftwareSerial5setTXEh>:
    63cc:	1f 93       	push	r17
    63ce:	cf 93       	push	r28
    63d0:	df 93       	push	r29
    63d2:	ec 01       	movw	r28, r24
    63d4:	16 2f       	mov	r17, r22
    63d6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    63d8:	66 95       	lsr	r22
    63da:	61 70       	andi	r22, 0x01	; 1
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	68 27       	eor	r22, r24
    63e0:	81 2f       	mov	r24, r17
    63e2:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
    63e6:	61 e0       	ldi	r22, 0x01	; 1
    63e8:	81 2f       	mov	r24, r17
    63ea:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    63ee:	81 2f       	mov	r24, r17
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	fc 01       	movw	r30, r24
    63f4:	e8 5a       	subi	r30, 0xA8	; 168
    63f6:	fc 4f       	sbci	r31, 0xFC	; 252
    63f8:	e4 91       	lpm	r30, Z
    63fa:	e8 8b       	std	Y+16, r30	; 0x10
    63fc:	fc 01       	movw	r30, r24
    63fe:	e4 59       	subi	r30, 0x94	; 148
    6400:	fc 4f       	sbci	r31, 0xFC	; 252
    6402:	e4 91       	lpm	r30, Z
    6404:	f0 e0       	ldi	r31, 0x00	; 0
    6406:	ee 0f       	add	r30, r30
    6408:	ff 1f       	adc	r31, r31
    640a:	e6 57       	subi	r30, 0x76	; 118
    640c:	fc 4f       	sbci	r31, 0xFC	; 252
    640e:	85 91       	lpm	r24, Z+
    6410:	94 91       	lpm	r25, Z
    6412:	9a 8b       	std	Y+18, r25	; 0x12
    6414:	89 8b       	std	Y+17, r24	; 0x11
    6416:	df 91       	pop	r29
    6418:	cf 91       	pop	r28
    641a:	1f 91       	pop	r17
    641c:	08 95       	ret

0000641e <_ZN14SoftwareSerial5setRXEh>:
    641e:	1f 93       	push	r17
    6420:	cf 93       	push	r28
    6422:	df 93       	push	r29
    6424:	ec 01       	movw	r28, r24
    6426:	16 2f       	mov	r17, r22
    6428:	60 e0       	ldi	r22, 0x00	; 0
    642a:	81 2f       	mov	r24, r17
    642c:	0e 94 49 26 	call	0x4c92	; 0x4c92 <pinMode>
    6430:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6432:	81 fd       	sbrc	r24, 1
    6434:	04 c0       	rjmp	.+8      	; 0x643e <_ZN14SoftwareSerial5setRXEh+0x20>
    6436:	61 e0       	ldi	r22, 0x01	; 1
    6438:	81 2f       	mov	r24, r17
    643a:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <digitalWrite>
    643e:	1c 87       	std	Y+12, r17	; 0x0c
    6440:	81 2f       	mov	r24, r17
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	fc 01       	movw	r30, r24
    6446:	e8 5a       	subi	r30, 0xA8	; 168
    6448:	fc 4f       	sbci	r31, 0xFC	; 252
    644a:	e4 91       	lpm	r30, Z
    644c:	ed 87       	std	Y+13, r30	; 0x0d
    644e:	fc 01       	movw	r30, r24
    6450:	e4 59       	subi	r30, 0x94	; 148
    6452:	fc 4f       	sbci	r31, 0xFC	; 252
    6454:	e4 91       	lpm	r30, Z
    6456:	f0 e0       	ldi	r31, 0x00	; 0
    6458:	ee 0f       	add	r30, r30
    645a:	ff 1f       	adc	r31, r31
    645c:	e0 58       	subi	r30, 0x80	; 128
    645e:	fc 4f       	sbci	r31, 0xFC	; 252
    6460:	85 91       	lpm	r24, Z+
    6462:	94 91       	lpm	r25, Z
    6464:	9f 87       	std	Y+15, r25	; 0x0f
    6466:	8e 87       	std	Y+14, r24	; 0x0e
    6468:	df 91       	pop	r29
    646a:	cf 91       	pop	r28
    646c:	1f 91       	pop	r17
    646e:	08 95       	ret

00006470 <_ZN14SoftwareSerialC1Ehhb>:
    6470:	1f 93       	push	r17
    6472:	cf 93       	push	r28
    6474:	df 93       	push	r29
    6476:	ec 01       	movw	r28, r24
    6478:	16 2f       	mov	r17, r22
    647a:	1b 82       	std	Y+3, r1	; 0x03
    647c:	1a 82       	std	Y+2, r1	; 0x02
    647e:	88 ee       	ldi	r24, 0xE8	; 232
    6480:	93 e0       	ldi	r25, 0x03	; 3
    6482:	a0 e0       	ldi	r26, 0x00	; 0
    6484:	b0 e0       	ldi	r27, 0x00	; 0
    6486:	8c 83       	std	Y+4, r24	; 0x04
    6488:	9d 83       	std	Y+5, r25	; 0x05
    648a:	ae 83       	std	Y+6, r26	; 0x06
    648c:	bf 83       	std	Y+7, r27	; 0x07
    648e:	82 e3       	ldi	r24, 0x32	; 50
    6490:	94 e0       	ldi	r25, 0x04	; 4
    6492:	99 83       	std	Y+1, r25	; 0x01
    6494:	88 83       	st	Y, r24
    6496:	1f 8a       	std	Y+23, r1	; 0x17
    6498:	1e 8a       	std	Y+22, r1	; 0x16
    649a:	19 8e       	std	Y+25, r1	; 0x19
    649c:	18 8e       	std	Y+24, r1	; 0x18
    649e:	1b 8e       	std	Y+27, r1	; 0x1b
    64a0:	1a 8e       	std	Y+26, r1	; 0x1a
    64a2:	1d 8e       	std	Y+29, r1	; 0x1d
    64a4:	1c 8e       	std	Y+28, r1	; 0x1c
    64a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    64a8:	8e 7f       	andi	r24, 0xFE	; 254
    64aa:	20 fb       	bst	r18, 0
    64ac:	81 f9       	bld	r24, 1
    64ae:	8e 8f       	std	Y+30, r24	; 0x1e
    64b0:	64 2f       	mov	r22, r20
    64b2:	ce 01       	movw	r24, r28
    64b4:	0e 94 e6 31 	call	0x63cc	; 0x63cc <_ZN14SoftwareSerial5setTXEh>
    64b8:	61 2f       	mov	r22, r17
    64ba:	ce 01       	movw	r24, r28
    64bc:	df 91       	pop	r29
    64be:	cf 91       	pop	r28
    64c0:	1f 91       	pop	r17
    64c2:	0c 94 0f 32 	jmp	0x641e	; 0x641e <_ZN14SoftwareSerial5setRXEh>

000064c6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    64c6:	cf 93       	push	r28
    64c8:	df 93       	push	r29
    64ca:	ec 01       	movw	r28, r24
    64cc:	9a 01       	movw	r18, r20
    64ce:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    64d0:	1b 8e       	std	Y+27, r1	; 0x1b
    64d2:	1a 8e       	std	Y+26, r1	; 0x1a
    64d4:	19 8e       	std	Y+25, r1	; 0x19
    64d6:	18 8e       	std	Y+24, r1	; 0x18
    64d8:	1f 8a       	std	Y+23, r1	; 0x17
    64da:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    64dc:	60 e0       	ldi	r22, 0x00	; 0
    64de:	79 e0       	ldi	r23, 0x09	; 9
    64e0:	8d e3       	ldi	r24, 0x3D	; 61
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	0e 94 91 33 	call	0x6722	; 0x6722 <__divmodsi4>
    64e8:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    64ea:	24 30       	cpi	r18, 0x04	; 4
    64ec:	31 05       	cpc	r19, r1
    64ee:	18 f0       	brcs	.+6      	; 0x64f6 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    64f0:	c9 01       	movw	r24, r18
    64f2:	03 97       	sbiw	r24, 0x03	; 3
    64f4:	02 c0       	rjmp	.+4      	; 0x64fa <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    64fa:	9d 8f       	std	Y+29, r25	; 0x1d
    64fc:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    64fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    6500:	66 31       	cpi	r22, 0x16	; 22
    6502:	08 f0       	brcs	.+2      	; 0x6506 <_ZN14SoftwareSerial5beginEl+0x40>
    6504:	69 c0       	rjmp	.+210    	; 0x65d8 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    6506:	c9 01       	movw	r24, r18
    6508:	96 95       	lsr	r25
    650a:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    650c:	84 31       	cpi	r24, 0x14	; 20
    650e:	91 05       	cpc	r25, r1
    6510:	10 f0       	brcs	.+4      	; 0x6516 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    6512:	43 97       	sbiw	r24, 0x13	; 19
    6514:	02 c0       	rjmp	.+4      	; 0x651a <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    651a:	9f 8b       	std	Y+23, r25	; 0x17
    651c:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    651e:	36 97       	sbiw	r30, 0x06	; 6
    6520:	18 f0       	brcs	.+6      	; 0x6528 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    6522:	c9 01       	movw	r24, r18
    6524:	05 97       	sbiw	r24, 0x05	; 5
    6526:	02 c0       	rjmp	.+4      	; 0x652c <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    652c:	99 8f       	std	Y+25, r25	; 0x19
    652e:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    6530:	c9 01       	movw	r24, r18
    6532:	88 0f       	add	r24, r24
    6534:	99 1f       	adc	r25, r25
    6536:	28 0f       	add	r18, r24
    6538:	39 1f       	adc	r19, r25
    653a:	36 95       	lsr	r19
    653c:	27 95       	ror	r18
    653e:	36 95       	lsr	r19
    6540:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    6542:	2d 30       	cpi	r18, 0x0D	; 13
    6544:	31 05       	cpc	r19, r1
    6546:	18 f0       	brcs	.+6      	; 0x654e <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    6548:	2c 50       	subi	r18, 0x0C	; 12
    654a:	31 09       	sbc	r19, r1
    654c:	02 c0       	rjmp	.+4      	; 0x6552 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    654e:	21 e0       	ldi	r18, 0x01	; 1
    6550:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    6552:	3b 8f       	std	Y+27, r19	; 0x1b
    6554:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    6556:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    655a:	68 30       	cpi	r22, 0x08	; 8
    655c:	50 f0       	brcs	.+20     	; 0x6572 <_ZN14SoftwareSerial5beginEl+0xac>
    655e:	21 e0       	ldi	r18, 0x01	; 1
    6560:	6e 30       	cpi	r22, 0x0E	; 14
    6562:	08 f4       	brcc	.+2      	; 0x6566 <_ZN14SoftwareSerial5beginEl+0xa0>
    6564:	20 e0       	ldi	r18, 0x00	; 0
    6566:	81 e0       	ldi	r24, 0x01	; 1
    6568:	01 c0       	rjmp	.+2      	; 0x656c <_ZN14SoftwareSerial5beginEl+0xa6>
    656a:	88 0f       	add	r24, r24
    656c:	2a 95       	dec	r18
    656e:	ea f7       	brpl	.-6      	; 0x656a <_ZN14SoftwareSerial5beginEl+0xa4>
    6570:	01 c0       	rjmp	.+2      	; 0x6574 <_ZN14SoftwareSerial5beginEl+0xae>
    6572:	84 e0       	ldi	r24, 0x04	; 4
    6574:	89 2b       	or	r24, r25
    6576:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    657a:	9c 85       	ldd	r25, Y+12	; 0x0c
    657c:	98 30       	cpi	r25, 0x08	; 8
    657e:	38 f0       	brcs	.+14     	; 0x658e <_ZN14SoftwareSerial5beginEl+0xc8>
    6580:	9e 30       	cpi	r25, 0x0E	; 14
    6582:	40 f0       	brcs	.+16     	; 0x6594 <_ZN14SoftwareSerial5beginEl+0xce>
    6584:	96 31       	cpi	r25, 0x16	; 22
    6586:	48 f0       	brcs	.+18     	; 0x659a <_ZN14SoftwareSerial5beginEl+0xd4>
    6588:	20 e0       	ldi	r18, 0x00	; 0
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	08 c0       	rjmp	.+16     	; 0x659e <_ZN14SoftwareSerial5beginEl+0xd8>
    658e:	2d e6       	ldi	r18, 0x6D	; 109
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	05 c0       	rjmp	.+10     	; 0x659e <_ZN14SoftwareSerial5beginEl+0xd8>
    6594:	2b e6       	ldi	r18, 0x6B	; 107
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	02 c0       	rjmp	.+4      	; 0x659e <_ZN14SoftwareSerial5beginEl+0xd8>
    659a:	2c e6       	ldi	r18, 0x6C	; 108
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	3c 8b       	std	Y+20, r19	; 0x14
    65a0:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    65a2:	98 30       	cpi	r25, 0x08	; 8
    65a4:	30 f4       	brcc	.+12     	; 0x65b2 <_ZN14SoftwareSerial5beginEl+0xec>
    65a6:	81 e0       	ldi	r24, 0x01	; 1
    65a8:	01 c0       	rjmp	.+2      	; 0x65ac <_ZN14SoftwareSerial5beginEl+0xe6>
    65aa:	88 0f       	add	r24, r24
    65ac:	9a 95       	dec	r25
    65ae:	ea f7       	brpl	.-6      	; 0x65aa <_ZN14SoftwareSerial5beginEl+0xe4>
    65b0:	0e c0       	rjmp	.+28     	; 0x65ce <_ZN14SoftwareSerial5beginEl+0x108>
    65b2:	29 2f       	mov	r18, r25
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	9e 30       	cpi	r25, 0x0E	; 14
    65b8:	18 f4       	brcc	.+6      	; 0x65c0 <_ZN14SoftwareSerial5beginEl+0xfa>
    65ba:	28 50       	subi	r18, 0x08	; 8
    65bc:	31 09       	sbc	r19, r1
    65be:	02 c0       	rjmp	.+4      	; 0x65c4 <_ZN14SoftwareSerial5beginEl+0xfe>
    65c0:	2e 50       	subi	r18, 0x0E	; 14
    65c2:	31 09       	sbc	r19, r1
    65c4:	81 e0       	ldi	r24, 0x01	; 1
    65c6:	01 c0       	rjmp	.+2      	; 0x65ca <_ZN14SoftwareSerial5beginEl+0x104>
    65c8:	88 0f       	add	r24, r24
    65ca:	2a 95       	dec	r18
    65cc:	ea f7       	brpl	.-6      	; 0x65c8 <_ZN14SoftwareSerial5beginEl+0x102>
    65ce:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    65d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    65d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    65d4:	01 97       	sbiw	r24, 0x01	; 1
    65d6:	f1 f7       	brne	.-4      	; 0x65d4 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    65d8:	ce 01       	movw	r24, r28
}
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    65de:	0c 94 3c 31 	jmp	0x6278	; 0x6278 <_ZN14SoftwareSerial6listenEv>

000065e2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    65e2:	08 95       	ret

000065e4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    65e4:	08 95       	ret

000065e6 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    65e6:	1f 92       	push	r1
    65e8:	0f 92       	push	r0
    65ea:	0f b6       	in	r0, 0x3f	; 63
    65ec:	0f 92       	push	r0
    65ee:	11 24       	eor	r1, r1
    65f0:	2f 93       	push	r18
    65f2:	3f 93       	push	r19
    65f4:	4f 93       	push	r20
    65f6:	5f 93       	push	r21
    65f8:	6f 93       	push	r22
    65fa:	7f 93       	push	r23
    65fc:	8f 93       	push	r24
    65fe:	9f 93       	push	r25
    6600:	af 93       	push	r26
    6602:	bf 93       	push	r27
    6604:	ef 93       	push	r30
    6606:	ff 93       	push	r31
    6608:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <intFunc>
    660c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <intFunc+0x1>
    6610:	09 95       	icall
    6612:	ff 91       	pop	r31
    6614:	ef 91       	pop	r30
    6616:	bf 91       	pop	r27
    6618:	af 91       	pop	r26
    661a:	9f 91       	pop	r25
    661c:	8f 91       	pop	r24
    661e:	7f 91       	pop	r23
    6620:	6f 91       	pop	r22
    6622:	5f 91       	pop	r21
    6624:	4f 91       	pop	r20
    6626:	3f 91       	pop	r19
    6628:	2f 91       	pop	r18
    662a:	0f 90       	pop	r0
    662c:	0f be       	out	0x3f, r0	; 63
    662e:	0f 90       	pop	r0
    6630:	1f 90       	pop	r1
    6632:	18 95       	reti

00006634 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    6634:	1f 92       	push	r1
    6636:	0f 92       	push	r0
    6638:	0f b6       	in	r0, 0x3f	; 63
    663a:	0f 92       	push	r0
    663c:	11 24       	eor	r1, r1
    663e:	2f 93       	push	r18
    6640:	3f 93       	push	r19
    6642:	4f 93       	push	r20
    6644:	5f 93       	push	r21
    6646:	6f 93       	push	r22
    6648:	7f 93       	push	r23
    664a:	8f 93       	push	r24
    664c:	9f 93       	push	r25
    664e:	af 93       	push	r26
    6650:	bf 93       	push	r27
    6652:	ef 93       	push	r30
    6654:	ff 93       	push	r31
    6656:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <intFunc+0x2>
    665a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <intFunc+0x3>
    665e:	09 95       	icall
    6660:	ff 91       	pop	r31
    6662:	ef 91       	pop	r30
    6664:	bf 91       	pop	r27
    6666:	af 91       	pop	r26
    6668:	9f 91       	pop	r25
    666a:	8f 91       	pop	r24
    666c:	7f 91       	pop	r23
    666e:	6f 91       	pop	r22
    6670:	5f 91       	pop	r21
    6672:	4f 91       	pop	r20
    6674:	3f 91       	pop	r19
    6676:	2f 91       	pop	r18
    6678:	0f 90       	pop	r0
    667a:	0f be       	out	0x3f, r0	; 63
    667c:	0f 90       	pop	r0
    667e:	1f 90       	pop	r1
    6680:	18 95       	reti

00006682 <__cmpsf2>:
    6682:	0e 94 82 20 	call	0x4104	; 0x4104 <__fp_cmp>
    6686:	08 f4       	brcc	.+2      	; 0x668a <__cmpsf2+0x8>
    6688:	81 e0       	ldi	r24, 0x01	; 1
    668a:	08 95       	ret

0000668c <__unordsf2>:
    668c:	0e 94 82 20 	call	0x4104	; 0x4104 <__fp_cmp>
    6690:	88 0b       	sbc	r24, r24
    6692:	99 0b       	sbc	r25, r25
    6694:	08 95       	ret

00006696 <__mulsi3>:
    6696:	db 01       	movw	r26, r22
    6698:	8f 93       	push	r24
    669a:	9f 93       	push	r25
    669c:	0e 94 b6 33 	call	0x676c	; 0x676c <__muluhisi3>
    66a0:	bf 91       	pop	r27
    66a2:	af 91       	pop	r26
    66a4:	a2 9f       	mul	r26, r18
    66a6:	80 0d       	add	r24, r0
    66a8:	91 1d       	adc	r25, r1
    66aa:	a3 9f       	mul	r26, r19
    66ac:	90 0d       	add	r25, r0
    66ae:	b2 9f       	mul	r27, r18
    66b0:	90 0d       	add	r25, r0
    66b2:	11 24       	eor	r1, r1
    66b4:	08 95       	ret

000066b6 <__divmodhi4>:
    66b6:	97 fb       	bst	r25, 7
    66b8:	07 2e       	mov	r0, r23
    66ba:	16 f4       	brtc	.+4      	; 0x66c0 <__divmodhi4+0xa>
    66bc:	00 94       	com	r0
    66be:	07 d0       	rcall	.+14     	; 0x66ce <__divmodhi4_neg1>
    66c0:	77 fd       	sbrc	r23, 7
    66c2:	09 d0       	rcall	.+18     	; 0x66d6 <__divmodhi4_neg2>
    66c4:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodhi4>
    66c8:	07 fc       	sbrc	r0, 7
    66ca:	05 d0       	rcall	.+10     	; 0x66d6 <__divmodhi4_neg2>
    66cc:	3e f4       	brtc	.+14     	; 0x66dc <__divmodhi4_exit>

000066ce <__divmodhi4_neg1>:
    66ce:	90 95       	com	r25
    66d0:	81 95       	neg	r24
    66d2:	9f 4f       	sbci	r25, 0xFF	; 255
    66d4:	08 95       	ret

000066d6 <__divmodhi4_neg2>:
    66d6:	70 95       	com	r23
    66d8:	61 95       	neg	r22
    66da:	7f 4f       	sbci	r23, 0xFF	; 255

000066dc <__divmodhi4_exit>:
    66dc:	08 95       	ret

000066de <__udivmodsi4>:
    66de:	a1 e2       	ldi	r26, 0x21	; 33
    66e0:	1a 2e       	mov	r1, r26
    66e2:	aa 1b       	sub	r26, r26
    66e4:	bb 1b       	sub	r27, r27
    66e6:	fd 01       	movw	r30, r26
    66e8:	0d c0       	rjmp	.+26     	; 0x6704 <__udivmodsi4_ep>

000066ea <__udivmodsi4_loop>:
    66ea:	aa 1f       	adc	r26, r26
    66ec:	bb 1f       	adc	r27, r27
    66ee:	ee 1f       	adc	r30, r30
    66f0:	ff 1f       	adc	r31, r31
    66f2:	a2 17       	cp	r26, r18
    66f4:	b3 07       	cpc	r27, r19
    66f6:	e4 07       	cpc	r30, r20
    66f8:	f5 07       	cpc	r31, r21
    66fa:	20 f0       	brcs	.+8      	; 0x6704 <__udivmodsi4_ep>
    66fc:	a2 1b       	sub	r26, r18
    66fe:	b3 0b       	sbc	r27, r19
    6700:	e4 0b       	sbc	r30, r20
    6702:	f5 0b       	sbc	r31, r21

00006704 <__udivmodsi4_ep>:
    6704:	66 1f       	adc	r22, r22
    6706:	77 1f       	adc	r23, r23
    6708:	88 1f       	adc	r24, r24
    670a:	99 1f       	adc	r25, r25
    670c:	1a 94       	dec	r1
    670e:	69 f7       	brne	.-38     	; 0x66ea <__udivmodsi4_loop>
    6710:	60 95       	com	r22
    6712:	70 95       	com	r23
    6714:	80 95       	com	r24
    6716:	90 95       	com	r25
    6718:	9b 01       	movw	r18, r22
    671a:	ac 01       	movw	r20, r24
    671c:	bd 01       	movw	r22, r26
    671e:	cf 01       	movw	r24, r30
    6720:	08 95       	ret

00006722 <__divmodsi4>:
    6722:	05 2e       	mov	r0, r21
    6724:	97 fb       	bst	r25, 7
    6726:	1e f4       	brtc	.+6      	; 0x672e <__divmodsi4+0xc>
    6728:	00 94       	com	r0
    672a:	0e 94 a8 33 	call	0x6750	; 0x6750 <__negsi2>
    672e:	57 fd       	sbrc	r21, 7
    6730:	07 d0       	rcall	.+14     	; 0x6740 <__divmodsi4_neg2>
    6732:	0e 94 6f 33 	call	0x66de	; 0x66de <__udivmodsi4>
    6736:	07 fc       	sbrc	r0, 7
    6738:	03 d0       	rcall	.+6      	; 0x6740 <__divmodsi4_neg2>
    673a:	4e f4       	brtc	.+18     	; 0x674e <__divmodsi4_exit>
    673c:	0c 94 a8 33 	jmp	0x6750	; 0x6750 <__negsi2>

00006740 <__divmodsi4_neg2>:
    6740:	50 95       	com	r21
    6742:	40 95       	com	r20
    6744:	30 95       	com	r19
    6746:	21 95       	neg	r18
    6748:	3f 4f       	sbci	r19, 0xFF	; 255
    674a:	4f 4f       	sbci	r20, 0xFF	; 255
    674c:	5f 4f       	sbci	r21, 0xFF	; 255

0000674e <__divmodsi4_exit>:
    674e:	08 95       	ret

00006750 <__negsi2>:
    6750:	90 95       	com	r25
    6752:	80 95       	com	r24
    6754:	70 95       	com	r23
    6756:	61 95       	neg	r22
    6758:	7f 4f       	sbci	r23, 0xFF	; 255
    675a:	8f 4f       	sbci	r24, 0xFF	; 255
    675c:	9f 4f       	sbci	r25, 0xFF	; 255
    675e:	08 95       	ret

00006760 <__tablejump2__>:
    6760:	ee 0f       	add	r30, r30
    6762:	ff 1f       	adc	r31, r31
    6764:	05 90       	lpm	r0, Z+
    6766:	f4 91       	lpm	r31, Z
    6768:	e0 2d       	mov	r30, r0
    676a:	09 94       	ijmp

0000676c <__muluhisi3>:
    676c:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__umulhisi3>
    6770:	a5 9f       	mul	r26, r21
    6772:	90 0d       	add	r25, r0
    6774:	b4 9f       	mul	r27, r20
    6776:	90 0d       	add	r25, r0
    6778:	a4 9f       	mul	r26, r20
    677a:	80 0d       	add	r24, r0
    677c:	91 1d       	adc	r25, r1
    677e:	11 24       	eor	r1, r1
    6780:	08 95       	ret

00006782 <__udivmodhi4>:
    6782:	aa 1b       	sub	r26, r26
    6784:	bb 1b       	sub	r27, r27
    6786:	51 e1       	ldi	r21, 0x11	; 17
    6788:	07 c0       	rjmp	.+14     	; 0x6798 <__udivmodhi4_ep>

0000678a <__udivmodhi4_loop>:
    678a:	aa 1f       	adc	r26, r26
    678c:	bb 1f       	adc	r27, r27
    678e:	a6 17       	cp	r26, r22
    6790:	b7 07       	cpc	r27, r23
    6792:	10 f0       	brcs	.+4      	; 0x6798 <__udivmodhi4_ep>
    6794:	a6 1b       	sub	r26, r22
    6796:	b7 0b       	sbc	r27, r23

00006798 <__udivmodhi4_ep>:
    6798:	88 1f       	adc	r24, r24
    679a:	99 1f       	adc	r25, r25
    679c:	5a 95       	dec	r21
    679e:	a9 f7       	brne	.-22     	; 0x678a <__udivmodhi4_loop>
    67a0:	80 95       	com	r24
    67a2:	90 95       	com	r25
    67a4:	bc 01       	movw	r22, r24
    67a6:	cd 01       	movw	r24, r26
    67a8:	08 95       	ret

000067aa <__umulhisi3>:
    67aa:	a2 9f       	mul	r26, r18
    67ac:	b0 01       	movw	r22, r0
    67ae:	b3 9f       	mul	r27, r19
    67b0:	c0 01       	movw	r24, r0
    67b2:	a3 9f       	mul	r26, r19
    67b4:	70 0d       	add	r23, r0
    67b6:	81 1d       	adc	r24, r1
    67b8:	11 24       	eor	r1, r1
    67ba:	91 1d       	adc	r25, r1
    67bc:	b2 9f       	mul	r27, r18
    67be:	70 0d       	add	r23, r0
    67c0:	81 1d       	adc	r24, r1
    67c2:	11 24       	eor	r1, r1
    67c4:	91 1d       	adc	r25, r1
    67c6:	08 95       	ret

000067c8 <atoi>:
    67c8:	fc 01       	movw	r30, r24
    67ca:	88 27       	eor	r24, r24
    67cc:	99 27       	eor	r25, r25
    67ce:	e8 94       	clt
    67d0:	21 91       	ld	r18, Z+
    67d2:	20 32       	cpi	r18, 0x20	; 32
    67d4:	e9 f3       	breq	.-6      	; 0x67d0 <atoi+0x8>
    67d6:	29 30       	cpi	r18, 0x09	; 9
    67d8:	10 f0       	brcs	.+4      	; 0x67de <atoi+0x16>
    67da:	2e 30       	cpi	r18, 0x0E	; 14
    67dc:	c8 f3       	brcs	.-14     	; 0x67d0 <atoi+0x8>
    67de:	2b 32       	cpi	r18, 0x2B	; 43
    67e0:	41 f0       	breq	.+16     	; 0x67f2 <atoi+0x2a>
    67e2:	2d 32       	cpi	r18, 0x2D	; 45
    67e4:	39 f4       	brne	.+14     	; 0x67f4 <atoi+0x2c>
    67e6:	68 94       	set
    67e8:	04 c0       	rjmp	.+8      	; 0x67f2 <atoi+0x2a>
    67ea:	0e 94 6b 34 	call	0x68d6	; 0x68d6 <__mulhi_const_10>
    67ee:	82 0f       	add	r24, r18
    67f0:	91 1d       	adc	r25, r1
    67f2:	21 91       	ld	r18, Z+
    67f4:	20 53       	subi	r18, 0x30	; 48
    67f6:	2a 30       	cpi	r18, 0x0A	; 10
    67f8:	c0 f3       	brcs	.-16     	; 0x67ea <atoi+0x22>
    67fa:	1e f4       	brtc	.+6      	; 0x6802 <atoi+0x3a>
    67fc:	90 95       	com	r25
    67fe:	81 95       	neg	r24
    6800:	9f 4f       	sbci	r25, 0xFF	; 255
    6802:	08 95       	ret

00006804 <strcmp_P>:
    6804:	fb 01       	movw	r30, r22
    6806:	dc 01       	movw	r26, r24
    6808:	8d 91       	ld	r24, X+
    680a:	05 90       	lpm	r0, Z+
    680c:	80 19       	sub	r24, r0
    680e:	01 10       	cpse	r0, r1
    6810:	d9 f3       	breq	.-10     	; 0x6808 <strcmp_P+0x4>
    6812:	99 0b       	sbc	r25, r25
    6814:	08 95       	ret

00006816 <__strlen_P>:
    6816:	fc 01       	movw	r30, r24
    6818:	05 90       	lpm	r0, Z+
    681a:	00 20       	and	r0, r0
    681c:	e9 f7       	brne	.-6      	; 0x6818 <__strlen_P+0x2>
    681e:	80 95       	com	r24
    6820:	90 95       	com	r25
    6822:	8e 0f       	add	r24, r30
    6824:	9f 1f       	adc	r25, r31
    6826:	08 95       	ret

00006828 <strstr_P>:
    6828:	fb 01       	movw	r30, r22
    682a:	55 91       	lpm	r21, Z+
    682c:	55 23       	and	r21, r21
    682e:	a9 f0       	breq	.+42     	; 0x685a <strstr_P+0x32>
    6830:	bf 01       	movw	r22, r30
    6832:	dc 01       	movw	r26, r24
    6834:	4d 91       	ld	r20, X+
    6836:	45 17       	cp	r20, r21
    6838:	41 11       	cpse	r20, r1
    683a:	e1 f7       	brne	.-8      	; 0x6834 <strstr_P+0xc>
    683c:	59 f4       	brne	.+22     	; 0x6854 <strstr_P+0x2c>
    683e:	cd 01       	movw	r24, r26
    6840:	05 90       	lpm	r0, Z+
    6842:	00 20       	and	r0, r0
    6844:	49 f0       	breq	.+18     	; 0x6858 <strstr_P+0x30>
    6846:	4d 91       	ld	r20, X+
    6848:	40 15       	cp	r20, r0
    684a:	41 11       	cpse	r20, r1
    684c:	c9 f3       	breq	.-14     	; 0x6840 <strstr_P+0x18>
    684e:	fb 01       	movw	r30, r22
    6850:	41 11       	cpse	r20, r1
    6852:	ef cf       	rjmp	.-34     	; 0x6832 <strstr_P+0xa>
    6854:	81 e0       	ldi	r24, 0x01	; 1
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	01 97       	sbiw	r24, 0x01	; 1
    685a:	08 95       	ret

0000685c <strchr>:
    685c:	fc 01       	movw	r30, r24
    685e:	81 91       	ld	r24, Z+
    6860:	86 17       	cp	r24, r22
    6862:	21 f0       	breq	.+8      	; 0x686c <strchr+0x10>
    6864:	88 23       	and	r24, r24
    6866:	d9 f7       	brne	.-10     	; 0x685e <strchr+0x2>
    6868:	99 27       	eor	r25, r25
    686a:	08 95       	ret
    686c:	31 97       	sbiw	r30, 0x01	; 1
    686e:	cf 01       	movw	r24, r30
    6870:	08 95       	ret

00006872 <strcmp>:
    6872:	fb 01       	movw	r30, r22
    6874:	dc 01       	movw	r26, r24
    6876:	8d 91       	ld	r24, X+
    6878:	01 90       	ld	r0, Z+
    687a:	80 19       	sub	r24, r0
    687c:	01 10       	cpse	r0, r1
    687e:	d9 f3       	breq	.-10     	; 0x6876 <strcmp+0x4>
    6880:	99 0b       	sbc	r25, r25
    6882:	08 95       	ret

00006884 <strncpy>:
    6884:	fb 01       	movw	r30, r22
    6886:	dc 01       	movw	r26, r24
    6888:	41 50       	subi	r20, 0x01	; 1
    688a:	50 40       	sbci	r21, 0x00	; 0
    688c:	48 f0       	brcs	.+18     	; 0x68a0 <strncpy+0x1c>
    688e:	01 90       	ld	r0, Z+
    6890:	0d 92       	st	X+, r0
    6892:	00 20       	and	r0, r0
    6894:	c9 f7       	brne	.-14     	; 0x6888 <strncpy+0x4>
    6896:	01 c0       	rjmp	.+2      	; 0x689a <strncpy+0x16>
    6898:	1d 92       	st	X+, r1
    689a:	41 50       	subi	r20, 0x01	; 1
    689c:	50 40       	sbci	r21, 0x00	; 0
    689e:	e0 f7       	brcc	.-8      	; 0x6898 <strncpy+0x14>
    68a0:	08 95       	ret

000068a2 <strstr>:
    68a2:	fb 01       	movw	r30, r22
    68a4:	51 91       	ld	r21, Z+
    68a6:	55 23       	and	r21, r21
    68a8:	a9 f0       	breq	.+42     	; 0x68d4 <strstr+0x32>
    68aa:	bf 01       	movw	r22, r30
    68ac:	dc 01       	movw	r26, r24
    68ae:	4d 91       	ld	r20, X+
    68b0:	45 17       	cp	r20, r21
    68b2:	41 11       	cpse	r20, r1
    68b4:	e1 f7       	brne	.-8      	; 0x68ae <strstr+0xc>
    68b6:	59 f4       	brne	.+22     	; 0x68ce <strstr+0x2c>
    68b8:	cd 01       	movw	r24, r26
    68ba:	01 90       	ld	r0, Z+
    68bc:	00 20       	and	r0, r0
    68be:	49 f0       	breq	.+18     	; 0x68d2 <strstr+0x30>
    68c0:	4d 91       	ld	r20, X+
    68c2:	40 15       	cp	r20, r0
    68c4:	41 11       	cpse	r20, r1
    68c6:	c9 f3       	breq	.-14     	; 0x68ba <strstr+0x18>
    68c8:	fb 01       	movw	r30, r22
    68ca:	41 11       	cpse	r20, r1
    68cc:	ef cf       	rjmp	.-34     	; 0x68ac <strstr+0xa>
    68ce:	81 e0       	ldi	r24, 0x01	; 1
    68d0:	90 e0       	ldi	r25, 0x00	; 0
    68d2:	01 97       	sbiw	r24, 0x01	; 1
    68d4:	08 95       	ret

000068d6 <__mulhi_const_10>:
    68d6:	7a e0       	ldi	r23, 0x0A	; 10
    68d8:	97 9f       	mul	r25, r23
    68da:	90 2d       	mov	r25, r0
    68dc:	87 9f       	mul	r24, r23
    68de:	80 2d       	mov	r24, r0
    68e0:	91 0d       	add	r25, r1
    68e2:	11 24       	eor	r1, r1
    68e4:	08 95       	ret

000068e6 <__utoa_ncheck>:
    68e6:	bb 27       	eor	r27, r27

000068e8 <__utoa_common>:
    68e8:	fb 01       	movw	r30, r22
    68ea:	55 27       	eor	r21, r21
    68ec:	aa 27       	eor	r26, r26
    68ee:	88 0f       	add	r24, r24
    68f0:	99 1f       	adc	r25, r25
    68f2:	aa 1f       	adc	r26, r26
    68f4:	a4 17       	cp	r26, r20
    68f6:	10 f0       	brcs	.+4      	; 0x68fc <__utoa_common+0x14>
    68f8:	a4 1b       	sub	r26, r20
    68fa:	83 95       	inc	r24
    68fc:	50 51       	subi	r21, 0x10	; 16
    68fe:	b9 f7       	brne	.-18     	; 0x68ee <__utoa_common+0x6>
    6900:	a0 5d       	subi	r26, 0xD0	; 208
    6902:	aa 33       	cpi	r26, 0x3A	; 58
    6904:	08 f0       	brcs	.+2      	; 0x6908 <__utoa_common+0x20>
    6906:	a9 5d       	subi	r26, 0xD9	; 217
    6908:	a1 93       	st	Z+, r26
    690a:	00 97       	sbiw	r24, 0x00	; 0
    690c:	79 f7       	brne	.-34     	; 0x68ec <__utoa_common+0x4>
    690e:	b1 11       	cpse	r27, r1
    6910:	b1 93       	st	Z+, r27
    6912:	11 92       	st	Z+, r1
    6914:	cb 01       	movw	r24, r22
    6916:	0c 94 8d 34 	jmp	0x691a	; 0x691a <strrev>

0000691a <strrev>:
    691a:	dc 01       	movw	r26, r24
    691c:	fc 01       	movw	r30, r24
    691e:	67 2f       	mov	r22, r23
    6920:	71 91       	ld	r23, Z+
    6922:	77 23       	and	r23, r23
    6924:	e1 f7       	brne	.-8      	; 0x691e <strrev+0x4>
    6926:	32 97       	sbiw	r30, 0x02	; 2
    6928:	04 c0       	rjmp	.+8      	; 0x6932 <strrev+0x18>
    692a:	7c 91       	ld	r23, X
    692c:	6d 93       	st	X+, r22
    692e:	70 83       	st	Z, r23
    6930:	62 91       	ld	r22, -Z
    6932:	ae 17       	cp	r26, r30
    6934:	bf 07       	cpc	r27, r31
    6936:	c8 f3       	brcs	.-14     	; 0x692a <strrev+0x10>
    6938:	08 95       	ret

0000693a <eeprom_read_byte>:
    693a:	f9 99       	sbic	0x1f, 1	; 31
    693c:	fe cf       	rjmp	.-4      	; 0x693a <eeprom_read_byte>
    693e:	92 bd       	out	0x22, r25	; 34
    6940:	81 bd       	out	0x21, r24	; 33
    6942:	f8 9a       	sbi	0x1f, 0	; 31
    6944:	99 27       	eor	r25, r25
    6946:	80 b5       	in	r24, 0x20	; 32
    6948:	08 95       	ret

0000694a <eeprom_write_byte>:
    694a:	26 2f       	mov	r18, r22

0000694c <eeprom_write_r18>:
    694c:	f9 99       	sbic	0x1f, 1	; 31
    694e:	fe cf       	rjmp	.-4      	; 0x694c <eeprom_write_r18>
    6950:	1f ba       	out	0x1f, r1	; 31
    6952:	92 bd       	out	0x22, r25	; 34
    6954:	81 bd       	out	0x21, r24	; 33
    6956:	20 bd       	out	0x20, r18	; 32
    6958:	0f b6       	in	r0, 0x3f	; 63
    695a:	f8 94       	cli
    695c:	fa 9a       	sbi	0x1f, 2	; 31
    695e:	f9 9a       	sbi	0x1f, 1	; 31
    6960:	0f be       	out	0x3f, r0	; 63
    6962:	01 96       	adiw	r24, 0x01	; 1
    6964:	08 95       	ret

00006966 <__do_global_dtors>:
    6966:	13 e0       	ldi	r17, 0x03	; 3
    6968:	c3 e7       	ldi	r28, 0x73	; 115
    696a:	d3 e0       	ldi	r29, 0x03	; 3
    696c:	04 c0       	rjmp	.+8      	; 0x6976 <__do_global_dtors+0x10>
    696e:	fe 01       	movw	r30, r28
    6970:	0e 94 b0 33 	call	0x6760	; 0x6760 <__tablejump2__>
    6974:	21 96       	adiw	r28, 0x01	; 1
    6976:	c4 37       	cpi	r28, 0x74	; 116
    6978:	d1 07       	cpc	r29, r17
    697a:	c9 f7       	brne	.-14     	; 0x696e <__do_global_dtors+0x8>
    697c:	f8 94       	cli

0000697e <__stop_program>:
    697e:	ff cf       	rjmp	.-2      	; 0x697e <__stop_program>
