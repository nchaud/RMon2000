
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00003e5e  00003ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e1  00800268  00800268  0000405a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000405a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c30  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f0d2  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047ce  00000000  00000000  00023dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ca9  00000000  00000000  0002859c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ce4  00000000  00000000  0002f248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000056de  00000000  00000000  00031f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000102c2  00000000  00000000  0003760a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be8  00000000  00000000  000478cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 25 03 	jmp	0x64a	; 0x64a <__dtors_end>
       4:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
       8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
       c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__vector_3>
      10:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__vector_3>
      14:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__vector_3>
      18:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      1c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      20:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      24:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      28:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      2c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      30:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      34:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      38:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      3c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      40:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__vector_16>
      44:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      48:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__vector_18>
      4c:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__vector_19>
      50:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      54:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      58:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      5c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>
      60:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_24>
      64:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     224:	54 65 6d 70 3d 00                                   Temp=.

0000022a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     22a:	20 7c 20 00                                          | .

0000022e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     22e:	43 75 72 72 65 6e 74 3d 00                          Current=.

00000237 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     237:	20 7c 20 00                                          | .

0000023b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     23b:	50 56 2d 56 3d 00                                   PV-V=.

00000241 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     241:	20 7c 20 00                                          | .

00000245 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     245:	42 61 74 74 2d 56 3d 00                             Batt-V=.

0000024d <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     24d:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

0000025a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     25a:	20 7c 20 00                                          | .

0000025e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     25e:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

00000267 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     267:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000271 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     271:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     281:	6f 64 65 3d 00                                      ode=.

00000286 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     286:	20 7c 20 00                                          | .

0000028a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     28a:	42 45 52 3d 00                                      BER=.

0000028f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     28f:	20 7c 20 00                                          | .

00000293 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     293:	52 53 53 49 3d 00                                   RSSI=.

00000299 <_ZL12b64_alphabet>:
     299:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     2a9:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     2b9:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     2c9:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000002da <_ZZ4loopE3__c>:
     2da:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000002e4 <_ZZ8sendDatavE3__c_0>:
     2e4:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     2f4:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     304:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

00000313 <_ZZ8sendDatavE3__c>:
     313:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     323:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

00000334 <_ZZ12takeReadingsvE3__c>:
     334:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     344:	2e 2e 00                                            ...

00000347 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     347:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     357:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

00000362 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     362:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     372:	73 2e 2e 2e 00                                      s....

00000377 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     377:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     387:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000392 <_ZZ21ensureFonaInitialisedbE3__c>:
     392:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     3a2:	61 2e 2e 2e 00                                      a....

000003a7 <_ZZ5setupE3__c>:
     3a7:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003b3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_21>:
     3b3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3c3:	2d 2d 2d 2d 2d 2d 2d 2d 00                          --------.

000003cc <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_20>:
     3cc:	47 53 4d 20 50 61 79 6c 6f 61 64 20 54 6f 20 42     GSM Payload To B
     3dc:	65 20 53 65 6e 74 20 4f 76 65 72 20 57 65 62 3a     e Sent Over Web:
	...

000003ed <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_19>:
     3ed:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     3fd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

00000408 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_18>:
     408:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     418:	4c 20 40 35 20 2a 2a 2a 00                          L @5 ***.

00000421 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_17>:
     421:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     431:	4c 20 40 34 20 2a 2a 2a 00                          L @4 ***.

0000043a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_16>:
     43a:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     44a:	4c 20 40 33 20 2a 2a 2a 00                          L @3 ***.

00000453 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_15>:
     453:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     463:	4c 20 40 32 20 2a 2a 2a 00                          L @2 ***.

0000046c <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_14>:
     46c:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     47c:	4c 20 40 31 20 2a 2a 2a 00                          L @1 ***.

00000485 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_13>:
     485:	43 48 41 52 20 45 58 43 45 45 44 45 44 20 42 4f     CHAR EXCEEDED BO
     495:	55 4e 44 53 20 49 53 00                             UNDS IS.

0000049d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_12>:
     49d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     4ad:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

000004b8 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_11>:
     4b8:	54 65 73 74 20 46 6f 72 20 50 72 69 6e 74 20 4f     Test For Print O
     4c8:	75 74 70 75 74 3a 00                                utput:.

000004cf <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_10>:
     4cf:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     4df:	30 20 2a 2a 2a 00                                   0 ***.

000004e5 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_9>:
     4e5:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 39     *** TEST FAIL @9
     4f5:	20 2a 2a 2a 00                                       ***.

000004fa <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_8>:
     4fa:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 38     *** TEST FAIL @8
     50a:	20 2a 2a 2a 00                                       ***.

0000050f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_7>:
     50f:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 37     *** TEST FAIL @7
     51f:	20 2a 2a 2a 00                                       ***.

00000524 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_6>:
     524:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 36     *** TEST FAIL @6
     534:	20 2a 2a 2a 00                                       ***.

00000539 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_5>:
     539:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 35     *** TEST FAIL @5
     549:	20 2a 2a 2a 00                                       ***.

0000054e <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_4>:
     54e:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 34     *** TEST FAIL @4
     55e:	20 2a 2a 2a 00                                       ***.

00000563 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_3>:
     563:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 33     *** TEST FAIL @3
     573:	20 2a 2a 2a 00                                       ***.

00000578 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_2>:
     578:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 32     *** TEST FAIL @2
     588:	20 2a 2a 2a 00                                       ***.

0000058d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_1>:
     58d:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     59d:	20 2a 2a 2a 00                                       ***.

000005a2 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_0>:
     5a2:	43 61 73 74 20 62 61 63 6b 20 61 66 74 65 72 20     Cast back after 
     5b2:	69 6e 74 20 73 74 6f 72 61 67 65 20 76 61 6c 3a     int storage val:
	...

000005c3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c>:
     5c3:	4e 65 74 73 74 61 74 20 35 20 2b 20 52 65 73 75     Netstat 5 + Resu
     5d3:	6c 74 43 6f 64 65 20 31 20 2b 20 45 72 72 6f 72     ltCode 1 + Error
     5e3:	20 31 3d 00                                          1=.

000005e7 <digital_pin_to_timer_PGM>:
     5e7:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     5f7:	00 00 00 00                                         ....

000005fb <digital_pin_to_bit_mask_PGM>:
     5fb:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     60b:	04 08 10 20                                         ... 

0000060f <digital_pin_to_port_PGM>:
     60f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     61f:	03 03 03 03                                         ....

00000623 <port_to_input_PGM>:
     623:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000062d <port_to_output_PGM>:
     62d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000637 <port_to_mode_PGM>:
     637:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000642 <__ctors_start>:
     642:	06 0d       	add	r16, r6
     644:	94 11       	cpse	r25, r4
     646:	6c 15       	cp	r22, r12

00000648 <__ctors_end>:
     648:	16 0d       	add	r17, r6

0000064a <__dtors_end>:
     64a:	11 24       	eor	r1, r1
     64c:	1f be       	out	0x3f, r1	; 63
     64e:	cf ef       	ldi	r28, 0xFF	; 255
     650:	d8 e0       	ldi	r29, 0x08	; 8
     652:	de bf       	out	0x3e, r29	; 62
     654:	cd bf       	out	0x3d, r28	; 61

00000656 <__do_copy_data>:
     656:	12 e0       	ldi	r17, 0x02	; 2
     658:	a0 e0       	ldi	r26, 0x00	; 0
     65a:	b1 e0       	ldi	r27, 0x01	; 1
     65c:	ee e5       	ldi	r30, 0x5E	; 94
     65e:	fe e3       	ldi	r31, 0x3E	; 62
     660:	02 c0       	rjmp	.+4      	; 0x666 <__do_copy_data+0x10>
     662:	05 90       	lpm	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	a8 36       	cpi	r26, 0x68	; 104
     668:	b1 07       	cpc	r27, r17
     66a:	d9 f7       	brne	.-10     	; 0x662 <__do_copy_data+0xc>

0000066c <__do_clear_bss>:
     66c:	25 e0       	ldi	r18, 0x05	; 5
     66e:	a8 e6       	ldi	r26, 0x68	; 104
     670:	b2 e0       	ldi	r27, 0x02	; 2
     672:	01 c0       	rjmp	.+2      	; 0x676 <.do_clear_bss_start>

00000674 <.do_clear_bss_loop>:
     674:	1d 92       	st	X+, r1

00000676 <.do_clear_bss_start>:
     676:	a9 34       	cpi	r26, 0x49	; 73
     678:	b2 07       	cpc	r27, r18
     67a:	e1 f7       	brne	.-8      	; 0x674 <.do_clear_bss_loop>

0000067c <__do_global_ctors>:
     67c:	13 e0       	ldi	r17, 0x03	; 3
     67e:	c4 e2       	ldi	r28, 0x24	; 36
     680:	d3 e0       	ldi	r29, 0x03	; 3
     682:	04 c0       	rjmp	.+8      	; 0x68c <__do_global_ctors+0x10>
     684:	21 97       	sbiw	r28, 0x01	; 1
     686:	fe 01       	movw	r30, r28
     688:	0e 94 91 1c 	call	0x3922	; 0x3922 <__tablejump2__>
     68c:	c1 32       	cpi	r28, 0x21	; 33
     68e:	d1 07       	cpc	r29, r17
     690:	c9 f7       	brne	.-14     	; 0x684 <__do_global_ctors+0x8>
     692:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <main>
     696:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__do_global_dtors>

0000069a <__bad_interrupt>:
     69a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000069e <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     69e:	83 5e       	subi	r24, 0xE3	; 227
     6a0:	9e 4f       	sbci	r25, 0xFE	; 254
     6a2:	dc 01       	movw	r26, r24
     6a4:	8d 91       	ld	r24, X+
     6a6:	9c 91       	ld	r25, X
     6a8:	dc 01       	movw	r26, r24
     6aa:	ed 91       	ld	r30, X+
     6ac:	fc 91       	ld	r31, X
     6ae:	04 80       	ldd	r0, Z+4	; 0x04
     6b0:	f5 81       	ldd	r31, Z+5	; 0x05
     6b2:	e0 2d       	mov	r30, r0
     6b4:	09 94       	ijmp

000006b6 <_ZN13Adafruit_FONA5writeEh>:
     6b6:	83 5e       	subi	r24, 0xE3	; 227
     6b8:	9e 4f       	sbci	r25, 0xFE	; 254
     6ba:	dc 01       	movw	r26, r24
     6bc:	8d 91       	ld	r24, X+
     6be:	9c 91       	ld	r25, X
     6c0:	dc 01       	movw	r26, r24
     6c2:	ed 91       	ld	r30, X+
     6c4:	fc 91       	ld	r31, X
     6c6:	01 90       	ld	r0, Z+
     6c8:	f0 81       	ld	r31, Z
     6ca:	e0 2d       	mov	r30, r0
     6cc:	09 94       	ijmp

000006ce <_ZN13Adafruit_FONA4readEv>:
     6ce:	83 5e       	subi	r24, 0xE3	; 227
     6d0:	9e 4f       	sbci	r25, 0xFE	; 254
     6d2:	dc 01       	movw	r26, r24
     6d4:	8d 91       	ld	r24, X+
     6d6:	9c 91       	ld	r25, X
     6d8:	dc 01       	movw	r26, r24
     6da:	ed 91       	ld	r30, X+
     6dc:	fc 91       	ld	r31, X
     6de:	06 80       	ldd	r0, Z+6	; 0x06
     6e0:	f7 81       	ldd	r31, Z+7	; 0x07
     6e2:	e0 2d       	mov	r30, r0
     6e4:	09 94       	ijmp

000006e6 <_ZN13Adafruit_FONA4peekEv>:
     6e6:	83 5e       	subi	r24, 0xE3	; 227
     6e8:	9e 4f       	sbci	r25, 0xFE	; 254
     6ea:	dc 01       	movw	r26, r24
     6ec:	8d 91       	ld	r24, X+
     6ee:	9c 91       	ld	r25, X
     6f0:	dc 01       	movw	r26, r24
     6f2:	ed 91       	ld	r30, X+
     6f4:	fc 91       	ld	r31, X
     6f6:	00 84       	ldd	r0, Z+8	; 0x08
     6f8:	f1 85       	ldd	r31, Z+9	; 0x09
     6fa:	e0 2d       	mov	r30, r0
     6fc:	09 94       	ijmp

000006fe <_ZN13Adafruit_FONA5flushEv>:
     6fe:	83 5e       	subi	r24, 0xE3	; 227
     700:	9e 4f       	sbci	r25, 0xFE	; 254
     702:	dc 01       	movw	r26, r24
     704:	8d 91       	ld	r24, X+
     706:	9c 91       	ld	r25, X
     708:	dc 01       	movw	r26, r24
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	02 84       	ldd	r0, Z+10	; 0x0a
     710:	f3 85       	ldd	r31, Z+11	; 0x0b
     712:	e0 2d       	mov	r30, r0
     714:	09 94       	ijmp

00000716 <_ZN13Adafruit_FONAC1Eab>:
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 d0       	rcall	.+0      	; 0x728 <_ZN13Adafruit_FONAC1Eab+0x12>
     728:	00 d0       	rcall	.+0      	; 0x72a <_ZN13Adafruit_FONAC1Eab+0x14>
     72a:	00 d0       	rcall	.+0      	; 0x72c <_ZN13Adafruit_FONAC1Eab+0x16>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	8c 01       	movw	r16, r24
     732:	c6 2e       	mov	r12, r22
     734:	d4 2e       	mov	r13, r20
     736:	fc 01       	movw	r30, r24
     738:	13 82       	std	Z+3, r1	; 0x03
     73a:	12 82       	std	Z+2, r1	; 0x02
     73c:	88 ee       	ldi	r24, 0xE8	; 232
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	84 83       	std	Z+4, r24	; 0x04
     746:	95 83       	std	Z+5, r25	; 0x05
     748:	a6 83       	std	Z+6, r26	; 0x06
     74a:	b7 83       	std	Z+7, r27	; 0x07
     74c:	8a e3       	ldi	r24, 0x3A	; 58
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	91 83       	std	Z+1, r25	; 0x01
     752:	80 83       	st	Z, r24
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	86 87       	std	Z+14, r24	; 0x0e
     758:	78 01       	movw	r14, r16
     75a:	fb ee       	ldi	r31, 0xEB	; 235
     75c:	ef 1a       	sub	r14, r31
     75e:	fe ef       	ldi	r31, 0xFE	; 254
     760:	ff 0a       	sbc	r15, r31
     762:	6b e4       	ldi	r22, 0x4B	; 75
     764:	72 e0       	ldi	r23, 0x02	; 2
     766:	c7 01       	movw	r24, r14
     768:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6StringC1EPKc>
     76c:	f8 01       	movw	r30, r16
     76e:	c4 86       	std	Z+12, r12	; 0x0c
     770:	d5 86       	std	Z+13, r13	; 0x0d
     772:	e2 5f       	subi	r30, 0xF2	; 242
     774:	fe 4f       	sbci	r31, 0xFE	; 254
     776:	8c e1       	ldi	r24, 0x1C	; 28
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	91 83       	std	Z+1, r25	; 0x01
     77c:	80 83       	st	Z, r24
     77e:	32 96       	adiw	r30, 0x02	; 2
     780:	11 82       	std	Z+1, r1	; 0x01
     782:	10 82       	st	Z, r1
     784:	32 96       	adiw	r30, 0x02	; 2
     786:	11 82       	std	Z+1, r1	; 0x01
     788:	10 82       	st	Z, r1
     78a:	3b 96       	adiw	r30, 0x0b	; 11
     78c:	11 82       	std	Z+1, r1	; 0x01
     78e:	10 82       	st	Z, r1
     790:	39 97       	sbiw	r30, 0x09	; 9
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 83       	st	Z, r24
     796:	67 e0       	ldi	r22, 0x07	; 7
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	ce 01       	movw	r24, r28
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6StringC1EPKc>
     7a2:	be 01       	movw	r22, r28
     7a4:	6f 5f       	subi	r22, 0xFF	; 255
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	c7 01       	movw	r24, r14
     7aa:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN6StringaSEOS_>
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_ZN6StringD1Ev>
     7b6:	f8 01       	movw	r30, r16
     7b8:	e5 5e       	subi	r30, 0xE5	; 229
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	89 e1       	ldi	r24, 0x19	; 25
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	80 83       	st	Z, r24
     7c4:	26 96       	adiw	r28, 0x06	; 6
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	08 95       	ret

000007e2 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     7e2:	8b 5e       	subi	r24, 0xEB	; 235
     7e4:	9e 4f       	sbci	r25, 0xFE	; 254
     7e6:	0c 94 89 19 	jmp	0x3312	; 0x3312 <_ZN6StringaSERKS_>

000007ea <_ZN13Adafruit_FONA10flushInputEv>:
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ec 01       	movw	r28, r24
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	8c 01       	movw	r16, r24
     7fa:	0f 5f       	subi	r16, 0xFF	; 255
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	88 97       	sbiw	r24, 0x28	; 40
     800:	d8 f4       	brcc	.+54     	; 0x838 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     802:	e8 81       	ld	r30, Y
     804:	f9 81       	ldd	r31, Y+1	; 0x01
     806:	04 80       	ldd	r0, Z+4	; 0x04
     808:	f5 81       	ldd	r31, Z+5	; 0x05
     80a:	e0 2d       	mov	r30, r0
     80c:	ce 01       	movw	r24, r28
     80e:	09 95       	icall
     810:	89 2b       	or	r24, r25
     812:	51 f0       	breq	.+20     	; 0x828 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     814:	e8 81       	ld	r30, Y
     816:	f9 81       	ldd	r31, Y+1	; 0x01
     818:	06 80       	ldd	r0, Z+6	; 0x06
     81a:	f7 81       	ldd	r31, Z+7	; 0x07
     81c:	e0 2d       	mov	r30, r0
     81e:	ce 01       	movw	r24, r28
     820:	09 95       	icall
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	ed cf       	rjmp	.-38     	; 0x802 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     834:	c8 01       	movw	r24, r16
     836:	e0 cf       	rjmp	.-64     	; 0x7f8 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <_ZN13Adafruit_FONA8readlineEjb>:
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	7c 01       	movw	r14, r24
     856:	b4 2e       	mov	r11, r20
     858:	8b 01       	movw	r16, r22
     85a:	00 0f       	add	r16, r16
     85c:	11 1f       	adc	r17, r17
     85e:	00 0f       	add	r16, r16
     860:	11 1f       	adc	r17, r17
     862:	c0 e0       	ldi	r28, 0x00	; 0
     864:	d0 e0       	ldi	r29, 0x00	; 0
     866:	67 01       	movw	r12, r14
     868:	83 ee       	ldi	r24, 0xE3	; 227
     86a:	c8 1a       	sub	r12, r24
     86c:	8e ef       	ldi	r24, 0xFE	; 254
     86e:	d8 0a       	sbc	r13, r24
     870:	01 15       	cp	r16, r1
     872:	11 05       	cpc	r17, r1
     874:	c9 f1       	breq	.+114    	; 0x8e8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     876:	ce 3f       	cpi	r28, 0xFE	; 254
     878:	d1 05       	cpc	r29, r1
     87a:	98 f0       	brcs	.+38     	; 0x8a2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     87c:	64 e8       	ldi	r22, 0x84	; 132
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	8b e5       	ldi	r24, 0x5B	; 91
     882:	94 e0       	ldi	r25, 0x04	; 4
     884:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
     888:	2f c0       	rjmp	.+94     	; 0x8e8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     88a:	f6 01       	movw	r30, r12
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	dc 01       	movw	r26, r24
     892:	ed 91       	ld	r30, X+
     894:	fc 91       	ld	r31, X
     896:	06 80       	ldd	r0, Z+6	; 0x06
     898:	f7 81       	ldd	r31, Z+7	; 0x07
     89a:	e0 2d       	mov	r30, r0
     89c:	09 95       	icall
     89e:	8d 30       	cpi	r24, 0x0D	; 13
     8a0:	69 f4       	brne	.+26     	; 0x8bc <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     8a2:	d6 01       	movw	r26, r12
     8a4:	8d 91       	ld	r24, X+
     8a6:	9c 91       	ld	r25, X
     8a8:	dc 01       	movw	r26, r24
     8aa:	ed 91       	ld	r30, X+
     8ac:	fc 91       	ld	r31, X
     8ae:	04 80       	ldd	r0, Z+4	; 0x04
     8b0:	f5 81       	ldd	r31, Z+5	; 0x05
     8b2:	e0 2d       	mov	r30, r0
     8b4:	09 95       	icall
     8b6:	89 2b       	or	r24, r25
     8b8:	41 f7       	brne	.-48     	; 0x88a <_ZN13Adafruit_FONA8readlineEjb+0x48>
     8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     8bc:	8a 30       	cpi	r24, 0x0A	; 10
     8be:	21 f4       	brne	.+8      	; 0x8c8 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     8c0:	20 97       	sbiw	r28, 0x00	; 0
     8c2:	79 f3       	breq	.-34     	; 0x8a2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     8c4:	bb 20       	and	r11, r11
     8c6:	81 f0       	breq	.+32     	; 0x8e8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     8c8:	f7 01       	movw	r30, r14
     8ca:	ec 0f       	add	r30, r28
     8cc:	fd 1f       	adc	r31, r29
     8ce:	87 87       	std	Z+15, r24	; 0x0f
     8d0:	21 96       	adiw	r28, 0x01	; 1
     8d2:	e7 cf       	rjmp	.-50     	; 0x8a2 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     8d4:	01 50       	subi	r16, 0x01	; 1
     8d6:	11 09       	sbc	r17, r1
     8d8:	39 f0       	breq	.+14     	; 0x8e8 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     8e6:	c4 cf       	rjmp	.-120    	; 0x870 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     8e8:	f7 01       	movw	r30, r14
     8ea:	ec 0f       	add	r30, r28
     8ec:	fd 1f       	adc	r31, r29
     8ee:	17 86       	std	Z+15, r1	; 0x0f
     8f0:	8c 2f       	mov	r24, r28
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	08 95       	ret

00000906 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	ec 01       	movw	r28, r24
     910:	8b 01       	movw	r16, r22
     912:	ba 01       	movw	r22, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	0e 94 21 04 	call	0x842	; 0x842 <_ZN13Adafruit_FONA8readlineEjb>
     91a:	6a e8       	ldi	r22, 0x8A	; 138
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	8b e5       	ldi	r24, 0x5B	; 91
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     926:	2f 96       	adiw	r28, 0x0f	; 15
     928:	be 01       	movw	r22, r28
     92a:	8b e5       	ldi	r24, 0x5B	; 91
     92c:	94 e0       	ldi	r25, 0x04	; 4
     92e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     932:	b8 01       	movw	r22, r16
     934:	ce 01       	movw	r24, r28
     936:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <strcmp_P>
     93a:	21 e0       	ldi	r18, 0x01	; 1
     93c:	89 2b       	or	r24, r25
     93e:	09 f0       	breq	.+2      	; 0x942 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	82 2f       	mov	r24, r18
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
     95c:	8b 01       	movw	r16, r22
     95e:	7a 01       	movw	r14, r20
     960:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN13Adafruit_FONA10flushInputEv>
     964:	6d e7       	ldi	r22, 0x7D	; 125
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	8b e5       	ldi	r24, 0x5B	; 91
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     970:	b8 01       	movw	r22, r16
     972:	8b e5       	ldi	r24, 0x5B	; 91
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
     97a:	fe 01       	movw	r30, r28
     97c:	e3 5e       	subi	r30, 0xE3	; 227
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	b8 01       	movw	r22, r16
     982:	80 81       	ld	r24, Z
     984:	91 81       	ldd	r25, Z+1	; 0x01
     986:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	b7 01       	movw	r22, r14
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 21 04 	call	0x842	; 0x842 <_ZN13Adafruit_FONA8readlineEjb>
     994:	18 2f       	mov	r17, r24
     996:	66 e7       	ldi	r22, 0x76	; 118
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	8b e5       	ldi	r24, 0x5B	; 91
     99c:	94 e0       	ldi	r25, 0x04	; 4
     99e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     9a2:	be 01       	movw	r22, r28
     9a4:	61 5f       	subi	r22, 0xF1	; 241
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	8b e5       	ldi	r24, 0x5B	; 91
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     9b0:	81 2f       	mov	r24, r17
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	08 95       	ret

000009c0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
     9d6:	6b 01       	movw	r12, r22
     9d8:	7a 01       	movw	r14, r20
     9da:	59 01       	movw	r10, r18
     9dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN13Adafruit_FONA10flushInputEv>
     9e0:	6f e6       	ldi	r22, 0x6F	; 111
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	8b e5       	ldi	r24, 0x5B	; 91
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     9ec:	b6 01       	movw	r22, r12
     9ee:	8b e5       	ldi	r24, 0x5B	; 91
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     9f6:	62 e2       	ldi	r22, 0x22	; 34
     9f8:	8b e5       	ldi	r24, 0x5B	; 91
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN5Print5printEc>
     a00:	b7 01       	movw	r22, r14
     a02:	8b e5       	ldi	r24, 0x5B	; 91
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     a0a:	62 e2       	ldi	r22, 0x22	; 34
     a0c:	8b e5       	ldi	r24, 0x5B	; 91
     a0e:	94 e0       	ldi	r25, 0x04	; 4
     a10:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN5Print7printlnEc>
     a14:	8e 01       	movw	r16, r28
     a16:	03 5e       	subi	r16, 0xE3	; 227
     a18:	1e 4f       	sbci	r17, 0xFE	; 254
     a1a:	b6 01       	movw	r22, r12
     a1c:	f8 01       	movw	r30, r16
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     a26:	62 e2       	ldi	r22, 0x22	; 34
     a28:	f8 01       	movw	r30, r16
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN5Print5printEc>
     a32:	b7 01       	movw	r22, r14
     a34:	f8 01       	movw	r30, r16
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     a3e:	62 e2       	ldi	r22, 0x22	; 34
     a40:	f8 01       	movw	r30, r16
     a42:	80 81       	ld	r24, Z
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN5Print7printlnEc>
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	b5 01       	movw	r22, r10
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 21 04 	call	0x842	; 0x842 <_ZN13Adafruit_FONA8readlineEjb>
     a54:	18 2f       	mov	r17, r24
     a56:	68 e6       	ldi	r22, 0x68	; 104
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	8b e5       	ldi	r24, 0x5B	; 91
     a5c:	94 e0       	ldi	r25, 0x04	; 4
     a5e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     a62:	be 01       	movw	r22, r28
     a64:	61 5f       	subi	r22, 0xF1	; 241
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	8b e5       	ldi	r24, 0x5B	; 91
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     a70:	81 2f       	mov	r24, r17
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	bf 90       	pop	r11
     a84:	af 90       	pop	r10
     a86:	08 95       	ret

00000a88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	8a 01       	movw	r16, r20
     a94:	a9 01       	movw	r20, r18
     a96:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     a9a:	88 23       	and	r24, r24
     a9c:	41 f0       	breq	.+16     	; 0xaae <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     a9e:	b8 01       	movw	r22, r16
     aa0:	ce 01       	movw	r24, r28
     aa2:	0f 96       	adiw	r24, 0x0f	; 15
     aa4:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <strcmp_P>
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	89 2b       	or	r24, r25
     aac:	09 f0       	breq	.+2      	; 0xab0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	82 2f       	mov	r24, r18
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <_ZN13Adafruit_FONA5beginEhh>:
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	ec 01       	movw	r28, r24
     ace:	f6 2e       	mov	r15, r22
     ad0:	e4 2e       	mov	r14, r20
     ad2:	8f e1       	ldi	r24, 0x1F	; 31
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <_Znwj>
     ada:	8c 01       	movw	r16, r24
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	4e 2d       	mov	r20, r14
     ae0:	6f 2d       	mov	r22, r15
     ae2:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <_ZN14SoftwareSerialC1Ehhb>
     ae6:	7e 01       	movw	r14, r28
     ae8:	83 ee       	ldi	r24, 0xE3	; 227
     aea:	e8 1a       	sub	r14, r24
     aec:	8e ef       	ldi	r24, 0xFE	; 254
     aee:	f8 0a       	sbc	r15, r24
     af0:	d7 01       	movw	r26, r14
     af2:	0d 93       	st	X+, r16
     af4:	1c 93       	st	X, r17
     af6:	40 ec       	ldi	r20, 0xC0	; 192
     af8:	52 e1       	ldi	r21, 0x12	; 18
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	c8 01       	movw	r24, r16
     b00:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZN14SoftwareSerial5beginEl>
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	8c 85       	ldd	r24, Y+12	; 0x0c
     b08:	0e 94 65 18 	call	0x30ca	; 0x30ca <pinMode>
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b10:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
     b14:	6a e0       	ldi	r22, 0x0A	; 10
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	8c 85       	ldd	r24, Y+12	; 0x0c
     b24:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
     b28:	64 e6       	ldi	r22, 0x64	; 100
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	8c 85       	ldd	r24, Y+12	; 0x0c
     b38:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
     b3c:	68 ef       	ldi	r22, 0xF8	; 248
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	8b e5       	ldi	r24, 0x5B	; 91
     b42:	94 e0       	ldi	r25, 0x04	; 4
     b44:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
     b48:	8e e0       	ldi	r24, 0x0E	; 14
     b4a:	c8 2e       	mov	r12, r24
     b4c:	d1 2c       	mov	r13, r1
     b4e:	8e 01       	movw	r16, r28
     b50:	05 5e       	subi	r16, 0xE5	; 229
     b52:	1e 4f       	sbci	r17, 0xFE	; 254
     b54:	f7 01       	movw	r30, r14
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	dc 01       	movw	r26, r24
     b5c:	ed 91       	ld	r30, X+
     b5e:	fc 91       	ld	r31, X
     b60:	04 80       	ldd	r0, Z+4	; 0x04
     b62:	f5 81       	ldd	r31, Z+5	; 0x05
     b64:	e0 2d       	mov	r30, r0
     b66:	09 95       	icall
     b68:	89 2b       	or	r24, r25
     b6a:	59 f0       	breq	.+22     	; 0xb82 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     b6c:	f7 01       	movw	r30, r14
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	dc 01       	movw	r26, r24
     b74:	ed 91       	ld	r30, X+
     b76:	fc 91       	ld	r31, X
     b78:	06 80       	ldd	r0, Z+6	; 0x06
     b7a:	f7 81       	ldd	r31, Z+7	; 0x07
     b7c:	e0 2d       	mov	r30, r0
     b7e:	09 95       	icall
     b80:	e9 cf       	rjmp	.-46     	; 0xb54 <_ZN13Adafruit_FONA5beginEhh+0x98>
     b82:	f8 01       	movw	r30, r16
     b84:	40 81       	ld	r20, Z
     b86:	51 81       	ldd	r21, Z+1	; 0x01
     b88:	24 ef       	ldi	r18, 0xF4	; 244
     b8a:	31 e0       	ldi	r19, 0x01	; 1
     b8c:	65 ef       	ldi	r22, 0xF5	; 245
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	ce 01       	movw	r24, r28
     b92:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b96:	81 11       	cpse	r24, r1
     b98:	34 c0       	rjmp	.+104    	; 0xc02 <_ZN13Adafruit_FONA5beginEhh+0x146>
     b9a:	d7 01       	movw	r26, r14
     b9c:	8d 91       	ld	r24, X+
     b9e:	9c 91       	ld	r25, X
     ba0:	dc 01       	movw	r26, r24
     ba2:	ed 91       	ld	r30, X+
     ba4:	fc 91       	ld	r31, X
     ba6:	04 80       	ldd	r0, Z+4	; 0x04
     ba8:	f5 81       	ldd	r31, Z+5	; 0x05
     baa:	e0 2d       	mov	r30, r0
     bac:	09 95       	icall
     bae:	89 2b       	or	r24, r25
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     bb2:	f7 01       	movw	r30, r14
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	dc 01       	movw	r26, r24
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	06 80       	ldd	r0, Z+6	; 0x06
     bc0:	f7 81       	ldd	r31, Z+7	; 0x07
     bc2:	e0 2d       	mov	r30, r0
     bc4:	09 95       	icall
     bc6:	e9 cf       	rjmp	.-46     	; 0xb9a <_ZN13Adafruit_FONA5beginEhh+0xde>
     bc8:	24 ef       	ldi	r18, 0xF4	; 244
     bca:	31 e0       	ldi	r19, 0x01	; 1
     bcc:	42 ef       	ldi	r20, 0xF2	; 242
     bce:	51 e0       	ldi	r21, 0x01	; 1
     bd0:	6f ee       	ldi	r22, 0xEF	; 239
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	ce 01       	movw	r24, r28
     bd6:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     bda:	81 11       	cpse	r24, r1
     bdc:	12 c0       	rjmp	.+36     	; 0xc02 <_ZN13Adafruit_FONA5beginEhh+0x146>
     bde:	64 ef       	ldi	r22, 0xF4	; 244
     be0:	71 e0       	ldi	r23, 0x01	; 1
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	cb 1a       	sub	r12, r27
     bee:	d1 08       	sbc	r13, r1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <_ZN13Adafruit_FONA5beginEhh+0x138>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <_ZN13Adafruit_FONA5beginEhh+0x98>
     bf4:	5e c0       	rjmp	.+188    	; 0xcb2 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     bf6:	64 e6       	ldi	r22, 0x64	; 100
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     c02:	f8 01       	movw	r30, r16
     c04:	40 81       	ld	r20, Z
     c06:	51 81       	ldd	r21, Z+1	; 0x01
     c08:	24 ef       	ldi	r18, 0xF4	; 244
     c0a:	31 e0       	ldi	r19, 0x01	; 1
     c0c:	62 ec       	ldi	r22, 0xC2	; 194
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c16:	64 e6       	ldi	r22, 0x64	; 100
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     c22:	d8 01       	movw	r26, r16
     c24:	4d 91       	ld	r20, X+
     c26:	5c 91       	ld	r21, X
     c28:	24 ef       	ldi	r18, 0xF4	; 244
     c2a:	31 e0       	ldi	r19, 0x01	; 1
     c2c:	6d eb       	ldi	r22, 0xBD	; 189
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c36:	81 11       	cpse	r24, r1
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <_ZN13Adafruit_FONA5beginEhh+0x182>
     c3a:	12 e0       	ldi	r17, 0x02	; 2
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <_ZN13Adafruit_FONA5beginEhh+0x184>
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	64 e6       	ldi	r22, 0x64	; 100
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     c4c:	ce 01       	movw	r24, r28
     c4e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN13Adafruit_FONA10flushInputEv>
     c52:	66 eb       	ldi	r22, 0xB6	; 182
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	8b e5       	ldi	r24, 0x5B	; 91
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     c5e:	66 e1       	ldi	r22, 0x16	; 22
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	8b e5       	ldi	r24, 0x5B	; 91
     c64:	94 e0       	ldi	r25, 0x04	; 4
     c66:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     c6a:	66 e1       	ldi	r22, 0x16	; 22
     c6c:	71 e0       	ldi	r23, 0x01	; 1
     c6e:	f7 01       	movw	r30, r14
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	64 ef       	ldi	r22, 0xF4	; 244
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	ce 01       	movw	r24, r28
     c80:	0e 94 21 04 	call	0x842	; 0x842 <_ZN13Adafruit_FONA8readlineEjb>
     c84:	6f ea       	ldi	r22, 0xAF	; 175
     c86:	71 e0       	ldi	r23, 0x01	; 1
     c88:	8b e5       	ldi	r24, 0x5B	; 91
     c8a:	94 e0       	ldi	r25, 0x04	; 4
     c8c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     c90:	2f 96       	adiw	r28, 0x0f	; 15
     c92:	be 01       	movw	r22, r28
     c94:	8b e5       	ldi	r24, 0x5B	; 91
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     c9c:	64 ea       	ldi	r22, 0xA4	; 164
     c9e:	71 e0       	ldi	r23, 0x01	; 1
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <strstr_P>
     ca6:	89 2b       	or	r24, r25
     ca8:	11 f0       	breq	.+4      	; 0xcae <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     caa:	81 2f       	mov	r24, r17
     cac:	35 c0       	rjmp	.+106    	; 0xd18 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	33 c0       	rjmp	.+102    	; 0xd18 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     cb2:	d8 01       	movw	r26, r16
     cb4:	4d 91       	ld	r20, X+
     cb6:	5c 91       	ld	r21, X
     cb8:	24 ef       	ldi	r18, 0xF4	; 244
     cba:	31 e0       	ldi	r19, 0x01	; 1
     cbc:	6c ee       	ldi	r22, 0xEC	; 236
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cc6:	64 e6       	ldi	r22, 0x64	; 100
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     cd2:	f8 01       	movw	r30, r16
     cd4:	40 81       	ld	r20, Z
     cd6:	51 81       	ldd	r21, Z+1	; 0x01
     cd8:	24 ef       	ldi	r18, 0xF4	; 244
     cda:	31 e0       	ldi	r19, 0x01	; 1
     cdc:	69 ee       	ldi	r22, 0xE9	; 233
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	ce 01       	movw	r24, r28
     ce2:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ce6:	64 e6       	ldi	r22, 0x64	; 100
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
     cf2:	d8 01       	movw	r26, r16
     cf4:	4d 91       	ld	r20, X+
     cf6:	5c 91       	ld	r21, X
     cf8:	24 ef       	ldi	r18, 0xF4	; 244
     cfa:	31 e0       	ldi	r19, 0x01	; 1
     cfc:	66 ee       	ldi	r22, 0xE6	; 230
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d06:	81 11       	cpse	r24, r1
     d08:	76 cf       	rjmp	.-276    	; 0xbf6 <_ZN13Adafruit_FONA5beginEhh+0x13a>
     d0a:	67 ec       	ldi	r22, 0xC7	; 199
     d0c:	71 e0       	ldi	r23, 0x01	; 1
     d0e:	8b e5       	ldi	r24, 0x5B	; 91
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	08 95       	ret

00000d2a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	ec 01       	movw	r28, r24
     d38:	79 01       	movw	r14, r18
     d3a:	98 01       	movw	r18, r16
     d3c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     d40:	b7 01       	movw	r22, r14
     d42:	ce 01       	movw	r24, r28
     d44:	0f 96       	adiw	r24, 0x0f	; 15
     d46:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <strcmp_P>
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	89 2b       	or	r24, r25
     d4e:	09 f0       	breq	.+2      	; 0xd52 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	82 2f       	mov	r24, r18
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	08 95       	ret

00000d62 <_ZN13Adafruit_FONA10enableGPRSEb>:
     d62:	7f 92       	push	r7
     d64:	8f 92       	push	r8
     d66:	9f 92       	push	r9
     d68:	af 92       	push	r10
     d6a:	bf 92       	push	r11
     d6c:	cf 92       	push	r12
     d6e:	df 92       	push	r13
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
     d7e:	28 ee       	ldi	r18, 0xE8	; 232
     d80:	3d ef       	ldi	r19, 0xFD	; 253
     d82:	66 23       	and	r22, r22
     d84:	09 f4       	brne	.+2      	; 0xd88 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     d86:	1f c1       	rjmp	.+574    	; 0xfc6 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     d88:	4e e5       	ldi	r20, 0x5E	; 94
     d8a:	51 e0       	ldi	r21, 0x01	; 1
     d8c:	63 e5       	ldi	r22, 0x53	; 83
     d8e:	71 e0       	ldi	r23, 0x01	; 1
     d90:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d94:	81 11       	cpse	r24, r1
     d96:	03 c0       	rjmp	.+6      	; 0xd9e <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	78 2e       	mov	r7, r24
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     d9e:	77 24       	eor	r7, r7
     da0:	73 94       	inc	r7
     da2:	7e 01       	movw	r14, r28
     da4:	85 ee       	ldi	r24, 0xE5	; 229
     da6:	e8 1a       	sub	r14, r24
     da8:	8e ef       	ldi	r24, 0xFE	; 254
     daa:	f8 0a       	sbc	r15, r24
     dac:	f7 01       	movw	r30, r14
     dae:	40 81       	ld	r20, Z
     db0:	51 81       	ldd	r21, Z+1	; 0x01
     db2:	20 e1       	ldi	r18, 0x10	; 16
     db4:	37 e2       	ldi	r19, 0x27	; 39
     db6:	68 e4       	ldi	r22, 0x48	; 72
     db8:	71 e0       	ldi	r23, 0x01	; 1
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     dc4:	25 c1       	rjmp	.+586    	; 0x1010 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     dc6:	f7 01       	movw	r30, r14
     dc8:	40 81       	ld	r20, Z
     dca:	51 81       	ldd	r21, Z+1	; 0x01
     dcc:	20 e1       	ldi	r18, 0x10	; 16
     dce:	37 e2       	ldi	r19, 0x27	; 39
     dd0:	6a e2       	ldi	r22, 0x2A	; 42
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dda:	88 23       	and	r24, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     dde:	1a c1       	rjmp	.+564    	; 0x1014 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     de0:	4e 01       	movw	r8, r28
     de2:	f2 ef       	ldi	r31, 0xF2	; 242
     de4:	8f 1a       	sub	r8, r31
     de6:	fe ef       	ldi	r31, 0xFE	; 254
     de8:	9f 0a       	sbc	r9, r31
     dea:	f4 01       	movw	r30, r8
     dec:	40 81       	ld	r20, Z
     dee:	51 81       	ldd	r21, Z+1	; 0x01
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	71 f4       	brne	.+28     	; 0xe12 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     df6:	f7 01       	movw	r30, r14
     df8:	40 81       	ld	r20, Z
     dfa:	51 81       	ldd	r21, Z+1	; 0x01
     dfc:	2f ef       	ldi	r18, 0xFF	; 255
     dfe:	3f ef       	ldi	r19, 0xFF	; 255
     e00:	65 ec       	ldi	r22, 0xC5	; 197
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	ce 01       	movw	r24, r28
     e06:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e0a:	81 11       	cpse	r24, r1
     e0c:	ce c0       	rjmp	.+412    	; 0xfaa <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     e0e:	89 e0       	ldi	r24, 0x09	; 9
     e10:	0e c1       	rjmp	.+540    	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e12:	f7 01       	movw	r30, r14
     e14:	20 81       	ld	r18, Z
     e16:	31 81       	ldd	r19, Z+1	; 0x01
     e18:	00 e1       	ldi	r16, 0x10	; 16
     e1a:	17 e2       	ldi	r17, 0x27	; 39
     e1c:	66 e1       	ldi	r22, 0x16	; 22
     e1e:	71 e0       	ldi	r23, 0x01	; 1
     e20:	ce 01       	movw	r24, r28
     e22:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     e26:	88 23       	and	r24, r24
     e28:	09 f4       	brne	.+2      	; 0xe2c <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
     e2a:	f6 c0       	rjmp	.+492    	; 0x1018 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
     e2c:	ce 01       	movw	r24, r28
     e2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN13Adafruit_FONA10flushInputEv>
     e32:	8e 01       	movw	r16, r28
     e34:	03 5e       	subi	r16, 0xE3	; 227
     e36:	1e 4f       	sbci	r17, 0xFE	; 254
     e38:	6c e0       	ldi	r22, 0x0C	; 12
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	f8 01       	movw	r30, r16
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     e46:	f4 01       	movw	r30, r8
     e48:	60 81       	ld	r22, Z
     e4a:	71 81       	ldd	r23, Z+1	; 0x01
     e4c:	f8 01       	movw	r30, r16
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     e56:	5e 01       	movw	r10, r28
     e58:	f0 ef       	ldi	r31, 0xF0	; 240
     e5a:	af 1a       	sub	r10, r31
     e5c:	fe ef       	ldi	r31, 0xFE	; 254
     e5e:	bf 0a       	sbc	r11, r31
     e60:	f5 01       	movw	r30, r10
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	89 2b       	or	r24, r25
     e68:	79 f0       	breq	.+30     	; 0xe88 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
     e6a:	62 e3       	ldi	r22, 0x32	; 50
     e6c:	71 e0       	ldi	r23, 0x01	; 1
     e6e:	f8 01       	movw	r30, r16
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
     e78:	f5 01       	movw	r30, r10
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	f8 01       	movw	r30, r16
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     e88:	6e 01       	movw	r12, r28
     e8a:	fe ee       	ldi	r31, 0xEE	; 238
     e8c:	cf 1a       	sub	r12, r31
     e8e:	fe ef       	ldi	r31, 0xFE	; 254
     e90:	df 0a       	sbc	r13, r31
     e92:	f6 01       	movw	r30, r12
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	89 2b       	or	r24, r25
     e9a:	79 f0       	breq	.+30     	; 0xeba <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
     e9c:	62 e3       	ldi	r22, 0x32	; 50
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
     eaa:	f6 01       	movw	r30, r12
     eac:	60 81       	ld	r22, Z
     eae:	71 81       	ldd	r23, Z+1	; 0x01
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     eba:	64 e3       	ldi	r22, 0x34	; 52
     ebc:	71 e0       	ldi	r23, 0x01	; 1
     ebe:	f8 01       	movw	r30, r16
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     ec8:	65 e0       	ldi	r22, 0x05	; 5
     eca:	71 e0       	ldi	r23, 0x01	; 1
     ecc:	8b e5       	ldi	r24, 0x5B	; 91
     ece:	94 e0       	ldi	r25, 0x04	; 4
     ed0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     ed4:	6b ef       	ldi	r22, 0xFB	; 251
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	8b e5       	ldi	r24, 0x5B	; 91
     eda:	94 e0       	ldi	r25, 0x04	; 4
     edc:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     ee0:	f4 01       	movw	r30, r8
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	8b e5       	ldi	r24, 0x5B	; 91
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     eee:	f5 01       	movw	r30, r10
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	89 2b       	or	r24, r25
     ef6:	69 f0       	breq	.+26     	; 0xf12 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
     ef8:	62 e3       	ldi	r22, 0x32	; 50
     efa:	71 e0       	ldi	r23, 0x01	; 1
     efc:	8b e5       	ldi	r24, 0x5B	; 91
     efe:	94 e0       	ldi	r25, 0x04	; 4
     f00:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
     f04:	f5 01       	movw	r30, r10
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	8b e5       	ldi	r24, 0x5B	; 91
     f0c:	94 e0       	ldi	r25, 0x04	; 4
     f0e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     f12:	f6 01       	movw	r30, r12
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	89 2b       	or	r24, r25
     f1a:	69 f0       	breq	.+26     	; 0xf36 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
     f1c:	62 e3       	ldi	r22, 0x32	; 50
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	8b e5       	ldi	r24, 0x5B	; 91
     f22:	94 e0       	ldi	r25, 0x04	; 4
     f24:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
     f28:	f6 01       	movw	r30, r12
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	8b e5       	ldi	r24, 0x5B	; 91
     f30:	94 e0       	ldi	r25, 0x04	; 4
     f32:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
     f36:	64 e3       	ldi	r22, 0x34	; 52
     f38:	71 e0       	ldi	r23, 0x01	; 1
     f3a:	8b e5       	ldi	r24, 0x5B	; 91
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
     f42:	f7 01       	movw	r30, r14
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	40 e1       	ldi	r20, 0x10	; 16
     f4a:	57 e2       	ldi	r21, 0x27	; 39
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 83 04 	call	0x906	; 0x906 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     f52:	88 23       	and	r24, r24
     f54:	09 f4       	brne	.+2      	; 0xf58 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
     f56:	62 c0       	rjmp	.+196    	; 0x101c <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
     f58:	f5 01       	movw	r30, r10
     f5a:	40 81       	ld	r20, Z
     f5c:	51 81       	ldd	r21, Z+1	; 0x01
     f5e:	41 15       	cp	r20, r1
     f60:	51 05       	cpc	r21, r1
     f62:	39 f4       	brne	.+14     	; 0xf72 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
     f64:	f6 01       	movw	r30, r12
     f66:	40 81       	ld	r20, Z
     f68:	51 81       	ldd	r21, Z+1	; 0x01
     f6a:	41 15       	cp	r20, r1
     f6c:	51 05       	cpc	r21, r1
     f6e:	79 f4       	brne	.+30     	; 0xf8e <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
     f70:	42 cf       	rjmp	.-380    	; 0xdf6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     f72:	f7 01       	movw	r30, r14
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01
     f78:	00 e1       	ldi	r16, 0x10	; 16
     f7a:	17 e2       	ldi	r17, 0x27	; 39
     f7c:	66 ee       	ldi	r22, 0xE6	; 230
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     f86:	81 11       	cpse	r24, r1
     f88:	ed cf       	rjmp	.-38     	; 0xf64 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
     f8a:	87 e0       	ldi	r24, 0x07	; 7
     f8c:	50 c0       	rjmp	.+160    	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     f8e:	f7 01       	movw	r30, r14
     f90:	20 81       	ld	r18, Z
     f92:	31 81       	ldd	r19, Z+1	; 0x01
     f94:	00 e1       	ldi	r16, 0x10	; 16
     f96:	17 e2       	ldi	r17, 0x27	; 39
     f98:	62 ed       	ldi	r22, 0xD2	; 210
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     fa2:	81 11       	cpse	r24, r1
     fa4:	28 cf       	rjmp	.-432    	; 0xdf6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     fa6:	88 e0       	ldi	r24, 0x08	; 8
     fa8:	42 c0       	rjmp	.+132    	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     faa:	f7 01       	movw	r30, r14
     fac:	40 81       	ld	r20, Z
     fae:	51 81       	ldd	r21, Z+1	; 0x01
     fb0:	2f ef       	ldi	r18, 0xFF	; 255
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	6c eb       	ldi	r22, 0xBC	; 188
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	ce 01       	movw	r24, r28
     fba:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fbe:	88 23       	and	r24, r24
     fc0:	79 f1       	breq	.+94     	; 0x1020 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
     fc2:	87 2d       	mov	r24, r7
     fc4:	34 c0       	rjmp	.+104    	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     fc6:	44 eb       	ldi	r20, 0xB4	; 180
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	69 ea       	ldi	r22, 0xA9	; 169
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fd2:	88 23       	and	r24, r24
     fd4:	39 f1       	breq	.+78     	; 0x1024 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
     fd6:	8e 01       	movw	r16, r28
     fd8:	05 5e       	subi	r16, 0xE5	; 229
     fda:	1e 4f       	sbci	r17, 0xFE	; 254
     fdc:	f8 01       	movw	r30, r16
     fde:	40 81       	ld	r20, Z
     fe0:	51 81       	ldd	r21, Z+1	; 0x01
     fe2:	20 e1       	ldi	r18, 0x10	; 16
     fe4:	37 e2       	ldi	r19, 0x27	; 39
     fe6:	6c e9       	ldi	r22, 0x9C	; 156
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ff0:	88 23       	and	r24, r24
     ff2:	d1 f0       	breq	.+52     	; 0x1028 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
     ff4:	f8 01       	movw	r30, r16
     ff6:	40 81       	ld	r20, Z
     ff8:	51 81       	ldd	r21, Z+1	; 0x01
     ffa:	20 e1       	ldi	r18, 0x10	; 16
     ffc:	37 e2       	ldi	r19, 0x27	; 39
     ffe:	61 e9       	ldi	r22, 0x91	; 145
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1008:	88 23       	and	r24, r24
    100a:	81 f0       	breq	.+32     	; 0x102c <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0f c0       	rjmp	.+30     	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	0d c0       	rjmp	.+26     	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	0b c0       	rjmp	.+22     	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	09 c0       	rjmp	.+18     	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    101c:	86 e0       	ldi	r24, 0x06	; 6
    101e:	07 c0       	rjmp	.+14     	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1020:	8a e0       	ldi	r24, 0x0A	; 10
    1022:	05 c0       	rjmp	.+10     	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1024:	8b e0       	ldi	r24, 0x0B	; 11
    1026:	03 c0       	rjmp	.+6      	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1028:	8c e0       	ldi	r24, 0x0C	; 12
    102a:	01 c0       	rjmp	.+2      	; 0x102e <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    102c:	8d e0       	ldi	r24, 0x0D	; 13
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	7f 90       	pop	r7
    1048:	08 95       	ret

0000104a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	5b 01       	movw	r10, r22
    105e:	6a 01       	movw	r12, r20
    1060:	e2 2e       	mov	r14, r18
    1062:	0f 96       	adiw	r24, 0x0f	; 15
    1064:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <strstr_P>
    1068:	ec 01       	movw	r28, r24
    106a:	89 2b       	or	r24, r25
    106c:	c1 f0       	breq	.+48     	; 0x109e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    106e:	c5 01       	movw	r24, r10
    1070:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <__strlen_P>
    1074:	8c 0f       	add	r24, r28
    1076:	9d 1f       	adc	r25, r29
    1078:	c0 e0       	ldi	r28, 0x00	; 0
    107a:	f1 2c       	mov	r15, r1
    107c:	c0 17       	cp	r28, r16
    107e:	41 f0       	breq	.+16     	; 0x1090 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1080:	b7 01       	movw	r22, r14
    1082:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <strchr>
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	51 f0       	breq	.+20     	; 0x109e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	cf 5f       	subi	r28, 0xFF	; 255
    108e:	f6 cf       	rjmp	.-20     	; 0x107c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1090:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <atoi>
    1094:	f6 01       	movw	r30, r12
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	08 95       	ret

000010b4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	6a 01       	movw	r12, r20
    10ca:	59 01       	movw	r10, r18
    10cc:	10 2f       	mov	r17, r16
    10ce:	0e 2d       	mov	r16, r14
    10d0:	44 ef       	ldi	r20, 0xF4	; 244
    10d2:	51 e0       	ldi	r21, 0x01	; 1
    10d4:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    10d8:	21 2f       	mov	r18, r17
    10da:	a5 01       	movw	r20, r10
    10dc:	b6 01       	movw	r22, r12
    10de:	ce 01       	movw	r24, r28
    10e0:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    10e4:	18 2f       	mov	r17, r24
    10e6:	88 23       	and	r24, r24
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	64 ef       	ldi	r22, 0xF4	; 244
    10ee:	71 e0       	ldi	r23, 0x01	; 1
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 21 04 	call	0x842	; 0x842 <_ZN13Adafruit_FONA8readlineEjb>
    10f6:	81 2f       	mov	r24, r17
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	08 95       	ret

0000110c <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	28 97       	sbiw	r28, 0x08	; 8
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    112e:	18 86       	std	Y+8, r1	; 0x08
    1130:	1f 82       	std	Y+7, r1	; 0x07
    1132:	1e 82       	std	Y+6, r1	; 0x06
    1134:	1d 82       	std	Y+5, r1	; 0x05
    1136:	1c 82       	std	Y+4, r1	; 0x04
    1138:	1b 82       	std	Y+3, r1	; 0x03
    113a:	1a 82       	std	Y+2, r1	; 0x02
    113c:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    113e:	e1 2c       	mov	r14, r1
    1140:	0c e2       	ldi	r16, 0x2C	; 44
    1142:	9e 01       	movw	r18, r28
    1144:	29 5f       	subi	r18, 0xF9	; 249
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	4d e9       	ldi	r20, 0x9D	; 157
    114a:	51 e0       	ldi	r21, 0x01	; 1
    114c:	66 e9       	ldi	r22, 0x96	; 150
    114e:	71 e0       	ldi	r23, 0x01	; 1
    1150:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1154:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1156:	ee 24       	eor	r14, r14
    1158:	e3 94       	inc	r14
    115a:	9e 01       	movw	r18, r28
    115c:	2b 5f       	subi	r18, 0xFB	; 251
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	4f e8       	ldi	r20, 0x8F	; 143
    1162:	51 e0       	ldi	r21, 0x01	; 1
    1164:	68 e8       	ldi	r22, 0x88	; 136
    1166:	71 e0       	ldi	r23, 0x01	; 1
    1168:	c6 01       	movw	r24, r12
    116a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	f8 26       	eor	r15, r24
    1176:	02 c0       	rjmp	.+4      	; 0x117c <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1178:	ff 24       	eor	r15, r15
    117a:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    117c:	e1 2c       	mov	r14, r1
    117e:	0c e2       	ldi	r16, 0x2C	; 44
    1180:	9e 01       	movw	r18, r28
    1182:	2d 5f       	subi	r18, 0xFD	; 253
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	51 e0       	ldi	r21, 0x01	; 1
    118a:	67 e7       	ldi	r22, 0x77	; 119
    118c:	71 e0       	ldi	r23, 0x01	; 1
    118e:	c6 01       	movw	r24, r12
    1190:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1194:	88 23       	and	r24, r24
    1196:	11 f0       	breq	.+4      	; 0x119c <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1198:	1b 81       	ldd	r17, Y+3	; 0x03
    119a:	01 c0       	rjmp	.+2      	; 0x119e <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    119c:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    119e:	ee 24       	eor	r14, r14
    11a0:	e3 94       	inc	r14
    11a2:	0c e2       	ldi	r16, 0x2C	; 44
    11a4:	9e 01       	movw	r18, r28
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	4f e6       	ldi	r20, 0x6F	; 111
    11ac:	51 e0       	ldi	r21, 0x01	; 1
    11ae:	66 e6       	ldi	r22, 0x66	; 102
    11b0:	71 e0       	ldi	r23, 0x01	; 1
    11b2:	c6 01       	movw	r24, r12
    11b4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    11b8:	81 11       	cpse	r24, r1
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    11bc:	91 2f       	mov	r25, r17
    11be:	90 62       	ori	r25, 0x20	; 32
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    11c2:	99 81       	ldd	r25, Y+1	; 0x01
    11c4:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    11c6:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
}
    11ca:	8f 2d       	mov	r24, r15
    11cc:	28 96       	adiw	r28, 0x08	; 8
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	08 95       	ret

000011ea <_ZN10GsmPayloadC1Ev>:
#include "GsmPayload.h"

// default constructor
GsmPayload::GsmPayload()
    11ea:	fc 01       	movw	r30, r24
    11ec:	10 82       	st	Z, r1
    11ee:	12 82       	std	Z+2, r1	; 0x02
    11f0:	11 82       	std	Z+1, r1	; 0x01
    11f2:	13 82       	std	Z+3, r1	; 0x03
    11f4:	14 82       	std	Z+4, r1	; 0x04
    11f6:	15 82       	std	Z+5, r1	; 0x05
    11f8:	17 82       	std	Z+7, r1	; 0x07
    11fa:	11 86       	std	Z+9, r1	; 0x09
    11fc:	10 86       	std	Z+8, r1	; 0x08
    11fe:	13 86       	std	Z+11, r1	; 0x0b
    1200:	12 86       	std	Z+10, r1	; 0x0a
    1202:	14 86       	std	Z+12, r1	; 0x0c
    1204:	08 95       	ret

00001206 <_ZN10GsmPayload10getPayloadEPcj>:

//TODO: Verify this all works with uint8_t* - even if it's a single byte of 255

void GsmPayload::getPayload(char* output, uint16_t maxLength){
	
	output[0] = moduleId;
    1206:	fc 01       	movw	r30, r24
    1208:	20 81       	ld	r18, Z
    120a:	fb 01       	movw	r30, r22
    120c:	20 83       	st	Z, r18
	output[1] = thisBootNumber;
    120e:	fc 01       	movw	r30, r24
    1210:	81 81       	ldd	r24, Z+1	; 0x01
    1212:	fb 01       	movw	r30, r22
    1214:	81 83       	std	Z+1, r24	; 0x01
    1216:	08 95       	ret

00001218 <_ZN10GsmPayload13addSensorDataEP10SensorDatah>:
	
}

void GsmPayload::addSensorData(SensorData* dataArr, uint8_t arraySz){

	_dataArr = dataArr;
    1218:	fc 01       	movw	r30, r24
    121a:	73 87       	std	Z+11, r23	; 0x0b
    121c:	62 87       	std	Z+10, r22	; 0x0a
	_dataArrSz = arraySz;	
    121e:	44 87       	std	Z+12, r20	; 0x0c
    1220:	08 95       	ret

00001222 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
    1228:	63 e9       	ldi	r22, 0x93	; 147
    122a:	72 e0       	ldi	r23, 0x02	; 2
    122c:	8b e5       	ldi	r24, 0x5B	; 91
    122e:	94 e0       	ldi	r25, 0x04	; 4
    1230:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1234:	4a e0       	ldi	r20, 0x0A	; 10
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	68 81       	ld	r22, Y
    123a:	8b e5       	ldi	r24, 0x5B	; 91
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_ZN5Print5printEhi>
    1242:	6f e8       	ldi	r22, 0x8F	; 143
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	8b e5       	ldi	r24, 0x5B	; 91
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    124e:	6a e8       	ldi	r22, 0x8A	; 138
    1250:	72 e0       	ldi	r23, 0x02	; 2
    1252:	8b e5       	ldi	r24, 0x5B	; 91
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    125a:	4a e0       	ldi	r20, 0x0A	; 10
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	69 81       	ldd	r22, Y+1	; 0x01
    1260:	8b e5       	ldi	r24, 0x5B	; 91
    1262:	94 e0       	ldi	r25, 0x04	; 4
    1264:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_ZN5Print5printEhi>
    1268:	66 e8       	ldi	r22, 0x86	; 134
    126a:	72 e0       	ldi	r23, 0x02	; 2
    126c:	8b e5       	ldi	r24, 0x5B	; 91
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1274:	61 e7       	ldi	r22, 0x71	; 113
    1276:	72 e0       	ldi	r23, 0x02	; 2
    1278:	8b e5       	ldi	r24, 0x5B	; 91
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1280:	6b 81       	ldd	r22, Y+3	; 0x03
    1282:	63 70       	andi	r22, 0x03	; 3
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	4a e0       	ldi	r20, 0x0A	; 10
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	8b e5       	ldi	r24, 0x5B	; 91
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN5Print5printEii>
    1292:	67 e6       	ldi	r22, 0x67	; 103
    1294:	72 e0       	ldi	r23, 0x02	; 2
    1296:	8b e5       	ldi	r24, 0x5B	; 91
    1298:	94 e0       	ldi	r25, 0x04	; 4
    129a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    129e:	6b 81       	ldd	r22, Y+3	; 0x03
    12a0:	6c 71       	andi	r22, 0x1C	; 28
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	75 95       	asr	r23
    12a6:	67 95       	ror	r22
    12a8:	75 95       	asr	r23
    12aa:	67 95       	ror	r22
    12ac:	4a e0       	ldi	r20, 0x0A	; 10
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	8b e5       	ldi	r24, 0x5B	; 91
    12b2:	94 e0       	ldi	r25, 0x04	; 4
    12b4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN5Print5printEii>
    12b8:	6e e5       	ldi	r22, 0x5E	; 94
    12ba:	72 e0       	ldi	r23, 0x02	; 2
    12bc:	8b e5       	ldi	r24, 0x5B	; 91
    12be:	94 e0       	ldi	r25, 0x04	; 4
    12c0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    12c4:	6b 81       	ldd	r22, Y+3	; 0x03
    12c6:	65 fb       	bst	r22, 5
    12c8:	66 27       	eor	r22, r22
    12ca:	60 f9       	bld	r22, 0
    12cc:	4a e0       	ldi	r20, 0x0A	; 10
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	8b e5       	ldi	r24, 0x5B	; 91
    12d4:	94 e0       	ldi	r25, 0x04	; 4
    12d6:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN5Print5printEii>
    12da:	6a e5       	ldi	r22, 0x5A	; 90
    12dc:	72 e0       	ldi	r23, 0x02	; 2
    12de:	8b e5       	ldi	r24, 0x5B	; 91
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    12e6:	6d e4       	ldi	r22, 0x4D	; 77
    12e8:	72 e0       	ldi	r23, 0x02	; 2
    12ea:	8b e5       	ldi	r24, 0x5B	; 91
    12ec:	94 e0       	ldi	r25, 0x04	; 4
    12ee:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    12f2:	4a e0       	ldi	r20, 0x0A	; 10
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	6a 81       	ldd	r22, Y+2	; 0x02
    12f8:	8b e5       	ldi	r24, 0x5B	; 91
    12fa:	94 e0       	ldi	r25, 0x04	; 4
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN5Print7printlnEhi>

00001304 <_ZN7Helpers15printSensorDataEP10SensorData>:
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	ec 01       	movw	r28, r24
    130a:	65 e4       	ldi	r22, 0x45	; 69
    130c:	72 e0       	ldi	r23, 0x02	; 2
    130e:	8b e5       	ldi	r24, 0x5B	; 91
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1316:	69 81       	ldd	r22, Y+1	; 0x01
    1318:	7a 81       	ldd	r23, Y+2	; 0x02
    131a:	4a e0       	ldi	r20, 0x0A	; 10
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	8b e5       	ldi	r24, 0x5B	; 91
    1320:	94 e0       	ldi	r25, 0x04	; 4
    1322:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN5Print5printEji>
    1326:	61 e4       	ldi	r22, 0x41	; 65
    1328:	72 e0       	ldi	r23, 0x02	; 2
    132a:	8b e5       	ldi	r24, 0x5B	; 91
    132c:	94 e0       	ldi	r25, 0x04	; 4
    132e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1332:	6b e3       	ldi	r22, 0x3B	; 59
    1334:	72 e0       	ldi	r23, 0x02	; 2
    1336:	8b e5       	ldi	r24, 0x5B	; 91
    1338:	94 e0       	ldi	r25, 0x04	; 4
    133a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    133e:	6d 81       	ldd	r22, Y+5	; 0x05
    1340:	7e 81       	ldd	r23, Y+6	; 0x06
    1342:	4a e0       	ldi	r20, 0x0A	; 10
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	8b e5       	ldi	r24, 0x5B	; 91
    1348:	94 e0       	ldi	r25, 0x04	; 4
    134a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN5Print5printEji>
    134e:	67 e3       	ldi	r22, 0x37	; 55
    1350:	72 e0       	ldi	r23, 0x02	; 2
    1352:	8b e5       	ldi	r24, 0x5B	; 91
    1354:	94 e0       	ldi	r25, 0x04	; 4
    1356:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    135a:	6e e2       	ldi	r22, 0x2E	; 46
    135c:	72 e0       	ldi	r23, 0x02	; 2
    135e:	8b e5       	ldi	r24, 0x5B	; 91
    1360:	94 e0       	ldi	r25, 0x04	; 4
    1362:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1366:	6b 81       	ldd	r22, Y+3	; 0x03
    1368:	7c 81       	ldd	r23, Y+4	; 0x04
    136a:	4a e0       	ldi	r20, 0x0A	; 10
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	8b e5       	ldi	r24, 0x5B	; 91
    1370:	94 e0       	ldi	r25, 0x04	; 4
    1372:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN5Print5printEji>
    1376:	6a e2       	ldi	r22, 0x2A	; 42
    1378:	72 e0       	ldi	r23, 0x02	; 2
    137a:	8b e5       	ldi	r24, 0x5B	; 91
    137c:	94 e0       	ldi	r25, 0x04	; 4
    137e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1382:	64 e2       	ldi	r22, 0x24	; 36
    1384:	72 e0       	ldi	r23, 0x02	; 2
    1386:	8b e5       	ldi	r24, 0x5B	; 91
    1388:	94 e0       	ldi	r25, 0x04	; 4
    138a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    138e:	6f 81       	ldd	r22, Y+7	; 0x07
    1390:	78 85       	ldd	r23, Y+8	; 0x08
    1392:	4a e0       	ldi	r20, 0x0A	; 10
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	8b e5       	ldi	r24, 0x5B	; 91
    1398:	94 e0       	ldi	r25, 0x04	; 4
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <_ZN5Print7printlnEji>

000013a2 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(unsigned char * a4, unsigned char * a3) {
    13a2:	dc 01       	movw	r26, r24
    13a4:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    13a6:	80 81       	ld	r24, Z
    13a8:	86 95       	lsr	r24
    13aa:	86 95       	lsr	r24
    13ac:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    13ae:	80 81       	ld	r24, Z
    13b0:	83 70       	andi	r24, 0x03	; 3
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	92 95       	swap	r25
    13b6:	9f 70       	andi	r25, 0x0F	; 15
    13b8:	20 e1       	ldi	r18, 0x10	; 16
    13ba:	82 9f       	mul	r24, r18
    13bc:	90 0d       	add	r25, r0
    13be:	11 24       	eor	r1, r1
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	9c 93       	st	X, r25
    13c4:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	9f 70       	andi	r25, 0x0F	; 15
    13ca:	99 0f       	add	r25, r25
    13cc:	99 0f       	add	r25, r25
    13ce:	22 81       	ldd	r18, Z+2	; 0x02
    13d0:	22 95       	swap	r18
    13d2:	26 95       	lsr	r18
    13d4:	26 95       	lsr	r18
    13d6:	23 70       	andi	r18, 0x03	; 3
    13d8:	92 0f       	add	r25, r18
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	9c 93       	st	X, r25
    13de:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	8f 73       	andi	r24, 0x3F	; 63
    13e4:	13 96       	adiw	r26, 0x03	; 3
    13e6:	8c 93       	st	X, r24
    13e8:	08 95       	ret

000013ea <_ZN7Helpers13base64_encodeEPcS0_i>:
/* 'Private' declarations */
inline void a3_to_a4(unsigned char * a4, unsigned char * a3);
inline void a4_to_a3(unsigned char * a3, unsigned char * a4);
inline unsigned char b64_lookup(char c);

int Helpers::base64_encode(char *output, char *input, int inputLen) {
    13ea:	6f 92       	push	r6
    13ec:	7f 92       	push	r7
    13ee:	8f 92       	push	r8
    13f0:	9f 92       	push	r9
    13f2:	af 92       	push	r10
    13f4:	bf 92       	push	r11
    13f6:	cf 92       	push	r12
    13f8:	df 92       	push	r13
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	27 97       	sbiw	r28, 0x07	; 7
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	6c 01       	movw	r12, r24
    1418:	5b 01       	movw	r10, r22
    141a:	3b 01       	movw	r6, r22
    141c:	64 0e       	add	r6, r20
    141e:	75 1e       	adc	r7, r21
	int i = 0, j = 0;
	int encLen = 0;
    1420:	e1 2c       	mov	r14, r1
    1422:	f1 2c       	mov	r15, r1
inline void a3_to_a4(unsigned char * a4, unsigned char * a3);
inline void a4_to_a3(unsigned char * a3, unsigned char * a4);
inline unsigned char b64_lookup(char c);

int Helpers::base64_encode(char *output, char *input, int inputLen) {
	int i = 0, j = 0;
    1424:	00 e0       	ldi	r16, 0x00	; 0
    1426:	10 e0       	ldi	r17, 0x00	; 0
	int encLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1428:	4e 01       	movw	r8, r28
    142a:	85 e0       	ldi	r24, 0x05	; 5
    142c:	88 0e       	add	r8, r24
    142e:	91 1c       	adc	r9, r1
	int i = 0, j = 0;
	int encLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];

	while(inputLen--) {
    1430:	6a 14       	cp	r6, r10
    1432:	7b 04       	cpc	r7, r11
    1434:	49 f1       	breq	.+82     	; 0x1488 <_ZN7Helpers13base64_encodeEPcS0_i+0x9e>
		a3[i++] = *(input++);
    1436:	c8 01       	movw	r24, r16
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	f5 01       	movw	r30, r10
    143c:	21 91       	ld	r18, Z+
    143e:	5f 01       	movw	r10, r30
    1440:	f4 01       	movw	r30, r8
    1442:	e0 0f       	add	r30, r16
    1444:	f1 1f       	adc	r31, r17
    1446:	20 83       	st	Z, r18
		if(i == 3) {
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	91 05       	cpc	r25, r1
    144c:	11 f0       	breq	.+4      	; 0x1452 <_ZN7Helpers13base64_encodeEPcS0_i+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    144e:	8c 01       	movw	r16, r24
    1450:	ef cf       	rjmp	.-34     	; 0x1430 <_ZN7Helpers13base64_encodeEPcS0_i+0x46>
	unsigned char a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1452:	b4 01       	movw	r22, r8
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_Z8a3_to_a4PhS_>
    145c:	de 01       	movw	r26, r28
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	c6 01       	movw	r24, r12
    1462:	8e 0d       	add	r24, r14
    1464:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1466:	ed 91       	ld	r30, X+
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	e7 56       	subi	r30, 0x67	; 103
    146c:	fd 4f       	sbci	r31, 0xFD	; 253
    146e:	24 91       	lpm	r18, Z
    1470:	fc 01       	movw	r30, r24
    1472:	21 93       	st	Z+, r18
    1474:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1476:	a8 15       	cp	r26, r8
    1478:	b9 05       	cpc	r27, r9
    147a:	a9 f7       	brne	.-22     	; 0x1466 <_ZN7Helpers13base64_encodeEPcS0_i+0x7c>
    147c:	f4 e0       	ldi	r31, 0x04	; 4
    147e:	ef 0e       	add	r14, r31
    1480:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	e3 cf       	rjmp	.-58     	; 0x144e <_ZN7Helpers13base64_encodeEPcS0_i+0x64>
		}
	}

	if(i) {
    1488:	01 15       	cp	r16, r1
    148a:	11 05       	cpc	r17, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <_ZN7Helpers13base64_encodeEPcS0_i+0xa6>
    148e:	3c c0       	rjmp	.+120    	; 0x1508 <_ZN7Helpers13base64_encodeEPcS0_i+0x11e>
    1490:	be 01       	movw	r22, r28
    1492:	6b 5f       	subi	r22, 0xFB	; 251
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	fb 01       	movw	r30, r22
    1498:	e0 0f       	add	r30, r16
    149a:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    149c:	cf 01       	movw	r24, r30
    149e:	86 1b       	sub	r24, r22
    14a0:	97 0b       	sbc	r25, r23
    14a2:	03 97       	sbiw	r24, 0x03	; 3
    14a4:	14 f4       	brge	.+4      	; 0x14aa <_ZN7Helpers13base64_encodeEPcS0_i+0xc0>
			a3[j] = '\0';
    14a6:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    14a8:	f9 cf       	rjmp	.-14     	; 0x149c <_ZN7Helpers13base64_encodeEPcS0_i+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	5c 01       	movw	r10, r24
    14b0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_Z8a3_to_a4PhS_>
    14b4:	c6 01       	movw	r24, r12
    14b6:	8e 0d       	add	r24, r14
    14b8:	9f 1d       	adc	r25, r15
    14ba:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    14bc:	ed 91       	ld	r30, X+
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	e7 56       	subi	r30, 0x67	; 103
    14c2:	fd 4f       	sbci	r31, 0xFD	; 253
    14c4:	24 91       	lpm	r18, Z
    14c6:	fc 01       	movw	r30, r24
    14c8:	21 93       	st	Z+, r18
    14ca:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    14cc:	9d 01       	movw	r18, r26
    14ce:	2a 19       	sub	r18, r10
    14d0:	3b 09       	sbc	r19, r11
    14d2:	02 17       	cp	r16, r18
    14d4:	13 07       	cpc	r17, r19
    14d6:	94 f7       	brge	.-28     	; 0x14bc <_ZN7Helpers13base64_encodeEPcS0_i+0xd2>
    14d8:	ff ef       	ldi	r31, 0xFF	; 255
    14da:	ef 1a       	sub	r14, r31
    14dc:	ff 0a       	sbc	r15, r31
    14de:	e0 0e       	add	r14, r16
    14e0:	f1 1e       	adc	r15, r17
    14e2:	f6 01       	movw	r30, r12
    14e4:	ee 0d       	add	r30, r14
    14e6:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    14e8:	0c 19       	sub	r16, r12
    14ea:	1d 09       	sbc	r17, r13
    14ec:	0e 19       	sub	r16, r14
    14ee:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    14f0:	8d e3       	ldi	r24, 0x3D	; 61
    14f2:	7f 01       	movw	r14, r30
    14f4:	ec 18       	sub	r14, r12
    14f6:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    14f8:	98 01       	movw	r18, r16
    14fa:	2e 0f       	add	r18, r30
    14fc:	3f 1f       	adc	r19, r31
    14fe:	23 30       	cpi	r18, 0x03	; 3
    1500:	31 05       	cpc	r19, r1
    1502:	14 f4       	brge	.+4      	; 0x1508 <_ZN7Helpers13base64_encodeEPcS0_i+0x11e>
			output[encLen++] = '=';
    1504:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1506:	f5 cf       	rjmp	.-22     	; 0x14f2 <_ZN7Helpers13base64_encodeEPcS0_i+0x108>
			output[encLen++] = '=';
		}
	}
	output[encLen] = '\0';
    1508:	f6 01       	movw	r30, r12
    150a:	ee 0d       	add	r30, r14
    150c:	ff 1d       	adc	r31, r15
    150e:	10 82       	st	Z, r1
	return encLen;
}
    1510:	c7 01       	movw	r24, r14
    1512:	27 96       	adiw	r28, 0x07	; 7
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	bf 90       	pop	r11
    1530:	af 90       	pop	r10
    1532:	9f 90       	pop	r9
    1534:	8f 90       	pop	r8
    1536:	7f 90       	pop	r7
    1538:	6f 90       	pop	r6
    153a:	08 95       	ret

0000153c <_Z8a4_to_a3PhS_>:
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(unsigned char * a3, unsigned char * a4) {
    153c:	dc 01       	movw	r26, r24
    153e:	fb 01       	movw	r30, r22
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	90 73       	andi	r25, 0x30	; 48
    1544:	92 95       	swap	r25
    1546:	9f 70       	andi	r25, 0x0F	; 15
    1548:	20 81       	ld	r18, Z
    154a:	22 0f       	add	r18, r18
    154c:	22 0f       	add	r18, r18
    154e:	92 0f       	add	r25, r18
    1550:	9c 93       	st	X, r25
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
    1552:	92 81       	ldd	r25, Z+2	; 0x02
    1554:	9c 73       	andi	r25, 0x3C	; 60
    1556:	96 95       	lsr	r25
    1558:	96 95       	lsr	r25
    155a:	81 81       	ldd	r24, Z+1	; 0x01
    155c:	20 e1       	ldi	r18, 0x10	; 16
    155e:	82 9f       	mul	r24, r18
    1560:	90 0d       	add	r25, r0
    1562:	11 24       	eor	r1, r1
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	9c 93       	st	X, r25
    1568:	11 97       	sbiw	r26, 0x01	; 1
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
    156a:	92 81       	ldd	r25, Z+2	; 0x02
    156c:	83 81       	ldd	r24, Z+3	; 0x03
    156e:	20 e4       	ldi	r18, 0x40	; 64
    1570:	92 9f       	mul	r25, r18
    1572:	80 0d       	add	r24, r0
    1574:	11 24       	eor	r1, r1
    1576:	12 96       	adiw	r26, 0x02	; 2
    1578:	8c 93       	st	X, r24
    157a:	08 95       	ret

0000157c <_Z10b64_lookupc>:
}

inline unsigned char b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
    157c:	9f eb       	ldi	r25, 0xBF	; 191
    157e:	98 0f       	add	r25, r24
    1580:	9a 31       	cpi	r25, 0x1A	; 26
    1582:	90 f0       	brcs	.+36     	; 0x15a8 <_Z10b64_lookupc+0x2c>
	if(c >='a' && c <='z') return c - 71;
    1584:	9f e9       	ldi	r25, 0x9F	; 159
    1586:	98 0f       	add	r25, r24
    1588:	9a 31       	cpi	r25, 0x1A	; 26
    158a:	10 f4       	brcc	.+4      	; 0x1590 <_Z10b64_lookupc+0x14>
    158c:	87 54       	subi	r24, 0x47	; 71
    158e:	08 95       	ret
	if(c >='0' && c <='9') return c + 4;
    1590:	90 ed       	ldi	r25, 0xD0	; 208
    1592:	98 0f       	add	r25, r24
    1594:	9a 30       	cpi	r25, 0x0A	; 10
    1596:	10 f4       	brcc	.+4      	; 0x159c <_Z10b64_lookupc+0x20>
    1598:	8c 5f       	subi	r24, 0xFC	; 252
    159a:	08 95       	ret
	if(c == '+') return 62;
    159c:	8b 32       	cpi	r24, 0x2B	; 43
    159e:	31 f0       	breq	.+12     	; 0x15ac <_Z10b64_lookupc+0x30>
	if(c == '/') return 63;
    15a0:	8f 32       	cpi	r24, 0x2F	; 47
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <_Z10b64_lookupc+0x34>
	return -1;
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	08 95       	ret
    15a8:	89 2f       	mov	r24, r25
    15aa:	08 95       	ret

inline unsigned char b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
    15ac:	8e e3       	ldi	r24, 0x3E	; 62
    15ae:	08 95       	ret
	if(c == '/') return 63;
    15b0:	8f e3       	ldi	r24, 0x3F	; 63
	return -1;
}
    15b2:	08 95       	ret

000015b4 <_ZN7Helpers13base64_decodeEPcS0_i>:
	}
	output[encLen] = '\0';
	return encLen;
}

int Helpers::base64_decode(char * output, char * input, int inputLen) {
    15b4:	4f 92       	push	r4
    15b6:	5f 92       	push	r5
    15b8:	6f 92       	push	r6
    15ba:	7f 92       	push	r7
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	27 97       	sbiw	r28, 0x07	; 7
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	3c 01       	movw	r6, r24
    15e6:	7b 01       	movw	r14, r22
    15e8:	2b 01       	movw	r4, r22
    15ea:	44 0e       	add	r4, r20
    15ec:	55 1e       	adc	r5, r21
	int i = 0, j = 0;
	int decLen = 0;
    15ee:	c1 2c       	mov	r12, r1
    15f0:	d1 2c       	mov	r13, r1
	output[encLen] = '\0';
	return encLen;
}

int Helpers::base64_decode(char * output, char * input, int inputLen) {
	int i = 0, j = 0;
    15f2:	00 e0       	ldi	r16, 0x00	; 0
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	5e 01       	movw	r10, r28
    15f8:	85 e0       	ldi	r24, 0x05	; 5
    15fa:	a8 0e       	add	r10, r24
    15fc:	b1 1c       	adc	r11, r1
    15fe:	4e 01       	movw	r8, r28
    1600:	98 e0       	ldi	r25, 0x08	; 8
    1602:	89 0e       	add	r8, r25
    1604:	91 1c       	adc	r9, r1
	int decLen = 0;
	unsigned char a3[3];
	unsigned char a4[4];


	while (inputLen--) {
    1606:	e4 14       	cp	r14, r4
    1608:	f5 04       	cpc	r15, r5
    160a:	a9 f1       	breq	.+106    	; 0x1676 <_ZN7Helpers13base64_decodeEPcS0_i+0xc2>
		if(*input == '=') {
    160c:	f7 01       	movw	r30, r14
    160e:	21 91       	ld	r18, Z+
    1610:	7f 01       	movw	r14, r30
    1612:	2d 33       	cpi	r18, 0x3D	; 61
    1614:	81 f1       	breq	.+96     	; 0x1676 <_ZN7Helpers13base64_decodeEPcS0_i+0xc2>
			break;
		}

		a4[i++] = *(input++);
    1616:	c8 01       	movw	r24, r16
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	e1 e0       	ldi	r30, 0x01	; 1
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	ec 0f       	add	r30, r28
    1620:	fd 1f       	adc	r31, r29
    1622:	e0 0f       	add	r30, r16
    1624:	f1 1f       	adc	r31, r17
    1626:	20 83       	st	Z, r18
		if (i == 4) {
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	91 05       	cpc	r25, r1
    162c:	11 f0       	breq	.+4      	; 0x1632 <_ZN7Helpers13base64_decodeEPcS0_i+0x7e>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
    162e:	8c 01       	movw	r16, r24
    1630:	ea cf       	rjmp	.-44     	; 0x1606 <_ZN7Helpers13base64_decodeEPcS0_i+0x52>
    1632:	8e 01       	movw	r16, r28
    1634:	0f 5f       	subi	r16, 0xFF	; 255
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
    1638:	f8 01       	movw	r30, r16
    163a:	80 81       	ld	r24, Z
    163c:	0e 94 be 0a 	call	0x157c	; 0x157c <_Z10b64_lookupc>
    1640:	f8 01       	movw	r30, r16
    1642:	81 93       	st	Z+, r24
    1644:	8f 01       	movw	r16, r30
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
    1646:	ae 16       	cp	r10, r30
    1648:	bf 06       	cpc	r11, r31
    164a:	b1 f7       	brne	.-20     	; 0x1638 <_ZN7Helpers13base64_decodeEPcS0_i+0x84>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
    164c:	be 01       	movw	r22, r28
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	c5 01       	movw	r24, r10
    1654:	0e 94 9e 0a 	call	0x153c	; 0x153c <_Z8a4_to_a3PhS_>
    1658:	f5 01       	movw	r30, r10
    165a:	d3 01       	movw	r26, r6
    165c:	ac 0d       	add	r26, r12
    165e:	bd 1d       	adc	r27, r13

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
    1660:	81 91       	ld	r24, Z+
    1662:	8d 93       	st	X+, r24
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
    1664:	e8 15       	cp	r30, r8
    1666:	f9 05       	cpc	r31, r9
    1668:	d9 f7       	brne	.-10     	; 0x1660 <_ZN7Helpers13base64_decodeEPcS0_i+0xac>
    166a:	f3 e0       	ldi	r31, 0x03	; 3
    166c:	cf 0e       	add	r12, r31
    166e:	d1 1c       	adc	r13, r1
				output[decLen++] = a3[i];
			}
			i = 0;
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	dc cf       	rjmp	.-72     	; 0x162e <_ZN7Helpers13base64_decodeEPcS0_i+0x7a>
		}
	}

	if (i) {
    1676:	01 15       	cp	r16, r1
    1678:	11 05       	cpc	r17, r1
    167a:	99 f1       	breq	.+102    	; 0x16e2 <_ZN7Helpers13base64_decodeEPcS0_i+0x12e>
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	5c 01       	movw	r10, r24
    1682:	fc 01       	movw	r30, r24
    1684:	e0 0f       	add	r30, r16
    1686:	f1 1f       	adc	r31, r17
    1688:	75 01       	movw	r14, r10
		for (j = i; j < 4; j++) {
    168a:	cf 01       	movw	r24, r30
    168c:	8a 19       	sub	r24, r10
    168e:	9b 09       	sbc	r25, r11
    1690:	04 97       	sbiw	r24, 0x04	; 4
    1692:	14 f4       	brge	.+4      	; 0x1698 <_ZN7Helpers13base64_decodeEPcS0_i+0xe4>
			a4[j] = '\0';
    1694:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
    1696:	f8 cf       	rjmp	.-16     	; 0x1688 <_ZN7Helpers13base64_decodeEPcS0_i+0xd4>
    1698:	4e 01       	movw	r8, r28
    169a:	95 e0       	ldi	r25, 0x05	; 5
    169c:	89 0e       	add	r8, r25
    169e:	91 1c       	adc	r9, r1
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
    16a0:	f7 01       	movw	r30, r14
    16a2:	80 81       	ld	r24, Z
    16a4:	0e 94 be 0a 	call	0x157c	; 0x157c <_Z10b64_lookupc>
    16a8:	f7 01       	movw	r30, r14
    16aa:	81 93       	st	Z+, r24
    16ac:	7f 01       	movw	r14, r30
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
    16ae:	e8 15       	cp	r30, r8
    16b0:	f9 05       	cpc	r31, r9
    16b2:	b1 f7       	brne	.-20     	; 0x16a0 <_ZN7Helpers13base64_decodeEPcS0_i+0xec>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
    16b4:	b5 01       	movw	r22, r10
    16b6:	cf 01       	movw	r24, r30
    16b8:	0e 94 9e 0a 	call	0x153c	; 0x153c <_Z8a4_to_a3PhS_>
    16bc:	f7 01       	movw	r30, r14
    16be:	96 01       	movw	r18, r12
    16c0:	d3 01       	movw	r26, r6
    16c2:	ac 0d       	add	r26, r12
    16c4:	bd 1d       	adc	r27, r13

		for (j = 0; j < i - 1; j++) {
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	01 50       	subi	r16, 0x01	; 1
    16cc:	11 09       	sbc	r17, r1
    16ce:	6c 01       	movw	r12, r24
    16d0:	c2 0e       	add	r12, r18
    16d2:	d3 1e       	adc	r13, r19
    16d4:	80 17       	cp	r24, r16
    16d6:	91 07       	cpc	r25, r17
    16d8:	24 f4       	brge	.+8      	; 0x16e2 <_ZN7Helpers13base64_decodeEPcS0_i+0x12e>
			output[decLen++] = a3[j];
    16da:	41 91       	ld	r20, Z+
    16dc:	4d 93       	st	X+, r20
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	f6 cf       	rjmp	.-20     	; 0x16ce <_ZN7Helpers13base64_decodeEPcS0_i+0x11a>
			output[decLen++] = a3[j];
		}
	}
	output[decLen] = '\0';
    16e2:	f3 01       	movw	r30, r6
    16e4:	ec 0d       	add	r30, r12
    16e6:	fd 1d       	adc	r31, r13
    16e8:	10 82       	st	Z, r1
	return decLen;
}
    16ea:	c6 01       	movw	r24, r12
    16ec:	27 96       	adiw	r28, 0x07	; 7
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	bf 90       	pop	r11
    170a:	af 90       	pop	r10
    170c:	9f 90       	pop	r9
    170e:	8f 90       	pop	r8
    1710:	7f 90       	pop	r7
    1712:	6f 90       	pop	r6
    1714:	5f 90       	pop	r5
    1716:	4f 90       	pop	r4
    1718:	08 95       	ret

0000171a <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	2c 97       	sbiw	r28, 0x0c	; 12
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	08 2f       	mov	r16, r24
    1734:	62 e9       	ldi	r22, 0x92	; 146
    1736:	73 e0       	ldi	r23, 0x03	; 3
    1738:	8b e5       	ldi	r24, 0x5B	; 91
    173a:	94 e0       	ldi	r25, 0x04	; 4
    173c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1740:	42 e0       	ldi	r20, 0x02	; 2
    1742:	63 e0       	ldi	r22, 0x03	; 3
    1744:	88 e7       	ldi	r24, 0x78	; 120
    1746:	92 e0       	ldi	r25, 0x02	; 2
    1748:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN13Adafruit_FONA5beginEhh>
    174c:	18 2f       	mov	r17, r24
    174e:	8d ef       	ldi	r24, 0xFD	; 253
    1750:	81 0f       	add	r24, r17
    1752:	82 30       	cpi	r24, 0x02	; 2
    1754:	b8 f4       	brcc	.+46     	; 0x1784 <_Z21ensureFonaInitialisedb+0x6a>
    1756:	67 e7       	ldi	r22, 0x77	; 119
    1758:	73 e0       	ldi	r23, 0x03	; 3
    175a:	8b e5       	ldi	r24, 0x5B	; 91
    175c:	94 e0       	ldi	r25, 0x04	; 4
    175e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    1762:	66 e4       	ldi	r22, 0x46	; 70
    1764:	71 e0       	ldi	r23, 0x01	; 1
    1766:	8b e5       	ldi	r24, 0x5B	; 91
    1768:	94 e0       	ldi	r25, 0x04	; 4
    176a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    176e:	61 2f       	mov	r22, r17
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	4a e0       	ldi	r20, 0x0A	; 10
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	8b e5       	ldi	r24, 0x5B	; 91
    1778:	94 e0       	ldi	r25, 0x04	; 4
    177a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN5Print7printlnEii>
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	4d c0       	rjmp	.+154    	; 0x181e <_Z21ensureFonaInitialisedb+0x104>
    1784:	80 e7       	ldi	r24, 0x70	; 112
    1786:	92 e0       	ldi	r25, 0x02	; 2
    1788:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN12RmMemManager11getModuleIdEv>
    178c:	68 2f       	mov	r22, r24
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	68 5b       	subi	r22, 0xB8	; 184
    1792:	7e 4f       	sbci	r23, 0xFE	; 254
    1794:	ce 01       	movw	r24, r28
    1796:	07 96       	adiw	r24, 0x07	; 7
    1798:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6StringC1EPKc>
    179c:	be 01       	movw	r22, r28
    179e:	69 5f       	subi	r22, 0xF9	; 249
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	ce 01       	movw	r24, r28
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN6StringC1ERKS_>
    17aa:	be 01       	movw	r22, r28
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	88 e7       	ldi	r24, 0x78	; 120
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_ZN13Adafruit_FONA12setUserAgentE6String>
    17b8:	ce 01       	movw	r24, r28
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_ZN6StringD1Ev>
    17c0:	01 11       	cpse	r16, r1
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <_Z21ensureFonaInitialisedb+0xb0>
    17c4:	08 e7       	ldi	r16, 0x78	; 120
    17c6:	12 e0       	ldi	r17, 0x02	; 2
    17c8:	26 c0       	rjmp	.+76     	; 0x1816 <_Z21ensureFonaInitialisedb+0xfc>
    17ca:	62 e6       	ldi	r22, 0x62	; 98
    17cc:	73 e0       	ldi	r23, 0x03	; 3
    17ce:	8b e5       	ldi	r24, 0x5B	; 91
    17d0:	94 e0       	ldi	r25, 0x04	; 4
    17d2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	88 e7       	ldi	r24, 0x78	; 120
    17da:	92 e0       	ldi	r25, 0x02	; 2
    17dc:	0e 94 b1 06 	call	0xd62	; 0xd62 <_ZN13Adafruit_FONA10enableGPRSEb>
    17e0:	18 2f       	mov	r17, r24
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	81 0f       	add	r24, r17
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	68 f3       	brcs	.-38     	; 0x17c4 <_Z21ensureFonaInitialisedb+0xaa>
    17ea:	67 e4       	ldi	r22, 0x47	; 71
    17ec:	73 e0       	ldi	r23, 0x03	; 3
    17ee:	8b e5       	ldi	r24, 0x5B	; 91
    17f0:	94 e0       	ldi	r25, 0x04	; 4
    17f2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    17f6:	66 e4       	ldi	r22, 0x46	; 70
    17f8:	71 e0       	ldi	r23, 0x01	; 1
    17fa:	8b e5       	ldi	r24, 0x5B	; 91
    17fc:	94 e0       	ldi	r25, 0x04	; 4
    17fe:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    1802:	61 2f       	mov	r22, r17
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	4a e0       	ldi	r20, 0x0A	; 10
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	8b e5       	ldi	r24, 0x5B	; 91
    180c:	94 e0       	ldi	r25, 0x04	; 4
    180e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN5Print7printlnEii>
    1812:	00 e0       	ldi	r16, 0x00	; 0
    1814:	10 e0       	ldi	r17, 0x00	; 0
    1816:	ce 01       	movw	r24, r28
    1818:	07 96       	adiw	r24, 0x07	; 7
    181a:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <_ZN6StringD1Ev>
    181e:	c8 01       	movw	r24, r16
    1820:	2c 96       	adiw	r28, 0x0c	; 12
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <_Z15switchOffSystemv>:
    1836:	66 e5       	ldi	r22, 0x56	; 86
    1838:	71 e0       	ldi	r23, 0x01	; 1
    183a:	8b e5       	ldi	r24, 0x5B	; 91
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	85 e0       	ldi	r24, 0x05	; 5
    1846:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
    184a:	68 eb       	ldi	r22, 0xB8	; 184
    184c:	7b e0       	ldi	r23, 0x0B	; 11
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <delay>

00001856 <setup>:
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	85 e0       	ldi	r24, 0x05	; 5
    185a:	0e 94 65 18 	call	0x30ca	; 0x30ca <pinMode>
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	85 e0       	ldi	r24, 0x05	; 5
    1862:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
    1866:	68 eb       	ldi	r22, 0xB8	; 184
    1868:	7b e0       	ldi	r23, 0x0B	; 11
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	8d e0       	ldi	r24, 0x0D	; 13
    1876:	0e 94 65 18 	call	0x30ca	; 0x30ca <pinMode>
    187a:	26 e0       	ldi	r18, 0x06	; 6
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	55 e2       	ldi	r21, 0x25	; 37
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	8b e5       	ldi	r24, 0x5B	; 91
    1886:	94 e0       	ldi	r25, 0x04	; 4
    1888:	0e 94 a5 14 	call	0x294a	; 0x294a <_ZN14HardwareSerial5beginEmh>
    188c:	67 ea       	ldi	r22, 0xA7	; 167
    188e:	73 e0       	ldi	r23, 0x03	; 3
    1890:	8b e5       	ldi	r24, 0x5B	; 91
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1898:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN13ExtendedTests20runExtendedTypesTestEv>
    189c:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_Z15switchOffSystemv>

000018a0 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	2a 97       	sbiw	r28, 0x0a	; 10
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    18b4:	64 e3       	ldi	r22, 0x34	; 52
    18b6:	73 e0       	ldi	r23, 0x03	; 3
    18b8:	8b e5       	ldi	r24, 0x5B	; 91
    18ba:	94 e0       	ldi	r25, 0x04	; 4
    18bc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	1b 82       	std	Y+3, r1	; 0x03
    18c6:	1a 82       	std	Y+2, r1	; 0x02
    18c8:	1d 82       	std	Y+5, r1	; 0x05
    18ca:	1c 82       	std	Y+4, r1	; 0x04
    18cc:	1f 82       	std	Y+7, r1	; 0x07
    18ce:	1e 82       	std	Y+6, r1	; 0x06
    18d0:	19 86       	std	Y+9, r1	; 0x09
    18d2:	18 86       	std	Y+8, r1	; 0x08
    18d4:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    18d6:	be 01       	movw	r22, r28
    18d8:	6f 5f       	subi	r22, 0xFF	; 255
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	8e e6       	ldi	r24, 0x6E	; 110
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	2a 96       	adiw	r28, 0x0a	; 10
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <_Z8sendDatav+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <_Z8sendDatav+0x8>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    1904:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	98 0f       	add	r25, r24
    190c:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <_sendDataLoopCount>
	
	if (doInit) {
    1910:	81 11       	cpse	r24, r1
    1912:	15 c0       	rjmp	.+42     	; 0x193e <_Z8sendDatav+0x46>
	
		RM_LOGLN(F("Initialising module to send data"));
    1914:	63 e1       	ldi	r22, 0x13	; 19
    1916:	73 e0       	ldi	r23, 0x03	; 3
    1918:	8b e5       	ldi	r24, 0x5B	; 91
    191a:	94 e0       	ldi	r25, 0x04	; 4
    191c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	0e 94 8d 0b 	call	0x171a	; 0x171a <_Z21ensureFonaInitialisedb>
    1926:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <_sendDataFona+0x1>
    192a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <_sendDataFona>
	
		if (_sendDataFona == NULL)
    192e:	89 2b       	or	r24, r25
    1930:	f9 f0       	breq	.+62     	; 0x1970 <_Z8sendDatav+0x78>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    1932:	64 ee       	ldi	r22, 0xE4	; 228
    1934:	72 e0       	ldi	r23, 0x02	; 2
    1936:	8b e5       	ldi	r24, 0x5B	; 91
    1938:	94 e0       	ldi	r25, 0x04	; 4
    193a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    193e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <_sendDataLoopCount>
    1942:	8c 33       	cpi	r24, 0x3C	; 60
    1944:	b9 f4       	brne	.+46     	; 0x1974 <_Z8sendDatav+0x7c>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1946:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <_sendDataFona>
    194a:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <_sendDataFona+0x1>
    194e:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN13Adafruit_FONA7getRSSIEv>
    1952:	69 83       	std	Y+1, r22	; 0x01
    1954:	7a 83       	std	Y+2, r23	; 0x02
    1956:	8b 83       	std	Y+3, r24	; 0x03
    1958:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    195a:	ce 01       	movw	r24, r28
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1962:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_sendDataLoopCount>
		_sendDataFona = NULL;
    1966:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <_sendDataFona+0x1>
    196a:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_sendDataFona>
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <_Z8sendDatav+0x7c>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <_Z8sendDatav+0x7e>
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1974:	80 e0       	ldi	r24, 0x00	; 0
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1984:	68 ee       	ldi	r22, 0xE8	; 232
    1986:	73 e0       	ldi	r23, 0x03	; 3
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <delay>
	++_timerCounter;
    1990:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
    1994:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__data_end+0x1>
    199e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    19a2:	6a ed       	ldi	r22, 0xDA	; 218
    19a4:	72 e0       	ldi	r23, 0x02	; 2
    19a6:	8b e5       	ldi	r24, 0x5B	; 91
    19a8:	94 e0       	ldi	r25, 0x04	; 4
    19aa:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    19ae:	66 e4       	ldi	r22, 0x46	; 70
    19b0:	71 e0       	ldi	r23, 0x01	; 1
    19b2:	8b e5       	ldi	r24, 0x5B	; 91
    19b4:	94 e0       	ldi	r25, 0x04	; 4
    19b6:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    19ba:	4a e0       	ldi	r20, 0x0A	; 10
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	60 91 6d 02 	lds	r22, 0x026D	; 0x80026d <_behaviour>
    19c2:	8b e5       	ldi	r24, 0x5B	; 91
    19c4:	94 e0       	ldi	r25, 0x04	; 4
    19c6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    19ca:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_behaviour>
    19ce:	80 ff       	sbrs	r24, 0
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <loop+0x60>
		
		if (takeReadings())
    19d2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_Z12takeReadingsv>
    19d6:	88 23       	and	r24, r24
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    19da:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_behaviour>
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    19e4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_behaviour>
    19e8:	81 ff       	sbrs	r24, 1
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <loop+0x7a>
		
		if (sendData())
    19ec:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <_Z8sendDatav>
    19f0:	88 23       	and	r24, r24
    19f2:	29 f0       	breq	.+10     	; 0x19fe <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    19f4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_behaviour>
    19f8:	8d 7f       	andi	r24, 0xFD	; 253
    19fa:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    19fe:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_behaviour>
    1a02:	81 11       	cpse	r24, r1
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <loop+0x86>
		
		switchOffSystem();
    1a06:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_Z15switchOffSystemv>
    1a0a:	08 95       	ret

00001a0c <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	64 e0       	ldi	r22, 0x04	; 4
    1a10:	88 e7       	ldi	r24, 0x78	; 120
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	0e 94 8b 03 	call	0x716	; 0x716 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	80 e7       	ldi	r24, 0x70	; 112
    1a1c:	92 e0       	ldi	r25, 0x02	; 2
    1a1e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	8e e6       	ldi	r24, 0x6E	; 110
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <_ZN13SensorManagerC1Eb>

00001a2c <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1a2c:	8a e3       	ldi	r24, 0x3A	; 58
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <__fona+0x1>
    1a34:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__fona>
    1a38:	8d e8       	ldi	r24, 0x8D	; 141
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <_ZN6StringD1Ev>

00001a40 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1a40:	dc 01       	movw	r26, r24
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	01 90       	ld	r0, Z+
    1a48:	f0 81       	ld	r31, Z
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	09 94       	ijmp

00001a4e <_ZN12RmMemManagerC1Eb>:
    1a4e:	fc 01       	movw	r30, r24
    1a50:	11 82       	std	Z+1, r1	; 0x01
    1a52:	12 82       	std	Z+2, r1	; 0x02
    1a54:	13 82       	std	Z+3, r1	; 0x03
    1a56:	14 82       	std	Z+4, r1	; 0x04
    1a58:	80 e8       	ldi	r24, 0x80	; 128
    1a5a:	85 83       	std	Z+5, r24	; 0x05
    1a5c:	86 83       	std	Z+6, r24	; 0x06
    1a5e:	17 82       	std	Z+7, r1	; 0x07
    1a60:	60 83       	st	Z, r22
    1a62:	61 11       	cpse	r22, r1
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <_ZN12RmMemManagerC1Eb+0x20>
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	94 e0       	ldi	r25, 0x04	; 4
    1a6a:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <_ZN7TwoWire5beginEv>
    1a6e:	08 95       	ret

00001a70 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	eb 01       	movw	r28, r22
    1a7e:	7b 01       	movw	r14, r22
    1a80:	e4 0e       	add	r14, r20
    1a82:	f1 1c       	adc	r15, r1
    1a84:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1a86:	ce 15       	cp	r28, r14
    1a88:	df 05       	cpc	r29, r15
    1a8a:	71 f1       	breq	.+92     	; 0x1ae8 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1a8c:	60 e5       	ldi	r22, 0x50	; 80
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	85 e0       	ldi	r24, 0x05	; 5
    1a92:	94 e0       	ldi	r25, 0x04	; 4
    1a94:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1a98:	61 2f       	mov	r22, r17
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	85 e0       	ldi	r24, 0x05	; 5
    1a9e:	94 e0       	ldi	r25, 0x04	; 4
    1aa0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1aa4:	b8 01       	movw	r22, r16
    1aa6:	77 27       	eor	r23, r23
    1aa8:	85 e0       	ldi	r24, 0x05	; 5
    1aaa:	94 e0       	ldi	r25, 0x04	; 4
    1aac:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1ab0:	85 e0       	ldi	r24, 0x05	; 5
    1ab2:	94 e0       	ldi	r25, 0x04	; 4
    1ab4:	0e 94 91 11 	call	0x2322	; 0x2322 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	60 e5       	ldi	r22, 0x50	; 80
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	85 e0       	ldi	r24, 0x05	; 5
    1ac2:	94 e0       	ldi	r25, 0x04	; 4
    1ac4:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1ac8:	85 e0       	ldi	r24, 0x05	; 5
    1aca:	94 e0       	ldi	r25, 0x04	; 4
    1acc:	0e 94 2b 10 	call	0x2056	; 0x2056 <_ZN7TwoWire9availableEv>
    1ad0:	89 2b       	or	r24, r25
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1ad4:	85 e0       	ldi	r24, 0x05	; 5
    1ad6:	94 e0       	ldi	r25, 0x04	; 4
    1ad8:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN7TwoWire4readEv>
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1ae0:	89 93       	st	Y+, r24
    1ae2:	0f 5f       	subi	r16, 0xFF	; 255
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1ae6:	cf cf       	rjmp	.-98     	; 0x1a86 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	08 95       	ret

00001af6 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	1f 92       	push	r1
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	be 01       	movw	r22, r28
    1b06:	6f 5f       	subi	r22, 0xFF	; 255
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_Z12internalReadjPhh>
	return value;
}
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	0f 90       	pop	r0
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <_ZN12RmMemManager18getUCharFromMemoryEj>

00001b20 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1b20:	fc 01       	movw	r30, r24
    1b22:	60 83       	st	Z, r22
    1b24:	08 95       	ret

00001b26 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1b26:	fc 01       	movw	r30, r24
    1b28:	80 81       	ld	r24, Z
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1b2e:	86 2f       	mov	r24, r22
    1b30:	0c 94 1f 18 	jmp	0x303e	; 0x303e <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1b34:	85 e0       	ldi	r24, 0x05	; 5
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	08 95       	ret

00001b3a <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1b3e:	81 81       	ldd	r24, Z+1	; 0x01
    1b40:	8f 5f       	subi	r24, 0xFF	; 255
    1b42:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	12 96       	adiw	r26, 0x02	; 2
    1b48:	9c 93       	st	X, r25
    1b4a:	8e 93       	st	-X, r24
    1b4c:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1b4e:	81 81       	ldd	r24, Z+1	; 0x01
    1b50:	2a e0       	ldi	r18, 0x0A	; 10
    1b52:	82 9f       	mul	r24, r18
    1b54:	c0 01       	movw	r24, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	16 96       	adiw	r26, 0x06	; 6
    1b5a:	9c 93       	st	X, r25
    1b5c:	8e 93       	st	-X, r24
    1b5e:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1b60:	81 81       	ldd	r24, Z+1	; 0x01
    1b62:	67 e0       	ldi	r22, 0x07	; 7
    1b64:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__udivmodqi4>
    1b68:	89 2f       	mov	r24, r25
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	14 96       	adiw	r26, 0x04	; 4
    1b6e:	9c 93       	st	X, r25
    1b70:	8e 93       	st	-X, r24
    1b72:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1b74:	81 81       	ldd	r24, Z+1	; 0x01
    1b76:	24 e6       	ldi	r18, 0x64	; 100
    1b78:	82 9f       	mul	r24, r18
    1b7a:	c0 01       	movw	r24, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	18 96       	adiw	r26, 0x08	; 8
    1b80:	9c 93       	st	X, r25
    1b82:	8e 93       	st	-X, r24
    1b84:	17 97       	sbiw	r26, 0x07	; 7
    1b86:	08 95       	ret

00001b88 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	8c 01       	movw	r16, r24
    1b9e:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 23       	and	r24, r24
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1ba8:	c8 01       	movw	r24, r16
    1baa:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN13SensorManager11getMockDataEP10SensorData>
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1bb0:	6e e0       	ldi	r22, 0x0E	; 14
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN13SensorManager16takeSampleAnalogEh>
    1bb8:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1bba:	6f e0       	ldi	r22, 0x0F	; 15
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN13SensorManager16takeSampleAnalogEh>
    1bc2:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1bc4:	61 e1       	ldi	r22, 0x11	; 17
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN13SensorManager16takeSampleAnalogEh>
    1bcc:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1bce:	60 e1       	ldi	r22, 0x10	; 16
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    1bd6:	ba 82       	std	Y+2, r11	; 0x02
    1bd8:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    1bda:	de 82       	std	Y+6, r13	; 0x06
    1bdc:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    1bde:	fc 82       	std	Y+4, r15	; 0x04
    1be0:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    1be2:	98 87       	std	Y+8, r25	; 0x08
    1be4:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1be6:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    1bfc:	0c 94 82 09 	jmp	0x1304	; 0x1304 <_ZN7Helpers15printSensorDataEP10SensorData>

00001c00 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c00:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_state>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <twi_sendStop>
    1c0a:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_inRepStart>
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	82 e1       	ldi	r24, 0x12	; 18
    1c12:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	83 e1       	ldi	r24, 0x13	; 19
    1c1a:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
    1c1e:	e9 eb       	ldi	r30, 0xB9	; 185
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8e 7f       	andi	r24, 0xFE	; 254
    1c26:	80 83       	st	Z, r24
    1c28:	80 81       	ld	r24, Z
    1c2a:	8d 7f       	andi	r24, 0xFD	; 253
    1c2c:	80 83       	st	Z, r24
    1c2e:	88 e4       	ldi	r24, 0x48	; 72
    1c30:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1c34:	85 e4       	ldi	r24, 0x45	; 69
    1c36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1c3a:	08 95       	ret

00001c3c <twi_readFrom>:
    1c3c:	41 32       	cpi	r20, 0x21	; 33
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <twi_readFrom+0x6>
    1c40:	43 c0       	rjmp	.+134    	; 0x1cc8 <twi_readFrom+0x8c>
    1c42:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <twi_state>
    1c46:	91 11       	cpse	r25, r1
    1c48:	fc cf       	rjmp	.-8      	; 0x1c42 <twi_readFrom+0x6>
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <twi_state>
    1c50:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <twi_sendStop>
    1c54:	2f ef       	ldi	r18, 0xFF	; 255
    1c56:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <twi_error>
    1c5a:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <twi_masterBufferIndex>
    1c5e:	24 0f       	add	r18, r20
    1c60:	20 93 db 03 	sts	0x03DB, r18	; 0x8003db <twi_masterBufferLength>
    1c64:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <twi_slarw>
    1c68:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <twi_slarw>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	89 2b       	or	r24, r25
    1c70:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <twi_slarw>
    1c74:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_inRepStart>
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	61 f4       	brne	.+24     	; 0x1c94 <twi_readFrom+0x58>
    1c7c:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_inRepStart>
    1c80:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_slarw>
    1c84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1c88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1c8c:	83 fd       	sbrc	r24, 3
    1c8e:	f8 cf       	rjmp	.-16     	; 0x1c80 <twi_readFrom+0x44>
    1c90:	85 ec       	ldi	r24, 0xC5	; 197
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <twi_readFrom+0x5a>
    1c94:	85 ee       	ldi	r24, 0xE5	; 229
    1c96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1c9a:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <twi_state>
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	e1 f3       	breq	.-8      	; 0x1c9a <twi_readFrom+0x5e>
    1ca2:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1ca6:	84 17       	cp	r24, r20
    1ca8:	10 f4       	brcc	.+4      	; 0x1cae <twi_readFrom+0x72>
    1caa:	40 91 dc 03 	lds	r20, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1cae:	ad ed       	ldi	r26, 0xDD	; 221
    1cb0:	b3 e0       	ldi	r27, 0x03	; 3
    1cb2:	96 2f       	mov	r25, r22
    1cb4:	fb 01       	movw	r30, r22
    1cb6:	8e 2f       	mov	r24, r30
    1cb8:	89 1b       	sub	r24, r25
    1cba:	84 17       	cp	r24, r20
    1cbc:	18 f4       	brcc	.+6      	; 0x1cc4 <twi_readFrom+0x88>
    1cbe:	8d 91       	ld	r24, X+
    1cc0:	81 93       	st	Z+, r24
    1cc2:	f9 cf       	rjmp	.-14     	; 0x1cb6 <twi_readFrom+0x7a>
    1cc4:	84 2f       	mov	r24, r20
    1cc6:	08 95       	ret
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	08 95       	ret

00001ccc <twi_writeTo>:
    1ccc:	0f 93       	push	r16
    1cce:	41 32       	cpi	r20, 0x21	; 33
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <twi_writeTo+0x8>
    1cd2:	4a c0       	rjmp	.+148    	; 0x1d68 <twi_writeTo+0x9c>
    1cd4:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <twi_state>
    1cd8:	91 11       	cpse	r25, r1
    1cda:	fc cf       	rjmp	.-8      	; 0x1cd4 <twi_writeTo+0x8>
    1cdc:	32 e0       	ldi	r19, 0x02	; 2
    1cde:	30 93 04 04 	sts	0x0404, r19	; 0x800404 <twi_state>
    1ce2:	00 93 02 04 	sts	0x0402, r16	; 0x800402 <twi_sendStop>
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	30 93 97 03 	sts	0x0397, r19	; 0x800397 <twi_error>
    1cec:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <twi_masterBufferIndex>
    1cf0:	40 93 db 03 	sts	0x03DB, r20	; 0x8003db <twi_masterBufferLength>
    1cf4:	56 2f       	mov	r21, r22
    1cf6:	ad ed       	ldi	r26, 0xDD	; 221
    1cf8:	b3 e0       	ldi	r27, 0x03	; 3
    1cfa:	fb 01       	movw	r30, r22
    1cfc:	3e 2f       	mov	r19, r30
    1cfe:	35 1b       	sub	r19, r21
    1d00:	34 17       	cp	r19, r20
    1d02:	18 f4       	brcc	.+6      	; 0x1d0a <twi_writeTo+0x3e>
    1d04:	31 91       	ld	r19, Z+
    1d06:	3d 93       	st	X+, r19
    1d08:	f9 cf       	rjmp	.-14     	; 0x1cfc <twi_writeTo+0x30>
    1d0a:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <twi_slarw>
    1d0e:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <twi_slarw>
    1d12:	88 0f       	add	r24, r24
    1d14:	83 2b       	or	r24, r19
    1d16:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <twi_slarw>
    1d1a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_inRepStart>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	61 f4       	brne	.+24     	; 0x1d3a <twi_writeTo+0x6e>
    1d22:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_inRepStart>
    1d26:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_slarw>
    1d2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1d2e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d32:	83 fd       	sbrc	r24, 3
    1d34:	f8 cf       	rjmp	.-16     	; 0x1d26 <twi_writeTo+0x5a>
    1d36:	85 ec       	ldi	r24, 0xC5	; 197
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <twi_writeTo+0x70>
    1d3a:	85 ee       	ldi	r24, 0xE5	; 229
    1d3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1d40:	22 23       	and	r18, r18
    1d42:	21 f0       	breq	.+8      	; 0x1d4c <twi_writeTo+0x80>
    1d44:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <twi_state>
    1d48:	82 30       	cpi	r24, 0x02	; 2
    1d4a:	d1 f3       	breq	.-12     	; 0x1d40 <twi_writeTo+0x74>
    1d4c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <twi_error>
    1d50:	8f 3f       	cpi	r24, 0xFF	; 255
    1d52:	79 f0       	breq	.+30     	; 0x1d72 <twi_writeTo+0xa6>
    1d54:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <twi_error>
    1d58:	80 32       	cpi	r24, 0x20	; 32
    1d5a:	41 f0       	breq	.+16     	; 0x1d6c <twi_writeTo+0xa0>
    1d5c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <twi_error>
    1d60:	80 33       	cpi	r24, 0x30	; 48
    1d62:	31 f0       	breq	.+12     	; 0x1d70 <twi_writeTo+0xa4>
    1d64:	94 e0       	ldi	r25, 0x04	; 4
    1d66:	05 c0       	rjmp	.+10     	; 0x1d72 <twi_writeTo+0xa6>
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <twi_writeTo+0xa6>
    1d6c:	92 e0       	ldi	r25, 0x02	; 2
    1d6e:	01 c0       	rjmp	.+2      	; 0x1d72 <twi_writeTo+0xa6>
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	89 2f       	mov	r24, r25
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <twi_transmit>:
    1d78:	40 91 b9 03 	lds	r20, 0x03B9	; 0x8003b9 <twi_txBufferLength>
    1d7c:	26 2f       	mov	r18, r22
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	24 0f       	add	r18, r20
    1d82:	31 1d       	adc	r19, r1
    1d84:	21 32       	cpi	r18, 0x21	; 33
    1d86:	31 05       	cpc	r19, r1
    1d88:	dc f4       	brge	.+54     	; 0x1dc0 <twi_transmit+0x48>
    1d8a:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <twi_state>
    1d8e:	24 30       	cpi	r18, 0x04	; 4
    1d90:	c9 f4       	brne	.+50     	; 0x1dc4 <twi_transmit+0x4c>
    1d92:	fc 01       	movw	r30, r24
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	86 17       	cp	r24, r22
    1d9a:	58 f4       	brcc	.+22     	; 0x1db2 <twi_transmit+0x3a>
    1d9c:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <twi_txBufferLength>
    1da0:	21 91       	ld	r18, Z+
    1da2:	dc 01       	movw	r26, r24
    1da4:	a5 54       	subi	r26, 0x45	; 69
    1da6:	bc 4f       	sbci	r27, 0xFC	; 252
    1da8:	a3 0f       	add	r26, r19
    1daa:	b1 1d       	adc	r27, r1
    1dac:	2c 93       	st	X, r18
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	f3 cf       	rjmp	.-26     	; 0x1d98 <twi_transmit+0x20>
    1db2:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_txBufferLength>
    1db6:	68 0f       	add	r22, r24
    1db8:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <twi_txBufferLength>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	08 95       	ret
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	08 95       	ret
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	08 95       	ret

00001dc8 <twi_attachSlaveRxEvent>:
    1dc8:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <twi_onSlaveReceive+0x1>
    1dcc:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <twi_onSlaveReceive>
    1dd0:	08 95       	ret

00001dd2 <twi_attachSlaveTxEvent>:
    1dd2:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <twi_onSlaveTransmit+0x1>
    1dd6:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <twi_onSlaveTransmit>
    1dda:	08 95       	ret

00001ddc <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1ddc:	85 ed       	ldi	r24, 0xD5	; 213
    1dde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1de2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1de6:	84 fd       	sbrc	r24, 4
    1de8:	fc cf       	rjmp	.-8      	; 0x1de2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1dea:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_state>
    1dee:	08 95       	ret

00001df0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1df0:	85 ec       	ldi	r24, 0xC5	; 197
    1df2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    1df6:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_state>
    1dfa:	08 95       	ret

00001dfc <__vector_24>:
}

ISR(TWI_vect)
{
    1dfc:	1f 92       	push	r1
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	0f 92       	push	r0
    1e04:	11 24       	eor	r1, r1
    1e06:	2f 93       	push	r18
    1e08:	3f 93       	push	r19
    1e0a:	4f 93       	push	r20
    1e0c:	5f 93       	push	r21
    1e0e:	6f 93       	push	r22
    1e10:	7f 93       	push	r23
    1e12:	8f 93       	push	r24
    1e14:	9f 93       	push	r25
    1e16:	af 93       	push	r26
    1e18:	bf 93       	push	r27
    1e1a:	ef 93       	push	r30
    1e1c:	ff 93       	push	r31
  switch(TW_STATUS){
    1e1e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1e22:	88 7f       	andi	r24, 0xF8	; 248
    1e24:	80 36       	cpi	r24, 0x60	; 96
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <__vector_24+0x2e>
    1e28:	9e c0       	rjmp	.+316    	; 0x1f66 <__vector_24+0x16a>
    1e2a:	78 f5       	brcc	.+94     	; 0x1e8a <__vector_24+0x8e>
    1e2c:	88 32       	cpi	r24, 0x28	; 40
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <__vector_24+0x36>
    1e30:	5d c0       	rjmp	.+186    	; 0x1eec <__vector_24+0xf0>
    1e32:	90 f4       	brcc	.+36     	; 0x1e58 <__vector_24+0x5c>
    1e34:	80 31       	cpi	r24, 0x10	; 16
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <__vector_24+0x3e>
    1e38:	56 c0       	rjmp	.+172    	; 0x1ee6 <__vector_24+0xea>
    1e3a:	38 f4       	brcc	.+14     	; 0x1e4a <__vector_24+0x4e>
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <__vector_24+0x46>
    1e40:	f5 c0       	rjmp	.+490    	; 0x202c <__vector_24+0x230>
    1e42:	88 30       	cpi	r24, 0x08	; 8
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <__vector_24+0x4c>
    1e46:	4f c0       	rjmp	.+158    	; 0x1ee6 <__vector_24+0xea>
    1e48:	f5 c0       	rjmp	.+490    	; 0x2034 <__vector_24+0x238>
    1e4a:	88 31       	cpi	r24, 0x18	; 24
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <__vector_24+0x54>
    1e4e:	4e c0       	rjmp	.+156    	; 0x1eec <__vector_24+0xf0>
    1e50:	80 32       	cpi	r24, 0x20	; 32
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__vector_24+0x5a>
    1e54:	5f c0       	rjmp	.+190    	; 0x1f14 <__vector_24+0x118>
    1e56:	ee c0       	rjmp	.+476    	; 0x2034 <__vector_24+0x238>
    1e58:	80 34       	cpi	r24, 0x40	; 64
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <__vector_24+0x62>
    1e5c:	6a c0       	rjmp	.+212    	; 0x1f32 <__vector_24+0x136>
    1e5e:	58 f4       	brcc	.+22     	; 0x1e76 <__vector_24+0x7a>
    1e60:	80 33       	cpi	r24, 0x30	; 48
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <__vector_24+0x6a>
    1e64:	57 c0       	rjmp	.+174    	; 0x1f14 <__vector_24+0x118>
    1e66:	88 33       	cpi	r24, 0x38	; 56
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <__vector_24+0x70>
    1e6a:	e4 c0       	rjmp	.+456    	; 0x2034 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e6c:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <twi_error>
      twi_releaseBus();
    1e70:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <twi_releaseBus>
      break;
    1e74:	df c0       	rjmp	.+446    	; 0x2034 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e76:	80 35       	cpi	r24, 0x50	; 80
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__vector_24+0x80>
    1e7a:	4f c0       	rjmp	.+158    	; 0x1f1a <__vector_24+0x11e>
    1e7c:	88 35       	cpi	r24, 0x58	; 88
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <__vector_24+0x86>
    1e80:	5d c0       	rjmp	.+186    	; 0x1f3c <__vector_24+0x140>
    1e82:	88 34       	cpi	r24, 0x48	; 72
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <__vector_24+0x8c>
    1e86:	d6 c0       	rjmp	.+428    	; 0x2034 <__vector_24+0x238>
    1e88:	d3 c0       	rjmp	.+422    	; 0x2030 <__vector_24+0x234>
    1e8a:	88 39       	cpi	r24, 0x98	; 152
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <__vector_24+0x94>
    1e8e:	c4 c0       	rjmp	.+392    	; 0x2018 <__vector_24+0x21c>
    1e90:	a8 f4       	brcc	.+42     	; 0x1ebc <__vector_24+0xc0>
    1e92:	88 37       	cpi	r24, 0x78	; 120
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <__vector_24+0x9c>
    1e96:	67 c0       	rjmp	.+206    	; 0x1f66 <__vector_24+0x16a>
    1e98:	38 f4       	brcc	.+14     	; 0x1ea8 <__vector_24+0xac>
    1e9a:	88 36       	cpi	r24, 0x68	; 104
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <__vector_24+0xa4>
    1e9e:	63 c0       	rjmp	.+198    	; 0x1f66 <__vector_24+0x16a>
    1ea0:	80 37       	cpi	r24, 0x70	; 112
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <__vector_24+0xaa>
    1ea4:	60 c0       	rjmp	.+192    	; 0x1f66 <__vector_24+0x16a>
    1ea6:	c6 c0       	rjmp	.+396    	; 0x2034 <__vector_24+0x238>
    1ea8:	88 38       	cpi	r24, 0x88	; 136
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <__vector_24+0xb2>
    1eac:	b5 c0       	rjmp	.+362    	; 0x2018 <__vector_24+0x21c>
    1eae:	80 39       	cpi	r24, 0x90	; 144
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <__vector_24+0xb8>
    1eb2:	5f c0       	rjmp	.+190    	; 0x1f72 <__vector_24+0x176>
    1eb4:	80 38       	cpi	r24, 0x80	; 128
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <__vector_24+0xbe>
    1eb8:	bd c0       	rjmp	.+378    	; 0x2034 <__vector_24+0x238>
    1eba:	5b c0       	rjmp	.+182    	; 0x1f72 <__vector_24+0x176>
    1ebc:	80 3b       	cpi	r24, 0xB0	; 176
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <__vector_24+0xc6>
    1ec0:	83 c0       	rjmp	.+262    	; 0x1fc8 <__vector_24+0x1cc>
    1ec2:	38 f4       	brcc	.+14     	; 0x1ed2 <__vector_24+0xd6>
    1ec4:	80 3a       	cpi	r24, 0xA0	; 160
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <__vector_24+0xce>
    1ec8:	66 c0       	rjmp	.+204    	; 0x1f96 <__vector_24+0x19a>
    1eca:	88 3a       	cpi	r24, 0xA8	; 168
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <__vector_24+0xd4>
    1ece:	7c c0       	rjmp	.+248    	; 0x1fc8 <__vector_24+0x1cc>
    1ed0:	b1 c0       	rjmp	.+354    	; 0x2034 <__vector_24+0x238>
    1ed2:	80 3c       	cpi	r24, 0xC0	; 192
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <__vector_24+0xdc>
    1ed6:	a4 c0       	rjmp	.+328    	; 0x2020 <__vector_24+0x224>
    1ed8:	88 3c       	cpi	r24, 0xC8	; 200
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__vector_24+0xe2>
    1edc:	a1 c0       	rjmp	.+322    	; 0x2020 <__vector_24+0x224>
    1ede:	88 3b       	cpi	r24, 0xB8	; 184
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <__vector_24+0xe8>
    1ee2:	87 c0       	rjmp	.+270    	; 0x1ff2 <__vector_24+0x1f6>
    1ee4:	a7 c0       	rjmp	.+334    	; 0x2034 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1ee6:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <twi_slarw>
    1eea:	10 c0       	rjmp	.+32     	; 0x1f0c <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1eec:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1ef0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <twi_masterBufferLength>
    1ef4:	98 17       	cp	r25, r24
    1ef6:	70 f5       	brcc	.+92     	; 0x1f54 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1ef8:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	8e 0f       	add	r24, r30
    1f00:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <twi_masterBufferIndex>
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	e3 52       	subi	r30, 0x23	; 35
    1f08:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f10:	85 ec       	ldi	r24, 0xC5	; 197
    1f12:	83 c0       	rjmp	.+262    	; 0x201a <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f14:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <twi_error>
    1f18:	8b c0       	rjmp	.+278    	; 0x2030 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f1a:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	8e 0f       	add	r24, r30
    1f22:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <twi_masterBufferIndex>
    1f26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	e3 52       	subi	r30, 0x23	; 35
    1f2e:	fc 4f       	sbci	r31, 0xFC	; 252
    1f30:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f32:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1f36:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <twi_masterBufferLength>
    1f3a:	6b c0       	rjmp	.+214    	; 0x2012 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f3c:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <twi_masterBufferIndex>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	8e 0f       	add	r24, r30
    1f44:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <twi_masterBufferIndex>
    1f48:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	e3 52       	subi	r30, 0x23	; 35
    1f50:	fc 4f       	sbci	r31, 0xFC	; 252
    1f52:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f54:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <twi_sendStop>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	6a c0       	rjmp	.+212    	; 0x2030 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f62:	84 ea       	ldi	r24, 0xA4	; 164
    1f64:	5e c0       	rjmp	.+188    	; 0x2022 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f6c:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <twi_rxBufferIndex>
    1f70:	cf cf       	rjmp	.-98     	; 0x1f10 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f72:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <twi_rxBufferIndex>
    1f76:	80 32       	cpi	r24, 0x20	; 32
    1f78:	08 f0       	brcs	.+2      	; 0x1f7c <__vector_24+0x180>
    1f7a:	4e c0       	rjmp	.+156    	; 0x2018 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1f7c:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <twi_rxBufferIndex>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	8e 0f       	add	r24, r30
    1f84:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_rxBufferIndex>
    1f88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	e7 56       	subi	r30, 0x67	; 103
    1f90:	fc 4f       	sbci	r31, 0xFC	; 252
    1f92:	80 83       	st	Z, r24
    1f94:	bd cf       	rjmp	.-134    	; 0x1f10 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1f96:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f9a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <twi_rxBufferIndex>
    1f9e:	80 32       	cpi	r24, 0x20	; 32
    1fa0:	30 f4       	brcc	.+12     	; 0x1fae <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1fa2:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <twi_rxBufferIndex>
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	e7 56       	subi	r30, 0x67	; 103
    1faa:	fc 4f       	sbci	r31, 0xFC	; 252
    1fac:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1fae:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <twi_rxBufferIndex>
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <twi_onSlaveReceive>
    1fb8:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <twi_onSlaveReceive+0x1>
    1fbc:	89 e9       	ldi	r24, 0x99	; 153
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1fc2:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <twi_rxBufferIndex>
      break;
    1fc6:	36 c0       	rjmp	.+108    	; 0x2034 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1fce:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1fd2:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1fd6:	e0 91 ff 03 	lds	r30, 0x03FF	; 0x8003ff <twi_onSlaveTransmit>
    1fda:	f0 91 00 04 	lds	r31, 0x0400	; 0x800400 <twi_onSlaveTransmit+0x1>
    1fde:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1fe0:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_txBufferLength>
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	05 c0       	rjmp	.+10     	; 0x1ff2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1fee:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ff2:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <twi_txBufferIndex>
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	8e 0f       	add	r24, r30
    1ffa:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <twi_txBufferIndex>
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	e5 54       	subi	r30, 0x45	; 69
    2002:	fc 4f       	sbci	r31, 0xFC	; 252
    2004:	80 81       	ld	r24, Z
    2006:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    200a:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <twi_txBufferIndex>
    200e:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_txBufferLength>
    2012:	98 17       	cp	r25, r24
    2014:	08 f4       	brcc	.+2      	; 0x2018 <__vector_24+0x21c>
    2016:	7c cf       	rjmp	.-264    	; 0x1f10 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2018:	85 e8       	ldi	r24, 0x85	; 133
    201a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2020:	85 ec       	ldi	r24, 0xC5	; 197
    2022:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2026:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <twi_state>
      break;
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    202c:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <twi_error>
      twi_stop();
    2030:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <twi_stop>
      break;
  }
}
    2034:	ff 91       	pop	r31
    2036:	ef 91       	pop	r30
    2038:	bf 91       	pop	r27
    203a:	af 91       	pop	r26
    203c:	9f 91       	pop	r25
    203e:	8f 91       	pop	r24
    2040:	7f 91       	pop	r23
    2042:	6f 91       	pop	r22
    2044:	5f 91       	pop	r21
    2046:	4f 91       	pop	r20
    2048:	3f 91       	pop	r19
    204a:	2f 91       	pop	r18
    204c:	0f 90       	pop	r0
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	0f 90       	pop	r0
    2052:	1f 90       	pop	r1
    2054:	18 95       	reti

00002056 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2056:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    2060:	82 1b       	sub	r24, r18
    2062:	91 09       	sbc	r25, r1
    2064:	08 95       	ret

00002066 <_ZN7TwoWire4readEv>:
    2066:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    206a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    206e:	98 17       	cp	r25, r24
    2070:	50 f4       	brcc	.+20     	; 0x2086 <_ZN7TwoWire4readEv+0x20>
    2072:	e9 2f       	mov	r30, r25
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	e5 5c       	subi	r30, 0xC5	; 197
    2078:	fb 4f       	sbci	r31, 0xFB	; 251
    207a:	20 81       	ld	r18, Z
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	9f 5f       	subi	r25, 0xFF	; 255
    2080:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    2084:	02 c0       	rjmp	.+4      	; 0x208a <_ZN7TwoWire4readEv+0x24>
    2086:	2f ef       	ldi	r18, 0xFF	; 255
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	c9 01       	movw	r24, r18
    208c:	08 95       	ret

0000208e <_ZN7TwoWire4peekEv>:
    208e:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    2092:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    2096:	e8 17       	cp	r30, r24
    2098:	30 f4       	brcc	.+12     	; 0x20a6 <_ZN7TwoWire4peekEv+0x18>
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	e5 5c       	subi	r30, 0xC5	; 197
    209e:	fb 4f       	sbci	r31, 0xFB	; 251
    20a0:	80 81       	ld	r24, Z
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	08 95       	ret
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	9f ef       	ldi	r25, 0xFF	; 255
    20aa:	08 95       	ret

000020ac <_ZN7TwoWire5flushEv>:
    20ac:	08 95       	ret

000020ae <_ZN7TwoWire16onReceiveServiceEPhi>:
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	ec 01       	movw	r28, r24
    20b4:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <_ZN7TwoWire14user_onReceiveE>
    20b8:	f0 91 12 04 	lds	r31, 0x0412	; 0x800412 <_ZN7TwoWire14user_onReceiveE+0x1>
    20bc:	30 97       	sbiw	r30, 0x00	; 0
    20be:	f1 f0       	breq	.+60     	; 0x20fc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20c0:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    20c4:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    20c8:	98 17       	cp	r25, r24
    20ca:	c0 f0       	brcs	.+48     	; 0x20fc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	29 2f       	mov	r18, r25
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	26 17       	cp	r18, r22
    20d4:	37 07       	cpc	r19, r23
    20d6:	54 f4       	brge	.+20     	; 0x20ec <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    20d8:	de 01       	movw	r26, r28
    20da:	a2 0f       	add	r26, r18
    20dc:	b3 1f       	adc	r27, r19
    20de:	4c 91       	ld	r20, X
    20e0:	d9 01       	movw	r26, r18
    20e2:	a5 5c       	subi	r26, 0xC5	; 197
    20e4:	bb 4f       	sbci	r27, 0xFB	; 251
    20e6:	4c 93       	st	X, r20
    20e8:	9f 5f       	subi	r25, 0xFF	; 255
    20ea:	f1 cf       	rjmp	.-30     	; 0x20ce <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    20ec:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    20f0:	60 93 39 04 	sts	0x0439, r22	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    20f4:	cb 01       	movw	r24, r22
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	09 94       	ijmp
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	08 95       	ret

00002102 <_ZN7TwoWire16onRequestServiceEv>:
    2102:	e0 91 13 04 	lds	r30, 0x0413	; 0x800413 <_ZN7TwoWire14user_onRequestE>
    2106:	f0 91 14 04 	lds	r31, 0x0414	; 0x800414 <_ZN7TwoWire14user_onRequestE+0x1>
    210a:	30 97       	sbiw	r30, 0x00	; 0
    210c:	29 f0       	breq	.+10     	; 0x2118 <_ZN7TwoWire16onRequestServiceEv+0x16>
    210e:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <_ZN7TwoWire13txBufferIndexE>
    2112:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    2116:	09 94       	ijmp
    2118:	08 95       	ret

0000211a <_ZN7TwoWire5writeEPKhj>:
    211a:	cf 92       	push	r12
    211c:	df 92       	push	r13
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	7c 01       	movw	r14, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8a 01       	movw	r16, r20
    2130:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <_ZN7TwoWire12transmittingE>
    2134:	22 23       	and	r18, r18
    2136:	89 f0       	breq	.+34     	; 0x215a <_ZN7TwoWire5writeEPKhj+0x40>
    2138:	eb 01       	movw	r28, r22
    213a:	6b 01       	movw	r12, r22
    213c:	c4 0e       	add	r12, r20
    213e:	d5 1e       	adc	r13, r21
    2140:	cc 15       	cp	r28, r12
    2142:	dd 05       	cpc	r29, r13
    2144:	69 f0       	breq	.+26     	; 0x2160 <_ZN7TwoWire5writeEPKhj+0x46>
    2146:	69 91       	ld	r22, Y+
    2148:	d7 01       	movw	r26, r14
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	01 90       	ld	r0, Z+
    2150:	f0 81       	ld	r31, Z
    2152:	e0 2d       	mov	r30, r0
    2154:	c7 01       	movw	r24, r14
    2156:	09 95       	icall
    2158:	f3 cf       	rjmp	.-26     	; 0x2140 <_ZN7TwoWire5writeEPKhj+0x26>
    215a:	64 2f       	mov	r22, r20
    215c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <twi_transmit>
    2160:	c8 01       	movw	r24, r16
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	08 95       	ret

00002174 <_ZN7TwoWire5writeEh>:
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	1f 92       	push	r1
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	69 83       	std	Y+1, r22	; 0x01
    2180:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <_ZN7TwoWire12transmittingE>
    2184:	22 23       	and	r18, r18
    2186:	d1 f0       	breq	.+52     	; 0x21bc <_ZN7TwoWire5writeEh+0x48>
    2188:	20 91 16 04 	lds	r18, 0x0416	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    218c:	20 32       	cpi	r18, 0x20	; 32
    218e:	40 f0       	brcs	.+16     	; 0x21a0 <_ZN7TwoWire5writeEh+0x2c>
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	fc 01       	movw	r30, r24
    2196:	33 83       	std	Z+3, r19	; 0x03
    2198:	22 83       	std	Z+2, r18	; 0x02
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	15 c0       	rjmp	.+42     	; 0x21ca <_ZN7TwoWire5writeEh+0x56>
    21a0:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <_ZN7TwoWire13txBufferIndexE>
    21a4:	e8 2f       	mov	r30, r24
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	e8 5e       	subi	r30, 0xE8	; 232
    21aa:	fb 4f       	sbci	r31, 0xFB	; 251
    21ac:	99 81       	ldd	r25, Y+1	; 0x01
    21ae:	90 83       	st	Z, r25
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZN7TwoWire13txBufferIndexE>
    21b6:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    21ba:	05 c0       	rjmp	.+10     	; 0x21c6 <_ZN7TwoWire5writeEh+0x52>
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	ce 01       	movw	r24, r28
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <twi_transmit>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0f 90       	pop	r0
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret

000021d2 <_ZN7TwoWireC1Ev>:
    21d2:	fc 01       	movw	r30, r24
    21d4:	13 82       	std	Z+3, r1	; 0x03
    21d6:	12 82       	std	Z+2, r1	; 0x02
    21d8:	88 ee       	ldi	r24, 0xE8	; 232
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	84 83       	std	Z+4, r24	; 0x04
    21e2:	95 83       	std	Z+5, r25	; 0x05
    21e4:	a6 83       	std	Z+6, r26	; 0x06
    21e6:	b7 83       	std	Z+7, r27	; 0x07
    21e8:	8b e6       	ldi	r24, 0x6B	; 107
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	08 95       	ret

000021f2 <_ZN7TwoWire5beginEv>:
    21f2:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    21f6:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    21fa:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <_ZN7TwoWire13txBufferIndexE>
    21fe:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    2202:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <twi_init>
    2206:	81 e8       	ldi	r24, 0x81	; 129
    2208:	90 e1       	ldi	r25, 0x10	; 16
    220a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <twi_attachSlaveTxEvent>
    220e:	87 e5       	ldi	r24, 0x57	; 87
    2210:	90 e1       	ldi	r25, 0x10	; 16
    2212:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <twi_attachSlaveRxEvent>

00002216 <_ZN7TwoWire17beginTransmissionEh>:
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <_ZN7TwoWire12transmittingE>
    221c:	60 93 38 04 	sts	0x0438, r22	; 0x800438 <_ZN7TwoWire9txAddressE>
    2220:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <_ZN7TwoWire13txBufferIndexE>
    2224:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    2228:	08 95       	ret

0000222a <_ZN7TwoWire17beginTransmissionEi>:
    222a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <_ZN7TwoWire17beginTransmissionEh>

0000222e <_ZN7TwoWire15endTransmissionEh>:
    222e:	0f 93       	push	r16
    2230:	06 2f       	mov	r16, r22
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	40 91 16 04 	lds	r20, 0x0416	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    2238:	68 e1       	ldi	r22, 0x18	; 24
    223a:	74 e0       	ldi	r23, 0x04	; 4
    223c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <_ZN7TwoWire9txAddressE>
    2240:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <twi_writeTo>
    2244:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <_ZN7TwoWire13txBufferIndexE>
    2248:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <_ZN7TwoWire14txBufferLengthE>
    224c:	10 92 15 04 	sts	0x0415, r1	; 0x800415 <_ZN7TwoWire12transmittingE>
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <_ZN7TwoWire11requestFromEhhmhh>:
    2254:	4f 92       	push	r4
    2256:	5f 92       	push	r5
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	af 92       	push	r10
    225e:	bf 92       	push	r11
    2260:	cf 92       	push	r12
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	5c 01       	movw	r10, r24
    2270:	f6 2e       	mov	r15, r22
    2272:	d4 2f       	mov	r29, r20
    2274:	28 01       	movw	r4, r16
    2276:	39 01       	movw	r6, r18
    2278:	ee 20       	and	r14, r14
    227a:	21 f1       	breq	.+72     	; 0x22c4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    227c:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire17beginTransmissionEh>
    2280:	ce 2d       	mov	r28, r14
    2282:	c4 30       	cpi	r28, 0x04	; 4
    2284:	08 f0       	brcs	.+2      	; 0x2288 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2286:	c3 e0       	ldi	r28, 0x03	; 3
    2288:	c1 50       	subi	r28, 0x01	; 1
    228a:	c0 f0       	brcs	.+48     	; 0x22bc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    228c:	28 e0       	ldi	r18, 0x08	; 8
    228e:	c2 9f       	mul	r28, r18
    2290:	c0 01       	movw	r24, r0
    2292:	11 24       	eor	r1, r1
    2294:	a3 01       	movw	r20, r6
    2296:	92 01       	movw	r18, r4
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    229a:	56 95       	lsr	r21
    229c:	47 95       	ror	r20
    229e:	37 95       	ror	r19
    22a0:	27 95       	ror	r18
    22a2:	8a 95       	dec	r24
    22a4:	d2 f7       	brpl	.-12     	; 0x229a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    22a6:	ca 01       	movw	r24, r20
    22a8:	b9 01       	movw	r22, r18
    22aa:	d5 01       	movw	r26, r10
    22ac:	ed 91       	ld	r30, X+
    22ae:	fc 91       	ld	r31, X
    22b0:	01 90       	ld	r0, Z+
    22b2:	f0 81       	ld	r31, Z
    22b4:	e0 2d       	mov	r30, r0
    22b6:	c5 01       	movw	r24, r10
    22b8:	09 95       	icall
    22ba:	e6 cf       	rjmp	.-52     	; 0x2288 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	c5 01       	movw	r24, r10
    22c0:	0e 94 17 11 	call	0x222e	; 0x222e <_ZN7TwoWire15endTransmissionEh>
    22c4:	4d 2f       	mov	r20, r29
    22c6:	d1 32       	cpi	r29, 0x21	; 33
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <_ZN7TwoWire11requestFromEhhmhh+0x78>
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	2c 2d       	mov	r18, r12
    22ce:	6b e3       	ldi	r22, 0x3B	; 59
    22d0:	74 e0       	ldi	r23, 0x04	; 4
    22d2:	8f 2d       	mov	r24, r15
    22d4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <twi_readFrom>
    22d8:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZN7TwoWire13rxBufferIndexE>
    22dc:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_ZN7TwoWire14rxBufferLengthE>
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    22ec:	cf 90       	pop	r12
    22ee:	bf 90       	pop	r11
    22f0:	af 90       	pop	r10
    22f2:	7f 90       	pop	r7
    22f4:	6f 90       	pop	r6
    22f6:	5f 90       	pop	r5
    22f8:	4f 90       	pop	r4
    22fa:	08 95       	ret

000022fc <_ZN7TwoWire11requestFromEhhh>:
    22fc:	cf 92       	push	r12
    22fe:	ef 92       	push	r14
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	c2 2e       	mov	r12, r18
    2306:	e1 2c       	mov	r14, r1
    2308:	00 e0       	ldi	r16, 0x00	; 0
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	98 01       	movw	r18, r16
    230e:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN7TwoWire11requestFromEhhmhh>
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ef 90       	pop	r14
    2318:	cf 90       	pop	r12
    231a:	08 95       	ret

0000231c <_ZN7TwoWire11requestFromEii>:
    231c:	21 e0       	ldi	r18, 0x01	; 1
    231e:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <_ZN7TwoWire11requestFromEhhh>

00002322 <_ZN7TwoWire15endTransmissionEv>:
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	0c 94 17 11 	jmp	0x222e	; 0x222e <_ZN7TwoWire15endTransmissionEh>

00002328 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2328:	85 e0       	ldi	r24, 0x05	; 5
    232a:	94 e0       	ldi	r25, 0x04	; 4
    232c:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <_ZN7TwoWireC1Ev>

00002330 <_ZN13ExtendedTests20runExtendedTypesTestEv>:
#endif
}


//RMonV3 types/flags test
void ExtendedTests::runExtendedTypesTest() {
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	c9 53       	subi	r28, 0x39	; 57
    2344:	d5 40       	sbci	r29, 0x05	; 5
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	ca 5c       	subi	r28, 0xCA	; 202
    2352:	da 4f       	sbci	r29, 0xFA	; 250
    2354:	18 82       	st	Y, r1
    2356:	c6 53       	subi	r28, 0x36	; 54
    2358:	d5 40       	sbci	r29, 0x05	; 5
    235a:	c9 5c       	subi	r28, 0xC9	; 201
    235c:	da 4f       	sbci	r29, 0xFA	; 250
    235e:	18 82       	st	Y, r1
    2360:	c7 53       	subi	r28, 0x37	; 55
    2362:	d5 40       	sbci	r29, 0x05	; 5
    2364:	c8 5c       	subi	r28, 0xC8	; 200
    2366:	da 4f       	sbci	r29, 0xFA	; 250
    2368:	18 82       	st	Y, r1
    236a:	c8 53       	subi	r28, 0x38	; 56
    236c:	d5 40       	sbci	r29, 0x05	; 5
							(FONA_GET_NETREG::NETSTAT_5 |
							FONA_GET_NETREG::RESULT_CODE_1 |
							FONA_GET_NETREG::IS_ERROR);
	
	FONA_GET_RSSI result;
	result.netReg = regVal;
    236e:	85 e3       	ldi	r24, 0x35	; 53
    2370:	c7 5c       	subi	r28, 0xC7	; 199
    2372:	da 4f       	sbci	r29, 0xFA	; 250
    2374:	88 83       	st	Y, r24
    2376:	c9 53       	subi	r28, 0x39	; 57
    2378:	d5 40       	sbci	r29, 0x05	; 5
					 
	RM_LOG(F("Netstat 5 + ResultCode 1 + Error 1="));
    237a:	63 ec       	ldi	r22, 0xC3	; 195
    237c:	75 e0       	ldi	r23, 0x05	; 5
    237e:	8b e5       	ldi	r24, 0x5B	; 91
    2380:	94 e0       	ldi	r25, 0x04	; 4
    2382:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(result.netReg, BIN);
    2386:	c7 5c       	subi	r28, 0xC7	; 199
    2388:	da 4f       	sbci	r29, 0xFA	; 250
    238a:	68 81       	ld	r22, Y
    238c:	c9 53       	subi	r28, 0x39	; 57
    238e:	d5 40       	sbci	r29, 0x05	; 5
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	42 e0       	ldi	r20, 0x02	; 2
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	8b e5       	ldi	r24, 0x5B	; 91
    2398:	94 e0       	ldi	r25, 0x04	; 4
    239a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN5Print7printlnEii>

	uint8_t memStoredVal = result.netReg;
    239e:	c7 5c       	subi	r28, 0xC7	; 199
    23a0:	da 4f       	sbci	r29, 0xFA	; 250
    23a2:	18 81       	ld	r17, Y
    23a4:	c9 53       	subi	r28, 0x39	; 57
    23a6:	d5 40       	sbci	r29, 0x05	; 5
	FONA_GET_NETREG back = (FONA_GET_NETREG)memStoredVal;
	RM_LOG(F("Cast back after int storage val:"));
    23a8:	62 ea       	ldi	r22, 0xA2	; 162
    23aa:	75 e0       	ldi	r23, 0x05	; 5
    23ac:	8b e5       	ldi	r24, 0x5B	; 91
    23ae:	94 e0       	ldi	r25, 0x04	; 4
    23b0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(back, BIN);
    23b4:	61 2f       	mov	r22, r17
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	42 e0       	ldi	r20, 0x02	; 2
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	8b e5       	ldi	r24, 0x5B	; 91
    23be:	94 e0       	ldi	r25, 0x04	; 4
    23c0:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN5Print7printlnEii>
    23c4:	81 2f       	mov	r24, r17
    23c6:	8c 71       	andi	r24, 0x1C	; 28
	
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_0) RM_LOGLN(F("*** TEST FAIL @1 ***"));
    23c8:	19 f4       	brne	.+6      	; 0x23d0 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xa0>
    23ca:	6d e8       	ldi	r22, 0x8D	; 141
    23cc:	75 e0       	ldi	r23, 0x05	; 5
    23ce:	13 c0       	rjmp	.+38     	; 0x23f6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc6>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_1) RM_LOGLN(F("*** TEST FAIL @2 ***"));
    23d0:	84 30       	cpi	r24, 0x04	; 4
    23d2:	19 f4       	brne	.+6      	; 0x23da <_ZN13ExtendedTests20runExtendedTypesTestEv+0xaa>
    23d4:	68 e7       	ldi	r22, 0x78	; 120
    23d6:	75 e0       	ldi	r23, 0x05	; 5
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc6>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_2) RM_LOGLN(F("*** TEST FAIL @3 ***"));
    23da:	88 30       	cpi	r24, 0x08	; 8
    23dc:	19 f4       	brne	.+6      	; 0x23e4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xb4>
    23de:	63 e6       	ldi	r22, 0x63	; 99
    23e0:	75 e0       	ldi	r23, 0x05	; 5
    23e2:	09 c0       	rjmp	.+18     	; 0x23f6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc6>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_3) RM_LOGLN(F("*** TEST FAIL @4 ***"));
    23e4:	8c 30       	cpi	r24, 0x0C	; 12
    23e6:	19 f4       	brne	.+6      	; 0x23ee <_ZN13ExtendedTests20runExtendedTypesTestEv+0xbe>
    23e8:	6e e4       	ldi	r22, 0x4E	; 78
    23ea:	75 e0       	ldi	r23, 0x05	; 5
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc6>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_4) RM_LOGLN(F("*** TEST FAIL @5 ***"));
    23ee:	80 31       	cpi	r24, 0x10	; 16
    23f0:	39 f4       	brne	.+14     	; 0x2400 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd0>
    23f2:	69 e3       	ldi	r22, 0x39	; 57
    23f4:	75 e0       	ldi	r23, 0x05	; 5
    23f6:	8b e5       	ldi	r24, 0x5B	; 91
    23f8:	94 e0       	ldi	r25, 0x04	; 4
    23fa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd4>
	if (NETREG_ONLY_NETSTAT(back) != FONA_GET_NETREG::NETSTAT_5) RM_LOGLN(F("*** TEST FAIL @6 ***"));
    2400:	84 31       	cpi	r24, 0x14	; 20
    2402:	31 f0       	breq	.+12     	; 0x2410 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xe0>
    2404:	64 e2       	ldi	r22, 0x24	; 36
    2406:	75 e0       	ldi	r23, 0x05	; 5
    2408:	8b e5       	ldi	r24, 0x5B	; 91
    240a:	94 e0       	ldi	r25, 0x04	; 4
    240c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2410:	01 2f       	mov	r16, r17
    2412:	03 70       	andi	r16, 0x03	; 3
	
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_0) RM_LOGLN(F("*** TEST FAIL @7 ***"));
    2414:	39 f4       	brne	.+14     	; 0x2424 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xf4>
    2416:	6f e0       	ldi	r22, 0x0F	; 15
    2418:	75 e0       	ldi	r23, 0x05	; 5
    241a:	8b e5       	ldi	r24, 0x5B	; 91
    241c:	94 e0       	ldi	r25, 0x04	; 4
    241e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xf8>
	if (NETREG_ONLY_RESULT_CODE(back) != FONA_GET_NETREG::RESULT_CODE_1) RM_LOGLN(F("*** TEST FAIL @8 ***"));
    2424:	01 30       	cpi	r16, 0x01	; 1
    2426:	71 f0       	breq	.+28     	; 0x2444 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x114>
    2428:	6a ef       	ldi	r22, 0xFA	; 250
    242a:	74 e0       	ldi	r23, 0x04	; 4
    242c:	8b e5       	ldi	r24, 0x5B	; 91
    242e:	94 e0       	ldi	r25, 0x04	; 4
    2430:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_2) RM_LOGLN(F("*** TEST FAIL @9 ***"));
    2434:	02 30       	cpi	r16, 0x02	; 2
    2436:	31 f4       	brne	.+12     	; 0x2444 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x114>
    2438:	65 ee       	ldi	r22, 0xE5	; 229
    243a:	74 e0       	ldi	r23, 0x04	; 4
    243c:	8b e5       	ldi	r24, 0x5B	; 91
    243e:	94 e0       	ldi	r25, 0x04	; 4
    2440:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (NETREG_ONLY_ERROR(back) != FONA_GET_NETREG::IS_ERROR) RM_LOGLN(F("*** TEST FAIL @10 ***"));
    2444:	15 fd       	sbrc	r17, 5
    2446:	06 c0       	rjmp	.+12     	; 0x2454 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x124>
    2448:	6f ec       	ldi	r22, 0xCF	; 207
    244a:	74 e0       	ldi	r23, 0x04	; 4
    244c:	8b e5       	ldi	r24, 0x5B	; 91
    244e:	94 e0       	ldi	r25, 0x04	; 4
    2450:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Print test
	RM_LOG(F("Test For Print Output:"));
    2454:	68 eb       	ldi	r22, 0xB8	; 184
    2456:	74 e0       	ldi	r23, 0x04	; 4
    2458:	8b e5       	ldi	r24, 0x5B	; 91
    245a:	94 e0       	ldi	r25, 0x04	; 4
    245c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
	Helpers::printRSSI(&result);
    2460:	ce 01       	movw	r24, r28
    2462:	8a 5c       	subi	r24, 0xCA	; 202
    2464:	9a 4f       	sbci	r25, 0xFA	; 250
    2466:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	RM_LOGLN(F("--------------------------"));
    246a:	6d e9       	ldi	r22, 0x9D	; 157
    246c:	74 e0       	ldi	r23, 0x04	; 4
    246e:	8b e5       	ldi	r24, 0x5B	; 91
    2470:	94 e0       	ldi	r25, 0x04	; 4
    2472:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
	
	char p = 250;
	uint8_t val22 = (uint8_t)p;
	RM_LOG2(F("CHAR EXCEEDED BOUNDS IS"), val22);
    2476:	65 e8       	ldi	r22, 0x85	; 133
    2478:	74 e0       	ldi	r23, 0x04	; 4
    247a:	8b e5       	ldi	r24, 0x5B	; 91
    247c:	94 e0       	ldi	r25, 0x04	; 4
    247e:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    2482:	66 e4       	ldi	r22, 0x46	; 70
    2484:	71 e0       	ldi	r23, 0x01	; 1
    2486:	8b e5       	ldi	r24, 0x5B	; 91
    2488:	94 e0       	ldi	r25, 0x04	; 4
    248a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    248e:	4a e0       	ldi	r20, 0x0A	; 10
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	6a ef       	ldi	r22, 0xFA	; 250
    2494:	8b e5       	ldi	r24, 0x5B	; 91
    2496:	94 e0       	ldi	r25, 0x04	; 4
    2498:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZN5Print7printlnEhi>
	
	
	
	//1) Single round-trip test
	
	SensorData sd;			//size ~ 10 bytes
    249c:	dd 24       	eor	r13, r13
    249e:	d3 94       	inc	r13
    24a0:	c4 5d       	subi	r28, 0xD4	; 212
    24a2:	da 4f       	sbci	r29, 0xFA	; 250
    24a4:	d8 82       	st	Y, r13
    24a6:	cc 52       	subi	r28, 0x2C	; 44
    24a8:	d5 40       	sbci	r29, 0x05	; 5
    24aa:	cd 5c       	subi	r28, 0xCD	; 205
    24ac:	da 4f       	sbci	r29, 0xFA	; 250
    24ae:	19 82       	std	Y+1, r1	; 0x01
    24b0:	18 82       	st	Y, r1
    24b2:	c3 53       	subi	r28, 0x33	; 51
    24b4:	d5 40       	sbci	r29, 0x05	; 5
	sd.battVoltage = 20245; //Includes mV - e.g. 20.245V
    24b6:	85 e1       	ldi	r24, 0x15	; 21
    24b8:	9f e4       	ldi	r25, 0x4F	; 79
    24ba:	c3 5d       	subi	r28, 0xD3	; 211
    24bc:	da 4f       	sbci	r29, 0xFA	; 250
    24be:	99 83       	std	Y+1, r25	; 0x01
    24c0:	88 83       	st	Y, r24
    24c2:	cd 52       	subi	r28, 0x2D	; 45
    24c4:	d5 40       	sbci	r29, 0x05	; 5
	sd.current = 65535;
    24c6:	8f ef       	ldi	r24, 0xFF	; 255
    24c8:	9f ef       	ldi	r25, 0xFF	; 255
    24ca:	c1 5d       	subi	r28, 0xD1	; 209
    24cc:	da 4f       	sbci	r29, 0xFA	; 250
    24ce:	99 83       	std	Y+1, r25	; 0x01
    24d0:	88 83       	st	Y, r24
    24d2:	cf 52       	subi	r28, 0x2F	; 47
    24d4:	d5 40       	sbci	r29, 0x05	; 5
	sd.errorChar = 3;
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	cb 5c       	subi	r28, 0xCB	; 203
    24da:	da 4f       	sbci	r29, 0xFA	; 250
    24dc:	88 83       	st	Y, r24
    24de:	c5 53       	subi	r28, 0x35	; 53
    24e0:	d5 40       	sbci	r29, 0x05	; 5
	sd.pVVoltage = 64913;
    24e2:	81 e9       	ldi	r24, 0x91	; 145
    24e4:	9d ef       	ldi	r25, 0xFD	; 253
    24e6:	cf 5c       	subi	r28, 0xCF	; 207
    24e8:	da 4f       	sbci	r29, 0xFA	; 250
    24ea:	99 83       	std	Y+1, r25	; 0x01
    24ec:	88 83       	st	Y, r24
    24ee:	c1 53       	subi	r28, 0x31	; 49
    24f0:	d5 40       	sbci	r29, 0x05	; 5
	sd.temperature = 0;
	Helpers::printSensorData(&sd);
    24f2:	ce 01       	movw	r24, r28
    24f4:	84 5d       	subi	r24, 0xD4	; 212
    24f6:	9a 4f       	sbci	r25, 0xFA	; 250
    24f8:	0e 94 82 09 	call	0x1304	; 0x1304 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	uint8_t typicalMemUsage = sizeof("20245-65535-3-64913-0"); //23 bytes
	RM_LOG2("Basic int->str usage would be", typicalMemUsage);
    24fc:	67 e7       	ldi	r22, 0x77	; 119
    24fe:	71 e0       	ldi	r23, 0x01	; 1
    2500:	8b e5       	ldi	r24, 0x5B	; 91
    2502:	94 e0       	ldi	r25, 0x04	; 4
    2504:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    2508:	66 e4       	ldi	r22, 0x46	; 70
    250a:	71 e0       	ldi	r23, 0x01	; 1
    250c:	8b e5       	ldi	r24, 0x5B	; 91
    250e:	94 e0       	ldi	r25, 0x04	; 4
    2510:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    2514:	4a e0       	ldi	r20, 0x0A	; 10
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	66 e1       	ldi	r22, 0x16	; 22
    251a:	8b e5       	ldi	r24, 0x5B	; 91
    251c:	94 e0       	ldi	r25, 0x04	; 4
    251e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZN5Print7printlnEhi>
	
	char output[100];
	int len = Helpers::base64_encode(output, (char*)&sd, sizeof(SensorData));
    2522:	8e 01       	movw	r16, r28
    2524:	0f 54       	subi	r16, 0x4F	; 79
    2526:	1b 4f       	sbci	r17, 0xFB	; 251
    2528:	4a e0       	ldi	r20, 0x0A	; 10
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	be 01       	movw	r22, r28
    252e:	64 5d       	subi	r22, 0xD4	; 212
    2530:	7a 4f       	sbci	r23, 0xFA	; 250
    2532:	c8 01       	movw	r24, r16
    2534:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_ZN7Helpers13base64_encodeEPcS0_i>
    2538:	7c 01       	movw	r14, r24
	RM_LOG("Encoded result to be sent over Web is ");
    253a:	65 e9       	ldi	r22, 0x95	; 149
    253c:	71 e0       	ldi	r23, 0x01	; 1
    253e:	8b e5       	ldi	r24, 0x5B	; 91
    2540:	94 e0       	ldi	r25, 0x04	; 4
    2542:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
	RM_LOG(output);
    2546:	b8 01       	movw	r22, r16
    2548:	8b e5       	ldi	r24, 0x5B	; 91
    254a:	94 e0       	ldi	r25, 0x04	; 4
    254c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
	RM_LOG2(", with size of ", len);
    2550:	6c eb       	ldi	r22, 0xBC	; 188
    2552:	71 e0       	ldi	r23, 0x01	; 1
    2554:	8b e5       	ldi	r24, 0x5B	; 91
    2556:	94 e0       	ldi	r25, 0x04	; 4
    2558:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    255c:	66 e4       	ldi	r22, 0x46	; 70
    255e:	71 e0       	ldi	r23, 0x01	; 1
    2560:	8b e5       	ldi	r24, 0x5B	; 91
    2562:	94 e0       	ldi	r25, 0x04	; 4
    2564:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    2568:	4a e0       	ldi	r20, 0x0A	; 10
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	b7 01       	movw	r22, r14
    256e:	8b e5       	ldi	r24, 0x5B	; 91
    2570:	94 e0       	ldi	r25, 0x04	; 4
    2572:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN5Print7printlnEii>
	RM_LOGLN("\t(excluding the '0' at the end incase to be treated as string)");
    2576:	6c ec       	ldi	r22, 0xCC	; 204
    2578:	71 e0       	ldi	r23, 0x01	; 1
    257a:	8b e5       	ldi	r24, 0x5B	; 91
    257c:	94 e0       	ldi	r25, 0x04	; 4
    257e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
	
	
	SensorData sdAfter;
    2582:	ce 5d       	subi	r28, 0xDE	; 222
    2584:	da 4f       	sbci	r29, 0xFA	; 250
    2586:	d8 82       	st	Y, r13
    2588:	c2 52       	subi	r28, 0x22	; 34
    258a:	d5 40       	sbci	r29, 0x05	; 5
    258c:	cd 5d       	subi	r28, 0xDD	; 221
    258e:	da 4f       	sbci	r29, 0xFA	; 250
    2590:	19 82       	std	Y+1, r1	; 0x01
    2592:	18 82       	st	Y, r1
    2594:	c3 52       	subi	r28, 0x23	; 35
    2596:	d5 40       	sbci	r29, 0x05	; 5
    2598:	cb 5d       	subi	r28, 0xDB	; 219
    259a:	da 4f       	sbci	r29, 0xFA	; 250
    259c:	19 82       	std	Y+1, r1	; 0x01
    259e:	18 82       	st	Y, r1
    25a0:	c5 52       	subi	r28, 0x25	; 37
    25a2:	d5 40       	sbci	r29, 0x05	; 5
    25a4:	c9 5d       	subi	r28, 0xD9	; 217
    25a6:	da 4f       	sbci	r29, 0xFA	; 250
    25a8:	19 82       	std	Y+1, r1	; 0x01
    25aa:	18 82       	st	Y, r1
    25ac:	c7 52       	subi	r28, 0x27	; 39
    25ae:	d5 40       	sbci	r29, 0x05	; 5
    25b0:	c7 5d       	subi	r28, 0xD7	; 215
    25b2:	da 4f       	sbci	r29, 0xFA	; 250
    25b4:	19 82       	std	Y+1, r1	; 0x01
    25b6:	18 82       	st	Y, r1
    25b8:	c9 52       	subi	r28, 0x29	; 41
    25ba:	d5 40       	sbci	r29, 0x05	; 5
    25bc:	c5 5d       	subi	r28, 0xD5	; 213
    25be:	da 4f       	sbci	r29, 0xFA	; 250
    25c0:	18 82       	st	Y, r1
    25c2:	cb 52       	subi	r28, 0x2B	; 43
    25c4:	d5 40       	sbci	r29, 0x05	; 5
	int lenAfter = Helpers::base64_decode((char*)&sdAfter, output, len);
    25c6:	a7 01       	movw	r20, r14
    25c8:	b8 01       	movw	r22, r16
    25ca:	ce 01       	movw	r24, r28
    25cc:	8e 5d       	subi	r24, 0xDE	; 222
    25ce:	9a 4f       	sbci	r25, 0xFA	; 250
    25d0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN7Helpers13base64_decodeEPcS0_i>
    25d4:	7c 01       	movw	r14, r24
	RM_LOG2("Decoded result received over Web has size of ", lenAfter);
    25d6:	6b e0       	ldi	r22, 0x0B	; 11
    25d8:	72 e0       	ldi	r23, 0x02	; 2
    25da:	8b e5       	ldi	r24, 0x5B	; 91
    25dc:	94 e0       	ldi	r25, 0x04	; 4
    25de:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    25e2:	66 e4       	ldi	r22, 0x46	; 70
    25e4:	71 e0       	ldi	r23, 0x01	; 1
    25e6:	8b e5       	ldi	r24, 0x5B	; 91
    25e8:	94 e0       	ldi	r25, 0x04	; 4
    25ea:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <_ZN5Print5printEPKc>
    25ee:	4a e0       	ldi	r20, 0x0A	; 10
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	b7 01       	movw	r22, r14
    25f4:	8b e5       	ldi	r24, 0x5B	; 91
    25f6:	94 e0       	ldi	r25, 0x04	; 4
    25f8:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <_ZN5Print7printlnEii>
	Helpers::printSensorData(&sdAfter);
    25fc:	ce 01       	movw	r24, r28
    25fe:	8e 5d       	subi	r24, 0xDE	; 222
    2600:	9a 4f       	sbci	r25, 0xFA	; 250
    2602:	0e 94 82 09 	call	0x1304	; 0x1304 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	if (sdAfter.battVoltage != sd.battVoltage) RM_LOGLN(F("*** ENC TEST FAIL @1 ***"));
    2606:	cd 5d       	subi	r28, 0xDD	; 221
    2608:	da 4f       	sbci	r29, 0xFA	; 250
    260a:	28 81       	ld	r18, Y
    260c:	39 81       	ldd	r19, Y+1	; 0x01
    260e:	c3 52       	subi	r28, 0x23	; 35
    2610:	d5 40       	sbci	r29, 0x05	; 5
    2612:	c3 5d       	subi	r28, 0xD3	; 211
    2614:	da 4f       	sbci	r29, 0xFA	; 250
    2616:	88 81       	ld	r24, Y
    2618:	99 81       	ldd	r25, Y+1	; 0x01
    261a:	cd 52       	subi	r28, 0x2D	; 45
    261c:	d5 40       	sbci	r29, 0x05	; 5
    261e:	28 17       	cp	r18, r24
    2620:	39 07       	cpc	r19, r25
    2622:	31 f0       	breq	.+12     	; 0x2630 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x300>
    2624:	6c e6       	ldi	r22, 0x6C	; 108
    2626:	74 e0       	ldi	r23, 0x04	; 4
    2628:	8b e5       	ldi	r24, 0x5B	; 91
    262a:	94 e0       	ldi	r25, 0x04	; 4
    262c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.current != sd.current) RM_LOGLN(F("*** ENC TEST FAIL @2 ***"));
    2630:	cb 5d       	subi	r28, 0xDB	; 219
    2632:	da 4f       	sbci	r29, 0xFA	; 250
    2634:	28 81       	ld	r18, Y
    2636:	39 81       	ldd	r19, Y+1	; 0x01
    2638:	c5 52       	subi	r28, 0x25	; 37
    263a:	d5 40       	sbci	r29, 0x05	; 5
    263c:	c1 5d       	subi	r28, 0xD1	; 209
    263e:	da 4f       	sbci	r29, 0xFA	; 250
    2640:	88 81       	ld	r24, Y
    2642:	99 81       	ldd	r25, Y+1	; 0x01
    2644:	cf 52       	subi	r28, 0x2F	; 47
    2646:	d5 40       	sbci	r29, 0x05	; 5
    2648:	28 17       	cp	r18, r24
    264a:	39 07       	cpc	r19, r25
    264c:	31 f0       	breq	.+12     	; 0x265a <_ZN13ExtendedTests20runExtendedTypesTestEv+0x32a>
    264e:	63 e5       	ldi	r22, 0x53	; 83
    2650:	74 e0       	ldi	r23, 0x04	; 4
    2652:	8b e5       	ldi	r24, 0x5B	; 91
    2654:	94 e0       	ldi	r25, 0x04	; 4
    2656:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.errorChar != sd.errorChar) RM_LOGLN(F("*** ENC TEST FAIL @3 ***"));
    265a:	c5 5d       	subi	r28, 0xD5	; 213
    265c:	da 4f       	sbci	r29, 0xFA	; 250
    265e:	98 81       	ld	r25, Y
    2660:	cb 52       	subi	r28, 0x2B	; 43
    2662:	d5 40       	sbci	r29, 0x05	; 5
    2664:	cb 5c       	subi	r28, 0xCB	; 203
    2666:	da 4f       	sbci	r29, 0xFA	; 250
    2668:	88 81       	ld	r24, Y
    266a:	c5 53       	subi	r28, 0x35	; 53
    266c:	d5 40       	sbci	r29, 0x05	; 5
    266e:	98 17       	cp	r25, r24
    2670:	31 f0       	breq	.+12     	; 0x267e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x34e>
    2672:	6a e3       	ldi	r22, 0x3A	; 58
    2674:	74 e0       	ldi	r23, 0x04	; 4
    2676:	8b e5       	ldi	r24, 0x5B	; 91
    2678:	94 e0       	ldi	r25, 0x04	; 4
    267a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.pVVoltage != sd.pVVoltage) RM_LOGLN(F("*** ENC TEST FAIL @4 ***"));
    267e:	c9 5d       	subi	r28, 0xD9	; 217
    2680:	da 4f       	sbci	r29, 0xFA	; 250
    2682:	28 81       	ld	r18, Y
    2684:	39 81       	ldd	r19, Y+1	; 0x01
    2686:	c7 52       	subi	r28, 0x27	; 39
    2688:	d5 40       	sbci	r29, 0x05	; 5
    268a:	cf 5c       	subi	r28, 0xCF	; 207
    268c:	da 4f       	sbci	r29, 0xFA	; 250
    268e:	88 81       	ld	r24, Y
    2690:	99 81       	ldd	r25, Y+1	; 0x01
    2692:	c1 53       	subi	r28, 0x31	; 49
    2694:	d5 40       	sbci	r29, 0x05	; 5
    2696:	28 17       	cp	r18, r24
    2698:	39 07       	cpc	r19, r25
    269a:	31 f0       	breq	.+12     	; 0x26a8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x378>
    269c:	61 e2       	ldi	r22, 0x21	; 33
    269e:	74 e0       	ldi	r23, 0x04	; 4
    26a0:	8b e5       	ldi	r24, 0x5B	; 91
    26a2:	94 e0       	ldi	r25, 0x04	; 4
    26a4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.temperature != sd.temperature) RM_LOGLN(F("*** ENC TEST FAIL @5 ***"));
    26a8:	c7 5d       	subi	r28, 0xD7	; 215
    26aa:	da 4f       	sbci	r29, 0xFA	; 250
    26ac:	28 81       	ld	r18, Y
    26ae:	39 81       	ldd	r19, Y+1	; 0x01
    26b0:	c9 52       	subi	r28, 0x29	; 41
    26b2:	d5 40       	sbci	r29, 0x05	; 5
    26b4:	cd 5c       	subi	r28, 0xCD	; 205
    26b6:	da 4f       	sbci	r29, 0xFA	; 250
    26b8:	88 81       	ld	r24, Y
    26ba:	99 81       	ldd	r25, Y+1	; 0x01
    26bc:	c3 53       	subi	r28, 0x33	; 51
    26be:	d5 40       	sbci	r29, 0x05	; 5
    26c0:	28 17       	cp	r18, r24
    26c2:	39 07       	cpc	r19, r25
    26c4:	31 f0       	breq	.+12     	; 0x26d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3a2>
    26c6:	68 e0       	ldi	r22, 0x08	; 8
    26c8:	74 e0       	ldi	r23, 0x04	; 4
    26ca:	8b e5       	ldi	r24, 0x5B	; 91
    26cc:	94 e0       	ldi	r25, 0x04	; 4
    26ce:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	RM_LOGLN(F("--------------------------"));
    26d2:	6d ee       	ldi	r22, 0xED	; 237
    26d4:	73 e0       	ldi	r23, 0x03	; 3
    26d6:	8b e5       	ldi	r24, 0x5B	; 91
    26d8:	94 e0       	ldi	r25, 0x04	; 4
    26da:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
    26de:	fe 01       	movw	r30, r28
    26e0:	e7 51       	subi	r30, 0x17	; 23
    26e2:	fc 4f       	sbci	r31, 0xFC	; 252
    26e4:	7f 01       	movw	r14, r30
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	80 83       	st	Z, r24
    26ea:	12 82       	std	Z+2, r1	; 0x02
    26ec:	11 82       	std	Z+1, r1	; 0x01
    26ee:	14 82       	std	Z+4, r1	; 0x04
    26f0:	13 82       	std	Z+3, r1	; 0x03
    26f2:	16 82       	std	Z+6, r1	; 0x06
    26f4:	15 82       	std	Z+5, r1	; 0x05
    26f6:	10 86       	std	Z+8, r1	; 0x08
    26f8:	17 82       	std	Z+7, r1	; 0x07
    26fa:	11 86       	std	Z+9, r1	; 0x09
    26fc:	3a 96       	adiw	r30, 0x0a	; 10
	
	//2) Test a large sequence of them to ensure correctness- MAX_READINGS constant?
	
	uint8_t COUNT = 20;
	SensorData bulkSd[COUNT];
    26fe:	e0 17       	cp	r30, r16
    2700:	f1 07       	cpc	r31, r17
    2702:	91 f7       	brne	.-28     	; 0x26e8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3b8>
	FONA_GET_RSSI rssi;
	rssi.rssi = 15;
	rssi.ber = 3;
	rssi.netReg = (FONA_GET_NETREG)(FONA_GET_NETREG::NETSTAT_4 | FONA_GET_NETREG::RESULT_CODE_1);
	
	GsmPayload gsm;
    2704:	ce 01       	movw	r24, r28
    2706:	8b 5e       	subi	r24, 0xEB	; 235
    2708:	9a 4f       	sbci	r25, 0xFA	; 250
    270a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN10GsmPayloadC1Ev>
	gsm.moduleId=33;
    270e:	81 e2       	ldi	r24, 0x21	; 33
    2710:	cb 5e       	subi	r28, 0xEB	; 235
    2712:	da 4f       	sbci	r29, 0xFA	; 250
    2714:	88 83       	st	Y, r24
    2716:	c5 51       	subi	r28, 0x15	; 21
    2718:	d5 40       	sbci	r29, 0x05	; 5
	gsm.thisBootNumber = 1055;
    271a:	8f e1       	ldi	r24, 0x1F	; 31
    271c:	94 e0       	ldi	r25, 0x04	; 4
    271e:	ca 5e       	subi	r28, 0xEA	; 234
    2720:	da 4f       	sbci	r29, 0xFA	; 250
    2722:	99 83       	std	Y+1, r25	; 0x01
    2724:	88 83       	st	Y, r24
    2726:	c6 51       	subi	r28, 0x16	; 22
    2728:	d5 40       	sbci	r29, 0x05	; 5
	gsm.rssi = rssi;
    272a:	8f e0       	ldi	r24, 0x0F	; 15
    272c:	c8 5e       	subi	r28, 0xE8	; 232
    272e:	da 4f       	sbci	r29, 0xFA	; 250
    2730:	88 83       	st	Y, r24
    2732:	c8 51       	subi	r28, 0x18	; 24
    2734:	d5 40       	sbci	r29, 0x05	; 5
    2736:	83 e0       	ldi	r24, 0x03	; 3
    2738:	c7 5e       	subi	r28, 0xE7	; 231
    273a:	da 4f       	sbci	r29, 0xFA	; 250
    273c:	88 83       	st	Y, r24
    273e:	c9 51       	subi	r28, 0x19	; 25
    2740:	d5 40       	sbci	r29, 0x05	; 5
    2742:	c6 5e       	subi	r28, 0xE6	; 230
    2744:	da 4f       	sbci	r29, 0xFA	; 250
    2746:	18 82       	st	Y, r1
    2748:	ca 51       	subi	r28, 0x1A	; 26
    274a:	d5 40       	sbci	r29, 0x05	; 5
    274c:	81 e1       	ldi	r24, 0x11	; 17
    274e:	c5 5e       	subi	r28, 0xE5	; 229
    2750:	da 4f       	sbci	r29, 0xFA	; 250
    2752:	88 83       	st	Y, r24
    2754:	cb 51       	subi	r28, 0x1B	; 27
    2756:	d5 40       	sbci	r29, 0x05	; 5
	gsm.addSensorData(&bulkSd[0], COUNT);
    2758:	44 e1       	ldi	r20, 0x14	; 20
    275a:	b7 01       	movw	r22, r14
    275c:	ce 01       	movw	r24, r28
    275e:	8b 5e       	subi	r24, 0xEB	; 235
    2760:	9a 4f       	sbci	r25, 0xFA	; 250
    2762:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN10GsmPayload13addSensorDataEP10SensorDatah>
	
	char forWeb[1000];
	gsm.getPayload(&forWeb[0], 1000);
    2766:	48 ee       	ldi	r20, 0xE8	; 232
    2768:	53 e0       	ldi	r21, 0x03	; 3
    276a:	be 01       	movw	r22, r28
    276c:	6f 5f       	subi	r22, 0xFF	; 255
    276e:	7f 4f       	sbci	r23, 0xFF	; 255
    2770:	ce 01       	movw	r24, r28
    2772:	8b 5e       	subi	r24, 0xEB	; 235
    2774:	9a 4f       	sbci	r25, 0xFA	; 250
    2776:	0e 94 03 09 	call	0x1206	; 0x1206 <_ZN10GsmPayload10getPayloadEPcj>
	
	RM_LOG(F("GSM Payload To Be Sent Over Web:"));
    277a:	6c ec       	ldi	r22, 0xCC	; 204
    277c:	73 e0       	ldi	r23, 0x03	; 3
    277e:	8b e5       	ldi	r24, 0x5B	; 91
    2780:	94 e0       	ldi	r25, 0x04	; 4
    2782:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(forWeb);
    2786:	be 01       	movw	r22, r28
    2788:	6f 5f       	subi	r22, 0xFF	; 255
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	8b e5       	ldi	r24, 0x5B	; 91
    278e:	94 e0       	ldi	r25, 0x04	; 4
    2790:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN5Print7printlnEPKc>
	
	RM_LOGLN(F("------------------------"));
    2794:	63 eb       	ldi	r22, 0xB3	; 179
    2796:	73 e0       	ldi	r23, 0x03	; 3
    2798:	8b e5       	ldi	r24, 0x5B	; 91
    279a:	94 e0       	ldi	r25, 0x04	; 4
    279c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    27a0:	c7 5c       	subi	r28, 0xC7	; 199
    27a2:	da 4f       	sbci	r29, 0xFA	; 250
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	ff 90       	pop	r15
    27b8:	ef 90       	pop	r14
    27ba:	df 90       	pop	r13
    27bc:	08 95       	ret

000027be <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    27be:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    27c0:	91 8d       	ldd	r25, Z+25	; 0x19
    27c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    27c4:	89 2f       	mov	r24, r25
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	80 5c       	subi	r24, 0xC0	; 192
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	82 1b       	sub	r24, r18
    27ce:	91 09       	sbc	r25, r1
}
    27d0:	8f 73       	andi	r24, 0x3F	; 63
    27d2:	99 27       	eor	r25, r25
    27d4:	08 95       	ret

000027d6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    27d6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    27d8:	91 8d       	ldd	r25, Z+25	; 0x19
    27da:	82 8d       	ldd	r24, Z+26	; 0x1a
    27dc:	98 17       	cp	r25, r24
    27de:	31 f0       	breq	.+12     	; 0x27ec <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    27e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    27e2:	e8 0f       	add	r30, r24
    27e4:	f1 1d       	adc	r31, r1
    27e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    27f0:	08 95       	ret

000027f2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    27f2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    27f4:	91 8d       	ldd	r25, Z+25	; 0x19
    27f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    27f8:	98 17       	cp	r25, r24
    27fa:	61 f0       	breq	.+24     	; 0x2814 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    27fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    27fe:	df 01       	movw	r26, r30
    2800:	a8 0f       	add	r26, r24
    2802:	b1 1d       	adc	r27, r1
    2804:	5d 96       	adiw	r26, 0x1d	; 29
    2806:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2808:	92 8d       	ldd	r25, Z+26	; 0x1a
    280a:	9f 5f       	subi	r25, 0xFF	; 255
    280c:	9f 73       	andi	r25, 0x3F	; 63
    280e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2818:	08 95       	ret

0000281a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    281a:	82 e6       	ldi	r24, 0x62	; 98
    281c:	95 e1       	ldi	r25, 0x15	; 21
    281e:	89 2b       	or	r24, r25
    2820:	49 f0       	breq	.+18     	; 0x2834 <_Z14serialEventRunv+0x1a>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	89 2b       	or	r24, r25
    2828:	29 f0       	breq	.+10     	; 0x2834 <_Z14serialEventRunv+0x1a>
    282a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_Z17Serial0_availablev>
    282e:	81 11       	cpse	r24, r1
    2830:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2834:	08 95       	ret

00002836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2836:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2838:	84 8d       	ldd	r24, Z+28	; 0x1c
    283a:	df 01       	movw	r26, r30
    283c:	a8 0f       	add	r26, r24
    283e:	b1 1d       	adc	r27, r1
    2840:	a3 5a       	subi	r26, 0xA3	; 163
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2846:	84 8d       	ldd	r24, Z+28	; 0x1c
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	8f 73       	andi	r24, 0x3F	; 63
    284e:	99 27       	eor	r25, r25
    2850:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2852:	a6 89       	ldd	r26, Z+22	; 0x16
    2854:	b7 89       	ldd	r27, Z+23	; 0x17
    2856:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2858:	a0 89       	ldd	r26, Z+16	; 0x10
    285a:	b1 89       	ldd	r27, Z+17	; 0x11
    285c:	8c 91       	ld	r24, X
    285e:	80 64       	ori	r24, 0x40	; 64
    2860:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2862:	93 8d       	ldd	r25, Z+27	; 0x1b
    2864:	84 8d       	ldd	r24, Z+28	; 0x1c
    2866:	98 13       	cpse	r25, r24
    2868:	06 c0       	rjmp	.+12     	; 0x2876 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    286a:	02 88       	ldd	r0, Z+18	; 0x12
    286c:	f3 89       	ldd	r31, Z+19	; 0x13
    286e:	e0 2d       	mov	r30, r0
    2870:	80 81       	ld	r24, Z
    2872:	8f 7d       	andi	r24, 0xDF	; 223
    2874:	80 83       	st	Z, r24
    2876:	08 95       	ret

00002878 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	ec 01       	movw	r28, r24
  _written = true;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    288a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    288c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    288e:	98 13       	cpse	r25, r24
    2890:	05 c0       	rjmp	.+10     	; 0x289c <_ZN14HardwareSerial5writeEh+0x24>
    2892:	e8 89       	ldd	r30, Y+16	; 0x10
    2894:	f9 89       	ldd	r31, Y+17	; 0x11
    2896:	80 81       	ld	r24, Z
    2898:	85 fd       	sbrc	r24, 5
    289a:	24 c0       	rjmp	.+72     	; 0x28e4 <_ZN14HardwareSerial5writeEh+0x6c>
    289c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    289e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	0f 5f       	subi	r16, 0xFF	; 255
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	0f 73       	andi	r16, 0x3F	; 63
    28a8:	11 27       	eor	r17, r17
    28aa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    28ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28ae:	e8 12       	cpse	r14, r24
    28b0:	0c c0       	rjmp	.+24     	; 0x28ca <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	07 fc       	sbrc	r0, 7
    28b6:	fa cf       	rjmp	.-12     	; 0x28ac <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    28b8:	e8 89       	ldd	r30, Y+16	; 0x10
    28ba:	f9 89       	ldd	r31, Y+17	; 0x11
    28bc:	80 81       	ld	r24, Z
    28be:	85 ff       	sbrs	r24, 5
    28c0:	f5 cf       	rjmp	.-22     	; 0x28ac <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    28c2:	ce 01       	movw	r24, r28
    28c4:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    28c8:	f1 cf       	rjmp	.-30     	; 0x28ac <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    28ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28cc:	fe 01       	movw	r30, r28
    28ce:	e8 0f       	add	r30, r24
    28d0:	f1 1d       	adc	r31, r1
    28d2:	e3 5a       	subi	r30, 0xA3	; 163
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    28d8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    28da:	ea 89       	ldd	r30, Y+18	; 0x12
    28dc:	fb 89       	ldd	r31, Y+19	; 0x13
    28de:	80 81       	ld	r24, Z
    28e0:	80 62       	ori	r24, 0x20	; 32
    28e2:	07 c0       	rjmp	.+14     	; 0x28f2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    28e4:	ee 89       	ldd	r30, Y+22	; 0x16
    28e6:	ff 89       	ldd	r31, Y+23	; 0x17
    28e8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    28ea:	e8 89       	ldd	r30, Y+16	; 0x10
    28ec:	f9 89       	ldd	r31, Y+17	; 0x11
    28ee:	80 81       	ld	r24, Z
    28f0:	80 64       	ori	r24, 0x40	; 64
    28f2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	08 95       	ret

00002906 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    290c:	88 8d       	ldd	r24, Y+24	; 0x18
    290e:	88 23       	and	r24, r24
    2910:	c9 f0       	breq	.+50     	; 0x2944 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2912:	ea 89       	ldd	r30, Y+18	; 0x12
    2914:	fb 89       	ldd	r31, Y+19	; 0x13
    2916:	80 81       	ld	r24, Z
    2918:	85 fd       	sbrc	r24, 5
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <_ZN14HardwareSerial5flushEv+0x20>
    291c:	a8 89       	ldd	r26, Y+16	; 0x10
    291e:	b9 89       	ldd	r27, Y+17	; 0x11
    2920:	8c 91       	ld	r24, X
    2922:	86 fd       	sbrc	r24, 6
    2924:	0f c0       	rjmp	.+30     	; 0x2944 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	07 fc       	sbrc	r0, 7
    292a:	f5 cf       	rjmp	.-22     	; 0x2916 <_ZN14HardwareSerial5flushEv+0x10>
    292c:	80 81       	ld	r24, Z
    292e:	85 ff       	sbrs	r24, 5
    2930:	f2 cf       	rjmp	.-28     	; 0x2916 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2932:	a8 89       	ldd	r26, Y+16	; 0x10
    2934:	b9 89       	ldd	r27, Y+17	; 0x11
    2936:	8c 91       	ld	r24, X
    2938:	85 ff       	sbrs	r24, 5
    293a:	ed cf       	rjmp	.-38     	; 0x2916 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    293c:	ce 01       	movw	r24, r28
    293e:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2942:	e7 cf       	rjmp	.-50     	; 0x2912 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	08 95       	ret

0000294a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    294a:	cf 92       	push	r12
    294c:	df 92       	push	r13
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	ec 01       	movw	r28, r24
    295a:	6a 01       	movw	r12, r20
    295c:	7b 01       	movw	r14, r22
    295e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2960:	e8 89       	ldd	r30, Y+16	; 0x10
    2962:	f9 89       	ldd	r31, Y+17	; 0x11
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2968:	41 15       	cp	r20, r1
    296a:	51 4e       	sbci	r21, 0xE1	; 225
    296c:	61 05       	cpc	r22, r1
    296e:	71 05       	cpc	r23, r1
    2970:	b1 f0       	breq	.+44     	; 0x299e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2972:	60 e0       	ldi	r22, 0x00	; 0
    2974:	79 e0       	ldi	r23, 0x09	; 9
    2976:	8d e3       	ldi	r24, 0x3D	; 61
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a7 01       	movw	r20, r14
    297c:	96 01       	movw	r18, r12
    297e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__udivmodsi4>
    2982:	da 01       	movw	r26, r20
    2984:	c9 01       	movw	r24, r18
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	a1 09       	sbc	r26, r1
    298a:	b1 09       	sbc	r27, r1
    298c:	b6 95       	lsr	r27
    298e:	a7 95       	ror	r26
    2990:	97 95       	ror	r25
    2992:	87 95       	ror	r24
    2994:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2996:	21 15       	cp	r18, r1
    2998:	80 e1       	ldi	r24, 0x10	; 16
    299a:	38 07       	cpc	r19, r24
    299c:	a8 f0       	brcs	.+42     	; 0x29c8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    299e:	e8 89       	ldd	r30, Y+16	; 0x10
    29a0:	f9 89       	ldd	r31, Y+17	; 0x11
    29a2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    29a4:	60 e8       	ldi	r22, 0x80	; 128
    29a6:	74 e8       	ldi	r23, 0x84	; 132
    29a8:	8e e1       	ldi	r24, 0x1E	; 30
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a7 01       	movw	r20, r14
    29ae:	96 01       	movw	r18, r12
    29b0:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__udivmodsi4>
    29b4:	da 01       	movw	r26, r20
    29b6:	c9 01       	movw	r24, r18
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	a1 09       	sbc	r26, r1
    29bc:	b1 09       	sbc	r27, r1
    29be:	b6 95       	lsr	r27
    29c0:	a7 95       	ror	r26
    29c2:	97 95       	ror	r25
    29c4:	87 95       	ror	r24
    29c6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    29c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    29ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    29cc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    29ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    29d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    29d2:	20 83       	st	Z, r18

  _written = false;
    29d4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    29d6:	ec 89       	ldd	r30, Y+20	; 0x14
    29d8:	fd 89       	ldd	r31, Y+21	; 0x15
    29da:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    29dc:	ea 89       	ldd	r30, Y+18	; 0x12
    29de:	fb 89       	ldd	r31, Y+19	; 0x13
    29e0:	80 81       	ld	r24, Z
    29e2:	80 61       	ori	r24, 0x10	; 16
    29e4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    29e6:	ea 89       	ldd	r30, Y+18	; 0x12
    29e8:	fb 89       	ldd	r31, Y+19	; 0x13
    29ea:	80 81       	ld	r24, Z
    29ec:	88 60       	ori	r24, 0x08	; 8
    29ee:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    29f0:	ea 89       	ldd	r30, Y+18	; 0x12
    29f2:	fb 89       	ldd	r31, Y+19	; 0x13
    29f4:	80 81       	ld	r24, Z
    29f6:	80 68       	ori	r24, 0x80	; 128
    29f8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    29fa:	ea 89       	ldd	r30, Y+18	; 0x12
    29fc:	fb 89       	ldd	r31, Y+19	; 0x13
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 7d       	andi	r24, 0xDF	; 223
    2a02:	80 83       	st	Z, r24
}
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	df 90       	pop	r13
    2a10:	cf 90       	pop	r12
    2a12:	08 95       	ret

00002a14 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2a14:	1f 92       	push	r1
    2a16:	0f 92       	push	r0
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	0f 92       	push	r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	2f 93       	push	r18
    2a20:	8f 93       	push	r24
    2a22:	9f 93       	push	r25
    2a24:	ef 93       	push	r30
    2a26:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2a28:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <Serial+0x10>
    2a2c:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <Serial+0x11>
    2a30:	80 81       	ld	r24, Z
    2a32:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <Serial+0x16>
    2a36:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <Serial+0x17>
    2a3a:	82 fd       	sbrc	r24, 2
    2a3c:	12 c0       	rjmp	.+36     	; 0x2a62 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2a3e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2a40:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <Serial+0x19>
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2a48:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <Serial+0x1a>
    2a4c:	82 17       	cp	r24, r18
    2a4e:	51 f0       	breq	.+20     	; 0x2a64 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2a50:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <Serial+0x19>
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	e5 5a       	subi	r30, 0xA5	; 165
    2a58:	fb 4f       	sbci	r31, 0xFB	; 251
    2a5a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2a5c:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <Serial+0x19>
    2a60:	01 c0       	rjmp	.+2      	; 0x2a64 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2a62:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2a64:	ff 91       	pop	r31
    2a66:	ef 91       	pop	r30
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	2f 91       	pop	r18
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2a78:	1f 92       	push	r1
    2a7a:	0f 92       	push	r0
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	0f 92       	push	r0
    2a80:	11 24       	eor	r1, r1
    2a82:	2f 93       	push	r18
    2a84:	3f 93       	push	r19
    2a86:	4f 93       	push	r20
    2a88:	5f 93       	push	r21
    2a8a:	6f 93       	push	r22
    2a8c:	7f 93       	push	r23
    2a8e:	8f 93       	push	r24
    2a90:	9f 93       	push	r25
    2a92:	af 93       	push	r26
    2a94:	bf 93       	push	r27
    2a96:	ef 93       	push	r30
    2a98:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2a9a:	8b e5       	ldi	r24, 0x5B	; 91
    2a9c:	94 e0       	ldi	r25, 0x04	; 4
    2a9e:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	bf 91       	pop	r27
    2aa8:	af 91       	pop	r26
    2aaa:	9f 91       	pop	r25
    2aac:	8f 91       	pop	r24
    2aae:	7f 91       	pop	r23
    2ab0:	6f 91       	pop	r22
    2ab2:	5f 91       	pop	r21
    2ab4:	4f 91       	pop	r20
    2ab6:	3f 91       	pop	r19
    2ab8:	2f 91       	pop	r18
    2aba:	0f 90       	pop	r0
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	0f 90       	pop	r0
    2ac0:	1f 90       	pop	r1
    2ac2:	18 95       	reti

00002ac4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2ac4:	8b e5       	ldi	r24, 0x5B	; 91
    2ac6:	94 e0       	ldi	r25, 0x04	; 4
    2ac8:	0e 94 df 13 	call	0x27be	; 0x27be <_ZN14HardwareSerial9availableEv>
    2acc:	21 e0       	ldi	r18, 0x01	; 1
    2ace:	89 2b       	or	r24, r25
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <_Z17Serial0_availablev+0x10>
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
}
    2ad4:	82 2f       	mov	r24, r18
    2ad6:	08 95       	ret

00002ad8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2ad8:	eb e5       	ldi	r30, 0x5B	; 91
    2ada:	f4 e0       	ldi	r31, 0x04	; 4
    2adc:	13 82       	std	Z+3, r1	; 0x03
    2ade:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2ae0:	88 ee       	ldi	r24, 0xE8	; 232
    2ae2:	93 e0       	ldi	r25, 0x03	; 3
    2ae4:	a0 e0       	ldi	r26, 0x00	; 0
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	84 83       	std	Z+4, r24	; 0x04
    2aea:	95 83       	std	Z+5, r25	; 0x05
    2aec:	a6 83       	std	Z+6, r26	; 0x06
    2aee:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2af0:	8d e3       	ldi	r24, 0x3D	; 61
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
    2af8:	85 ec       	ldi	r24, 0xC5	; 197
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	95 87       	std	Z+13, r25	; 0x0d
    2afe:	84 87       	std	Z+12, r24	; 0x0c
    2b00:	84 ec       	ldi	r24, 0xC4	; 196
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	97 87       	std	Z+15, r25	; 0x0f
    2b06:	86 87       	std	Z+14, r24	; 0x0e
    2b08:	80 ec       	ldi	r24, 0xC0	; 192
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	91 8b       	std	Z+17, r25	; 0x11
    2b0e:	80 8b       	std	Z+16, r24	; 0x10
    2b10:	81 ec       	ldi	r24, 0xC1	; 193
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	93 8b       	std	Z+19, r25	; 0x13
    2b16:	82 8b       	std	Z+18, r24	; 0x12
    2b18:	82 ec       	ldi	r24, 0xC2	; 194
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	95 8b       	std	Z+21, r25	; 0x15
    2b1e:	84 8b       	std	Z+20, r24	; 0x14
    2b20:	86 ec       	ldi	r24, 0xC6	; 198
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	97 8b       	std	Z+23, r25	; 0x17
    2b26:	86 8b       	std	Z+22, r24	; 0x16
    2b28:	11 8e       	std	Z+25, r1	; 0x19
    2b2a:	12 8e       	std	Z+26, r1	; 0x1a
    2b2c:	13 8e       	std	Z+27, r1	; 0x1b
    2b2e:	14 8e       	std	Z+28, r1	; 0x1c
    2b30:	08 95       	ret

00002b32 <initVariant>:
    2b32:	08 95       	ret

00002b34 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2b34:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <init>

	initVariant();
    2b38:	0e 94 99 15 	call	0x2b32	; 0x2b32 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2b3c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2b40:	cd e0       	ldi	r28, 0x0D	; 13
    2b42:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2b44:	0e 94 c2 0c 	call	0x1984	; 0x1984 <loop>
		if (serialEventRun) serialEventRun();
    2b48:	20 97       	sbiw	r28, 0x00	; 0
    2b4a:	e1 f3       	breq	.-8      	; 0x2b44 <main+0x10>
    2b4c:	0e 94 0d 14 	call	0x281a	; 0x281a <_Z14serialEventRunv>
    2b50:	f9 cf       	rjmp	.-14     	; 0x2b44 <main+0x10>

00002b52 <_Znwj>:
    2b52:	0c 94 97 1c 	jmp	0x392e	; 0x392e <malloc>

00002b56 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2b56:	cf 92       	push	r12
    2b58:	df 92       	push	r13
    2b5a:	ef 92       	push	r14
    2b5c:	ff 92       	push	r15
    2b5e:	0f 93       	push	r16
    2b60:	1f 93       	push	r17
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	6c 01       	movw	r12, r24
    2b68:	7a 01       	movw	r14, r20
    2b6a:	8b 01       	movw	r16, r22
    2b6c:	c0 e0       	ldi	r28, 0x00	; 0
    2b6e:	d0 e0       	ldi	r29, 0x00	; 0
    2b70:	ce 15       	cp	r28, r14
    2b72:	df 05       	cpc	r29, r15
    2b74:	81 f0       	breq	.+32     	; 0x2b96 <_ZN5Print5writeEPKhj+0x40>
    2b76:	d8 01       	movw	r26, r16
    2b78:	6d 91       	ld	r22, X+
    2b7a:	8d 01       	movw	r16, r26
    2b7c:	d6 01       	movw	r26, r12
    2b7e:	ed 91       	ld	r30, X+
    2b80:	fc 91       	ld	r31, X
    2b82:	01 90       	ld	r0, Z+
    2b84:	f0 81       	ld	r31, Z
    2b86:	e0 2d       	mov	r30, r0
    2b88:	c6 01       	movw	r24, r12
    2b8a:	09 95       	icall
    2b8c:	89 2b       	or	r24, r25
    2b8e:	11 f0       	breq	.+4      	; 0x2b94 <_ZN5Print5writeEPKhj+0x3e>
    2b90:	21 96       	adiw	r28, 0x01	; 1
    2b92:	ee cf       	rjmp	.-36     	; 0x2b70 <_ZN5Print5writeEPKhj+0x1a>
    2b94:	7e 01       	movw	r14, r28
    2b96:	c7 01       	movw	r24, r14
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	08 95       	ret

00002baa <_ZN5Print5writeEPKc>:
    2baa:	61 15       	cp	r22, r1
    2bac:	71 05       	cpc	r23, r1
    2bae:	79 f0       	breq	.+30     	; 0x2bce <_ZN5Print5writeEPKc+0x24>
    2bb0:	fb 01       	movw	r30, r22
    2bb2:	01 90       	ld	r0, Z+
    2bb4:	00 20       	and	r0, r0
    2bb6:	e9 f7       	brne	.-6      	; 0x2bb2 <_ZN5Print5writeEPKc+0x8>
    2bb8:	31 97       	sbiw	r30, 0x01	; 1
    2bba:	af 01       	movw	r20, r30
    2bbc:	46 1b       	sub	r20, r22
    2bbe:	57 0b       	sbc	r21, r23
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	ed 91       	ld	r30, X+
    2bc4:	fc 91       	ld	r31, X
    2bc6:	02 80       	ldd	r0, Z+2	; 0x02
    2bc8:	f3 81       	ldd	r31, Z+3	; 0x03
    2bca:	e0 2d       	mov	r30, r0
    2bcc:	09 94       	ijmp
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	08 95       	ret

00002bd4 <_ZN5Print5printEPK19__FlashStringHelper>:
    2bd4:	ef 92       	push	r14
    2bd6:	ff 92       	push	r15
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	8c 01       	movw	r16, r24
    2be2:	7b 01       	movw	r14, r22
    2be4:	c0 e0       	ldi	r28, 0x00	; 0
    2be6:	d0 e0       	ldi	r29, 0x00	; 0
    2be8:	f7 01       	movw	r30, r14
    2bea:	ec 0f       	add	r30, r28
    2bec:	fd 1f       	adc	r31, r29
    2bee:	64 91       	lpm	r22, Z
    2bf0:	66 23       	and	r22, r22
    2bf2:	61 f0       	breq	.+24     	; 0x2c0c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2bf4:	d8 01       	movw	r26, r16
    2bf6:	ed 91       	ld	r30, X+
    2bf8:	fc 91       	ld	r31, X
    2bfa:	01 90       	ld	r0, Z+
    2bfc:	f0 81       	ld	r31, Z
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	c8 01       	movw	r24, r16
    2c02:	09 95       	icall
    2c04:	89 2b       	or	r24, r25
    2c06:	11 f0       	breq	.+4      	; 0x2c0c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c08:	21 96       	adiw	r28, 0x01	; 1
    2c0a:	ee cf       	rjmp	.-36     	; 0x2be8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	08 95       	ret

00002c1c <_ZN5Print5printEPKc>:
    2c1c:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <_ZN5Print5writeEPKc>

00002c20 <_ZN5Print5printEc>:
    2c20:	dc 01       	movw	r26, r24
    2c22:	ed 91       	ld	r30, X+
    2c24:	fc 91       	ld	r31, X
    2c26:	01 90       	ld	r0, Z+
    2c28:	f0 81       	ld	r31, Z
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	09 94       	ijmp

00002c2e <_ZN5Print7printlnEv>:
    2c2e:	69 e4       	ldi	r22, 0x49	; 73
    2c30:	72 e0       	ldi	r23, 0x02	; 2
    2c32:	0c 94 d5 15 	jmp	0x2baa	; 0x2baa <_ZN5Print5writeEPKc>

00002c36 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	ec 01       	movw	r28, r24
    2c40:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <_ZN5Print5printEPK19__FlashStringHelper>
    2c44:	8c 01       	movw	r16, r24
    2c46:	ce 01       	movw	r24, r28
    2c48:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEv>
    2c4c:	80 0f       	add	r24, r16
    2c4e:	91 1f       	adc	r25, r17
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	08 95       	ret

00002c5a <_ZN5Print7printlnEPKc>:
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	ec 01       	movw	r28, r24
    2c64:	0e 94 d5 15 	call	0x2baa	; 0x2baa <_ZN5Print5writeEPKc>
    2c68:	8c 01       	movw	r16, r24
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEv>
    2c70:	80 0f       	add	r24, r16
    2c72:	91 1f       	adc	r25, r17
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <_ZN5Print7printlnEc>:
    2c7e:	0f 93       	push	r16
    2c80:	1f 93       	push	r17
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	ec 01       	movw	r28, r24
    2c88:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN5Print5printEc>
    2c8c:	8c 01       	movw	r16, r24
    2c8e:	ce 01       	movw	r24, r28
    2c90:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEv>
    2c94:	80 0f       	add	r24, r16
    2c96:	91 1f       	adc	r25, r17
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	1f 91       	pop	r17
    2c9e:	0f 91       	pop	r16
    2ca0:	08 95       	ret

00002ca2 <_ZN5Print11printNumberEmh>:
    2ca2:	8f 92       	push	r8
    2ca4:	9f 92       	push	r9
    2ca6:	af 92       	push	r10
    2ca8:	bf 92       	push	r11
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	a1 97       	sbiw	r28, 0x21	; 33
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	7c 01       	movw	r14, r24
    2cc8:	fa 01       	movw	r30, r20
    2cca:	cb 01       	movw	r24, r22
    2ccc:	19 a2       	std	Y+33, r1	; 0x21
    2cce:	22 30       	cpi	r18, 0x02	; 2
    2cd0:	08 f4       	brcc	.+2      	; 0x2cd4 <_ZN5Print11printNumberEmh+0x32>
    2cd2:	2a e0       	ldi	r18, 0x0A	; 10
    2cd4:	8e 01       	movw	r16, r28
    2cd6:	0f 5d       	subi	r16, 0xDF	; 223
    2cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cda:	82 2e       	mov	r8, r18
    2cdc:	91 2c       	mov	r9, r1
    2cde:	a1 2c       	mov	r10, r1
    2ce0:	b1 2c       	mov	r11, r1
    2ce2:	bf 01       	movw	r22, r30
    2ce4:	a5 01       	movw	r20, r10
    2ce6:	94 01       	movw	r18, r8
    2ce8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__udivmodsi4>
    2cec:	f9 01       	movw	r30, r18
    2cee:	ca 01       	movw	r24, r20
    2cf0:	01 50       	subi	r16, 0x01	; 1
    2cf2:	11 09       	sbc	r17, r1
    2cf4:	6a 30       	cpi	r22, 0x0A	; 10
    2cf6:	10 f4       	brcc	.+4      	; 0x2cfc <_ZN5Print11printNumberEmh+0x5a>
    2cf8:	60 5d       	subi	r22, 0xD0	; 208
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <_ZN5Print11printNumberEmh+0x5c>
    2cfc:	69 5c       	subi	r22, 0xC9	; 201
    2cfe:	d8 01       	movw	r26, r16
    2d00:	6c 93       	st	X, r22
    2d02:	23 2b       	or	r18, r19
    2d04:	24 2b       	or	r18, r20
    2d06:	25 2b       	or	r18, r21
    2d08:	61 f7       	brne	.-40     	; 0x2ce2 <_ZN5Print11printNumberEmh+0x40>
    2d0a:	b8 01       	movw	r22, r16
    2d0c:	c7 01       	movw	r24, r14
    2d0e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <_ZN5Print5writeEPKc>
    2d12:	a1 96       	adiw	r28, 0x21	; 33
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	ef 90       	pop	r14
    2d2a:	bf 90       	pop	r11
    2d2c:	af 90       	pop	r10
    2d2e:	9f 90       	pop	r9
    2d30:	8f 90       	pop	r8
    2d32:	08 95       	ret

00002d34 <_ZN5Print5printEmi>:
    2d34:	21 15       	cp	r18, r1
    2d36:	31 05       	cpc	r19, r1
    2d38:	41 f4       	brne	.+16     	; 0x2d4a <_ZN5Print5printEmi+0x16>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	ed 91       	ld	r30, X+
    2d3e:	fc 91       	ld	r31, X
    2d40:	01 90       	ld	r0, Z+
    2d42:	f0 81       	ld	r31, Z
    2d44:	e0 2d       	mov	r30, r0
    2d46:	64 2f       	mov	r22, r20
    2d48:	09 94       	ijmp
    2d4a:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <_ZN5Print11printNumberEmh>

00002d4e <_ZN5Print5printEhi>:
    2d4e:	9a 01       	movw	r18, r20
    2d50:	46 2f       	mov	r20, r22
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <_ZN5Print5printEmi>

00002d5c <_ZN5Print7printlnEhi>:
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	ec 01       	movw	r28, r24
    2d66:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_ZN5Print5printEhi>
    2d6a:	8c 01       	movw	r16, r24
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEv>
    2d72:	80 0f       	add	r24, r16
    2d74:	91 1f       	adc	r25, r17
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	08 95       	ret

00002d80 <_ZN5Print5printEji>:
    2d80:	9a 01       	movw	r18, r20
    2d82:	ab 01       	movw	r20, r22
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <_ZN5Print5printEmi>

00002d8c <_ZN5Print7printlnEji>:
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	ec 01       	movw	r28, r24
    2d96:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN5Print5printEji>
    2d9a:	8c 01       	movw	r16, r24
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEv>
    2da2:	80 0f       	add	r24, r16
    2da4:	91 1f       	adc	r25, r17
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	1f 91       	pop	r17
    2dac:	0f 91       	pop	r16
    2dae:	08 95       	ret

00002db0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
  if (base == 0) {
    2dc0:	21 15       	cp	r18, r1
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	81 f4       	brne	.+32     	; 0x2de6 <_ZN5Print5printEli+0x36>
    return write(n);
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	ed 91       	ld	r30, X+
    2dca:	fc 91       	ld	r31, X
    2dcc:	01 90       	ld	r0, Z+
    2dce:	f0 81       	ld	r31, Z
    2dd0:	e0 2d       	mov	r30, r0
    2dd2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    2de4:	09 94       	ijmp
  } else if (base == 10) {
    2de6:	2a 30       	cpi	r18, 0x0A	; 10
    2de8:	31 05       	cpc	r19, r1
    2dea:	01 f5       	brne	.+64     	; 0x2e2c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    2dec:	77 ff       	sbrs	r23, 7
    2dee:	1d c0       	rjmp	.+58     	; 0x2e2a <_ZN5Print5printEli+0x7a>
    2df0:	6a 01       	movw	r12, r20
    2df2:	7b 01       	movw	r14, r22
    2df4:	ec 01       	movw	r28, r24
      int t = print('-');
    2df6:	6d e2       	ldi	r22, 0x2D	; 45
    2df8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_ZN5Print5printEc>
    2dfc:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2dfe:	44 27       	eor	r20, r20
    2e00:	55 27       	eor	r21, r21
    2e02:	ba 01       	movw	r22, r20
    2e04:	4c 19       	sub	r20, r12
    2e06:	5d 09       	sbc	r21, r13
    2e08:	6e 09       	sbc	r22, r14
    2e0a:	7f 09       	sbc	r23, r15
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	ce 01       	movw	r24, r28
    2e10:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN5Print11printNumberEmh>
    2e14:	80 0f       	add	r24, r16
    2e16:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	cf 90       	pop	r12
    2e28:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    2e2a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    2e3c:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <_ZN5Print11printNumberEmh>

00002e40 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2e40:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2e42:	ab 01       	movw	r20, r22
    2e44:	77 0f       	add	r23, r23
    2e46:	66 0b       	sbc	r22, r22
    2e48:	77 0b       	sbc	r23, r23
    2e4a:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <_ZN5Print5printEli>

00002e4e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    2e58:	0e 94 20 17 	call	0x2e40	; 0x2e40 <_ZN5Print5printEii>
    2e5c:	8c 01       	movw	r16, r24
  n += println();
    2e5e:	ce 01       	movw	r24, r28
    2e60:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEv>
  return n;
}
    2e64:	80 0f       	add	r24, r16
    2e66:	91 1f       	adc	r25, r17
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	08 95       	ret

00002e72 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2e72:	1f 92       	push	r1
    2e74:	0f 92       	push	r0
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	0f 92       	push	r0
    2e7a:	11 24       	eor	r1, r1
    2e7c:	2f 93       	push	r18
    2e7e:	3f 93       	push	r19
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25
    2e84:	af 93       	push	r26
    2e86:	bf 93       	push	r27
    2e88:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <timer0_millis>
    2e8c:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <timer0_millis+0x1>
    2e90:	a0 91 fb 04 	lds	r26, 0x04FB	; 0x8004fb <timer0_millis+0x2>
    2e94:	b0 91 fc 04 	lds	r27, 0x04FC	; 0x8004fc <timer0_millis+0x3>
    2e98:	30 91 f8 04 	lds	r19, 0x04F8	; 0x8004f8 <timer0_fract>
    2e9c:	23 e0       	ldi	r18, 0x03	; 3
    2e9e:	23 0f       	add	r18, r19
    2ea0:	2d 37       	cpi	r18, 0x7D	; 125
    2ea2:	20 f4       	brcc	.+8      	; 0x2eac <__vector_16+0x3a>
    2ea4:	01 96       	adiw	r24, 0x01	; 1
    2ea6:	a1 1d       	adc	r26, r1
    2ea8:	b1 1d       	adc	r27, r1
    2eaa:	05 c0       	rjmp	.+10     	; 0x2eb6 <__vector_16+0x44>
    2eac:	26 e8       	ldi	r18, 0x86	; 134
    2eae:	23 0f       	add	r18, r19
    2eb0:	02 96       	adiw	r24, 0x02	; 2
    2eb2:	a1 1d       	adc	r26, r1
    2eb4:	b1 1d       	adc	r27, r1
    2eb6:	20 93 f8 04 	sts	0x04F8, r18	; 0x8004f8 <timer0_fract>
    2eba:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <timer0_millis>
    2ebe:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <timer0_millis+0x1>
    2ec2:	a0 93 fb 04 	sts	0x04FB, r26	; 0x8004fb <timer0_millis+0x2>
    2ec6:	b0 93 fc 04 	sts	0x04FC, r27	; 0x8004fc <timer0_millis+0x3>
    2eca:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <timer0_overflow_count>
    2ece:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <timer0_overflow_count+0x1>
    2ed2:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <timer0_overflow_count+0x2>
    2ed6:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <timer0_overflow_count+0x3>
    2eda:	01 96       	adiw	r24, 0x01	; 1
    2edc:	a1 1d       	adc	r26, r1
    2ede:	b1 1d       	adc	r27, r1
    2ee0:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <timer0_overflow_count>
    2ee4:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <timer0_overflow_count+0x1>
    2ee8:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <timer0_overflow_count+0x2>
    2eec:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <timer0_overflow_count+0x3>
    2ef0:	bf 91       	pop	r27
    2ef2:	af 91       	pop	r26
    2ef4:	9f 91       	pop	r25
    2ef6:	8f 91       	pop	r24
    2ef8:	3f 91       	pop	r19
    2efa:	2f 91       	pop	r18
    2efc:	0f 90       	pop	r0
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <micros>:
    2f06:	3f b7       	in	r19, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <timer0_overflow_count>
    2f0e:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <timer0_overflow_count+0x1>
    2f12:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <timer0_overflow_count+0x2>
    2f16:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <timer0_overflow_count+0x3>
    2f1a:	26 b5       	in	r18, 0x26	; 38
    2f1c:	a8 9b       	sbis	0x15, 0	; 21
    2f1e:	05 c0       	rjmp	.+10     	; 0x2f2a <micros+0x24>
    2f20:	2f 3f       	cpi	r18, 0xFF	; 255
    2f22:	19 f0       	breq	.+6      	; 0x2f2a <micros+0x24>
    2f24:	01 96       	adiw	r24, 0x01	; 1
    2f26:	a1 1d       	adc	r26, r1
    2f28:	b1 1d       	adc	r27, r1
    2f2a:	3f bf       	out	0x3f, r19	; 63
    2f2c:	ba 2f       	mov	r27, r26
    2f2e:	a9 2f       	mov	r26, r25
    2f30:	98 2f       	mov	r25, r24
    2f32:	88 27       	eor	r24, r24
    2f34:	82 0f       	add	r24, r18
    2f36:	91 1d       	adc	r25, r1
    2f38:	a1 1d       	adc	r26, r1
    2f3a:	b1 1d       	adc	r27, r1
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	42 e0       	ldi	r20, 0x02	; 2
    2f42:	66 0f       	add	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	4a 95       	dec	r20
    2f4c:	d1 f7       	brne	.-12     	; 0x2f42 <micros+0x3c>
    2f4e:	08 95       	ret

00002f50 <delay>:
    2f50:	8f 92       	push	r8
    2f52:	9f 92       	push	r9
    2f54:	af 92       	push	r10
    2f56:	bf 92       	push	r11
    2f58:	cf 92       	push	r12
    2f5a:	df 92       	push	r13
    2f5c:	ef 92       	push	r14
    2f5e:	ff 92       	push	r15
    2f60:	6b 01       	movw	r12, r22
    2f62:	7c 01       	movw	r14, r24
    2f64:	0e 94 83 17 	call	0x2f06	; 0x2f06 <micros>
    2f68:	4b 01       	movw	r8, r22
    2f6a:	5c 01       	movw	r10, r24
    2f6c:	c1 14       	cp	r12, r1
    2f6e:	d1 04       	cpc	r13, r1
    2f70:	e1 04       	cpc	r14, r1
    2f72:	f1 04       	cpc	r15, r1
    2f74:	01 f1       	breq	.+64     	; 0x2fb6 <delay+0x66>
    2f76:	0e 94 1b 1c 	call	0x3836	; 0x3836 <yield>
    2f7a:	0e 94 83 17 	call	0x2f06	; 0x2f06 <micros>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	88 19       	sub	r24, r8
    2f84:	99 09       	sbc	r25, r9
    2f86:	aa 09       	sbc	r26, r10
    2f88:	bb 09       	sbc	r27, r11
    2f8a:	88 3e       	cpi	r24, 0xE8	; 232
    2f8c:	93 40       	sbci	r25, 0x03	; 3
    2f8e:	a1 05       	cpc	r26, r1
    2f90:	b1 05       	cpc	r27, r1
    2f92:	60 f3       	brcs	.-40     	; 0x2f6c <delay+0x1c>
    2f94:	21 e0       	ldi	r18, 0x01	; 1
    2f96:	c2 1a       	sub	r12, r18
    2f98:	d1 08       	sbc	r13, r1
    2f9a:	e1 08       	sbc	r14, r1
    2f9c:	f1 08       	sbc	r15, r1
    2f9e:	88 ee       	ldi	r24, 0xE8	; 232
    2fa0:	88 0e       	add	r8, r24
    2fa2:	83 e0       	ldi	r24, 0x03	; 3
    2fa4:	98 1e       	adc	r9, r24
    2fa6:	a1 1c       	adc	r10, r1
    2fa8:	b1 1c       	adc	r11, r1
    2faa:	c1 14       	cp	r12, r1
    2fac:	d1 04       	cpc	r13, r1
    2fae:	e1 04       	cpc	r14, r1
    2fb0:	f1 04       	cpc	r15, r1
    2fb2:	19 f7       	brne	.-58     	; 0x2f7a <delay+0x2a>
    2fb4:	db cf       	rjmp	.-74     	; 0x2f6c <delay+0x1c>
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	df 90       	pop	r13
    2fbc:	cf 90       	pop	r12
    2fbe:	bf 90       	pop	r11
    2fc0:	af 90       	pop	r10
    2fc2:	9f 90       	pop	r9
    2fc4:	8f 90       	pop	r8
    2fc6:	08 95       	ret

00002fc8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2fc8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2fca:	84 b5       	in	r24, 0x24	; 36
    2fcc:	82 60       	ori	r24, 0x02	; 2
    2fce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2fd0:	84 b5       	in	r24, 0x24	; 36
    2fd2:	81 60       	ori	r24, 0x01	; 1
    2fd4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2fd6:	85 b5       	in	r24, 0x25	; 37
    2fd8:	82 60       	ori	r24, 0x02	; 2
    2fda:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2fdc:	85 b5       	in	r24, 0x25	; 37
    2fde:	81 60       	ori	r24, 0x01	; 1
    2fe0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2fe2:	ee e6       	ldi	r30, 0x6E	; 110
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	81 60       	ori	r24, 0x01	; 1
    2fea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2fec:	e1 e8       	ldi	r30, 0x81	; 129
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2ff2:	80 81       	ld	r24, Z
    2ff4:	82 60       	ori	r24, 0x02	; 2
    2ff6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2ff8:	80 81       	ld	r24, Z
    2ffa:	81 60       	ori	r24, 0x01	; 1
    2ffc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2ffe:	e0 e8       	ldi	r30, 0x80	; 128
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	81 60       	ori	r24, 0x01	; 1
    3006:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3008:	e1 eb       	ldi	r30, 0xB1	; 177
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	84 60       	ori	r24, 0x04	; 4
    3010:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3012:	e0 eb       	ldi	r30, 0xB0	; 176
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	81 60       	ori	r24, 0x01	; 1
    301a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    301c:	ea e7       	ldi	r30, 0x7A	; 122
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	84 60       	ori	r24, 0x04	; 4
    3024:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3026:	80 81       	ld	r24, Z
    3028:	82 60       	ori	r24, 0x02	; 2
    302a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    302c:	80 81       	ld	r24, Z
    302e:	81 60       	ori	r24, 0x01	; 1
    3030:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3032:	80 81       	ld	r24, Z
    3034:	80 68       	ori	r24, 0x80	; 128
    3036:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3038:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    303c:	08 95       	ret

0000303e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    303e:	8e 30       	cpi	r24, 0x0E	; 14
    3040:	08 f0       	brcs	.+2      	; 0x3044 <analogRead+0x6>
    3042:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3044:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3048:	90 e4       	ldi	r25, 0x40	; 64
    304a:	29 9f       	mul	r18, r25
    304c:	90 01       	movw	r18, r0
    304e:	11 24       	eor	r1, r1
    3050:	87 70       	andi	r24, 0x07	; 7
    3052:	82 2b       	or	r24, r18
    3054:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3058:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    305c:	80 64       	ori	r24, 0x40	; 64
    305e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3062:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3066:	86 fd       	sbrc	r24, 6
    3068:	fc cf       	rjmp	.-8      	; 0x3062 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    306a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    306e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3072:	90 e0       	ldi	r25, 0x00	; 0
}
    3074:	92 2b       	or	r25, r18
    3076:	08 95       	ret

00003078 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3078:	83 30       	cpi	r24, 0x03	; 3
    307a:	81 f0       	breq	.+32     	; 0x309c <turnOffPWM+0x24>
    307c:	28 f4       	brcc	.+10     	; 0x3088 <turnOffPWM+0x10>
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	99 f0       	breq	.+38     	; 0x30a8 <turnOffPWM+0x30>
    3082:	82 30       	cpi	r24, 0x02	; 2
    3084:	a1 f0       	breq	.+40     	; 0x30ae <turnOffPWM+0x36>
    3086:	08 95       	ret
    3088:	87 30       	cpi	r24, 0x07	; 7
    308a:	a9 f0       	breq	.+42     	; 0x30b6 <turnOffPWM+0x3e>
    308c:	88 30       	cpi	r24, 0x08	; 8
    308e:	b9 f0       	breq	.+46     	; 0x30be <turnOffPWM+0x46>
    3090:	84 30       	cpi	r24, 0x04	; 4
    3092:	d1 f4       	brne	.+52     	; 0x30c8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3094:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3098:	8f 7d       	andi	r24, 0xDF	; 223
    309a:	03 c0       	rjmp	.+6      	; 0x30a2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    309c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    30a0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    30a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    30a6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    30a8:	84 b5       	in	r24, 0x24	; 36
    30aa:	8f 77       	andi	r24, 0x7F	; 127
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    30ae:	84 b5       	in	r24, 0x24	; 36
    30b0:	8f 7d       	andi	r24, 0xDF	; 223
    30b2:	84 bd       	out	0x24, r24	; 36
    30b4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    30b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    30ba:	8f 77       	andi	r24, 0x7F	; 127
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    30be:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    30c2:	8f 7d       	andi	r24, 0xDF	; 223
    30c4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    30c8:	08 95       	ret

000030ca <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	fc 01       	movw	r30, r24
    30d2:	e5 50       	subi	r30, 0x05	; 5
    30d4:	fa 4f       	sbci	r31, 0xFA	; 250
    30d6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    30d8:	fc 01       	movw	r30, r24
    30da:	e1 5f       	subi	r30, 0xF1	; 241
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    30e0:	88 23       	and	r24, r24
    30e2:	61 f1       	breq	.+88     	; 0x313c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	fc 01       	movw	r30, r24
    30ec:	e9 5c       	subi	r30, 0xC9	; 201
    30ee:	f9 4f       	sbci	r31, 0xF9	; 249
    30f0:	c5 91       	lpm	r28, Z+
    30f2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    30f4:	fc 01       	movw	r30, r24
    30f6:	e3 5d       	subi	r30, 0xD3	; 211
    30f8:	f9 4f       	sbci	r31, 0xF9	; 249
    30fa:	a5 91       	lpm	r26, Z+
    30fc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    30fe:	61 11       	cpse	r22, r1
    3100:	09 c0       	rjmp	.+18     	; 0x3114 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3102:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3104:	f8 94       	cli
		*reg &= ~bit;
    3106:	88 81       	ld	r24, Y
    3108:	20 95       	com	r18
    310a:	82 23       	and	r24, r18
    310c:	88 83       	st	Y, r24
		*out &= ~bit;
    310e:	ec 91       	ld	r30, X
    3110:	2e 23       	and	r18, r30
    3112:	0b c0       	rjmp	.+22     	; 0x312a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3114:	62 30       	cpi	r22, 0x02	; 2
    3116:	61 f4       	brne	.+24     	; 0x3130 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3118:	9f b7       	in	r25, 0x3f	; 63
                cli();
    311a:	f8 94       	cli
		*reg &= ~bit;
    311c:	88 81       	ld	r24, Y
    311e:	32 2f       	mov	r19, r18
    3120:	30 95       	com	r19
    3122:	83 23       	and	r24, r19
    3124:	88 83       	st	Y, r24
		*out |= bit;
    3126:	ec 91       	ld	r30, X
    3128:	2e 2b       	or	r18, r30
    312a:	2c 93       	st	X, r18
		SREG = oldSREG;
    312c:	9f bf       	out	0x3f, r25	; 63
    312e:	06 c0       	rjmp	.+12     	; 0x313c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3130:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3132:	f8 94       	cli
		*reg |= bit;
    3134:	e8 81       	ld	r30, Y
    3136:	2e 2b       	or	r18, r30
    3138:	28 83       	st	Y, r18
		SREG = oldSREG;
    313a:	8f bf       	out	0x3f, r24	; 63
	}
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3142:	1f 93       	push	r17
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	f9 01       	movw	r30, r18
    314e:	e9 51       	subi	r30, 0x19	; 25
    3150:	fa 4f       	sbci	r31, 0xFA	; 250
    3152:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3154:	f9 01       	movw	r30, r18
    3156:	e5 50       	subi	r30, 0x05	; 5
    3158:	fa 4f       	sbci	r31, 0xFA	; 250
    315a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    315c:	f9 01       	movw	r30, r18
    315e:	e1 5f       	subi	r30, 0xF1	; 241
    3160:	f9 4f       	sbci	r31, 0xF9	; 249
    3162:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3164:	cc 23       	and	r28, r28
    3166:	c1 f0       	breq	.+48     	; 0x3198 <digitalWrite+0x56>
    3168:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    316a:	81 11       	cpse	r24, r1
    316c:	0e 94 3c 18 	call	0x3078	; 0x3078 <turnOffPWM>

	out = portOutputRegister(port);
    3170:	ec 2f       	mov	r30, r28
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	ee 0f       	add	r30, r30
    3176:	ff 1f       	adc	r31, r31
    3178:	e3 5d       	subi	r30, 0xD3	; 211
    317a:	f9 4f       	sbci	r31, 0xF9	; 249
    317c:	a5 91       	lpm	r26, Z+
    317e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3180:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3182:	f8 94       	cli

	if (val == LOW) {
    3184:	11 11       	cpse	r17, r1
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <digitalWrite+0x4e>
		*out &= ~bit;
    3188:	8c 91       	ld	r24, X
    318a:	d0 95       	com	r29
    318c:	d8 23       	and	r29, r24
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3190:	ec 91       	ld	r30, X
    3192:	de 2b       	or	r29, r30
    3194:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3196:	9f bf       	out	0x3f, r25	; 63
}
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	08 95       	ret

000031a0 <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    31a0:	fc 01       	movw	r30, r24
    31a2:	80 81       	ld	r24, Z
    31a4:	91 81       	ldd	r25, Z+1	; 0x01
    31a6:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <free>

000031aa <_ZN6String10invalidateEv>:
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	ec 01       	movw	r28, r24
    31b0:	88 81       	ld	r24, Y
    31b2:	99 81       	ldd	r25, Y+1	; 0x01
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	11 f0       	breq	.+4      	; 0x31bc <_ZN6String10invalidateEv+0x12>
    31b8:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <free>
    31bc:	19 82       	std	Y+1, r1	; 0x01
    31be:	18 82       	st	Y, r1
    31c0:	1d 82       	std	Y+5, r1	; 0x05
    31c2:	1c 82       	std	Y+4, r1	; 0x04
    31c4:	1b 82       	std	Y+3, r1	; 0x03
    31c6:	1a 82       	std	Y+2, r1	; 0x02
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	08 95       	ret

000031ce <_ZN6String12changeBufferEj>:
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	ec 01       	movw	r28, r24
    31d8:	8b 01       	movw	r16, r22
    31da:	6f 5f       	subi	r22, 0xFF	; 255
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	88 81       	ld	r24, Y
    31e0:	99 81       	ldd	r25, Y+1	; 0x01
    31e2:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <realloc>
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	31 f0       	breq	.+12     	; 0x31f6 <_ZN6String12changeBufferEj+0x28>
    31ea:	99 83       	std	Y+1, r25	; 0x01
    31ec:	88 83       	st	Y, r24
    31ee:	1b 83       	std	Y+3, r17	; 0x03
    31f0:	0a 83       	std	Y+2, r16	; 0x02
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	01 c0       	rjmp	.+2      	; 0x31f8 <_ZN6String12changeBufferEj+0x2a>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <_ZN6String7reserveEj>:
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	ec 01       	movw	r28, r24
    3208:	88 81       	ld	r24, Y
    320a:	99 81       	ldd	r25, Y+1	; 0x01
    320c:	89 2b       	or	r24, r25
    320e:	29 f0       	breq	.+10     	; 0x321a <_ZN6String7reserveEj+0x18>
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	86 17       	cp	r24, r22
    3216:	97 07       	cpc	r25, r23
    3218:	60 f4       	brcc	.+24     	; 0x3232 <_ZN6String7reserveEj+0x30>
    321a:	ce 01       	movw	r24, r28
    321c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN6String12changeBufferEj>
    3220:	88 23       	and	r24, r24
    3222:	41 f0       	breq	.+16     	; 0x3234 <_ZN6String7reserveEj+0x32>
    3224:	8c 81       	ldd	r24, Y+4	; 0x04
    3226:	9d 81       	ldd	r25, Y+5	; 0x05
    3228:	89 2b       	or	r24, r25
    322a:	19 f4       	brne	.+6      	; 0x3232 <_ZN6String7reserveEj+0x30>
    322c:	e8 81       	ld	r30, Y
    322e:	f9 81       	ldd	r31, Y+1	; 0x01
    3230:	10 82       	st	Z, r1
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	08 95       	ret

0000323a <_ZN6String4copyEPKcj>:
    323a:	ef 92       	push	r14
    323c:	ff 92       	push	r15
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	ec 01       	movw	r28, r24
    3248:	7b 01       	movw	r14, r22
    324a:	8a 01       	movw	r16, r20
    324c:	ba 01       	movw	r22, r20
    324e:	0e 94 01 19 	call	0x3202	; 0x3202 <_ZN6String7reserveEj>
    3252:	81 11       	cpse	r24, r1
    3254:	04 c0       	rjmp	.+8      	; 0x325e <_ZN6String4copyEPKcj+0x24>
    3256:	ce 01       	movw	r24, r28
    3258:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN6String10invalidateEv>
    325c:	07 c0       	rjmp	.+14     	; 0x326c <_ZN6String4copyEPKcj+0x32>
    325e:	1d 83       	std	Y+5, r17	; 0x05
    3260:	0c 83       	std	Y+4, r16	; 0x04
    3262:	b7 01       	movw	r22, r14
    3264:	88 81       	ld	r24, Y
    3266:	99 81       	ldd	r25, Y+1	; 0x01
    3268:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strcpy>
    326c:	ce 01       	movw	r24, r28
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	08 95       	ret

0000327c <_ZN6StringC1EPKc>:
    327c:	fc 01       	movw	r30, r24
    327e:	11 82       	std	Z+1, r1	; 0x01
    3280:	10 82       	st	Z, r1
    3282:	13 82       	std	Z+3, r1	; 0x03
    3284:	12 82       	std	Z+2, r1	; 0x02
    3286:	15 82       	std	Z+5, r1	; 0x05
    3288:	14 82       	std	Z+4, r1	; 0x04
    328a:	61 15       	cp	r22, r1
    328c:	71 05       	cpc	r23, r1
    328e:	51 f0       	breq	.+20     	; 0x32a4 <_ZN6StringC1EPKc+0x28>
    3290:	fb 01       	movw	r30, r22
    3292:	01 90       	ld	r0, Z+
    3294:	00 20       	and	r0, r0
    3296:	e9 f7       	brne	.-6      	; 0x3292 <_ZN6StringC1EPKc+0x16>
    3298:	31 97       	sbiw	r30, 0x01	; 1
    329a:	af 01       	movw	r20, r30
    329c:	46 1b       	sub	r20, r22
    329e:	57 0b       	sbc	r21, r23
    32a0:	0c 94 1d 19 	jmp	0x323a	; 0x323a <_ZN6String4copyEPKcj>
    32a4:	08 95       	ret

000032a6 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	8c 01       	movw	r16, r24
    32b0:	eb 01       	movw	r28, r22
	if (buffer) {
    32b2:	fc 01       	movw	r30, r24
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	99 f0       	breq	.+38     	; 0x32e2 <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    32bc:	42 81       	ldd	r20, Z+2	; 0x02
    32be:	53 81       	ldd	r21, Z+3	; 0x03
    32c0:	2c 81       	ldd	r18, Y+4	; 0x04
    32c2:	3d 81       	ldd	r19, Y+5	; 0x05
    32c4:	42 17       	cp	r20, r18
    32c6:	53 07       	cpc	r21, r19
    32c8:	50 f0       	brcs	.+20     	; 0x32de <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    32ca:	68 81       	ld	r22, Y
    32cc:	79 81       	ldd	r23, Y+1	; 0x01
    32ce:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <strcpy>
			len = rhs.len;
    32d2:	8c 81       	ldd	r24, Y+4	; 0x04
    32d4:	9d 81       	ldd	r25, Y+5	; 0x05
    32d6:	f8 01       	movw	r30, r16
    32d8:	95 83       	std	Z+5, r25	; 0x05
    32da:	84 83       	std	Z+4, r24	; 0x04
    32dc:	13 c0       	rjmp	.+38     	; 0x3304 <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    32de:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <free>
		}
	}
	buffer = rhs.buffer;
    32e2:	88 81       	ld	r24, Y
    32e4:	99 81       	ldd	r25, Y+1	; 0x01
    32e6:	f8 01       	movw	r30, r16
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	9b 81       	ldd	r25, Y+3	; 0x03
    32f0:	93 83       	std	Z+3, r25	; 0x03
    32f2:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    32f4:	8c 81       	ldd	r24, Y+4	; 0x04
    32f6:	9d 81       	ldd	r25, Y+5	; 0x05
    32f8:	95 83       	std	Z+5, r25	; 0x05
    32fa:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    32fc:	19 82       	std	Y+1, r1	; 0x01
    32fe:	18 82       	st	Y, r1
	rhs.capacity = 0;
    3300:	1b 82       	std	Y+3, r1	; 0x03
    3302:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    3304:	1d 82       	std	Y+5, r1	; 0x05
    3306:	1c 82       	std	Y+4, r1	; 0x04
}
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	1f 91       	pop	r17
    330e:	0f 91       	pop	r16
    3310:	08 95       	ret

00003312 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	ec 01       	movw	r28, r24
    3318:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    331a:	86 17       	cp	r24, r22
    331c:	97 07       	cpc	r25, r23
    331e:	61 f0       	breq	.+24     	; 0x3338 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3320:	60 81       	ld	r22, Z
    3322:	71 81       	ldd	r23, Z+1	; 0x01
    3324:	61 15       	cp	r22, r1
    3326:	71 05       	cpc	r23, r1
    3328:	29 f0       	breq	.+10     	; 0x3334 <_ZN6StringaSERKS_+0x22>
    332a:	44 81       	ldd	r20, Z+4	; 0x04
    332c:	55 81       	ldd	r21, Z+5	; 0x05
    332e:	0e 94 1d 19 	call	0x323a	; 0x323a <_ZN6String4copyEPKcj>
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    3334:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN6String10invalidateEv>
	
	return *this;
}
    3338:	ce 01       	movw	r24, r28
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	08 95       	ret

00003340 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3340:	fc 01       	movw	r30, r24
    3342:	11 82       	std	Z+1, r1	; 0x01
    3344:	10 82       	st	Z, r1
	capacity = 0;
    3346:	13 82       	std	Z+3, r1	; 0x03
    3348:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    334a:	15 82       	std	Z+5, r1	; 0x05
    334c:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    334e:	0c 94 89 19 	jmp	0x3312	; 0x3312 <_ZN6StringaSERKS_>

00003352 <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    3358:	86 17       	cp	r24, r22
    335a:	97 07       	cpc	r25, r23
    335c:	11 f0       	breq	.+4      	; 0x3362 <_ZN6StringaSEOS_+0x10>
    335e:	0e 94 53 19 	call	0x32a6	; 0x32a6 <_ZN6String4moveERS_>
	return *this;
}
    3362:	ce 01       	movw	r24, r28
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    336a:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    336e:	30 91 44 05 	lds	r19, 0x0544	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    3372:	28 17       	cp	r18, r24
    3374:	39 07       	cpc	r19, r25
    3376:	b9 f4       	brne	.+46     	; 0x33a6 <_ZN14SoftwareSerial4readEv+0x3c>
    3378:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    337c:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3380:	98 17       	cp	r25, r24
    3382:	89 f0       	breq	.+34     	; 0x33a6 <_ZN14SoftwareSerial4readEv+0x3c>
    3384:	e0 91 01 05 	lds	r30, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	ed 5f       	subi	r30, 0xFD	; 253
    338c:	fa 4f       	sbci	r31, 0xFA	; 250
    338e:	80 81       	ld	r24, Z
    3390:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	2f 5f       	subi	r18, 0xFF	; 255
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	2f 73       	andi	r18, 0x3F	; 63
    339c:	33 27       	eor	r19, r19
    339e:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	08 95       	ret
    33a6:	8f ef       	ldi	r24, 0xFF	; 255
    33a8:	9f ef       	ldi	r25, 0xFF	; 255
    33aa:	08 95       	ret

000033ac <_ZN14SoftwareSerial5writeEh>:
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	dc 01       	movw	r26, r24
    33b4:	5c 96       	adiw	r26, 0x1c	; 28
    33b6:	8d 91       	ld	r24, X+
    33b8:	9c 91       	ld	r25, X
    33ba:	5d 97       	sbiw	r26, 0x1d	; 29
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	39 f4       	brne	.+14     	; 0x33ce <_ZN14SoftwareSerial5writeEh+0x22>
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	13 96       	adiw	r26, 0x03	; 3
    33c6:	3c 93       	st	X, r19
    33c8:	2e 93       	st	-X, r18
    33ca:	12 97       	sbiw	r26, 0x02	; 2
    33cc:	3b c0       	rjmp	.+118    	; 0x3444 <_ZN14SoftwareSerial5writeEh+0x98>
    33ce:	51 96       	adiw	r26, 0x11	; 17
    33d0:	ed 91       	ld	r30, X+
    33d2:	fc 91       	ld	r31, X
    33d4:	52 97       	sbiw	r26, 0x12	; 18
    33d6:	50 96       	adiw	r26, 0x10	; 16
    33d8:	2c 91       	ld	r18, X
    33da:	50 97       	sbiw	r26, 0x10	; 16
    33dc:	32 2f       	mov	r19, r18
    33de:	30 95       	com	r19
    33e0:	1f b7       	in	r17, 0x3f	; 63
    33e2:	5e 96       	adiw	r26, 0x1e	; 30
    33e4:	4c 91       	ld	r20, X
    33e6:	5e 97       	sbiw	r26, 0x1e	; 30
    33e8:	74 2f       	mov	r23, r20
    33ea:	72 70       	andi	r23, 0x02	; 2
    33ec:	41 fd       	sbrc	r20, 1
    33ee:	60 95       	com	r22
    33f0:	f8 94       	cli
    33f2:	40 81       	ld	r20, Z
    33f4:	77 23       	and	r23, r23
    33f6:	11 f0       	breq	.+4      	; 0x33fc <_ZN14SoftwareSerial5writeEh+0x50>
    33f8:	42 2b       	or	r20, r18
    33fa:	01 c0       	rjmp	.+2      	; 0x33fe <_ZN14SoftwareSerial5writeEh+0x52>
    33fc:	43 23       	and	r20, r19
    33fe:	40 83       	st	Z, r20
    3400:	ec 01       	movw	r28, r24
    3402:	21 97       	sbiw	r28, 0x01	; 1
    3404:	f1 f7       	brne	.-4      	; 0x3402 <_ZN14SoftwareSerial5writeEh+0x56>
    3406:	48 e0       	ldi	r20, 0x08	; 8
    3408:	50 81       	ld	r21, Z
    340a:	60 ff       	sbrs	r22, 0
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <_ZN14SoftwareSerial5writeEh+0x66>
    340e:	52 2b       	or	r21, r18
    3410:	01 c0       	rjmp	.+2      	; 0x3414 <_ZN14SoftwareSerial5writeEh+0x68>
    3412:	53 23       	and	r21, r19
    3414:	50 83       	st	Z, r21
    3416:	ec 01       	movw	r28, r24
    3418:	21 97       	sbiw	r28, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <_ZN14SoftwareSerial5writeEh+0x6c>
    341c:	66 95       	lsr	r22
    341e:	41 50       	subi	r20, 0x01	; 1
    3420:	99 f7       	brne	.-26     	; 0x3408 <_ZN14SoftwareSerial5writeEh+0x5c>
    3422:	80 81       	ld	r24, Z
    3424:	77 23       	and	r23, r23
    3426:	19 f0       	breq	.+6      	; 0x342e <_ZN14SoftwareSerial5writeEh+0x82>
    3428:	83 23       	and	r24, r19
    342a:	80 83       	st	Z, r24
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <_ZN14SoftwareSerial5writeEh+0x86>
    342e:	28 2b       	or	r18, r24
    3430:	20 83       	st	Z, r18
    3432:	1f bf       	out	0x3f, r17	; 63
    3434:	5c 96       	adiw	r26, 0x1c	; 28
    3436:	8d 91       	ld	r24, X+
    3438:	9c 91       	ld	r25, X
    343a:	5d 97       	sbiw	r26, 0x1d	; 29
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <_ZN14SoftwareSerial5writeEh+0x90>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	08 95       	ret

0000344c <_ZN14SoftwareSerial5flushEv>:
    344c:	08 95       	ret

0000344e <_ZN14SoftwareSerial4peekEv>:
    344e:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    3452:	30 91 44 05 	lds	r19, 0x0544	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    3456:	28 17       	cp	r18, r24
    3458:	39 07       	cpc	r19, r25
    345a:	71 f4       	brne	.+28     	; 0x3478 <_ZN14SoftwareSerial4peekEv+0x2a>
    345c:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3460:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3464:	98 17       	cp	r25, r24
    3466:	41 f0       	breq	.+16     	; 0x3478 <_ZN14SoftwareSerial4peekEv+0x2a>
    3468:	e0 91 01 05 	lds	r30, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	ed 5f       	subi	r30, 0xFD	; 253
    3470:	fa 4f       	sbci	r31, 0xFA	; 250
    3472:	80 81       	ld	r24, Z
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	08 95       	ret
    3478:	8f ef       	ldi	r24, 0xFF	; 255
    347a:	9f ef       	ldi	r25, 0xFF	; 255
    347c:	08 95       	ret

0000347e <_ZN14SoftwareSerial9availableEv>:
    347e:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    3482:	30 91 44 05 	lds	r19, 0x0544	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    3486:	28 17       	cp	r18, r24
    3488:	39 07       	cpc	r19, r25
    348a:	71 f4       	brne	.+28     	; 0x34a8 <_ZN14SoftwareSerial9availableEv+0x2a>
    348c:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3490:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	80 5c       	subi	r24, 0xC0	; 192
    3498:	9f 4f       	sbci	r25, 0xFF	; 255
    349a:	82 1b       	sub	r24, r18
    349c:	91 09       	sbc	r25, r1
    349e:	60 e4       	ldi	r22, 0x40	; 64
    34a0:	70 e0       	ldi	r23, 0x00	; 0
    34a2:	0e 94 28 1c 	call	0x3850	; 0x3850 <__divmodhi4>
    34a6:	08 95       	ret
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	08 95       	ret

000034ae <_ZN14SoftwareSerial13stopListeningEv>:
    34ae:	e0 91 43 05 	lds	r30, 0x0543	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    34b2:	f0 91 44 05 	lds	r31, 0x0544	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    34b6:	e8 17       	cp	r30, r24
    34b8:	f9 07       	cpc	r31, r25
    34ba:	69 f4       	brne	.+26     	; 0x34d6 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    34bc:	a3 89       	ldd	r26, Z+19	; 0x13
    34be:	b4 89       	ldd	r27, Z+20	; 0x14
    34c0:	9c 91       	ld	r25, X
    34c2:	85 89       	ldd	r24, Z+21	; 0x15
    34c4:	80 95       	com	r24
    34c6:	89 23       	and	r24, r25
    34c8:	8c 93       	st	X, r24
    34ca:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    34ce:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	08 95       	ret
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	08 95       	ret

000034da <_ZN14SoftwareSerial6listenEv>:
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	ec 01       	movw	r28, r24
    34e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34e4:	89 2b       	or	r24, r25
    34e6:	f1 f0       	breq	.+60     	; 0x3524 <_ZN14SoftwareSerial6listenEv+0x4a>
    34e8:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    34ec:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    34f0:	c8 17       	cp	r28, r24
    34f2:	d9 07       	cpc	r29, r25
    34f4:	b9 f0       	breq	.+46     	; 0x3524 <_ZN14SoftwareSerial6listenEv+0x4a>
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	11 f0       	breq	.+4      	; 0x34fe <_ZN14SoftwareSerial6listenEv+0x24>
    34fa:	0e 94 57 1a 	call	0x34ae	; 0x34ae <_ZN14SoftwareSerial13stopListeningEv>
    34fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3500:	8e 7f       	andi	r24, 0xFE	; 254
    3502:	8e 8f       	std	Y+30, r24	; 0x1e
    3504:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3508:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    350c:	d0 93 44 05 	sts	0x0544, r29	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    3510:	c0 93 43 05 	sts	0x0543, r28	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    3514:	eb 89       	ldd	r30, Y+19	; 0x13
    3516:	fc 89       	ldd	r31, Y+20	; 0x14
    3518:	90 81       	ld	r25, Z
    351a:	8d 89       	ldd	r24, Y+21	; 0x15
    351c:	89 2b       	or	r24, r25
    351e:	80 83       	st	Z, r24
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	01 c0       	rjmp	.+2      	; 0x3526 <_ZN14SoftwareSerial6listenEv+0x4c>
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	df 91       	pop	r29
    3528:	cf 91       	pop	r28
    352a:	08 95       	ret

0000352c <__vector_3>:
    352c:	1f 92       	push	r1
    352e:	0f 92       	push	r0
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	0f 92       	push	r0
    3534:	11 24       	eor	r1, r1
    3536:	2f 93       	push	r18
    3538:	3f 93       	push	r19
    353a:	4f 93       	push	r20
    353c:	5f 93       	push	r21
    353e:	6f 93       	push	r22
    3540:	7f 93       	push	r23
    3542:	8f 93       	push	r24
    3544:	9f 93       	push	r25
    3546:	af 93       	push	r26
    3548:	bf 93       	push	r27
    354a:	ef 93       	push	r30
    354c:	ff 93       	push	r31
    354e:	e0 91 43 05 	lds	r30, 0x0543	; 0x800543 <_ZN14SoftwareSerial13active_objectE>
    3552:	f0 91 44 05 	lds	r31, 0x0544	; 0x800544 <_ZN14SoftwareSerial13active_objectE+0x1>
    3556:	30 97       	sbiw	r30, 0x00	; 0
    3558:	09 f4       	brne	.+2      	; 0x355c <__vector_3+0x30>
    355a:	51 c0       	rjmp	.+162    	; 0x35fe <__vector_3+0xd2>
    355c:	96 8d       	ldd	r25, Z+30	; 0x1e
    355e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3560:	b7 85       	ldd	r27, Z+15	; 0x0f
    3562:	85 85       	ldd	r24, Z+13	; 0x0d
    3564:	91 ff       	sbrs	r25, 1
    3566:	04 c0       	rjmp	.+8      	; 0x3570 <__vector_3+0x44>
    3568:	9c 91       	ld	r25, X
    356a:	89 23       	and	r24, r25
    356c:	29 f4       	brne	.+10     	; 0x3578 <__vector_3+0x4c>
    356e:	47 c0       	rjmp	.+142    	; 0x35fe <__vector_3+0xd2>
    3570:	9c 91       	ld	r25, X
    3572:	89 23       	and	r24, r25
    3574:	09 f0       	breq	.+2      	; 0x3578 <__vector_3+0x4c>
    3576:	43 c0       	rjmp	.+134    	; 0x35fe <__vector_3+0xd2>
    3578:	a3 89       	ldd	r26, Z+19	; 0x13
    357a:	b4 89       	ldd	r27, Z+20	; 0x14
    357c:	9c 91       	ld	r25, X
    357e:	85 89       	ldd	r24, Z+21	; 0x15
    3580:	80 95       	com	r24
    3582:	89 23       	and	r24, r25
    3584:	8c 93       	st	X, r24
    3586:	86 89       	ldd	r24, Z+22	; 0x16
    3588:	97 89       	ldd	r25, Z+23	; 0x17
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <__vector_3+0x5e>
    358e:	60 8d       	ldd	r22, Z+24	; 0x18
    3590:	71 8d       	ldd	r23, Z+25	; 0x19
    3592:	a6 85       	ldd	r26, Z+14	; 0x0e
    3594:	b7 85       	ldd	r27, Z+15	; 0x0f
    3596:	55 85       	ldd	r21, Z+13	; 0x0d
    3598:	38 e0       	ldi	r19, 0x08	; 8
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	cb 01       	movw	r24, r22
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <__vector_3+0x72>
    35a2:	82 2f       	mov	r24, r18
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	95 95       	asr	r25
    35a8:	87 95       	ror	r24
    35aa:	28 2f       	mov	r18, r24
    35ac:	4c 91       	ld	r20, X
    35ae:	45 23       	and	r20, r21
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <__vector_3+0x88>
    35b2:	20 68       	ori	r18, 0x80	; 128
    35b4:	31 50       	subi	r19, 0x01	; 1
    35b6:	91 f7       	brne	.-28     	; 0x359c <__vector_3+0x70>
    35b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    35ba:	81 fd       	sbrc	r24, 1
    35bc:	20 95       	com	r18
    35be:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	01 96       	adiw	r24, 0x01	; 1
    35c6:	8f 73       	andi	r24, 0x3F	; 63
    35c8:	99 27       	eor	r25, r25
    35ca:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <_ZN14SoftwareSerial20_receive_buffer_headE>
    35ce:	38 17       	cp	r19, r24
    35d0:	49 f0       	breq	.+18     	; 0x35e4 <__vector_3+0xb8>
    35d2:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	ad 5f       	subi	r26, 0xFD	; 253
    35da:	ba 4f       	sbci	r27, 0xFA	; 250
    35dc:	2c 93       	st	X, r18
    35de:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    35e2:	03 c0       	rjmp	.+6      	; 0x35ea <__vector_3+0xbe>
    35e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    35e6:	81 60       	ori	r24, 0x01	; 1
    35e8:	86 8f       	std	Z+30, r24	; 0x1e
    35ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ec:	93 8d       	ldd	r25, Z+27	; 0x1b
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <__vector_3+0xc2>
    35f2:	a3 89       	ldd	r26, Z+19	; 0x13
    35f4:	b4 89       	ldd	r27, Z+20	; 0x14
    35f6:	9c 91       	ld	r25, X
    35f8:	85 89       	ldd	r24, Z+21	; 0x15
    35fa:	89 2b       	or	r24, r25
    35fc:	8c 93       	st	X, r24
    35fe:	ff 91       	pop	r31
    3600:	ef 91       	pop	r30
    3602:	bf 91       	pop	r27
    3604:	af 91       	pop	r26
    3606:	9f 91       	pop	r25
    3608:	8f 91       	pop	r24
    360a:	7f 91       	pop	r23
    360c:	6f 91       	pop	r22
    360e:	5f 91       	pop	r21
    3610:	4f 91       	pop	r20
    3612:	3f 91       	pop	r19
    3614:	2f 91       	pop	r18
    3616:	0f 90       	pop	r0
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	0f 90       	pop	r0
    361c:	1f 90       	pop	r1
    361e:	18 95       	reti

00003620 <_ZN14SoftwareSerial5setTXEh>:
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	ec 01       	movw	r28, r24
    3628:	16 2f       	mov	r17, r22
    362a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    362c:	66 95       	lsr	r22
    362e:	61 70       	andi	r22, 0x01	; 1
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	68 27       	eor	r22, r24
    3634:	81 2f       	mov	r24, r17
    3636:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	81 2f       	mov	r24, r17
    363e:	0e 94 65 18 	call	0x30ca	; 0x30ca <pinMode>
    3642:	81 2f       	mov	r24, r17
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	fc 01       	movw	r30, r24
    3648:	e5 50       	subi	r30, 0x05	; 5
    364a:	fa 4f       	sbci	r31, 0xFA	; 250
    364c:	e4 91       	lpm	r30, Z
    364e:	e8 8b       	std	Y+16, r30	; 0x10
    3650:	fc 01       	movw	r30, r24
    3652:	e1 5f       	subi	r30, 0xF1	; 241
    3654:	f9 4f       	sbci	r31, 0xF9	; 249
    3656:	e4 91       	lpm	r30, Z
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	ee 0f       	add	r30, r30
    365c:	ff 1f       	adc	r31, r31
    365e:	e3 5d       	subi	r30, 0xD3	; 211
    3660:	f9 4f       	sbci	r31, 0xF9	; 249
    3662:	85 91       	lpm	r24, Z+
    3664:	94 91       	lpm	r25, Z
    3666:	9a 8b       	std	Y+18, r25	; 0x12
    3668:	89 8b       	std	Y+17, r24	; 0x11
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    366e:	1f 91       	pop	r17
    3670:	08 95       	ret

00003672 <_ZN14SoftwareSerial5setRXEh>:
    3672:	1f 93       	push	r17
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
    3678:	ec 01       	movw	r28, r24
    367a:	16 2f       	mov	r17, r22
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	81 2f       	mov	r24, r17
    3680:	0e 94 65 18 	call	0x30ca	; 0x30ca <pinMode>
    3684:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3686:	81 fd       	sbrc	r24, 1
    3688:	04 c0       	rjmp	.+8      	; 0x3692 <_ZN14SoftwareSerial5setRXEh+0x20>
    368a:	61 e0       	ldi	r22, 0x01	; 1
    368c:	81 2f       	mov	r24, r17
    368e:	0e 94 a1 18 	call	0x3142	; 0x3142 <digitalWrite>
    3692:	1c 87       	std	Y+12, r17	; 0x0c
    3694:	81 2f       	mov	r24, r17
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	fc 01       	movw	r30, r24
    369a:	e5 50       	subi	r30, 0x05	; 5
    369c:	fa 4f       	sbci	r31, 0xFA	; 250
    369e:	e4 91       	lpm	r30, Z
    36a0:	ed 87       	std	Y+13, r30	; 0x0d
    36a2:	fc 01       	movw	r30, r24
    36a4:	e1 5f       	subi	r30, 0xF1	; 241
    36a6:	f9 4f       	sbci	r31, 0xF9	; 249
    36a8:	e4 91       	lpm	r30, Z
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	ee 0f       	add	r30, r30
    36ae:	ff 1f       	adc	r31, r31
    36b0:	ed 5d       	subi	r30, 0xDD	; 221
    36b2:	f9 4f       	sbci	r31, 0xF9	; 249
    36b4:	85 91       	lpm	r24, Z+
    36b6:	94 91       	lpm	r25, Z
    36b8:	9f 87       	std	Y+15, r25	; 0x0f
    36ba:	8e 87       	std	Y+14, r24	; 0x0e
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	1f 91       	pop	r17
    36c2:	08 95       	ret

000036c4 <_ZN14SoftwareSerialC1Ehhb>:
    36c4:	1f 93       	push	r17
    36c6:	cf 93       	push	r28
    36c8:	df 93       	push	r29
    36ca:	ec 01       	movw	r28, r24
    36cc:	16 2f       	mov	r17, r22
    36ce:	1b 82       	std	Y+3, r1	; 0x03
    36d0:	1a 82       	std	Y+2, r1	; 0x02
    36d2:	88 ee       	ldi	r24, 0xE8	; 232
    36d4:	93 e0       	ldi	r25, 0x03	; 3
    36d6:	a0 e0       	ldi	r26, 0x00	; 0
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	8c 83       	std	Y+4, r24	; 0x04
    36dc:	9d 83       	std	Y+5, r25	; 0x05
    36de:	ae 83       	std	Y+6, r26	; 0x06
    36e0:	bf 83       	std	Y+7, r27	; 0x07
    36e2:	8c e5       	ldi	r24, 0x5C	; 92
    36e4:	92 e0       	ldi	r25, 0x02	; 2
    36e6:	99 83       	std	Y+1, r25	; 0x01
    36e8:	88 83       	st	Y, r24
    36ea:	1f 8a       	std	Y+23, r1	; 0x17
    36ec:	1e 8a       	std	Y+22, r1	; 0x16
    36ee:	19 8e       	std	Y+25, r1	; 0x19
    36f0:	18 8e       	std	Y+24, r1	; 0x18
    36f2:	1b 8e       	std	Y+27, r1	; 0x1b
    36f4:	1a 8e       	std	Y+26, r1	; 0x1a
    36f6:	1d 8e       	std	Y+29, r1	; 0x1d
    36f8:	1c 8e       	std	Y+28, r1	; 0x1c
    36fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36fc:	8e 7f       	andi	r24, 0xFE	; 254
    36fe:	20 fb       	bst	r18, 0
    3700:	81 f9       	bld	r24, 1
    3702:	8e 8f       	std	Y+30, r24	; 0x1e
    3704:	64 2f       	mov	r22, r20
    3706:	ce 01       	movw	r24, r28
    3708:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN14SoftwareSerial5setTXEh>
    370c:	61 2f       	mov	r22, r17
    370e:	ce 01       	movw	r24, r28
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	1f 91       	pop	r17
    3716:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <_ZN14SoftwareSerial5setRXEh>

0000371a <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	ec 01       	movw	r28, r24
    3720:	9a 01       	movw	r18, r20
    3722:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3724:	1b 8e       	std	Y+27, r1	; 0x1b
    3726:	1a 8e       	std	Y+26, r1	; 0x1a
    3728:	19 8e       	std	Y+25, r1	; 0x19
    372a:	18 8e       	std	Y+24, r1	; 0x18
    372c:	1f 8a       	std	Y+23, r1	; 0x17
    372e:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	79 e0       	ldi	r23, 0x09	; 9
    3734:	8d e3       	ldi	r24, 0x3D	; 61
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__divmodsi4>
    373c:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    373e:	24 30       	cpi	r18, 0x04	; 4
    3740:	31 05       	cpc	r19, r1
    3742:	18 f0       	brcs	.+6      	; 0x374a <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3744:	c9 01       	movw	r24, r18
    3746:	03 97       	sbiw	r24, 0x03	; 3
    3748:	02 c0       	rjmp	.+4      	; 0x374e <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    374e:	9d 8f       	std	Y+29, r25	; 0x1d
    3750:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3752:	6c 85       	ldd	r22, Y+12	; 0x0c
    3754:	66 31       	cpi	r22, 0x16	; 22
    3756:	08 f0       	brcs	.+2      	; 0x375a <_ZN14SoftwareSerial5beginEl+0x40>
    3758:	69 c0       	rjmp	.+210    	; 0x382c <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    375a:	c9 01       	movw	r24, r18
    375c:	96 95       	lsr	r25
    375e:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3760:	84 31       	cpi	r24, 0x14	; 20
    3762:	91 05       	cpc	r25, r1
    3764:	10 f0       	brcs	.+4      	; 0x376a <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3766:	43 97       	sbiw	r24, 0x13	; 19
    3768:	02 c0       	rjmp	.+4      	; 0x376e <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    376e:	9f 8b       	std	Y+23, r25	; 0x17
    3770:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3772:	36 97       	sbiw	r30, 0x06	; 6
    3774:	18 f0       	brcs	.+6      	; 0x377c <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3776:	c9 01       	movw	r24, r18
    3778:	05 97       	sbiw	r24, 0x05	; 5
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3780:	99 8f       	std	Y+25, r25	; 0x19
    3782:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3784:	c9 01       	movw	r24, r18
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	28 0f       	add	r18, r24
    378c:	39 1f       	adc	r19, r25
    378e:	36 95       	lsr	r19
    3790:	27 95       	ror	r18
    3792:	36 95       	lsr	r19
    3794:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3796:	2d 30       	cpi	r18, 0x0D	; 13
    3798:	31 05       	cpc	r19, r1
    379a:	18 f0       	brcs	.+6      	; 0x37a2 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    379c:	2c 50       	subi	r18, 0x0C	; 12
    379e:	31 09       	sbc	r19, r1
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    37a2:	21 e0       	ldi	r18, 0x01	; 1
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    37a6:	3b 8f       	std	Y+27, r19	; 0x1b
    37a8:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    37aa:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    37ae:	68 30       	cpi	r22, 0x08	; 8
    37b0:	50 f0       	brcs	.+20     	; 0x37c6 <_ZN14SoftwareSerial5beginEl+0xac>
    37b2:	21 e0       	ldi	r18, 0x01	; 1
    37b4:	6e 30       	cpi	r22, 0x0E	; 14
    37b6:	08 f4       	brcc	.+2      	; 0x37ba <_ZN14SoftwareSerial5beginEl+0xa0>
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <_ZN14SoftwareSerial5beginEl+0xa6>
    37be:	88 0f       	add	r24, r24
    37c0:	2a 95       	dec	r18
    37c2:	ea f7       	brpl	.-6      	; 0x37be <_ZN14SoftwareSerial5beginEl+0xa4>
    37c4:	01 c0       	rjmp	.+2      	; 0x37c8 <_ZN14SoftwareSerial5beginEl+0xae>
    37c6:	84 e0       	ldi	r24, 0x04	; 4
    37c8:	89 2b       	or	r24, r25
    37ca:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    37ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    37d0:	98 30       	cpi	r25, 0x08	; 8
    37d2:	38 f0       	brcs	.+14     	; 0x37e2 <_ZN14SoftwareSerial5beginEl+0xc8>
    37d4:	9e 30       	cpi	r25, 0x0E	; 14
    37d6:	40 f0       	brcs	.+16     	; 0x37e8 <_ZN14SoftwareSerial5beginEl+0xce>
    37d8:	96 31       	cpi	r25, 0x16	; 22
    37da:	48 f0       	brcs	.+18     	; 0x37ee <_ZN14SoftwareSerial5beginEl+0xd4>
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	08 c0       	rjmp	.+16     	; 0x37f2 <_ZN14SoftwareSerial5beginEl+0xd8>
    37e2:	2d e6       	ldi	r18, 0x6D	; 109
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	05 c0       	rjmp	.+10     	; 0x37f2 <_ZN14SoftwareSerial5beginEl+0xd8>
    37e8:	2b e6       	ldi	r18, 0x6B	; 107
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	02 c0       	rjmp	.+4      	; 0x37f2 <_ZN14SoftwareSerial5beginEl+0xd8>
    37ee:	2c e6       	ldi	r18, 0x6C	; 108
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	3c 8b       	std	Y+20, r19	; 0x14
    37f4:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    37f6:	98 30       	cpi	r25, 0x08	; 8
    37f8:	30 f4       	brcc	.+12     	; 0x3806 <_ZN14SoftwareSerial5beginEl+0xec>
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	01 c0       	rjmp	.+2      	; 0x3800 <_ZN14SoftwareSerial5beginEl+0xe6>
    37fe:	88 0f       	add	r24, r24
    3800:	9a 95       	dec	r25
    3802:	ea f7       	brpl	.-6      	; 0x37fe <_ZN14SoftwareSerial5beginEl+0xe4>
    3804:	0e c0       	rjmp	.+28     	; 0x3822 <_ZN14SoftwareSerial5beginEl+0x108>
    3806:	29 2f       	mov	r18, r25
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	9e 30       	cpi	r25, 0x0E	; 14
    380c:	18 f4       	brcc	.+6      	; 0x3814 <_ZN14SoftwareSerial5beginEl+0xfa>
    380e:	28 50       	subi	r18, 0x08	; 8
    3810:	31 09       	sbc	r19, r1
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <_ZN14SoftwareSerial5beginEl+0xfe>
    3814:	2e 50       	subi	r18, 0x0E	; 14
    3816:	31 09       	sbc	r19, r1
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	01 c0       	rjmp	.+2      	; 0x381e <_ZN14SoftwareSerial5beginEl+0x104>
    381c:	88 0f       	add	r24, r24
    381e:	2a 95       	dec	r18
    3820:	ea f7       	brpl	.-6      	; 0x381c <_ZN14SoftwareSerial5beginEl+0x102>
    3822:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3824:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3826:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    382c:	ce 01       	movw	r24, r28
}
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3832:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <_ZN14SoftwareSerial6listenEv>

00003836 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3836:	08 95       	ret

00003838 <__udivmodqi4>:
    3838:	99 1b       	sub	r25, r25
    383a:	79 e0       	ldi	r23, 0x09	; 9
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <__udivmodqi4_ep>

0000383e <__udivmodqi4_loop>:
    383e:	99 1f       	adc	r25, r25
    3840:	96 17       	cp	r25, r22
    3842:	08 f0       	brcs	.+2      	; 0x3846 <__udivmodqi4_ep>
    3844:	96 1b       	sub	r25, r22

00003846 <__udivmodqi4_ep>:
    3846:	88 1f       	adc	r24, r24
    3848:	7a 95       	dec	r23
    384a:	c9 f7       	brne	.-14     	; 0x383e <__udivmodqi4_loop>
    384c:	80 95       	com	r24
    384e:	08 95       	ret

00003850 <__divmodhi4>:
    3850:	97 fb       	bst	r25, 7
    3852:	07 2e       	mov	r0, r23
    3854:	16 f4       	brtc	.+4      	; 0x385a <__divmodhi4+0xa>
    3856:	00 94       	com	r0
    3858:	07 d0       	rcall	.+14     	; 0x3868 <__divmodhi4_neg1>
    385a:	77 fd       	sbrc	r23, 7
    385c:	09 d0       	rcall	.+18     	; 0x3870 <__divmodhi4_neg2>
    385e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__udivmodhi4>
    3862:	07 fc       	sbrc	r0, 7
    3864:	05 d0       	rcall	.+10     	; 0x3870 <__divmodhi4_neg2>
    3866:	3e f4       	brtc	.+14     	; 0x3876 <__divmodhi4_exit>

00003868 <__divmodhi4_neg1>:
    3868:	90 95       	com	r25
    386a:	81 95       	neg	r24
    386c:	9f 4f       	sbci	r25, 0xFF	; 255
    386e:	08 95       	ret

00003870 <__divmodhi4_neg2>:
    3870:	70 95       	com	r23
    3872:	61 95       	neg	r22
    3874:	7f 4f       	sbci	r23, 0xFF	; 255

00003876 <__divmodhi4_exit>:
    3876:	08 95       	ret

00003878 <__udivmodsi4>:
    3878:	a1 e2       	ldi	r26, 0x21	; 33
    387a:	1a 2e       	mov	r1, r26
    387c:	aa 1b       	sub	r26, r26
    387e:	bb 1b       	sub	r27, r27
    3880:	fd 01       	movw	r30, r26
    3882:	0d c0       	rjmp	.+26     	; 0x389e <__udivmodsi4_ep>

00003884 <__udivmodsi4_loop>:
    3884:	aa 1f       	adc	r26, r26
    3886:	bb 1f       	adc	r27, r27
    3888:	ee 1f       	adc	r30, r30
    388a:	ff 1f       	adc	r31, r31
    388c:	a2 17       	cp	r26, r18
    388e:	b3 07       	cpc	r27, r19
    3890:	e4 07       	cpc	r30, r20
    3892:	f5 07       	cpc	r31, r21
    3894:	20 f0       	brcs	.+8      	; 0x389e <__udivmodsi4_ep>
    3896:	a2 1b       	sub	r26, r18
    3898:	b3 0b       	sbc	r27, r19
    389a:	e4 0b       	sbc	r30, r20
    389c:	f5 0b       	sbc	r31, r21

0000389e <__udivmodsi4_ep>:
    389e:	66 1f       	adc	r22, r22
    38a0:	77 1f       	adc	r23, r23
    38a2:	88 1f       	adc	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	1a 94       	dec	r1
    38a8:	69 f7       	brne	.-38     	; 0x3884 <__udivmodsi4_loop>
    38aa:	60 95       	com	r22
    38ac:	70 95       	com	r23
    38ae:	80 95       	com	r24
    38b0:	90 95       	com	r25
    38b2:	9b 01       	movw	r18, r22
    38b4:	ac 01       	movw	r20, r24
    38b6:	bd 01       	movw	r22, r26
    38b8:	cf 01       	movw	r24, r30
    38ba:	08 95       	ret

000038bc <__divmodsi4>:
    38bc:	05 2e       	mov	r0, r21
    38be:	97 fb       	bst	r25, 7
    38c0:	1e f4       	brtc	.+6      	; 0x38c8 <__divmodsi4+0xc>
    38c2:	00 94       	com	r0
    38c4:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__negsi2>
    38c8:	57 fd       	sbrc	r21, 7
    38ca:	07 d0       	rcall	.+14     	; 0x38da <__divmodsi4_neg2>
    38cc:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__udivmodsi4>
    38d0:	07 fc       	sbrc	r0, 7
    38d2:	03 d0       	rcall	.+6      	; 0x38da <__divmodsi4_neg2>
    38d4:	4e f4       	brtc	.+18     	; 0x38e8 <__divmodsi4_exit>
    38d6:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__negsi2>

000038da <__divmodsi4_neg2>:
    38da:	50 95       	com	r21
    38dc:	40 95       	com	r20
    38de:	30 95       	com	r19
    38e0:	21 95       	neg	r18
    38e2:	3f 4f       	sbci	r19, 0xFF	; 255
    38e4:	4f 4f       	sbci	r20, 0xFF	; 255
    38e6:	5f 4f       	sbci	r21, 0xFF	; 255

000038e8 <__divmodsi4_exit>:
    38e8:	08 95       	ret

000038ea <__negsi2>:
    38ea:	90 95       	com	r25
    38ec:	80 95       	com	r24
    38ee:	70 95       	com	r23
    38f0:	61 95       	neg	r22
    38f2:	7f 4f       	sbci	r23, 0xFF	; 255
    38f4:	8f 4f       	sbci	r24, 0xFF	; 255
    38f6:	9f 4f       	sbci	r25, 0xFF	; 255
    38f8:	08 95       	ret

000038fa <__udivmodhi4>:
    38fa:	aa 1b       	sub	r26, r26
    38fc:	bb 1b       	sub	r27, r27
    38fe:	51 e1       	ldi	r21, 0x11	; 17
    3900:	07 c0       	rjmp	.+14     	; 0x3910 <__udivmodhi4_ep>

00003902 <__udivmodhi4_loop>:
    3902:	aa 1f       	adc	r26, r26
    3904:	bb 1f       	adc	r27, r27
    3906:	a6 17       	cp	r26, r22
    3908:	b7 07       	cpc	r27, r23
    390a:	10 f0       	brcs	.+4      	; 0x3910 <__udivmodhi4_ep>
    390c:	a6 1b       	sub	r26, r22
    390e:	b7 0b       	sbc	r27, r23

00003910 <__udivmodhi4_ep>:
    3910:	88 1f       	adc	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	5a 95       	dec	r21
    3916:	a9 f7       	brne	.-22     	; 0x3902 <__udivmodhi4_loop>
    3918:	80 95       	com	r24
    391a:	90 95       	com	r25
    391c:	bc 01       	movw	r22, r24
    391e:	cd 01       	movw	r24, r26
    3920:	08 95       	ret

00003922 <__tablejump2__>:
    3922:	ee 0f       	add	r30, r30
    3924:	ff 1f       	adc	r31, r31
    3926:	05 90       	lpm	r0, Z+
    3928:	f4 91       	lpm	r31, Z
    392a:	e0 2d       	mov	r30, r0
    392c:	09 94       	ijmp

0000392e <malloc>:
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
    3936:	82 30       	cpi	r24, 0x02	; 2
    3938:	91 05       	cpc	r25, r1
    393a:	10 f4       	brcc	.+4      	; 0x3940 <malloc+0x12>
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	e0 91 47 05 	lds	r30, 0x0547	; 0x800547 <__flp>
    3944:	f0 91 48 05 	lds	r31, 0x0548	; 0x800548 <__flp+0x1>
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	a0 e0       	ldi	r26, 0x00	; 0
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	30 97       	sbiw	r30, 0x00	; 0
    3952:	19 f1       	breq	.+70     	; 0x399a <malloc+0x6c>
    3954:	40 81       	ld	r20, Z
    3956:	51 81       	ldd	r21, Z+1	; 0x01
    3958:	02 81       	ldd	r16, Z+2	; 0x02
    395a:	13 81       	ldd	r17, Z+3	; 0x03
    395c:	48 17       	cp	r20, r24
    395e:	59 07       	cpc	r21, r25
    3960:	c8 f0       	brcs	.+50     	; 0x3994 <malloc+0x66>
    3962:	84 17       	cp	r24, r20
    3964:	95 07       	cpc	r25, r21
    3966:	69 f4       	brne	.+26     	; 0x3982 <malloc+0x54>
    3968:	10 97       	sbiw	r26, 0x00	; 0
    396a:	31 f0       	breq	.+12     	; 0x3978 <malloc+0x4a>
    396c:	12 96       	adiw	r26, 0x02	; 2
    396e:	0c 93       	st	X, r16
    3970:	12 97       	sbiw	r26, 0x02	; 2
    3972:	13 96       	adiw	r26, 0x03	; 3
    3974:	1c 93       	st	X, r17
    3976:	27 c0       	rjmp	.+78     	; 0x39c6 <malloc+0x98>
    3978:	00 93 47 05 	sts	0x0547, r16	; 0x800547 <__flp>
    397c:	10 93 48 05 	sts	0x0548, r17	; 0x800548 <__flp+0x1>
    3980:	22 c0       	rjmp	.+68     	; 0x39c6 <malloc+0x98>
    3982:	21 15       	cp	r18, r1
    3984:	31 05       	cpc	r19, r1
    3986:	19 f0       	breq	.+6      	; 0x398e <malloc+0x60>
    3988:	42 17       	cp	r20, r18
    398a:	53 07       	cpc	r21, r19
    398c:	18 f4       	brcc	.+6      	; 0x3994 <malloc+0x66>
    398e:	9a 01       	movw	r18, r20
    3990:	bd 01       	movw	r22, r26
    3992:	ef 01       	movw	r28, r30
    3994:	df 01       	movw	r26, r30
    3996:	f8 01       	movw	r30, r16
    3998:	db cf       	rjmp	.-74     	; 0x3950 <malloc+0x22>
    399a:	21 15       	cp	r18, r1
    399c:	31 05       	cpc	r19, r1
    399e:	f9 f0       	breq	.+62     	; 0x39de <malloc+0xb0>
    39a0:	28 1b       	sub	r18, r24
    39a2:	39 0b       	sbc	r19, r25
    39a4:	24 30       	cpi	r18, 0x04	; 4
    39a6:	31 05       	cpc	r19, r1
    39a8:	80 f4       	brcc	.+32     	; 0x39ca <malloc+0x9c>
    39aa:	8a 81       	ldd	r24, Y+2	; 0x02
    39ac:	9b 81       	ldd	r25, Y+3	; 0x03
    39ae:	61 15       	cp	r22, r1
    39b0:	71 05       	cpc	r23, r1
    39b2:	21 f0       	breq	.+8      	; 0x39bc <malloc+0x8e>
    39b4:	fb 01       	movw	r30, r22
    39b6:	93 83       	std	Z+3, r25	; 0x03
    39b8:	82 83       	std	Z+2, r24	; 0x02
    39ba:	04 c0       	rjmp	.+8      	; 0x39c4 <malloc+0x96>
    39bc:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <__flp+0x1>
    39c0:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <__flp>
    39c4:	fe 01       	movw	r30, r28
    39c6:	32 96       	adiw	r30, 0x02	; 2
    39c8:	44 c0       	rjmp	.+136    	; 0x3a52 <malloc+0x124>
    39ca:	fe 01       	movw	r30, r28
    39cc:	e2 0f       	add	r30, r18
    39ce:	f3 1f       	adc	r31, r19
    39d0:	81 93       	st	Z+, r24
    39d2:	91 93       	st	Z+, r25
    39d4:	22 50       	subi	r18, 0x02	; 2
    39d6:	31 09       	sbc	r19, r1
    39d8:	39 83       	std	Y+1, r19	; 0x01
    39da:	28 83       	st	Y, r18
    39dc:	3a c0       	rjmp	.+116    	; 0x3a52 <malloc+0x124>
    39de:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <__brkval>
    39e2:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <__brkval+0x1>
    39e6:	23 2b       	or	r18, r19
    39e8:	41 f4       	brne	.+16     	; 0x39fa <malloc+0xcc>
    39ea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    39ee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    39f2:	30 93 46 05 	sts	0x0546, r19	; 0x800546 <__brkval+0x1>
    39f6:	20 93 45 05 	sts	0x0545, r18	; 0x800545 <__brkval>
    39fa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    39fe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a02:	21 15       	cp	r18, r1
    3a04:	31 05       	cpc	r19, r1
    3a06:	41 f4       	brne	.+16     	; 0x3a18 <malloc+0xea>
    3a08:	2d b7       	in	r18, 0x3d	; 61
    3a0a:	3e b7       	in	r19, 0x3e	; 62
    3a0c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a10:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a14:	24 1b       	sub	r18, r20
    3a16:	35 0b       	sbc	r19, r21
    3a18:	e0 91 45 05 	lds	r30, 0x0545	; 0x800545 <__brkval>
    3a1c:	f0 91 46 05 	lds	r31, 0x0546	; 0x800546 <__brkval+0x1>
    3a20:	e2 17       	cp	r30, r18
    3a22:	f3 07       	cpc	r31, r19
    3a24:	a0 f4       	brcc	.+40     	; 0x3a4e <malloc+0x120>
    3a26:	2e 1b       	sub	r18, r30
    3a28:	3f 0b       	sbc	r19, r31
    3a2a:	28 17       	cp	r18, r24
    3a2c:	39 07       	cpc	r19, r25
    3a2e:	78 f0       	brcs	.+30     	; 0x3a4e <malloc+0x120>
    3a30:	ac 01       	movw	r20, r24
    3a32:	4e 5f       	subi	r20, 0xFE	; 254
    3a34:	5f 4f       	sbci	r21, 0xFF	; 255
    3a36:	24 17       	cp	r18, r20
    3a38:	35 07       	cpc	r19, r21
    3a3a:	48 f0       	brcs	.+18     	; 0x3a4e <malloc+0x120>
    3a3c:	4e 0f       	add	r20, r30
    3a3e:	5f 1f       	adc	r21, r31
    3a40:	50 93 46 05 	sts	0x0546, r21	; 0x800546 <__brkval+0x1>
    3a44:	40 93 45 05 	sts	0x0545, r20	; 0x800545 <__brkval>
    3a48:	81 93       	st	Z+, r24
    3a4a:	91 93       	st	Z+, r25
    3a4c:	02 c0       	rjmp	.+4      	; 0x3a52 <malloc+0x124>
    3a4e:	e0 e0       	ldi	r30, 0x00	; 0
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	cf 01       	movw	r24, r30
    3a54:	df 91       	pop	r29
    3a56:	cf 91       	pop	r28
    3a58:	1f 91       	pop	r17
    3a5a:	0f 91       	pop	r16
    3a5c:	08 95       	ret

00003a5e <free>:
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	09 f4       	brne	.+2      	; 0x3a68 <free+0xa>
    3a66:	81 c0       	rjmp	.+258    	; 0x3b6a <free+0x10c>
    3a68:	fc 01       	movw	r30, r24
    3a6a:	32 97       	sbiw	r30, 0x02	; 2
    3a6c:	13 82       	std	Z+3, r1	; 0x03
    3a6e:	12 82       	std	Z+2, r1	; 0x02
    3a70:	a0 91 47 05 	lds	r26, 0x0547	; 0x800547 <__flp>
    3a74:	b0 91 48 05 	lds	r27, 0x0548	; 0x800548 <__flp+0x1>
    3a78:	10 97       	sbiw	r26, 0x00	; 0
    3a7a:	81 f4       	brne	.+32     	; 0x3a9c <free+0x3e>
    3a7c:	20 81       	ld	r18, Z
    3a7e:	31 81       	ldd	r19, Z+1	; 0x01
    3a80:	82 0f       	add	r24, r18
    3a82:	93 1f       	adc	r25, r19
    3a84:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <__brkval>
    3a88:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <__brkval+0x1>
    3a8c:	28 17       	cp	r18, r24
    3a8e:	39 07       	cpc	r19, r25
    3a90:	51 f5       	brne	.+84     	; 0x3ae6 <free+0x88>
    3a92:	f0 93 46 05 	sts	0x0546, r31	; 0x800546 <__brkval+0x1>
    3a96:	e0 93 45 05 	sts	0x0545, r30	; 0x800545 <__brkval>
    3a9a:	67 c0       	rjmp	.+206    	; 0x3b6a <free+0x10c>
    3a9c:	ed 01       	movw	r28, r26
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	ce 17       	cp	r28, r30
    3aa4:	df 07       	cpc	r29, r31
    3aa6:	40 f4       	brcc	.+16     	; 0x3ab8 <free+0x5a>
    3aa8:	4a 81       	ldd	r20, Y+2	; 0x02
    3aaa:	5b 81       	ldd	r21, Y+3	; 0x03
    3aac:	9e 01       	movw	r18, r28
    3aae:	41 15       	cp	r20, r1
    3ab0:	51 05       	cpc	r21, r1
    3ab2:	f1 f0       	breq	.+60     	; 0x3af0 <free+0x92>
    3ab4:	ea 01       	movw	r28, r20
    3ab6:	f5 cf       	rjmp	.-22     	; 0x3aa2 <free+0x44>
    3ab8:	d3 83       	std	Z+3, r29	; 0x03
    3aba:	c2 83       	std	Z+2, r28	; 0x02
    3abc:	40 81       	ld	r20, Z
    3abe:	51 81       	ldd	r21, Z+1	; 0x01
    3ac0:	84 0f       	add	r24, r20
    3ac2:	95 1f       	adc	r25, r21
    3ac4:	c8 17       	cp	r28, r24
    3ac6:	d9 07       	cpc	r29, r25
    3ac8:	59 f4       	brne	.+22     	; 0x3ae0 <free+0x82>
    3aca:	88 81       	ld	r24, Y
    3acc:	99 81       	ldd	r25, Y+1	; 0x01
    3ace:	84 0f       	add	r24, r20
    3ad0:	95 1f       	adc	r25, r21
    3ad2:	02 96       	adiw	r24, 0x02	; 2
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ada:	9b 81       	ldd	r25, Y+3	; 0x03
    3adc:	93 83       	std	Z+3, r25	; 0x03
    3ade:	82 83       	std	Z+2, r24	; 0x02
    3ae0:	21 15       	cp	r18, r1
    3ae2:	31 05       	cpc	r19, r1
    3ae4:	29 f4       	brne	.+10     	; 0x3af0 <free+0x92>
    3ae6:	f0 93 48 05 	sts	0x0548, r31	; 0x800548 <__flp+0x1>
    3aea:	e0 93 47 05 	sts	0x0547, r30	; 0x800547 <__flp>
    3aee:	3d c0       	rjmp	.+122    	; 0x3b6a <free+0x10c>
    3af0:	e9 01       	movw	r28, r18
    3af2:	fb 83       	std	Y+3, r31	; 0x03
    3af4:	ea 83       	std	Y+2, r30	; 0x02
    3af6:	49 91       	ld	r20, Y+
    3af8:	59 91       	ld	r21, Y+
    3afa:	c4 0f       	add	r28, r20
    3afc:	d5 1f       	adc	r29, r21
    3afe:	ec 17       	cp	r30, r28
    3b00:	fd 07       	cpc	r31, r29
    3b02:	61 f4       	brne	.+24     	; 0x3b1c <free+0xbe>
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	84 0f       	add	r24, r20
    3b0a:	95 1f       	adc	r25, r21
    3b0c:	02 96       	adiw	r24, 0x02	; 2
    3b0e:	e9 01       	movw	r28, r18
    3b10:	99 83       	std	Y+1, r25	; 0x01
    3b12:	88 83       	st	Y, r24
    3b14:	82 81       	ldd	r24, Z+2	; 0x02
    3b16:	93 81       	ldd	r25, Z+3	; 0x03
    3b18:	9b 83       	std	Y+3, r25	; 0x03
    3b1a:	8a 83       	std	Y+2, r24	; 0x02
    3b1c:	e0 e0       	ldi	r30, 0x00	; 0
    3b1e:	f0 e0       	ldi	r31, 0x00	; 0
    3b20:	12 96       	adiw	r26, 0x02	; 2
    3b22:	8d 91       	ld	r24, X+
    3b24:	9c 91       	ld	r25, X
    3b26:	13 97       	sbiw	r26, 0x03	; 3
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	19 f0       	breq	.+6      	; 0x3b32 <free+0xd4>
    3b2c:	fd 01       	movw	r30, r26
    3b2e:	dc 01       	movw	r26, r24
    3b30:	f7 cf       	rjmp	.-18     	; 0x3b20 <free+0xc2>
    3b32:	8d 91       	ld	r24, X+
    3b34:	9c 91       	ld	r25, X
    3b36:	11 97       	sbiw	r26, 0x01	; 1
    3b38:	9d 01       	movw	r18, r26
    3b3a:	2e 5f       	subi	r18, 0xFE	; 254
    3b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b3e:	82 0f       	add	r24, r18
    3b40:	93 1f       	adc	r25, r19
    3b42:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <__brkval>
    3b46:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <__brkval+0x1>
    3b4a:	28 17       	cp	r18, r24
    3b4c:	39 07       	cpc	r19, r25
    3b4e:	69 f4       	brne	.+26     	; 0x3b6a <free+0x10c>
    3b50:	30 97       	sbiw	r30, 0x00	; 0
    3b52:	29 f4       	brne	.+10     	; 0x3b5e <free+0x100>
    3b54:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <__flp+0x1>
    3b58:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <__flp>
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <free+0x104>
    3b5e:	13 82       	std	Z+3, r1	; 0x03
    3b60:	12 82       	std	Z+2, r1	; 0x02
    3b62:	b0 93 46 05 	sts	0x0546, r27	; 0x800546 <__brkval+0x1>
    3b66:	a0 93 45 05 	sts	0x0545, r26	; 0x800545 <__brkval>
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	08 95       	ret

00003b70 <realloc>:
    3b70:	a0 e0       	ldi	r26, 0x00	; 0
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	ee eb       	ldi	r30, 0xBE	; 190
    3b76:	fd e1       	ldi	r31, 0x1D	; 29
    3b78:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <__prologue_saves__+0x8>
    3b7c:	ec 01       	movw	r28, r24
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	21 f4       	brne	.+8      	; 0x3b8a <realloc+0x1a>
    3b82:	cb 01       	movw	r24, r22
    3b84:	0e 94 97 1c 	call	0x392e	; 0x392e <malloc>
    3b88:	b4 c0       	rjmp	.+360    	; 0x3cf2 <realloc+0x182>
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	e6 0f       	add	r30, r22
    3b8e:	f7 1f       	adc	r31, r23
    3b90:	9c 01       	movw	r18, r24
    3b92:	22 50       	subi	r18, 0x02	; 2
    3b94:	31 09       	sbc	r19, r1
    3b96:	e2 17       	cp	r30, r18
    3b98:	f3 07       	cpc	r31, r19
    3b9a:	08 f4       	brcc	.+2      	; 0x3b9e <realloc+0x2e>
    3b9c:	a8 c0       	rjmp	.+336    	; 0x3cee <realloc+0x17e>
    3b9e:	d9 01       	movw	r26, r18
    3ba0:	0d 91       	ld	r16, X+
    3ba2:	1c 91       	ld	r17, X
    3ba4:	11 97       	sbiw	r26, 0x01	; 1
    3ba6:	06 17       	cp	r16, r22
    3ba8:	17 07       	cpc	r17, r23
    3baa:	b0 f0       	brcs	.+44     	; 0x3bd8 <realloc+0x68>
    3bac:	05 30       	cpi	r16, 0x05	; 5
    3bae:	11 05       	cpc	r17, r1
    3bb0:	08 f4       	brcc	.+2      	; 0x3bb4 <realloc+0x44>
    3bb2:	9b c0       	rjmp	.+310    	; 0x3cea <realloc+0x17a>
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	04 97       	sbiw	r24, 0x04	; 4
    3bb8:	86 17       	cp	r24, r22
    3bba:	97 07       	cpc	r25, r23
    3bbc:	08 f4       	brcc	.+2      	; 0x3bc0 <realloc+0x50>
    3bbe:	95 c0       	rjmp	.+298    	; 0x3cea <realloc+0x17a>
    3bc0:	02 50       	subi	r16, 0x02	; 2
    3bc2:	11 09       	sbc	r17, r1
    3bc4:	06 1b       	sub	r16, r22
    3bc6:	17 0b       	sbc	r17, r23
    3bc8:	01 93       	st	Z+, r16
    3bca:	11 93       	st	Z+, r17
    3bcc:	6d 93       	st	X+, r22
    3bce:	7c 93       	st	X, r23
    3bd0:	cf 01       	movw	r24, r30
    3bd2:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <free>
    3bd6:	89 c0       	rjmp	.+274    	; 0x3cea <realloc+0x17a>
    3bd8:	5b 01       	movw	r10, r22
    3bda:	a0 1a       	sub	r10, r16
    3bdc:	b1 0a       	sbc	r11, r17
    3bde:	4c 01       	movw	r8, r24
    3be0:	80 0e       	add	r8, r16
    3be2:	91 1e       	adc	r9, r17
    3be4:	a0 91 47 05 	lds	r26, 0x0547	; 0x800547 <__flp>
    3be8:	b0 91 48 05 	lds	r27, 0x0548	; 0x800548 <__flp+0x1>
    3bec:	61 2c       	mov	r6, r1
    3bee:	71 2c       	mov	r7, r1
    3bf0:	e1 2c       	mov	r14, r1
    3bf2:	f1 2c       	mov	r15, r1
    3bf4:	10 97       	sbiw	r26, 0x00	; 0
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <realloc+0x8a>
    3bf8:	46 c0       	rjmp	.+140    	; 0x3c86 <realloc+0x116>
    3bfa:	8d 91       	ld	r24, X+
    3bfc:	9c 91       	ld	r25, X
    3bfe:	11 97       	sbiw	r26, 0x01	; 1
    3c00:	a8 15       	cp	r26, r8
    3c02:	b9 05       	cpc	r27, r9
    3c04:	b1 f5       	brne	.+108    	; 0x3c72 <realloc+0x102>
    3c06:	6c 01       	movw	r12, r24
    3c08:	42 e0       	ldi	r20, 0x02	; 2
    3c0a:	c4 0e       	add	r12, r20
    3c0c:	d1 1c       	adc	r13, r1
    3c0e:	ca 14       	cp	r12, r10
    3c10:	db 04       	cpc	r13, r11
    3c12:	78 f1       	brcs	.+94     	; 0x3c72 <realloc+0x102>
    3c14:	4c 01       	movw	r8, r24
    3c16:	8a 18       	sub	r8, r10
    3c18:	9b 08       	sbc	r9, r11
    3c1a:	64 01       	movw	r12, r8
    3c1c:	42 e0       	ldi	r20, 0x02	; 2
    3c1e:	c4 0e       	add	r12, r20
    3c20:	d1 1c       	adc	r13, r1
    3c22:	12 96       	adiw	r26, 0x02	; 2
    3c24:	bc 90       	ld	r11, X
    3c26:	12 97       	sbiw	r26, 0x02	; 2
    3c28:	13 96       	adiw	r26, 0x03	; 3
    3c2a:	ac 91       	ld	r26, X
    3c2c:	b5 e0       	ldi	r27, 0x05	; 5
    3c2e:	cb 16       	cp	r12, r27
    3c30:	d1 04       	cpc	r13, r1
    3c32:	40 f0       	brcs	.+16     	; 0x3c44 <realloc+0xd4>
    3c34:	b2 82       	std	Z+2, r11	; 0x02
    3c36:	a3 83       	std	Z+3, r26	; 0x03
    3c38:	91 82       	std	Z+1, r9	; 0x01
    3c3a:	80 82       	st	Z, r8
    3c3c:	d9 01       	movw	r26, r18
    3c3e:	6d 93       	st	X+, r22
    3c40:	7c 93       	st	X, r23
    3c42:	09 c0       	rjmp	.+18     	; 0x3c56 <realloc+0xe6>
    3c44:	0e 5f       	subi	r16, 0xFE	; 254
    3c46:	1f 4f       	sbci	r17, 0xFF	; 255
    3c48:	80 0f       	add	r24, r16
    3c4a:	91 1f       	adc	r25, r17
    3c4c:	f9 01       	movw	r30, r18
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
    3c52:	eb 2d       	mov	r30, r11
    3c54:	fa 2f       	mov	r31, r26
    3c56:	e1 14       	cp	r14, r1
    3c58:	f1 04       	cpc	r15, r1
    3c5a:	31 f0       	breq	.+12     	; 0x3c68 <realloc+0xf8>
    3c5c:	d7 01       	movw	r26, r14
    3c5e:	13 96       	adiw	r26, 0x03	; 3
    3c60:	fc 93       	st	X, r31
    3c62:	ee 93       	st	-X, r30
    3c64:	12 97       	sbiw	r26, 0x02	; 2
    3c66:	41 c0       	rjmp	.+130    	; 0x3cea <realloc+0x17a>
    3c68:	f0 93 48 05 	sts	0x0548, r31	; 0x800548 <__flp+0x1>
    3c6c:	e0 93 47 05 	sts	0x0547, r30	; 0x800547 <__flp>
    3c70:	3c c0       	rjmp	.+120    	; 0x3cea <realloc+0x17a>
    3c72:	68 16       	cp	r6, r24
    3c74:	79 06       	cpc	r7, r25
    3c76:	08 f4       	brcc	.+2      	; 0x3c7a <realloc+0x10a>
    3c78:	3c 01       	movw	r6, r24
    3c7a:	7d 01       	movw	r14, r26
    3c7c:	12 96       	adiw	r26, 0x02	; 2
    3c7e:	0d 90       	ld	r0, X+
    3c80:	bc 91       	ld	r27, X
    3c82:	a0 2d       	mov	r26, r0
    3c84:	b7 cf       	rjmp	.-146    	; 0x3bf4 <realloc+0x84>
    3c86:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <__brkval>
    3c8a:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <__brkval+0x1>
    3c8e:	88 16       	cp	r8, r24
    3c90:	99 06       	cpc	r9, r25
    3c92:	e1 f4       	brne	.+56     	; 0x3ccc <realloc+0x15c>
    3c94:	66 16       	cp	r6, r22
    3c96:	77 06       	cpc	r7, r23
    3c98:	c8 f4       	brcc	.+50     	; 0x3ccc <realloc+0x15c>
    3c9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3c9e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3ca2:	00 97       	sbiw	r24, 0x00	; 0
    3ca4:	41 f4       	brne	.+16     	; 0x3cb6 <realloc+0x146>
    3ca6:	8d b7       	in	r24, 0x3d	; 61
    3ca8:	9e b7       	in	r25, 0x3e	; 62
    3caa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3cae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3cb2:	84 1b       	sub	r24, r20
    3cb4:	95 0b       	sbc	r25, r21
    3cb6:	e8 17       	cp	r30, r24
    3cb8:	f9 07       	cpc	r31, r25
    3cba:	c8 f4       	brcc	.+50     	; 0x3cee <realloc+0x17e>
    3cbc:	f0 93 46 05 	sts	0x0546, r31	; 0x800546 <__brkval+0x1>
    3cc0:	e0 93 45 05 	sts	0x0545, r30	; 0x800545 <__brkval>
    3cc4:	f9 01       	movw	r30, r18
    3cc6:	71 83       	std	Z+1, r23	; 0x01
    3cc8:	60 83       	st	Z, r22
    3cca:	0f c0       	rjmp	.+30     	; 0x3cea <realloc+0x17a>
    3ccc:	cb 01       	movw	r24, r22
    3cce:	0e 94 97 1c 	call	0x392e	; 0x392e <malloc>
    3cd2:	7c 01       	movw	r14, r24
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	59 f0       	breq	.+22     	; 0x3cee <realloc+0x17e>
    3cd8:	a8 01       	movw	r20, r16
    3cda:	be 01       	movw	r22, r28
    3cdc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <memcpy>
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <free>
    3ce6:	c7 01       	movw	r24, r14
    3ce8:	04 c0       	rjmp	.+8      	; 0x3cf2 <realloc+0x182>
    3cea:	ce 01       	movw	r24, r28
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <realloc+0x182>
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	ee e0       	ldi	r30, 0x0E	; 14
    3cf8:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__epilogue_restores__+0x8>

00003cfc <atoi>:
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	88 27       	eor	r24, r24
    3d00:	99 27       	eor	r25, r25
    3d02:	e8 94       	clt
    3d04:	21 91       	ld	r18, Z+
    3d06:	20 32       	cpi	r18, 0x20	; 32
    3d08:	e9 f3       	breq	.-6      	; 0x3d04 <atoi+0x8>
    3d0a:	29 30       	cpi	r18, 0x09	; 9
    3d0c:	10 f0       	brcs	.+4      	; 0x3d12 <atoi+0x16>
    3d0e:	2e 30       	cpi	r18, 0x0E	; 14
    3d10:	c8 f3       	brcs	.-14     	; 0x3d04 <atoi+0x8>
    3d12:	2b 32       	cpi	r18, 0x2B	; 43
    3d14:	41 f0       	breq	.+16     	; 0x3d26 <atoi+0x2a>
    3d16:	2d 32       	cpi	r18, 0x2D	; 45
    3d18:	39 f4       	brne	.+14     	; 0x3d28 <atoi+0x2c>
    3d1a:	68 94       	set
    3d1c:	04 c0       	rjmp	.+8      	; 0x3d26 <atoi+0x2a>
    3d1e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__mulhi_const_10>
    3d22:	82 0f       	add	r24, r18
    3d24:	91 1d       	adc	r25, r1
    3d26:	21 91       	ld	r18, Z+
    3d28:	20 53       	subi	r18, 0x30	; 48
    3d2a:	2a 30       	cpi	r18, 0x0A	; 10
    3d2c:	c0 f3       	brcs	.-16     	; 0x3d1e <atoi+0x22>
    3d2e:	1e f4       	brtc	.+6      	; 0x3d36 <atoi+0x3a>
    3d30:	90 95       	com	r25
    3d32:	81 95       	neg	r24
    3d34:	9f 4f       	sbci	r25, 0xFF	; 255
    3d36:	08 95       	ret

00003d38 <strcmp_P>:
    3d38:	fb 01       	movw	r30, r22
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	8d 91       	ld	r24, X+
    3d3e:	05 90       	lpm	r0, Z+
    3d40:	80 19       	sub	r24, r0
    3d42:	01 10       	cpse	r0, r1
    3d44:	d9 f3       	breq	.-10     	; 0x3d3c <strcmp_P+0x4>
    3d46:	99 0b       	sbc	r25, r25
    3d48:	08 95       	ret

00003d4a <__strlen_P>:
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	05 90       	lpm	r0, Z+
    3d4e:	00 20       	and	r0, r0
    3d50:	e9 f7       	brne	.-6      	; 0x3d4c <__strlen_P+0x2>
    3d52:	80 95       	com	r24
    3d54:	90 95       	com	r25
    3d56:	8e 0f       	add	r24, r30
    3d58:	9f 1f       	adc	r25, r31
    3d5a:	08 95       	ret

00003d5c <strstr_P>:
    3d5c:	fb 01       	movw	r30, r22
    3d5e:	55 91       	lpm	r21, Z+
    3d60:	55 23       	and	r21, r21
    3d62:	a9 f0       	breq	.+42     	; 0x3d8e <strstr_P+0x32>
    3d64:	bf 01       	movw	r22, r30
    3d66:	dc 01       	movw	r26, r24
    3d68:	4d 91       	ld	r20, X+
    3d6a:	45 17       	cp	r20, r21
    3d6c:	41 11       	cpse	r20, r1
    3d6e:	e1 f7       	brne	.-8      	; 0x3d68 <strstr_P+0xc>
    3d70:	59 f4       	brne	.+22     	; 0x3d88 <strstr_P+0x2c>
    3d72:	cd 01       	movw	r24, r26
    3d74:	05 90       	lpm	r0, Z+
    3d76:	00 20       	and	r0, r0
    3d78:	49 f0       	breq	.+18     	; 0x3d8c <strstr_P+0x30>
    3d7a:	4d 91       	ld	r20, X+
    3d7c:	40 15       	cp	r20, r0
    3d7e:	41 11       	cpse	r20, r1
    3d80:	c9 f3       	breq	.-14     	; 0x3d74 <strstr_P+0x18>
    3d82:	fb 01       	movw	r30, r22
    3d84:	41 11       	cpse	r20, r1
    3d86:	ef cf       	rjmp	.-34     	; 0x3d66 <strstr_P+0xa>
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	08 95       	ret

00003d90 <memcpy>:
    3d90:	fb 01       	movw	r30, r22
    3d92:	dc 01       	movw	r26, r24
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <memcpy+0xa>
    3d96:	01 90       	ld	r0, Z+
    3d98:	0d 92       	st	X+, r0
    3d9a:	41 50       	subi	r20, 0x01	; 1
    3d9c:	50 40       	sbci	r21, 0x00	; 0
    3d9e:	d8 f7       	brcc	.-10     	; 0x3d96 <memcpy+0x6>
    3da0:	08 95       	ret

00003da2 <strchr>:
    3da2:	fc 01       	movw	r30, r24
    3da4:	81 91       	ld	r24, Z+
    3da6:	86 17       	cp	r24, r22
    3da8:	21 f0       	breq	.+8      	; 0x3db2 <strchr+0x10>
    3daa:	88 23       	and	r24, r24
    3dac:	d9 f7       	brne	.-10     	; 0x3da4 <strchr+0x2>
    3dae:	99 27       	eor	r25, r25
    3db0:	08 95       	ret
    3db2:	31 97       	sbiw	r30, 0x01	; 1
    3db4:	cf 01       	movw	r24, r30
    3db6:	08 95       	ret

00003db8 <strcpy>:
    3db8:	fb 01       	movw	r30, r22
    3dba:	dc 01       	movw	r26, r24
    3dbc:	01 90       	ld	r0, Z+
    3dbe:	0d 92       	st	X+, r0
    3dc0:	00 20       	and	r0, r0
    3dc2:	e1 f7       	brne	.-8      	; 0x3dbc <strcpy+0x4>
    3dc4:	08 95       	ret

00003dc6 <__mulhi_const_10>:
    3dc6:	7a e0       	ldi	r23, 0x0A	; 10
    3dc8:	97 9f       	mul	r25, r23
    3dca:	90 2d       	mov	r25, r0
    3dcc:	87 9f       	mul	r24, r23
    3dce:	80 2d       	mov	r24, r0
    3dd0:	91 0d       	add	r25, r1
    3dd2:	11 24       	eor	r1, r1
    3dd4:	08 95       	ret

00003dd6 <__prologue_saves__>:
    3dd6:	2f 92       	push	r2
    3dd8:	3f 92       	push	r3
    3dda:	4f 92       	push	r4
    3ddc:	5f 92       	push	r5
    3dde:	6f 92       	push	r6
    3de0:	7f 92       	push	r7
    3de2:	8f 92       	push	r8
    3de4:	9f 92       	push	r9
    3de6:	af 92       	push	r10
    3de8:	bf 92       	push	r11
    3dea:	cf 92       	push	r12
    3dec:	df 92       	push	r13
    3dee:	ef 92       	push	r14
    3df0:	ff 92       	push	r15
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	cf 93       	push	r28
    3df8:	df 93       	push	r29
    3dfa:	cd b7       	in	r28, 0x3d	; 61
    3dfc:	de b7       	in	r29, 0x3e	; 62
    3dfe:	ca 1b       	sub	r28, r26
    3e00:	db 0b       	sbc	r29, r27
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	09 94       	ijmp

00003e0e <__epilogue_restores__>:
    3e0e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e10:	39 88       	ldd	r3, Y+17	; 0x11
    3e12:	48 88       	ldd	r4, Y+16	; 0x10
    3e14:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e16:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e18:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e20:	b9 84       	ldd	r11, Y+9	; 0x09
    3e22:	c8 84       	ldd	r12, Y+8	; 0x08
    3e24:	df 80       	ldd	r13, Y+7	; 0x07
    3e26:	ee 80       	ldd	r14, Y+6	; 0x06
    3e28:	fd 80       	ldd	r15, Y+5	; 0x05
    3e2a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e2c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e2e:	aa 81       	ldd	r26, Y+2	; 0x02
    3e30:	b9 81       	ldd	r27, Y+1	; 0x01
    3e32:	ce 0f       	add	r28, r30
    3e34:	d1 1d       	adc	r29, r1
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	ed 01       	movw	r28, r26
    3e42:	08 95       	ret

00003e44 <__do_global_dtors>:
    3e44:	13 e0       	ldi	r17, 0x03	; 3
    3e46:	c4 e2       	ldi	r28, 0x24	; 36
    3e48:	d3 e0       	ldi	r29, 0x03	; 3
    3e4a:	04 c0       	rjmp	.+8      	; 0x3e54 <__do_global_dtors+0x10>
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	0e 94 91 1c 	call	0x3922	; 0x3922 <__tablejump2__>
    3e52:	21 96       	adiw	r28, 0x01	; 1
    3e54:	c5 32       	cpi	r28, 0x25	; 37
    3e56:	d1 07       	cpc	r29, r17
    3e58:	c9 f7       	brne	.-14     	; 0x3e4c <__do_global_dtors+0x8>
    3e5a:	f8 94       	cli

00003e5c <__stop_program>:
    3e5c:	ff cf       	rjmp	.-2      	; 0x3e5c <__stop_program>
