
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fe  00800100  00005390  00005424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050a  008002fe  008002fe  00005622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000820  00000000  00000000  00005694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001aa07  00000000  00000000  00005eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035c1  00000000  00000000  000208bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000689f  00000000  00000000  00023e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a90  00000000  00000000  0002a71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010fc7  00000000  00000000  0002d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c94e  00000000  00000000  0003e173  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  0004aac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005a1a  00000000  00000000  0004b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 03 	jmp	0x760	; 0x760 <__dtors_end>
       4:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__vector_1>
       8:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__vector_2>
       c:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_3>
      10:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_3>
      14:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_3>
      18:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      1c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      20:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      24:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      28:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      2c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      30:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      34:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      38:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      3c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      40:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__vector_16>
      44:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      48:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__vector_18>
      4c:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__vector_19>
      50:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      54:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      58:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      5c:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      60:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__vector_24>
      64:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__bad_interrupt>
      68:	73 0d       	add	r23, r3
      6a:	79 0d       	add	r23, r9
      6c:	79 0d       	add	r23, r9
      6e:	79 0d       	add	r23, r9
      70:	79 0d       	add	r23, r9
      72:	79 0d       	add	r23, r9
      74:	79 0d       	add	r23, r9
      76:	79 0d       	add	r23, r9
      78:	67 0c       	add	r6, r7
      7a:	79 0d       	add	r23, r9
      7c:	79 0d       	add	r23, r9
      7e:	79 0d       	add	r23, r9
      80:	79 0d       	add	r23, r9
      82:	79 0d       	add	r23, r9
      84:	79 0d       	add	r23, r9
      86:	79 0d       	add	r23, r9
      88:	67 0c       	add	r6, r7
      8a:	79 0d       	add	r23, r9
      8c:	79 0d       	add	r23, r9
      8e:	79 0d       	add	r23, r9
      90:	79 0d       	add	r23, r9
      92:	79 0d       	add	r23, r9
      94:	79 0d       	add	r23, r9
      96:	79 0d       	add	r23, r9
      98:	71 0c       	add	r7, r1
      9a:	79 0d       	add	r23, r9
      9c:	79 0d       	add	r23, r9
      9e:	79 0d       	add	r23, r9
      a0:	79 0d       	add	r23, r9
      a2:	79 0d       	add	r23, r9
      a4:	79 0d       	add	r23, r9
      a6:	79 0d       	add	r23, r9
      a8:	9d 0c       	add	r9, r13
      aa:	79 0d       	add	r23, r9
      ac:	79 0d       	add	r23, r9
      ae:	79 0d       	add	r23, r9
      b0:	79 0d       	add	r23, r9
      b2:	79 0d       	add	r23, r9
      b4:	79 0d       	add	r23, r9
      b6:	79 0d       	add	r23, r9
      b8:	71 0c       	add	r7, r1
      ba:	79 0d       	add	r23, r9
      bc:	79 0d       	add	r23, r9
      be:	79 0d       	add	r23, r9
      c0:	79 0d       	add	r23, r9
      c2:	79 0d       	add	r23, r9
      c4:	79 0d       	add	r23, r9
      c6:	79 0d       	add	r23, r9
      c8:	a3 0c       	add	r10, r3
      ca:	79 0d       	add	r23, r9
      cc:	79 0d       	add	r23, r9
      ce:	79 0d       	add	r23, r9
      d0:	79 0d       	add	r23, r9
      d2:	79 0d       	add	r23, r9
      d4:	79 0d       	add	r23, r9
      d6:	79 0d       	add	r23, r9
      d8:	a9 0c       	add	r10, r9
      da:	79 0d       	add	r23, r9
      dc:	79 0d       	add	r23, r9
      de:	79 0d       	add	r23, r9
      e0:	79 0d       	add	r23, r9
      e2:	79 0d       	add	r23, r9
      e4:	79 0d       	add	r23, r9
      e6:	79 0d       	add	r23, r9
      e8:	bf 0c       	add	r11, r15
      ea:	79 0d       	add	r23, r9
      ec:	79 0d       	add	r23, r9
      ee:	79 0d       	add	r23, r9
      f0:	79 0d       	add	r23, r9
      f2:	79 0d       	add	r23, r9
      f4:	79 0d       	add	r23, r9
      f6:	79 0d       	add	r23, r9
      f8:	ef 0c       	add	r14, r15
      fa:	79 0d       	add	r23, r9
      fc:	79 0d       	add	r23, r9
      fe:	79 0d       	add	r23, r9
     100:	79 0d       	add	r23, r9
     102:	79 0d       	add	r23, r9
     104:	79 0d       	add	r23, r9
     106:	79 0d       	add	r23, r9
     108:	af 0c       	add	r10, r15
     10a:	79 0d       	add	r23, r9
     10c:	79 0d       	add	r23, r9
     10e:	79 0d       	add	r23, r9
     110:	79 0d       	add	r23, r9
     112:	79 0d       	add	r23, r9
     114:	79 0d       	add	r23, r9
     116:	79 0d       	add	r23, r9
     118:	cd 0c       	add	r12, r13
     11a:	79 0d       	add	r23, r9
     11c:	79 0d       	add	r23, r9
     11e:	79 0d       	add	r23, r9
     120:	79 0d       	add	r23, r9
     122:	79 0d       	add	r23, r9
     124:	79 0d       	add	r23, r9
     126:	79 0d       	add	r23, r9
     128:	f2 0c       	add	r15, r2
     12a:	79 0d       	add	r23, r9
     12c:	79 0d       	add	r23, r9
     12e:	79 0d       	add	r23, r9
     130:	79 0d       	add	r23, r9
     132:	79 0d       	add	r23, r9
     134:	79 0d       	add	r23, r9
     136:	79 0d       	add	r23, r9
     138:	f2 0c       	add	r15, r2
     13a:	79 0d       	add	r23, r9
     13c:	79 0d       	add	r23, r9
     13e:	79 0d       	add	r23, r9
     140:	79 0d       	add	r23, r9
     142:	79 0d       	add	r23, r9
     144:	79 0d       	add	r23, r9
     146:	79 0d       	add	r23, r9
     148:	f2 0c       	add	r15, r2
     14a:	79 0d       	add	r23, r9
     14c:	79 0d       	add	r23, r9
     14e:	79 0d       	add	r23, r9
     150:	79 0d       	add	r23, r9
     152:	79 0d       	add	r23, r9
     154:	79 0d       	add	r23, r9
     156:	79 0d       	add	r23, r9
     158:	f2 0c       	add	r15, r2
     15a:	79 0d       	add	r23, r9
     15c:	79 0d       	add	r23, r9
     15e:	79 0d       	add	r23, r9
     160:	79 0d       	add	r23, r9
     162:	79 0d       	add	r23, r9
     164:	79 0d       	add	r23, r9
     166:	79 0d       	add	r23, r9
     168:	fb 0c       	add	r15, r11
     16a:	79 0d       	add	r23, r9
     16c:	79 0d       	add	r23, r9
     16e:	79 0d       	add	r23, r9
     170:	79 0d       	add	r23, r9
     172:	79 0d       	add	r23, r9
     174:	79 0d       	add	r23, r9
     176:	79 0d       	add	r23, r9
     178:	35 0d       	add	r19, r5
     17a:	79 0d       	add	r23, r9
     17c:	79 0d       	add	r23, r9
     17e:	79 0d       	add	r23, r9
     180:	79 0d       	add	r23, r9
     182:	79 0d       	add	r23, r9
     184:	79 0d       	add	r23, r9
     186:	79 0d       	add	r23, r9
     188:	fb 0c       	add	r15, r11
     18a:	79 0d       	add	r23, r9
     18c:	79 0d       	add	r23, r9
     18e:	79 0d       	add	r23, r9
     190:	79 0d       	add	r23, r9
     192:	79 0d       	add	r23, r9
     194:	79 0d       	add	r23, r9
     196:	79 0d       	add	r23, r9
     198:	35 0d       	add	r19, r5
     19a:	79 0d       	add	r23, r9
     19c:	79 0d       	add	r23, r9
     19e:	79 0d       	add	r23, r9
     1a0:	79 0d       	add	r23, r9
     1a2:	79 0d       	add	r23, r9
     1a4:	79 0d       	add	r23, r9
     1a6:	79 0d       	add	r23, r9
     1a8:	17 0d       	add	r17, r7
     1aa:	79 0d       	add	r23, r9
     1ac:	79 0d       	add	r23, r9
     1ae:	79 0d       	add	r23, r9
     1b0:	79 0d       	add	r23, r9
     1b2:	79 0d       	add	r23, r9
     1b4:	79 0d       	add	r23, r9
     1b6:	79 0d       	add	r23, r9
     1b8:	39 0d       	add	r19, r9
     1ba:	79 0d       	add	r23, r9
     1bc:	79 0d       	add	r23, r9
     1be:	79 0d       	add	r23, r9
     1c0:	79 0d       	add	r23, r9
     1c2:	79 0d       	add	r23, r9
     1c4:	79 0d       	add	r23, r9
     1c6:	79 0d       	add	r23, r9
     1c8:	39 0d       	add	r19, r9
     1ca:	79 0d       	add	r23, r9
     1cc:	79 0d       	add	r23, r9
     1ce:	79 0d       	add	r23, r9
     1d0:	79 0d       	add	r23, r9
     1d2:	79 0d       	add	r23, r9
     1d4:	79 0d       	add	r23, r9
     1d6:	79 0d       	add	r23, r9
     1d8:	4f 0d       	add	r20, r15
     1da:	79 0d       	add	r23, r9
     1dc:	79 0d       	add	r23, r9
     1de:	79 0d       	add	r23, r9
     1e0:	79 0d       	add	r23, r9
     1e2:	79 0d       	add	r23, r9
     1e4:	79 0d       	add	r23, r9
     1e6:	79 0d       	add	r23, r9
     1e8:	6d 0d       	add	r22, r13
     1ea:	79 0d       	add	r23, r9
     1ec:	79 0d       	add	r23, r9
     1ee:	79 0d       	add	r23, r9
     1f0:	79 0d       	add	r23, r9
     1f2:	79 0d       	add	r23, r9
     1f4:	79 0d       	add	r23, r9
     1f6:	79 0d       	add	r23, r9
     1f8:	6d 0d       	add	r22, r13
     1fa:	79 0d       	add	r23, r9
     1fc:	79 0d       	add	r23, r9
     1fe:	79 0d       	add	r23, r9
     200:	79 0d       	add	r23, r9
     202:	79 0d       	add	r23, r9
     204:	79 0d       	add	r23, r9
     206:	79 0d       	add	r23, r9
     208:	79 0d       	add	r23, r9
     20a:	79 0d       	add	r23, r9
     20c:	79 0d       	add	r23, r9
     20e:	79 0d       	add	r23, r9
     210:	79 0d       	add	r23, r9
     212:	79 0d       	add	r23, r9
     214:	79 0d       	add	r23, r9
     216:	79 0d       	add	r23, r9
     218:	79 0d       	add	r23, r9
     21a:	79 0d       	add	r23, r9
     21c:	79 0d       	add	r23, r9
     21e:	79 0d       	add	r23, r9
     220:	79 0d       	add	r23, r9
     222:	79 0d       	add	r23, r9
     224:	79 0d       	add	r23, r9
     226:	79 0d       	add	r23, r9
     228:	79 0d       	add	r23, r9
     22a:	79 0d       	add	r23, r9
     22c:	79 0d       	add	r23, r9
     22e:	79 0d       	add	r23, r9
     230:	79 0d       	add	r23, r9
     232:	79 0d       	add	r23, r9
     234:	79 0d       	add	r23, r9
     236:	79 0d       	add	r23, r9
     238:	79 0d       	add	r23, r9
     23a:	79 0d       	add	r23, r9
     23c:	79 0d       	add	r23, r9
     23e:	79 0d       	add	r23, r9
     240:	79 0d       	add	r23, r9
     242:	79 0d       	add	r23, r9
     244:	79 0d       	add	r23, r9
     246:	79 0d       	add	r23, r9
     248:	79 0d       	add	r23, r9
     24a:	79 0d       	add	r23, r9
     24c:	79 0d       	add	r23, r9
     24e:	79 0d       	add	r23, r9
     250:	79 0d       	add	r23, r9
     252:	79 0d       	add	r23, r9
     254:	79 0d       	add	r23, r9
     256:	79 0d       	add	r23, r9
     258:	78 0d       	add	r23, r8

0000025a <__trampolines_end>:
     25a:	74 65       	ori	r23, 0x54	; 84
     25c:	78 74       	andi	r23, 0x48	; 72
     25e:	2f 70       	andi	r18, 0x0F	; 15
     260:	6c 61       	ori	r22, 0x1C	; 28
     262:	69 6e       	ori	r22, 0xE9	; 233
	...

00000265 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
	...

00000266 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
	...

00000267 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     267:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000272 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
     272:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000027d <_ZZ5setupE3__c>:
     27d:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000289 <_ZZ7readMemiPhhE3__c>:
     289:	52 61 77 20 62 79 74 65 20 72 65 61 64 3a 00        Raw byte read:.

00000298 <_ZZ7readMemiPhhE3__c_0>:
     298:	52 65 61 64 20 6d 65 6d 6f 72 79 20 61 74 20 61     Read memory at a
     2a8:	64 64 72 65 73 73 20 00                             ddress .

000002b0 <_ZZ7readMemiPhhE3__c_1>:
     2b0:	20 74 6f 20 61 64 64 72 65 73 73 20 00               to address .

000002bd <_ZZ7readMemiPhhE3__c_2>:
     2bd:	20 6f 66 20 73 69 7a 65 20 00                        of size .

000002c7 <_ZZ8writeMemiPhhE3__c>:
     2c7:	57 72 69 74 69 6e 67 20 6d 65 6d 6f 72 79 20 61     Writing memory a
     2d7:	74 20 61 64 64 72 65 73 73 20 00                    t address .

000002e2 <_ZZ8writeMemiPhhE3__c_0>:
     2e2:	20 66 72 6f 6d 20 61 64 64 72 65 73 73 20 00         from address .

000002f1 <_ZZ8writeMemiPhhE3__c_1>:
     2f1:	20 6f 66 20 73 69 7a 65 20 00                        of size .

000002fb <_ZZ8writeMemiPhhE3__c_2>:
     2fb:	57 72 69 74 69 6e 67 20 62 79 74 65 20 00           Writing byte .

00000309 <_ZZ9printDatavE3__c>:
     309:	54 68 69 73 20 69 73 20 6d 6f 64 75 6c 65 20 23     This is module #
	...

0000031a <_ZZ9printDatavE3__c_0>:
     31a:	23 20 52 65 61 64 69 6e 67 73 20 69 6e 20 6d 6f     # Readings in mo
     32a:	64 75 6c 65 3a 20 00                                dule: .

00000331 <_ZZ9printDatavE3__c_1>:
     331:	52 65 61 64 69 6e 67 20 23 00                       Reading #.

0000033b <_ZZ9printDatavE3__c_2>:
     33b:	47 73 6d 2d 53 74 61 74 75 73 3a 20 00              Gsm-Status: .

00000348 <_ZZ9printDatavE3__c_3>:
     348:	47 73 6d 2d 52 53 53 49 3a 20 00                    Gsm-RSSI: .

00000353 <_ZZ9printDatavE3__c_4>:
     353:	47 73 6d 2d 45 72 72 6f 72 20 43 6f 64 65 3a 20     Gsm-Error Code: 
	...

00000364 <_ZZ9printDatavE3__c_5>:
     364:	47 70 73 2d 53 74 61 74 75 73 3a 20 00              Gps-Status: .

00000371 <_ZZ9printDatavE3__c_6>:
     371:	47 70 73 2d 45 72 72 6f 72 20 43 6f 64 65 3a 20     Gps-Error Code: 
	...

00000382 <_ZZ9printDatavE3__c_7>:
     382:	47 70 73 2d 4c 61 74 3a 20 00                       Gps-Lat: .

0000038c <_ZZ9printDatavE3__c_8>:
     38c:	47 70 73 2d 4c 6f 6e 3a 20 00                       Gps-Lon: .

00000396 <_ZZ9printDatavE3__c_9>:
     396:	47 70 73 2d 44 61 74 65 3a 20 00                    Gps-Date: .

000003a1 <_ZZ9printDatavE3__c_10>:
     3a1:	47 70 73 2d 48 65 61 64 69 6e 67 3a 20 00           Gps-Heading: .

000003af <_ZZ9printDatavE3__c_11>:
     3af:	47 70 73 2d 53 70 65 65 64 3a 20 00                 Gps-Speed: .

000003bb <digital_pin_to_timer_PGM>:
     3bb:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3cb:	00 00 00 00                                         ....

000003cf <digital_pin_to_bit_mask_PGM>:
     3cf:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3df:	04 08 10 20                                         ... 

000003e3 <digital_pin_to_port_PGM>:
     3e3:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3f3:	03 03 03 03                                         ....

000003f7 <port_to_input_PGM>:
     3f7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000401 <port_to_output_PGM>:
     401:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000040b <port_to_mode_PGM>:
     40b:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000415 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     415:	09 3c 2d 2d 2d 20 00                                .<--- .

0000041c <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     41c:	09 2d 2d 2d 3e 20 00                                .---> .

00000423 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     423:	09 3c 2d 2d 2d 20 00                                .<--- .

0000042a <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     42a:	09 2d 2d 2d 3e 20 00                                .---> .

00000431 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     431:	09 3c 2d 2d 2d 20 00                                .<--- .

00000438 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     438:	09 2d 2d 2d 3e 20 00                                .---> .

0000043f <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     43f:	09 3c 2d 2d 2d 20 00                                .<--- .

00000446 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     446:	09 2d 2d 2d 3e 20 00                                .---> .

0000044d <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     44d:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

00000455 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     455:	53 50 41 43 45 00                                   SPACE.

0000045b <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     45b:	09 3c 2d 2d 2d 20 00                                .<--- .

00000462 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     462:	52 45 44 49 52 00                                   REDIR.

00000468 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     468:	55 52 4c 00                                         URL.

0000046c <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     46c:	55 41 00                                            UA.

0000046f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     46f:	43 49 44 00                                         CID.

00000473 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     473:	4c 65 6e 3a 20 00                                   Len: .

00000479 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     479:	53 74 61 74 75 73 3a 20 00                          Status: .

00000482 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     482:	43 4f 4e 54 45 4e 54 00                             CONTENT.

0000048a <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     48a:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

00000496 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     496:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000004a1 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     4a1:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

000004ad <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     4ad:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000004ba <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     4ba:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000004c7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     4c7:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000004d6 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     4d6:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000004df <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     4df:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004ec <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     4ec:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004f9 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     4f9:	09 2d 2d 2d 3e 20 00                                .---> .

00000500 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     500:	22 2c 00                                            ",.

00000503 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     503:	22 2c 22 00                                         ",".

00000507 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     507:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000515 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     515:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000523 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     523:	09 2d 2d 2d 3e 20 00                                .---> .

0000052a <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     52a:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000536 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     536:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000542 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     542:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000054d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     54d:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

0000055a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     55a:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000565 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     565:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000056d <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     56d:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000576 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     576:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

00000583 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     583:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     593:	44 22 2c 00                                         D",.

00000597 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     597:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     5a7:	45 52 22 2c 00                                      ER",.

000005ac <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     5ac:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000005b6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     5b6:	09 2d 2d 2d 3e 20 00                                .---> .

000005bd <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     5bd:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000005c7 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     5c7:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     5d7:	4e 22 2c 00                                         N",.

000005db <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     5db:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     5eb:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000005f9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     5f9:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000604 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     604:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000060f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     60f:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000617 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     617:	3e 20 00                                            > .

0000061a <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     61a:	3e 20 00                                            > .

0000061d <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     61d:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

00000627 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     627:	41 54 2b 43 53 51 00                                AT+CSQ.

0000062e <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     62e:	2b 43 53 51 3a 20 00                                +CSQ: .

00000635 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     635:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000063e <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     63e:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000646 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     646:	41 54 2b 43 42 43 00                                AT+CBC.

0000064d <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     64d:	2b 43 42 43 3a 20 00                                +CBC: .

00000654 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     654:	53 49 4d 38 30 30 48 00                             SIM800H.

0000065c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     65c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000663 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     663:	09 2d 2d 2d 3e 20 00                                .---> .

0000066a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     66a:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

0000067a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     67a:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

0000068a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     68a:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

00000695 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     695:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

000006a0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     6a0:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000006ab <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     6ab:	09 3c 2d 2d 2d 20 00                                .<--- .

000006b2 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     6b2:	09 2d 2d 2d 3e 20 00                                .---> .

000006b9 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     6b9:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

000006c3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     6c3:	41 54 45 30 00                                      ATE0.

000006c8 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     6c8:	41 54 45 30 00                                      ATE0.

000006cd <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     6cd:	41 54 00                                            AT.

000006d0 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     6d0:	41 54 00                                            AT.

000006d3 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     6d3:	41 54 00                                            AT.

000006d6 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     6d6:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     6e6:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     6f6:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     706:	2e 00                                               ..

00000708 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     708:	41 54 00                                            AT.

0000070b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     70b:	41 54 00                                            AT.

0000070e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     70e:	41 54 00                                            AT.

00000711 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     711:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     721:	61 62 6c 65 00                                      able.

00000726 <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     726:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     736:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000747 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     747:	4f 4b 00                                            OK.

0000074a <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     74a:	46 4f 4e 41 00                                      FONA.

0000074f <_ZZN13Adafruit_FONAC4EaE3__c>:
     74f:	46 4f 4e 41 6e 65 74 00 00                          FONAnet..

00000758 <__ctors_start>:
     758:	c3 09       	sbc	r28, r3
     75a:	31 11       	cpse	r19, r1
     75c:	9c 15       	cp	r25, r12

0000075e <__ctors_end>:
     75e:	d0 09       	sbc	r29, r0

00000760 <__dtors_end>:
     760:	11 24       	eor	r1, r1
     762:	1f be       	out	0x3f, r1	; 63
     764:	cf ef       	ldi	r28, 0xFF	; 255
     766:	d8 e0       	ldi	r29, 0x08	; 8
     768:	de bf       	out	0x3e, r29	; 62
     76a:	cd bf       	out	0x3d, r28	; 61

0000076c <__do_copy_data>:
     76c:	12 e0       	ldi	r17, 0x02	; 2
     76e:	a0 e0       	ldi	r26, 0x00	; 0
     770:	b1 e0       	ldi	r27, 0x01	; 1
     772:	e0 e9       	ldi	r30, 0x90	; 144
     774:	f3 e5       	ldi	r31, 0x53	; 83
     776:	02 c0       	rjmp	.+4      	; 0x77c <__do_copy_data+0x10>
     778:	05 90       	lpm	r0, Z+
     77a:	0d 92       	st	X+, r0
     77c:	ae 3f       	cpi	r26, 0xFE	; 254
     77e:	b1 07       	cpc	r27, r17
     780:	d9 f7       	brne	.-10     	; 0x778 <__do_copy_data+0xc>

00000782 <__do_clear_bss>:
     782:	28 e0       	ldi	r18, 0x08	; 8
     784:	ae ef       	ldi	r26, 0xFE	; 254
     786:	b2 e0       	ldi	r27, 0x02	; 2
     788:	01 c0       	rjmp	.+2      	; 0x78c <.do_clear_bss_start>

0000078a <.do_clear_bss_loop>:
     78a:	1d 92       	st	X+, r1

0000078c <.do_clear_bss_start>:
     78c:	a8 30       	cpi	r26, 0x08	; 8
     78e:	b2 07       	cpc	r27, r18
     790:	e1 f7       	brne	.-8      	; 0x78a <.do_clear_bss_loop>

00000792 <__do_global_ctors>:
     792:	13 e0       	ldi	r17, 0x03	; 3
     794:	cf ea       	ldi	r28, 0xAF	; 175
     796:	d3 e0       	ldi	r29, 0x03	; 3
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <__do_global_ctors+0x10>
     79a:	21 97       	sbiw	r28, 0x01	; 1
     79c:	fe 01       	movw	r30, r28
     79e:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__tablejump2__>
     7a2:	cc 3a       	cpi	r28, 0xAC	; 172
     7a4:	d1 07       	cpc	r29, r17
     7a6:	c9 f7       	brne	.-14     	; 0x79a <__do_global_ctors+0x8>
     7a8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <main>
     7ac:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__do_global_dtors>

000007b0 <__bad_interrupt>:
     7b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000007b4 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <_ZN10GpsManagerC1Eh+0x6>
     7ba:	1f 92       	push	r1
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	9a 83       	std	Y+2, r25	; 0x02
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN13Adafruit_FONAC1Ea>
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	9a 81       	ldd	r25, Y+2	; 0x02
     7d4:	86 5e       	subi	r24, 0xE6	; 230
     7d6:	9e 4f       	sbci	r25, 0xFE	; 254
     7d8:	2b 81       	ldd	r18, Y+3	; 0x03
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
{
}
     7de:	00 00       	nop
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <_ZN10GpsManagerD1Ev+0x6>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	9a 83       	std	Y+2, r25	; 0x02
     7f8:	89 83       	std	Y+1, r24	; 0x01
     7fa:	00 00       	nop
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	7c 83       	std	Y+4, r23	; 0x04
     818:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	2b 81       	ldd	r18, Y+3	; 0x03
     820:	3c 81       	ldd	r19, Y+4	; 0x04
     822:	b9 01       	movw	r22, r18
     824:	0e 94 91 11 	call	0x2322	; 0x2322 <_ZN13Adafruit_FONAaSERKS_>
}
     828:	00 00       	nop
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <_ZN10GpsManager9toggleGpsEb+0x6>
     83e:	00 d0       	rcall	.+0      	; 0x840 <_ZN10GpsManager9toggleGpsEb+0x8>
     840:	1f 92       	push	r1
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	9c 83       	std	Y+4, r25	; 0x04
     848:	8b 83       	std	Y+3, r24	; 0x03
     84a:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	86 5e       	subi	r24, 0xE6	; 230
     852:	9e 4f       	sbci	r25, 0xFE	; 254
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	88 23       	and	r24, r24
     85a:	11 f0       	breq	.+4      	; 0x860 <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	04 c0       	rjmp	.+8      	; 0x868 <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     860:	8f e9       	ldi	r24, 0x9F	; 159
     862:	96 e8       	ldi	r25, 0x86	; 134
     864:	9a 83       	std	Y+2, r25	; 0x02
     866:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	00 d0       	rcall	.+0      	; 0x87e <_ZN10GpsManager9gpsStatusEv+0x6>
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	9a 83       	std	Y+2, r25	; 0x02
     884:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     886:	00 00       	nop
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x6>
     898:	00 d0       	rcall	.+0      	; 0x89a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x8>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	7c 83       	std	Y+4, r23	; 0x04
     8a4:	6b 83       	std	Y+3, r22	; 0x03
	//// make sure we have a response
	//if (!success){
		//info.errorCode = ERR_GPS_BAD_FIELD;
		//return;
	//}
}
     8a6:	00 00       	nop
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <_ZN10GsmManagerC1Eh+0x6>
     8bc:	1f 92       	push	r1
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	9a 81       	ldd	r25, Y+2	; 0x02
     8cc:	2b 81       	ldd	r18, Y+3	; 0x03
     8ce:	fc 01       	movw	r30, r24
     8d0:	24 83       	std	Z+4, r18	; 0x04
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	05 96       	adiw	r24, 0x05	; 5
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN13Adafruit_FONAC1Ea>
{
}
     8de:	00 00       	nop
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <_ZN10GsmManagerD1Ev+0x6>
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9a 83       	std	Y+2, r25	; 0x02
     8f8:	89 83       	std	Y+1, r24	; 0x01
     8fa:	00 00       	nop
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     90c:	00 d0       	rcall	.+0      	; 0x90e <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	7c 83       	std	Y+4, r23	; 0x04
     918:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	05 96       	adiw	r24, 0x05	; 5
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	3c 81       	ldd	r19, Y+4	; 0x04
     924:	b9 01       	movw	r22, r18
     926:	0e 94 91 11 	call	0x2322	; 0x2322 <_ZN13Adafruit_FONAaSERKS_>
}
     92a:	00 00       	nop
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	00 d0       	rcall	.+0      	; 0x940 <_ZN10GsmManager5resetEv+0x6>
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	fc 01       	movw	r30, r24
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	fc 01       	movw	r30, r24
     958:	13 82       	std	Z+3, r1	; 0x03
     95a:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     95c:	00 00       	nop
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	00 d0       	rcall	.+0      	; 0x972 <_ZN10GsmManager5beginEv+0xa>
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	fc 01       	movw	r30, r24
     980:	94 81       	ldd	r25, Z+4	; 0x04
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	99 23       	and	r25, r25
     986:	09 f4       	brne	.+2      	; 0x98a <_ZN10GsmManager5beginEv+0x22>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	88 23       	and	r24, r24
     98c:	11 f0       	breq	.+4      	; 0x992 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	2d c0       	rjmp	.+90     	; 0x9ec <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     992:	8f e1       	ldi	r24, 0x1F	; 31
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_Znwj>
     99a:	8c 01       	movw	r16, r24
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	42 e0       	ldi	r20, 0x02	; 2
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	c8 01       	movw	r24, r16
     9a4:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <_ZN14SoftwareSerialC1Ehhb>
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	81 5e       	subi	r24, 0xE1	; 225
     9ae:	9e 4f       	sbci	r25, 0xFE	; 254
     9b0:	fc 01       	movw	r30, r24
     9b2:	11 83       	std	Z+1, r17	; 0x01
     9b4:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ba:	81 5e       	subi	r24, 0xE1	; 225
     9bc:	9e 4f       	sbci	r25, 0xFE	; 254
     9be:	fc 01       	movw	r30, r24
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	40 ec       	ldi	r20, 0xC0	; 192
     9c6:	52 e1       	ldi	r21, 0x12	; 18
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	81 5e       	subi	r24, 0xE1	; 225
     9d6:	9e 4f       	sbci	r25, 0xFE	; 254
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	9c 01       	movw	r18, r24
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	05 96       	adiw	r24, 0x05	; 5
     9e6:	b9 01       	movw	r22, r18
     9e8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <_ZN13Adafruit_FONA5beginER6Stream>
}
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <_ZN10GsmManager14getBattPercentEPj+0x6>
     a00:	00 d0       	rcall	.+0      	; 0xa02 <_ZN10GsmManager14getBattPercentEPj+0x8>
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	7c 83       	std	Y+4, r23	; 0x04
     a0c:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	fc 01       	movw	r30, r24
     a14:	94 81       	ldd	r25, Z+4	; 0x04
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	99 23       	and	r25, r25
     a1a:	09 f4       	brne	.+2      	; 0xa1e <_ZN10GsmManager14getBattPercentEPj+0x24>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	88 23       	and	r24, r24
     a20:	49 f0       	breq	.+18     	; 0xa34 <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	23 e6       	ldi	r18, 0x63	; 99
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	31 83       	std	Z+1, r19	; 0x01
     a2e:	20 83       	st	Z, r18
		return true;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	05 96       	adiw	r24, 0x05	; 5
     a3a:	2b 81       	ldd	r18, Y+3	; 0x03
     a3c:	3c 81       	ldd	r19, Y+4	; 0x04
     a3e:	b9 01       	movw	r22, r18
     a40:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	69 97       	sbiw	r28, 0x19	; 25
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	9f 8b       	std	Y+23, r25	; 0x17
     a68:	8e 8b       	std	Y+22, r24	; 0x16
     a6a:	79 8f       	std	Y+25, r23	; 0x19
     a6c:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     a6e:	8e 89       	ldd	r24, Y+22	; 0x16
     a70:	9f 89       	ldd	r25, Y+23	; 0x17
     a72:	fc 01       	movw	r30, r24
     a74:	94 81       	ldd	r25, Z+4	; 0x04
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	99 23       	and	r25, r25
     a7a:	09 f4       	brne	.+2      	; 0xa7e <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	88 23       	and	r24, r24
     a80:	11 f0       	breq	.+4      	; 0xa86 <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	26 c0       	rjmp	.+76     	; 0xad2 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     a86:	2e e0       	ldi	r18, 0x0E	; 14
     a88:	eb e1       	ldi	r30, 0x1B	; 27
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	dc 01       	movw	r26, r24
     a92:	01 90       	ld	r0, Z+
     a94:	0d 92       	st	X+, r0
     a96:	2a 95       	dec	r18
     a98:	e1 f7       	brne	.-8      	; 0xa92 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     a9a:	27 e0       	ldi	r18, 0x07	; 7
     a9c:	ce 01       	movw	r24, r28
     a9e:	0f 96       	adiw	r24, 0x0f	; 15
     aa0:	fc 01       	movw	r30, r24
     aa2:	32 2f       	mov	r19, r18
     aa4:	11 92       	st	Z+, r1
     aa6:	3a 95       	dec	r19
     aa8:	e9 f7       	brne	.-6      	; 0xaa4 <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     aaa:	8e 89       	ldd	r24, Y+22	; 0x16
     aac:	9f 89       	ldd	r25, Y+23	; 0x17
     aae:	05 96       	adiw	r24, 0x05	; 5
     ab0:	28 8d       	ldd	r18, Y+24	; 0x18
     ab2:	39 8d       	ldd	r19, Y+25	; 0x19
     ab4:	a9 01       	movw	r20, r18
     ab6:	9e 01       	movw	r18, r28
     ab8:	2f 5f       	subi	r18, 0xFF	; 255
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	b9 01       	movw	r22, r18
     abe:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     ac2:	98 2f       	mov	r25, r24
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	89 27       	eor	r24, r25
     ac8:	88 23       	and	r24, r24
     aca:	11 f0       	breq	.+4      	; 0xad0 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ad2:	69 96       	adiw	r28, 0x19	; 25
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     aea:	00 d0       	rcall	.+0      	; 0xaec <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	9a 83       	std	Y+2, r25	; 0x02
     af2:	89 83       	std	Y+1, r24	; 0x01
     af4:	7c 83       	std	Y+4, r23	; 0x04
     af6:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus(); //?TODO: ERRORS?
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN10GsmManager16getNetworkStatusEv>
     b00:	28 2f       	mov	r18, r24
     b02:	8b 81       	ldd	r24, Y+3	; 0x03
     b04:	9c 81       	ldd	r25, Y+4	; 0x04
     b06:	fc 01       	movw	r30, r24
     b08:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN10GsmManager7getRSSIEv>
     b12:	28 2f       	mov	r18, r24
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	fc 01       	movw	r30, r24
     b1a:	21 83       	std	Z+1, r18	; 0x01
}
     b1c:	00 00       	nop
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	00 d0       	rcall	.+0      	; 0xb32 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	9a 83       	std	Y+2, r25	; 0x02
     b38:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	fc 01       	movw	r30, r24
     b40:	94 81       	ldd	r25, Z+4	; 0x04
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	99 23       	and	r25, r25
     b46:	09 f4       	brne	.+2      	; 0xb4a <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	88 23       	and	r24, r24
     b4c:	11 f0       	breq	.+4      	; 0xb52 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	9a 81       	ldd	r25, Y+2	; 0x02
     b56:	05 96       	adiw	r24, 0x05	; 5
     b58:	0e 94 89 23 	call	0x4712	; 0x4712 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <_ZN10GsmManager7getRSSIEv+0x6>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	9a 83       	std	Y+2, r25	; 0x02
     b72:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	fc 01       	movw	r30, r24
     b7a:	94 81       	ldd	r25, Z+4	; 0x04
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	99 23       	and	r25, r25
     b80:	09 f4       	brne	.+2      	; 0xb84 <_ZN10GsmManager7getRSSIEv+0x1e>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	88 23       	and	r24, r24
     b86:	11 f0       	breq	.+4      	; 0xb8c <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     b88:	85 e1       	ldi	r24, 0x15	; 21
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	05 96       	adiw	r24, 0x05	; 5
     b92:	0e 94 a8 23 	call	0x4750	; 0x4750 <_ZN13Adafruit_FONA7getRSSIEv>
}
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <_ZN10GsmManager10enableGPRSEb+0x6>
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	05 96       	adiw	r24, 0x05	; 5
     bb8:	6b 81       	ldd	r22, Y+3	; 0x03
     bba:	0e 94 b6 20 	call	0x416c	; 0x416c <_ZN13Adafruit_FONA10enableGPRSEb>
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	2e 97       	sbiw	r28, 0x0e	; 14
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	9c 87       	std	Y+12, r25	; 0x0c
     bec:	8b 87       	std	Y+11, r24	; 0x0b
     bee:	7e 87       	std	Y+14, r23	; 0x0e
     bf0:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf4:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf6:	fc 01       	movw	r30, r24
     bf8:	94 81       	ldd	r25, Z+4	; 0x04
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	99 23       	and	r25, r25
     bfe:	09 f4       	brne	.+2      	; 0xc02 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	88 23       	and	r24, r24
     c04:	19 f0       	breq	.+6      	; 0xc0c <_ZN10GsmManager11sendViaGprsEPKc+0x42>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	99 c0       	rjmp	.+306    	; 0xd3e <_ZN10GsmManager11sendViaGprsEPKc+0x174>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);

	uint16_t ret = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/do.php"; //TODO: check should not require https!
     c14:	80 e3       	ldi	r24, 0x30	; 48
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	9d 83       	std	Y+5, r25	; 0x05
     c1a:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c20:	0e 94 81 29 	call	0x5302	; 0x5302 <strlen>
     c24:	8c 01       	movw	r16, r24
     c26:	4a e5       	ldi	r20, 0x5A	; 90
     c28:	52 e0       	ldi	r21, 0x02	; 2
     c2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c2e:	05 96       	adiw	r24, 0x05	; 5
     c30:	de 01       	movw	r26, r28
     c32:	19 96       	adiw	r26, 0x09	; 9
     c34:	fe 01       	movw	r30, r28
     c36:	37 96       	adiw	r30, 0x07	; 7
     c38:	2d 85       	ldd	r18, Y+13	; 0x0d
     c3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     c3c:	6c 81       	ldd	r22, Y+4	; 0x04
     c3e:	7d 81       	ldd	r23, Y+5	; 0x05
     c40:	6d 01       	movw	r12, r26
     c42:	7f 01       	movw	r14, r30
     c44:	0e 94 b1 22 	call	0x4562	; 0x4562 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     c48:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	89 27       	eor	r24, r25
     c50:	88 23       	and	r24, r24
     c52:	11 f1       	breq	.+68     	; 0xc98 <_ZN10GsmManager11sendViaGprsEPKc+0xce>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     c54:	25 e6       	ldi	r18, 0x65	; 101
     c56:	32 e0       	ldi	r19, 0x02	; 2
     c58:	46 e6       	ldi	r20, 0x66	; 102
     c5a:	52 e0       	ldi	r21, 0x02	; 2
     c5c:	67 e6       	ldi	r22, 0x67	; 103
     c5e:	72 e0       	ldi	r23, 0x02	; 2
     c60:	8b 85       	ldd	r24, Y+11	; 0x0b
     c62:	9c 85       	ldd	r25, Y+12	; 0x0c
     c64:	05 96       	adiw	r24, 0x05	; 5
     c66:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6e:	0e 94 81 29 	call	0x5302	; 0x5302 <strlen>
     c72:	8c 01       	movw	r16, r24
     c74:	42 e7       	ldi	r20, 0x72	; 114
     c76:	52 e0       	ldi	r21, 0x02	; 2
     c78:	8b 85       	ldd	r24, Y+11	; 0x0b
     c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     c7c:	05 96       	adiw	r24, 0x05	; 5
     c7e:	de 01       	movw	r26, r28
     c80:	19 96       	adiw	r26, 0x09	; 9
     c82:	fe 01       	movw	r30, r28
     c84:	37 96       	adiw	r30, 0x07	; 7
     c86:	2d 85       	ldd	r18, Y+13	; 0x0d
     c88:	3e 85       	ldd	r19, Y+14	; 0x0e
     c8a:	6c 81       	ldd	r22, Y+4	; 0x04
     c8c:	7d 81       	ldd	r23, Y+5	; 0x05
     c8e:	6d 01       	movw	r12, r26
     c90:	7f 01       	movw	r14, r30
     c92:	0e 94 b1 22 	call	0x4562	; 0x4562 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     c96:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     c98:	9b 81       	ldd	r25, Y+3	; 0x03
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	89 27       	eor	r24, r25
     c9e:	88 23       	and	r24, r24
     ca0:	29 f0       	breq	.+10     	; 0xcac <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
	{
		ret = 999;
     ca2:	87 ee       	ldi	r24, 0xE7	; 231
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	47 c0       	rjmp	.+142    	; 0xd3a <_ZN10GsmManager11sendViaGprsEPKc+0x170>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	18 16       	cp	r1, r24
     cb2:	19 06       	cpc	r1, r25
     cb4:	8c f5       	brge	.+98     	; 0xd18 <_ZN10GsmManager11sendViaGprsEPKc+0x14e>
			while (fona.available()) {
     cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cba:	05 96       	adiw	r24, 0x05	; 5
     cbc:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZN13Adafruit_FONA9availableEv>
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	89 2b       	or	r24, r25
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <_ZN10GsmManager11sendViaGprsEPKc+0xfe>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	22 23       	and	r18, r18
     cca:	81 f3       	breq	.-32     	; 0xcac <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
				char c = fona.read();
     ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cce:	9c 85       	ldd	r25, Y+12	; 0x0c
     cd0:	05 96       	adiw	r24, 0x05	; 5
     cd2:	0e 94 0e 1a 	call	0x341c	; 0x341c <_ZN13Adafruit_FONA4readEv>
     cd6:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     cd8:	80 ec       	ldi	r24, 0xC0	; 192
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	80 72       	andi	r24, 0x20	; 32
     ce6:	99 27       	eor	r25, r25
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	89 2b       	or	r24, r25
     cec:	09 f0       	breq	.+2      	; 0xcf0 <_ZN10GsmManager11sendViaGprsEPKc+0x126>
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	22 23       	and	r18, r18
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <_ZN10GsmManager11sendViaGprsEPKc+0x12c>
     cf4:	f1 cf       	rjmp	.-30     	; 0xcd8 <_ZN10GsmManager11sendViaGprsEPKc+0x10e>
				UDR0 = c;
     cf6:	86 ec       	ldi	r24, 0xC6	; 198
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2e 81       	ldd	r18, Y+6	; 0x06
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
					                                                      
				length--;
     d00:	89 85       	ldd	r24, Y+9	; 0x09
     d02:	9a 85       	ldd	r25, Y+10	; 0x0a
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	9a 87       	std	Y+10, r25	; 0x0a
     d08:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     d0a:	89 85       	ldd	r24, Y+9	; 0x09
     d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0e:	89 2b       	or	r24, r25
     d10:	09 f0       	breq	.+2      	; 0xd14 <_ZN10GsmManager11sendViaGprsEPKc+0x14a>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     d12:	d1 cf       	rjmp	.-94     	; 0xcb6 <_ZN10GsmManager11sendViaGprsEPKc+0xec>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     d14:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     d16:	ca cf       	rjmp	.-108    	; 0xcac <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     d18:	8b 85       	ldd	r24, Y+11	; 0x0b
     d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1c:	05 96       	adiw	r24, 0x05	; 5
     d1e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     d22:	8f 81       	ldd	r24, Y+7	; 0x07
     d24:	98 85       	ldd	r25, Y+8	; 0x08
     d26:	88 3c       	cpi	r24, 0xC8	; 200
     d28:	91 05       	cpc	r25, r1
     d2a:	19 f0       	breq	.+6      	; 0xd32 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
     d2c:	8f 81       	ldd	r24, Y+7	; 0x07
     d2e:	98 85       	ldd	r25, Y+8	; 0x08
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <_ZN10GsmManager11sendViaGprsEPKc+0x16c>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d3e:	2e 96       	adiw	r28, 0x0e	; 14
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret

00000d5c <setup>:
void initModule(uint8_t moduleId);
void on3MinutesElapsed();
void printData();
void initSubsystems();

void setup() {
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
	// Optionally configure HTTP gets to follow redirects over SSL.
	// Default is not to follow SSL redirects, however if you uncomment
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);

	delay(3000); //for serial monitor to connect
     d64:	68 eb       	ldi	r22, 0xB8	; 184
     d66:	7b e0       	ldi	r23, 0x0B	; 11
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
	
	Wire.begin();
     d70:	8e e0       	ldi	r24, 0x0E	; 14
     d72:	97 e0       	ldi	r25, 0x07	; 7
     d74:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire5beginEv>
	Serial.begin(9600); //Writes to Serial output
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	55 e2       	ldi	r21, 0x25	; 37
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	8a e1       	ldi	r24, 0x1A	; 26
     d82:	97 e0       	ldi	r25, 0x07	; 7
     d84:	0e 94 34 12 	call	0x2468	; 0x2468 <_ZN14HardwareSerial5beginEm>
	Serial.println(F("Starting..."));
     d88:	8d e7       	ldi	r24, 0x7D	; 125
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	bc 01       	movw	r22, r24
     d8e:	8a e1       	ldi	r24, 0x1A	; 26
     d90:	97 e0       	ldi	r25, 0x07	; 7
     d92:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>

	gps.setFona(fona);
     d96:	6e ef       	ldi	r22, 0xFE	; 254
     d98:	72 e0       	ldi	r23, 0x02	; 2
     d9a:	88 e1       	ldi	r24, 0x18	; 24
     d9c:	94 e0       	ldi	r25, 0x04	; 4
     d9e:	0e 94 03 04 	call	0x806	; 0x806 <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
     da2:	6e ef       	ldi	r22, 0xFE	; 254
     da4:	72 e0       	ldi	r23, 0x02	; 2
     da6:	83 e3       	ldi	r24, 0x33	; 51
     da8:	95 e0       	ldi	r25, 0x05	; 5
     daa:	0e 94 83 04 	call	0x906	; 0x906 <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	#ifdef INITIALISE_MODULE
		initModule(INIT_MODULE_ID);
	#endif

	initSubsystems();
     dae:	0e 94 df 06 	call	0xdbe	; 0xdbe <_Z14initSubsystemsv>
	
	#ifdef PRINT_DATA
		printData();
     db2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <_Z9printDatav>
	#endif
}
     db6:	00 00       	nop
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <_Z14initSubsystemsv>:

void initSubsystems(){
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62

	if (!gsm.begin()) {
     dc6:	83 e3       	ldi	r24, 0x33	; 51
     dc8:	95 e0       	ldi	r25, 0x05	; 5
     dca:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN10GsmManager5beginEv>
     dce:	98 2f       	mov	r25, r24
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 27       	eor	r24, r25
     dd4:	88 23       	and	r24, r24
     dd6:	31 f4       	brne	.+12     	; 0xde4 <_Z14initSubsystemsv+0x26>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)){
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	88 e1       	ldi	r24, 0x18	; 24
     ddc:	94 e0       	ldi	r25, 0x04	; 4
     dde:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN10GpsManager9toggleGpsEb>
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <_Z14initSubsystemsv+0x28>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
     de4:	00 00       	nop
	if (!gps.toggleGps(true)){
	
		//TODO: store in ROM
		return;
	}
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <_Z17getReadingAddressh>:

uint8_t getReadingAddress(uint8_t readingNum){
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <_Z17getReadingAddressh+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t writeAddress =
		sizeof(ModuleMeta) + //Skip metadata area
		readingNum*sizeof(SingleSession);
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	28 e2       	ldi	r18, 0x28	; 40
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 9f       	mul	r18, r24
     e00:	80 2d       	mov	r24, r0
     e02:	11 24       	eor	r1, r1
     e04:	89 0f       	add	r24, r25
     e06:	89 83       	std	Y+1, r24	; 0x01
		
	return writeAddress;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <_Z7readMemiPhh>:

void readMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	29 97       	sbiw	r28, 0x09	; 9
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	78 87       	std	Y+8, r23	; 0x08
     e2e:	6f 83       	std	Y+7, r22	; 0x07
     e30:	49 87       	std	Y+9, r20	; 0x09
	
	for(uint8_t i=0;i<numBytes;i++) {
     e32:	19 82       	std	Y+1, r1	; 0x01
     e34:	99 85       	ldd	r25, Y+9	; 0x09
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	29 81       	ldd	r18, Y+1	; 0x01
     e3a:	29 17       	cp	r18, r25
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <_Z7readMemiPhh+0x2c>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	88 23       	and	r24, r24
     e42:	09 f4       	brne	.+2      	; 0xe46 <_Z7readMemiPhh+0x32>
     e44:	5a c0       	rjmp	.+180    	; 0xefa <_Z7readMemiPhh+0xe6>
		
		uint16_t thisByteAddr = address+i;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	9e 81       	ldd	r25, Y+6	; 0x06
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	8b 83       	std	Y+3, r24	; 0x03
		
		Wire.beginTransmission(0x50);
     e58:	60 e5       	ldi	r22, 0x50	; 80
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	8e e0       	ldi	r24, 0x0E	; 14
     e5e:	97 e0       	ldi	r25, 0x07	; 7
     e60:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int)thisByteAddr>>8); // msb
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	89 2f       	mov	r24, r25
     e6a:	99 0f       	add	r25, r25
     e6c:	99 0b       	sbc	r25, r25
     e6e:	bc 01       	movw	r22, r24
     e70:	8e e0       	ldi	r24, 0x0E	; 14
     e72:	97 e0       	ldi	r25, 0x07	; 7
     e74:	0e 94 57 12 	call	0x24ae	; 0x24ae <_ZN7TwoWire5writeEi>
		Wire.write((int)thisByteAddr&0xFF); // lsb
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	99 27       	eor	r25, r25
     e7e:	bc 01       	movw	r22, r24
     e80:	8e e0       	ldi	r24, 0x0E	; 14
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	0e 94 57 12 	call	0x24ae	; 0x24ae <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
     e88:	8e e0       	ldi	r24, 0x0E	; 14
     e8a:	97 e0       	ldi	r25, 0x07	; 7
     e8c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN7TwoWire15endTransmissionEv>
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	60 e5       	ldi	r22, 0x50	; 80
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	8e e0       	ldi	r24, 0x0E	; 14
     e9a:	97 e0       	ldi	r25, 0x07	; 7
     e9c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
     ea4:	8e e0       	ldi	r24, 0x0E	; 14
     ea6:	97 e0       	ldi	r25, 0x07	; 7
     ea8:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN7TwoWire9availableEv>
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	89 2b       	or	r24, r25
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <_Z7readMemiPhh+0xa0>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	22 23       	and	r18, r18
     eb6:	29 f0       	breq	.+10     	; 0xec2 <_Z7readMemiPhh+0xae>
			readByte = Wire.read();
     eb8:	8e e0       	ldi	r24, 0x0E	; 14
     eba:	97 e0       	ldi	r25, 0x07	; 7
     ebc:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN7TwoWire4readEv>
     ec0:	8a 83       	std	Y+2, r24	; 0x02
		
		Serial.print(F("Raw byte read:"));
     ec2:	89 e8       	ldi	r24, 0x89	; 137
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	bc 01       	movw	r22, r24
     ec8:	8a e1       	ldi	r24, 0x1A	; 26
     eca:	97 e0       	ldi	r25, 0x07	; 7
     ecc:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(readByte);
     ed0:	4a e0       	ldi	r20, 0x0A	; 10
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	6a 81       	ldd	r22, Y+2	; 0x02
     ed6:	8a e1       	ldi	r24, 0x1A	; 26
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		
		*(data+i) = readByte;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	2f 81       	ldd	r18, Y+7	; 0x07
     ee6:	38 85       	ldd	r19, Y+8	; 0x08
     ee8:	82 0f       	add	r24, r18
     eea:	93 1f       	adc	r25, r19
     eec:	2a 81       	ldd	r18, Y+2	; 0x02
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
	return writeAddress;
}

void readMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
	
	for(uint8_t i=0;i<numBytes;i++) {
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	9d cf       	rjmp	.-198    	; 0xe34 <_Z7readMemiPhh+0x20>
		Serial.println(readByte);
		
		*(data+i) = readByte;
	}

	Serial.print(F("Read memory at address "));
     efa:	88 e9       	ldi	r24, 0x98	; 152
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	bc 01       	movw	r22, r24
     f00:	8a e1       	ldi	r24, 0x1A	; 26
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(address);
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	4a e0       	ldi	r20, 0x0A	; 10
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	bc 01       	movw	r22, r24
     f12:	8a e1       	ldi	r24, 0x1A	; 26
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN5Print5printEii>
	Serial.print(F(" to address "));
     f1a:	80 eb       	ldi	r24, 0xB0	; 176
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	bc 01       	movw	r22, r24
     f20:	8a e1       	ldi	r24, 0x1A	; 26
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	//Serial.print((uint8_t)data);//TODO
	Serial.print(F(" of size "));
     f28:	8d eb       	ldi	r24, 0xBD	; 189
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	bc 01       	movw	r22, r24
     f2e:	8a e1       	ldi	r24, 0x1A	; 26
     f30:	97 e0       	ldi	r25, 0x07	; 7
     f32:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(numBytes);	
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	4a e0       	ldi	r20, 0x0A	; 10
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	68 2f       	mov	r22, r24
     f3e:	8a e1       	ldi	r24, 0x1A	; 26
     f40:	97 e0       	ldi	r25, 0x07	; 7
     f42:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
}
     f46:	00 00       	nop
     f48:	29 96       	adiw	r28, 0x09	; 9
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <_Z8writeMemiPhh>:

void writeMem(volatile int16_t address, uint8_t* data, volatile uint8_t numBytes){
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	28 97       	sbiw	r28, 0x08	; 8
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	9d 83       	std	Y+5, r25	; 0x05
     f70:	8c 83       	std	Y+4, r24	; 0x04
     f72:	7f 83       	std	Y+7, r23	; 0x07
     f74:	6e 83       	std	Y+6, r22	; 0x06
     f76:	48 87       	std	Y+8, r20	; 0x08
	
	Serial.print(F("Writing memory at address "));
     f78:	87 ec       	ldi	r24, 0xC7	; 199
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	bc 01       	movw	r22, r24
     f7e:	8a e1       	ldi	r24, 0x1A	; 26
     f80:	97 e0       	ldi	r25, 0x07	; 7
     f82:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.print(address);
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	4a e0       	ldi	r20, 0x0A	; 10
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	bc 01       	movw	r22, r24
     f90:	8a e1       	ldi	r24, 0x1A	; 26
     f92:	97 e0       	ldi	r25, 0x07	; 7
     f94:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN5Print5printEii>
	Serial.print(F(" from address "));
     f98:	82 ee       	ldi	r24, 0xE2	; 226
     f9a:	92 e0       	ldi	r25, 0x02	; 2
     f9c:	bc 01       	movw	r22, r24
     f9e:	8a e1       	ldi	r24, 0x1A	; 26
     fa0:	97 e0       	ldi	r25, 0x07	; 7
     fa2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	//Serial.print((uint8_t)data); //TODO
	Serial.print(F(" of size "));
     fa6:	81 ef       	ldi	r24, 0xF1	; 241
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	bc 01       	movw	r22, r24
     fac:	8a e1       	ldi	r24, 0x1A	; 26
     fae:	97 e0       	ldi	r25, 0x07	; 7
     fb0:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(numBytes);
     fb4:	88 85       	ldd	r24, Y+8	; 0x08
     fb6:	4a e0       	ldi	r20, 0x0A	; 10
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	68 2f       	mov	r22, r24
     fbc:	8a e1       	ldi	r24, 0x1A	; 26
     fbe:	97 e0       	ldi	r25, 0x07	; 7
     fc0:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
	
	for(uint8_t i=0;i<numBytes;i++) {
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	98 85       	ldd	r25, Y+8	; 0x08
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	29 81       	ldd	r18, Y+1	; 0x01
     fcc:	29 17       	cp	r18, r25
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <_Z8writeMemiPhh+0x78>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	88 23       	and	r24, r24
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <_Z8writeMemiPhh+0x7e>
     fd6:	54 c0       	rjmp	.+168    	; 0x1080 <_Z8writeMemiPhh+0x126>
				
		uint16_t thisByteAddr = address+i;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	9b 83       	std	Y+3, r25	; 0x03
     fe8:	8a 83       	std	Y+2, r24	; 0x02
				
		Serial.print(F("Writing byte "));
     fea:	8b ef       	ldi	r24, 0xFB	; 251
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	bc 01       	movw	r22, r24
     ff0:	8a e1       	ldi	r24, 0x1A	; 26
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(*(data+i));
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	2e 81       	ldd	r18, Y+6	; 0x06
    1000:	3f 81       	ldd	r19, Y+7	; 0x07
    1002:	82 0f       	add	r24, r18
    1004:	93 1f       	adc	r25, r19
    1006:	fc 01       	movw	r30, r24
    1008:	80 81       	ld	r24, Z
    100a:	4a e0       	ldi	r20, 0x0A	; 10
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	68 2f       	mov	r22, r24
    1010:	8a e1       	ldi	r24, 0x1A	; 26
    1012:	97 e0       	ldi	r25, 0x07	; 7
    1014:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		
		Wire.beginTransmission(0x50);
    1018:	60 e5       	ldi	r22, 0x50	; 80
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	8e e0       	ldi	r24, 0x0E	; 14
    101e:	97 e0       	ldi	r25, 0x07	; 7
    1020:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int)thisByteAddr>>8); // msb
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	89 2f       	mov	r24, r25
    102a:	99 0f       	add	r25, r25
    102c:	99 0b       	sbc	r25, r25
    102e:	bc 01       	movw	r22, r24
    1030:	8e e0       	ldi	r24, 0x0E	; 14
    1032:	97 e0       	ldi	r25, 0x07	; 7
    1034:	0e 94 57 12 	call	0x24ae	; 0x24ae <_ZN7TwoWire5writeEi>
		Wire.write((int)thisByteAddr&0xFF); // lsb
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	99 27       	eor	r25, r25
    103e:	bc 01       	movw	r22, r24
    1040:	8e e0       	ldi	r24, 0x0E	; 14
    1042:	97 e0       	ldi	r25, 0x07	; 7
    1044:	0e 94 57 12 	call	0x24ae	; 0x24ae <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	2e 81       	ldd	r18, Y+6	; 0x06
    1050:	3f 81       	ldd	r19, Y+7	; 0x07
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	fc 01       	movw	r30, r24
    1058:	80 81       	ld	r24, Z
    105a:	68 2f       	mov	r22, r24
    105c:	8e e0       	ldi	r24, 0x0E	; 14
    105e:	97 e0       	ldi	r25, 0x07	; 7
    1060:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1064:	8e e0       	ldi	r24, 0x0E	; 14
    1066:	97 e0       	ldi	r25, 0x07	; 7
    1068:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN7TwoWire15endTransmissionEv>
	
		delay(5);
    106c:	65 e0       	ldi	r22, 0x05	; 5
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
	Serial.print(F(" from address "));
	//Serial.print((uint8_t)data); //TODO
	Serial.print(F(" of size "));
	Serial.println(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	a3 cf       	rjmp	.-186    	; 0xfc6 <_Z8writeMemiPhh+0x6c>
		Wire.write(*(data+i)); //go byte by byte
		Wire.endTransmission();
	
		delay(5);
	}
}
    1080:	00 00       	nop
    1082:	28 96       	adiw	r28, 0x08	; 8
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <_Z10initModuleh>:

void initModule(uint8_t moduleId){
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <_Z10initModuleh+0x6>
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	8b 83       	std	Y+3, r24	; 0x03
	
	//Get last reading
	ModuleMeta meta;
    10a2:	ce 01       	movw	r24, r28
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN10ModuleMetaC1Ev>
	meta.moduleId = moduleId;
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	89 83       	std	Y+1, r24	; 0x01
	meta.numReadings = 0;
    10ae:	1a 82       	std	Y+2, r1	; 0x02
	writeMem(0, (uint8_t*)&meta, sizeof(ModuleMeta));
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	48 2f       	mov	r20, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	bc 01       	movw	r22, r24
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_Z8writeMemiPhh>
}
    10c2:	00 00       	nop
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <_Z9printDatav>:

void printData(){
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	ac 97       	sbiw	r28, 0x2c	; 44
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61

	//Get last reading
	ModuleMeta meta;
    10e4:	ce 01       	movw	r24, r28
    10e6:	03 96       	adiw	r24, 0x03	; 3
    10e8:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN10ModuleMetaC1Ev>
	readMem(0, (uint8_t*)&meta, sizeof(ModuleMeta));
    10ec:	22 e0       	ldi	r18, 0x02	; 2
    10ee:	ce 01       	movw	r24, r28
    10f0:	03 96       	adiw	r24, 0x03	; 3
    10f2:	42 2f       	mov	r20, r18
    10f4:	bc 01       	movw	r22, r24
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z7readMemiPhh>

	Serial.print(F("This is module #"));
    10fe:	89 e0       	ldi	r24, 0x09	; 9
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	bc 01       	movw	r22, r24
    1104:	8a e1       	ldi	r24, 0x1A	; 26
    1106:	97 e0       	ldi	r25, 0x07	; 7
    1108:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(meta.moduleId);
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	4a e0       	ldi	r20, 0x0A	; 10
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	68 2f       	mov	r22, r24
    1114:	8a e1       	ldi	r24, 0x1A	; 26
    1116:	97 e0       	ldi	r25, 0x07	; 7
    1118:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
	Serial.print(F("# Readings in module: "));
    111c:	8a e1       	ldi	r24, 0x1A	; 26
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	bc 01       	movw	r22, r24
    1122:	8a e1       	ldi	r24, 0x1A	; 26
    1124:	97 e0       	ldi	r25, 0x07	; 7
    1126:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
	Serial.println(meta.numReadings);
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	4a e0       	ldi	r20, 0x0A	; 10
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	68 2f       	mov	r22, r24
    1132:	8a e1       	ldi	r24, 0x1A	; 26
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
	
	for(uint8_t i=0;i<meta.numReadings;i++){
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	89 17       	cp	r24, r25
    1142:	08 f0       	brcs	.+2      	; 0x1146 <_Z9printDatav+0x76>
    1144:	c9 c0       	rjmp	.+402    	; 0x12d8 <_Z9printDatav+0x208>
		
		Serial.print(F("Reading #"));
    1146:	81 e3       	ldi	r24, 0x31	; 49
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	bc 01       	movw	r22, r24
    114c:	8a e1       	ldi	r24, 0x1A	; 26
    114e:	97 e0       	ldi	r25, 0x07	; 7
    1150:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(i);
    1154:	4a e0       	ldi	r20, 0x0A	; 10
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	69 81       	ldd	r22, Y+1	; 0x01
    115a:	8a e1       	ldi	r24, 0x1A	; 26
    115c:	97 e0       	ldi	r25, 0x07	; 7
    115e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		
		uint8_t readingAddr = getReadingAddress(i);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z17getReadingAddressh>
    1168:	8a 83       	std	Y+2, r24	; 0x02
		SingleSession session;
		readMem(readingAddr, (uint8_t*)&session, sizeof(SingleSession));
    116a:	48 e2       	ldi	r20, 0x28	; 40
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9e 01       	movw	r18, r28
    1174:	2b 5f       	subi	r18, 0xFB	; 251
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	b9 01       	movw	r22, r18
    117a:	0e 94 0a 07 	call	0xe14	; 0xe14 <_Z7readMemiPhh>
		
		Serial.print(F("Gsm-Status: "));
    117e:	8b e3       	ldi	r24, 0x3B	; 59
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	bc 01       	movw	r22, r24
    1184:	8a e1       	ldi	r24, 0x1A	; 26
    1186:	97 e0       	ldi	r25, 0x07	; 7
    1188:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gsmInfo.networkStatus);
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	4a e0       	ldi	r20, 0x0A	; 10
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	68 2f       	mov	r22, r24
    1194:	8a e1       	ldi	r24, 0x1A	; 26
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		Serial.print(F("Gsm-RSSI: "));
    119c:	88 e4       	ldi	r24, 0x48	; 72
    119e:	93 e0       	ldi	r25, 0x03	; 3
    11a0:	bc 01       	movw	r22, r24
    11a2:	8a e1       	ldi	r24, 0x1A	; 26
    11a4:	97 e0       	ldi	r25, 0x07	; 7
    11a6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gsmInfo.rssi);
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	4a e0       	ldi	r20, 0x0A	; 10
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	68 2f       	mov	r22, r24
    11b2:	8a e1       	ldi	r24, 0x1A	; 26
    11b4:	97 e0       	ldi	r25, 0x07	; 7
    11b6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		Serial.print(F("Gsm-Error Code: "));
    11ba:	83 e5       	ldi	r24, 0x53	; 83
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	bc 01       	movw	r22, r24
    11c0:	8a e1       	ldi	r24, 0x1A	; 26
    11c2:	97 e0       	ldi	r25, 0x07	; 7
    11c4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gsmInfo.errorCode);
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	4a e0       	ldi	r20, 0x0A	; 10
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	68 2f       	mov	r22, r24
    11d0:	8a e1       	ldi	r24, 0x1A	; 26
    11d2:	97 e0       	ldi	r25, 0x07	; 7
    11d4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		
		Serial.print(F("Gps-Status: "));
    11d8:	84 e6       	ldi	r24, 0x64	; 100
    11da:	93 e0       	ldi	r25, 0x03	; 3
    11dc:	bc 01       	movw	r22, r24
    11de:	8a e1       	ldi	r24, 0x1A	; 26
    11e0:	97 e0       	ldi	r25, 0x07	; 7
    11e2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.gpsStatus);
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	08 2e       	mov	r0, r24
    11ea:	00 0c       	add	r0, r0
    11ec:	99 0b       	sbc	r25, r25
    11ee:	4a e0       	ldi	r20, 0x0A	; 10
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	bc 01       	movw	r22, r24
    11f4:	8a e1       	ldi	r24, 0x1A	; 26
    11f6:	97 e0       	ldi	r25, 0x07	; 7
    11f8:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <_ZN5Print7printlnEii>
		Serial.print(F("Gps-Error Code: "));
    11fc:	81 e7       	ldi	r24, 0x71	; 113
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	bc 01       	movw	r22, r24
    1202:	8a e1       	ldi	r24, 0x1A	; 26
    1204:	97 e0       	ldi	r25, 0x07	; 7
    1206:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.errorCode);
    120a:	88 85       	ldd	r24, Y+8	; 0x08
    120c:	4a e0       	ldi	r20, 0x0A	; 10
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	68 2f       	mov	r22, r24
    1212:	8a e1       	ldi	r24, 0x1A	; 26
    1214:	97 e0       	ldi	r25, 0x07	; 7
    1216:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print7printlnEhi>
		Serial.print(F("Gps-Lat: "));
    121a:	82 e8       	ldi	r24, 0x82	; 130
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	bc 01       	movw	r22, r24
    1220:	8a e1       	ldi	r24, 0x1A	; 26
    1222:	97 e0       	ldi	r25, 0x07	; 7
    1224:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.lat);
    1228:	8a 85       	ldd	r24, Y+10	; 0x0a
    122a:	9b 85       	ldd	r25, Y+11	; 0x0b
    122c:	ac 85       	ldd	r26, Y+12	; 0x0c
    122e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1230:	22 e0       	ldi	r18, 0x02	; 2
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	ac 01       	movw	r20, r24
    1236:	bd 01       	movw	r22, r26
    1238:	8a e1       	ldi	r24, 0x1A	; 26
    123a:	97 e0       	ldi	r25, 0x07	; 7
    123c:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN5Print7printlnEdi>
		Serial.print(F("Gps-Lon: "));
    1240:	8c e8       	ldi	r24, 0x8C	; 140
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	bc 01       	movw	r22, r24
    1246:	8a e1       	ldi	r24, 0x1A	; 26
    1248:	97 e0       	ldi	r25, 0x07	; 7
    124a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.lon);
    124e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1250:	9f 85       	ldd	r25, Y+15	; 0x0f
    1252:	a8 89       	ldd	r26, Y+16	; 0x10
    1254:	b9 89       	ldd	r27, Y+17	; 0x11
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	ac 01       	movw	r20, r24
    125c:	bd 01       	movw	r22, r26
    125e:	8a e1       	ldi	r24, 0x1A	; 26
    1260:	97 e0       	ldi	r25, 0x07	; 7
    1262:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN5Print7printlnEdi>
		Serial.print(F("Gps-Date: "));
    1266:	86 e9       	ldi	r24, 0x96	; 150
    1268:	93 e0       	ldi	r25, 0x03	; 3
    126a:	bc 01       	movw	r22, r24
    126c:	8a e1       	ldi	r24, 0x1A	; 26
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.date);
    1274:	ce 01       	movw	r24, r28
    1276:	05 96       	adiw	r24, 0x05	; 5
    1278:	49 96       	adiw	r24, 0x19	; 25
    127a:	bc 01       	movw	r22, r24
    127c:	8a e1       	ldi	r24, 0x1A	; 26
    127e:	97 e0       	ldi	r25, 0x07	; 7
    1280:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
		Serial.print(F("Gps-Heading: "));
    1284:	81 ea       	ldi	r24, 0xA1	; 161
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	bc 01       	movw	r22, r24
    128a:	8a e1       	ldi	r24, 0x1A	; 26
    128c:	97 e0       	ldi	r25, 0x07	; 7
    128e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.heading);
    1292:	8e 89       	ldd	r24, Y+22	; 0x16
    1294:	9f 89       	ldd	r25, Y+23	; 0x17
    1296:	a8 8d       	ldd	r26, Y+24	; 0x18
    1298:	b9 8d       	ldd	r27, Y+25	; 0x19
    129a:	22 e0       	ldi	r18, 0x02	; 2
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ac 01       	movw	r20, r24
    12a0:	bd 01       	movw	r22, r26
    12a2:	8a e1       	ldi	r24, 0x1A	; 26
    12a4:	97 e0       	ldi	r25, 0x07	; 7
    12a6:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN5Print7printlnEdi>
		Serial.print(F("Gps-Speed: "));
    12aa:	8f ea       	ldi	r24, 0xAF	; 175
    12ac:	93 e0       	ldi	r25, 0x03	; 3
    12ae:	bc 01       	movw	r22, r24
    12b0:	8a e1       	ldi	r24, 0x1A	; 26
    12b2:	97 e0       	ldi	r25, 0x07	; 7
    12b4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
		Serial.println(session.gpsInfo.speed_kph);
    12b8:	8a 89       	ldd	r24, Y+18	; 0x12
    12ba:	9b 89       	ldd	r25, Y+19	; 0x13
    12bc:	ac 89       	ldd	r26, Y+20	; 0x14
    12be:	bd 89       	ldd	r27, Y+21	; 0x15
    12c0:	22 e0       	ldi	r18, 0x02	; 2
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	ac 01       	movw	r20, r24
    12c6:	bd 01       	movw	r22, r26
    12c8:	8a e1       	ldi	r24, 0x1A	; 26
    12ca:	97 e0       	ldi	r25, 0x07	; 7
    12cc:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN5Print7printlnEdi>
	Serial.print(F("This is module #"));
	Serial.println(meta.moduleId);
	Serial.print(F("# Readings in module: "));
	Serial.println(meta.numReadings);
	
	for(uint8_t i=0;i<meta.numReadings;i++){
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	32 cf       	rjmp	.-412    	; 0x113c <_Z9printDatav+0x6c>
		Serial.print(F("Gps-Heading: "));
		Serial.println(session.gpsInfo.heading);
		Serial.print(F("Gps-Speed: "));
		Serial.println(session.gpsInfo.speed_kph);
	}
}
    12d8:	00 00       	nop
    12da:	ac 96       	adiw	r28, 0x2c	; 44
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <loop>:
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
//}


volatile int _timerCounter = 0;
void loop() {
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62

	#ifdef DEBUG
		Serial.println("Looping");
    12f4:	63 e6       	ldi	r22, 0x63	; 99
    12f6:	71 e0       	ldi	r23, 0x01	; 1
    12f8:	8a e1       	ldi	r24, 0x1A	; 26
    12fa:	97 e0       	ldi	r25, 0x07	; 7
    12fc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
			//on3MinutesElapsed();
//
		//return; //Run the write only once
	//#endif
//
	delay(1000);
    1300:	68 ee       	ldi	r22, 0xE8	; 232
    1302:	73 e0       	ldi	r23, 0x03	; 3
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
//
	//if (++_timerCounter == 3*60)//Run once per startup, at after 3 mins
		//on3MinutesElapsed();
}
    130c:	00 00       	nop
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <_Z41__static_initialization_and_destruction_0ii>:
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	00 d0       	rcall	.+0      	; 0x131a <_Z41__static_initialization_and_destruction_0ii+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <_Z41__static_initialization_and_destruction_0ii+0x8>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	7c 83       	std	Y+4, r23	; 0x04
    1326:	6b 83       	std	Y+3, r22	; 0x03
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	99 f4       	brne	.+38     	; 0x1356 <_Z41__static_initialization_and_destruction_0ii+0x42>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	79 f4       	brne	.+30     	; 0x1356 <_Z41__static_initialization_and_destruction_0ii+0x42>
#include "GsmManager.h"
#include "GpsManager.h"
#include "avr/eeprom.h"

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
    1338:	64 e0       	ldi	r22, 0x04	; 4
    133a:	8e ef       	ldi	r24, 0xFE	; 254
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	0e 94 32 1a 	call	0x3464	; 0x3464 <_ZN13Adafruit_FONAC1Ea>
//RmMemManager mem(IS_SENSOR_MOCK);
GpsManager gps(IS_GPS_MOCK);
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	88 e1       	ldi	r24, 0x18	; 24
    1346:	94 e0       	ldi	r25, 0x04	; 4
    1348:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN10GpsManagerC1Eh>
GsmManager gsm(IS_GSM_MOCK);
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	83 e3       	ldi	r24, 0x33	; 51
    1350:	95 e0       	ldi	r25, 0x05	; 5
    1352:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN10GsmManagerC1Eh>
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	89 2b       	or	r24, r25
    135c:	61 f4       	brne	.+24     	; 0x1376 <_Z41__static_initialization_and_destruction_0ii+0x62>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	41 f4       	brne	.+16     	; 0x1376 <_Z41__static_initialization_and_destruction_0ii+0x62>
    1366:	83 e3       	ldi	r24, 0x33	; 51
    1368:	95 e0       	ldi	r25, 0x05	; 5
    136a:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN10GsmManagerD1Ev>
#include "avr/eeprom.h"

//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
//RmMemManager mem(IS_SENSOR_MOCK);
GpsManager gps(IS_GPS_MOCK);
    136e:	88 e1       	ldi	r24, 0x18	; 24
    1370:	94 e0       	ldi	r25, 0x04	; 4
    1372:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN10GpsManagerD1Ev>
//
	delay(1000);
//
	//if (++_timerCounter == 3*60)//Run once per startup, at after 3 mins
		//on3MinutesElapsed();
}
    1376:	00 00       	nop
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <_GLOBAL__sub_I_fona>:
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	6f ef       	ldi	r22, 0xFF	; 255
    1390:	7f ef       	ldi	r23, 0xFF	; 255
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 8a 09 	call	0x1314	; 0x1314 <_Z41__static_initialization_and_destruction_0ii>
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <_GLOBAL__sub_D_fona>:
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	6f ef       	ldi	r22, 0xFF	; 255
    13aa:	7f ef       	ldi	r23, 0xFF	; 255
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 8a 09 	call	0x1314	; 0x1314 <_Z41__static_initialization_and_destruction_0ii>
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    13c2:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <twi_state>
  twi_sendStop = true;		// default value
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <twi_sendStop>
  twi_inRepStart = false;
    13cc:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    13d0:	82 e1       	ldi	r24, 0x12	; 18
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
  digitalWrite(SCL, 1);
    13d8:	83 e1       	ldi	r24, 0x13	; 19
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    13e0:	89 eb       	ldi	r24, 0xB9	; 185
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	29 eb       	ldi	r18, 0xB9	; 185
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	f9 01       	movw	r30, r18
    13ea:	20 81       	ld	r18, Z
    13ec:	2e 7f       	andi	r18, 0xFE	; 254
    13ee:	fc 01       	movw	r30, r24
    13f0:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    13f2:	89 eb       	ldi	r24, 0xB9	; 185
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	29 eb       	ldi	r18, 0xB9	; 185
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	f9 01       	movw	r30, r18
    13fc:	20 81       	ld	r18, Z
    13fe:	2d 7f       	andi	r18, 0xFD	; 253
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    1404:	88 eb       	ldi	r24, 0xB8	; 184
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	28 e4       	ldi	r18, 0x48	; 72
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    140e:	8c eb       	ldi	r24, 0xBC	; 188
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	25 e4       	ldi	r18, 0x45	; 69
    1414:	fc 01       	movw	r30, r24
    1416:	20 83       	st	Z, r18
}
    1418:	00 00       	nop
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    1428:	8c eb       	ldi	r24, 0xBC	; 188
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	2c eb       	ldi	r18, 0xBC	; 188
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	f9 01       	movw	r30, r18
    1432:	20 81       	ld	r18, Z
    1434:	2a 7b       	andi	r18, 0xBA	; 186
    1436:	fc 01       	movw	r30, r24
    1438:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    143a:	82 e1       	ldi	r24, 0x12	; 18
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
  digitalWrite(SCL, 0);
    1442:	83 e1       	ldi	r24, 0x13	; 19
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
}
    144a:	00 00       	nop
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	1f 92       	push	r1
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    145e:	8a eb       	ldi	r24, 0xBA	; 186
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	29 81       	ldd	r18, Y+1	; 0x01
    1464:	22 0f       	add	r18, r18
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
}
    146a:	00 00       	nop
    146c:	0f 90       	pop	r0
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <twi_setFrequency+0xa>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <twi_setFrequency+0xc>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	69 83       	std	Y+1, r22	; 0x01
    1486:	7a 83       	std	Y+2, r23	; 0x02
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    148c:	08 eb       	ldi	r16, 0xB8	; 184
    148e:	10 e0       	ldi	r17, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	94 e2       	ldi	r25, 0x24	; 36
    1494:	a4 ef       	ldi	r26, 0xF4	; 244
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	29 81       	ldd	r18, Y+1	; 0x01
    149a:	3a 81       	ldd	r19, Y+2	; 0x02
    149c:	4b 81       	ldd	r20, Y+3	; 0x03
    149e:	5c 81       	ldd	r21, Y+4	; 0x04
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__udivmodsi4>
    14a8:	da 01       	movw	r26, r20
    14aa:	c9 01       	movw	r24, r18
    14ac:	40 97       	sbiw	r24, 0x10	; 16
    14ae:	a1 09       	sbc	r26, r1
    14b0:	b1 09       	sbc	r27, r1
    14b2:	b6 95       	lsr	r27
    14b4:	a7 95       	ror	r26
    14b6:	97 95       	ror	r25
    14b8:	87 95       	ror	r24
    14ba:	f8 01       	movw	r30, r16
    14bc:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    14be:	00 00       	nop
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <twi_readFrom+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <twi_readFrom+0x8>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <twi_readFrom+0xa>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	7c 83       	std	Y+4, r23	; 0x04
    14e4:	6b 83       	std	Y+3, r22	; 0x03
    14e6:	4d 83       	std	Y+5, r20	; 0x05
    14e8:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	81 32       	cpi	r24, 0x21	; 33
    14ee:	18 f0       	brcs	.+6      	; 0x14f6 <twi_readFrom+0x24>
    return 0;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	6b c0       	rjmp	.+214    	; 0x15ca <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    14f4:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    14f6:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <twi_state>
    14fa:	88 23       	and	r24, r24
    14fc:	d9 f7       	brne	.-10     	; 0x14f4 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <twi_state>
  twi_sendStop = sendStop;
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1510:	10 92 7e 06 	sts	0x067E, r1	; 0x80067e <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	81 50       	subi	r24, 0x01	; 1
    1518:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <twi_slarw>
  twi_slarw |= address << 1;
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	98 2f       	mov	r25, r24
    152e:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <twi_slarw>
    1532:	89 2b       	or	r24, r25
    1534:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <twi_slarw>

  if (true == twi_inRepStart) {
    1538:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <twi_inRepStart>
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	c1 f4       	brne	.+48     	; 0x1570 <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1540:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    1544:	8b eb       	ldi	r24, 0xBB	; 187
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	20 91 57 06 	lds	r18, 0x0657	; 0x800657 <twi_slarw>
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    1550:	8c eb       	ldi	r24, 0xBC	; 188
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	fc 01       	movw	r30, r24
    1556:	80 81       	ld	r24, Z
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 70       	andi	r24, 0x08	; 8
    155e:	99 27       	eor	r25, r25
    1560:	89 2b       	or	r24, r25
    1562:	81 f7       	brne	.-32     	; 0x1544 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1564:	8c eb       	ldi	r24, 0xBC	; 188
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	25 ec       	ldi	r18, 0xC5	; 197
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
    156e:	07 c0       	rjmp	.+14     	; 0x157e <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1570:	8c eb       	ldi	r24, 0xBC	; 188
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	25 ee       	ldi	r18, 0xE5	; 229
    1576:	fc 01       	movw	r30, r24
    1578:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    157a:	01 c0       	rjmp	.+2      	; 0x157e <twi_readFrom+0xac>
    continue;
    157c:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    157e:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <twi_state>
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	d9 f3       	breq	.-10     	; 0x157c <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    1586:	90 91 7e 06 	lds	r25, 0x067E	; 0x80067e <twi_masterBufferIndex>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	98 17       	cp	r25, r24
    158e:	18 f4       	brcc	.+6      	; 0x1596 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    1590:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <twi_masterBufferIndex>
    1594:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1596:	19 82       	std	Y+1, r1	; 0x01
    1598:	13 c0       	rjmp	.+38     	; 0x15c0 <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	29 81       	ldd	r18, Y+1	; 0x01
    15aa:	22 2f       	mov	r18, r18
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	22 5a       	subi	r18, 0xA2	; 162
    15b0:	39 4f       	sbci	r19, 0xF9	; 249
    15b2:	f9 01       	movw	r30, r18
    15b4:	20 81       	ld	r18, Z
    15b6:	fc 01       	movw	r30, r24
    15b8:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	99 81       	ldd	r25, Y+1	; 0x01
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	98 17       	cp	r25, r24
    15c6:	48 f3       	brcs	.-46     	; 0x159a <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15ca:	26 96       	adiw	r28, 0x06	; 6
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    15dc:	0f 93       	push	r16
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	27 97       	sbiw	r28, 0x07	; 7
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    15f4:	7c 83       	std	Y+4, r23	; 0x04
    15f6:	6b 83       	std	Y+3, r22	; 0x03
    15f8:	4d 83       	std	Y+5, r20	; 0x05
    15fa:	2e 83       	std	Y+6, r18	; 0x06
    15fc:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	81 32       	cpi	r24, 0x21	; 33
    1602:	18 f0       	brcs	.+6      	; 0x160a <twi_writeTo+0x2e>
    return 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	76 c0       	rjmp	.+236    	; 0x16f4 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    1608:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    160a:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <twi_state>
    160e:	88 23       	and	r24, r24
    1610:	d9 f7       	brne	.-10     	; 0x1608 <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <twi_state>
  twi_sendStop = sendStop;
    1618:	8f 81       	ldd	r24, Y+7	; 0x07
    161a:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1624:	10 92 7e 06 	sts	0x067E, r1	; 0x80067e <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	13 c0       	rjmp	.+38     	; 0x1658 <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	29 81       	ldd	r18, Y+1	; 0x01
    163a:	22 2f       	mov	r18, r18
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	4b 81       	ldd	r20, Y+3	; 0x03
    1640:	5c 81       	ldd	r21, Y+4	; 0x04
    1642:	24 0f       	add	r18, r20
    1644:	35 1f       	adc	r19, r21
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	82 5a       	subi	r24, 0xA2	; 162
    164c:	99 4f       	sbci	r25, 0xF9	; 249
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	99 81       	ldd	r25, Y+1	; 0x01
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	98 17       	cp	r25, r24
    165e:	48 f3       	brcs	.-46     	; 0x1632 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    1660:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <twi_slarw>
  twi_slarw |= address << 1;
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	98 2f       	mov	r25, r24
    1670:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <twi_slarw>
    1674:	89 2b       	or	r24, r25
    1676:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    167a:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <twi_inRepStart>
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	c1 f4       	brne	.+48     	; 0x16b2 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1682:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    1686:	8b eb       	ldi	r24, 0xBB	; 187
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	20 91 57 06 	lds	r18, 0x0657	; 0x800657 <twi_slarw>
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    1692:	8c eb       	ldi	r24, 0xBC	; 188
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	fc 01       	movw	r30, r24
    1698:	80 81       	ld	r24, Z
    169a:	88 2f       	mov	r24, r24
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	88 70       	andi	r24, 0x08	; 8
    16a0:	99 27       	eor	r25, r25
    16a2:	89 2b       	or	r24, r25
    16a4:	81 f7       	brne	.-32     	; 0x1686 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    16a6:	8c eb       	ldi	r24, 0xBC	; 188
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	25 ec       	ldi	r18, 0xC5	; 197
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
    16b0:	07 c0       	rjmp	.+14     	; 0x16c0 <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    16b2:	8c eb       	ldi	r24, 0xBC	; 188
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	25 ee       	ldi	r18, 0xE5	; 229
    16b8:	fc 01       	movw	r30, r24
    16ba:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <twi_writeTo+0xe4>
    continue;
    16be:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    16c0:	8e 81       	ldd	r24, Y+6	; 0x06
    16c2:	88 23       	and	r24, r24
    16c4:	21 f0       	breq	.+8      	; 0x16ce <twi_writeTo+0xf2>
    16c6:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <twi_state>
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	c1 f3       	breq	.-16     	; 0x16be <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    16ce:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <twi_error>
    16d2:	8f 3f       	cpi	r24, 0xFF	; 255
    16d4:	11 f4       	brne	.+4      	; 0x16da <twi_writeTo+0xfe>
    return 0;	// success
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0d c0       	rjmp	.+26     	; 0x16f4 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    16da:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <twi_error>
    16de:	80 32       	cpi	r24, 0x20	; 32
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	07 c0       	rjmp	.+14     	; 0x16f4 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    16e6:	80 91 c3 06 	lds	r24, 0x06C3	; 0x8006c3 <twi_error>
    16ea:	80 33       	cpi	r24, 0x30	; 48
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    16f2:	84 e0       	ldi	r24, 0x04	; 4
}
    16f4:	27 96       	adiw	r28, 0x07	; 7
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	00 d0       	rcall	.+0      	; 0x170e <twi_transmit+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <twi_transmit+0x8>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9b 83       	std	Y+3, r25	; 0x03
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    171a:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_txBufferLength>
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	82 0f       	add	r24, r18
    172a:	93 1f       	adc	r25, r19
    172c:	81 97       	sbiw	r24, 0x21	; 33
    172e:	14 f0       	brlt	.+4      	; 0x1734 <twi_transmit+0x2c>
    return 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	2c c0       	rjmp	.+88     	; 0x178c <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    1734:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <twi_state>
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	11 f0       	breq	.+4      	; 0x1740 <twi_transmit+0x38>
    return 2;
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	26 c0       	rjmp	.+76     	; 0x178c <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    1740:	19 82       	std	Y+1, r1	; 0x01
    1742:	19 c0       	rjmp	.+50     	; 0x1776 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    1744:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_txBufferLength>
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	82 0f       	add	r24, r18
    1754:	93 1f       	adc	r25, r19
    1756:	29 81       	ldd	r18, Y+1	; 0x01
    1758:	22 2f       	mov	r18, r18
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a 81       	ldd	r20, Y+2	; 0x02
    175e:	5b 81       	ldd	r21, Y+3	; 0x03
    1760:	24 0f       	add	r18, r20
    1762:	35 1f       	adc	r19, r21
    1764:	f9 01       	movw	r30, r18
    1766:	20 81       	ld	r18, Z
    1768:	80 58       	subi	r24, 0x80	; 128
    176a:	99 4f       	sbci	r25, 0xF9	; 249
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	8f 5f       	subi	r24, 0xFF	; 255
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	99 81       	ldd	r25, Y+1	; 0x01
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	98 17       	cp	r25, r24
    177c:	18 f3       	brcs	.-58     	; 0x1744 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    177e:	90 91 a1 06 	lds	r25, 0x06A1	; 0x8006a1 <twi_txBufferLength>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	89 0f       	add	r24, r25
    1786:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_txBufferLength>
  
  return 0;
    178a:	80 e0       	ldi	r24, 0x00	; 0
}
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <twi_attachSlaveRxEvent+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <twi_onSlaveReceive+0x1>
    17b0:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <twi_onSlaveReceive>
}
    17b4:	00 00       	nop
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <twi_attachSlaveTxEvent+0x6>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	9a 81       	ldd	r25, Y+2	; 0x02
    17d2:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <twi_onSlaveTransmit+0x1>
    17d6:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <twi_onSlaveTransmit>
}
    17da:	00 00       	nop
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	1f 92       	push	r1
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	88 23       	and	r24, r24
    17f6:	31 f0       	breq	.+12     	; 0x1804 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17f8:	8c eb       	ldi	r24, 0xBC	; 188
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	25 ec       	ldi	r18, 0xC5	; 197
    17fe:	fc 01       	movw	r30, r24
    1800:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    1802:	05 c0       	rjmp	.+10     	; 0x180e <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1804:	8c eb       	ldi	r24, 0xBC	; 188
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	25 e8       	ldi	r18, 0x85	; 133
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18
  }
}
    180e:	00 00       	nop
    1810:	0f 90       	pop	r0
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1820:	8c eb       	ldi	r24, 0xBC	; 188
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	25 ed       	ldi	r18, 0xD5	; 213
    1826:	fc 01       	movw	r30, r24
    1828:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    182a:	01 c0       	rjmp	.+2      	; 0x182e <twi_stop+0x16>
    continue;
    182c:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    182e:	8c eb       	ldi	r24, 0xBC	; 188
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	80 71       	andi	r24, 0x10	; 16
    183c:	99 27       	eor	r25, r25
    183e:	89 2b       	or	r24, r25
    1840:	a9 f7       	brne	.-22     	; 0x182c <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1842:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <twi_state>
}
    1846:	00 00       	nop
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	08 95       	ret

0000184e <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1856:	8c eb       	ldi	r24, 0xBC	; 188
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	25 ec       	ldi	r18, 0xC5	; 197
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    1860:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <twi_state>
}
    1864:	00 00       	nop
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <__vector_24>:

ISR(TWI_vect)
{
    186c:	1f 92       	push	r1
    186e:	0f 92       	push	r0
    1870:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	2f 93       	push	r18
    187a:	3f 93       	push	r19
    187c:	4f 93       	push	r20
    187e:	5f 93       	push	r21
    1880:	6f 93       	push	r22
    1882:	7f 93       	push	r23
    1884:	8f 93       	push	r24
    1886:	9f 93       	push	r25
    1888:	af 93       	push	r26
    188a:	bf 93       	push	r27
    188c:	ef 93       	push	r30
    188e:	ff 93       	push	r31
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    1898:	89 eb       	ldi	r24, 0xB9	; 185
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	fc 01       	movw	r30, r24
    189e:	80 81       	ld	r24, Z
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	88 7f       	andi	r24, 0xF8	; 248
    18a6:	99 27       	eor	r25, r25
    18a8:	09 2e       	mov	r0, r25
    18aa:	00 0c       	add	r0, r0
    18ac:	aa 0b       	sbc	r26, r26
    18ae:	bb 0b       	sbc	r27, r27
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	28 ef       	ldi	r18, 0xF8	; 248
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	84 1b       	sub	r24, r20
    18ba:	95 0b       	sbc	r25, r21
    18bc:	28 17       	cp	r18, r24
    18be:	39 07       	cpc	r19, r25
    18c0:	08 f4       	brcc	.+2      	; 0x18c4 <__vector_24+0x58>
    18c2:	17 c1       	rjmp	.+558    	; 0x1af2 <__vector_24+0x286>
    18c4:	8c 5c       	subi	r24, 0xCC	; 204
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	fc 01       	movw	r30, r24
    18ca:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    18ce:	8b eb       	ldi	r24, 0xBB	; 187
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	20 91 57 06 	lds	r18, 0x0657	; 0x800657 <twi_slarw>
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
      twi_reply(1);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      break;
    18e0:	08 c1       	rjmp	.+528    	; 0x1af2 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    18e2:	90 91 7e 06 	lds	r25, 0x067E	; 0x80067e <twi_masterBufferIndex>
    18e6:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <twi_masterBufferLength>
    18ea:	98 17       	cp	r25, r24
    18ec:	a0 f4       	brcc	.+40     	; 0x1916 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    18ee:	8b eb       	ldi	r24, 0xBB	; 187
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <twi_masterBufferIndex>
    18f6:	31 e0       	ldi	r19, 0x01	; 1
    18f8:	32 0f       	add	r19, r18
    18fa:	30 93 7e 06 	sts	0x067E, r19	; 0x80067e <twi_masterBufferIndex>
    18fe:	22 2f       	mov	r18, r18
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	22 5a       	subi	r18, 0xA2	; 162
    1904:	39 4f       	sbci	r19, 0xF9	; 249
    1906:	f9 01       	movw	r30, r18
    1908:	20 81       	ld	r18, Z
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
        twi_reply(1);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    1914:	ee c0       	rjmp	.+476    	; 0x1af2 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1916:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <twi_sendStop>
    191a:	88 23       	and	r24, r24
    191c:	19 f0       	breq	.+6      	; 0x1924 <__vector_24+0xb8>
          twi_stop();
    191e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    1922:	e7 c0       	rjmp	.+462    	; 0x1af2 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    192a:	8c eb       	ldi	r24, 0xBC	; 188
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	24 ea       	ldi	r18, 0xA4	; 164
    1930:	fc 01       	movw	r30, r24
    1932:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    1934:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <twi_state>
	}
      }
      break;
    1938:	dc c0       	rjmp	.+440    	; 0x1af2 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <twi_error>
      twi_stop();
    1940:	0e 94 0c 0c 	call	0x1818	; 0x1818 <twi_stop>
      break;
    1944:	d6 c0       	rjmp	.+428    	; 0x1af2 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1946:	80 e3       	ldi	r24, 0x30	; 48
    1948:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <twi_error>
      twi_stop();
    194c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <twi_stop>
      break;
    1950:	d0 c0       	rjmp	.+416    	; 0x1af2 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1952:	88 e3       	ldi	r24, 0x38	; 56
    1954:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <twi_error>
      twi_releaseBus();
    1958:	0e 94 27 0c 	call	0x184e	; 0x184e <twi_releaseBus>
      break;
    195c:	ca c0       	rjmp	.+404    	; 0x1af2 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    195e:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <twi_masterBufferIndex>
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	98 0f       	add	r25, r24
    1966:	90 93 7e 06 	sts	0x067E, r25	; 0x80067e <twi_masterBufferIndex>
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	2b eb       	ldi	r18, 0xBB	; 187
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	82 5a       	subi	r24, 0xA2	; 162
    1978:	99 4f       	sbci	r25, 0xF9	; 249
    197a:	fc 01       	movw	r30, r24
    197c:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    197e:	90 91 7e 06 	lds	r25, 0x067E	; 0x80067e <twi_masterBufferIndex>
    1982:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <twi_masterBufferLength>
    1986:	98 17       	cp	r25, r24
    1988:	20 f4       	brcc	.+8      	; 0x1992 <__vector_24+0x126>
        twi_reply(1);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    1990:	b0 c0       	rjmp	.+352    	; 0x1af2 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      }
      break;
    1998:	ac c0       	rjmp	.+344    	; 0x1af2 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    199a:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <twi_masterBufferIndex>
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	98 0f       	add	r25, r24
    19a2:	90 93 7e 06 	sts	0x067E, r25	; 0x80067e <twi_masterBufferIndex>
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	2b eb       	ldi	r18, 0xBB	; 187
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	f9 01       	movw	r30, r18
    19b0:	20 81       	ld	r18, Z
    19b2:	82 5a       	subi	r24, 0xA2	; 162
    19b4:	99 4f       	sbci	r25, 0xF9	; 249
    19b6:	fc 01       	movw	r30, r24
    19b8:	20 83       	st	Z, r18
	if (twi_sendStop)
    19ba:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <twi_sendStop>
    19be:	88 23       	and	r24, r24
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <__vector_24+0x15c>
          twi_stop();
    19c2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    19c6:	95 c0       	rjmp	.+298    	; 0x1af2 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    19ce:	8c eb       	ldi	r24, 0xBC	; 188
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	24 ea       	ldi	r18, 0xA4	; 164
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    19d8:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <twi_state>
	}    
	break;
    19dc:	8a c0       	rjmp	.+276    	; 0x1af2 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    19de:	0e 94 0c 0c 	call	0x1818	; 0x1818 <twi_stop>
      break;
    19e2:	87 c0       	rjmp	.+270    	; 0x1af2 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    19ea:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <twi_rxBufferIndex>
      twi_reply(1);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      break;
    19f4:	7e c0       	rjmp	.+252    	; 0x1af2 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    19f6:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <twi_rxBufferIndex>
    19fa:	80 32       	cpi	r24, 0x20	; 32
    19fc:	a0 f4       	brcc	.+40     	; 0x1a26 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    19fe:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <twi_rxBufferIndex>
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	98 0f       	add	r25, r24
    1a06:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <twi_rxBufferIndex>
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	2b eb       	ldi	r18, 0xBB	; 187
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f9 01       	movw	r30, r18
    1a14:	20 81       	ld	r18, Z
    1a16:	8e 55       	subi	r24, 0x5E	; 94
    1a18:	99 4f       	sbci	r25, 0xF9	; 249
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	20 83       	st	Z, r18
        twi_reply(1);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    1a24:	66 c0       	rjmp	.+204    	; 0x1af2 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      }
      break;
    1a2c:	62 c0       	rjmp	.+196    	; 0x1af2 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1a2e:	0e 94 27 0c 	call	0x184e	; 0x184e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a32:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <twi_rxBufferIndex>
    1a36:	80 32       	cpi	r24, 0x20	; 32
    1a38:	40 f4       	brcc	.+16     	; 0x1a4a <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1a3a:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <twi_rxBufferIndex>
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	8e 55       	subi	r24, 0x5E	; 94
    1a44:	99 4f       	sbci	r25, 0xF9	; 249
    1a46:	fc 01       	movw	r30, r24
    1a48:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1a4a:	20 91 5c 06 	lds	r18, 0x065C	; 0x80065c <twi_onSlaveReceive>
    1a4e:	30 91 5d 06 	lds	r19, 0x065D	; 0x80065d <twi_onSlaveReceive+0x1>
    1a52:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <twi_rxBufferIndex>
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	82 ea       	ldi	r24, 0xA2	; 162
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	f9 01       	movw	r30, r18
    1a62:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1a64:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <twi_rxBufferIndex>
      break;
    1a68:	44 c0       	rjmp	.+136    	; 0x1af2 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      break;
    1a70:	40 c0       	rjmp	.+128    	; 0x1af2 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1a78:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1a7c:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1a80:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <twi_onSlaveTransmit>
    1a84:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <twi_onSlaveTransmit+0x1>
    1a88:	fc 01       	movw	r30, r24
    1a8a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1a8c:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_txBufferLength>
    1a90:	88 23       	and	r24, r24
    1a92:	29 f4       	brne	.+10     	; 0x1a9e <__vector_24+0x232>
        twi_txBufferLength = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1a9a:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1a9e:	8b eb       	ldi	r24, 0xBB	; 187
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	20 91 a0 06 	lds	r18, 0x06A0	; 0x8006a0 <twi_txBufferIndex>
    1aa6:	31 e0       	ldi	r19, 0x01	; 1
    1aa8:	32 0f       	add	r19, r18
    1aaa:	30 93 a0 06 	sts	0x06A0, r19	; 0x8006a0 <twi_txBufferIndex>
    1aae:	22 2f       	mov	r18, r18
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	20 58       	subi	r18, 0x80	; 128
    1ab4:	39 4f       	sbci	r19, 0xF9	; 249
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	20 81       	ld	r18, Z
    1aba:	fc 01       	movw	r30, r24
    1abc:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1abe:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <twi_txBufferIndex>
    1ac2:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_txBufferLength>
    1ac6:	98 17       	cp	r25, r24
    1ac8:	20 f4       	brcc	.+8      	; 0x1ad2 <__vector_24+0x266>
        twi_reply(1);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    1ad0:	10 c0       	rjmp	.+32     	; 0x1af2 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      }
      break;
    1ad8:	0c c0       	rjmp	.+24     	; 0x1af2 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    1ae0:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <twi_state>
      break;
    1ae4:	06 c0       	rjmp	.+12     	; 0x1af2 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ae6:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <twi_error>
      twi_stop();
    1aea:	0e 94 0c 0c 	call	0x1818	; 0x1818 <twi_stop>
      break;
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    1af0:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1af2:	00 00       	nop
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <_ZN7TwoWireC1Ev+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	0e 94 b9 12 	call	0x2572	; 0x2572 <_ZN6StreamC1Ev>
    1b32:	20 e4       	ldi	r18, 0x40	; 64
    1b34:	32 e0       	ldi	r19, 0x02	; 2
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	31 83       	std	Z+1, r19	; 0x01
    1b3e:	20 83       	st	Z, r18
{
}
    1b40:	00 00       	nop
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <_ZN7TwoWire5beginEv+0x6>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    1b5a:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    1b5e:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    1b62:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    1b66:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    1b6a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <twi_init>
}
    1b6e:	00 00       	nop
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <_ZN7TwoWire5beginEh+0x6>
    1b80:	1f 92       	push	r1
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	6b 83       	std	Y+3, r22	; 0x03
  twi_setAddress(address);
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	0e 94 29 0a 	call	0x1452	; 0x1452 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    1b92:	8a ec       	ldi	r24, 0xCA	; 202
    1b94:	90 e1       	ldi	r25, 0x10	; 16
    1b96:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    1b9a:	8d e7       	ldi	r24, 0x7D	; 125
    1b9c:	90 e1       	ldi	r25, 0x10	; 16
    1b9e:	0e 94 cd 0b 	call	0x179a	; 0x179a <twi_attachSlaveRxEvent>
  begin();
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN7TwoWire5beginEv>
}
    1baa:	00 00       	nop
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <_ZN7TwoWire5beginEi+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <_ZN7TwoWire5beginEi+0x8>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	7c 83       	std	Y+4, r23	; 0x04
    1bca:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	62 2f       	mov	r22, r18
    1bd4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN7TwoWire5beginEh>
}
    1bd8:	00 00       	nop
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <_ZN7TwoWire3endEv+0x6>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    1bf6:	0e 94 10 0a 	call	0x1420	; 0x1420 <twi_disable>
}
    1bfa:	00 00       	nop
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <_ZN7TwoWire8setClockEm+0x6>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <_ZN7TwoWire8setClockEm+0x8>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <_ZN7TwoWire8setClockEm+0xa>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	4b 83       	std	Y+3, r20	; 0x03
    1c1a:	5c 83       	std	Y+4, r21	; 0x04
    1c1c:	6d 83       	std	Y+5, r22	; 0x05
    1c1e:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	ad 81       	ldd	r26, Y+5	; 0x05
    1c26:	be 81       	ldd	r27, Y+6	; 0x06
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <twi_setFrequency>
}
    1c30:	00 00       	nop
    1c32:	26 96       	adiw	r28, 0x06	; 6
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    1c44:	cf 92       	push	r12
    1c46:	ef 92       	push	r14
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	2b 97       	sbiw	r28, 0x0b	; 11
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	9b 83       	std	Y+3, r25	; 0x03
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	6c 83       	std	Y+4, r22	; 0x04
    1c66:	4d 83       	std	Y+5, r20	; 0x05
    1c68:	0e 83       	std	Y+6, r16	; 0x06
    1c6a:	1f 83       	std	Y+7, r17	; 0x07
    1c6c:	28 87       	std	Y+8, r18	; 0x08
    1c6e:	39 87       	std	Y+9, r19	; 0x09
    1c70:	ea 86       	std	Y+10, r14	; 0x0a
    1c72:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    1c74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c76:	88 23       	and	r24, r24
    1c78:	e9 f1       	breq	.+122    	; 0x1cf4 <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	6c 81       	ldd	r22, Y+4	; 0x04
    1c80:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    1c84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	10 f0       	brcs	.+4      	; 0x1c8e <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    1c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	98 0f       	add	r25, r24
    1c94:	9a 87       	std	Y+10, r25	; 0x0a
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	99 23       	and	r25, r25
    1ca0:	21 f1       	breq	.+72     	; 0x1cea <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 81       	ld	r18, Z
    1cb0:	31 81       	ldd	r19, Z+1	; 0x01
    1cb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	ac 01       	movw	r20, r24
    1cba:	44 0f       	add	r20, r20
    1cbc:	55 1f       	adc	r21, r21
    1cbe:	44 0f       	add	r20, r20
    1cc0:	55 1f       	adc	r21, r21
    1cc2:	44 0f       	add	r20, r20
    1cc4:	55 1f       	adc	r21, r21
    1cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cca:	a8 85       	ldd	r26, Y+8	; 0x08
    1ccc:	b9 85       	ldd	r27, Y+9	; 0x09
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <_ZN7TwoWire11requestFromEhhmhh+0x94>
    1cd0:	b6 95       	lsr	r27
    1cd2:	a7 95       	ror	r26
    1cd4:	97 95       	ror	r25
    1cd6:	87 95       	ror	r24
    1cd8:	4a 95       	dec	r20
    1cda:	d2 f7       	brpl	.-12     	; 0x1cd0 <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	64 2f       	mov	r22, r20
    1ce4:	f9 01       	movw	r30, r18
    1ce6:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    1ce8:	d2 cf       	rjmp	.-92     	; 0x1c8e <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	81 32       	cpi	r24, 0x21	; 33
    1cf8:	10 f0       	brcs	.+4      	; 0x1cfe <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    1cfa:	80 e2       	ldi	r24, 0x20	; 32
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    1cfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d00:	4d 81       	ldd	r20, Y+5	; 0x05
    1d02:	64 ec       	ldi	r22, 0xC4	; 196
    1d04:	76 e0       	ldi	r23, 0x06	; 6
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <twi_readFrom>
    1d0c:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1d0e:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>

  return read;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1a:	2b 96       	adiw	r28, 0x0b	; 11
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ef 90       	pop	r14
    1d30:	cf 90       	pop	r12
    1d32:	08 95       	ret

00001d34 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    1d34:	cf 92       	push	r12
    1d36:	ef 92       	push	r14
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <_ZN7TwoWire11requestFromEhhh+0xe>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <_ZN7TwoWire11requestFromEhhh+0x10>
    1d44:	1f 92       	push	r1
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	6b 83       	std	Y+3, r22	; 0x03
    1d50:	4c 83       	std	Y+4, r20	; 0x04
    1d52:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	cd 80       	ldd	r12, Y+5	; 0x05
    1d5a:	e1 2c       	mov	r14, r1
    1d5c:	00 e0       	ldi	r16, 0x00	; 0
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
    1d60:	98 01       	movw	r18, r16
    1d62:	4c 81       	ldd	r20, Y+4	; 0x04
    1d64:	6b 81       	ldd	r22, Y+3	; 0x03
    1d66:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN7TwoWire11requestFromEhhmhh>
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ef 90       	pop	r14
    1d7e:	cf 90       	pop	r12
    1d80:	08 95       	ret

00001d82 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <_ZN7TwoWire11requestFromEhh+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <_ZN7TwoWire11requestFromEhh+0x8>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	6b 83       	std	Y+3, r22	; 0x03
    1d94:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d9e:	6b 81       	ldd	r22, Y+3	; 0x03
    1da0:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_ZN7TwoWire11requestFromEhhh>
}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <_ZN7TwoWire11requestFromEii+0x6>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <_ZN7TwoWire11requestFromEii+0x8>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <_ZN7TwoWire11requestFromEii+0xa>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	7c 83       	std	Y+4, r23	; 0x04
    1dc6:	6b 83       	std	Y+3, r22	; 0x03
    1dc8:	5e 83       	std	Y+6, r21	; 0x06
    1dca:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    1dcc:	4d 81       	ldd	r20, Y+5	; 0x05
    1dce:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd4:	21 e0       	ldi	r18, 0x01	; 1
    1dd6:	63 2f       	mov	r22, r19
    1dd8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_ZN7TwoWire11requestFromEhhh>
}
    1ddc:	26 96       	adiw	r28, 0x06	; 6
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	28 97       	sbiw	r28, 0x08	; 8
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	7c 83       	std	Y+4, r23	; 0x04
    1e08:	6b 83       	std	Y+3, r22	; 0x03
    1e0a:	5e 83       	std	Y+6, r21	; 0x06
    1e0c:	4d 83       	std	Y+5, r20	; 0x05
    1e0e:	38 87       	std	Y+8, r19	; 0x08
    1e10:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    1e12:	2f 81       	ldd	r18, Y+7	; 0x07
    1e14:	4d 81       	ldd	r20, Y+5	; 0x05
    1e16:	3b 81       	ldd	r19, Y+3	; 0x03
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	63 2f       	mov	r22, r19
    1e1e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_ZN7TwoWire11requestFromEhhh>
}
    1e22:	28 96       	adiw	r28, 0x08	; 8
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <_ZN7TwoWire17beginTransmissionEh+0x6>
    1e3a:	1f 92       	push	r1
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1e52:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    1e56:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire14txBufferLengthE>
}
    1e5a:	00 00       	nop
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <_ZN7TwoWire17beginTransmissionEi+0x6>
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <_ZN7TwoWire17beginTransmissionEi+0x8>
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	7c 83       	std	Y+4, r23	; 0x04
    1e7a:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	9a 81       	ldd	r25, Y+2	; 0x02
    1e82:	62 2f       	mov	r22, r18
    1e84:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <_ZN7TwoWire17beginTransmissionEh>
}
    1e88:	00 00       	nop
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1e98:	0f 93       	push	r16
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <_ZN7TwoWire15endTransmissionEh+0x8>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <_ZN7TwoWire15endTransmissionEh+0xa>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
    1eaa:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    1eac:	90 91 08 07 	lds	r25, 0x0708	; 0x800708 <_ZN7TwoWire14txBufferLengthE>
    1eb0:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <_ZN7TwoWire9txAddressE>
    1eb4:	0c 81       	ldd	r16, Y+4	; 0x04
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	49 2f       	mov	r20, r25
    1eba:	67 ee       	ldi	r22, 0xE7	; 231
    1ebc:	76 e0       	ldi	r23, 0x06	; 6
    1ebe:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <twi_writeTo>
    1ec2:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1ec4:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    1ec8:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    1ecc:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <_ZN7TwoWire12transmittingE>
  return ret;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <_ZN7TwoWire15endTransmissionEv+0x6>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <_ZN7TwoWire15endTransmissionEh>
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <_ZN7TwoWire5writeEh+0x6>
    1f0a:	1f 92       	push	r1
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    1f16:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <_ZN7TwoWire12transmittingE>
    1f1a:	88 23       	and	r24, r24
    1f1c:	01 f1       	breq	.+64     	; 0x1f5e <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    1f1e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <_ZN7TwoWire14txBufferLengthE>
    1f22:	80 32       	cpi	r24, 0x20	; 32
    1f24:	48 f0       	brcs	.+18     	; 0x1f38 <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	0e 94 87 12 	call	0x250e	; 0x250e <_ZN5Print13setWriteErrorEi>
      return 0;
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	1a c0       	rjmp	.+52     	; 0x1f6c <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    1f38:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	2b 81       	ldd	r18, Y+3	; 0x03
    1f42:	89 51       	subi	r24, 0x19	; 25
    1f44:	99 4f       	sbci	r25, 0xF9	; 249
    1f46:	fc 01       	movw	r30, r24
    1f48:	20 83       	st	Z, r18
    ++txBufferIndex;
    1f4a:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
    1f4e:	8f 5f       	subi	r24, 0xFF	; 255
    1f50:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    1f54:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
    1f58:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <_ZN7TwoWire14txBufferLengthE>
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    1f5e:	ce 01       	movw	r24, r28
    1f60:	03 96       	adiw	r24, 0x03	; 3
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	0e 94 84 0b 	call	0x1708	; 0x1708 <twi_transmit>
  }
  return 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	08 95       	ret

00001f78 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	28 97       	sbiw	r28, 0x08	; 8
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
    1f90:	7e 83       	std	Y+6, r23	; 0x06
    1f92:	6d 83       	std	Y+5, r22	; 0x05
    1f94:	58 87       	std	Y+8, r21	; 0x08
    1f96:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    1f98:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <_ZN7TwoWire12transmittingE>
    1f9c:	88 23       	and	r24, r24
    1f9e:	21 f1       	breq	.+72     	; 0x1fe8 <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1fa0:	1a 82       	std	Y+2, r1	; 0x02
    1fa2:	19 82       	std	Y+1, r1	; 0x01
    1fa4:	29 81       	ldd	r18, Y+1	; 0x01
    1fa6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1faa:	98 85       	ldd	r25, Y+8	; 0x08
    1fac:	28 17       	cp	r18, r24
    1fae:	39 07       	cpc	r19, r25
    1fb0:	08 f5       	brcc	.+66     	; 0x1ff4 <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	20 81       	ld	r18, Z
    1fc0:	31 81       	ldd	r19, Z+1	; 0x01
    1fc2:	4d 81       	ldd	r20, Y+5	; 0x05
    1fc4:	5e 81       	ldd	r21, Y+6	; 0x06
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	84 0f       	add	r24, r20
    1fcc:	95 1f       	adc	r25, r21
    1fce:	fc 01       	movw	r30, r24
    1fd0:	40 81       	ld	r20, Z
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	64 2f       	mov	r22, r20
    1fd8:	f9 01       	movw	r30, r18
    1fda:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	de cf       	rjmp	.-68     	; 0x1fa4 <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    1fe8:	2f 81       	ldd	r18, Y+7	; 0x07
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	62 2f       	mov	r22, r18
    1ff0:	0e 94 84 0b 	call	0x1708	; 0x1708 <twi_transmit>
  }
  return quantity;
    1ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff6:	98 85       	ldd	r25, Y+8	; 0x08
}
    1ff8:	28 96       	adiw	r28, 0x08	; 8
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	08 95       	ret

0000200a <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    200a:	cf 93       	push	r28
    200c:	df 93       	push	r29
    200e:	00 d0       	rcall	.+0      	; 0x2010 <_ZN7TwoWire9availableEv+0x6>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2018:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a9 01       	movw	r20, r18
    202a:	48 1b       	sub	r20, r24
    202c:	59 0b       	sbc	r21, r25
    202e:	ca 01       	movw	r24, r20
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	00 d0       	rcall	.+0      	; 0x2040 <_ZN7TwoWire4readEv+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <_ZN7TwoWire4readEv+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    204a:	8f ef       	ldi	r24, 0xFF	; 255
    204c:	9f ef       	ldi	r25, 0xFF	; 255
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2052:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    2056:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>
    205a:	98 17       	cp	r25, r24
    205c:	88 f4       	brcc	.+34     	; 0x2080 <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    205e:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	8c 53       	subi	r24, 0x3C	; 60
    2068:	99 4f       	sbci	r25, 0xF9	; 249
    206a:	fc 01       	movw	r30, r24
    206c:	80 81       	ld	r24, Z
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    2076:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	00 d0       	rcall	.+0      	; 0x2098 <_ZN7TwoWire4peekEv+0x6>
    2098:	00 d0       	rcall	.+0      	; 0x209a <_ZN7TwoWire4peekEv+0x8>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	9f ef       	ldi	r25, 0xFF	; 255
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    20aa:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    20ae:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>
    20b2:	98 17       	cp	r25, r24
    20b4:	60 f4       	brcc	.+24     	; 0x20ce <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    20b6:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	8c 53       	subi	r24, 0x3C	; 60
    20c0:	99 4f       	sbci	r25, 0xF9	; 249
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	08 95       	ret

000020e0 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <_ZN7TwoWire5flushEv+0x6>
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    20ee:	00 00       	nop
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2102:	1f 92       	push	r1
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	7d 83       	std	Y+5, r23	; 0x05
    210e:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2110:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <_ZN7TwoWire14user_onReceiveE>
    2114:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <_ZN7TwoWire14user_onReceiveE+0x1>
    2118:	89 2b       	or	r24, r25
    211a:	89 f1       	breq	.+98     	; 0x217e <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    211c:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
    2120:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>
    2124:	98 17       	cp	r25, r24
    2126:	68 f1       	brcs	.+90     	; 0x2182 <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2128:	19 82       	std	Y+1, r1	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	28 17       	cp	r18, r24
    2136:	39 07       	cpc	r19, r25
    2138:	a4 f4       	brge	.+40     	; 0x2162 <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	29 81       	ldd	r18, Y+1	; 0x01
    2142:	22 2f       	mov	r18, r18
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a 81       	ldd	r20, Y+2	; 0x02
    2148:	5b 81       	ldd	r21, Y+3	; 0x03
    214a:	24 0f       	add	r18, r20
    214c:	35 1f       	adc	r19, r21
    214e:	f9 01       	movw	r30, r18
    2150:	20 81       	ld	r18, Z
    2152:	8c 53       	subi	r24, 0x3C	; 60
    2154:	99 4f       	sbci	r25, 0xF9	; 249
    2156:	fc 01       	movw	r30, r24
    2158:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	8f 5f       	subi	r24, 0xFF	; 255
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	e4 cf       	rjmp	.-56     	; 0x212a <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2162:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    216c:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <_ZN7TwoWire14user_onReceiveE>
    2170:	30 91 0d 07 	lds	r19, 0x070D	; 0x80070d <_ZN7TwoWire14user_onReceiveE+0x1>
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	f9 01       	movw	r30, r18
    217a:	09 95       	icall
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    217e:	00 00       	nop
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    2182:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    219c:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ZN7TwoWire14user_onRequestE>
    21a0:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <_ZN7TwoWire14user_onRequestE+0x1>
    21a4:	89 2b       	or	r24, r25
    21a6:	59 f0       	breq	.+22     	; 0x21be <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    21a8:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    21ac:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    21b0:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_ZN7TwoWire14user_onRequestE>
    21b4:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <_ZN7TwoWire14user_onRequestE+0x1>
    21b8:	fc 01       	movw	r30, r24
    21ba:	09 95       	icall
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    21be:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	08 95       	ret

000021c6 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <_ZN7TwoWire9onReceiveEPFviE+0x6>
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <_ZN7TwoWire9onReceiveEPFviE+0x8>
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	7c 83       	std	Y+4, r23	; 0x04
    21d8:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <_ZN7TwoWire14user_onReceiveE+0x1>
    21e2:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <_ZN7TwoWire14user_onReceiveE>
}
    21e6:	00 00       	nop
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	08 95       	ret

000021f6 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <_ZN7TwoWire9onRequestEPFvvE+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <_ZN7TwoWire9onRequestEPFvvE+0x8>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	7c 83       	std	Y+4, r23	; 0x04
    2208:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <_ZN7TwoWire14user_onRequestE+0x1>
    2212:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <_ZN7TwoWire14user_onRequestE>
}
    2216:	00 00       	nop
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <_Z41__static_initialization_and_destruction_0ii+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <_Z41__static_initialization_and_destruction_0ii+0x8>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	7c 83       	std	Y+4, r23	; 0x04
    2238:	6b 83       	std	Y+3, r22	; 0x03
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	41 f4       	brne	.+16     	; 0x2252 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	21 f4       	brne	.+8      	; 0x2252 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    224a:	8e e0       	ldi	r24, 0x0E	; 14
    224c:	97 e0       	ldi	r25, 0x07	; 7
    224e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN7TwoWireC1Ev>
    2252:	00 00       	nop
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	7f ef       	ldi	r23, 0xFF	; 255
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 13 11 	call	0x2226	; 0x2226 <_Z41__static_initialization_and_destruction_0ii>
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 d0       	rcall	.+0      	; 0x2282 <_ZN5PrintaSERKS_+0x6>
    2282:	00 d0       	rcall	.+0      	; 0x2284 <_ZN5PrintaSERKS_+0x8>
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	7c 83       	std	Y+4, r23	; 0x04
    228e:	6b 83       	std	Y+3, r22	; 0x03
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	fc 01       	movw	r30, r24
    2296:	22 81       	ldd	r18, Z+2	; 0x02
    2298:	33 81       	ldd	r19, Z+3	; 0x03
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	fc 01       	movw	r30, r24
    22a0:	33 83       	std	Z+3, r19	; 0x03
    22a2:	22 83       	std	Z+2, r18	; 0x02
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <_ZN6StreamaSERKS_+0x6>
    22bc:	00 d0       	rcall	.+0      	; 0x22be <_ZN6StreamaSERKS_+0x8>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	7c 83       	std	Y+4, r23	; 0x04
    22c8:	6b 83       	std	Y+3, r22	; 0x03
    22ca:	2b 81       	ldd	r18, Y+3	; 0x03
    22cc:	3c 81       	ldd	r19, Y+4	; 0x04
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	b9 01       	movw	r22, r18
    22d4:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN5PrintaSERKS_>
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	fc 01       	movw	r30, r24
    22de:	84 81       	ldd	r24, Z+4	; 0x04
    22e0:	95 81       	ldd	r25, Z+5	; 0x05
    22e2:	a6 81       	ldd	r26, Z+6	; 0x06
    22e4:	b7 81       	ldd	r27, Z+7	; 0x07
    22e6:	29 81       	ldd	r18, Y+1	; 0x01
    22e8:	3a 81       	ldd	r19, Y+2	; 0x02
    22ea:	f9 01       	movw	r30, r18
    22ec:	84 83       	std	Z+4, r24	; 0x04
    22ee:	95 83       	std	Z+5, r25	; 0x05
    22f0:	a6 83       	std	Z+6, r26	; 0x06
    22f2:	b7 83       	std	Z+7, r27	; 0x07
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	fc 01       	movw	r30, r24
    22fa:	80 85       	ldd	r24, Z+8	; 0x08
    22fc:	91 85       	ldd	r25, Z+9	; 0x09
    22fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    2300:	b3 85       	ldd	r27, Z+11	; 0x0b
    2302:	29 81       	ldd	r18, Y+1	; 0x01
    2304:	3a 81       	ldd	r19, Y+2	; 0x02
    2306:	f9 01       	movw	r30, r18
    2308:	80 87       	std	Z+8, r24	; 0x08
    230a:	91 87       	std	Z+9, r25	; 0x09
    230c:	a2 87       	std	Z+10, r26	; 0x0a
    230e:	b3 87       	std	Z+11, r27	; 0x0b
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	00 d0       	rcall	.+0      	; 0x2328 <_ZN13Adafruit_FONAaSERKS_+0x6>
    2328:	00 d0       	rcall	.+0      	; 0x232a <_ZN13Adafruit_FONAaSERKS_+0x8>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	7c 83       	std	Y+4, r23	; 0x04
    2334:	6b 83       	std	Y+3, r22	; 0x03
    2336:	2b 81       	ldd	r18, Y+3	; 0x03
    2338:	3c 81       	ldd	r19, Y+4	; 0x04
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	b9 01       	movw	r22, r18
    2340:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <_ZN6StreamaSERKS_>
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	fc 01       	movw	r30, r24
    234a:	24 85       	ldd	r18, Z+12	; 0x0c
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	fc 01       	movw	r30, r24
    2352:	24 87       	std	Z+12, r18	; 0x0c
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	fc 01       	movw	r30, r24
    235a:	25 85       	ldd	r18, Z+13	; 0x0d
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	fc 01       	movw	r30, r24
    2362:	25 87       	std	Z+13, r18	; 0x0d
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	ac 01       	movw	r20, r24
    236a:	42 5f       	subi	r20, 0xF2	; 242
    236c:	5f 4f       	sbci	r21, 0xFF	; 255
    236e:	8e ef       	ldi	r24, 0xFE	; 254
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	22 5f       	subi	r18, 0xF2	; 242
    2378:	3f 4f       	sbci	r19, 0xFF	; 255
    237a:	8f 3f       	cpi	r24, 0xFF	; 255
    237c:	ff ef       	ldi	r31, 0xFF	; 255
    237e:	9f 07       	cpc	r25, r31
    2380:	51 f0       	breq	.+20     	; 0x2396 <_ZN13Adafruit_FONAaSERKS_+0x74>
    2382:	f9 01       	movw	r30, r18
    2384:	60 81       	ld	r22, Z
    2386:	fa 01       	movw	r30, r20
    2388:	60 83       	st	Z, r22
    238a:	4f 5f       	subi	r20, 0xFF	; 255
    238c:	5f 4f       	sbci	r21, 0xFF	; 255
    238e:	2f 5f       	subi	r18, 0xFF	; 255
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f2 cf       	rjmp	.-28     	; 0x237a <_ZN13Adafruit_FONAaSERKS_+0x58>
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	83 5f       	subi	r24, 0xF3	; 243
    239c:	9e 4f       	sbci	r25, 0xFE	; 254
    239e:	fc 01       	movw	r30, r24
    23a0:	20 81       	ld	r18, Z
    23a2:	31 81       	ldd	r19, Z+1	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	83 5f       	subi	r24, 0xF3	; 243
    23aa:	9e 4f       	sbci	r25, 0xFE	; 254
    23ac:	fc 01       	movw	r30, r24
    23ae:	31 83       	std	Z+1, r19	; 0x01
    23b0:	20 83       	st	Z, r18
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	81 5f       	subi	r24, 0xF1	; 241
    23b8:	9e 4f       	sbci	r25, 0xFE	; 254
    23ba:	fc 01       	movw	r30, r24
    23bc:	20 81       	ld	r18, Z
    23be:	31 81       	ldd	r19, Z+1	; 0x01
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	81 5f       	subi	r24, 0xF1	; 241
    23c6:	9e 4f       	sbci	r25, 0xFE	; 254
    23c8:	fc 01       	movw	r30, r24
    23ca:	31 83       	std	Z+1, r19	; 0x01
    23cc:	20 83       	st	Z, r18
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	8f 5e       	subi	r24, 0xEF	; 239
    23d4:	9e 4f       	sbci	r25, 0xFE	; 254
    23d6:	fc 01       	movw	r30, r24
    23d8:	20 81       	ld	r18, Z
    23da:	31 81       	ldd	r19, Z+1	; 0x01
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	9a 81       	ldd	r25, Y+2	; 0x02
    23e0:	8f 5e       	subi	r24, 0xEF	; 239
    23e2:	9e 4f       	sbci	r25, 0xFE	; 254
    23e4:	fc 01       	movw	r30, r24
    23e6:	31 83       	std	Z+1, r19	; 0x01
    23e8:	20 83       	st	Z, r18
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	8d 5e       	subi	r24, 0xED	; 237
    23f0:	9e 4f       	sbci	r25, 0xFE	; 254
    23f2:	fc 01       	movw	r30, r24
    23f4:	20 81       	ld	r18, Z
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	8d 5e       	subi	r24, 0xED	; 237
    23fc:	9e 4f       	sbci	r25, 0xFE	; 254
    23fe:	fc 01       	movw	r30, r24
    2400:	20 83       	st	Z, r18
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	8c 5e       	subi	r24, 0xEC	; 236
    2408:	9e 4f       	sbci	r25, 0xFE	; 254
    240a:	fc 01       	movw	r30, r24
    240c:	20 81       	ld	r18, Z
    240e:	31 81       	ldd	r19, Z+1	; 0x01
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	8c 5e       	subi	r24, 0xEC	; 236
    2416:	9e 4f       	sbci	r25, 0xFE	; 254
    2418:	fc 01       	movw	r30, r24
    241a:	31 83       	std	Z+1, r19	; 0x01
    241c:	20 83       	st	Z, r18
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	8a 5e       	subi	r24, 0xEA	; 234
    2424:	9e 4f       	sbci	r25, 0xFE	; 254
    2426:	fc 01       	movw	r30, r24
    2428:	20 81       	ld	r18, Z
    242a:	31 81       	ldd	r19, Z+1	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	8a 5e       	subi	r24, 0xEA	; 234
    2432:	9e 4f       	sbci	r25, 0xFE	; 254
    2434:	fc 01       	movw	r30, r24
    2436:	31 83       	std	Z+1, r19	; 0x01
    2438:	20 83       	st	Z, r18
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	88 5e       	subi	r24, 0xE8	; 232
    2440:	9e 4f       	sbci	r25, 0xFE	; 254
    2442:	fc 01       	movw	r30, r24
    2444:	20 81       	ld	r18, Z
    2446:	31 81       	ldd	r19, Z+1	; 0x01
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	88 5e       	subi	r24, 0xE8	; 232
    244e:	9e 4f       	sbci	r25, 0xFE	; 254
    2450:	fc 01       	movw	r30, r24
    2452:	31 83       	std	Z+1, r19	; 0x01
    2454:	20 83       	st	Z, r18
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	00 d0       	rcall	.+0      	; 0x246e <_ZN14HardwareSerial5beginEm+0x6>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <_ZN14HardwareSerial5beginEm+0x8>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <_ZN14HardwareSerial5beginEm+0xa>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	4b 83       	std	Y+3, r20	; 0x03
    247c:	5c 83       	std	Y+4, r21	; 0x04
    247e:	6d 83       	std	Y+5, r22	; 0x05
    2480:	7e 83       	std	Y+6, r23	; 0x06
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	ad 81       	ldd	r26, Y+5	; 0x05
    2488:	be 81       	ldd	r27, Y+6	; 0x06
    248a:	e9 81       	ldd	r30, Y+1	; 0x01
    248c:	fa 81       	ldd	r31, Y+2	; 0x02
    248e:	26 e0       	ldi	r18, 0x06	; 6
    2490:	ac 01       	movw	r20, r24
    2492:	bd 01       	movw	r22, r26
    2494:	cf 01       	movw	r24, r30
    2496:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZN14HardwareSerial5beginEmh>
    249a:	00 00       	nop
    249c:	26 96       	adiw	r28, 0x06	; 6
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <_ZN7TwoWire5writeEi+0x6>
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <_ZN7TwoWire5writeEi+0x8>
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	7c 83       	std	Y+4, r23	; 0x04
    24c0:	6b 83       	std	Y+3, r22	; 0x03
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	fc 01       	movw	r30, r24
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	fc 01       	movw	r30, r24
    24ce:	20 81       	ld	r18, Z
    24d0:	31 81       	ldd	r19, Z+1	; 0x01
    24d2:	4b 81       	ldd	r20, Y+3	; 0x03
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	64 2f       	mov	r22, r20
    24da:	f9 01       	movw	r30, r18
    24dc:	09 95       	icall
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	08 95       	ret

000024ec <_ZN10ModuleMetaC1Ev>:
	//boolean HasDataToSend=false;
	//uint16_t GsmResultCode=0;
	//uint16_t SmsResultCode=0;
//}

struct ModuleMeta{
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <_ZN10ModuleMetaC1Ev+0x6>
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a 81       	ldd	r25, Y+2	; 0x02
    24fe:	fc 01       	movw	r30, r24
    2500:	11 82       	std	Z+1, r1	; 0x01
    2502:	00 00       	nop
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	08 95       	ret

0000250e <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	00 d0       	rcall	.+0      	; 0x2514 <_ZN5Print13setWriteErrorEi+0x6>
    2514:	00 d0       	rcall	.+0      	; 0x2516 <_ZN5Print13setWriteErrorEi+0x8>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	7c 83       	std	Y+4, r23	; 0x04
    2520:	6b 83       	std	Y+3, r22	; 0x03
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	2b 81       	ldd	r18, Y+3	; 0x03
    2528:	3c 81       	ldd	r19, Y+4	; 0x04
    252a:	fc 01       	movw	r30, r24
    252c:	33 83       	std	Z+3, r19	; 0x03
    252e:	22 83       	std	Z+2, r18	; 0x02
    2530:	00 00       	nop
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	08 95       	ret

00002540 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	00 d0       	rcall	.+0      	; 0x2546 <_ZN5PrintC1Ev+0x6>
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	9a 83       	std	Y+2, r25	; 0x02
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	21 e8       	ldi	r18, 0x81	; 129
    2550:	32 e0       	ldi	r19, 0x02	; 2
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	fc 01       	movw	r30, r24
    2558:	31 83       	std	Z+1, r19	; 0x01
    255a:	20 83       	st	Z, r18
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	fc 01       	movw	r30, r24
    2562:	13 82       	std	Z+3, r1	; 0x03
    2564:	12 82       	std	Z+2, r1	; 0x02
    2566:	00 00       	nop
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	00 d0       	rcall	.+0      	; 0x2578 <_ZN6StreamC1Ev+0x6>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN5PrintC1Ev>
    2588:	20 e5       	ldi	r18, 0x50	; 80
    258a:	32 e0       	ldi	r19, 0x02	; 2
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	9a 81       	ldd	r25, Y+2	; 0x02
    2590:	fc 01       	movw	r30, r24
    2592:	31 83       	std	Z+1, r19	; 0x01
    2594:	20 83       	st	Z, r18
    2596:	29 81       	ldd	r18, Y+1	; 0x01
    2598:	3a 81       	ldd	r19, Y+2	; 0x02
    259a:	88 ee       	ldi	r24, 0xE8	; 232
    259c:	93 e0       	ldi	r25, 0x03	; 3
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	f9 01       	movw	r30, r18
    25a4:	84 83       	std	Z+4, r24	; 0x04
    25a6:	95 83       	std	Z+5, r25	; 0x05
    25a8:	a6 83       	std	Z+6, r26	; 0x06
    25aa:	b7 83       	std	Z+7, r27	; 0x07
    25ac:	00 00       	nop
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <__fixsfsi>:
    25b8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__fixunssfsi>
    25bc:	68 94       	set
    25be:	b1 11       	cpse	r27, r1
    25c0:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_szero>
    25c4:	08 95       	ret

000025c6 <__fixunssfsi>:
    25c6:	0e 94 57 13 	call	0x26ae	; 0x26ae <__fp_splitA>
    25ca:	88 f0       	brcs	.+34     	; 0x25ee <__fixunssfsi+0x28>
    25cc:	9f 57       	subi	r25, 0x7F	; 127
    25ce:	98 f0       	brcs	.+38     	; 0x25f6 <__fixunssfsi+0x30>
    25d0:	b9 2f       	mov	r27, r25
    25d2:	99 27       	eor	r25, r25
    25d4:	b7 51       	subi	r27, 0x17	; 23
    25d6:	b0 f0       	brcs	.+44     	; 0x2604 <__fixunssfsi+0x3e>
    25d8:	e1 f0       	breq	.+56     	; 0x2612 <__fixunssfsi+0x4c>
    25da:	66 0f       	add	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	88 1f       	adc	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	1a f0       	brmi	.+6      	; 0x25ea <__fixunssfsi+0x24>
    25e4:	ba 95       	dec	r27
    25e6:	c9 f7       	brne	.-14     	; 0x25da <__fixunssfsi+0x14>
    25e8:	14 c0       	rjmp	.+40     	; 0x2612 <__fixunssfsi+0x4c>
    25ea:	b1 30       	cpi	r27, 0x01	; 1
    25ec:	91 f0       	breq	.+36     	; 0x2612 <__fixunssfsi+0x4c>
    25ee:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__fp_zero>
    25f2:	b1 e0       	ldi	r27, 0x01	; 1
    25f4:	08 95       	ret
    25f6:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__fp_zero>
    25fa:	67 2f       	mov	r22, r23
    25fc:	78 2f       	mov	r23, r24
    25fe:	88 27       	eor	r24, r24
    2600:	b8 5f       	subi	r27, 0xF8	; 248
    2602:	39 f0       	breq	.+14     	; 0x2612 <__fixunssfsi+0x4c>
    2604:	b9 3f       	cpi	r27, 0xF9	; 249
    2606:	cc f3       	brlt	.-14     	; 0x25fa <__fixunssfsi+0x34>
    2608:	86 95       	lsr	r24
    260a:	77 95       	ror	r23
    260c:	67 95       	ror	r22
    260e:	b3 95       	inc	r27
    2610:	d9 f7       	brne	.-10     	; 0x2608 <__fixunssfsi+0x42>
    2612:	3e f4       	brtc	.+14     	; 0x2622 <__fixunssfsi+0x5c>
    2614:	90 95       	com	r25
    2616:	80 95       	com	r24
    2618:	70 95       	com	r23
    261a:	61 95       	neg	r22
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	8f 4f       	sbci	r24, 0xFF	; 255
    2620:	9f 4f       	sbci	r25, 0xFF	; 255
    2622:	08 95       	ret

00002624 <__floatunsisf>:
    2624:	e8 94       	clt
    2626:	09 c0       	rjmp	.+18     	; 0x263a <__floatsisf+0x12>

00002628 <__floatsisf>:
    2628:	97 fb       	bst	r25, 7
    262a:	3e f4       	brtc	.+14     	; 0x263a <__floatsisf+0x12>
    262c:	90 95       	com	r25
    262e:	80 95       	com	r24
    2630:	70 95       	com	r23
    2632:	61 95       	neg	r22
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	8f 4f       	sbci	r24, 0xFF	; 255
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	99 23       	and	r25, r25
    263c:	a9 f0       	breq	.+42     	; 0x2668 <__floatsisf+0x40>
    263e:	f9 2f       	mov	r31, r25
    2640:	96 e9       	ldi	r25, 0x96	; 150
    2642:	bb 27       	eor	r27, r27
    2644:	93 95       	inc	r25
    2646:	f6 95       	lsr	r31
    2648:	87 95       	ror	r24
    264a:	77 95       	ror	r23
    264c:	67 95       	ror	r22
    264e:	b7 95       	ror	r27
    2650:	f1 11       	cpse	r31, r1
    2652:	f8 cf       	rjmp	.-16     	; 0x2644 <__floatsisf+0x1c>
    2654:	fa f4       	brpl	.+62     	; 0x2694 <__floatsisf+0x6c>
    2656:	bb 0f       	add	r27, r27
    2658:	11 f4       	brne	.+4      	; 0x265e <__floatsisf+0x36>
    265a:	60 ff       	sbrs	r22, 0
    265c:	1b c0       	rjmp	.+54     	; 0x2694 <__floatsisf+0x6c>
    265e:	6f 5f       	subi	r22, 0xFF	; 255
    2660:	7f 4f       	sbci	r23, 0xFF	; 255
    2662:	8f 4f       	sbci	r24, 0xFF	; 255
    2664:	9f 4f       	sbci	r25, 0xFF	; 255
    2666:	16 c0       	rjmp	.+44     	; 0x2694 <__floatsisf+0x6c>
    2668:	88 23       	and	r24, r24
    266a:	11 f0       	breq	.+4      	; 0x2670 <__floatsisf+0x48>
    266c:	96 e9       	ldi	r25, 0x96	; 150
    266e:	11 c0       	rjmp	.+34     	; 0x2692 <__floatsisf+0x6a>
    2670:	77 23       	and	r23, r23
    2672:	21 f0       	breq	.+8      	; 0x267c <__floatsisf+0x54>
    2674:	9e e8       	ldi	r25, 0x8E	; 142
    2676:	87 2f       	mov	r24, r23
    2678:	76 2f       	mov	r23, r22
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <__floatsisf+0x5e>
    267c:	66 23       	and	r22, r22
    267e:	71 f0       	breq	.+28     	; 0x269c <__floatsisf+0x74>
    2680:	96 e8       	ldi	r25, 0x86	; 134
    2682:	86 2f       	mov	r24, r22
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	2a f0       	brmi	.+10     	; 0x2694 <__floatsisf+0x6c>
    268a:	9a 95       	dec	r25
    268c:	66 0f       	add	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	88 1f       	adc	r24, r24
    2692:	da f7       	brpl	.-10     	; 0x268a <__floatsisf+0x62>
    2694:	88 0f       	add	r24, r24
    2696:	96 95       	lsr	r25
    2698:	87 95       	ror	r24
    269a:	97 f9       	bld	r25, 7
    269c:	08 95       	ret

0000269e <__fp_split3>:
    269e:	57 fd       	sbrc	r21, 7
    26a0:	90 58       	subi	r25, 0x80	; 128
    26a2:	44 0f       	add	r20, r20
    26a4:	55 1f       	adc	r21, r21
    26a6:	59 f0       	breq	.+22     	; 0x26be <__fp_splitA+0x10>
    26a8:	5f 3f       	cpi	r21, 0xFF	; 255
    26aa:	71 f0       	breq	.+28     	; 0x26c8 <__fp_splitA+0x1a>
    26ac:	47 95       	ror	r20

000026ae <__fp_splitA>:
    26ae:	88 0f       	add	r24, r24
    26b0:	97 fb       	bst	r25, 7
    26b2:	99 1f       	adc	r25, r25
    26b4:	61 f0       	breq	.+24     	; 0x26ce <__fp_splitA+0x20>
    26b6:	9f 3f       	cpi	r25, 0xFF	; 255
    26b8:	79 f0       	breq	.+30     	; 0x26d8 <__fp_splitA+0x2a>
    26ba:	87 95       	ror	r24
    26bc:	08 95       	ret
    26be:	12 16       	cp	r1, r18
    26c0:	13 06       	cpc	r1, r19
    26c2:	14 06       	cpc	r1, r20
    26c4:	55 1f       	adc	r21, r21
    26c6:	f2 cf       	rjmp	.-28     	; 0x26ac <__fp_split3+0xe>
    26c8:	46 95       	lsr	r20
    26ca:	f1 df       	rcall	.-30     	; 0x26ae <__fp_splitA>
    26cc:	08 c0       	rjmp	.+16     	; 0x26de <__fp_splitA+0x30>
    26ce:	16 16       	cp	r1, r22
    26d0:	17 06       	cpc	r1, r23
    26d2:	18 06       	cpc	r1, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	f1 cf       	rjmp	.-30     	; 0x26ba <__fp_splitA+0xc>
    26d8:	86 95       	lsr	r24
    26da:	71 05       	cpc	r23, r1
    26dc:	61 05       	cpc	r22, r1
    26de:	08 94       	sec
    26e0:	08 95       	ret

000026e2 <__fp_zero>:
    26e2:	e8 94       	clt

000026e4 <__fp_szero>:
    26e4:	bb 27       	eor	r27, r27
    26e6:	66 27       	eor	r22, r22
    26e8:	77 27       	eor	r23, r23
    26ea:	cb 01       	movw	r24, r22
    26ec:	97 f9       	bld	r25, 7
    26ee:	08 95       	ret

000026f0 <__mulsf3>:
    26f0:	0e 94 8b 13 	call	0x2716	; 0x2716 <__mulsf3x>
    26f4:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_round>
    26f8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fp_pscA>
    26fc:	38 f0       	brcs	.+14     	; 0x270c <__mulsf3+0x1c>
    26fe:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fp_pscB>
    2702:	20 f0       	brcs	.+8      	; 0x270c <__mulsf3+0x1c>
    2704:	95 23       	and	r25, r21
    2706:	11 f0       	breq	.+4      	; 0x270c <__mulsf3+0x1c>
    2708:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_inf>
    270c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__fp_nan>
    2710:	11 24       	eor	r1, r1
    2712:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_szero>

00002716 <__mulsf3x>:
    2716:	0e 94 4f 13 	call	0x269e	; 0x269e <__fp_split3>
    271a:	70 f3       	brcs	.-36     	; 0x26f8 <__mulsf3+0x8>

0000271c <__mulsf3_pse>:
    271c:	95 9f       	mul	r25, r21
    271e:	c1 f3       	breq	.-16     	; 0x2710 <__mulsf3+0x20>
    2720:	95 0f       	add	r25, r21
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	55 1f       	adc	r21, r21
    2726:	62 9f       	mul	r22, r18
    2728:	f0 01       	movw	r30, r0
    272a:	72 9f       	mul	r23, r18
    272c:	bb 27       	eor	r27, r27
    272e:	f0 0d       	add	r31, r0
    2730:	b1 1d       	adc	r27, r1
    2732:	63 9f       	mul	r22, r19
    2734:	aa 27       	eor	r26, r26
    2736:	f0 0d       	add	r31, r0
    2738:	b1 1d       	adc	r27, r1
    273a:	aa 1f       	adc	r26, r26
    273c:	64 9f       	mul	r22, r20
    273e:	66 27       	eor	r22, r22
    2740:	b0 0d       	add	r27, r0
    2742:	a1 1d       	adc	r26, r1
    2744:	66 1f       	adc	r22, r22
    2746:	82 9f       	mul	r24, r18
    2748:	22 27       	eor	r18, r18
    274a:	b0 0d       	add	r27, r0
    274c:	a1 1d       	adc	r26, r1
    274e:	62 1f       	adc	r22, r18
    2750:	73 9f       	mul	r23, r19
    2752:	b0 0d       	add	r27, r0
    2754:	a1 1d       	adc	r26, r1
    2756:	62 1f       	adc	r22, r18
    2758:	83 9f       	mul	r24, r19
    275a:	a0 0d       	add	r26, r0
    275c:	61 1d       	adc	r22, r1
    275e:	22 1f       	adc	r18, r18
    2760:	74 9f       	mul	r23, r20
    2762:	33 27       	eor	r19, r19
    2764:	a0 0d       	add	r26, r0
    2766:	61 1d       	adc	r22, r1
    2768:	23 1f       	adc	r18, r19
    276a:	84 9f       	mul	r24, r20
    276c:	60 0d       	add	r22, r0
    276e:	21 1d       	adc	r18, r1
    2770:	82 2f       	mov	r24, r18
    2772:	76 2f       	mov	r23, r22
    2774:	6a 2f       	mov	r22, r26
    2776:	11 24       	eor	r1, r1
    2778:	9f 57       	subi	r25, 0x7F	; 127
    277a:	50 40       	sbci	r21, 0x00	; 0
    277c:	9a f0       	brmi	.+38     	; 0x27a4 <__mulsf3_pse+0x88>
    277e:	f1 f0       	breq	.+60     	; 0x27bc <__mulsf3_pse+0xa0>
    2780:	88 23       	and	r24, r24
    2782:	4a f0       	brmi	.+18     	; 0x2796 <__mulsf3_pse+0x7a>
    2784:	ee 0f       	add	r30, r30
    2786:	ff 1f       	adc	r31, r31
    2788:	bb 1f       	adc	r27, r27
    278a:	66 1f       	adc	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	91 50       	subi	r25, 0x01	; 1
    2792:	50 40       	sbci	r21, 0x00	; 0
    2794:	a9 f7       	brne	.-22     	; 0x2780 <__mulsf3_pse+0x64>
    2796:	9e 3f       	cpi	r25, 0xFE	; 254
    2798:	51 05       	cpc	r21, r1
    279a:	80 f0       	brcs	.+32     	; 0x27bc <__mulsf3_pse+0xa0>
    279c:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_inf>
    27a0:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_szero>
    27a4:	5f 3f       	cpi	r21, 0xFF	; 255
    27a6:	e4 f3       	brlt	.-8      	; 0x27a0 <__mulsf3_pse+0x84>
    27a8:	98 3e       	cpi	r25, 0xE8	; 232
    27aa:	d4 f3       	brlt	.-12     	; 0x27a0 <__mulsf3_pse+0x84>
    27ac:	86 95       	lsr	r24
    27ae:	77 95       	ror	r23
    27b0:	67 95       	ror	r22
    27b2:	b7 95       	ror	r27
    27b4:	f7 95       	ror	r31
    27b6:	e7 95       	ror	r30
    27b8:	9f 5f       	subi	r25, 0xFF	; 255
    27ba:	c1 f7       	brne	.-16     	; 0x27ac <__mulsf3_pse+0x90>
    27bc:	fe 2b       	or	r31, r30
    27be:	88 0f       	add	r24, r24
    27c0:	91 1d       	adc	r25, r1
    27c2:	96 95       	lsr	r25
    27c4:	87 95       	ror	r24
    27c6:	97 f9       	bld	r25, 7
    27c8:	08 95       	ret

000027ca <__fp_inf>:
    27ca:	97 f9       	bld	r25, 7
    27cc:	9f 67       	ori	r25, 0x7F	; 127
    27ce:	80 e8       	ldi	r24, 0x80	; 128
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	08 95       	ret

000027d6 <__fp_nan>:
    27d6:	9f ef       	ldi	r25, 0xFF	; 255
    27d8:	80 ec       	ldi	r24, 0xC0	; 192
    27da:	08 95       	ret

000027dc <__fp_pscA>:
    27dc:	00 24       	eor	r0, r0
    27de:	0a 94       	dec	r0
    27e0:	16 16       	cp	r1, r22
    27e2:	17 06       	cpc	r1, r23
    27e4:	18 06       	cpc	r1, r24
    27e6:	09 06       	cpc	r0, r25
    27e8:	08 95       	ret

000027ea <__fp_pscB>:
    27ea:	00 24       	eor	r0, r0
    27ec:	0a 94       	dec	r0
    27ee:	12 16       	cp	r1, r18
    27f0:	13 06       	cpc	r1, r19
    27f2:	14 06       	cpc	r1, r20
    27f4:	05 06       	cpc	r0, r21
    27f6:	08 95       	ret

000027f8 <__fp_round>:
    27f8:	09 2e       	mov	r0, r25
    27fa:	03 94       	inc	r0
    27fc:	00 0c       	add	r0, r0
    27fe:	11 f4       	brne	.+4      	; 0x2804 <__fp_round+0xc>
    2800:	88 23       	and	r24, r24
    2802:	52 f0       	brmi	.+20     	; 0x2818 <__fp_round+0x20>
    2804:	bb 0f       	add	r27, r27
    2806:	40 f4       	brcc	.+16     	; 0x2818 <__fp_round+0x20>
    2808:	bf 2b       	or	r27, r31
    280a:	11 f4       	brne	.+4      	; 0x2810 <__fp_round+0x18>
    280c:	60 ff       	sbrs	r22, 0
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <__fp_round+0x20>
    2810:	6f 5f       	subi	r22, 0xFF	; 255
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8f 4f       	sbci	r24, 0xFF	; 255
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	08 95       	ret

0000281a <__cxa_pure_virtual>:
    281a:	0e 94 1e 29 	call	0x523c	; 0x523c <abort>

0000281e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    281e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2820:	91 8d       	ldd	r25, Z+25	; 0x19
    2822:	22 8d       	ldd	r18, Z+26	; 0x1a
    2824:	89 2f       	mov	r24, r25
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	80 5c       	subi	r24, 0xC0	; 192
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	82 1b       	sub	r24, r18
    282e:	91 09       	sbc	r25, r1
}
    2830:	8f 73       	andi	r24, 0x3F	; 63
    2832:	99 27       	eor	r25, r25
    2834:	08 95       	ret

00002836 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2836:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2838:	91 8d       	ldd	r25, Z+25	; 0x19
    283a:	82 8d       	ldd	r24, Z+26	; 0x1a
    283c:	98 17       	cp	r25, r24
    283e:	31 f0       	breq	.+12     	; 0x284c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2840:	82 8d       	ldd	r24, Z+26	; 0x1a
    2842:	e8 0f       	add	r30, r24
    2844:	f1 1d       	adc	r31, r1
    2846:	85 8d       	ldd	r24, Z+29	; 0x1d
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    284c:	8f ef       	ldi	r24, 0xFF	; 255
    284e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2850:	08 95       	ret

00002852 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2852:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2854:	91 8d       	ldd	r25, Z+25	; 0x19
    2856:	82 8d       	ldd	r24, Z+26	; 0x1a
    2858:	98 17       	cp	r25, r24
    285a:	61 f0       	breq	.+24     	; 0x2874 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    285c:	82 8d       	ldd	r24, Z+26	; 0x1a
    285e:	df 01       	movw	r26, r30
    2860:	a8 0f       	add	r26, r24
    2862:	b1 1d       	adc	r27, r1
    2864:	5d 96       	adiw	r26, 0x1d	; 29
    2866:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2868:	92 8d       	ldd	r25, Z+26	; 0x1a
    286a:	9f 5f       	subi	r25, 0xFF	; 255
    286c:	9f 73       	andi	r25, 0x3F	; 63
    286e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2874:	8f ef       	ldi	r24, 0xFF	; 255
    2876:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2878:	08 95       	ret

0000287a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    287a:	82 e9       	ldi	r24, 0x92	; 146
    287c:	95 e1       	ldi	r25, 0x15	; 21
    287e:	89 2b       	or	r24, r25
    2880:	49 f0       	breq	.+18     	; 0x2894 <_Z14serialEventRunv+0x1a>
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	89 2b       	or	r24, r25
    2888:	29 f0       	breq	.+10     	; 0x2894 <_Z14serialEventRunv+0x1a>
    288a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <_Z17Serial0_availablev>
    288e:	81 11       	cpse	r24, r1
    2890:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2894:	08 95       	ret

00002896 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2896:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2898:	84 8d       	ldd	r24, Z+28	; 0x1c
    289a:	df 01       	movw	r26, r30
    289c:	a8 0f       	add	r26, r24
    289e:	b1 1d       	adc	r27, r1
    28a0:	a3 5a       	subi	r26, 0xA3	; 163
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    28a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	8f 73       	andi	r24, 0x3F	; 63
    28ae:	99 27       	eor	r25, r25
    28b0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    28b2:	a6 89       	ldd	r26, Z+22	; 0x16
    28b4:	b7 89       	ldd	r27, Z+23	; 0x17
    28b6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    28b8:	a0 89       	ldd	r26, Z+16	; 0x10
    28ba:	b1 89       	ldd	r27, Z+17	; 0x11
    28bc:	8c 91       	ld	r24, X
    28be:	80 64       	ori	r24, 0x40	; 64
    28c0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    28c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    28c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    28c6:	98 13       	cpse	r25, r24
    28c8:	06 c0       	rjmp	.+12     	; 0x28d6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    28ca:	02 88       	ldd	r0, Z+18	; 0x12
    28cc:	f3 89       	ldd	r31, Z+19	; 0x13
    28ce:	e0 2d       	mov	r30, r0
    28d0:	80 81       	ld	r24, Z
    28d2:	8f 7d       	andi	r24, 0xDF	; 223
    28d4:	80 83       	st	Z, r24
    28d6:	08 95       	ret

000028d8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	ec 01       	movw	r28, r24
  _written = true;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    28ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28ee:	98 13       	cpse	r25, r24
    28f0:	05 c0       	rjmp	.+10     	; 0x28fc <_ZN14HardwareSerial5writeEh+0x24>
    28f2:	e8 89       	ldd	r30, Y+16	; 0x10
    28f4:	f9 89       	ldd	r31, Y+17	; 0x11
    28f6:	80 81       	ld	r24, Z
    28f8:	85 fd       	sbrc	r24, 5
    28fa:	24 c0       	rjmp	.+72     	; 0x2944 <_ZN14HardwareSerial5writeEh+0x6c>
    28fc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    28fe:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2900:	10 e0       	ldi	r17, 0x00	; 0
    2902:	0f 5f       	subi	r16, 0xFF	; 255
    2904:	1f 4f       	sbci	r17, 0xFF	; 255
    2906:	0f 73       	andi	r16, 0x3F	; 63
    2908:	11 27       	eor	r17, r17
    290a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    290c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    290e:	e8 12       	cpse	r14, r24
    2910:	0c c0       	rjmp	.+24     	; 0x292a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	07 fc       	sbrc	r0, 7
    2916:	fa cf       	rjmp	.-12     	; 0x290c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2918:	e8 89       	ldd	r30, Y+16	; 0x10
    291a:	f9 89       	ldd	r31, Y+17	; 0x11
    291c:	80 81       	ld	r24, Z
    291e:	85 ff       	sbrs	r24, 5
    2920:	f5 cf       	rjmp	.-22     	; 0x290c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2922:	ce 01       	movw	r24, r28
    2924:	0e 94 4b 14 	call	0x2896	; 0x2896 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2928:	f1 cf       	rjmp	.-30     	; 0x290c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    292a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292c:	fe 01       	movw	r30, r28
    292e:	e8 0f       	add	r30, r24
    2930:	f1 1d       	adc	r31, r1
    2932:	e3 5a       	subi	r30, 0xA3	; 163
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2938:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    293a:	ea 89       	ldd	r30, Y+18	; 0x12
    293c:	fb 89       	ldd	r31, Y+19	; 0x13
    293e:	80 81       	ld	r24, Z
    2940:	80 62       	ori	r24, 0x20	; 32
    2942:	07 c0       	rjmp	.+14     	; 0x2952 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2944:	ee 89       	ldd	r30, Y+22	; 0x16
    2946:	ff 89       	ldd	r31, Y+23	; 0x17
    2948:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    294a:	e8 89       	ldd	r30, Y+16	; 0x10
    294c:	f9 89       	ldd	r31, Y+17	; 0x11
    294e:	80 81       	ld	r24, Z
    2950:	80 64       	ori	r24, 0x40	; 64
    2952:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	08 95       	ret

00002966 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    296c:	88 8d       	ldd	r24, Y+24	; 0x18
    296e:	88 23       	and	r24, r24
    2970:	c9 f0       	breq	.+50     	; 0x29a4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2972:	ea 89       	ldd	r30, Y+18	; 0x12
    2974:	fb 89       	ldd	r31, Y+19	; 0x13
    2976:	80 81       	ld	r24, Z
    2978:	85 fd       	sbrc	r24, 5
    297a:	05 c0       	rjmp	.+10     	; 0x2986 <_ZN14HardwareSerial5flushEv+0x20>
    297c:	a8 89       	ldd	r26, Y+16	; 0x10
    297e:	b9 89       	ldd	r27, Y+17	; 0x11
    2980:	8c 91       	ld	r24, X
    2982:	86 fd       	sbrc	r24, 6
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	07 fc       	sbrc	r0, 7
    298a:	f5 cf       	rjmp	.-22     	; 0x2976 <_ZN14HardwareSerial5flushEv+0x10>
    298c:	80 81       	ld	r24, Z
    298e:	85 ff       	sbrs	r24, 5
    2990:	f2 cf       	rjmp	.-28     	; 0x2976 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2992:	a8 89       	ldd	r26, Y+16	; 0x10
    2994:	b9 89       	ldd	r27, Y+17	; 0x11
    2996:	8c 91       	ld	r24, X
    2998:	85 ff       	sbrs	r24, 5
    299a:	ed cf       	rjmp	.-38     	; 0x2976 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    299c:	ce 01       	movw	r24, r28
    299e:	0e 94 4b 14 	call	0x2896	; 0x2896 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    29a2:	e7 cf       	rjmp	.-50     	; 0x2972 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	ff 92       	push	r15
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	ec 01       	movw	r28, r24
    29ba:	6a 01       	movw	r12, r20
    29bc:	7b 01       	movw	r14, r22
    29be:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    29c0:	e8 89       	ldd	r30, Y+16	; 0x10
    29c2:	f9 89       	ldd	r31, Y+17	; 0x11
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    29c8:	41 15       	cp	r20, r1
    29ca:	51 4e       	sbci	r21, 0xE1	; 225
    29cc:	61 05       	cpc	r22, r1
    29ce:	71 05       	cpc	r23, r1
    29d0:	b1 f0       	breq	.+44     	; 0x29fe <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	79 e0       	ldi	r23, 0x09	; 9
    29d6:	8d e3       	ldi	r24, 0x3D	; 61
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a7 01       	movw	r20, r14
    29dc:	96 01       	movw	r18, r12
    29de:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__udivmodsi4>
    29e2:	da 01       	movw	r26, r20
    29e4:	c9 01       	movw	r24, r18
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	a1 09       	sbc	r26, r1
    29ea:	b1 09       	sbc	r27, r1
    29ec:	b6 95       	lsr	r27
    29ee:	a7 95       	ror	r26
    29f0:	97 95       	ror	r25
    29f2:	87 95       	ror	r24
    29f4:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    29f6:	21 15       	cp	r18, r1
    29f8:	80 e1       	ldi	r24, 0x10	; 16
    29fa:	38 07       	cpc	r19, r24
    29fc:	a8 f0       	brcs	.+42     	; 0x2a28 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    29fe:	e8 89       	ldd	r30, Y+16	; 0x10
    2a00:	f9 89       	ldd	r31, Y+17	; 0x11
    2a02:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2a04:	60 e8       	ldi	r22, 0x80	; 128
    2a06:	74 e8       	ldi	r23, 0x84	; 132
    2a08:	8e e1       	ldi	r24, 0x1E	; 30
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a7 01       	movw	r20, r14
    2a0e:	96 01       	movw	r18, r12
    2a10:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__udivmodsi4>
    2a14:	da 01       	movw	r26, r20
    2a16:	c9 01       	movw	r24, r18
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	a1 09       	sbc	r26, r1
    2a1c:	b1 09       	sbc	r27, r1
    2a1e:	b6 95       	lsr	r27
    2a20:	a7 95       	ror	r26
    2a22:	97 95       	ror	r25
    2a24:	87 95       	ror	r24
    2a26:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2a28:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a2a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2a2c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2a2e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a30:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a32:	20 83       	st	Z, r18

  _written = false;
    2a34:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2a36:	ec 89       	ldd	r30, Y+20	; 0x14
    2a38:	fd 89       	ldd	r31, Y+21	; 0x15
    2a3a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2a3c:	ea 89       	ldd	r30, Y+18	; 0x12
    2a3e:	fb 89       	ldd	r31, Y+19	; 0x13
    2a40:	80 81       	ld	r24, Z
    2a42:	80 61       	ori	r24, 0x10	; 16
    2a44:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2a46:	ea 89       	ldd	r30, Y+18	; 0x12
    2a48:	fb 89       	ldd	r31, Y+19	; 0x13
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 60       	ori	r24, 0x08	; 8
    2a4e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2a50:	ea 89       	ldd	r30, Y+18	; 0x12
    2a52:	fb 89       	ldd	r31, Y+19	; 0x13
    2a54:	80 81       	ld	r24, Z
    2a56:	80 68       	ori	r24, 0x80	; 128
    2a58:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2a5a:	ea 89       	ldd	r30, Y+18	; 0x12
    2a5c:	fb 89       	ldd	r31, Y+19	; 0x13
    2a5e:	80 81       	ld	r24, Z
    2a60:	8f 7d       	andi	r24, 0xDF	; 223
    2a62:	80 83       	st	Z, r24
}
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	ff 90       	pop	r15
    2a6c:	ef 90       	pop	r14
    2a6e:	df 90       	pop	r13
    2a70:	cf 90       	pop	r12
    2a72:	08 95       	ret

00002a74 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2a74:	1f 92       	push	r1
    2a76:	0f 92       	push	r0
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	0f 92       	push	r0
    2a7c:	11 24       	eor	r1, r1
    2a7e:	2f 93       	push	r18
    2a80:	8f 93       	push	r24
    2a82:	9f 93       	push	r25
    2a84:	ef 93       	push	r30
    2a86:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2a88:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <Serial+0x10>
    2a8c:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <Serial+0x11>
    2a90:	80 81       	ld	r24, Z
    2a92:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <Serial+0x16>
    2a96:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <Serial+0x17>
    2a9a:	82 fd       	sbrc	r24, 2
    2a9c:	12 c0       	rjmp	.+36     	; 0x2ac2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2a9e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2aa0:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <Serial+0x19>
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2aa8:	20 91 34 07 	lds	r18, 0x0734	; 0x800734 <Serial+0x1a>
    2aac:	82 17       	cp	r24, r18
    2aae:	51 f0       	breq	.+20     	; 0x2ac4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2ab0:	e0 91 33 07 	lds	r30, 0x0733	; 0x800733 <Serial+0x19>
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	e6 5e       	subi	r30, 0xE6	; 230
    2ab8:	f8 4f       	sbci	r31, 0xF8	; 248
    2aba:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2abc:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <Serial+0x19>
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2ac2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2ac4:	ff 91       	pop	r31
    2ac6:	ef 91       	pop	r30
    2ac8:	9f 91       	pop	r25
    2aca:	8f 91       	pop	r24
    2acc:	2f 91       	pop	r18
    2ace:	0f 90       	pop	r0
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	0f 90       	pop	r0
    2ad4:	1f 90       	pop	r1
    2ad6:	18 95       	reti

00002ad8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2ad8:	1f 92       	push	r1
    2ada:	0f 92       	push	r0
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	0f 92       	push	r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	2f 93       	push	r18
    2ae4:	3f 93       	push	r19
    2ae6:	4f 93       	push	r20
    2ae8:	5f 93       	push	r21
    2aea:	6f 93       	push	r22
    2aec:	7f 93       	push	r23
    2aee:	8f 93       	push	r24
    2af0:	9f 93       	push	r25
    2af2:	af 93       	push	r26
    2af4:	bf 93       	push	r27
    2af6:	ef 93       	push	r30
    2af8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2afa:	8a e1       	ldi	r24, 0x1A	; 26
    2afc:	97 e0       	ldi	r25, 0x07	; 7
    2afe:	0e 94 4b 14 	call	0x2896	; 0x2896 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2b02:	ff 91       	pop	r31
    2b04:	ef 91       	pop	r30
    2b06:	bf 91       	pop	r27
    2b08:	af 91       	pop	r26
    2b0a:	9f 91       	pop	r25
    2b0c:	8f 91       	pop	r24
    2b0e:	7f 91       	pop	r23
    2b10:	6f 91       	pop	r22
    2b12:	5f 91       	pop	r21
    2b14:	4f 91       	pop	r20
    2b16:	3f 91       	pop	r19
    2b18:	2f 91       	pop	r18
    2b1a:	0f 90       	pop	r0
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	0f 90       	pop	r0
    2b20:	1f 90       	pop	r1
    2b22:	18 95       	reti

00002b24 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2b24:	8a e1       	ldi	r24, 0x1A	; 26
    2b26:	97 e0       	ldi	r25, 0x07	; 7
    2b28:	0e 94 0f 14 	call	0x281e	; 0x281e <_ZN14HardwareSerial9availableEv>
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	89 2b       	or	r24, r25
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <_Z17Serial0_availablev+0x10>
    2b32:	20 e0       	ldi	r18, 0x00	; 0
}
    2b34:	82 2f       	mov	r24, r18
    2b36:	08 95       	ret

00002b38 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b38:	ea e1       	ldi	r30, 0x1A	; 26
    2b3a:	f7 e0       	ldi	r31, 0x07	; 7
    2b3c:	13 82       	std	Z+3, r1	; 0x03
    2b3e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2b40:	88 ee       	ldi	r24, 0xE8	; 232
    2b42:	93 e0       	ldi	r25, 0x03	; 3
    2b44:	a0 e0       	ldi	r26, 0x00	; 0
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	84 83       	std	Z+4, r24	; 0x04
    2b4a:	95 83       	std	Z+5, r25	; 0x05
    2b4c:	a6 83       	std	Z+6, r26	; 0x06
    2b4e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2b50:	80 e6       	ldi	r24, 0x60	; 96
    2b52:	92 e0       	ldi	r25, 0x02	; 2
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    2b58:	85 ec       	ldi	r24, 0xC5	; 197
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	95 87       	std	Z+13, r25	; 0x0d
    2b5e:	84 87       	std	Z+12, r24	; 0x0c
    2b60:	84 ec       	ldi	r24, 0xC4	; 196
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	97 87       	std	Z+15, r25	; 0x0f
    2b66:	86 87       	std	Z+14, r24	; 0x0e
    2b68:	80 ec       	ldi	r24, 0xC0	; 192
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	91 8b       	std	Z+17, r25	; 0x11
    2b6e:	80 8b       	std	Z+16, r24	; 0x10
    2b70:	81 ec       	ldi	r24, 0xC1	; 193
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	93 8b       	std	Z+19, r25	; 0x13
    2b76:	82 8b       	std	Z+18, r24	; 0x12
    2b78:	82 ec       	ldi	r24, 0xC2	; 194
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	95 8b       	std	Z+21, r25	; 0x15
    2b7e:	84 8b       	std	Z+20, r24	; 0x14
    2b80:	86 ec       	ldi	r24, 0xC6	; 198
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	97 8b       	std	Z+23, r25	; 0x17
    2b86:	86 8b       	std	Z+22, r24	; 0x16
    2b88:	11 8e       	std	Z+25, r1	; 0x19
    2b8a:	12 8e       	std	Z+26, r1	; 0x1a
    2b8c:	13 8e       	std	Z+27, r1	; 0x1b
    2b8e:	14 8e       	std	Z+28, r1	; 0x1c
    2b90:	08 95       	ret

00002b92 <initVariant>:
    2b92:	08 95       	ret

00002b94 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2b94:	0e 94 27 19 	call	0x324e	; 0x324e <init>

	initVariant();
    2b98:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2b9c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2ba0:	cd e3       	ldi	r28, 0x3D	; 61
    2ba2:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2ba4:	0e 94 76 09 	call	0x12ec	; 0x12ec <loop>
		if (serialEventRun) serialEventRun();
    2ba8:	20 97       	sbiw	r28, 0x00	; 0
    2baa:	e1 f3       	breq	.-8      	; 0x2ba4 <main+0x10>
    2bac:	0e 94 3d 14 	call	0x287a	; 0x287a <_Z14serialEventRunv>
    2bb0:	f9 cf       	rjmp	.-14     	; 0x2ba4 <main+0x10>

00002bb2 <_Znwj>:
    2bb2:	0c 94 fd 27 	jmp	0x4ffa	; 0x4ffa <malloc>

00002bb6 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	6c 01       	movw	r12, r24
    2bc8:	7a 01       	movw	r14, r20
    2bca:	8b 01       	movw	r16, r22
    2bcc:	c0 e0       	ldi	r28, 0x00	; 0
    2bce:	d0 e0       	ldi	r29, 0x00	; 0
    2bd0:	ce 15       	cp	r28, r14
    2bd2:	df 05       	cpc	r29, r15
    2bd4:	81 f0       	breq	.+32     	; 0x2bf6 <_ZN5Print5writeEPKhj+0x40>
    2bd6:	d8 01       	movw	r26, r16
    2bd8:	6d 91       	ld	r22, X+
    2bda:	8d 01       	movw	r16, r26
    2bdc:	d6 01       	movw	r26, r12
    2bde:	ed 91       	ld	r30, X+
    2be0:	fc 91       	ld	r31, X
    2be2:	01 90       	ld	r0, Z+
    2be4:	f0 81       	ld	r31, Z
    2be6:	e0 2d       	mov	r30, r0
    2be8:	c6 01       	movw	r24, r12
    2bea:	09 95       	icall
    2bec:	89 2b       	or	r24, r25
    2bee:	11 f0       	breq	.+4      	; 0x2bf4 <_ZN5Print5writeEPKhj+0x3e>
    2bf0:	21 96       	adiw	r28, 0x01	; 1
    2bf2:	ee cf       	rjmp	.-36     	; 0x2bd0 <_ZN5Print5writeEPKhj+0x1a>
    2bf4:	7e 01       	movw	r14, r28
    2bf6:	c7 01       	movw	r24, r14
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	08 95       	ret

00002c0a <_ZN5Print5writeEPKc>:
    2c0a:	61 15       	cp	r22, r1
    2c0c:	71 05       	cpc	r23, r1
    2c0e:	79 f0       	breq	.+30     	; 0x2c2e <_ZN5Print5writeEPKc+0x24>
    2c10:	fb 01       	movw	r30, r22
    2c12:	01 90       	ld	r0, Z+
    2c14:	00 20       	and	r0, r0
    2c16:	e9 f7       	brne	.-6      	; 0x2c12 <_ZN5Print5writeEPKc+0x8>
    2c18:	31 97       	sbiw	r30, 0x01	; 1
    2c1a:	af 01       	movw	r20, r30
    2c1c:	46 1b       	sub	r20, r22
    2c1e:	57 0b       	sbc	r21, r23
    2c20:	dc 01       	movw	r26, r24
    2c22:	ed 91       	ld	r30, X+
    2c24:	fc 91       	ld	r31, X
    2c26:	02 80       	ldd	r0, Z+2	; 0x02
    2c28:	f3 81       	ldd	r31, Z+3	; 0x03
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	09 94       	ijmp
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	08 95       	ret

00002c34 <_ZN5Print5printEPK19__FlashStringHelper>:
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	8c 01       	movw	r16, r24
    2c42:	7b 01       	movw	r14, r22
    2c44:	c0 e0       	ldi	r28, 0x00	; 0
    2c46:	d0 e0       	ldi	r29, 0x00	; 0
    2c48:	f7 01       	movw	r30, r14
    2c4a:	ec 0f       	add	r30, r28
    2c4c:	fd 1f       	adc	r31, r29
    2c4e:	64 91       	lpm	r22, Z
    2c50:	66 23       	and	r22, r22
    2c52:	61 f0       	breq	.+24     	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c54:	d8 01       	movw	r26, r16
    2c56:	ed 91       	ld	r30, X+
    2c58:	fc 91       	ld	r31, X
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	f0 81       	ld	r31, Z
    2c5e:	e0 2d       	mov	r30, r0
    2c60:	c8 01       	movw	r24, r16
    2c62:	09 95       	icall
    2c64:	89 2b       	or	r24, r25
    2c66:	11 f0       	breq	.+4      	; 0x2c6c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2c68:	21 96       	adiw	r28, 0x01	; 1
    2c6a:	ee cf       	rjmp	.-36     	; 0x2c48 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	ff 90       	pop	r15
    2c78:	ef 90       	pop	r14
    2c7a:	08 95       	ret

00002c7c <_ZN5Print5printEPKc>:
    2c7c:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <_ZN5Print5writeEPKc>

00002c80 <_ZN5Print5printEc>:
    2c80:	dc 01       	movw	r26, r24
    2c82:	ed 91       	ld	r30, X+
    2c84:	fc 91       	ld	r31, X
    2c86:	01 90       	ld	r0, Z+
    2c88:	f0 81       	ld	r31, Z
    2c8a:	e0 2d       	mov	r30, r0
    2c8c:	09 94       	ijmp

00002c8e <_ZN5Print7printlnEv>:
    2c8e:	6c e6       	ldi	r22, 0x6C	; 108
    2c90:	72 e0       	ldi	r23, 0x02	; 2
    2c92:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <_ZN5Print5writeEPKc>

00002c96 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	ec 01       	movw	r28, r24
    2ca0:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    2ca4:	8c 01       	movw	r16, r24
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2cac:	80 0f       	add	r24, r16
    2cae:	91 1f       	adc	r25, r17
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	08 95       	ret

00002cba <_ZN5Print7printlnEPKc>:
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	ec 01       	movw	r28, r24
    2cc4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN5Print5writeEPKc>
    2cc8:	8c 01       	movw	r16, r24
    2cca:	ce 01       	movw	r24, r28
    2ccc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2cd0:	80 0f       	add	r24, r16
    2cd2:	91 1f       	adc	r25, r17
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <_ZN5Print7printlnEc>:
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	ec 01       	movw	r28, r24
    2ce8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN5Print5printEc>
    2cec:	8c 01       	movw	r16, r24
    2cee:	ce 01       	movw	r24, r28
    2cf0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2cf4:	80 0f       	add	r24, r16
    2cf6:	91 1f       	adc	r25, r17
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <_ZN5Print11printNumberEmh>:
    2d02:	8f 92       	push	r8
    2d04:	9f 92       	push	r9
    2d06:	af 92       	push	r10
    2d08:	bf 92       	push	r11
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	a1 97       	sbiw	r28, 0x21	; 33
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	7c 01       	movw	r14, r24
    2d28:	fa 01       	movw	r30, r20
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	19 a2       	std	Y+33, r1	; 0x21
    2d2e:	22 30       	cpi	r18, 0x02	; 2
    2d30:	08 f4       	brcc	.+2      	; 0x2d34 <_ZN5Print11printNumberEmh+0x32>
    2d32:	2a e0       	ldi	r18, 0x0A	; 10
    2d34:	8e 01       	movw	r16, r28
    2d36:	0f 5d       	subi	r16, 0xDF	; 223
    2d38:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3a:	82 2e       	mov	r8, r18
    2d3c:	91 2c       	mov	r9, r1
    2d3e:	a1 2c       	mov	r10, r1
    2d40:	b1 2c       	mov	r11, r1
    2d42:	bf 01       	movw	r22, r30
    2d44:	a5 01       	movw	r20, r10
    2d46:	94 01       	movw	r18, r8
    2d48:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__udivmodsi4>
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	ca 01       	movw	r24, r20
    2d50:	01 50       	subi	r16, 0x01	; 1
    2d52:	11 09       	sbc	r17, r1
    2d54:	6a 30       	cpi	r22, 0x0A	; 10
    2d56:	10 f4       	brcc	.+4      	; 0x2d5c <_ZN5Print11printNumberEmh+0x5a>
    2d58:	60 5d       	subi	r22, 0xD0	; 208
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <_ZN5Print11printNumberEmh+0x5c>
    2d5c:	69 5c       	subi	r22, 0xC9	; 201
    2d5e:	d8 01       	movw	r26, r16
    2d60:	6c 93       	st	X, r22
    2d62:	23 2b       	or	r18, r19
    2d64:	24 2b       	or	r18, r20
    2d66:	25 2b       	or	r18, r21
    2d68:	61 f7       	brne	.-40     	; 0x2d42 <_ZN5Print11printNumberEmh+0x40>
    2d6a:	b8 01       	movw	r22, r16
    2d6c:	c7 01       	movw	r24, r14
    2d6e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN5Print5writeEPKc>
    2d72:	a1 96       	adiw	r28, 0x21	; 33
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	bf 90       	pop	r11
    2d8c:	af 90       	pop	r10
    2d8e:	9f 90       	pop	r9
    2d90:	8f 90       	pop	r8
    2d92:	08 95       	ret

00002d94 <_ZN5Print5printEmi>:
    2d94:	21 15       	cp	r18, r1
    2d96:	31 05       	cpc	r19, r1
    2d98:	41 f4       	brne	.+16     	; 0x2daa <_ZN5Print5printEmi+0x16>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	ed 91       	ld	r30, X+
    2d9e:	fc 91       	ld	r31, X
    2da0:	01 90       	ld	r0, Z+
    2da2:	f0 81       	ld	r31, Z
    2da4:	e0 2d       	mov	r30, r0
    2da6:	64 2f       	mov	r22, r20
    2da8:	09 94       	ijmp
    2daa:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>

00002dae <_ZN5Print5printEhi>:
    2dae:	9a 01       	movw	r18, r20
    2db0:	46 2f       	mov	r20, r22
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	60 e0       	ldi	r22, 0x00	; 0
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <_ZN5Print5printEmi>

00002dbc <_ZN5Print7printlnEhi>:
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	ec 01       	movw	r28, r24
    2dc6:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_ZN5Print5printEhi>
    2dca:	8c 01       	movw	r16, r24
    2dcc:	ce 01       	movw	r24, r28
    2dce:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2dd2:	80 0f       	add	r24, r16
    2dd4:	91 1f       	adc	r25, r17
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	08 95       	ret

00002de0 <_ZN5Print5printEji>:
    2de0:	9a 01       	movw	r18, r20
    2de2:	ab 01       	movw	r20, r22
    2de4:	60 e0       	ldi	r22, 0x00	; 0
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <_ZN5Print5printEmi>

00002dec <_ZN5Print7printlnEji>:
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	ec 01       	movw	r28, r24
    2df6:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN5Print5printEji>
    2dfa:	8c 01       	movw	r16, r24
    2dfc:	ce 01       	movw	r24, r28
    2dfe:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2e02:	80 0f       	add	r24, r16
    2e04:	91 1f       	adc	r25, r17
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	08 95       	ret

00002e10 <_ZN5Print7printlnEmi>:
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	ec 01       	movw	r28, r24
    2e1a:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <_ZN5Print5printEmi>
    2e1e:	8c 01       	movw	r16, r24
    2e20:	ce 01       	movw	r24, r28
    2e22:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2e26:	80 0f       	add	r24, r16
    2e28:	91 1f       	adc	r25, r17
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

00002e34 <_ZN5Print5printEli>:
    2e34:	cf 92       	push	r12
    2e36:	df 92       	push	r13
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	21 15       	cp	r18, r1
    2e46:	31 05       	cpc	r19, r1
    2e48:	81 f4       	brne	.+32     	; 0x2e6a <_ZN5Print5printEli+0x36>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	ed 91       	ld	r30, X+
    2e4e:	fc 91       	ld	r31, X
    2e50:	01 90       	ld	r0, Z+
    2e52:	f0 81       	ld	r31, Z
    2e54:	e0 2d       	mov	r30, r0
    2e56:	64 2f       	mov	r22, r20
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	ef 90       	pop	r14
    2e64:	df 90       	pop	r13
    2e66:	cf 90       	pop	r12
    2e68:	09 94       	ijmp
    2e6a:	2a 30       	cpi	r18, 0x0A	; 10
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	01 f5       	brne	.+64     	; 0x2eb0 <_ZN5Print5printEli+0x7c>
    2e70:	77 ff       	sbrs	r23, 7
    2e72:	1d c0       	rjmp	.+58     	; 0x2eae <_ZN5Print5printEli+0x7a>
    2e74:	6a 01       	movw	r12, r20
    2e76:	7b 01       	movw	r14, r22
    2e78:	ec 01       	movw	r28, r24
    2e7a:	6d e2       	ldi	r22, 0x2D	; 45
    2e7c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN5Print5printEc>
    2e80:	8c 01       	movw	r16, r24
    2e82:	44 27       	eor	r20, r20
    2e84:	55 27       	eor	r21, r21
    2e86:	ba 01       	movw	r22, r20
    2e88:	4c 19       	sub	r20, r12
    2e8a:	5d 09       	sbc	r21, r13
    2e8c:	6e 09       	sbc	r22, r14
    2e8e:	7f 09       	sbc	r23, r15
    2e90:	2a e0       	ldi	r18, 0x0A	; 10
    2e92:	ce 01       	movw	r24, r28
    2e94:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>
    2e98:	80 0f       	add	r24, r16
    2e9a:	91 1f       	adc	r25, r17
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	ff 90       	pop	r15
    2ea6:	ef 90       	pop	r14
    2ea8:	df 90       	pop	r13
    2eaa:	cf 90       	pop	r12
    2eac:	08 95       	ret
    2eae:	2a e0       	ldi	r18, 0x0A	; 10
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	ff 90       	pop	r15
    2eba:	ef 90       	pop	r14
    2ebc:	df 90       	pop	r13
    2ebe:	cf 90       	pop	r12
    2ec0:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>

00002ec4 <_ZN5Print5printEii>:
    2ec4:	9a 01       	movw	r18, r20
    2ec6:	ab 01       	movw	r20, r22
    2ec8:	77 0f       	add	r23, r23
    2eca:	66 0b       	sbc	r22, r22
    2ecc:	77 0b       	sbc	r23, r23
    2ece:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <_ZN5Print5printEli>

00002ed2 <_ZN5Print7printlnEii>:
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	ec 01       	movw	r28, r24
    2edc:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN5Print5printEii>
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2ee8:	80 0f       	add	r24, r16
    2eea:	91 1f       	adc	r25, r17
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	08 95       	ret

00002ef6 <_ZN5Print7printlnEli>:
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	ec 01       	movw	r28, r24
    2f00:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <_ZN5Print5printEli>
    2f04:	8c 01       	movw	r16, r24
    2f06:	ce 01       	movw	r24, r28
    2f08:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    2f0c:	80 0f       	add	r24, r16
    2f0e:	91 1f       	adc	r25, r17
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <_ZN5Print10printFloatEdh>:
    2f1a:	7f 92       	push	r7
    2f1c:	8f 92       	push	r8
    2f1e:	9f 92       	push	r9
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	8c 01       	movw	r16, r24
    2f36:	6a 01       	movw	r12, r20
    2f38:	7b 01       	movw	r14, r22
    2f3a:	72 2e       	mov	r7, r18
    2f3c:	9a 01       	movw	r18, r20
    2f3e:	ab 01       	movw	r20, r22
    2f40:	c7 01       	movw	r24, r14
    2f42:	b6 01       	movw	r22, r12
    2f44:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__unordsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	19 f0       	breq	.+6      	; 0x2f52 <_ZN5Print10printFloatEdh+0x38>
    2f4c:	6f e6       	ldi	r22, 0x6F	; 111
    2f4e:	72 e0       	ldi	r23, 0x02	; 2
    2f50:	27 c0       	rjmp	.+78     	; 0x2fa0 <_ZN5Print10printFloatEdh+0x86>
    2f52:	46 01       	movw	r8, r12
    2f54:	57 01       	movw	r10, r14
    2f56:	e8 94       	clt
    2f58:	b7 f8       	bld	r11, 7
    2f5a:	2f ef       	ldi	r18, 0xFF	; 255
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	5f e7       	ldi	r21, 0x7F	; 127
    2f62:	c5 01       	movw	r24, r10
    2f64:	b4 01       	movw	r22, r8
    2f66:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__unordsf2>
    2f6a:	81 11       	cpse	r24, r1
    2f6c:	0d c0       	rjmp	.+26     	; 0x2f88 <_ZN5Print10printFloatEdh+0x6e>
    2f6e:	2f ef       	ldi	r18, 0xFF	; 255
    2f70:	3f ef       	ldi	r19, 0xFF	; 255
    2f72:	4f e7       	ldi	r20, 0x7F	; 127
    2f74:	5f e7       	ldi	r21, 0x7F	; 127
    2f76:	c5 01       	movw	r24, r10
    2f78:	b4 01       	movw	r22, r8
    2f7a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__cmpsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	1c f4       	brge	.+6      	; 0x2f88 <_ZN5Print10printFloatEdh+0x6e>
    2f82:	63 e7       	ldi	r22, 0x73	; 115
    2f84:	72 e0       	ldi	r23, 0x02	; 2
    2f86:	0c c0       	rjmp	.+24     	; 0x2fa0 <_ZN5Print10printFloatEdh+0x86>
    2f88:	2f ef       	ldi	r18, 0xFF	; 255
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	5f e4       	ldi	r21, 0x4F	; 79
    2f90:	c7 01       	movw	r24, r14
    2f92:	b6 01       	movw	r22, r12
    2f94:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__gesf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	94 f4       	brge	.+36     	; 0x2fc0 <_ZN5Print10printFloatEdh+0xa6>
    2f9c:	67 e7       	ldi	r22, 0x77	; 119
    2f9e:	72 e0       	ldi	r23, 0x02	; 2
    2fa0:	c8 01       	movw	r24, r16
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	df 90       	pop	r13
    2fb0:	cf 90       	pop	r12
    2fb2:	bf 90       	pop	r11
    2fb4:	af 90       	pop	r10
    2fb6:	9f 90       	pop	r9
    2fb8:	8f 90       	pop	r8
    2fba:	7f 90       	pop	r7
    2fbc:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <_ZN5Print5writeEPKc>
    2fc0:	2f ef       	ldi	r18, 0xFF	; 255
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	4f e7       	ldi	r20, 0x7F	; 127
    2fc6:	5f ec       	ldi	r21, 0xCF	; 207
    2fc8:	c7 01       	movw	r24, r14
    2fca:	b6 01       	movw	r22, r12
    2fcc:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__cmpsf2>
    2fd0:	87 fd       	sbrc	r24, 7
    2fd2:	e4 cf       	rjmp	.-56     	; 0x2f9c <_ZN5Print10printFloatEdh+0x82>
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	a9 01       	movw	r20, r18
    2fda:	c7 01       	movw	r24, r14
    2fdc:	b6 01       	movw	r22, r12
    2fde:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__cmpsf2>
    2fe2:	87 ff       	sbrs	r24, 7
    2fe4:	0a c0       	rjmp	.+20     	; 0x2ffa <_ZN5Print10printFloatEdh+0xe0>
    2fe6:	6d e2       	ldi	r22, 0x2D	; 45
    2fe8:	c8 01       	movw	r24, r16
    2fea:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN5Print5printEc>
    2fee:	ec 01       	movw	r28, r24
    2ff0:	f7 fa       	bst	r15, 7
    2ff2:	f0 94       	com	r15
    2ff4:	f7 f8       	bld	r15, 7
    2ff6:	f0 94       	com	r15
    2ff8:	02 c0       	rjmp	.+4      	; 0x2ffe <_ZN5Print10printFloatEdh+0xe4>
    2ffa:	c0 e0       	ldi	r28, 0x00	; 0
    2ffc:	d0 e0       	ldi	r29, 0x00	; 0
    2ffe:	b1 2c       	mov	r11, r1
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	9f e3       	ldi	r25, 0x3F	; 63
    3008:	7b 14       	cp	r7, r11
    300a:	41 f0       	breq	.+16     	; 0x301c <_ZN5Print10printFloatEdh+0x102>
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__divsf3>
    3018:	b3 94       	inc	r11
    301a:	f6 cf       	rjmp	.-20     	; 0x3008 <_ZN5Print10printFloatEdh+0xee>
    301c:	a7 01       	movw	r20, r14
    301e:	96 01       	movw	r18, r12
    3020:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__addsf3>
    3024:	6b 01       	movw	r12, r22
    3026:	7c 01       	movw	r14, r24
    3028:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__fixunssfsi>
    302c:	4b 01       	movw	r8, r22
    302e:	5c 01       	movw	r10, r24
    3030:	2a e0       	ldi	r18, 0x0A	; 10
    3032:	ab 01       	movw	r20, r22
    3034:	bc 01       	movw	r22, r24
    3036:	c8 01       	movw	r24, r16
    3038:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN5Print11printNumberEmh>
    303c:	c8 0f       	add	r28, r24
    303e:	d9 1f       	adc	r29, r25
    3040:	77 20       	and	r7, r7
    3042:	c9 f1       	breq	.+114    	; 0x30b6 <_ZN5Print10printFloatEdh+0x19c>
    3044:	c5 01       	movw	r24, r10
    3046:	b4 01       	movw	r22, r8
    3048:	0e 94 12 13 	call	0x2624	; 0x2624 <__floatunsisf>
    304c:	9b 01       	movw	r18, r22
    304e:	ac 01       	movw	r20, r24
    3050:	c7 01       	movw	r24, r14
    3052:	b6 01       	movw	r22, r12
    3054:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <__subsf3>
    3058:	6b 01       	movw	r12, r22
    305a:	7c 01       	movw	r14, r24
    305c:	6b e7       	ldi	r22, 0x7B	; 123
    305e:	72 e0       	ldi	r23, 0x02	; 2
    3060:	c8 01       	movw	r24, r16
    3062:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN5Print5writeEPKc>
    3066:	c8 0f       	add	r28, r24
    3068:	d9 1f       	adc	r29, r25
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e2       	ldi	r20, 0x20	; 32
    3070:	51 e4       	ldi	r21, 0x41	; 65
    3072:	c7 01       	movw	r24, r14
    3074:	b6 01       	movw	r22, r12
    3076:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__mulsf3>
    307a:	4b 01       	movw	r8, r22
    307c:	5c 01       	movw	r10, r24
    307e:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__fixsfsi>
    3082:	6b 01       	movw	r12, r22
    3084:	7c 01       	movw	r14, r24
    3086:	4a e0       	ldi	r20, 0x0A	; 10
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	c8 01       	movw	r24, r16
    308c:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN5Print5printEii>
    3090:	c8 0f       	add	r28, r24
    3092:	d9 1f       	adc	r29, r25
    3094:	b6 01       	movw	r22, r12
    3096:	dd 0c       	add	r13, r13
    3098:	88 0b       	sbc	r24, r24
    309a:	99 0b       	sbc	r25, r25
    309c:	0e 94 14 13 	call	0x2628	; 0x2628 <__floatsisf>
    30a0:	9b 01       	movw	r18, r22
    30a2:	ac 01       	movw	r20, r24
    30a4:	c5 01       	movw	r24, r10
    30a6:	b4 01       	movw	r22, r8
    30a8:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <__subsf3>
    30ac:	6b 01       	movw	r12, r22
    30ae:	7c 01       	movw	r14, r24
    30b0:	7a 94       	dec	r7
    30b2:	71 10       	cpse	r7, r1
    30b4:	da cf       	rjmp	.-76     	; 0x306a <_ZN5Print10printFloatEdh+0x150>
    30b6:	ce 01       	movw	r24, r28
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	0f 91       	pop	r16
    30c0:	ff 90       	pop	r15
    30c2:	ef 90       	pop	r14
    30c4:	df 90       	pop	r13
    30c6:	cf 90       	pop	r12
    30c8:	bf 90       	pop	r11
    30ca:	af 90       	pop	r10
    30cc:	9f 90       	pop	r9
    30ce:	8f 90       	pop	r8
    30d0:	7f 90       	pop	r7
    30d2:	08 95       	ret

000030d4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    30de:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_ZN5Print10printFloatEdh>
    30e2:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    30e4:	ce 01       	movw	r24, r28
    30e6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
  return n;
}
    30ea:	80 0f       	add	r24, r16
    30ec:	91 1f       	adc	r25, r17
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	08 95       	ret

000030f8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    30f8:	1f 92       	push	r1
    30fa:	0f 92       	push	r0
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	0f 92       	push	r0
    3100:	11 24       	eor	r1, r1
    3102:	2f 93       	push	r18
    3104:	3f 93       	push	r19
    3106:	8f 93       	push	r24
    3108:	9f 93       	push	r25
    310a:	af 93       	push	r26
    310c:	bf 93       	push	r27
    310e:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <timer0_millis>
    3112:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <timer0_millis+0x1>
    3116:	a0 91 ba 07 	lds	r26, 0x07BA	; 0x8007ba <timer0_millis+0x2>
    311a:	b0 91 bb 07 	lds	r27, 0x07BB	; 0x8007bb <timer0_millis+0x3>
    311e:	30 91 b7 07 	lds	r19, 0x07B7	; 0x8007b7 <timer0_fract>
    3122:	23 e0       	ldi	r18, 0x03	; 3
    3124:	23 0f       	add	r18, r19
    3126:	2d 37       	cpi	r18, 0x7D	; 125
    3128:	20 f4       	brcc	.+8      	; 0x3132 <__vector_16+0x3a>
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	a1 1d       	adc	r26, r1
    312e:	b1 1d       	adc	r27, r1
    3130:	05 c0       	rjmp	.+10     	; 0x313c <__vector_16+0x44>
    3132:	26 e8       	ldi	r18, 0x86	; 134
    3134:	23 0f       	add	r18, r19
    3136:	02 96       	adiw	r24, 0x02	; 2
    3138:	a1 1d       	adc	r26, r1
    313a:	b1 1d       	adc	r27, r1
    313c:	20 93 b7 07 	sts	0x07B7, r18	; 0x8007b7 <timer0_fract>
    3140:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <timer0_millis>
    3144:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <timer0_millis+0x1>
    3148:	a0 93 ba 07 	sts	0x07BA, r26	; 0x8007ba <timer0_millis+0x2>
    314c:	b0 93 bb 07 	sts	0x07BB, r27	; 0x8007bb <timer0_millis+0x3>
    3150:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <timer0_overflow_count>
    3154:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <timer0_overflow_count+0x1>
    3158:	a0 91 be 07 	lds	r26, 0x07BE	; 0x8007be <timer0_overflow_count+0x2>
    315c:	b0 91 bf 07 	lds	r27, 0x07BF	; 0x8007bf <timer0_overflow_count+0x3>
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	a1 1d       	adc	r26, r1
    3164:	b1 1d       	adc	r27, r1
    3166:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <timer0_overflow_count>
    316a:	90 93 bd 07 	sts	0x07BD, r25	; 0x8007bd <timer0_overflow_count+0x1>
    316e:	a0 93 be 07 	sts	0x07BE, r26	; 0x8007be <timer0_overflow_count+0x2>
    3172:	b0 93 bf 07 	sts	0x07BF, r27	; 0x8007bf <timer0_overflow_count+0x3>
    3176:	bf 91       	pop	r27
    3178:	af 91       	pop	r26
    317a:	9f 91       	pop	r25
    317c:	8f 91       	pop	r24
    317e:	3f 91       	pop	r19
    3180:	2f 91       	pop	r18
    3182:	0f 90       	pop	r0
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	0f 90       	pop	r0
    3188:	1f 90       	pop	r1
    318a:	18 95       	reti

0000318c <micros>:
    318c:	3f b7       	in	r19, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <timer0_overflow_count>
    3194:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <timer0_overflow_count+0x1>
    3198:	a0 91 be 07 	lds	r26, 0x07BE	; 0x8007be <timer0_overflow_count+0x2>
    319c:	b0 91 bf 07 	lds	r27, 0x07BF	; 0x8007bf <timer0_overflow_count+0x3>
    31a0:	26 b5       	in	r18, 0x26	; 38
    31a2:	a8 9b       	sbis	0x15, 0	; 21
    31a4:	05 c0       	rjmp	.+10     	; 0x31b0 <micros+0x24>
    31a6:	2f 3f       	cpi	r18, 0xFF	; 255
    31a8:	19 f0       	breq	.+6      	; 0x31b0 <micros+0x24>
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	a1 1d       	adc	r26, r1
    31ae:	b1 1d       	adc	r27, r1
    31b0:	3f bf       	out	0x3f, r19	; 63
    31b2:	ba 2f       	mov	r27, r26
    31b4:	a9 2f       	mov	r26, r25
    31b6:	98 2f       	mov	r25, r24
    31b8:	88 27       	eor	r24, r24
    31ba:	82 0f       	add	r24, r18
    31bc:	91 1d       	adc	r25, r1
    31be:	a1 1d       	adc	r26, r1
    31c0:	b1 1d       	adc	r27, r1
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	42 e0       	ldi	r20, 0x02	; 2
    31c8:	66 0f       	add	r22, r22
    31ca:	77 1f       	adc	r23, r23
    31cc:	88 1f       	adc	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	4a 95       	dec	r20
    31d2:	d1 f7       	brne	.-12     	; 0x31c8 <micros+0x3c>
    31d4:	08 95       	ret

000031d6 <delay>:
    31d6:	8f 92       	push	r8
    31d8:	9f 92       	push	r9
    31da:	af 92       	push	r10
    31dc:	bf 92       	push	r11
    31de:	cf 92       	push	r12
    31e0:	df 92       	push	r13
    31e2:	ef 92       	push	r14
    31e4:	ff 92       	push	r15
    31e6:	6b 01       	movw	r12, r22
    31e8:	7c 01       	movw	r14, r24
    31ea:	0e 94 c6 18 	call	0x318c	; 0x318c <micros>
    31ee:	4b 01       	movw	r8, r22
    31f0:	5c 01       	movw	r10, r24
    31f2:	c1 14       	cp	r12, r1
    31f4:	d1 04       	cpc	r13, r1
    31f6:	e1 04       	cpc	r14, r1
    31f8:	f1 04       	cpc	r15, r1
    31fa:	01 f1       	breq	.+64     	; 0x323c <delay+0x66>
    31fc:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <yield>
    3200:	0e 94 c6 18 	call	0x318c	; 0x318c <micros>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	88 19       	sub	r24, r8
    320a:	99 09       	sbc	r25, r9
    320c:	aa 09       	sbc	r26, r10
    320e:	bb 09       	sbc	r27, r11
    3210:	88 3e       	cpi	r24, 0xE8	; 232
    3212:	93 40       	sbci	r25, 0x03	; 3
    3214:	a1 05       	cpc	r26, r1
    3216:	b1 05       	cpc	r27, r1
    3218:	60 f3       	brcs	.-40     	; 0x31f2 <delay+0x1c>
    321a:	21 e0       	ldi	r18, 0x01	; 1
    321c:	c2 1a       	sub	r12, r18
    321e:	d1 08       	sbc	r13, r1
    3220:	e1 08       	sbc	r14, r1
    3222:	f1 08       	sbc	r15, r1
    3224:	88 ee       	ldi	r24, 0xE8	; 232
    3226:	88 0e       	add	r8, r24
    3228:	83 e0       	ldi	r24, 0x03	; 3
    322a:	98 1e       	adc	r9, r24
    322c:	a1 1c       	adc	r10, r1
    322e:	b1 1c       	adc	r11, r1
    3230:	c1 14       	cp	r12, r1
    3232:	d1 04       	cpc	r13, r1
    3234:	e1 04       	cpc	r14, r1
    3236:	f1 04       	cpc	r15, r1
    3238:	19 f7       	brne	.-58     	; 0x3200 <delay+0x2a>
    323a:	db cf       	rjmp	.-74     	; 0x31f2 <delay+0x1c>
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	df 90       	pop	r13
    3242:	cf 90       	pop	r12
    3244:	bf 90       	pop	r11
    3246:	af 90       	pop	r10
    3248:	9f 90       	pop	r9
    324a:	8f 90       	pop	r8
    324c:	08 95       	ret

0000324e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    324e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3250:	84 b5       	in	r24, 0x24	; 36
    3252:	82 60       	ori	r24, 0x02	; 2
    3254:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3256:	84 b5       	in	r24, 0x24	; 36
    3258:	81 60       	ori	r24, 0x01	; 1
    325a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    325c:	85 b5       	in	r24, 0x25	; 37
    325e:	82 60       	ori	r24, 0x02	; 2
    3260:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3262:	85 b5       	in	r24, 0x25	; 37
    3264:	81 60       	ori	r24, 0x01	; 1
    3266:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3268:	ee e6       	ldi	r30, 0x6E	; 110
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	81 60       	ori	r24, 0x01	; 1
    3270:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3272:	e1 e8       	ldi	r30, 0x81	; 129
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3278:	80 81       	ld	r24, Z
    327a:	82 60       	ori	r24, 0x02	; 2
    327c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    327e:	80 81       	ld	r24, Z
    3280:	81 60       	ori	r24, 0x01	; 1
    3282:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3284:	e0 e8       	ldi	r30, 0x80	; 128
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	81 60       	ori	r24, 0x01	; 1
    328c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    328e:	e1 eb       	ldi	r30, 0xB1	; 177
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	84 60       	ori	r24, 0x04	; 4
    3296:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3298:	e0 eb       	ldi	r30, 0xB0	; 176
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	81 60       	ori	r24, 0x01	; 1
    32a0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    32a2:	ea e7       	ldi	r30, 0x7A	; 122
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	84 60       	ori	r24, 0x04	; 4
    32aa:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    32ac:	80 81       	ld	r24, Z
    32ae:	82 60       	ori	r24, 0x02	; 2
    32b0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    32b2:	80 81       	ld	r24, Z
    32b4:	81 60       	ori	r24, 0x01	; 1
    32b6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    32b8:	80 81       	ld	r24, Z
    32ba:	80 68       	ori	r24, 0x80	; 128
    32bc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    32be:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    32c2:	08 95       	ret

000032c4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    32c4:	83 30       	cpi	r24, 0x03	; 3
    32c6:	81 f0       	breq	.+32     	; 0x32e8 <turnOffPWM+0x24>
    32c8:	28 f4       	brcc	.+10     	; 0x32d4 <turnOffPWM+0x10>
    32ca:	81 30       	cpi	r24, 0x01	; 1
    32cc:	99 f0       	breq	.+38     	; 0x32f4 <turnOffPWM+0x30>
    32ce:	82 30       	cpi	r24, 0x02	; 2
    32d0:	a1 f0       	breq	.+40     	; 0x32fa <turnOffPWM+0x36>
    32d2:	08 95       	ret
    32d4:	87 30       	cpi	r24, 0x07	; 7
    32d6:	a9 f0       	breq	.+42     	; 0x3302 <turnOffPWM+0x3e>
    32d8:	88 30       	cpi	r24, 0x08	; 8
    32da:	b9 f0       	breq	.+46     	; 0x330a <turnOffPWM+0x46>
    32dc:	84 30       	cpi	r24, 0x04	; 4
    32de:	d1 f4       	brne	.+52     	; 0x3314 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    32e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    32e4:	8f 7d       	andi	r24, 0xDF	; 223
    32e6:	03 c0       	rjmp	.+6      	; 0x32ee <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    32e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    32ec:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    32ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    32f2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    32f4:	84 b5       	in	r24, 0x24	; 36
    32f6:	8f 77       	andi	r24, 0x7F	; 127
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    32fa:	84 b5       	in	r24, 0x24	; 36
    32fc:	8f 7d       	andi	r24, 0xDF	; 223
    32fe:	84 bd       	out	0x24, r24	; 36
    3300:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3302:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3306:	8f 77       	andi	r24, 0x7F	; 127
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    330a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    330e:	8f 7d       	andi	r24, 0xDF	; 223
    3310:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3314:	08 95       	ret

00003316 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	fc 01       	movw	r30, r24
    331e:	e1 53       	subi	r30, 0x31	; 49
    3320:	fc 4f       	sbci	r31, 0xFC	; 252
    3322:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3324:	fc 01       	movw	r30, r24
    3326:	ed 51       	subi	r30, 0x1D	; 29
    3328:	fc 4f       	sbci	r31, 0xFC	; 252
    332a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    332c:	88 23       	and	r24, r24
    332e:	61 f1       	breq	.+88     	; 0x3388 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	fc 01       	movw	r30, r24
    3338:	e5 5f       	subi	r30, 0xF5	; 245
    333a:	fb 4f       	sbci	r31, 0xFB	; 251
    333c:	c5 91       	lpm	r28, Z+
    333e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3340:	fc 01       	movw	r30, r24
    3342:	ef 5f       	subi	r30, 0xFF	; 255
    3344:	fb 4f       	sbci	r31, 0xFB	; 251
    3346:	a5 91       	lpm	r26, Z+
    3348:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    334a:	61 11       	cpse	r22, r1
    334c:	09 c0       	rjmp	.+18     	; 0x3360 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    334e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3350:	f8 94       	cli
		*reg &= ~bit;
    3352:	88 81       	ld	r24, Y
    3354:	20 95       	com	r18
    3356:	82 23       	and	r24, r18
    3358:	88 83       	st	Y, r24
		*out &= ~bit;
    335a:	ec 91       	ld	r30, X
    335c:	2e 23       	and	r18, r30
    335e:	0b c0       	rjmp	.+22     	; 0x3376 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3360:	62 30       	cpi	r22, 0x02	; 2
    3362:	61 f4       	brne	.+24     	; 0x337c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3364:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3366:	f8 94       	cli
		*reg &= ~bit;
    3368:	88 81       	ld	r24, Y
    336a:	32 2f       	mov	r19, r18
    336c:	30 95       	com	r19
    336e:	83 23       	and	r24, r19
    3370:	88 83       	st	Y, r24
		*out |= bit;
    3372:	ec 91       	ld	r30, X
    3374:	2e 2b       	or	r18, r30
    3376:	2c 93       	st	X, r18
		SREG = oldSREG;
    3378:	9f bf       	out	0x3f, r25	; 63
    337a:	06 c0       	rjmp	.+12     	; 0x3388 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    337c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    337e:	f8 94       	cli
		*reg |= bit;
    3380:	e8 81       	ld	r30, Y
    3382:	2e 2b       	or	r18, r30
    3384:	28 83       	st	Y, r18
		SREG = oldSREG;
    3386:	8f bf       	out	0x3f, r24	; 63
	}
}
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	08 95       	ret

0000338e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	f9 01       	movw	r30, r18
    339a:	e5 54       	subi	r30, 0x45	; 69
    339c:	fc 4f       	sbci	r31, 0xFC	; 252
    339e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    33a0:	f9 01       	movw	r30, r18
    33a2:	e1 53       	subi	r30, 0x31	; 49
    33a4:	fc 4f       	sbci	r31, 0xFC	; 252
    33a6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    33a8:	f9 01       	movw	r30, r18
    33aa:	ed 51       	subi	r30, 0x1D	; 29
    33ac:	fc 4f       	sbci	r31, 0xFC	; 252
    33ae:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    33b0:	cc 23       	and	r28, r28
    33b2:	c1 f0       	breq	.+48     	; 0x33e4 <digitalWrite+0x56>
    33b4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33b6:	81 11       	cpse	r24, r1
    33b8:	0e 94 62 19 	call	0x32c4	; 0x32c4 <turnOffPWM>

	out = portOutputRegister(port);
    33bc:	ec 2f       	mov	r30, r28
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	ef 5f       	subi	r30, 0xFF	; 255
    33c6:	fb 4f       	sbci	r31, 0xFB	; 251
    33c8:	a5 91       	lpm	r26, Z+
    33ca:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    33cc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    33ce:	f8 94       	cli

	if (val == LOW) {
    33d0:	11 11       	cpse	r17, r1
    33d2:	04 c0       	rjmp	.+8      	; 0x33dc <digitalWrite+0x4e>
		*out &= ~bit;
    33d4:	8c 91       	ld	r24, X
    33d6:	d0 95       	com	r29
    33d8:	d8 23       	and	r29, r24
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    33dc:	ec 91       	ld	r30, X
    33de:	de 2b       	or	r29, r30
    33e0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    33e2:	9f bf       	out	0x3f, r25	; 63
}
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	08 95       	ret

000033ec <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    33ec:	88 5e       	subi	r24, 0xE8	; 232
    33ee:	9e 4f       	sbci	r25, 0xFE	; 254
    33f0:	dc 01       	movw	r26, r24
    33f2:	8d 91       	ld	r24, X+
    33f4:	9c 91       	ld	r25, X
    33f6:	dc 01       	movw	r26, r24
    33f8:	ed 91       	ld	r30, X+
    33fa:	fc 91       	ld	r31, X
    33fc:	04 80       	ldd	r0, Z+4	; 0x04
    33fe:	f5 81       	ldd	r31, Z+5	; 0x05
    3400:	e0 2d       	mov	r30, r0
    3402:	09 94       	ijmp

00003404 <_ZN13Adafruit_FONA5writeEh>:
    3404:	88 5e       	subi	r24, 0xE8	; 232
    3406:	9e 4f       	sbci	r25, 0xFE	; 254
    3408:	dc 01       	movw	r26, r24
    340a:	8d 91       	ld	r24, X+
    340c:	9c 91       	ld	r25, X
    340e:	dc 01       	movw	r26, r24
    3410:	ed 91       	ld	r30, X+
    3412:	fc 91       	ld	r31, X
    3414:	01 90       	ld	r0, Z+
    3416:	f0 81       	ld	r31, Z
    3418:	e0 2d       	mov	r30, r0
    341a:	09 94       	ijmp

0000341c <_ZN13Adafruit_FONA4readEv>:
    341c:	88 5e       	subi	r24, 0xE8	; 232
    341e:	9e 4f       	sbci	r25, 0xFE	; 254
    3420:	dc 01       	movw	r26, r24
    3422:	8d 91       	ld	r24, X+
    3424:	9c 91       	ld	r25, X
    3426:	dc 01       	movw	r26, r24
    3428:	ed 91       	ld	r30, X+
    342a:	fc 91       	ld	r31, X
    342c:	06 80       	ldd	r0, Z+6	; 0x06
    342e:	f7 81       	ldd	r31, Z+7	; 0x07
    3430:	e0 2d       	mov	r30, r0
    3432:	09 94       	ijmp

00003434 <_ZN13Adafruit_FONA4peekEv>:
    3434:	88 5e       	subi	r24, 0xE8	; 232
    3436:	9e 4f       	sbci	r25, 0xFE	; 254
    3438:	dc 01       	movw	r26, r24
    343a:	8d 91       	ld	r24, X+
    343c:	9c 91       	ld	r25, X
    343e:	dc 01       	movw	r26, r24
    3440:	ed 91       	ld	r30, X+
    3442:	fc 91       	ld	r31, X
    3444:	00 84       	ldd	r0, Z+8	; 0x08
    3446:	f1 85       	ldd	r31, Z+9	; 0x09
    3448:	e0 2d       	mov	r30, r0
    344a:	09 94       	ijmp

0000344c <_ZN13Adafruit_FONA5flushEv>:
    344c:	88 5e       	subi	r24, 0xE8	; 232
    344e:	9e 4f       	sbci	r25, 0xFE	; 254
    3450:	dc 01       	movw	r26, r24
    3452:	8d 91       	ld	r24, X+
    3454:	9c 91       	ld	r25, X
    3456:	dc 01       	movw	r26, r24
    3458:	ed 91       	ld	r30, X+
    345a:	fc 91       	ld	r31, X
    345c:	02 84       	ldd	r0, Z+10	; 0x0a
    345e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3460:	e0 2d       	mov	r30, r0
    3462:	09 94       	ijmp

00003464 <_ZN13Adafruit_FONAC1Ea>:
    3464:	fc 01       	movw	r30, r24
    3466:	13 82       	std	Z+3, r1	; 0x03
    3468:	12 82       	std	Z+2, r1	; 0x02
    346a:	88 ee       	ldi	r24, 0xE8	; 232
    346c:	93 e0       	ldi	r25, 0x03	; 3
    346e:	a0 e0       	ldi	r26, 0x00	; 0
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	84 83       	std	Z+4, r24	; 0x04
    3474:	95 83       	std	Z+5, r25	; 0x05
    3476:	a6 83       	std	Z+6, r26	; 0x06
    3478:	b7 83       	std	Z+7, r27	; 0x07
    347a:	82 ee       	ldi	r24, 0xE2	; 226
    347c:	92 e0       	ldi	r25, 0x02	; 2
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
    3482:	64 87       	std	Z+12, r22	; 0x0c
    3484:	df 01       	movw	r26, r30
    3486:	a3 5f       	subi	r26, 0xF3	; 243
    3488:	be 4f       	sbci	r27, 0xFE	; 254
    348a:	8f e4       	ldi	r24, 0x4F	; 79
    348c:	97 e0       	ldi	r25, 0x07	; 7
    348e:	11 96       	adiw	r26, 0x01	; 1
    3490:	9c 93       	st	X, r25
    3492:	8e 93       	st	-X, r24
    3494:	12 96       	adiw	r26, 0x02	; 2
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	1c 92       	st	X, r1
    349a:	1e 92       	st	-X, r1
    349c:	12 96       	adiw	r26, 0x02	; 2
    349e:	11 96       	adiw	r26, 0x01	; 1
    34a0:	1c 92       	st	X, r1
    34a2:	1e 92       	st	-X, r1
    34a4:	17 96       	adiw	r26, 0x07	; 7
    34a6:	11 96       	adiw	r26, 0x01	; 1
    34a8:	1c 92       	st	X, r1
    34aa:	1e 92       	st	-X, r1
    34ac:	15 97       	sbiw	r26, 0x05	; 5
    34ae:	1c 92       	st	X, r1
    34b0:	11 96       	adiw	r26, 0x01	; 1
    34b2:	8a e4       	ldi	r24, 0x4A	; 74
    34b4:	97 e0       	ldi	r25, 0x07	; 7
    34b6:	8d 93       	st	X+, r24
    34b8:	9c 93       	st	X, r25
    34ba:	ea 5e       	subi	r30, 0xEA	; 234
    34bc:	fe 4f       	sbci	r31, 0xFE	; 254
    34be:	87 e4       	ldi	r24, 0x47	; 71
    34c0:	97 e0       	ldi	r25, 0x07	; 7
    34c2:	91 83       	std	Z+1, r25	; 0x01
    34c4:	80 83       	st	Z, r24
    34c6:	08 95       	ret

000034c8 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    34c8:	fc 01       	movw	r30, r24
    34ca:	e3 5f       	subi	r30, 0xF3	; 243
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	71 83       	std	Z+1, r23	; 0x01
    34d0:	60 83       	st	Z, r22
    34d2:	32 96       	adiw	r30, 0x02	; 2
    34d4:	51 83       	std	Z+1, r21	; 0x01
    34d6:	40 83       	st	Z, r20
    34d8:	32 96       	adiw	r30, 0x02	; 2
    34da:	31 83       	std	Z+1, r19	; 0x01
    34dc:	20 83       	st	Z, r18
    34de:	08 95       	ret

000034e0 <_ZN13Adafruit_FONA10flushInputEv>:
    34e0:	0f 93       	push	r16
    34e2:	1f 93       	push	r17
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    34e8:	ec 01       	movw	r28, r24
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	8c 01       	movw	r16, r24
    34f0:	0f 5f       	subi	r16, 0xFF	; 255
    34f2:	1f 4f       	sbci	r17, 0xFF	; 255
    34f4:	88 97       	sbiw	r24, 0x28	; 40
    34f6:	d8 f4       	brcc	.+54     	; 0x352e <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    34f8:	e8 81       	ld	r30, Y
    34fa:	f9 81       	ldd	r31, Y+1	; 0x01
    34fc:	04 80       	ldd	r0, Z+4	; 0x04
    34fe:	f5 81       	ldd	r31, Z+5	; 0x05
    3500:	e0 2d       	mov	r30, r0
    3502:	ce 01       	movw	r24, r28
    3504:	09 95       	icall
    3506:	89 2b       	or	r24, r25
    3508:	51 f0       	breq	.+20     	; 0x351e <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    350a:	e8 81       	ld	r30, Y
    350c:	f9 81       	ldd	r31, Y+1	; 0x01
    350e:	06 80       	ldd	r0, Z+6	; 0x06
    3510:	f7 81       	ldd	r31, Z+7	; 0x07
    3512:	e0 2d       	mov	r30, r0
    3514:	ce 01       	movw	r24, r28
    3516:	09 95       	icall
    3518:	00 e0       	ldi	r16, 0x00	; 0
    351a:	10 e0       	ldi	r17, 0x00	; 0
    351c:	ed cf       	rjmp	.-38     	; 0x34f8 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    352a:	c8 01       	movw	r24, r16
    352c:	e0 cf       	rjmp	.-64     	; 0x34ee <_ZN13Adafruit_FONA10flushInputEv+0xe>
    352e:	df 91       	pop	r29
    3530:	cf 91       	pop	r28
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	08 95       	ret

00003538 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	ec 01       	movw	r28, r24
    3544:	8b 01       	movw	r16, r22
    3546:	f4 2e       	mov	r15, r20
    3548:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    354c:	63 e2       	ldi	r22, 0x23	; 35
    354e:	75 e0       	ldi	r23, 0x05	; 5
    3550:	8a e1       	ldi	r24, 0x1A	; 26
    3552:	97 e0       	ldi	r25, 0x07	; 7
    3554:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3558:	65 e1       	ldi	r22, 0x15	; 21
    355a:	75 e0       	ldi	r23, 0x05	; 5
    355c:	8a e1       	ldi	r24, 0x1A	; 26
    355e:	97 e0       	ldi	r25, 0x07	; 7
    3560:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3564:	b8 01       	movw	r22, r16
    3566:	8a e1       	ldi	r24, 0x1A	; 26
    3568:	97 e0       	ldi	r25, 0x07	; 7
    356a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    356e:	62 e2       	ldi	r22, 0x22	; 34
    3570:	8a e1       	ldi	r24, 0x1A	; 26
    3572:	97 e0       	ldi	r25, 0x07	; 7
    3574:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEc>
    3578:	c8 5e       	subi	r28, 0xE8	; 232
    357a:	de 4f       	sbci	r29, 0xFE	; 254
    357c:	67 e0       	ldi	r22, 0x07	; 7
    357e:	75 e0       	ldi	r23, 0x05	; 5
    3580:	88 81       	ld	r24, Y
    3582:	99 81       	ldd	r25, Y+1	; 0x01
    3584:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3588:	b8 01       	movw	r22, r16
    358a:	88 81       	ld	r24, Y
    358c:	99 81       	ldd	r25, Y+1	; 0x01
    358e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3592:	88 81       	ld	r24, Y
    3594:	99 81       	ldd	r25, Y+1	; 0x01
    3596:	ff 20       	and	r15, r15
    3598:	19 f0       	breq	.+6      	; 0x35a0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    359a:	63 e0       	ldi	r22, 0x03	; 3
    359c:	75 e0       	ldi	r23, 0x05	; 5
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	75 e0       	ldi	r23, 0x05	; 5
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	ff 90       	pop	r15
    35ae:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>

000035b2 <_ZN13Adafruit_FONA8readlineEjb>:
    35b2:	9f 92       	push	r9
    35b4:	af 92       	push	r10
    35b6:	bf 92       	push	r11
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	7c 01       	movw	r14, r24
    35ca:	94 2e       	mov	r9, r20
    35cc:	8b 01       	movw	r16, r22
    35ce:	00 0f       	add	r16, r16
    35d0:	11 1f       	adc	r17, r17
    35d2:	00 0f       	add	r16, r16
    35d4:	11 1f       	adc	r17, r17
    35d6:	c0 e0       	ldi	r28, 0x00	; 0
    35d8:	d0 e0       	ldi	r29, 0x00	; 0
    35da:	57 01       	movw	r10, r14
    35dc:	88 ee       	ldi	r24, 0xE8	; 232
    35de:	a8 1a       	sub	r10, r24
    35e0:	8e ef       	ldi	r24, 0xFE	; 254
    35e2:	b8 0a       	sbc	r11, r24
    35e4:	01 15       	cp	r16, r1
    35e6:	11 05       	cpc	r17, r1
    35e8:	09 f4       	brne	.+2      	; 0x35ec <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    35ea:	50 c0       	rjmp	.+160    	; 0x368c <_ZN13Adafruit_FONA8readlineEjb+0xda>
    35ec:	ce 3f       	cpi	r28, 0xFE	; 254
    35ee:	d1 05       	cpc	r29, r1
    35f0:	80 f0       	brcs	.+32     	; 0x3612 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    35f2:	65 e5       	ldi	r22, 0x55	; 85
    35f4:	74 e0       	ldi	r23, 0x04	; 4
    35f6:	22 c0       	rjmp	.+68     	; 0x363c <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    35f8:	f5 01       	movw	r30, r10
    35fa:	80 81       	ld	r24, Z
    35fc:	91 81       	ldd	r25, Z+1	; 0x01
    35fe:	dc 01       	movw	r26, r24
    3600:	ed 91       	ld	r30, X+
    3602:	fc 91       	ld	r31, X
    3604:	06 80       	ldd	r0, Z+6	; 0x06
    3606:	f7 81       	ldd	r31, Z+7	; 0x07
    3608:	e0 2d       	mov	r30, r0
    360a:	09 95       	icall
    360c:	6c 01       	movw	r12, r24
    360e:	8d 30       	cpi	r24, 0x0D	; 13
    3610:	69 f4       	brne	.+26     	; 0x362c <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    3612:	d5 01       	movw	r26, r10
    3614:	8d 91       	ld	r24, X+
    3616:	9c 91       	ld	r25, X
    3618:	dc 01       	movw	r26, r24
    361a:	ed 91       	ld	r30, X+
    361c:	fc 91       	ld	r31, X
    361e:	04 80       	ldd	r0, Z+4	; 0x04
    3620:	f5 81       	ldd	r31, Z+5	; 0x05
    3622:	e0 2d       	mov	r30, r0
    3624:	09 95       	icall
    3626:	89 2b       	or	r24, r25
    3628:	39 f7       	brne	.-50     	; 0x35f8 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    362a:	26 c0       	rjmp	.+76     	; 0x3678 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    362c:	8a 30       	cpi	r24, 0x0A	; 10
    362e:	59 f4       	brne	.+22     	; 0x3646 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3630:	20 97       	sbiw	r28, 0x00	; 0
    3632:	79 f3       	breq	.-34     	; 0x3612 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3634:	91 10       	cpse	r9, r1
    3636:	07 c0       	rjmp	.+14     	; 0x3646 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3638:	6d e4       	ldi	r22, 0x4D	; 77
    363a:	74 e0       	ldi	r23, 0x04	; 4
    363c:	8a e1       	ldi	r24, 0x1A	; 26
    363e:	97 e0       	ldi	r25, 0x07	; 7
    3640:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3644:	23 c0       	rjmp	.+70     	; 0x368c <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3646:	f7 01       	movw	r30, r14
    3648:	ec 0f       	add	r30, r28
    364a:	fd 1f       	adc	r31, r29
    364c:	c6 86       	std	Z+14, r12	; 0x0e
    364e:	b6 01       	movw	r22, r12
    3650:	77 27       	eor	r23, r23
    3652:	40 e1       	ldi	r20, 0x10	; 16
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	8a e1       	ldi	r24, 0x1A	; 26
    3658:	97 e0       	ldi	r25, 0x07	; 7
    365a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN5Print5printEii>
    365e:	65 e8       	ldi	r22, 0x85	; 133
    3660:	72 e0       	ldi	r23, 0x02	; 2
    3662:	8a e1       	ldi	r24, 0x1A	; 26
    3664:	97 e0       	ldi	r25, 0x07	; 7
    3666:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    366a:	6c 2d       	mov	r22, r12
    366c:	8a e1       	ldi	r24, 0x1A	; 26
    366e:	97 e0       	ldi	r25, 0x07	; 7
    3670:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEc>
    3674:	21 96       	adiw	r28, 0x01	; 1
    3676:	cd cf       	rjmp	.-102    	; 0x3612 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3678:	01 50       	subi	r16, 0x01	; 1
    367a:	11 09       	sbc	r17, r1
    367c:	e9 f2       	breq	.-70     	; 0x3638 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    368a:	ac cf       	rjmp	.-168    	; 0x35e4 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    368c:	f7 01       	movw	r30, r14
    368e:	ec 0f       	add	r30, r28
    3690:	fd 1f       	adc	r31, r29
    3692:	16 86       	std	Z+14, r1	; 0x0e
    3694:	8c 2f       	mov	r24, r28
    3696:	df 91       	pop	r29
    3698:	cf 91       	pop	r28
    369a:	1f 91       	pop	r17
    369c:	0f 91       	pop	r16
    369e:	ff 90       	pop	r15
    36a0:	ef 90       	pop	r14
    36a2:	df 90       	pop	r13
    36a4:	cf 90       	pop	r12
    36a6:	bf 90       	pop	r11
    36a8:	af 90       	pop	r10
    36aa:	9f 90       	pop	r9
    36ac:	08 95       	ret

000036ae <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
    36b6:	ec 01       	movw	r28, r24
    36b8:	8b 01       	movw	r16, r22
    36ba:	ba 01       	movw	r22, r20
    36bc:	40 e0       	ldi	r20, 0x00	; 0
    36be:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    36c2:	6b e5       	ldi	r22, 0x5B	; 91
    36c4:	74 e0       	ldi	r23, 0x04	; 4
    36c6:	8a e1       	ldi	r24, 0x1A	; 26
    36c8:	97 e0       	ldi	r25, 0x07	; 7
    36ca:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    36ce:	2e 96       	adiw	r28, 0x0e	; 14
    36d0:	be 01       	movw	r22, r28
    36d2:	8a e1       	ldi	r24, 0x1A	; 26
    36d4:	97 e0       	ldi	r25, 0x07	; 7
    36d6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    36da:	b8 01       	movw	r22, r16
    36dc:	ce 01       	movw	r24, r28
    36de:	0e 94 41 29 	call	0x5282	; 0x5282 <strcmp_P>
    36e2:	21 e0       	ldi	r18, 0x01	; 1
    36e4:	89 2b       	or	r24, r25
    36e6:	09 f0       	breq	.+2      	; 0x36ea <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	82 2f       	mov	r24, r18
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	08 95       	ret

000036f6 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	ec 01       	movw	r28, r24
    36fc:	fc 01       	movw	r30, r24
    36fe:	e8 5e       	subi	r30, 0xE8	; 232
    3700:	fe 4f       	sbci	r31, 0xFE	; 254
    3702:	66 23       	and	r22, r22
    3704:	31 f0       	breq	.+12     	; 0x3712 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    3706:	62 e2       	ldi	r22, 0x22	; 34
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEc>
    3710:	04 c0       	rjmp	.+8      	; 0x371a <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    371a:	fe 01       	movw	r30, r28
    371c:	ea 5e       	subi	r30, 0xEA	; 234
    371e:	fe 4f       	sbci	r31, 0xFE	; 254
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	40 e1       	ldi	r20, 0x10	; 16
    3726:	57 e2       	ldi	r21, 0x27	; 39
    3728:	ce 01       	movw	r24, r28
    372a:	df 91       	pop	r29
    372c:	cf 91       	pop	r28
    372e:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00003732 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	ec 01       	movw	r28, r24
    373c:	8a 01       	movw	r16, r20
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3744:	fe 01       	movw	r30, r28
    3746:	e8 5e       	subi	r30, 0xE8	; 232
    3748:	fe 4f       	sbci	r31, 0xFE	; 254
    374a:	b8 01       	movw	r22, r16
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	ce 01       	movw	r24, r28
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003764 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	ec 01       	movw	r28, r24
    376e:	8a 01       	movw	r16, r20
    3770:	41 e0       	ldi	r20, 0x01	; 1
    3772:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3776:	fe 01       	movw	r30, r28
    3778:	e8 5e       	subi	r30, 0xE8	; 232
    377a:	fe 4f       	sbci	r31, 0xFE	; 254
    377c:	b8 01       	movw	r22, r16
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3786:	61 e0       	ldi	r22, 0x01	; 1
    3788:	ce 01       	movw	r24, r28
    378a:	df 91       	pop	r29
    378c:	cf 91       	pop	r28
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003796 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    3796:	cf 92       	push	r12
    3798:	df 92       	push	r13
    379a:	ef 92       	push	r14
    379c:	ff 92       	push	r15
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	ec 01       	movw	r28, r24
    37a4:	69 01       	movw	r12, r18
    37a6:	7a 01       	movw	r14, r20
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 9c 1a 	call	0x3538	; 0x3538 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    37ae:	fe 01       	movw	r30, r28
    37b0:	e8 5e       	subi	r30, 0xE8	; 232
    37b2:	fe 4f       	sbci	r31, 0xFE	; 254
    37b4:	2a e0       	ldi	r18, 0x0A	; 10
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	b7 01       	movw	r22, r14
    37ba:	a6 01       	movw	r20, r12
    37bc:	80 81       	ld	r24, Z
    37be:	91 81       	ldd	r25, Z+1	; 0x01
    37c0:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <_ZN5Print5printEli>
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	ce 01       	movw	r24, r28
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

000037d8 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    37d8:	4f 92       	push	r4
    37da:	5f 92       	push	r5
    37dc:	6f 92       	push	r6
    37de:	7f 92       	push	r7
    37e0:	8f 92       	push	r8
    37e2:	9f 92       	push	r9
    37e4:	af 92       	push	r10
    37e6:	bf 92       	push	r11
    37e8:	ef 92       	push	r14
    37ea:	ff 92       	push	r15
    37ec:	0f 93       	push	r16
    37ee:	1f 93       	push	r17
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	7c 01       	movw	r14, r24
    37f6:	2a 01       	movw	r4, r20
    37f8:	3b 01       	movw	r6, r22
    37fa:	48 01       	movw	r8, r16
    37fc:	59 01       	movw	r10, r18
    37fe:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    3802:	69 ef       	ldi	r22, 0xF9	; 249
    3804:	74 e0       	ldi	r23, 0x04	; 4
    3806:	8a e1       	ldi	r24, 0x1A	; 26
    3808:	97 e0       	ldi	r25, 0x07	; 7
    380a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    380e:	6c ee       	ldi	r22, 0xEC	; 236
    3810:	74 e0       	ldi	r23, 0x04	; 4
    3812:	8a e1       	ldi	r24, 0x1A	; 26
    3814:	97 e0       	ldi	r25, 0x07	; 7
    3816:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    381a:	2a e0       	ldi	r18, 0x0A	; 10
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	b3 01       	movw	r22, r6
    3820:	a2 01       	movw	r20, r4
    3822:	8a e1       	ldi	r24, 0x1A	; 26
    3824:	97 e0       	ldi	r25, 0x07	; 7
    3826:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <_ZN5Print5printEmi>
    382a:	6c e2       	ldi	r22, 0x2C	; 44
    382c:	8a e1       	ldi	r24, 0x1A	; 26
    382e:	97 e0       	ldi	r25, 0x07	; 7
    3830:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN5Print5printEc>
    3834:	2a e0       	ldi	r18, 0x0A	; 10
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	b5 01       	movw	r22, r10
    383a:	a4 01       	movw	r20, r8
    383c:	8a e1       	ldi	r24, 0x1A	; 26
    383e:	97 e0       	ldi	r25, 0x07	; 7
    3840:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN5Print7printlnEmi>
    3844:	e7 01       	movw	r28, r14
    3846:	c8 5e       	subi	r28, 0xE8	; 232
    3848:	de 4f       	sbci	r29, 0xFE	; 254
    384a:	6f ed       	ldi	r22, 0xDF	; 223
    384c:	74 e0       	ldi	r23, 0x04	; 4
    384e:	88 81       	ld	r24, Y
    3850:	99 81       	ldd	r25, Y+1	; 0x01
    3852:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3856:	2a e0       	ldi	r18, 0x0A	; 10
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	b3 01       	movw	r22, r6
    385c:	a2 01       	movw	r20, r4
    385e:	88 81       	ld	r24, Y
    3860:	99 81       	ldd	r25, Y+1	; 0x01
    3862:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <_ZN5Print5printEmi>
    3866:	6f e8       	ldi	r22, 0x8F	; 143
    3868:	72 e0       	ldi	r23, 0x02	; 2
    386a:	88 81       	ld	r24, Y
    386c:	99 81       	ldd	r25, Y+1	; 0x01
    386e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    3872:	2a e0       	ldi	r18, 0x0A	; 10
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	b5 01       	movw	r22, r10
    3878:	a4 01       	movw	r20, r8
    387a:	88 81       	ld	r24, Y
    387c:	99 81       	ldd	r25, Y+1	; 0x01
    387e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <_ZN5Print7printlnEmi>
    3882:	40 e1       	ldi	r20, 0x10	; 16
    3884:	57 e2       	ldi	r21, 0x27	; 39
    3886:	66 ed       	ldi	r22, 0xD6	; 214
    3888:	74 e0       	ldi	r23, 0x04	; 4
    388a:	c7 01       	movw	r24, r14
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	ff 90       	pop	r15
    3896:	ef 90       	pop	r14
    3898:	bf 90       	pop	r11
    389a:	af 90       	pop	r10
    389c:	9f 90       	pop	r9
    389e:	8f 90       	pop	r8
    38a0:	7f 90       	pop	r7
    38a2:	6f 90       	pop	r6
    38a4:	5f 90       	pop	r5
    38a6:	4f 90       	pop	r4
    38a8:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

000038ac <_ZN13Adafruit_FONA8getReplyEPcj>:
    38ac:	ef 92       	push	r14
    38ae:	ff 92       	push	r15
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	ec 01       	movw	r28, r24
    38ba:	8b 01       	movw	r16, r22
    38bc:	7a 01       	movw	r14, r20
    38be:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    38c2:	66 e4       	ldi	r22, 0x46	; 70
    38c4:	74 e0       	ldi	r23, 0x04	; 4
    38c6:	8a e1       	ldi	r24, 0x1A	; 26
    38c8:	97 e0       	ldi	r25, 0x07	; 7
    38ca:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    38ce:	b8 01       	movw	r22, r16
    38d0:	8a e1       	ldi	r24, 0x1A	; 26
    38d2:	97 e0       	ldi	r25, 0x07	; 7
    38d4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    38d8:	fe 01       	movw	r30, r28
    38da:	e8 5e       	subi	r30, 0xE8	; 232
    38dc:	fe 4f       	sbci	r31, 0xFE	; 254
    38de:	b8 01       	movw	r22, r16
    38e0:	80 81       	ld	r24, Z
    38e2:	91 81       	ldd	r25, Z+1	; 0x01
    38e4:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    38e8:	40 e0       	ldi	r20, 0x00	; 0
    38ea:	b7 01       	movw	r22, r14
    38ec:	ce 01       	movw	r24, r28
    38ee:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    38f2:	18 2f       	mov	r17, r24
    38f4:	6f e3       	ldi	r22, 0x3F	; 63
    38f6:	74 e0       	ldi	r23, 0x04	; 4
    38f8:	8a e1       	ldi	r24, 0x1A	; 26
    38fa:	97 e0       	ldi	r25, 0x07	; 7
    38fc:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3900:	be 01       	movw	r22, r28
    3902:	62 5f       	subi	r22, 0xF2	; 242
    3904:	7f 4f       	sbci	r23, 0xFF	; 255
    3906:	8a e1       	ldi	r24, 0x1A	; 26
    3908:	97 e0       	ldi	r25, 0x07	; 7
    390a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    390e:	81 2f       	mov	r24, r17
    3910:	df 91       	pop	r29
    3912:	cf 91       	pop	r28
    3914:	1f 91       	pop	r17
    3916:	0f 91       	pop	r16
    3918:	ff 90       	pop	r15
    391a:	ef 90       	pop	r14
    391c:	08 95       	ret

0000391e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	ec 01       	movw	r28, r24
    392c:	8b 01       	movw	r16, r22
    392e:	7a 01       	movw	r14, r20
    3930:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    3934:	68 e3       	ldi	r22, 0x38	; 56
    3936:	74 e0       	ldi	r23, 0x04	; 4
    3938:	8a e1       	ldi	r24, 0x1A	; 26
    393a:	97 e0       	ldi	r25, 0x07	; 7
    393c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3940:	b8 01       	movw	r22, r16
    3942:	8a e1       	ldi	r24, 0x1A	; 26
    3944:	97 e0       	ldi	r25, 0x07	; 7
    3946:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>
    394a:	fe 01       	movw	r30, r28
    394c:	e8 5e       	subi	r30, 0xE8	; 232
    394e:	fe 4f       	sbci	r31, 0xFE	; 254
    3950:	b8 01       	movw	r22, r16
    3952:	80 81       	ld	r24, Z
    3954:	91 81       	ldd	r25, Z+1	; 0x01
    3956:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	b7 01       	movw	r22, r14
    395e:	ce 01       	movw	r24, r28
    3960:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3964:	18 2f       	mov	r17, r24
    3966:	61 e3       	ldi	r22, 0x31	; 49
    3968:	74 e0       	ldi	r23, 0x04	; 4
    396a:	8a e1       	ldi	r24, 0x1A	; 26
    396c:	97 e0       	ldi	r25, 0x07	; 7
    396e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3972:	be 01       	movw	r22, r28
    3974:	62 5f       	subi	r22, 0xF2	; 242
    3976:	7f 4f       	sbci	r23, 0xFF	; 255
    3978:	8a e1       	ldi	r24, 0x1A	; 26
    397a:	97 e0       	ldi	r25, 0x07	; 7
    397c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3980:	81 2f       	mov	r24, r17
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	1f 91       	pop	r17
    3988:	0f 91       	pop	r16
    398a:	ff 90       	pop	r15
    398c:	ef 90       	pop	r14
    398e:	08 95       	ret

00003990 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    3990:	8f 92       	push	r8
    3992:	9f 92       	push	r9
    3994:	af 92       	push	r10
    3996:	bf 92       	push	r11
    3998:	cf 92       	push	r12
    399a:	df 92       	push	r13
    399c:	ef 92       	push	r14
    399e:	ff 92       	push	r15
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	ec 01       	movw	r28, r24
    39aa:	6b 01       	movw	r12, r22
    39ac:	49 01       	movw	r8, r18
    39ae:	5a 01       	movw	r10, r20
    39b0:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    39b4:	6a e2       	ldi	r22, 0x2A	; 42
    39b6:	74 e0       	ldi	r23, 0x04	; 4
    39b8:	8a e1       	ldi	r24, 0x1A	; 26
    39ba:	97 e0       	ldi	r25, 0x07	; 7
    39bc:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    39c0:	b6 01       	movw	r22, r12
    39c2:	8a e1       	ldi	r24, 0x1A	; 26
    39c4:	97 e0       	ldi	r25, 0x07	; 7
    39c6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    39ca:	2a e0       	ldi	r18, 0x0A	; 10
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	b5 01       	movw	r22, r10
    39d0:	a4 01       	movw	r20, r8
    39d2:	8a e1       	ldi	r24, 0x1A	; 26
    39d4:	97 e0       	ldi	r25, 0x07	; 7
    39d6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <_ZN5Print7printlnEli>
    39da:	7e 01       	movw	r14, r28
    39dc:	88 ee       	ldi	r24, 0xE8	; 232
    39de:	e8 1a       	sub	r14, r24
    39e0:	8e ef       	ldi	r24, 0xFE	; 254
    39e2:	f8 0a       	sbc	r15, r24
    39e4:	b6 01       	movw	r22, r12
    39e6:	f7 01       	movw	r30, r14
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    39f0:	2a e0       	ldi	r18, 0x0A	; 10
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	b5 01       	movw	r22, r10
    39f6:	a4 01       	movw	r20, r8
    39f8:	f7 01       	movw	r30, r14
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <_ZN5Print7printlnEli>
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	b8 01       	movw	r22, r16
    3a06:	ce 01       	movw	r24, r28
    3a08:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3a0c:	18 2f       	mov	r17, r24
    3a0e:	63 e2       	ldi	r22, 0x23	; 35
    3a10:	74 e0       	ldi	r23, 0x04	; 4
    3a12:	8a e1       	ldi	r24, 0x1A	; 26
    3a14:	97 e0       	ldi	r25, 0x07	; 7
    3a16:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3a1a:	be 01       	movw	r22, r28
    3a1c:	62 5f       	subi	r22, 0xF2	; 242
    3a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a20:	8a e1       	ldi	r24, 0x1A	; 26
    3a22:	97 e0       	ldi	r25, 0x07	; 7
    3a24:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3a28:	81 2f       	mov	r24, r17
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	df 90       	pop	r13
    3a38:	cf 90       	pop	r12
    3a3a:	bf 90       	pop	r11
    3a3c:	af 90       	pop	r10
    3a3e:	9f 90       	pop	r9
    3a40:	8f 90       	pop	r8
    3a42:	08 95       	ret

00003a44 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    3a44:	af 92       	push	r10
    3a46:	bf 92       	push	r11
    3a48:	cf 92       	push	r12
    3a4a:	df 92       	push	r13
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	ec 01       	movw	r28, r24
    3a5a:	6b 01       	movw	r12, r22
    3a5c:	7a 01       	movw	r14, r20
    3a5e:	59 01       	movw	r10, r18
    3a60:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    3a64:	6c e1       	ldi	r22, 0x1C	; 28
    3a66:	74 e0       	ldi	r23, 0x04	; 4
    3a68:	8a e1       	ldi	r24, 0x1A	; 26
    3a6a:	97 e0       	ldi	r25, 0x07	; 7
    3a6c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3a70:	b6 01       	movw	r22, r12
    3a72:	8a e1       	ldi	r24, 0x1A	; 26
    3a74:	97 e0       	ldi	r25, 0x07	; 7
    3a76:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3a7a:	62 e2       	ldi	r22, 0x22	; 34
    3a7c:	8a e1       	ldi	r24, 0x1A	; 26
    3a7e:	97 e0       	ldi	r25, 0x07	; 7
    3a80:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN5Print5printEc>
    3a84:	b7 01       	movw	r22, r14
    3a86:	8a e1       	ldi	r24, 0x1A	; 26
    3a88:	97 e0       	ldi	r25, 0x07	; 7
    3a8a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3a8e:	62 e2       	ldi	r22, 0x22	; 34
    3a90:	8a e1       	ldi	r24, 0x1A	; 26
    3a92:	97 e0       	ldi	r25, 0x07	; 7
    3a94:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEc>
    3a98:	8e 01       	movw	r16, r28
    3a9a:	08 5e       	subi	r16, 0xE8	; 232
    3a9c:	1e 4f       	sbci	r17, 0xFE	; 254
    3a9e:	b6 01       	movw	r22, r12
    3aa0:	f8 01       	movw	r30, r16
    3aa2:	80 81       	ld	r24, Z
    3aa4:	91 81       	ldd	r25, Z+1	; 0x01
    3aa6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3aaa:	62 e2       	ldi	r22, 0x22	; 34
    3aac:	f8 01       	movw	r30, r16
    3aae:	80 81       	ld	r24, Z
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN5Print5printEc>
    3ab6:	b7 01       	movw	r22, r14
    3ab8:	f8 01       	movw	r30, r16
    3aba:	80 81       	ld	r24, Z
    3abc:	91 81       	ldd	r25, Z+1	; 0x01
    3abe:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3ac2:	62 e2       	ldi	r22, 0x22	; 34
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	80 81       	ld	r24, Z
    3ac8:	91 81       	ldd	r25, Z+1	; 0x01
    3aca:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Print7printlnEc>
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	b5 01       	movw	r22, r10
    3ad2:	ce 01       	movw	r24, r28
    3ad4:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3ad8:	18 2f       	mov	r17, r24
    3ada:	65 e1       	ldi	r22, 0x15	; 21
    3adc:	74 e0       	ldi	r23, 0x04	; 4
    3ade:	8a e1       	ldi	r24, 0x1A	; 26
    3ae0:	97 e0       	ldi	r25, 0x07	; 7
    3ae2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3ae6:	be 01       	movw	r22, r28
    3ae8:	62 5f       	subi	r22, 0xF2	; 242
    3aea:	7f 4f       	sbci	r23, 0xFF	; 255
    3aec:	8a e1       	ldi	r24, 0x1A	; 26
    3aee:	97 e0       	ldi	r25, 0x07	; 7
    3af0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3af4:	81 2f       	mov	r24, r17
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	df 90       	pop	r13
    3b04:	cf 90       	pop	r12
    3b06:	bf 90       	pop	r11
    3b08:	af 90       	pop	r10
    3b0a:	08 95       	ret

00003b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    3b0c:	0f 93       	push	r16
    3b0e:	1f 93       	push	r17
    3b10:	cf 93       	push	r28
    3b12:	df 93       	push	r29
    3b14:	ec 01       	movw	r28, r24
    3b16:	8a 01       	movw	r16, r20
    3b18:	a9 01       	movw	r20, r18
    3b1a:	0e 94 8f 1c 	call	0x391e	; 0x391e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    3b1e:	88 23       	and	r24, r24
    3b20:	41 f0       	breq	.+16     	; 0x3b32 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    3b22:	b8 01       	movw	r22, r16
    3b24:	ce 01       	movw	r24, r28
    3b26:	0e 96       	adiw	r24, 0x0e	; 14
    3b28:	0e 94 41 29 	call	0x5282	; 0x5282 <strcmp_P>
    3b2c:	21 e0       	ldi	r18, 0x01	; 1
    3b2e:	89 2b       	or	r24, r25
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	82 2f       	mov	r24, r18
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	0f 91       	pop	r16
    3b3e:	08 95       	ret

00003b40 <_ZN13Adafruit_FONA5beginER6Stream>:
    3b40:	cf 92       	push	r12
    3b42:	df 92       	push	r13
    3b44:	ef 92       	push	r14
    3b46:	ff 92       	push	r15
    3b48:	0f 93       	push	r16
    3b4a:	1f 93       	push	r17
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	ec 01       	movw	r28, r24
    3b52:	7c 01       	movw	r14, r24
    3b54:	88 ee       	ldi	r24, 0xE8	; 232
    3b56:	e8 1a       	sub	r14, r24
    3b58:	8e ef       	ldi	r24, 0xFE	; 254
    3b5a:	f8 0a       	sbc	r15, r24
    3b5c:	d7 01       	movw	r26, r14
    3b5e:	6d 93       	st	X+, r22
    3b60:	7c 93       	st	X, r23
    3b62:	61 e0       	ldi	r22, 0x01	; 1
    3b64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b66:	0e 94 8b 19 	call	0x3316	; 0x3316 <pinMode>
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b6e:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
    3b72:	6a e0       	ldi	r22, 0x0A	; 10
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b82:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
    3b86:	64 e6       	ldi	r22, 0x64	; 100
    3b88:	70 e0       	ldi	r23, 0x00	; 0
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3b92:	61 e0       	ldi	r22, 0x01	; 1
    3b94:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b96:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
    3b9a:	66 e2       	ldi	r22, 0x26	; 38
    3b9c:	77 e0       	ldi	r23, 0x07	; 7
    3b9e:	8a e1       	ldi	r24, 0x1A	; 26
    3ba0:	97 e0       	ldi	r25, 0x07	; 7
    3ba2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3ba6:	8e e0       	ldi	r24, 0x0E	; 14
    3ba8:	c8 2e       	mov	r12, r24
    3baa:	d1 2c       	mov	r13, r1
    3bac:	8e 01       	movw	r16, r28
    3bae:	0a 5e       	subi	r16, 0xEA	; 234
    3bb0:	1e 4f       	sbci	r17, 0xFE	; 254
    3bb2:	f7 01       	movw	r30, r14
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	dc 01       	movw	r26, r24
    3bba:	ed 91       	ld	r30, X+
    3bbc:	fc 91       	ld	r31, X
    3bbe:	04 80       	ldd	r0, Z+4	; 0x04
    3bc0:	f5 81       	ldd	r31, Z+5	; 0x05
    3bc2:	e0 2d       	mov	r30, r0
    3bc4:	09 95       	icall
    3bc6:	89 2b       	or	r24, r25
    3bc8:	89 f0       	breq	.+34     	; 0x3bec <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    3bca:	61 e1       	ldi	r22, 0x11	; 17
    3bcc:	77 e0       	ldi	r23, 0x07	; 7
    3bce:	8a e1       	ldi	r24, 0x1A	; 26
    3bd0:	97 e0       	ldi	r25, 0x07	; 7
    3bd2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3bd6:	f7 01       	movw	r30, r14
    3bd8:	80 81       	ld	r24, Z
    3bda:	91 81       	ldd	r25, Z+1	; 0x01
    3bdc:	dc 01       	movw	r26, r24
    3bde:	ed 91       	ld	r30, X+
    3be0:	fc 91       	ld	r31, X
    3be2:	06 80       	ldd	r0, Z+6	; 0x06
    3be4:	f7 81       	ldd	r31, Z+7	; 0x07
    3be6:	e0 2d       	mov	r30, r0
    3be8:	09 95       	icall
    3bea:	e3 cf       	rjmp	.-58     	; 0x3bb2 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    3bec:	f8 01       	movw	r30, r16
    3bee:	40 81       	ld	r20, Z
    3bf0:	51 81       	ldd	r21, Z+1	; 0x01
    3bf2:	24 ef       	ldi	r18, 0xF4	; 244
    3bf4:	31 e0       	ldi	r19, 0x01	; 1
    3bf6:	6e e0       	ldi	r22, 0x0E	; 14
    3bf8:	77 e0       	ldi	r23, 0x07	; 7
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3c00:	81 11       	cpse	r24, r1
    3c02:	63 c0       	rjmp	.+198    	; 0x3cca <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    3c04:	d7 01       	movw	r26, r14
    3c06:	8d 91       	ld	r24, X+
    3c08:	9c 91       	ld	r25, X
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	ed 91       	ld	r30, X+
    3c0e:	fc 91       	ld	r31, X
    3c10:	04 80       	ldd	r0, Z+4	; 0x04
    3c12:	f5 81       	ldd	r31, Z+5	; 0x05
    3c14:	e0 2d       	mov	r30, r0
    3c16:	09 95       	icall
    3c18:	89 2b       	or	r24, r25
    3c1a:	59 f0       	breq	.+22     	; 0x3c32 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    3c1c:	f7 01       	movw	r30, r14
    3c1e:	80 81       	ld	r24, Z
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	dc 01       	movw	r26, r24
    3c24:	ed 91       	ld	r30, X+
    3c26:	fc 91       	ld	r31, X
    3c28:	06 80       	ldd	r0, Z+6	; 0x06
    3c2a:	f7 81       	ldd	r31, Z+7	; 0x07
    3c2c:	e0 2d       	mov	r30, r0
    3c2e:	09 95       	icall
    3c30:	e9 cf       	rjmp	.-46     	; 0x3c04 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    3c32:	24 ef       	ldi	r18, 0xF4	; 244
    3c34:	31 e0       	ldi	r19, 0x01	; 1
    3c36:	4b e0       	ldi	r20, 0x0B	; 11
    3c38:	57 e0       	ldi	r21, 0x07	; 7
    3c3a:	68 e0       	ldi	r22, 0x08	; 8
    3c3c:	77 e0       	ldi	r23, 0x07	; 7
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3c44:	81 11       	cpse	r24, r1
    3c46:	41 c0       	rjmp	.+130    	; 0x3cca <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    3c48:	64 ef       	ldi	r22, 0xF4	; 244
    3c4a:	71 e0       	ldi	r23, 0x01	; 1
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3c54:	b1 e0       	ldi	r27, 0x01	; 1
    3c56:	cb 1a       	sub	r12, r27
    3c58:	d1 08       	sbc	r13, r1
    3c5a:	09 f0       	breq	.+2      	; 0x3c5e <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    3c5c:	aa cf       	rjmp	.-172    	; 0x3bb2 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    3c5e:	66 ed       	ldi	r22, 0xD6	; 214
    3c60:	76 e0       	ldi	r23, 0x06	; 6
    3c62:	8a e1       	ldi	r24, 0x1A	; 26
    3c64:	97 e0       	ldi	r25, 0x07	; 7
    3c66:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3c6a:	d8 01       	movw	r26, r16
    3c6c:	4d 91       	ld	r20, X+
    3c6e:	5c 91       	ld	r21, X
    3c70:	24 ef       	ldi	r18, 0xF4	; 244
    3c72:	31 e0       	ldi	r19, 0x01	; 1
    3c74:	63 ed       	ldi	r22, 0xD3	; 211
    3c76:	76 e0       	ldi	r23, 0x06	; 6
    3c78:	ce 01       	movw	r24, r28
    3c7a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3c7e:	64 e6       	ldi	r22, 0x64	; 100
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	40 81       	ld	r20, Z
    3c8e:	51 81       	ldd	r21, Z+1	; 0x01
    3c90:	24 ef       	ldi	r18, 0xF4	; 244
    3c92:	31 e0       	ldi	r19, 0x01	; 1
    3c94:	60 ed       	ldi	r22, 0xD0	; 208
    3c96:	76 e0       	ldi	r23, 0x06	; 6
    3c98:	ce 01       	movw	r24, r28
    3c9a:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3c9e:	64 e6       	ldi	r22, 0x64	; 100
    3ca0:	70 e0       	ldi	r23, 0x00	; 0
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3caa:	d8 01       	movw	r26, r16
    3cac:	4d 91       	ld	r20, X+
    3cae:	5c 91       	ld	r21, X
    3cb0:	24 ef       	ldi	r18, 0xF4	; 244
    3cb2:	31 e0       	ldi	r19, 0x01	; 1
    3cb4:	6d ec       	ldi	r22, 0xCD	; 205
    3cb6:	76 e0       	ldi	r23, 0x06	; 6
    3cb8:	ce 01       	movw	r24, r28
    3cba:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3cbe:	64 e6       	ldi	r22, 0x64	; 100
    3cc0:	70 e0       	ldi	r23, 0x00	; 0
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3cca:	f8 01       	movw	r30, r16
    3ccc:	40 81       	ld	r20, Z
    3cce:	51 81       	ldd	r21, Z+1	; 0x01
    3cd0:	24 ef       	ldi	r18, 0xF4	; 244
    3cd2:	31 e0       	ldi	r19, 0x01	; 1
    3cd4:	68 ec       	ldi	r22, 0xC8	; 200
    3cd6:	76 e0       	ldi	r23, 0x06	; 6
    3cd8:	ce 01       	movw	r24, r28
    3cda:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3cde:	64 e6       	ldi	r22, 0x64	; 100
    3ce0:	70 e0       	ldi	r23, 0x00	; 0
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3cea:	d8 01       	movw	r26, r16
    3cec:	4d 91       	ld	r20, X+
    3cee:	5c 91       	ld	r21, X
    3cf0:	24 ef       	ldi	r18, 0xF4	; 244
    3cf2:	31 e0       	ldi	r19, 0x01	; 1
    3cf4:	63 ec       	ldi	r22, 0xC3	; 195
    3cf6:	76 e0       	ldi	r23, 0x06	; 6
    3cf8:	ce 01       	movw	r24, r28
    3cfa:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3cfe:	d8 2e       	mov	r13, r24
    3d00:	88 23       	and	r24, r24
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    3d04:	97 c0       	rjmp	.+302    	; 0x3e34 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    3d06:	f8 01       	movw	r30, r16
    3d08:	40 81       	ld	r20, Z
    3d0a:	51 81       	ldd	r21, Z+1	; 0x01
    3d0c:	24 ef       	ldi	r18, 0xF4	; 244
    3d0e:	31 e0       	ldi	r19, 0x01	; 1
    3d10:	69 eb       	ldi	r22, 0xB9	; 185
    3d12:	76 e0       	ldi	r23, 0x06	; 6
    3d14:	ce 01       	movw	r24, r28
    3d16:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3d1a:	64 e6       	ldi	r22, 0x64	; 100
    3d1c:	70 e0       	ldi	r23, 0x00	; 0
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <delay>
    3d26:	ce 01       	movw	r24, r28
    3d28:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    3d2c:	62 eb       	ldi	r22, 0xB2	; 178
    3d2e:	76 e0       	ldi	r23, 0x06	; 6
    3d30:	8a e1       	ldi	r24, 0x1A	; 26
    3d32:	97 e0       	ldi	r25, 0x07	; 7
    3d34:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3d38:	69 e9       	ldi	r22, 0x99	; 153
    3d3a:	72 e0       	ldi	r23, 0x02	; 2
    3d3c:	8a e1       	ldi	r24, 0x1A	; 26
    3d3e:	97 e0       	ldi	r25, 0x07	; 7
    3d40:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3d44:	69 e9       	ldi	r22, 0x99	; 153
    3d46:	72 e0       	ldi	r23, 0x02	; 2
    3d48:	d7 01       	movw	r26, r14
    3d4a:	8d 91       	ld	r24, X+
    3d4c:	9c 91       	ld	r25, X
    3d4e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3d52:	41 e0       	ldi	r20, 0x01	; 1
    3d54:	64 ef       	ldi	r22, 0xF4	; 244
    3d56:	71 e0       	ldi	r23, 0x01	; 1
    3d58:	ce 01       	movw	r24, r28
    3d5a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3d5e:	6b ea       	ldi	r22, 0xAB	; 171
    3d60:	76 e0       	ldi	r23, 0x06	; 6
    3d62:	8a e1       	ldi	r24, 0x1A	; 26
    3d64:	97 e0       	ldi	r25, 0x07	; 7
    3d66:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3d6a:	8e 01       	movw	r16, r28
    3d6c:	02 5f       	subi	r16, 0xF2	; 242
    3d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d70:	b8 01       	movw	r22, r16
    3d72:	8a e1       	ldi	r24, 0x1A	; 26
    3d74:	97 e0       	ldi	r25, 0x07	; 7
    3d76:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3d7a:	60 ea       	ldi	r22, 0xA0	; 160
    3d7c:	76 e0       	ldi	r23, 0x06	; 6
    3d7e:	c8 01       	movw	r24, r16
    3d80:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    3d84:	89 2b       	or	r24, r25
    3d86:	11 f0       	breq	.+4      	; 0x3d8c <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    3d88:	83 e0       	ldi	r24, 0x03	; 3
    3d8a:	23 c0       	rjmp	.+70     	; 0x3dd2 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3d8c:	65 e9       	ldi	r22, 0x95	; 149
    3d8e:	76 e0       	ldi	r23, 0x06	; 6
    3d90:	c8 01       	movw	r24, r16
    3d92:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    3d96:	89 2b       	or	r24, r25
    3d98:	11 f0       	breq	.+4      	; 0x3d9e <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    3d9a:	82 e0       	ldi	r24, 0x02	; 2
    3d9c:	1a c0       	rjmp	.+52     	; 0x3dd2 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3d9e:	6a e8       	ldi	r22, 0x8A	; 138
    3da0:	76 e0       	ldi	r23, 0x06	; 6
    3da2:	c8 01       	movw	r24, r16
    3da4:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    3da8:	89 2b       	or	r24, r25
    3daa:	11 f0       	breq	.+4      	; 0x3db0 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	11 c0       	rjmp	.+34     	; 0x3dd2 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3db0:	6a e7       	ldi	r22, 0x7A	; 122
    3db2:	76 e0       	ldi	r23, 0x06	; 6
    3db4:	c8 01       	movw	r24, r16
    3db6:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    3dba:	89 2b       	or	r24, r25
    3dbc:	11 f0       	breq	.+4      	; 0x3dc2 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    3dbe:	84 e0       	ldi	r24, 0x04	; 4
    3dc0:	08 c0       	rjmp	.+16     	; 0x3dd2 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    3dc2:	6a e6       	ldi	r22, 0x6A	; 106
    3dc4:	76 e0       	ldi	r23, 0x06	; 6
    3dc6:	c8 01       	movw	r24, r16
    3dc8:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    3dcc:	89 2b       	or	r24, r25
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    3dd0:	85 e0       	ldi	r24, 0x05	; 5
    3dd2:	8d 87       	std	Y+13, r24	; 0x0d
    3dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	69 f5       	brne	.+90     	; 0x3e34 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    3dda:	63 e6       	ldi	r22, 0x63	; 99
    3ddc:	76 e0       	ldi	r23, 0x06	; 6
    3dde:	8a e1       	ldi	r24, 0x1A	; 26
    3de0:	97 e0       	ldi	r25, 0x07	; 7
    3de2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3de6:	6d e9       	ldi	r22, 0x9D	; 157
    3de8:	72 e0       	ldi	r23, 0x02	; 2
    3dea:	8a e1       	ldi	r24, 0x1A	; 26
    3dec:	97 e0       	ldi	r25, 0x07	; 7
    3dee:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3df2:	6d e9       	ldi	r22, 0x9D	; 157
    3df4:	72 e0       	ldi	r23, 0x02	; 2
    3df6:	f7 01       	movw	r30, r14
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3e00:	41 e0       	ldi	r20, 0x01	; 1
    3e02:	64 ef       	ldi	r22, 0xF4	; 244
    3e04:	71 e0       	ldi	r23, 0x01	; 1
    3e06:	ce 01       	movw	r24, r28
    3e08:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3e0c:	6c e5       	ldi	r22, 0x5C	; 92
    3e0e:	76 e0       	ldi	r23, 0x06	; 6
    3e10:	8a e1       	ldi	r24, 0x1A	; 26
    3e12:	97 e0       	ldi	r25, 0x07	; 7
    3e14:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3e18:	b8 01       	movw	r22, r16
    3e1a:	8a e1       	ldi	r24, 0x1A	; 26
    3e1c:	97 e0       	ldi	r25, 0x07	; 7
    3e1e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3e22:	64 e5       	ldi	r22, 0x54	; 84
    3e24:	76 e0       	ldi	r23, 0x06	; 6
    3e26:	c8 01       	movw	r24, r16
    3e28:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    3e2c:	89 2b       	or	r24, r25
    3e2e:	11 f0       	breq	.+4      	; 0x3e34 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    3e30:	86 e0       	ldi	r24, 0x06	; 6
    3e32:	8d 87       	std	Y+13, r24	; 0x0d
    3e34:	8d 2d       	mov	r24, r13
    3e36:	df 91       	pop	r29
    3e38:	cf 91       	pop	r28
    3e3a:	1f 91       	pop	r17
    3e3c:	0f 91       	pop	r16
    3e3e:	ff 90       	pop	r15
    3e40:	ef 90       	pop	r14
    3e42:	df 90       	pop	r13
    3e44:	cf 90       	pop	r12
    3e46:	08 95       	ret

00003e48 <_ZN13Adafruit_FONA9HTTP_initEv>:
    3e48:	fc 01       	movw	r30, r24
    3e4a:	ea 5e       	subi	r30, 0xEA	; 234
    3e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4e:	40 81       	ld	r20, Z
    3e50:	51 81       	ldd	r21, Z+1	; 0x01
    3e52:	24 ef       	ldi	r18, 0xF4	; 244
    3e54:	31 e0       	ldi	r19, 0x01	; 1
    3e56:	66 e3       	ldi	r22, 0x36	; 54
    3e58:	75 e0       	ldi	r23, 0x05	; 5
    3e5a:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00003e5e <_ZN13Adafruit_FONA9HTTP_termEv>:
    3e5e:	fc 01       	movw	r30, r24
    3e60:	ea 5e       	subi	r30, 0xEA	; 234
    3e62:	fe 4f       	sbci	r31, 0xFE	; 254
    3e64:	40 81       	ld	r20, Z
    3e66:	51 81       	ldd	r21, Z+1	; 0x01
    3e68:	24 ef       	ldi	r18, 0xF4	; 244
    3e6a:	31 e0       	ldi	r19, 0x01	; 1
    3e6c:	6a e2       	ldi	r22, 0x2A	; 42
    3e6e:	75 e0       	ldi	r23, 0x05	; 5
    3e70:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00003e74 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    3e74:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <_ZN13Adafruit_FONA9HTTP_termEv>

00003e78 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    3e78:	0f 93       	push	r16
    3e7a:	1f 93       	push	r17
    3e7c:	cf 93       	push	r28
    3e7e:	df 93       	push	r29
    3e80:	ec 01       	movw	r28, r24
    3e82:	8a 01       	movw	r16, r20
    3e84:	a9 01       	movw	r20, r18
    3e86:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN13Adafruit_FONA8getReplyEPcj>
    3e8a:	88 23       	and	r24, r24
    3e8c:	41 f0       	breq	.+16     	; 0x3e9e <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    3e8e:	b8 01       	movw	r22, r16
    3e90:	ce 01       	movw	r24, r28
    3e92:	0e 96       	adiw	r24, 0x0e	; 14
    3e94:	0e 94 41 29 	call	0x5282	; 0x5282 <strcmp_P>
    3e98:	21 e0       	ldi	r18, 0x01	; 1
    3e9a:	89 2b       	or	r24, r25
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	82 2f       	mov	r24, r18
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    3eac:	af 92       	push	r10
    3eae:	bf 92       	push	r11
    3eb0:	cf 92       	push	r12
    3eb2:	df 92       	push	r13
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	6e 97       	sbiw	r28, 0x1e	; 30
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	8c 01       	movw	r16, r24
    3ed2:	5b 01       	movw	r10, r22
    3ed4:	6a 01       	movw	r12, r20
    3ed6:	fc 01       	movw	r30, r24
    3ed8:	ea 5e       	subi	r30, 0xEA	; 234
    3eda:	fe 4f       	sbci	r31, 0xFE	; 254
    3edc:	40 81       	ld	r20, Z
    3ede:	51 81       	ldd	r21, Z+1	; 0x01
    3ee0:	24 ef       	ldi	r18, 0xF4	; 244
    3ee2:	31 e0       	ldi	r19, 0x01	; 1
    3ee4:	6d e1       	ldi	r22, 0x1D	; 29
    3ee6:	76 e0       	ldi	r23, 0x06	; 6
    3ee8:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    3eec:	88 23       	and	r24, r24
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    3ef0:	88 c0       	rjmp	.+272    	; 0x4002 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    3ef2:	8a e0       	ldi	r24, 0x0A	; 10
    3ef4:	ec e9       	ldi	r30, 0x9C	; 156
    3ef6:	f1 e0       	ldi	r31, 0x01	; 1
    3ef8:	9e 01       	movw	r18, r28
    3efa:	2f 5f       	subi	r18, 0xFF	; 255
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	79 01       	movw	r14, r18
    3f00:	d9 01       	movw	r26, r18
    3f02:	01 90       	ld	r0, Z+
    3f04:	0d 92       	st	X+, r0
    3f06:	8a 95       	dec	r24
    3f08:	e1 f7       	brne	.-8      	; 0x3f02 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	3b 96       	adiw	r30, 0x0b	; 11
    3f0e:	84 e1       	ldi	r24, 0x14	; 20
    3f10:	df 01       	movw	r26, r30
    3f12:	1d 92       	st	X+, r1
    3f14:	8a 95       	dec	r24
    3f16:	e9 f7       	brne	.-6      	; 0x3f12 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    3f18:	43 e1       	ldi	r20, 0x13	; 19
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	b5 01       	movw	r22, r10
    3f1e:	ce 01       	movw	r24, r28
    3f20:	0a 96       	adiw	r24, 0x0a	; 10
    3f22:	0e 94 8a 29 	call	0x5314	; 0x5314 <strncpy>
    3f26:	f7 01       	movw	r30, r14
    3f28:	01 90       	ld	r0, Z+
    3f2a:	00 20       	and	r0, r0
    3f2c:	e9 f7       	brne	.-6      	; 0x3f28 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    3f2e:	31 97       	sbiw	r30, 0x01	; 1
    3f30:	82 e2       	ldi	r24, 0x22	; 34
    3f32:	80 83       	st	Z, r24
    3f34:	24 ef       	ldi	r18, 0xF4	; 244
    3f36:	31 e0       	ldi	r19, 0x01	; 1
    3f38:	4a e1       	ldi	r20, 0x1A	; 26
    3f3a:	56 e0       	ldi	r21, 0x06	; 6
    3f3c:	b7 01       	movw	r22, r14
    3f3e:	c8 01       	movw	r24, r16
    3f40:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    3f44:	88 23       	and	r24, r24
    3f46:	09 f4       	brne	.+2      	; 0x3f4a <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    3f48:	5c c0       	rjmp	.+184    	; 0x4002 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    3f4a:	67 e1       	ldi	r22, 0x17	; 23
    3f4c:	76 e0       	ldi	r23, 0x06	; 6
    3f4e:	8a e1       	ldi	r24, 0x1A	; 26
    3f50:	97 e0       	ldi	r25, 0x07	; 7
    3f52:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    3f56:	b6 01       	movw	r22, r12
    3f58:	8a e1       	ldi	r24, 0x1A	; 26
    3f5a:	97 e0       	ldi	r25, 0x07	; 7
    3f5c:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3f60:	b6 01       	movw	r22, r12
    3f62:	78 01       	movw	r14, r16
    3f64:	b8 ee       	ldi	r27, 0xE8	; 232
    3f66:	eb 1a       	sub	r14, r27
    3f68:	be ef       	ldi	r27, 0xFE	; 254
    3f6a:	fb 0a       	sbc	r15, r27
    3f6c:	f7 01       	movw	r30, r14
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3f76:	d7 01       	movw	r26, r14
    3f78:	8d 91       	ld	r24, X+
    3f7a:	9c 91       	ld	r25, X
    3f7c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <_ZN5Print7printlnEv>
    3f80:	f7 01       	movw	r30, r14
    3f82:	80 81       	ld	r24, Z
    3f84:	91 81       	ldd	r25, Z+1	; 0x01
    3f86:	dc 01       	movw	r26, r24
    3f88:	ed 91       	ld	r30, X+
    3f8a:	fc 91       	ld	r31, X
    3f8c:	01 90       	ld	r0, Z+
    3f8e:	f0 81       	ld	r31, Z
    3f90:	e0 2d       	mov	r30, r0
    3f92:	6a e1       	ldi	r22, 0x1A	; 26
    3f94:	09 95       	icall
    3f96:	66 eb       	ldi	r22, 0xB6	; 182
    3f98:	72 e0       	ldi	r23, 0x02	; 2
    3f9a:	8a e1       	ldi	r24, 0x1A	; 26
    3f9c:	97 e0       	ldi	r25, 0x07	; 7
    3f9e:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    3fa2:	f8 01       	movw	r30, r16
    3fa4:	85 85       	ldd	r24, Z+13	; 0x0d
    3fa6:	84 50       	subi	r24, 0x04	; 4
    3fa8:	82 30       	cpi	r24, 0x02	; 2
    3faa:	60 f4       	brcc	.+24     	; 0x3fc4 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    3fac:	40 e0       	ldi	r20, 0x00	; 0
    3fae:	68 ec       	ldi	r22, 0xC8	; 200
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	68 ec       	ldi	r22, 0xC8	; 200
    3fbc:	70 e0       	ldi	r23, 0x00	; 0
    3fbe:	c8 01       	movw	r24, r16
    3fc0:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	60 e1       	ldi	r22, 0x10	; 16
    3fc8:	77 e2       	ldi	r23, 0x27	; 39
    3fca:	c8 01       	movw	r24, r16
    3fcc:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3fd0:	78 01       	movw	r14, r16
    3fd2:	fe e0       	ldi	r31, 0x0E	; 14
    3fd4:	ef 0e       	add	r14, r31
    3fd6:	f1 1c       	adc	r15, r1
    3fd8:	69 eb       	ldi	r22, 0xB9	; 185
    3fda:	72 e0       	ldi	r23, 0x02	; 2
    3fdc:	c7 01       	movw	r24, r14
    3fde:	0e 94 99 29 	call	0x5332	; 0x5332 <strstr>
    3fe2:	89 2b       	or	r24, r25
    3fe4:	71 f0       	breq	.+28     	; 0x4002 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	68 ee       	ldi	r22, 0xE8	; 232
    3fea:	73 e0       	ldi	r23, 0x03	; 3
    3fec:	c8 01       	movw	r24, r16
    3fee:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    3ff2:	6c e8       	ldi	r22, 0x8C	; 140
    3ff4:	72 e0       	ldi	r23, 0x02	; 2
    3ff6:	c7 01       	movw	r24, r14
    3ff8:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    3ffc:	21 e0       	ldi	r18, 0x01	; 1
    3ffe:	89 2b       	or	r24, r25
    4000:	09 f0       	breq	.+2      	; 0x4004 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	82 2f       	mov	r24, r18
    4006:	6e 96       	adiw	r28, 0x1e	; 30
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	f8 94       	cli
    400c:	de bf       	out	0x3e, r29	; 62
    400e:	0f be       	out	0x3f, r0	; 63
    4010:	cd bf       	out	0x3d, r28	; 61
    4012:	df 91       	pop	r29
    4014:	cf 91       	pop	r28
    4016:	1f 91       	pop	r17
    4018:	0f 91       	pop	r16
    401a:	ff 90       	pop	r15
    401c:	ef 90       	pop	r14
    401e:	df 90       	pop	r13
    4020:	cf 90       	pop	r12
    4022:	bf 90       	pop	r11
    4024:	af 90       	pop	r10
    4026:	08 95       	ret

00004028 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    4028:	cf 92       	push	r12
    402a:	df 92       	push	r13
    402c:	ef 92       	push	r14
    402e:	ff 92       	push	r15
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	ec 01       	movw	r28, r24
    403a:	68 01       	movw	r12, r16
    403c:	87 01       	movw	r16, r14
    403e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4042:	b6 01       	movw	r22, r12
    4044:	ce 01       	movw	r24, r28
    4046:	0e 96       	adiw	r24, 0x0e	; 14
    4048:	0e 94 41 29 	call	0x5282	; 0x5282 <strcmp_P>
    404c:	21 e0       	ldi	r18, 0x01	; 1
    404e:	89 2b       	or	r24, r25
    4050:	09 f0       	breq	.+2      	; 0x4054 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	82 2f       	mov	r24, r18
    4056:	df 91       	pop	r29
    4058:	cf 91       	pop	r28
    405a:	1f 91       	pop	r17
    405c:	0f 91       	pop	r16
    405e:	ff 90       	pop	r15
    4060:	ef 90       	pop	r14
    4062:	df 90       	pop	r13
    4064:	cf 90       	pop	r12
    4066:	08 95       	ret

00004068 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    4068:	ef 92       	push	r14
    406a:	ff 92       	push	r15
    406c:	0f 93       	push	r16
    406e:	1f 93       	push	r17
    4070:	fc 01       	movw	r30, r24
    4072:	ea 5e       	subi	r30, 0xEA	; 234
    4074:	fe 4f       	sbci	r31, 0xFE	; 254
    4076:	00 81       	ld	r16, Z
    4078:	11 81       	ldd	r17, Z+1	; 0x01
    407a:	26 2f       	mov	r18, r22
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	40 e0       	ldi	r20, 0x00	; 0
    4080:	50 e0       	ldi	r21, 0x00	; 0
    4082:	64 ef       	ldi	r22, 0xF4	; 244
    4084:	e6 2e       	mov	r14, r22
    4086:	ff 24       	eor	r15, r15
    4088:	f3 94       	inc	r15
    408a:	6a e8       	ldi	r22, 0x8A	; 138
    408c:	74 e0       	ldi	r23, 0x04	; 4
    408e:	0e 94 14 20 	call	0x4028	; 0x4028 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	ff 90       	pop	r15
    4098:	ef 90       	pop	r14
    409a:	08 95       	ret

0000409c <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	ec 01       	movw	r28, r24
    40a6:	8b 01       	movw	r16, r22
    40a8:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <_ZN13Adafruit_FONA9HTTP_termEv>
    40ac:	ce 01       	movw	r24, r28
    40ae:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <_ZN13Adafruit_FONA9HTTP_initEv>
    40b2:	81 11       	cpse	r24, r1
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	38 c0       	rjmp	.+112    	; 0x412a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    40ba:	21 e0       	ldi	r18, 0x01	; 1
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e0       	ldi	r20, 0x00	; 0
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	6f e6       	ldi	r22, 0x6F	; 111
    40c4:	74 e0       	ldi	r23, 0x04	; 4
    40c6:	ce 01       	movw	r24, r28
    40c8:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    40cc:	88 23       	and	r24, r24
    40ce:	99 f3       	breq	.-26     	; 0x40b6 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    40d0:	fe 01       	movw	r30, r28
    40d2:	ec 5e       	subi	r30, 0xEC	; 236
    40d4:	fe 4f       	sbci	r31, 0xFE	; 254
    40d6:	40 81       	ld	r20, Z
    40d8:	51 81       	ldd	r21, Z+1	; 0x01
    40da:	6c e6       	ldi	r22, 0x6C	; 108
    40dc:	74 e0       	ldi	r23, 0x04	; 4
    40de:	ce 01       	movw	r24, r28
    40e0:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    40e4:	88 23       	and	r24, r24
    40e6:	39 f3       	breq	.-50     	; 0x40b6 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    40e8:	a8 01       	movw	r20, r16
    40ea:	68 e6       	ldi	r22, 0x68	; 104
    40ec:	74 e0       	ldi	r23, 0x04	; 4
    40ee:	ce 01       	movw	r24, r28
    40f0:	0e 94 99 1b 	call	0x3732	; 0x3732 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    40f4:	88 23       	and	r24, r24
    40f6:	f9 f2       	breq	.-66     	; 0x40b6 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    40f8:	fe 01       	movw	r30, r28
    40fa:	ed 5e       	subi	r30, 0xED	; 237
    40fc:	fe 4f       	sbci	r31, 0xFE	; 254
    40fe:	90 81       	ld	r25, Z
    4100:	99 23       	and	r25, r25
    4102:	99 f0       	breq	.+38     	; 0x412a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4104:	21 e0       	ldi	r18, 0x01	; 1
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e0       	ldi	r20, 0x00	; 0
    410a:	50 e0       	ldi	r21, 0x00	; 0
    410c:	62 e6       	ldi	r22, 0x62	; 98
    410e:	74 e0       	ldi	r23, 0x04	; 4
    4110:	ce 01       	movw	r24, r28
    4112:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4116:	88 23       	and	r24, r24
    4118:	71 f2       	breq	.-100    	; 0x40b6 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    411a:	61 e0       	ldi	r22, 0x01	; 1
    411c:	ce 01       	movw	r24, r28
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	1f 91       	pop	r17
    4124:	0f 91       	pop	r16
    4126:	0c 94 34 20 	jmp	0x4068	; 0x4068 <_ZN13Adafruit_FONA8HTTP_sslEb>
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	1f 91       	pop	r17
    4130:	0f 91       	pop	r16
    4132:	08 95       	ret

00004134 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4134:	ef 92       	push	r14
    4136:	ff 92       	push	r15
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	ec 01       	movw	r28, r24
    4142:	79 01       	movw	r14, r18
    4144:	98 01       	movw	r18, r16
    4146:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    414a:	b7 01       	movw	r22, r14
    414c:	ce 01       	movw	r24, r28
    414e:	0e 96       	adiw	r24, 0x0e	; 14
    4150:	0e 94 41 29 	call	0x5282	; 0x5282 <strcmp_P>
    4154:	21 e0       	ldi	r18, 0x01	; 1
    4156:	89 2b       	or	r24, r25
    4158:	09 f0       	breq	.+2      	; 0x415c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	82 2f       	mov	r24, r18
    415e:	df 91       	pop	r29
    4160:	cf 91       	pop	r28
    4162:	1f 91       	pop	r17
    4164:	0f 91       	pop	r16
    4166:	ff 90       	pop	r15
    4168:	ef 90       	pop	r14
    416a:	08 95       	ret

0000416c <_ZN13Adafruit_FONA10enableGPRSEb>:
    416c:	8f 92       	push	r8
    416e:	9f 92       	push	r9
    4170:	af 92       	push	r10
    4172:	bf 92       	push	r11
    4174:	cf 92       	push	r12
    4176:	df 92       	push	r13
    4178:	ef 92       	push	r14
    417a:	ff 92       	push	r15
    417c:	0f 93       	push	r16
    417e:	1f 93       	push	r17
    4180:	cf 93       	push	r28
    4182:	df 93       	push	r29
    4184:	ec 01       	movw	r28, r24
    4186:	20 e2       	ldi	r18, 0x20	; 32
    4188:	3e e4       	ldi	r19, 0x4E	; 78
    418a:	66 23       	and	r22, r22
    418c:	09 f4       	brne	.+2      	; 0x4190 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    418e:	0f c1       	rjmp	.+542    	; 0x43ae <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    4190:	4f e0       	ldi	r20, 0x0F	; 15
    4192:	56 e0       	ldi	r21, 0x06	; 6
    4194:	64 e0       	ldi	r22, 0x04	; 4
    4196:	76 e0       	ldi	r23, 0x06	; 6
    4198:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    419c:	7e 01       	movw	r14, r28
    419e:	8a ee       	ldi	r24, 0xEA	; 234
    41a0:	e8 1a       	sub	r14, r24
    41a2:	8e ef       	ldi	r24, 0xFE	; 254
    41a4:	f8 0a       	sbc	r15, r24
    41a6:	f7 01       	movw	r30, r14
    41a8:	40 81       	ld	r20, Z
    41aa:	51 81       	ldd	r21, Z+1	; 0x01
    41ac:	20 e1       	ldi	r18, 0x10	; 16
    41ae:	37 e2       	ldi	r19, 0x27	; 39
    41b0:	69 ef       	ldi	r22, 0xF9	; 249
    41b2:	75 e0       	ldi	r23, 0x05	; 5
    41b4:	ce 01       	movw	r24, r28
    41b6:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    41ba:	88 23       	and	r24, r24
    41bc:	09 f4       	brne	.+2      	; 0x41c0 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    41be:	24 c1       	rjmp	.+584    	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    41c0:	f7 01       	movw	r30, r14
    41c2:	40 81       	ld	r20, Z
    41c4:	51 81       	ldd	r21, Z+1	; 0x01
    41c6:	20 e1       	ldi	r18, 0x10	; 16
    41c8:	37 e2       	ldi	r19, 0x27	; 39
    41ca:	6b ed       	ldi	r22, 0xDB	; 219
    41cc:	75 e0       	ldi	r23, 0x05	; 5
    41ce:	ce 01       	movw	r24, r28
    41d0:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    41d4:	88 23       	and	r24, r24
    41d6:	09 f4       	brne	.+2      	; 0x41da <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    41d8:	17 c1       	rjmp	.+558    	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    41da:	4e 01       	movw	r8, r28
    41dc:	f3 ef       	ldi	r31, 0xF3	; 243
    41de:	8f 1a       	sub	r8, r31
    41e0:	fe ef       	ldi	r31, 0xFE	; 254
    41e2:	9f 0a       	sbc	r9, r31
    41e4:	f4 01       	movw	r30, r8
    41e6:	40 81       	ld	r20, Z
    41e8:	51 81       	ldd	r21, Z+1	; 0x01
    41ea:	41 15       	cp	r20, r1
    41ec:	51 05       	cpc	r21, r1
    41ee:	a9 f4       	brne	.+42     	; 0x421a <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    41f0:	f7 01       	movw	r30, r14
    41f2:	40 81       	ld	r20, Z
    41f4:	51 81       	ldd	r21, Z+1	; 0x01
    41f6:	20 e3       	ldi	r18, 0x30	; 48
    41f8:	35 e7       	ldi	r19, 0x75	; 117
    41fa:	66 e7       	ldi	r22, 0x76	; 118
    41fc:	75 e0       	ldi	r23, 0x05	; 5
    41fe:	ce 01       	movw	r24, r28
    4200:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4204:	88 23       	and	r24, r24
    4206:	09 f4       	brne	.+2      	; 0x420a <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    4208:	ff c0       	rjmp	.+510    	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    420a:	f7 01       	movw	r30, r14
    420c:	40 81       	ld	r20, Z
    420e:	51 81       	ldd	r21, Z+1	; 0x01
    4210:	20 e1       	ldi	r18, 0x10	; 16
    4212:	37 e2       	ldi	r19, 0x27	; 39
    4214:	6d e6       	ldi	r22, 0x6D	; 109
    4216:	75 e0       	ldi	r23, 0x05	; 5
    4218:	e8 c0       	rjmp	.+464    	; 0x43ea <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    421a:	f7 01       	movw	r30, r14
    421c:	20 81       	ld	r18, Z
    421e:	31 81       	ldd	r19, Z+1	; 0x01
    4220:	00 e1       	ldi	r16, 0x10	; 16
    4222:	17 e2       	ldi	r17, 0x27	; 39
    4224:	67 ec       	ldi	r22, 0xC7	; 199
    4226:	75 e0       	ldi	r23, 0x05	; 5
    4228:	ce 01       	movw	r24, r28
    422a:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    422e:	88 23       	and	r24, r24
    4230:	09 f4       	brne	.+2      	; 0x4234 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4232:	ea c0       	rjmp	.+468    	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4234:	ce 01       	movw	r24, r28
    4236:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <_ZN13Adafruit_FONA10flushInputEv>
    423a:	8e 01       	movw	r16, r28
    423c:	08 5e       	subi	r16, 0xE8	; 232
    423e:	1e 4f       	sbci	r17, 0xFE	; 254
    4240:	6d eb       	ldi	r22, 0xBD	; 189
    4242:	75 e0       	ldi	r23, 0x05	; 5
    4244:	f8 01       	movw	r30, r16
    4246:	80 81       	ld	r24, Z
    4248:	91 81       	ldd	r25, Z+1	; 0x01
    424a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    424e:	f4 01       	movw	r30, r8
    4250:	60 81       	ld	r22, Z
    4252:	71 81       	ldd	r23, Z+1	; 0x01
    4254:	f8 01       	movw	r30, r16
    4256:	80 81       	ld	r24, Z
    4258:	91 81       	ldd	r25, Z+1	; 0x01
    425a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    425e:	5e 01       	movw	r10, r28
    4260:	f1 ef       	ldi	r31, 0xF1	; 241
    4262:	af 1a       	sub	r10, r31
    4264:	fe ef       	ldi	r31, 0xFE	; 254
    4266:	bf 0a       	sbc	r11, r31
    4268:	f5 01       	movw	r30, r10
    426a:	80 81       	ld	r24, Z
    426c:	91 81       	ldd	r25, Z+1	; 0x01
    426e:	89 2b       	or	r24, r25
    4270:	79 f0       	breq	.+30     	; 0x4290 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    4272:	6a ed       	ldi	r22, 0xDA	; 218
    4274:	72 e0       	ldi	r23, 0x02	; 2
    4276:	f8 01       	movw	r30, r16
    4278:	80 81       	ld	r24, Z
    427a:	91 81       	ldd	r25, Z+1	; 0x01
    427c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    4280:	f5 01       	movw	r30, r10
    4282:	60 81       	ld	r22, Z
    4284:	71 81       	ldd	r23, Z+1	; 0x01
    4286:	f8 01       	movw	r30, r16
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    4290:	6e 01       	movw	r12, r28
    4292:	ff ee       	ldi	r31, 0xEF	; 239
    4294:	cf 1a       	sub	r12, r31
    4296:	fe ef       	ldi	r31, 0xFE	; 254
    4298:	df 0a       	sbc	r13, r31
    429a:	f6 01       	movw	r30, r12
    429c:	80 81       	ld	r24, Z
    429e:	91 81       	ldd	r25, Z+1	; 0x01
    42a0:	89 2b       	or	r24, r25
    42a2:	79 f0       	breq	.+30     	; 0x42c2 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    42a4:	6a ed       	ldi	r22, 0xDA	; 218
    42a6:	72 e0       	ldi	r23, 0x02	; 2
    42a8:	f8 01       	movw	r30, r16
    42aa:	80 81       	ld	r24, Z
    42ac:	91 81       	ldd	r25, Z+1	; 0x01
    42ae:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    42b2:	f6 01       	movw	r30, r12
    42b4:	60 81       	ld	r22, Z
    42b6:	71 81       	ldd	r23, Z+1	; 0x01
    42b8:	f8 01       	movw	r30, r16
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    42c2:	6c ed       	ldi	r22, 0xDC	; 220
    42c4:	72 e0       	ldi	r23, 0x02	; 2
    42c6:	f8 01       	movw	r30, r16
    42c8:	80 81       	ld	r24, Z
    42ca:	91 81       	ldd	r25, Z+1	; 0x01
    42cc:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    42d0:	66 eb       	ldi	r22, 0xB6	; 182
    42d2:	75 e0       	ldi	r23, 0x05	; 5
    42d4:	8a e1       	ldi	r24, 0x1A	; 26
    42d6:	97 e0       	ldi	r25, 0x07	; 7
    42d8:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    42dc:	6c ea       	ldi	r22, 0xAC	; 172
    42de:	75 e0       	ldi	r23, 0x05	; 5
    42e0:	8a e1       	ldi	r24, 0x1A	; 26
    42e2:	97 e0       	ldi	r25, 0x07	; 7
    42e4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    42e8:	f4 01       	movw	r30, r8
    42ea:	60 81       	ld	r22, Z
    42ec:	71 81       	ldd	r23, Z+1	; 0x01
    42ee:	8a e1       	ldi	r24, 0x1A	; 26
    42f0:	97 e0       	ldi	r25, 0x07	; 7
    42f2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    42f6:	f5 01       	movw	r30, r10
    42f8:	80 81       	ld	r24, Z
    42fa:	91 81       	ldd	r25, Z+1	; 0x01
    42fc:	89 2b       	or	r24, r25
    42fe:	69 f0       	breq	.+26     	; 0x431a <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    4300:	6a ed       	ldi	r22, 0xDA	; 218
    4302:	72 e0       	ldi	r23, 0x02	; 2
    4304:	8a e1       	ldi	r24, 0x1A	; 26
    4306:	97 e0       	ldi	r25, 0x07	; 7
    4308:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    430c:	f5 01       	movw	r30, r10
    430e:	60 81       	ld	r22, Z
    4310:	71 81       	ldd	r23, Z+1	; 0x01
    4312:	8a e1       	ldi	r24, 0x1A	; 26
    4314:	97 e0       	ldi	r25, 0x07	; 7
    4316:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    431a:	f6 01       	movw	r30, r12
    431c:	80 81       	ld	r24, Z
    431e:	91 81       	ldd	r25, Z+1	; 0x01
    4320:	89 2b       	or	r24, r25
    4322:	69 f0       	breq	.+26     	; 0x433e <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    4324:	6a ed       	ldi	r22, 0xDA	; 218
    4326:	72 e0       	ldi	r23, 0x02	; 2
    4328:	8a e1       	ldi	r24, 0x1A	; 26
    432a:	97 e0       	ldi	r25, 0x07	; 7
    432c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN5Print5printEPKc>
    4330:	f6 01       	movw	r30, r12
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	8a e1       	ldi	r24, 0x1A	; 26
    4338:	97 e0       	ldi	r25, 0x07	; 7
    433a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    433e:	6c ed       	ldi	r22, 0xDC	; 220
    4340:	72 e0       	ldi	r23, 0x02	; 2
    4342:	8a e1       	ldi	r24, 0x1A	; 26
    4344:	97 e0       	ldi	r25, 0x07	; 7
    4346:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN5Print7printlnEPKc>
    434a:	f7 01       	movw	r30, r14
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	40 e1       	ldi	r20, 0x10	; 16
    4352:	57 e2       	ldi	r21, 0x27	; 39
    4354:	ce 01       	movw	r24, r28
    4356:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    435a:	88 23       	and	r24, r24
    435c:	09 f4       	brne	.+2      	; 0x4360 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    435e:	54 c0       	rjmp	.+168    	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4360:	f5 01       	movw	r30, r10
    4362:	40 81       	ld	r20, Z
    4364:	51 81       	ldd	r21, Z+1	; 0x01
    4366:	41 15       	cp	r20, r1
    4368:	51 05       	cpc	r21, r1
    436a:	39 f4       	brne	.+14     	; 0x437a <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    436c:	f6 01       	movw	r30, r12
    436e:	40 81       	ld	r20, Z
    4370:	51 81       	ldd	r21, Z+1	; 0x01
    4372:	41 15       	cp	r20, r1
    4374:	51 05       	cpc	r21, r1
    4376:	71 f4       	brne	.+28     	; 0x4394 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    4378:	3b cf       	rjmp	.-394    	; 0x41f0 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    437a:	f7 01       	movw	r30, r14
    437c:	20 81       	ld	r18, Z
    437e:	31 81       	ldd	r19, Z+1	; 0x01
    4380:	00 e1       	ldi	r16, 0x10	; 16
    4382:	17 e2       	ldi	r17, 0x27	; 39
    4384:	67 e9       	ldi	r22, 0x97	; 151
    4386:	75 e0       	ldi	r23, 0x05	; 5
    4388:	ce 01       	movw	r24, r28
    438a:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    438e:	81 11       	cpse	r24, r1
    4390:	ed cf       	rjmp	.-38     	; 0x436c <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    4392:	3a c0       	rjmp	.+116    	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4394:	f7 01       	movw	r30, r14
    4396:	20 81       	ld	r18, Z
    4398:	31 81       	ldd	r19, Z+1	; 0x01
    439a:	00 e1       	ldi	r16, 0x10	; 16
    439c:	17 e2       	ldi	r17, 0x27	; 39
    439e:	63 e8       	ldi	r22, 0x83	; 131
    43a0:	75 e0       	ldi	r23, 0x05	; 5
    43a2:	ce 01       	movw	r24, r28
    43a4:	0e 94 9a 20 	call	0x4134	; 0x4134 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    43a8:	81 11       	cpse	r24, r1
    43aa:	22 cf       	rjmp	.-444    	; 0x41f0 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    43ac:	2d c0       	rjmp	.+90     	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    43ae:	45 e6       	ldi	r20, 0x65	; 101
    43b0:	55 e0       	ldi	r21, 0x05	; 5
    43b2:	6a e5       	ldi	r22, 0x5A	; 90
    43b4:	75 e0       	ldi	r23, 0x05	; 5
    43b6:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    43ba:	88 23       	and	r24, r24
    43bc:	29 f1       	breq	.+74     	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    43be:	8e 01       	movw	r16, r28
    43c0:	0a 5e       	subi	r16, 0xEA	; 234
    43c2:	1e 4f       	sbci	r17, 0xFE	; 254
    43c4:	f8 01       	movw	r30, r16
    43c6:	40 81       	ld	r20, Z
    43c8:	51 81       	ldd	r21, Z+1	; 0x01
    43ca:	20 e1       	ldi	r18, 0x10	; 16
    43cc:	37 e2       	ldi	r19, 0x27	; 39
    43ce:	6d e4       	ldi	r22, 0x4D	; 77
    43d0:	75 e0       	ldi	r23, 0x05	; 5
    43d2:	ce 01       	movw	r24, r28
    43d4:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    43d8:	88 23       	and	r24, r24
    43da:	b1 f0       	breq	.+44     	; 0x4408 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    43dc:	f8 01       	movw	r30, r16
    43de:	40 81       	ld	r20, Z
    43e0:	51 81       	ldd	r21, Z+1	; 0x01
    43e2:	20 e1       	ldi	r18, 0x10	; 16
    43e4:	37 e2       	ldi	r19, 0x27	; 39
    43e6:	62 e4       	ldi	r22, 0x42	; 66
    43e8:	75 e0       	ldi	r23, 0x05	; 5
    43ea:	ce 01       	movw	r24, r28
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	1f 91       	pop	r17
    43f2:	0f 91       	pop	r16
    43f4:	ff 90       	pop	r15
    43f6:	ef 90       	pop	r14
    43f8:	df 90       	pop	r13
    43fa:	cf 90       	pop	r12
    43fc:	bf 90       	pop	r11
    43fe:	af 90       	pop	r10
    4400:	9f 90       	pop	r9
    4402:	8f 90       	pop	r8
    4404:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	df 91       	pop	r29
    440c:	cf 91       	pop	r28
    440e:	1f 91       	pop	r17
    4410:	0f 91       	pop	r16
    4412:	ff 90       	pop	r15
    4414:	ef 90       	pop	r14
    4416:	df 90       	pop	r13
    4418:	cf 90       	pop	r12
    441a:	bf 90       	pop	r11
    441c:	af 90       	pop	r10
    441e:	9f 90       	pop	r9
    4420:	8f 90       	pop	r8
    4422:	08 95       	ret

00004424 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    4424:	af 92       	push	r10
    4426:	bf 92       	push	r11
    4428:	cf 92       	push	r12
    442a:	df 92       	push	r13
    442c:	ef 92       	push	r14
    442e:	ff 92       	push	r15
    4430:	0f 93       	push	r16
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	5b 01       	movw	r10, r22
    4438:	6a 01       	movw	r12, r20
    443a:	e2 2e       	mov	r14, r18
    443c:	0e 96       	adiw	r24, 0x0e	; 14
    443e:	0e 94 53 29 	call	0x52a6	; 0x52a6 <strstr_P>
    4442:	ec 01       	movw	r28, r24
    4444:	89 2b       	or	r24, r25
    4446:	c1 f0       	breq	.+48     	; 0x4478 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    4448:	c5 01       	movw	r24, r10
    444a:	0e 94 4a 29 	call	0x5294	; 0x5294 <__strlen_P>
    444e:	8c 0f       	add	r24, r28
    4450:	9d 1f       	adc	r25, r29
    4452:	c0 e0       	ldi	r28, 0x00	; 0
    4454:	f1 2c       	mov	r15, r1
    4456:	c0 17       	cp	r28, r16
    4458:	41 f0       	breq	.+16     	; 0x446a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    445a:	b7 01       	movw	r22, r14
    445c:	0e 94 6d 29 	call	0x52da	; 0x52da <strchr>
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	51 f0       	breq	.+20     	; 0x4478 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    4464:	01 96       	adiw	r24, 0x01	; 1
    4466:	cf 5f       	subi	r28, 0xFF	; 255
    4468:	f6 cf       	rjmp	.-20     	; 0x4456 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    446a:	0e 94 23 29 	call	0x5246	; 0x5246 <atoi>
    446e:	f6 01       	movw	r30, r12
    4470:	91 83       	std	Z+1, r25	; 0x01
    4472:	80 83       	st	Z, r24
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	01 c0       	rjmp	.+2      	; 0x447a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	0f 91       	pop	r16
    4480:	ff 90       	pop	r15
    4482:	ef 90       	pop	r14
    4484:	df 90       	pop	r13
    4486:	cf 90       	pop	r12
    4488:	bf 90       	pop	r11
    448a:	af 90       	pop	r10
    448c:	08 95       	ret

0000448e <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    448e:	ef 92       	push	r14
    4490:	ff 92       	push	r15
    4492:	0f 93       	push	r16
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	ec 01       	movw	r28, r24
    449a:	7b 01       	movw	r14, r22
    449c:	44 ef       	ldi	r20, 0xF4	; 244
    449e:	51 e0       	ldi	r21, 0x01	; 1
    44a0:	61 ea       	ldi	r22, 0xA1	; 161
    44a2:	74 e0       	ldi	r23, 0x04	; 4
    44a4:	0e 94 8f 1c 	call	0x391e	; 0x391e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    44a8:	00 e0       	ldi	r16, 0x00	; 0
    44aa:	2c e2       	ldi	r18, 0x2C	; 44
    44ac:	a7 01       	movw	r20, r14
    44ae:	66 e9       	ldi	r22, 0x96	; 150
    44b0:	74 e0       	ldi	r23, 0x04	; 4
    44b2:	ce 01       	movw	r24, r28
    44b4:	0e 94 12 22 	call	0x4424	; 0x4424 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	0f 91       	pop	r16
    44be:	ff 90       	pop	r15
    44c0:	ef 90       	pop	r14
    44c2:	08 95       	ret

000044c4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    44c4:	4f 92       	push	r4
    44c6:	5f 92       	push	r5
    44c8:	6f 92       	push	r6
    44ca:	7f 92       	push	r7
    44cc:	af 92       	push	r10
    44ce:	bf 92       	push	r11
    44d0:	cf 92       	push	r12
    44d2:	df 92       	push	r13
    44d4:	ef 92       	push	r14
    44d6:	ff 92       	push	r15
    44d8:	0f 93       	push	r16
    44da:	1f 93       	push	r17
    44dc:	cf 93       	push	r28
    44de:	df 93       	push	r29
    44e0:	ec 01       	movw	r28, r24
    44e2:	5a 01       	movw	r10, r20
    44e4:	69 01       	movw	r12, r18
    44e6:	27 01       	movw	r4, r14
    44e8:	38 01       	movw	r6, r16
    44ea:	fc 01       	movw	r30, r24
    44ec:	ea 5e       	subi	r30, 0xEA	; 234
    44ee:	fe 4f       	sbci	r31, 0xFE	; 254
    44f0:	00 81       	ld	r16, Z
    44f2:	11 81       	ldd	r17, Z+1	; 0x01
    44f4:	26 2f       	mov	r18, r22
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e0       	ldi	r20, 0x00	; 0
    44fa:	50 e0       	ldi	r21, 0x00	; 0
    44fc:	84 ef       	ldi	r24, 0xF4	; 244
    44fe:	e8 2e       	mov	r14, r24
    4500:	ff 24       	eor	r15, r15
    4502:	f3 94       	inc	r15
    4504:	67 ec       	ldi	r22, 0xC7	; 199
    4506:	74 e0       	ldi	r23, 0x04	; 4
    4508:	ce 01       	movw	r24, r28
    450a:	0e 94 14 20 	call	0x4028	; 0x4028 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    450e:	81 11       	cpse	r24, r1
    4510:	02 c0       	rjmp	.+4      	; 0x4516 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	17 c0       	rjmp	.+46     	; 0x4544 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	b2 01       	movw	r22, r4
    451a:	ce 01       	movw	r24, r28
    451c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    4520:	01 e0       	ldi	r16, 0x01	; 1
    4522:	2c e2       	ldi	r18, 0x2C	; 44
    4524:	a5 01       	movw	r20, r10
    4526:	6a eb       	ldi	r22, 0xBA	; 186
    4528:	74 e0       	ldi	r23, 0x04	; 4
    452a:	ce 01       	movw	r24, r28
    452c:	0e 94 12 22 	call	0x4424	; 0x4424 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4530:	88 23       	and	r24, r24
    4532:	79 f3       	breq	.-34     	; 0x4512 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    4534:	02 e0       	ldi	r16, 0x02	; 2
    4536:	2c e2       	ldi	r18, 0x2C	; 44
    4538:	a6 01       	movw	r20, r12
    453a:	6d ea       	ldi	r22, 0xAD	; 173
    453c:	74 e0       	ldi	r23, 0x04	; 4
    453e:	ce 01       	movw	r24, r28
    4540:	0e 94 12 22 	call	0x4424	; 0x4424 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4544:	df 91       	pop	r29
    4546:	cf 91       	pop	r28
    4548:	1f 91       	pop	r17
    454a:	0f 91       	pop	r16
    454c:	ff 90       	pop	r15
    454e:	ef 90       	pop	r14
    4550:	df 90       	pop	r13
    4552:	cf 90       	pop	r12
    4554:	bf 90       	pop	r11
    4556:	af 90       	pop	r10
    4558:	7f 90       	pop	r7
    455a:	6f 90       	pop	r6
    455c:	5f 90       	pop	r5
    455e:	4f 90       	pop	r4
    4560:	08 95       	ret

00004562 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    4562:	4f 92       	push	r4
    4564:	5f 92       	push	r5
    4566:	6f 92       	push	r6
    4568:	7f 92       	push	r7
    456a:	8f 92       	push	r8
    456c:	9f 92       	push	r9
    456e:	af 92       	push	r10
    4570:	bf 92       	push	r11
    4572:	cf 92       	push	r12
    4574:	df 92       	push	r13
    4576:	ef 92       	push	r14
    4578:	ff 92       	push	r15
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	ec 01       	movw	r28, r24
    4584:	2a 01       	movw	r4, r20
    4586:	39 01       	movw	r6, r18
    4588:	48 01       	movw	r8, r16
    458a:	57 01       	movw	r10, r14
    458c:	0e 94 4e 20 	call	0x409c	; 0x409c <_ZN13Adafruit_FONA10HTTP_setupEPc>
    4590:	88 23       	and	r24, r24
    4592:	09 f4       	brne	.+2      	; 0x4596 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    4594:	71 c0       	rjmp	.+226    	; 0x4678 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4596:	a2 01       	movw	r20, r4
    4598:	62 e8       	ldi	r22, 0x82	; 130
    459a:	74 e0       	ldi	r23, 0x04	; 4
    459c:	ce 01       	movw	r24, r28
    459e:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    45a2:	88 23       	and	r24, r24
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    45a6:	68 c0       	rjmp	.+208    	; 0x4678 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    45a8:	a8 01       	movw	r20, r16
    45aa:	60 e0       	ldi	r22, 0x00	; 0
    45ac:	70 e0       	ldi	r23, 0x00	; 0
    45ae:	00 e1       	ldi	r16, 0x10	; 16
    45b0:	17 e2       	ldi	r17, 0x27	; 39
    45b2:	20 e0       	ldi	r18, 0x00	; 0
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	ce 01       	movw	r24, r28
    45b8:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    45bc:	88 23       	and	r24, r24
    45be:	09 f4       	brne	.+2      	; 0x45c2 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    45c0:	5b c0       	rjmp	.+182    	; 0x4678 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    45c2:	fe 01       	movw	r30, r28
    45c4:	e8 5e       	subi	r30, 0xE8	; 232
    45c6:	fe 4f       	sbci	r31, 0xFE	; 254
    45c8:	80 81       	ld	r24, Z
    45ca:	91 81       	ldd	r25, Z+1	; 0x01
    45cc:	dc 01       	movw	r26, r24
    45ce:	ed 91       	ld	r30, X+
    45d0:	fc 91       	ld	r31, X
    45d2:	02 80       	ldd	r0, Z+2	; 0x02
    45d4:	f3 81       	ldd	r31, Z+3	; 0x03
    45d6:	e0 2d       	mov	r30, r0
    45d8:	a4 01       	movw	r20, r8
    45da:	b3 01       	movw	r22, r6
    45dc:	09 95       	icall
    45de:	fe 01       	movw	r30, r28
    45e0:	ea 5e       	subi	r30, 0xEA	; 234
    45e2:	fe 4f       	sbci	r31, 0xFE	; 254
    45e4:	60 81       	ld	r22, Z
    45e6:	71 81       	ldd	r23, Z+1	; 0x01
    45e8:	40 e1       	ldi	r20, 0x10	; 16
    45ea:	57 e2       	ldi	r21, 0x27	; 39
    45ec:	ce 01       	movw	r24, r28
    45ee:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    45f2:	88 23       	and	r24, r24
    45f4:	09 f4       	brne	.+2      	; 0x45f8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    45f6:	40 c0       	rjmp	.+128    	; 0x4678 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    45f8:	10 e1       	ldi	r17, 0x10	; 16
    45fa:	e1 2e       	mov	r14, r17
    45fc:	17 e2       	ldi	r17, 0x27	; 39
    45fe:	f1 2e       	mov	r15, r17
    4600:	00 e0       	ldi	r16, 0x00	; 0
    4602:	10 e0       	ldi	r17, 0x00	; 0
    4604:	96 01       	movw	r18, r12
    4606:	a5 01       	movw	r20, r10
    4608:	61 e0       	ldi	r22, 0x01	; 1
    460a:	ce 01       	movw	r24, r28
    460c:	0e 94 62 22 	call	0x44c4	; 0x44c4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    4610:	88 23       	and	r24, r24
    4612:	91 f1       	breq	.+100    	; 0x4678 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    4614:	69 e7       	ldi	r22, 0x79	; 121
    4616:	74 e0       	ldi	r23, 0x04	; 4
    4618:	8a e1       	ldi	r24, 0x1A	; 26
    461a:	97 e0       	ldi	r25, 0x07	; 7
    461c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    4620:	f5 01       	movw	r30, r10
    4622:	60 81       	ld	r22, Z
    4624:	71 81       	ldd	r23, Z+1	; 0x01
    4626:	4a e0       	ldi	r20, 0x0A	; 10
    4628:	50 e0       	ldi	r21, 0x00	; 0
    462a:	8a e1       	ldi	r24, 0x1A	; 26
    462c:	97 e0       	ldi	r25, 0x07	; 7
    462e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEji>
    4632:	63 e7       	ldi	r22, 0x73	; 115
    4634:	74 e0       	ldi	r23, 0x04	; 4
    4636:	8a e1       	ldi	r24, 0x1A	; 26
    4638:	97 e0       	ldi	r25, 0x07	; 7
    463a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN5Print5printEPK19__FlashStringHelper>
    463e:	d6 01       	movw	r26, r12
    4640:	6d 91       	ld	r22, X+
    4642:	7c 91       	ld	r23, X
    4644:	4a e0       	ldi	r20, 0x0A	; 10
    4646:	50 e0       	ldi	r21, 0x00	; 0
    4648:	8a e1       	ldi	r24, 0x1A	; 26
    464a:	97 e0       	ldi	r25, 0x07	; 7
    464c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN5Print7printlnEji>
    4650:	b6 01       	movw	r22, r12
    4652:	ce 01       	movw	r24, r28
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	1f 91       	pop	r17
    465a:	0f 91       	pop	r16
    465c:	ff 90       	pop	r15
    465e:	ef 90       	pop	r14
    4660:	df 90       	pop	r13
    4662:	cf 90       	pop	r12
    4664:	bf 90       	pop	r11
    4666:	af 90       	pop	r10
    4668:	9f 90       	pop	r9
    466a:	8f 90       	pop	r8
    466c:	7f 90       	pop	r7
    466e:	6f 90       	pop	r6
    4670:	5f 90       	pop	r5
    4672:	4f 90       	pop	r4
    4674:	0c 94 47 22 	jmp	0x448e	; 0x448e <_ZN13Adafruit_FONA12HTTP_readallEPj>
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	df 91       	pop	r29
    467c:	cf 91       	pop	r28
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	ff 90       	pop	r15
    4684:	ef 90       	pop	r14
    4686:	df 90       	pop	r13
    4688:	cf 90       	pop	r12
    468a:	bf 90       	pop	r11
    468c:	af 90       	pop	r10
    468e:	9f 90       	pop	r9
    4690:	8f 90       	pop	r8
    4692:	7f 90       	pop	r7
    4694:	6f 90       	pop	r6
    4696:	5f 90       	pop	r5
    4698:	4f 90       	pop	r4
    469a:	08 95       	ret

0000469c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    469c:	af 92       	push	r10
    469e:	bf 92       	push	r11
    46a0:	cf 92       	push	r12
    46a2:	df 92       	push	r13
    46a4:	ef 92       	push	r14
    46a6:	0f 93       	push	r16
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	ec 01       	movw	r28, r24
    46b0:	6a 01       	movw	r12, r20
    46b2:	59 01       	movw	r10, r18
    46b4:	10 2f       	mov	r17, r16
    46b6:	0e 2d       	mov	r16, r14
    46b8:	44 ef       	ldi	r20, 0xF4	; 244
    46ba:	51 e0       	ldi	r21, 0x01	; 1
    46bc:	0e 94 8f 1c 	call	0x391e	; 0x391e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    46c0:	21 2f       	mov	r18, r17
    46c2:	a5 01       	movw	r20, r10
    46c4:	b6 01       	movw	r22, r12
    46c6:	ce 01       	movw	r24, r28
    46c8:	0e 94 12 22 	call	0x4424	; 0x4424 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    46cc:	18 2f       	mov	r17, r24
    46ce:	88 23       	and	r24, r24
    46d0:	31 f0       	breq	.+12     	; 0x46de <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    46d2:	40 e0       	ldi	r20, 0x00	; 0
    46d4:	64 ef       	ldi	r22, 0xF4	; 244
    46d6:	71 e0       	ldi	r23, 0x01	; 1
    46d8:	ce 01       	movw	r24, r28
    46da:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN13Adafruit_FONA8readlineEjb>
    46de:	81 2f       	mov	r24, r17
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	1f 91       	pop	r17
    46e6:	0f 91       	pop	r16
    46e8:	ef 90       	pop	r14
    46ea:	df 90       	pop	r13
    46ec:	cf 90       	pop	r12
    46ee:	bf 90       	pop	r11
    46f0:	af 90       	pop	r10
    46f2:	08 95       	ret

000046f4 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    46f4:	ef 92       	push	r14
    46f6:	0f 93       	push	r16
    46f8:	9b 01       	movw	r18, r22
    46fa:	ee 24       	eor	r14, r14
    46fc:	e3 94       	inc	r14
    46fe:	0c e2       	ldi	r16, 0x2C	; 44
    4700:	4d e4       	ldi	r20, 0x4D	; 77
    4702:	56 e0       	ldi	r21, 0x06	; 6
    4704:	66 e4       	ldi	r22, 0x46	; 70
    4706:	76 e0       	ldi	r23, 0x06	; 6
    4708:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    470c:	0f 91       	pop	r16
    470e:	ef 90       	pop	r14
    4710:	08 95       	ret

00004712 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    4712:	ef 92       	push	r14
    4714:	0f 93       	push	r16
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	00 d0       	rcall	.+0      	; 0x471c <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    4720:	ee 24       	eor	r14, r14
    4722:	e3 94       	inc	r14
    4724:	0c e2       	ldi	r16, 0x2C	; 44
    4726:	9e 01       	movw	r18, r28
    4728:	2f 5f       	subi	r18, 0xFF	; 255
    472a:	3f 4f       	sbci	r19, 0xFF	; 255
    472c:	4e e3       	ldi	r20, 0x3E	; 62
    472e:	56 e0       	ldi	r21, 0x06	; 6
    4730:	65 e3       	ldi	r22, 0x35	; 53
    4732:	76 e0       	ldi	r23, 0x06	; 6
    4734:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    4738:	88 23       	and	r24, r24
    473a:	11 f0       	breq	.+4      	; 0x4740 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    473c:	89 81       	ldd	r24, Y+1	; 0x01
    473e:	01 c0       	rjmp	.+2      	; 0x4742 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    4740:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	0f 91       	pop	r16
    474c:	ef 90       	pop	r14
    474e:	08 95       	ret

00004750 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    4750:	ef 92       	push	r14
    4752:	0f 93       	push	r16
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	00 d0       	rcall	.+0      	; 0x475a <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    475a:	cd b7       	in	r28, 0x3d	; 61
    475c:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    475e:	e1 2c       	mov	r14, r1
    4760:	0c e2       	ldi	r16, 0x2C	; 44
    4762:	9e 01       	movw	r18, r28
    4764:	2f 5f       	subi	r18, 0xFF	; 255
    4766:	3f 4f       	sbci	r19, 0xFF	; 255
    4768:	4e e2       	ldi	r20, 0x2E	; 46
    476a:	56 e0       	ldi	r21, 0x06	; 6
    476c:	67 e2       	ldi	r22, 0x27	; 39
    476e:	76 e0       	ldi	r23, 0x06	; 6
    4770:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    4774:	88 23       	and	r24, r24
    4776:	11 f0       	breq	.+4      	; 0x477c <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	01 c0       	rjmp	.+2      	; 0x477e <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    477c:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	0f 91       	pop	r16
    4788:	ef 90       	pop	r14
    478a:	08 95       	ret

0000478c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    478c:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    4790:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    4794:	28 17       	cp	r18, r24
    4796:	39 07       	cpc	r19, r25
    4798:	b9 f4       	brne	.+46     	; 0x47c8 <_ZN14SoftwareSerial4readEv+0x3c>
    479a:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    479e:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    47a2:	98 17       	cp	r25, r24
    47a4:	89 f0       	breq	.+34     	; 0x47c8 <_ZN14SoftwareSerial4readEv+0x3c>
    47a6:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	ee 53       	subi	r30, 0x3E	; 62
    47ae:	f8 4f       	sbci	r31, 0xF8	; 248
    47b0:	80 81       	ld	r24, Z
    47b2:	20 91 c0 07 	lds	r18, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	2f 5f       	subi	r18, 0xFF	; 255
    47ba:	3f 4f       	sbci	r19, 0xFF	; 255
    47bc:	2f 73       	andi	r18, 0x3F	; 63
    47be:	33 27       	eor	r19, r19
    47c0:	20 93 c0 07 	sts	0x07C0, r18	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	08 95       	ret
    47c8:	8f ef       	ldi	r24, 0xFF	; 255
    47ca:	9f ef       	ldi	r25, 0xFF	; 255
    47cc:	08 95       	ret

000047ce <_ZN14SoftwareSerial5writeEh>:
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	dc 01       	movw	r26, r24
    47d6:	5c 96       	adiw	r26, 0x1c	; 28
    47d8:	8d 91       	ld	r24, X+
    47da:	9c 91       	ld	r25, X
    47dc:	5d 97       	sbiw	r26, 0x1d	; 29
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	39 f4       	brne	.+14     	; 0x47f0 <_ZN14SoftwareSerial5writeEh+0x22>
    47e2:	21 e0       	ldi	r18, 0x01	; 1
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	13 96       	adiw	r26, 0x03	; 3
    47e8:	3c 93       	st	X, r19
    47ea:	2e 93       	st	-X, r18
    47ec:	12 97       	sbiw	r26, 0x02	; 2
    47ee:	3b c0       	rjmp	.+118    	; 0x4866 <_ZN14SoftwareSerial5writeEh+0x98>
    47f0:	51 96       	adiw	r26, 0x11	; 17
    47f2:	ed 91       	ld	r30, X+
    47f4:	fc 91       	ld	r31, X
    47f6:	52 97       	sbiw	r26, 0x12	; 18
    47f8:	50 96       	adiw	r26, 0x10	; 16
    47fa:	2c 91       	ld	r18, X
    47fc:	50 97       	sbiw	r26, 0x10	; 16
    47fe:	32 2f       	mov	r19, r18
    4800:	30 95       	com	r19
    4802:	1f b7       	in	r17, 0x3f	; 63
    4804:	5e 96       	adiw	r26, 0x1e	; 30
    4806:	4c 91       	ld	r20, X
    4808:	5e 97       	sbiw	r26, 0x1e	; 30
    480a:	74 2f       	mov	r23, r20
    480c:	72 70       	andi	r23, 0x02	; 2
    480e:	41 fd       	sbrc	r20, 1
    4810:	60 95       	com	r22
    4812:	f8 94       	cli
    4814:	40 81       	ld	r20, Z
    4816:	77 23       	and	r23, r23
    4818:	11 f0       	breq	.+4      	; 0x481e <_ZN14SoftwareSerial5writeEh+0x50>
    481a:	42 2b       	or	r20, r18
    481c:	01 c0       	rjmp	.+2      	; 0x4820 <_ZN14SoftwareSerial5writeEh+0x52>
    481e:	43 23       	and	r20, r19
    4820:	40 83       	st	Z, r20
    4822:	ec 01       	movw	r28, r24
    4824:	21 97       	sbiw	r28, 0x01	; 1
    4826:	f1 f7       	brne	.-4      	; 0x4824 <_ZN14SoftwareSerial5writeEh+0x56>
    4828:	48 e0       	ldi	r20, 0x08	; 8
    482a:	50 81       	ld	r21, Z
    482c:	60 ff       	sbrs	r22, 0
    482e:	02 c0       	rjmp	.+4      	; 0x4834 <_ZN14SoftwareSerial5writeEh+0x66>
    4830:	52 2b       	or	r21, r18
    4832:	01 c0       	rjmp	.+2      	; 0x4836 <_ZN14SoftwareSerial5writeEh+0x68>
    4834:	53 23       	and	r21, r19
    4836:	50 83       	st	Z, r21
    4838:	ec 01       	movw	r28, r24
    483a:	21 97       	sbiw	r28, 0x01	; 1
    483c:	f1 f7       	brne	.-4      	; 0x483a <_ZN14SoftwareSerial5writeEh+0x6c>
    483e:	66 95       	lsr	r22
    4840:	41 50       	subi	r20, 0x01	; 1
    4842:	99 f7       	brne	.-26     	; 0x482a <_ZN14SoftwareSerial5writeEh+0x5c>
    4844:	80 81       	ld	r24, Z
    4846:	77 23       	and	r23, r23
    4848:	19 f0       	breq	.+6      	; 0x4850 <_ZN14SoftwareSerial5writeEh+0x82>
    484a:	83 23       	and	r24, r19
    484c:	80 83       	st	Z, r24
    484e:	02 c0       	rjmp	.+4      	; 0x4854 <_ZN14SoftwareSerial5writeEh+0x86>
    4850:	28 2b       	or	r18, r24
    4852:	20 83       	st	Z, r18
    4854:	1f bf       	out	0x3f, r17	; 63
    4856:	5c 96       	adiw	r26, 0x1c	; 28
    4858:	8d 91       	ld	r24, X+
    485a:	9c 91       	ld	r25, X
    485c:	5d 97       	sbiw	r26, 0x1d	; 29
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	f1 f7       	brne	.-4      	; 0x485e <_ZN14SoftwareSerial5writeEh+0x90>
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	df 91       	pop	r29
    4868:	cf 91       	pop	r28
    486a:	1f 91       	pop	r17
    486c:	08 95       	ret

0000486e <_ZN14SoftwareSerial5flushEv>:
    486e:	08 95       	ret

00004870 <_ZN14SoftwareSerial4peekEv>:
    4870:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    4874:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    4878:	28 17       	cp	r18, r24
    487a:	39 07       	cpc	r19, r25
    487c:	71 f4       	brne	.+28     	; 0x489a <_ZN14SoftwareSerial4peekEv+0x2a>
    487e:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4882:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4886:	98 17       	cp	r25, r24
    4888:	41 f0       	breq	.+16     	; 0x489a <_ZN14SoftwareSerial4peekEv+0x2a>
    488a:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	ee 53       	subi	r30, 0x3E	; 62
    4892:	f8 4f       	sbci	r31, 0xF8	; 248
    4894:	80 81       	ld	r24, Z
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	08 95       	ret
    489a:	8f ef       	ldi	r24, 0xFF	; 255
    489c:	9f ef       	ldi	r25, 0xFF	; 255
    489e:	08 95       	ret

000048a0 <_ZN14SoftwareSerial9availableEv>:
    48a0:	20 91 02 08 	lds	r18, 0x0802	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    48a4:	30 91 03 08 	lds	r19, 0x0803	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    48a8:	28 17       	cp	r18, r24
    48aa:	39 07       	cpc	r19, r25
    48ac:	71 f4       	brne	.+28     	; 0x48ca <_ZN14SoftwareSerial9availableEv+0x2a>
    48ae:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    48b2:	20 91 c0 07 	lds	r18, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	80 5c       	subi	r24, 0xC0	; 192
    48ba:	9f 4f       	sbci	r25, 0xFF	; 255
    48bc:	82 1b       	sub	r24, r18
    48be:	91 09       	sbc	r25, r1
    48c0:	60 e4       	ldi	r22, 0x40	; 64
    48c2:	70 e0       	ldi	r23, 0x00	; 0
    48c4:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <__divmodhi4>
    48c8:	08 95       	ret
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	08 95       	ret

000048d0 <_ZN14SoftwareSerial13stopListeningEv>:
    48d0:	e0 91 02 08 	lds	r30, 0x0802	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    48d4:	f0 91 03 08 	lds	r31, 0x0803	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    48d8:	e8 17       	cp	r30, r24
    48da:	f9 07       	cpc	r31, r25
    48dc:	69 f4       	brne	.+26     	; 0x48f8 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    48de:	a3 89       	ldd	r26, Z+19	; 0x13
    48e0:	b4 89       	ldd	r27, Z+20	; 0x14
    48e2:	9c 91       	ld	r25, X
    48e4:	85 89       	ldd	r24, Z+21	; 0x15
    48e6:	80 95       	com	r24
    48e8:	89 23       	and	r24, r25
    48ea:	8c 93       	st	X, r24
    48ec:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    48f0:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	08 95       	ret
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	08 95       	ret

000048fc <_ZN14SoftwareSerial6listenEv>:
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	ec 01       	movw	r28, r24
    4902:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4904:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4906:	89 2b       	or	r24, r25
    4908:	f1 f0       	breq	.+60     	; 0x4946 <_ZN14SoftwareSerial6listenEv+0x4a>
    490a:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    490e:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    4912:	c8 17       	cp	r28, r24
    4914:	d9 07       	cpc	r29, r25
    4916:	b9 f0       	breq	.+46     	; 0x4946 <_ZN14SoftwareSerial6listenEv+0x4a>
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	11 f0       	breq	.+4      	; 0x4920 <_ZN14SoftwareSerial6listenEv+0x24>
    491c:	0e 94 68 24 	call	0x48d0	; 0x48d0 <_ZN14SoftwareSerial13stopListeningEv>
    4920:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4922:	8e 7f       	andi	r24, 0xFE	; 254
    4924:	8e 8f       	std	Y+30, r24	; 0x1e
    4926:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    492a:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    492e:	d0 93 03 08 	sts	0x0803, r29	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    4932:	c0 93 02 08 	sts	0x0802, r28	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    4936:	eb 89       	ldd	r30, Y+19	; 0x13
    4938:	fc 89       	ldd	r31, Y+20	; 0x14
    493a:	90 81       	ld	r25, Z
    493c:	8d 89       	ldd	r24, Y+21	; 0x15
    493e:	89 2b       	or	r24, r25
    4940:	80 83       	st	Z, r24
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	01 c0       	rjmp	.+2      	; 0x4948 <_ZN14SoftwareSerial6listenEv+0x4c>
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	df 91       	pop	r29
    494a:	cf 91       	pop	r28
    494c:	08 95       	ret

0000494e <__vector_3>:
    494e:	1f 92       	push	r1
    4950:	0f 92       	push	r0
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	0f 92       	push	r0
    4956:	11 24       	eor	r1, r1
    4958:	2f 93       	push	r18
    495a:	3f 93       	push	r19
    495c:	4f 93       	push	r20
    495e:	5f 93       	push	r21
    4960:	6f 93       	push	r22
    4962:	7f 93       	push	r23
    4964:	8f 93       	push	r24
    4966:	9f 93       	push	r25
    4968:	af 93       	push	r26
    496a:	bf 93       	push	r27
    496c:	ef 93       	push	r30
    496e:	ff 93       	push	r31
    4970:	e0 91 02 08 	lds	r30, 0x0802	; 0x800802 <_ZN14SoftwareSerial13active_objectE>
    4974:	f0 91 03 08 	lds	r31, 0x0803	; 0x800803 <_ZN14SoftwareSerial13active_objectE+0x1>
    4978:	30 97       	sbiw	r30, 0x00	; 0
    497a:	09 f4       	brne	.+2      	; 0x497e <__vector_3+0x30>
    497c:	51 c0       	rjmp	.+162    	; 0x4a20 <__vector_3+0xd2>
    497e:	96 8d       	ldd	r25, Z+30	; 0x1e
    4980:	a6 85       	ldd	r26, Z+14	; 0x0e
    4982:	b7 85       	ldd	r27, Z+15	; 0x0f
    4984:	85 85       	ldd	r24, Z+13	; 0x0d
    4986:	91 ff       	sbrs	r25, 1
    4988:	04 c0       	rjmp	.+8      	; 0x4992 <__vector_3+0x44>
    498a:	9c 91       	ld	r25, X
    498c:	89 23       	and	r24, r25
    498e:	29 f4       	brne	.+10     	; 0x499a <__vector_3+0x4c>
    4990:	47 c0       	rjmp	.+142    	; 0x4a20 <__vector_3+0xd2>
    4992:	9c 91       	ld	r25, X
    4994:	89 23       	and	r24, r25
    4996:	09 f0       	breq	.+2      	; 0x499a <__vector_3+0x4c>
    4998:	43 c0       	rjmp	.+134    	; 0x4a20 <__vector_3+0xd2>
    499a:	a3 89       	ldd	r26, Z+19	; 0x13
    499c:	b4 89       	ldd	r27, Z+20	; 0x14
    499e:	9c 91       	ld	r25, X
    49a0:	85 89       	ldd	r24, Z+21	; 0x15
    49a2:	80 95       	com	r24
    49a4:	89 23       	and	r24, r25
    49a6:	8c 93       	st	X, r24
    49a8:	86 89       	ldd	r24, Z+22	; 0x16
    49aa:	97 89       	ldd	r25, Z+23	; 0x17
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	f1 f7       	brne	.-4      	; 0x49ac <__vector_3+0x5e>
    49b0:	60 8d       	ldd	r22, Z+24	; 0x18
    49b2:	71 8d       	ldd	r23, Z+25	; 0x19
    49b4:	a6 85       	ldd	r26, Z+14	; 0x0e
    49b6:	b7 85       	ldd	r27, Z+15	; 0x0f
    49b8:	55 85       	ldd	r21, Z+13	; 0x0d
    49ba:	38 e0       	ldi	r19, 0x08	; 8
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	cb 01       	movw	r24, r22
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	f1 f7       	brne	.-4      	; 0x49c0 <__vector_3+0x72>
    49c4:	82 2f       	mov	r24, r18
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	95 95       	asr	r25
    49ca:	87 95       	ror	r24
    49cc:	28 2f       	mov	r18, r24
    49ce:	4c 91       	ld	r20, X
    49d0:	45 23       	and	r20, r21
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <__vector_3+0x88>
    49d4:	20 68       	ori	r18, 0x80	; 128
    49d6:	31 50       	subi	r19, 0x01	; 1
    49d8:	91 f7       	brne	.-28     	; 0x49be <__vector_3+0x70>
    49da:	86 8d       	ldd	r24, Z+30	; 0x1e
    49dc:	81 fd       	sbrc	r24, 1
    49de:	20 95       	com	r18
    49e0:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	01 96       	adiw	r24, 0x01	; 1
    49e8:	8f 73       	andi	r24, 0x3F	; 63
    49ea:	99 27       	eor	r25, r25
    49ec:	30 91 c0 07 	lds	r19, 0x07C0	; 0x8007c0 <_ZN14SoftwareSerial20_receive_buffer_headE>
    49f0:	38 17       	cp	r19, r24
    49f2:	49 f0       	breq	.+18     	; 0x4a06 <__vector_3+0xb8>
    49f4:	a0 91 c1 07 	lds	r26, 0x07C1	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	ae 53       	subi	r26, 0x3E	; 62
    49fc:	b8 4f       	sbci	r27, 0xF8	; 248
    49fe:	2c 93       	st	X, r18
    4a00:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <__vector_3+0xbe>
    4a06:	86 8d       	ldd	r24, Z+30	; 0x1e
    4a08:	81 60       	ori	r24, 0x01	; 1
    4a0a:	86 8f       	std	Z+30, r24	; 0x1e
    4a0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a0e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4a10:	01 97       	sbiw	r24, 0x01	; 1
    4a12:	f1 f7       	brne	.-4      	; 0x4a10 <__vector_3+0xc2>
    4a14:	a3 89       	ldd	r26, Z+19	; 0x13
    4a16:	b4 89       	ldd	r27, Z+20	; 0x14
    4a18:	9c 91       	ld	r25, X
    4a1a:	85 89       	ldd	r24, Z+21	; 0x15
    4a1c:	89 2b       	or	r24, r25
    4a1e:	8c 93       	st	X, r24
    4a20:	ff 91       	pop	r31
    4a22:	ef 91       	pop	r30
    4a24:	bf 91       	pop	r27
    4a26:	af 91       	pop	r26
    4a28:	9f 91       	pop	r25
    4a2a:	8f 91       	pop	r24
    4a2c:	7f 91       	pop	r23
    4a2e:	6f 91       	pop	r22
    4a30:	5f 91       	pop	r21
    4a32:	4f 91       	pop	r20
    4a34:	3f 91       	pop	r19
    4a36:	2f 91       	pop	r18
    4a38:	0f 90       	pop	r0
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	0f 90       	pop	r0
    4a3e:	1f 90       	pop	r1
    4a40:	18 95       	reti

00004a42 <_ZN14SoftwareSerial5setTXEh>:
    4a42:	1f 93       	push	r17
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	ec 01       	movw	r28, r24
    4a4a:	16 2f       	mov	r17, r22
    4a4c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4a4e:	66 95       	lsr	r22
    4a50:	61 70       	andi	r22, 0x01	; 1
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	68 27       	eor	r22, r24
    4a56:	81 2f       	mov	r24, r17
    4a58:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
    4a5c:	61 e0       	ldi	r22, 0x01	; 1
    4a5e:	81 2f       	mov	r24, r17
    4a60:	0e 94 8b 19 	call	0x3316	; 0x3316 <pinMode>
    4a64:	81 2f       	mov	r24, r17
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	fc 01       	movw	r30, r24
    4a6a:	e1 53       	subi	r30, 0x31	; 49
    4a6c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a6e:	e4 91       	lpm	r30, Z
    4a70:	e8 8b       	std	Y+16, r30	; 0x10
    4a72:	fc 01       	movw	r30, r24
    4a74:	ed 51       	subi	r30, 0x1D	; 29
    4a76:	fc 4f       	sbci	r31, 0xFC	; 252
    4a78:	e4 91       	lpm	r30, Z
    4a7a:	f0 e0       	ldi	r31, 0x00	; 0
    4a7c:	ee 0f       	add	r30, r30
    4a7e:	ff 1f       	adc	r31, r31
    4a80:	ef 5f       	subi	r30, 0xFF	; 255
    4a82:	fb 4f       	sbci	r31, 0xFB	; 251
    4a84:	85 91       	lpm	r24, Z+
    4a86:	94 91       	lpm	r25, Z
    4a88:	9a 8b       	std	Y+18, r25	; 0x12
    4a8a:	89 8b       	std	Y+17, r24	; 0x11
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	08 95       	ret

00004a94 <_ZN14SoftwareSerial5setRXEh>:
    4a94:	1f 93       	push	r17
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	ec 01       	movw	r28, r24
    4a9c:	16 2f       	mov	r17, r22
    4a9e:	60 e0       	ldi	r22, 0x00	; 0
    4aa0:	81 2f       	mov	r24, r17
    4aa2:	0e 94 8b 19 	call	0x3316	; 0x3316 <pinMode>
    4aa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4aa8:	81 fd       	sbrc	r24, 1
    4aaa:	04 c0       	rjmp	.+8      	; 0x4ab4 <_ZN14SoftwareSerial5setRXEh+0x20>
    4aac:	61 e0       	ldi	r22, 0x01	; 1
    4aae:	81 2f       	mov	r24, r17
    4ab0:	0e 94 c7 19 	call	0x338e	; 0x338e <digitalWrite>
    4ab4:	1c 87       	std	Y+12, r17	; 0x0c
    4ab6:	81 2f       	mov	r24, r17
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	fc 01       	movw	r30, r24
    4abc:	e1 53       	subi	r30, 0x31	; 49
    4abe:	fc 4f       	sbci	r31, 0xFC	; 252
    4ac0:	e4 91       	lpm	r30, Z
    4ac2:	ed 87       	std	Y+13, r30	; 0x0d
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	ed 51       	subi	r30, 0x1D	; 29
    4ac8:	fc 4f       	sbci	r31, 0xFC	; 252
    4aca:	e4 91       	lpm	r30, Z
    4acc:	f0 e0       	ldi	r31, 0x00	; 0
    4ace:	ee 0f       	add	r30, r30
    4ad0:	ff 1f       	adc	r31, r31
    4ad2:	e9 50       	subi	r30, 0x09	; 9
    4ad4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ad6:	85 91       	lpm	r24, Z+
    4ad8:	94 91       	lpm	r25, Z
    4ada:	9f 87       	std	Y+15, r25	; 0x0f
    4adc:	8e 87       	std	Y+14, r24	; 0x0e
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	1f 91       	pop	r17
    4ae4:	08 95       	ret

00004ae6 <_ZN14SoftwareSerialC1Ehhb>:
    4ae6:	1f 93       	push	r17
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
    4aec:	ec 01       	movw	r28, r24
    4aee:	16 2f       	mov	r17, r22
    4af0:	1b 82       	std	Y+3, r1	; 0x03
    4af2:	1a 82       	std	Y+2, r1	; 0x02
    4af4:	88 ee       	ldi	r24, 0xE8	; 232
    4af6:	93 e0       	ldi	r25, 0x03	; 3
    4af8:	a0 e0       	ldi	r26, 0x00	; 0
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	8c 83       	std	Y+4, r24	; 0x04
    4afe:	9d 83       	std	Y+5, r25	; 0x05
    4b00:	ae 83       	std	Y+6, r26	; 0x06
    4b02:	bf 83       	std	Y+7, r27	; 0x07
    4b04:	82 ef       	ldi	r24, 0xF2	; 242
    4b06:	92 e0       	ldi	r25, 0x02	; 2
    4b08:	99 83       	std	Y+1, r25	; 0x01
    4b0a:	88 83       	st	Y, r24
    4b0c:	1f 8a       	std	Y+23, r1	; 0x17
    4b0e:	1e 8a       	std	Y+22, r1	; 0x16
    4b10:	19 8e       	std	Y+25, r1	; 0x19
    4b12:	18 8e       	std	Y+24, r1	; 0x18
    4b14:	1b 8e       	std	Y+27, r1	; 0x1b
    4b16:	1a 8e       	std	Y+26, r1	; 0x1a
    4b18:	1d 8e       	std	Y+29, r1	; 0x1d
    4b1a:	1c 8e       	std	Y+28, r1	; 0x1c
    4b1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b1e:	8e 7f       	andi	r24, 0xFE	; 254
    4b20:	20 fb       	bst	r18, 0
    4b22:	81 f9       	bld	r24, 1
    4b24:	8e 8f       	std	Y+30, r24	; 0x1e
    4b26:	64 2f       	mov	r22, r20
    4b28:	ce 01       	movw	r24, r28
    4b2a:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_ZN14SoftwareSerial5setTXEh>
    4b2e:	61 2f       	mov	r22, r17
    4b30:	ce 01       	movw	r24, r28
    4b32:	df 91       	pop	r29
    4b34:	cf 91       	pop	r28
    4b36:	1f 91       	pop	r17
    4b38:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <_ZN14SoftwareSerial5setRXEh>

00004b3c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4b3c:	cf 93       	push	r28
    4b3e:	df 93       	push	r29
    4b40:	ec 01       	movw	r28, r24
    4b42:	9a 01       	movw	r18, r20
    4b44:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4b46:	1b 8e       	std	Y+27, r1	; 0x1b
    4b48:	1a 8e       	std	Y+26, r1	; 0x1a
    4b4a:	19 8e       	std	Y+25, r1	; 0x19
    4b4c:	18 8e       	std	Y+24, r1	; 0x18
    4b4e:	1f 8a       	std	Y+23, r1	; 0x17
    4b50:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4b52:	60 e0       	ldi	r22, 0x00	; 0
    4b54:	79 e0       	ldi	r23, 0x09	; 9
    4b56:	8d e3       	ldi	r24, 0x3D	; 61
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <__divmodsi4>
    4b5e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4b60:	24 30       	cpi	r18, 0x04	; 4
    4b62:	31 05       	cpc	r19, r1
    4b64:	18 f0       	brcs	.+6      	; 0x4b6c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    4b66:	c9 01       	movw	r24, r18
    4b68:	03 97       	sbiw	r24, 0x03	; 3
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4b70:	9d 8f       	std	Y+29, r25	; 0x1d
    4b72:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    4b74:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b76:	66 31       	cpi	r22, 0x16	; 22
    4b78:	08 f0       	brcs	.+2      	; 0x4b7c <_ZN14SoftwareSerial5beginEl+0x40>
    4b7a:	69 c0       	rjmp	.+210    	; 0x4c4e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4b7c:	c9 01       	movw	r24, r18
    4b7e:	96 95       	lsr	r25
    4b80:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4b82:	84 31       	cpi	r24, 0x14	; 20
    4b84:	91 05       	cpc	r25, r1
    4b86:	10 f0       	brcs	.+4      	; 0x4b8c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    4b88:	43 97       	sbiw	r24, 0x13	; 19
    4b8a:	02 c0       	rjmp	.+4      	; 0x4b90 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4b90:	9f 8b       	std	Y+23, r25	; 0x17
    4b92:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4b94:	36 97       	sbiw	r30, 0x06	; 6
    4b96:	18 f0       	brcs	.+6      	; 0x4b9e <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    4b98:	c9 01       	movw	r24, r18
    4b9a:	05 97       	sbiw	r24, 0x05	; 5
    4b9c:	02 c0       	rjmp	.+4      	; 0x4ba2 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    4b9e:	81 e0       	ldi	r24, 0x01	; 1
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4ba2:	99 8f       	std	Y+25, r25	; 0x19
    4ba4:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4ba6:	c9 01       	movw	r24, r18
    4ba8:	88 0f       	add	r24, r24
    4baa:	99 1f       	adc	r25, r25
    4bac:	28 0f       	add	r18, r24
    4bae:	39 1f       	adc	r19, r25
    4bb0:	36 95       	lsr	r19
    4bb2:	27 95       	ror	r18
    4bb4:	36 95       	lsr	r19
    4bb6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4bb8:	2d 30       	cpi	r18, 0x0D	; 13
    4bba:	31 05       	cpc	r19, r1
    4bbc:	18 f0       	brcs	.+6      	; 0x4bc4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    4bbe:	2c 50       	subi	r18, 0x0C	; 12
    4bc0:	31 09       	sbc	r19, r1
    4bc2:	02 c0       	rjmp	.+4      	; 0x4bc8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    4bc4:	21 e0       	ldi	r18, 0x01	; 1
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4bc8:	3b 8f       	std	Y+27, r19	; 0x1b
    4bca:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    4bcc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    4bd0:	68 30       	cpi	r22, 0x08	; 8
    4bd2:	50 f0       	brcs	.+20     	; 0x4be8 <_ZN14SoftwareSerial5beginEl+0xac>
    4bd4:	21 e0       	ldi	r18, 0x01	; 1
    4bd6:	6e 30       	cpi	r22, 0x0E	; 14
    4bd8:	08 f4       	brcc	.+2      	; 0x4bdc <_ZN14SoftwareSerial5beginEl+0xa0>
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	01 c0       	rjmp	.+2      	; 0x4be2 <_ZN14SoftwareSerial5beginEl+0xa6>
    4be0:	88 0f       	add	r24, r24
    4be2:	2a 95       	dec	r18
    4be4:	ea f7       	brpl	.-6      	; 0x4be0 <_ZN14SoftwareSerial5beginEl+0xa4>
    4be6:	01 c0       	rjmp	.+2      	; 0x4bea <_ZN14SoftwareSerial5beginEl+0xae>
    4be8:	84 e0       	ldi	r24, 0x04	; 4
    4bea:	89 2b       	or	r24, r25
    4bec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4bf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bf2:	98 30       	cpi	r25, 0x08	; 8
    4bf4:	38 f0       	brcs	.+14     	; 0x4c04 <_ZN14SoftwareSerial5beginEl+0xc8>
    4bf6:	9e 30       	cpi	r25, 0x0E	; 14
    4bf8:	40 f0       	brcs	.+16     	; 0x4c0a <_ZN14SoftwareSerial5beginEl+0xce>
    4bfa:	96 31       	cpi	r25, 0x16	; 22
    4bfc:	48 f0       	brcs	.+18     	; 0x4c10 <_ZN14SoftwareSerial5beginEl+0xd4>
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	08 c0       	rjmp	.+16     	; 0x4c14 <_ZN14SoftwareSerial5beginEl+0xd8>
    4c04:	2d e6       	ldi	r18, 0x6D	; 109
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	05 c0       	rjmp	.+10     	; 0x4c14 <_ZN14SoftwareSerial5beginEl+0xd8>
    4c0a:	2b e6       	ldi	r18, 0x6B	; 107
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	02 c0       	rjmp	.+4      	; 0x4c14 <_ZN14SoftwareSerial5beginEl+0xd8>
    4c10:	2c e6       	ldi	r18, 0x6C	; 108
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	3c 8b       	std	Y+20, r19	; 0x14
    4c16:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4c18:	98 30       	cpi	r25, 0x08	; 8
    4c1a:	30 f4       	brcc	.+12     	; 0x4c28 <_ZN14SoftwareSerial5beginEl+0xec>
    4c1c:	81 e0       	ldi	r24, 0x01	; 1
    4c1e:	01 c0       	rjmp	.+2      	; 0x4c22 <_ZN14SoftwareSerial5beginEl+0xe6>
    4c20:	88 0f       	add	r24, r24
    4c22:	9a 95       	dec	r25
    4c24:	ea f7       	brpl	.-6      	; 0x4c20 <_ZN14SoftwareSerial5beginEl+0xe4>
    4c26:	0e c0       	rjmp	.+28     	; 0x4c44 <_ZN14SoftwareSerial5beginEl+0x108>
    4c28:	29 2f       	mov	r18, r25
    4c2a:	30 e0       	ldi	r19, 0x00	; 0
    4c2c:	9e 30       	cpi	r25, 0x0E	; 14
    4c2e:	18 f4       	brcc	.+6      	; 0x4c36 <_ZN14SoftwareSerial5beginEl+0xfa>
    4c30:	28 50       	subi	r18, 0x08	; 8
    4c32:	31 09       	sbc	r19, r1
    4c34:	02 c0       	rjmp	.+4      	; 0x4c3a <_ZN14SoftwareSerial5beginEl+0xfe>
    4c36:	2e 50       	subi	r18, 0x0E	; 14
    4c38:	31 09       	sbc	r19, r1
    4c3a:	81 e0       	ldi	r24, 0x01	; 1
    4c3c:	01 c0       	rjmp	.+2      	; 0x4c40 <_ZN14SoftwareSerial5beginEl+0x104>
    4c3e:	88 0f       	add	r24, r24
    4c40:	2a 95       	dec	r18
    4c42:	ea f7       	brpl	.-6      	; 0x4c3e <_ZN14SoftwareSerial5beginEl+0x102>
    4c44:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4c46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4c48:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	f1 f7       	brne	.-4      	; 0x4c4a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4c4e:	ce 01       	movw	r24, r28
}
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4c54:	0c 94 7e 24 	jmp	0x48fc	; 0x48fc <_ZN14SoftwareSerial6listenEv>

00004c58 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4c58:	08 95       	ret

00004c5a <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4c5a:	08 95       	ret

00004c5c <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    4c5c:	1f 92       	push	r1
    4c5e:	0f 92       	push	r0
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	0f 92       	push	r0
    4c64:	11 24       	eor	r1, r1
    4c66:	2f 93       	push	r18
    4c68:	3f 93       	push	r19
    4c6a:	4f 93       	push	r20
    4c6c:	5f 93       	push	r21
    4c6e:	6f 93       	push	r22
    4c70:	7f 93       	push	r23
    4c72:	8f 93       	push	r24
    4c74:	9f 93       	push	r25
    4c76:	af 93       	push	r26
    4c78:	bf 93       	push	r27
    4c7a:	ef 93       	push	r30
    4c7c:	ff 93       	push	r31
    4c7e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    4c82:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    4c86:	09 95       	icall
    4c88:	ff 91       	pop	r31
    4c8a:	ef 91       	pop	r30
    4c8c:	bf 91       	pop	r27
    4c8e:	af 91       	pop	r26
    4c90:	9f 91       	pop	r25
    4c92:	8f 91       	pop	r24
    4c94:	7f 91       	pop	r23
    4c96:	6f 91       	pop	r22
    4c98:	5f 91       	pop	r21
    4c9a:	4f 91       	pop	r20
    4c9c:	3f 91       	pop	r19
    4c9e:	2f 91       	pop	r18
    4ca0:	0f 90       	pop	r0
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	0f 90       	pop	r0
    4ca6:	1f 90       	pop	r1
    4ca8:	18 95       	reti

00004caa <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4caa:	1f 92       	push	r1
    4cac:	0f 92       	push	r0
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	0f 92       	push	r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	2f 93       	push	r18
    4cb6:	3f 93       	push	r19
    4cb8:	4f 93       	push	r20
    4cba:	5f 93       	push	r21
    4cbc:	6f 93       	push	r22
    4cbe:	7f 93       	push	r23
    4cc0:	8f 93       	push	r24
    4cc2:	9f 93       	push	r25
    4cc4:	af 93       	push	r26
    4cc6:	bf 93       	push	r27
    4cc8:	ef 93       	push	r30
    4cca:	ff 93       	push	r31
    4ccc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    4cd0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    4cd4:	09 95       	icall
    4cd6:	ff 91       	pop	r31
    4cd8:	ef 91       	pop	r30
    4cda:	bf 91       	pop	r27
    4cdc:	af 91       	pop	r26
    4cde:	9f 91       	pop	r25
    4ce0:	8f 91       	pop	r24
    4ce2:	7f 91       	pop	r23
    4ce4:	6f 91       	pop	r22
    4ce6:	5f 91       	pop	r21
    4ce8:	4f 91       	pop	r20
    4cea:	3f 91       	pop	r19
    4cec:	2f 91       	pop	r18
    4cee:	0f 90       	pop	r0
    4cf0:	0f be       	out	0x3f, r0	; 63
    4cf2:	0f 90       	pop	r0
    4cf4:	1f 90       	pop	r1
    4cf6:	18 95       	reti

00004cf8 <__subsf3>:
    4cf8:	50 58       	subi	r21, 0x80	; 128

00004cfa <__addsf3>:
    4cfa:	bb 27       	eor	r27, r27
    4cfc:	aa 27       	eor	r26, r26
    4cfe:	0e 94 94 26 	call	0x4d28	; 0x4d28 <__addsf3x>
    4d02:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_round>
    4d06:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fp_pscA>
    4d0a:	38 f0       	brcs	.+14     	; 0x4d1a <__addsf3+0x20>
    4d0c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fp_pscB>
    4d10:	20 f0       	brcs	.+8      	; 0x4d1a <__addsf3+0x20>
    4d12:	39 f4       	brne	.+14     	; 0x4d22 <__addsf3+0x28>
    4d14:	9f 3f       	cpi	r25, 0xFF	; 255
    4d16:	19 f4       	brne	.+6      	; 0x4d1e <__addsf3+0x24>
    4d18:	26 f4       	brtc	.+8      	; 0x4d22 <__addsf3+0x28>
    4d1a:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__fp_nan>
    4d1e:	0e f4       	brtc	.+2      	; 0x4d22 <__addsf3+0x28>
    4d20:	e0 95       	com	r30
    4d22:	e7 fb       	bst	r30, 7
    4d24:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_inf>

00004d28 <__addsf3x>:
    4d28:	e9 2f       	mov	r30, r25
    4d2a:	0e 94 4f 13 	call	0x269e	; 0x269e <__fp_split3>
    4d2e:	58 f3       	brcs	.-42     	; 0x4d06 <__addsf3+0xc>
    4d30:	ba 17       	cp	r27, r26
    4d32:	62 07       	cpc	r22, r18
    4d34:	73 07       	cpc	r23, r19
    4d36:	84 07       	cpc	r24, r20
    4d38:	95 07       	cpc	r25, r21
    4d3a:	20 f0       	brcs	.+8      	; 0x4d44 <__addsf3x+0x1c>
    4d3c:	79 f4       	brne	.+30     	; 0x4d5c <__addsf3x+0x34>
    4d3e:	a6 f5       	brtc	.+104    	; 0x4da8 <__addsf3x+0x80>
    4d40:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__fp_zero>
    4d44:	0e f4       	brtc	.+2      	; 0x4d48 <__addsf3x+0x20>
    4d46:	e0 95       	com	r30
    4d48:	0b 2e       	mov	r0, r27
    4d4a:	ba 2f       	mov	r27, r26
    4d4c:	a0 2d       	mov	r26, r0
    4d4e:	0b 01       	movw	r0, r22
    4d50:	b9 01       	movw	r22, r18
    4d52:	90 01       	movw	r18, r0
    4d54:	0c 01       	movw	r0, r24
    4d56:	ca 01       	movw	r24, r20
    4d58:	a0 01       	movw	r20, r0
    4d5a:	11 24       	eor	r1, r1
    4d5c:	ff 27       	eor	r31, r31
    4d5e:	59 1b       	sub	r21, r25
    4d60:	99 f0       	breq	.+38     	; 0x4d88 <__addsf3x+0x60>
    4d62:	59 3f       	cpi	r21, 0xF9	; 249
    4d64:	50 f4       	brcc	.+20     	; 0x4d7a <__addsf3x+0x52>
    4d66:	50 3e       	cpi	r21, 0xE0	; 224
    4d68:	68 f1       	brcs	.+90     	; 0x4dc4 <__addsf3x+0x9c>
    4d6a:	1a 16       	cp	r1, r26
    4d6c:	f0 40       	sbci	r31, 0x00	; 0
    4d6e:	a2 2f       	mov	r26, r18
    4d70:	23 2f       	mov	r18, r19
    4d72:	34 2f       	mov	r19, r20
    4d74:	44 27       	eor	r20, r20
    4d76:	58 5f       	subi	r21, 0xF8	; 248
    4d78:	f3 cf       	rjmp	.-26     	; 0x4d60 <__addsf3x+0x38>
    4d7a:	46 95       	lsr	r20
    4d7c:	37 95       	ror	r19
    4d7e:	27 95       	ror	r18
    4d80:	a7 95       	ror	r26
    4d82:	f0 40       	sbci	r31, 0x00	; 0
    4d84:	53 95       	inc	r21
    4d86:	c9 f7       	brne	.-14     	; 0x4d7a <__addsf3x+0x52>
    4d88:	7e f4       	brtc	.+30     	; 0x4da8 <__addsf3x+0x80>
    4d8a:	1f 16       	cp	r1, r31
    4d8c:	ba 0b       	sbc	r27, r26
    4d8e:	62 0b       	sbc	r22, r18
    4d90:	73 0b       	sbc	r23, r19
    4d92:	84 0b       	sbc	r24, r20
    4d94:	ba f0       	brmi	.+46     	; 0x4dc4 <__addsf3x+0x9c>
    4d96:	91 50       	subi	r25, 0x01	; 1
    4d98:	a1 f0       	breq	.+40     	; 0x4dc2 <__addsf3x+0x9a>
    4d9a:	ff 0f       	add	r31, r31
    4d9c:	bb 1f       	adc	r27, r27
    4d9e:	66 1f       	adc	r22, r22
    4da0:	77 1f       	adc	r23, r23
    4da2:	88 1f       	adc	r24, r24
    4da4:	c2 f7       	brpl	.-16     	; 0x4d96 <__addsf3x+0x6e>
    4da6:	0e c0       	rjmp	.+28     	; 0x4dc4 <__addsf3x+0x9c>
    4da8:	ba 0f       	add	r27, r26
    4daa:	62 1f       	adc	r22, r18
    4dac:	73 1f       	adc	r23, r19
    4dae:	84 1f       	adc	r24, r20
    4db0:	48 f4       	brcc	.+18     	; 0x4dc4 <__addsf3x+0x9c>
    4db2:	87 95       	ror	r24
    4db4:	77 95       	ror	r23
    4db6:	67 95       	ror	r22
    4db8:	b7 95       	ror	r27
    4dba:	f7 95       	ror	r31
    4dbc:	9e 3f       	cpi	r25, 0xFE	; 254
    4dbe:	08 f0       	brcs	.+2      	; 0x4dc2 <__addsf3x+0x9a>
    4dc0:	b0 cf       	rjmp	.-160    	; 0x4d22 <__addsf3+0x28>
    4dc2:	93 95       	inc	r25
    4dc4:	88 0f       	add	r24, r24
    4dc6:	08 f0       	brcs	.+2      	; 0x4dca <__addsf3x+0xa2>
    4dc8:	99 27       	eor	r25, r25
    4dca:	ee 0f       	add	r30, r30
    4dcc:	97 95       	ror	r25
    4dce:	87 95       	ror	r24
    4dd0:	08 95       	ret

00004dd2 <__cmpsf2>:
    4dd2:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fp_cmp>
    4dd6:	08 f4       	brcc	.+2      	; 0x4dda <__cmpsf2+0x8>
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	08 95       	ret

00004ddc <__divsf3>:
    4ddc:	0e 94 02 27 	call	0x4e04	; 0x4e04 <__divsf3x>
    4de0:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_round>
    4de4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fp_pscB>
    4de8:	58 f0       	brcs	.+22     	; 0x4e00 <__divsf3+0x24>
    4dea:	0e 94 ee 13 	call	0x27dc	; 0x27dc <__fp_pscA>
    4dee:	40 f0       	brcs	.+16     	; 0x4e00 <__divsf3+0x24>
    4df0:	29 f4       	brne	.+10     	; 0x4dfc <__divsf3+0x20>
    4df2:	5f 3f       	cpi	r21, 0xFF	; 255
    4df4:	29 f0       	breq	.+10     	; 0x4e00 <__divsf3+0x24>
    4df6:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_inf>
    4dfa:	51 11       	cpse	r21, r1
    4dfc:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_szero>
    4e00:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__fp_nan>

00004e04 <__divsf3x>:
    4e04:	0e 94 4f 13 	call	0x269e	; 0x269e <__fp_split3>
    4e08:	68 f3       	brcs	.-38     	; 0x4de4 <__divsf3+0x8>

00004e0a <__divsf3_pse>:
    4e0a:	99 23       	and	r25, r25
    4e0c:	b1 f3       	breq	.-20     	; 0x4dfa <__divsf3+0x1e>
    4e0e:	55 23       	and	r21, r21
    4e10:	91 f3       	breq	.-28     	; 0x4df6 <__divsf3+0x1a>
    4e12:	95 1b       	sub	r25, r21
    4e14:	55 0b       	sbc	r21, r21
    4e16:	bb 27       	eor	r27, r27
    4e18:	aa 27       	eor	r26, r26
    4e1a:	62 17       	cp	r22, r18
    4e1c:	73 07       	cpc	r23, r19
    4e1e:	84 07       	cpc	r24, r20
    4e20:	38 f0       	brcs	.+14     	; 0x4e30 <__divsf3_pse+0x26>
    4e22:	9f 5f       	subi	r25, 0xFF	; 255
    4e24:	5f 4f       	sbci	r21, 0xFF	; 255
    4e26:	22 0f       	add	r18, r18
    4e28:	33 1f       	adc	r19, r19
    4e2a:	44 1f       	adc	r20, r20
    4e2c:	aa 1f       	adc	r26, r26
    4e2e:	a9 f3       	breq	.-22     	; 0x4e1a <__divsf3_pse+0x10>
    4e30:	35 d0       	rcall	.+106    	; 0x4e9c <__divsf3_pse+0x92>
    4e32:	0e 2e       	mov	r0, r30
    4e34:	3a f0       	brmi	.+14     	; 0x4e44 <__divsf3_pse+0x3a>
    4e36:	e0 e8       	ldi	r30, 0x80	; 128
    4e38:	32 d0       	rcall	.+100    	; 0x4e9e <__divsf3_pse+0x94>
    4e3a:	91 50       	subi	r25, 0x01	; 1
    4e3c:	50 40       	sbci	r21, 0x00	; 0
    4e3e:	e6 95       	lsr	r30
    4e40:	00 1c       	adc	r0, r0
    4e42:	ca f7       	brpl	.-14     	; 0x4e36 <__divsf3_pse+0x2c>
    4e44:	2b d0       	rcall	.+86     	; 0x4e9c <__divsf3_pse+0x92>
    4e46:	fe 2f       	mov	r31, r30
    4e48:	29 d0       	rcall	.+82     	; 0x4e9c <__divsf3_pse+0x92>
    4e4a:	66 0f       	add	r22, r22
    4e4c:	77 1f       	adc	r23, r23
    4e4e:	88 1f       	adc	r24, r24
    4e50:	bb 1f       	adc	r27, r27
    4e52:	26 17       	cp	r18, r22
    4e54:	37 07       	cpc	r19, r23
    4e56:	48 07       	cpc	r20, r24
    4e58:	ab 07       	cpc	r26, r27
    4e5a:	b0 e8       	ldi	r27, 0x80	; 128
    4e5c:	09 f0       	breq	.+2      	; 0x4e60 <__divsf3_pse+0x56>
    4e5e:	bb 0b       	sbc	r27, r27
    4e60:	80 2d       	mov	r24, r0
    4e62:	bf 01       	movw	r22, r30
    4e64:	ff 27       	eor	r31, r31
    4e66:	93 58       	subi	r25, 0x83	; 131
    4e68:	5f 4f       	sbci	r21, 0xFF	; 255
    4e6a:	3a f0       	brmi	.+14     	; 0x4e7a <__divsf3_pse+0x70>
    4e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    4e6e:	51 05       	cpc	r21, r1
    4e70:	78 f0       	brcs	.+30     	; 0x4e90 <__divsf3_pse+0x86>
    4e72:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_inf>
    4e76:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_szero>
    4e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    4e7c:	e4 f3       	brlt	.-8      	; 0x4e76 <__divsf3_pse+0x6c>
    4e7e:	98 3e       	cpi	r25, 0xE8	; 232
    4e80:	d4 f3       	brlt	.-12     	; 0x4e76 <__divsf3_pse+0x6c>
    4e82:	86 95       	lsr	r24
    4e84:	77 95       	ror	r23
    4e86:	67 95       	ror	r22
    4e88:	b7 95       	ror	r27
    4e8a:	f7 95       	ror	r31
    4e8c:	9f 5f       	subi	r25, 0xFF	; 255
    4e8e:	c9 f7       	brne	.-14     	; 0x4e82 <__divsf3_pse+0x78>
    4e90:	88 0f       	add	r24, r24
    4e92:	91 1d       	adc	r25, r1
    4e94:	96 95       	lsr	r25
    4e96:	87 95       	ror	r24
    4e98:	97 f9       	bld	r25, 7
    4e9a:	08 95       	ret
    4e9c:	e1 e0       	ldi	r30, 0x01	; 1
    4e9e:	66 0f       	add	r22, r22
    4ea0:	77 1f       	adc	r23, r23
    4ea2:	88 1f       	adc	r24, r24
    4ea4:	bb 1f       	adc	r27, r27
    4ea6:	62 17       	cp	r22, r18
    4ea8:	73 07       	cpc	r23, r19
    4eaa:	84 07       	cpc	r24, r20
    4eac:	ba 07       	cpc	r27, r26
    4eae:	20 f0       	brcs	.+8      	; 0x4eb8 <__divsf3_pse+0xae>
    4eb0:	62 1b       	sub	r22, r18
    4eb2:	73 0b       	sbc	r23, r19
    4eb4:	84 0b       	sbc	r24, r20
    4eb6:	ba 0b       	sbc	r27, r26
    4eb8:	ee 1f       	adc	r30, r30
    4eba:	88 f7       	brcc	.-30     	; 0x4e9e <__divsf3_pse+0x94>
    4ebc:	e0 95       	com	r30
    4ebe:	08 95       	ret

00004ec0 <__fp_cmp>:
    4ec0:	99 0f       	add	r25, r25
    4ec2:	00 08       	sbc	r0, r0
    4ec4:	55 0f       	add	r21, r21
    4ec6:	aa 0b       	sbc	r26, r26
    4ec8:	e0 e8       	ldi	r30, 0x80	; 128
    4eca:	fe ef       	ldi	r31, 0xFE	; 254
    4ecc:	16 16       	cp	r1, r22
    4ece:	17 06       	cpc	r1, r23
    4ed0:	e8 07       	cpc	r30, r24
    4ed2:	f9 07       	cpc	r31, r25
    4ed4:	c0 f0       	brcs	.+48     	; 0x4f06 <__fp_cmp+0x46>
    4ed6:	12 16       	cp	r1, r18
    4ed8:	13 06       	cpc	r1, r19
    4eda:	e4 07       	cpc	r30, r20
    4edc:	f5 07       	cpc	r31, r21
    4ede:	98 f0       	brcs	.+38     	; 0x4f06 <__fp_cmp+0x46>
    4ee0:	62 1b       	sub	r22, r18
    4ee2:	73 0b       	sbc	r23, r19
    4ee4:	84 0b       	sbc	r24, r20
    4ee6:	95 0b       	sbc	r25, r21
    4ee8:	39 f4       	brne	.+14     	; 0x4ef8 <__fp_cmp+0x38>
    4eea:	0a 26       	eor	r0, r26
    4eec:	61 f0       	breq	.+24     	; 0x4f06 <__fp_cmp+0x46>
    4eee:	23 2b       	or	r18, r19
    4ef0:	24 2b       	or	r18, r20
    4ef2:	25 2b       	or	r18, r21
    4ef4:	21 f4       	brne	.+8      	; 0x4efe <__fp_cmp+0x3e>
    4ef6:	08 95       	ret
    4ef8:	0a 26       	eor	r0, r26
    4efa:	09 f4       	brne	.+2      	; 0x4efe <__fp_cmp+0x3e>
    4efc:	a1 40       	sbci	r26, 0x01	; 1
    4efe:	a6 95       	lsr	r26
    4f00:	8f ef       	ldi	r24, 0xFF	; 255
    4f02:	81 1d       	adc	r24, r1
    4f04:	81 1d       	adc	r24, r1
    4f06:	08 95       	ret

00004f08 <__gesf2>:
    4f08:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fp_cmp>
    4f0c:	08 f4       	brcc	.+2      	; 0x4f10 <__gesf2+0x8>
    4f0e:	8f ef       	ldi	r24, 0xFF	; 255
    4f10:	08 95       	ret

00004f12 <__unordsf2>:
    4f12:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__fp_cmp>
    4f16:	88 0b       	sbc	r24, r24
    4f18:	99 0b       	sbc	r25, r25
    4f1a:	08 95       	ret

00004f1c <__divmodhi4>:
    4f1c:	97 fb       	bst	r25, 7
    4f1e:	07 2e       	mov	r0, r23
    4f20:	16 f4       	brtc	.+4      	; 0x4f26 <__divmodhi4+0xa>
    4f22:	00 94       	com	r0
    4f24:	07 d0       	rcall	.+14     	; 0x4f34 <__divmodhi4_neg1>
    4f26:	77 fd       	sbrc	r23, 7
    4f28:	09 d0       	rcall	.+18     	; 0x4f3c <__divmodhi4_neg2>
    4f2a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__udivmodhi4>
    4f2e:	07 fc       	sbrc	r0, 7
    4f30:	05 d0       	rcall	.+10     	; 0x4f3c <__divmodhi4_neg2>
    4f32:	3e f4       	brtc	.+14     	; 0x4f42 <__divmodhi4_exit>

00004f34 <__divmodhi4_neg1>:
    4f34:	90 95       	com	r25
    4f36:	81 95       	neg	r24
    4f38:	9f 4f       	sbci	r25, 0xFF	; 255
    4f3a:	08 95       	ret

00004f3c <__divmodhi4_neg2>:
    4f3c:	70 95       	com	r23
    4f3e:	61 95       	neg	r22
    4f40:	7f 4f       	sbci	r23, 0xFF	; 255

00004f42 <__divmodhi4_exit>:
    4f42:	08 95       	ret

00004f44 <__udivmodsi4>:
    4f44:	a1 e2       	ldi	r26, 0x21	; 33
    4f46:	1a 2e       	mov	r1, r26
    4f48:	aa 1b       	sub	r26, r26
    4f4a:	bb 1b       	sub	r27, r27
    4f4c:	fd 01       	movw	r30, r26
    4f4e:	0d c0       	rjmp	.+26     	; 0x4f6a <__udivmodsi4_ep>

00004f50 <__udivmodsi4_loop>:
    4f50:	aa 1f       	adc	r26, r26
    4f52:	bb 1f       	adc	r27, r27
    4f54:	ee 1f       	adc	r30, r30
    4f56:	ff 1f       	adc	r31, r31
    4f58:	a2 17       	cp	r26, r18
    4f5a:	b3 07       	cpc	r27, r19
    4f5c:	e4 07       	cpc	r30, r20
    4f5e:	f5 07       	cpc	r31, r21
    4f60:	20 f0       	brcs	.+8      	; 0x4f6a <__udivmodsi4_ep>
    4f62:	a2 1b       	sub	r26, r18
    4f64:	b3 0b       	sbc	r27, r19
    4f66:	e4 0b       	sbc	r30, r20
    4f68:	f5 0b       	sbc	r31, r21

00004f6a <__udivmodsi4_ep>:
    4f6a:	66 1f       	adc	r22, r22
    4f6c:	77 1f       	adc	r23, r23
    4f6e:	88 1f       	adc	r24, r24
    4f70:	99 1f       	adc	r25, r25
    4f72:	1a 94       	dec	r1
    4f74:	69 f7       	brne	.-38     	; 0x4f50 <__udivmodsi4_loop>
    4f76:	60 95       	com	r22
    4f78:	70 95       	com	r23
    4f7a:	80 95       	com	r24
    4f7c:	90 95       	com	r25
    4f7e:	9b 01       	movw	r18, r22
    4f80:	ac 01       	movw	r20, r24
    4f82:	bd 01       	movw	r22, r26
    4f84:	cf 01       	movw	r24, r30
    4f86:	08 95       	ret

00004f88 <__divmodsi4>:
    4f88:	05 2e       	mov	r0, r21
    4f8a:	97 fb       	bst	r25, 7
    4f8c:	1e f4       	brtc	.+6      	; 0x4f94 <__divmodsi4+0xc>
    4f8e:	00 94       	com	r0
    4f90:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <__negsi2>
    4f94:	57 fd       	sbrc	r21, 7
    4f96:	07 d0       	rcall	.+14     	; 0x4fa6 <__divmodsi4_neg2>
    4f98:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <__udivmodsi4>
    4f9c:	07 fc       	sbrc	r0, 7
    4f9e:	03 d0       	rcall	.+6      	; 0x4fa6 <__divmodsi4_neg2>
    4fa0:	4e f4       	brtc	.+18     	; 0x4fb4 <__divmodsi4_exit>
    4fa2:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__negsi2>

00004fa6 <__divmodsi4_neg2>:
    4fa6:	50 95       	com	r21
    4fa8:	40 95       	com	r20
    4faa:	30 95       	com	r19
    4fac:	21 95       	neg	r18
    4fae:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb0:	4f 4f       	sbci	r20, 0xFF	; 255
    4fb2:	5f 4f       	sbci	r21, 0xFF	; 255

00004fb4 <__divmodsi4_exit>:
    4fb4:	08 95       	ret

00004fb6 <__negsi2>:
    4fb6:	90 95       	com	r25
    4fb8:	80 95       	com	r24
    4fba:	70 95       	com	r23
    4fbc:	61 95       	neg	r22
    4fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4fc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc4:	08 95       	ret

00004fc6 <__tablejump2__>:
    4fc6:	ee 0f       	add	r30, r30
    4fc8:	ff 1f       	adc	r31, r31
    4fca:	05 90       	lpm	r0, Z+
    4fcc:	f4 91       	lpm	r31, Z
    4fce:	e0 2d       	mov	r30, r0
    4fd0:	09 94       	ijmp

00004fd2 <__udivmodhi4>:
    4fd2:	aa 1b       	sub	r26, r26
    4fd4:	bb 1b       	sub	r27, r27
    4fd6:	51 e1       	ldi	r21, 0x11	; 17
    4fd8:	07 c0       	rjmp	.+14     	; 0x4fe8 <__udivmodhi4_ep>

00004fda <__udivmodhi4_loop>:
    4fda:	aa 1f       	adc	r26, r26
    4fdc:	bb 1f       	adc	r27, r27
    4fde:	a6 17       	cp	r26, r22
    4fe0:	b7 07       	cpc	r27, r23
    4fe2:	10 f0       	brcs	.+4      	; 0x4fe8 <__udivmodhi4_ep>
    4fe4:	a6 1b       	sub	r26, r22
    4fe6:	b7 0b       	sbc	r27, r23

00004fe8 <__udivmodhi4_ep>:
    4fe8:	88 1f       	adc	r24, r24
    4fea:	99 1f       	adc	r25, r25
    4fec:	5a 95       	dec	r21
    4fee:	a9 f7       	brne	.-22     	; 0x4fda <__udivmodhi4_loop>
    4ff0:	80 95       	com	r24
    4ff2:	90 95       	com	r25
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	cd 01       	movw	r24, r26
    4ff8:	08 95       	ret

00004ffa <malloc>:
    4ffa:	0f 93       	push	r16
    4ffc:	1f 93       	push	r17
    4ffe:	cf 93       	push	r28
    5000:	df 93       	push	r29
    5002:	82 30       	cpi	r24, 0x02	; 2
    5004:	91 05       	cpc	r25, r1
    5006:	10 f4       	brcc	.+4      	; 0x500c <malloc+0x12>
    5008:	82 e0       	ldi	r24, 0x02	; 2
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <__flp>
    5010:	f0 91 07 08 	lds	r31, 0x0807	; 0x800807 <__flp+0x1>
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	a0 e0       	ldi	r26, 0x00	; 0
    501a:	b0 e0       	ldi	r27, 0x00	; 0
    501c:	30 97       	sbiw	r30, 0x00	; 0
    501e:	19 f1       	breq	.+70     	; 0x5066 <malloc+0x6c>
    5020:	40 81       	ld	r20, Z
    5022:	51 81       	ldd	r21, Z+1	; 0x01
    5024:	02 81       	ldd	r16, Z+2	; 0x02
    5026:	13 81       	ldd	r17, Z+3	; 0x03
    5028:	48 17       	cp	r20, r24
    502a:	59 07       	cpc	r21, r25
    502c:	c8 f0       	brcs	.+50     	; 0x5060 <malloc+0x66>
    502e:	84 17       	cp	r24, r20
    5030:	95 07       	cpc	r25, r21
    5032:	69 f4       	brne	.+26     	; 0x504e <malloc+0x54>
    5034:	10 97       	sbiw	r26, 0x00	; 0
    5036:	31 f0       	breq	.+12     	; 0x5044 <malloc+0x4a>
    5038:	12 96       	adiw	r26, 0x02	; 2
    503a:	0c 93       	st	X, r16
    503c:	12 97       	sbiw	r26, 0x02	; 2
    503e:	13 96       	adiw	r26, 0x03	; 3
    5040:	1c 93       	st	X, r17
    5042:	27 c0       	rjmp	.+78     	; 0x5092 <malloc+0x98>
    5044:	00 93 06 08 	sts	0x0806, r16	; 0x800806 <__flp>
    5048:	10 93 07 08 	sts	0x0807, r17	; 0x800807 <__flp+0x1>
    504c:	22 c0       	rjmp	.+68     	; 0x5092 <malloc+0x98>
    504e:	21 15       	cp	r18, r1
    5050:	31 05       	cpc	r19, r1
    5052:	19 f0       	breq	.+6      	; 0x505a <malloc+0x60>
    5054:	42 17       	cp	r20, r18
    5056:	53 07       	cpc	r21, r19
    5058:	18 f4       	brcc	.+6      	; 0x5060 <malloc+0x66>
    505a:	9a 01       	movw	r18, r20
    505c:	bd 01       	movw	r22, r26
    505e:	ef 01       	movw	r28, r30
    5060:	df 01       	movw	r26, r30
    5062:	f8 01       	movw	r30, r16
    5064:	db cf       	rjmp	.-74     	; 0x501c <malloc+0x22>
    5066:	21 15       	cp	r18, r1
    5068:	31 05       	cpc	r19, r1
    506a:	f9 f0       	breq	.+62     	; 0x50aa <malloc+0xb0>
    506c:	28 1b       	sub	r18, r24
    506e:	39 0b       	sbc	r19, r25
    5070:	24 30       	cpi	r18, 0x04	; 4
    5072:	31 05       	cpc	r19, r1
    5074:	80 f4       	brcc	.+32     	; 0x5096 <malloc+0x9c>
    5076:	8a 81       	ldd	r24, Y+2	; 0x02
    5078:	9b 81       	ldd	r25, Y+3	; 0x03
    507a:	61 15       	cp	r22, r1
    507c:	71 05       	cpc	r23, r1
    507e:	21 f0       	breq	.+8      	; 0x5088 <malloc+0x8e>
    5080:	fb 01       	movw	r30, r22
    5082:	93 83       	std	Z+3, r25	; 0x03
    5084:	82 83       	std	Z+2, r24	; 0x02
    5086:	04 c0       	rjmp	.+8      	; 0x5090 <malloc+0x96>
    5088:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <__flp+0x1>
    508c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__flp>
    5090:	fe 01       	movw	r30, r28
    5092:	32 96       	adiw	r30, 0x02	; 2
    5094:	44 c0       	rjmp	.+136    	; 0x511e <malloc+0x124>
    5096:	fe 01       	movw	r30, r28
    5098:	e2 0f       	add	r30, r18
    509a:	f3 1f       	adc	r31, r19
    509c:	81 93       	st	Z+, r24
    509e:	91 93       	st	Z+, r25
    50a0:	22 50       	subi	r18, 0x02	; 2
    50a2:	31 09       	sbc	r19, r1
    50a4:	39 83       	std	Y+1, r19	; 0x01
    50a6:	28 83       	st	Y, r18
    50a8:	3a c0       	rjmp	.+116    	; 0x511e <malloc+0x124>
    50aa:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__brkval>
    50ae:	30 91 05 08 	lds	r19, 0x0805	; 0x800805 <__brkval+0x1>
    50b2:	23 2b       	or	r18, r19
    50b4:	41 f4       	brne	.+16     	; 0x50c6 <malloc+0xcc>
    50b6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    50ba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    50be:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__brkval+0x1>
    50c2:	20 93 04 08 	sts	0x0804, r18	; 0x800804 <__brkval>
    50c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    50ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    50ce:	21 15       	cp	r18, r1
    50d0:	31 05       	cpc	r19, r1
    50d2:	41 f4       	brne	.+16     	; 0x50e4 <malloc+0xea>
    50d4:	2d b7       	in	r18, 0x3d	; 61
    50d6:	3e b7       	in	r19, 0x3e	; 62
    50d8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    50dc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    50e0:	24 1b       	sub	r18, r20
    50e2:	35 0b       	sbc	r19, r21
    50e4:	e0 91 04 08 	lds	r30, 0x0804	; 0x800804 <__brkval>
    50e8:	f0 91 05 08 	lds	r31, 0x0805	; 0x800805 <__brkval+0x1>
    50ec:	e2 17       	cp	r30, r18
    50ee:	f3 07       	cpc	r31, r19
    50f0:	a0 f4       	brcc	.+40     	; 0x511a <malloc+0x120>
    50f2:	2e 1b       	sub	r18, r30
    50f4:	3f 0b       	sbc	r19, r31
    50f6:	28 17       	cp	r18, r24
    50f8:	39 07       	cpc	r19, r25
    50fa:	78 f0       	brcs	.+30     	; 0x511a <malloc+0x120>
    50fc:	ac 01       	movw	r20, r24
    50fe:	4e 5f       	subi	r20, 0xFE	; 254
    5100:	5f 4f       	sbci	r21, 0xFF	; 255
    5102:	24 17       	cp	r18, r20
    5104:	35 07       	cpc	r19, r21
    5106:	48 f0       	brcs	.+18     	; 0x511a <malloc+0x120>
    5108:	4e 0f       	add	r20, r30
    510a:	5f 1f       	adc	r21, r31
    510c:	50 93 05 08 	sts	0x0805, r21	; 0x800805 <__brkval+0x1>
    5110:	40 93 04 08 	sts	0x0804, r20	; 0x800804 <__brkval>
    5114:	81 93       	st	Z+, r24
    5116:	91 93       	st	Z+, r25
    5118:	02 c0       	rjmp	.+4      	; 0x511e <malloc+0x124>
    511a:	e0 e0       	ldi	r30, 0x00	; 0
    511c:	f0 e0       	ldi	r31, 0x00	; 0
    511e:	cf 01       	movw	r24, r30
    5120:	df 91       	pop	r29
    5122:	cf 91       	pop	r28
    5124:	1f 91       	pop	r17
    5126:	0f 91       	pop	r16
    5128:	08 95       	ret

0000512a <free>:
    512a:	cf 93       	push	r28
    512c:	df 93       	push	r29
    512e:	00 97       	sbiw	r24, 0x00	; 0
    5130:	09 f4       	brne	.+2      	; 0x5134 <free+0xa>
    5132:	81 c0       	rjmp	.+258    	; 0x5236 <free+0x10c>
    5134:	fc 01       	movw	r30, r24
    5136:	32 97       	sbiw	r30, 0x02	; 2
    5138:	13 82       	std	Z+3, r1	; 0x03
    513a:	12 82       	std	Z+2, r1	; 0x02
    513c:	a0 91 06 08 	lds	r26, 0x0806	; 0x800806 <__flp>
    5140:	b0 91 07 08 	lds	r27, 0x0807	; 0x800807 <__flp+0x1>
    5144:	10 97       	sbiw	r26, 0x00	; 0
    5146:	81 f4       	brne	.+32     	; 0x5168 <free+0x3e>
    5148:	20 81       	ld	r18, Z
    514a:	31 81       	ldd	r19, Z+1	; 0x01
    514c:	82 0f       	add	r24, r18
    514e:	93 1f       	adc	r25, r19
    5150:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__brkval>
    5154:	30 91 05 08 	lds	r19, 0x0805	; 0x800805 <__brkval+0x1>
    5158:	28 17       	cp	r18, r24
    515a:	39 07       	cpc	r19, r25
    515c:	51 f5       	brne	.+84     	; 0x51b2 <free+0x88>
    515e:	f0 93 05 08 	sts	0x0805, r31	; 0x800805 <__brkval+0x1>
    5162:	e0 93 04 08 	sts	0x0804, r30	; 0x800804 <__brkval>
    5166:	67 c0       	rjmp	.+206    	; 0x5236 <free+0x10c>
    5168:	ed 01       	movw	r28, r26
    516a:	20 e0       	ldi	r18, 0x00	; 0
    516c:	30 e0       	ldi	r19, 0x00	; 0
    516e:	ce 17       	cp	r28, r30
    5170:	df 07       	cpc	r29, r31
    5172:	40 f4       	brcc	.+16     	; 0x5184 <free+0x5a>
    5174:	4a 81       	ldd	r20, Y+2	; 0x02
    5176:	5b 81       	ldd	r21, Y+3	; 0x03
    5178:	9e 01       	movw	r18, r28
    517a:	41 15       	cp	r20, r1
    517c:	51 05       	cpc	r21, r1
    517e:	f1 f0       	breq	.+60     	; 0x51bc <free+0x92>
    5180:	ea 01       	movw	r28, r20
    5182:	f5 cf       	rjmp	.-22     	; 0x516e <free+0x44>
    5184:	d3 83       	std	Z+3, r29	; 0x03
    5186:	c2 83       	std	Z+2, r28	; 0x02
    5188:	40 81       	ld	r20, Z
    518a:	51 81       	ldd	r21, Z+1	; 0x01
    518c:	84 0f       	add	r24, r20
    518e:	95 1f       	adc	r25, r21
    5190:	c8 17       	cp	r28, r24
    5192:	d9 07       	cpc	r29, r25
    5194:	59 f4       	brne	.+22     	; 0x51ac <free+0x82>
    5196:	88 81       	ld	r24, Y
    5198:	99 81       	ldd	r25, Y+1	; 0x01
    519a:	84 0f       	add	r24, r20
    519c:	95 1f       	adc	r25, r21
    519e:	02 96       	adiw	r24, 0x02	; 2
    51a0:	91 83       	std	Z+1, r25	; 0x01
    51a2:	80 83       	st	Z, r24
    51a4:	8a 81       	ldd	r24, Y+2	; 0x02
    51a6:	9b 81       	ldd	r25, Y+3	; 0x03
    51a8:	93 83       	std	Z+3, r25	; 0x03
    51aa:	82 83       	std	Z+2, r24	; 0x02
    51ac:	21 15       	cp	r18, r1
    51ae:	31 05       	cpc	r19, r1
    51b0:	29 f4       	brne	.+10     	; 0x51bc <free+0x92>
    51b2:	f0 93 07 08 	sts	0x0807, r31	; 0x800807 <__flp+0x1>
    51b6:	e0 93 06 08 	sts	0x0806, r30	; 0x800806 <__flp>
    51ba:	3d c0       	rjmp	.+122    	; 0x5236 <free+0x10c>
    51bc:	e9 01       	movw	r28, r18
    51be:	fb 83       	std	Y+3, r31	; 0x03
    51c0:	ea 83       	std	Y+2, r30	; 0x02
    51c2:	49 91       	ld	r20, Y+
    51c4:	59 91       	ld	r21, Y+
    51c6:	c4 0f       	add	r28, r20
    51c8:	d5 1f       	adc	r29, r21
    51ca:	ec 17       	cp	r30, r28
    51cc:	fd 07       	cpc	r31, r29
    51ce:	61 f4       	brne	.+24     	; 0x51e8 <free+0xbe>
    51d0:	80 81       	ld	r24, Z
    51d2:	91 81       	ldd	r25, Z+1	; 0x01
    51d4:	84 0f       	add	r24, r20
    51d6:	95 1f       	adc	r25, r21
    51d8:	02 96       	adiw	r24, 0x02	; 2
    51da:	e9 01       	movw	r28, r18
    51dc:	99 83       	std	Y+1, r25	; 0x01
    51de:	88 83       	st	Y, r24
    51e0:	82 81       	ldd	r24, Z+2	; 0x02
    51e2:	93 81       	ldd	r25, Z+3	; 0x03
    51e4:	9b 83       	std	Y+3, r25	; 0x03
    51e6:	8a 83       	std	Y+2, r24	; 0x02
    51e8:	e0 e0       	ldi	r30, 0x00	; 0
    51ea:	f0 e0       	ldi	r31, 0x00	; 0
    51ec:	12 96       	adiw	r26, 0x02	; 2
    51ee:	8d 91       	ld	r24, X+
    51f0:	9c 91       	ld	r25, X
    51f2:	13 97       	sbiw	r26, 0x03	; 3
    51f4:	00 97       	sbiw	r24, 0x00	; 0
    51f6:	19 f0       	breq	.+6      	; 0x51fe <free+0xd4>
    51f8:	fd 01       	movw	r30, r26
    51fa:	dc 01       	movw	r26, r24
    51fc:	f7 cf       	rjmp	.-18     	; 0x51ec <free+0xc2>
    51fe:	8d 91       	ld	r24, X+
    5200:	9c 91       	ld	r25, X
    5202:	11 97       	sbiw	r26, 0x01	; 1
    5204:	9d 01       	movw	r18, r26
    5206:	2e 5f       	subi	r18, 0xFE	; 254
    5208:	3f 4f       	sbci	r19, 0xFF	; 255
    520a:	82 0f       	add	r24, r18
    520c:	93 1f       	adc	r25, r19
    520e:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__brkval>
    5212:	30 91 05 08 	lds	r19, 0x0805	; 0x800805 <__brkval+0x1>
    5216:	28 17       	cp	r18, r24
    5218:	39 07       	cpc	r19, r25
    521a:	69 f4       	brne	.+26     	; 0x5236 <free+0x10c>
    521c:	30 97       	sbiw	r30, 0x00	; 0
    521e:	29 f4       	brne	.+10     	; 0x522a <free+0x100>
    5220:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <__flp+0x1>
    5224:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__flp>
    5228:	02 c0       	rjmp	.+4      	; 0x522e <free+0x104>
    522a:	13 82       	std	Z+3, r1	; 0x03
    522c:	12 82       	std	Z+2, r1	; 0x02
    522e:	b0 93 05 08 	sts	0x0805, r27	; 0x800805 <__brkval+0x1>
    5232:	a0 93 04 08 	sts	0x0804, r26	; 0x800804 <__brkval>
    5236:	df 91       	pop	r29
    5238:	cf 91       	pop	r28
    523a:	08 95       	ret

0000523c <abort>:
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	f8 94       	cli
    5242:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__do_global_dtors>

00005246 <atoi>:
    5246:	fc 01       	movw	r30, r24
    5248:	88 27       	eor	r24, r24
    524a:	99 27       	eor	r25, r25
    524c:	e8 94       	clt
    524e:	21 91       	ld	r18, Z+
    5250:	20 32       	cpi	r18, 0x20	; 32
    5252:	e9 f3       	breq	.-6      	; 0x524e <atoi+0x8>
    5254:	29 30       	cpi	r18, 0x09	; 9
    5256:	10 f0       	brcs	.+4      	; 0x525c <atoi+0x16>
    5258:	2e 30       	cpi	r18, 0x0E	; 14
    525a:	c8 f3       	brcs	.-14     	; 0x524e <atoi+0x8>
    525c:	2b 32       	cpi	r18, 0x2B	; 43
    525e:	41 f0       	breq	.+16     	; 0x5270 <atoi+0x2a>
    5260:	2d 32       	cpi	r18, 0x2D	; 45
    5262:	39 f4       	brne	.+14     	; 0x5272 <atoi+0x2c>
    5264:	68 94       	set
    5266:	04 c0       	rjmp	.+8      	; 0x5270 <atoi+0x2a>
    5268:	0e 94 b3 29 	call	0x5366	; 0x5366 <__mulhi_const_10>
    526c:	82 0f       	add	r24, r18
    526e:	91 1d       	adc	r25, r1
    5270:	21 91       	ld	r18, Z+
    5272:	20 53       	subi	r18, 0x30	; 48
    5274:	2a 30       	cpi	r18, 0x0A	; 10
    5276:	c0 f3       	brcs	.-16     	; 0x5268 <atoi+0x22>
    5278:	1e f4       	brtc	.+6      	; 0x5280 <atoi+0x3a>
    527a:	90 95       	com	r25
    527c:	81 95       	neg	r24
    527e:	9f 4f       	sbci	r25, 0xFF	; 255
    5280:	08 95       	ret

00005282 <strcmp_P>:
    5282:	fb 01       	movw	r30, r22
    5284:	dc 01       	movw	r26, r24
    5286:	8d 91       	ld	r24, X+
    5288:	05 90       	lpm	r0, Z+
    528a:	80 19       	sub	r24, r0
    528c:	01 10       	cpse	r0, r1
    528e:	d9 f3       	breq	.-10     	; 0x5286 <strcmp_P+0x4>
    5290:	99 0b       	sbc	r25, r25
    5292:	08 95       	ret

00005294 <__strlen_P>:
    5294:	fc 01       	movw	r30, r24
    5296:	05 90       	lpm	r0, Z+
    5298:	00 20       	and	r0, r0
    529a:	e9 f7       	brne	.-6      	; 0x5296 <__strlen_P+0x2>
    529c:	80 95       	com	r24
    529e:	90 95       	com	r25
    52a0:	8e 0f       	add	r24, r30
    52a2:	9f 1f       	adc	r25, r31
    52a4:	08 95       	ret

000052a6 <strstr_P>:
    52a6:	fb 01       	movw	r30, r22
    52a8:	55 91       	lpm	r21, Z+
    52aa:	55 23       	and	r21, r21
    52ac:	a9 f0       	breq	.+42     	; 0x52d8 <strstr_P+0x32>
    52ae:	bf 01       	movw	r22, r30
    52b0:	dc 01       	movw	r26, r24
    52b2:	4d 91       	ld	r20, X+
    52b4:	45 17       	cp	r20, r21
    52b6:	41 11       	cpse	r20, r1
    52b8:	e1 f7       	brne	.-8      	; 0x52b2 <strstr_P+0xc>
    52ba:	59 f4       	brne	.+22     	; 0x52d2 <strstr_P+0x2c>
    52bc:	cd 01       	movw	r24, r26
    52be:	05 90       	lpm	r0, Z+
    52c0:	00 20       	and	r0, r0
    52c2:	49 f0       	breq	.+18     	; 0x52d6 <strstr_P+0x30>
    52c4:	4d 91       	ld	r20, X+
    52c6:	40 15       	cp	r20, r0
    52c8:	41 11       	cpse	r20, r1
    52ca:	c9 f3       	breq	.-14     	; 0x52be <strstr_P+0x18>
    52cc:	fb 01       	movw	r30, r22
    52ce:	41 11       	cpse	r20, r1
    52d0:	ef cf       	rjmp	.-34     	; 0x52b0 <strstr_P+0xa>
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	01 97       	sbiw	r24, 0x01	; 1
    52d8:	08 95       	ret

000052da <strchr>:
    52da:	fc 01       	movw	r30, r24
    52dc:	81 91       	ld	r24, Z+
    52de:	86 17       	cp	r24, r22
    52e0:	21 f0       	breq	.+8      	; 0x52ea <strchr+0x10>
    52e2:	88 23       	and	r24, r24
    52e4:	d9 f7       	brne	.-10     	; 0x52dc <strchr+0x2>
    52e6:	99 27       	eor	r25, r25
    52e8:	08 95       	ret
    52ea:	31 97       	sbiw	r30, 0x01	; 1
    52ec:	cf 01       	movw	r24, r30
    52ee:	08 95       	ret

000052f0 <strcmp>:
    52f0:	fb 01       	movw	r30, r22
    52f2:	dc 01       	movw	r26, r24
    52f4:	8d 91       	ld	r24, X+
    52f6:	01 90       	ld	r0, Z+
    52f8:	80 19       	sub	r24, r0
    52fa:	01 10       	cpse	r0, r1
    52fc:	d9 f3       	breq	.-10     	; 0x52f4 <strcmp+0x4>
    52fe:	99 0b       	sbc	r25, r25
    5300:	08 95       	ret

00005302 <strlen>:
    5302:	fc 01       	movw	r30, r24
    5304:	01 90       	ld	r0, Z+
    5306:	00 20       	and	r0, r0
    5308:	e9 f7       	brne	.-6      	; 0x5304 <strlen+0x2>
    530a:	80 95       	com	r24
    530c:	90 95       	com	r25
    530e:	8e 0f       	add	r24, r30
    5310:	9f 1f       	adc	r25, r31
    5312:	08 95       	ret

00005314 <strncpy>:
    5314:	fb 01       	movw	r30, r22
    5316:	dc 01       	movw	r26, r24
    5318:	41 50       	subi	r20, 0x01	; 1
    531a:	50 40       	sbci	r21, 0x00	; 0
    531c:	48 f0       	brcs	.+18     	; 0x5330 <strncpy+0x1c>
    531e:	01 90       	ld	r0, Z+
    5320:	0d 92       	st	X+, r0
    5322:	00 20       	and	r0, r0
    5324:	c9 f7       	brne	.-14     	; 0x5318 <strncpy+0x4>
    5326:	01 c0       	rjmp	.+2      	; 0x532a <strncpy+0x16>
    5328:	1d 92       	st	X+, r1
    532a:	41 50       	subi	r20, 0x01	; 1
    532c:	50 40       	sbci	r21, 0x00	; 0
    532e:	e0 f7       	brcc	.-8      	; 0x5328 <strncpy+0x14>
    5330:	08 95       	ret

00005332 <strstr>:
    5332:	fb 01       	movw	r30, r22
    5334:	51 91       	ld	r21, Z+
    5336:	55 23       	and	r21, r21
    5338:	a9 f0       	breq	.+42     	; 0x5364 <strstr+0x32>
    533a:	bf 01       	movw	r22, r30
    533c:	dc 01       	movw	r26, r24
    533e:	4d 91       	ld	r20, X+
    5340:	45 17       	cp	r20, r21
    5342:	41 11       	cpse	r20, r1
    5344:	e1 f7       	brne	.-8      	; 0x533e <strstr+0xc>
    5346:	59 f4       	brne	.+22     	; 0x535e <strstr+0x2c>
    5348:	cd 01       	movw	r24, r26
    534a:	01 90       	ld	r0, Z+
    534c:	00 20       	and	r0, r0
    534e:	49 f0       	breq	.+18     	; 0x5362 <strstr+0x30>
    5350:	4d 91       	ld	r20, X+
    5352:	40 15       	cp	r20, r0
    5354:	41 11       	cpse	r20, r1
    5356:	c9 f3       	breq	.-14     	; 0x534a <strstr+0x18>
    5358:	fb 01       	movw	r30, r22
    535a:	41 11       	cpse	r20, r1
    535c:	ef cf       	rjmp	.-34     	; 0x533c <strstr+0xa>
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	08 95       	ret

00005366 <__mulhi_const_10>:
    5366:	7a e0       	ldi	r23, 0x0A	; 10
    5368:	97 9f       	mul	r25, r23
    536a:	90 2d       	mov	r25, r0
    536c:	87 9f       	mul	r24, r23
    536e:	80 2d       	mov	r24, r0
    5370:	91 0d       	add	r25, r1
    5372:	11 24       	eor	r1, r1
    5374:	08 95       	ret

00005376 <__do_global_dtors>:
    5376:	13 e0       	ldi	r17, 0x03	; 3
    5378:	cf ea       	ldi	r28, 0xAF	; 175
    537a:	d3 e0       	ldi	r29, 0x03	; 3
    537c:	04 c0       	rjmp	.+8      	; 0x5386 <__do_global_dtors+0x10>
    537e:	fe 01       	movw	r30, r28
    5380:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__tablejump2__>
    5384:	21 96       	adiw	r28, 0x01	; 1
    5386:	c0 3b       	cpi	r28, 0xB0	; 176
    5388:	d1 07       	cpc	r29, r17
    538a:	c9 f7       	brne	.-14     	; 0x537e <__do_global_dtors+0x8>
    538c:	f8 94       	cli

0000538e <__stop_program>:
    538e:	ff cf       	rjmp	.-2      	; 0x538e <__stop_program>
