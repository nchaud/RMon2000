
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000334  00800100  00007abe  00007b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041f  00800434  00800434  00007e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00007e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af8  00000000  00000000  00007ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00023342  00000000  00000000  000089f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000420e  00000000  00000000  0002bd32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000095b0  00000000  00000000  0002ff40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003a5c  00000000  00000000  000394f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000127ce  00000000  00000000  0003cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013877  00000000  00000000  0004f71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  00062f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005287  00000000  00000000  00063999  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 03 	jmp	0x748	; 0x748 <__dtors_end>
       4:	0c 94 12 39 	jmp	0x7224	; 0x7224 <__vector_1>
       8:	0c 94 39 39 	jmp	0x7272	; 0x7272 <__vector_2>
       c:	0c 94 8b 37 	jmp	0x6f16	; 0x6f16 <__vector_3>
      10:	0c 94 8b 37 	jmp	0x6f16	; 0x6f16 <__vector_3>
      14:	0c 94 8b 37 	jmp	0x6f16	; 0x6f16 <__vector_3>
      18:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      20:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      24:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      28:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      2c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      30:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      34:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      38:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      3c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      40:	0c 94 b4 2a 	jmp	0x5568	; 0x5568 <__vector_16>
      44:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      48:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <__vector_18>
      4c:	0c 94 a2 27 	jmp	0x4f44	; 0x4f44 <__vector_19>
      50:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      54:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      58:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      5c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      60:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__vector_24>
      64:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      68:	04 20       	and	r0, r4
      6a:	0a 20       	and	r0, r10
      6c:	0a 20       	and	r0, r10
      6e:	0a 20       	and	r0, r10
      70:	0a 20       	and	r0, r10
      72:	0a 20       	and	r0, r10
      74:	0a 20       	and	r0, r10
      76:	0a 20       	and	r0, r10
      78:	f8 1e       	adc	r15, r24
      7a:	0a 20       	and	r0, r10
      7c:	0a 20       	and	r0, r10
      7e:	0a 20       	and	r0, r10
      80:	0a 20       	and	r0, r10
      82:	0a 20       	and	r0, r10
      84:	0a 20       	and	r0, r10
      86:	0a 20       	and	r0, r10
      88:	f8 1e       	adc	r15, r24
      8a:	0a 20       	and	r0, r10
      8c:	0a 20       	and	r0, r10
      8e:	0a 20       	and	r0, r10
      90:	0a 20       	and	r0, r10
      92:	0a 20       	and	r0, r10
      94:	0a 20       	and	r0, r10
      96:	0a 20       	and	r0, r10
      98:	02 1f       	adc	r16, r18
      9a:	0a 20       	and	r0, r10
      9c:	0a 20       	and	r0, r10
      9e:	0a 20       	and	r0, r10
      a0:	0a 20       	and	r0, r10
      a2:	0a 20       	and	r0, r10
      a4:	0a 20       	and	r0, r10
      a6:	0a 20       	and	r0, r10
      a8:	2e 1f       	adc	r18, r30
      aa:	0a 20       	and	r0, r10
      ac:	0a 20       	and	r0, r10
      ae:	0a 20       	and	r0, r10
      b0:	0a 20       	and	r0, r10
      b2:	0a 20       	and	r0, r10
      b4:	0a 20       	and	r0, r10
      b6:	0a 20       	and	r0, r10
      b8:	02 1f       	adc	r16, r18
      ba:	0a 20       	and	r0, r10
      bc:	0a 20       	and	r0, r10
      be:	0a 20       	and	r0, r10
      c0:	0a 20       	and	r0, r10
      c2:	0a 20       	and	r0, r10
      c4:	0a 20       	and	r0, r10
      c6:	0a 20       	and	r0, r10
      c8:	34 1f       	adc	r19, r20
      ca:	0a 20       	and	r0, r10
      cc:	0a 20       	and	r0, r10
      ce:	0a 20       	and	r0, r10
      d0:	0a 20       	and	r0, r10
      d2:	0a 20       	and	r0, r10
      d4:	0a 20       	and	r0, r10
      d6:	0a 20       	and	r0, r10
      d8:	3a 1f       	adc	r19, r26
      da:	0a 20       	and	r0, r10
      dc:	0a 20       	and	r0, r10
      de:	0a 20       	and	r0, r10
      e0:	0a 20       	and	r0, r10
      e2:	0a 20       	and	r0, r10
      e4:	0a 20       	and	r0, r10
      e6:	0a 20       	and	r0, r10
      e8:	50 1f       	adc	r21, r16
      ea:	0a 20       	and	r0, r10
      ec:	0a 20       	and	r0, r10
      ee:	0a 20       	and	r0, r10
      f0:	0a 20       	and	r0, r10
      f2:	0a 20       	and	r0, r10
      f4:	0a 20       	and	r0, r10
      f6:	0a 20       	and	r0, r10
      f8:	80 1f       	adc	r24, r16
      fa:	0a 20       	and	r0, r10
      fc:	0a 20       	and	r0, r10
      fe:	0a 20       	and	r0, r10
     100:	0a 20       	and	r0, r10
     102:	0a 20       	and	r0, r10
     104:	0a 20       	and	r0, r10
     106:	0a 20       	and	r0, r10
     108:	40 1f       	adc	r20, r16
     10a:	0a 20       	and	r0, r10
     10c:	0a 20       	and	r0, r10
     10e:	0a 20       	and	r0, r10
     110:	0a 20       	and	r0, r10
     112:	0a 20       	and	r0, r10
     114:	0a 20       	and	r0, r10
     116:	0a 20       	and	r0, r10
     118:	5e 1f       	adc	r21, r30
     11a:	0a 20       	and	r0, r10
     11c:	0a 20       	and	r0, r10
     11e:	0a 20       	and	r0, r10
     120:	0a 20       	and	r0, r10
     122:	0a 20       	and	r0, r10
     124:	0a 20       	and	r0, r10
     126:	0a 20       	and	r0, r10
     128:	83 1f       	adc	r24, r19
     12a:	0a 20       	and	r0, r10
     12c:	0a 20       	and	r0, r10
     12e:	0a 20       	and	r0, r10
     130:	0a 20       	and	r0, r10
     132:	0a 20       	and	r0, r10
     134:	0a 20       	and	r0, r10
     136:	0a 20       	and	r0, r10
     138:	83 1f       	adc	r24, r19
     13a:	0a 20       	and	r0, r10
     13c:	0a 20       	and	r0, r10
     13e:	0a 20       	and	r0, r10
     140:	0a 20       	and	r0, r10
     142:	0a 20       	and	r0, r10
     144:	0a 20       	and	r0, r10
     146:	0a 20       	and	r0, r10
     148:	83 1f       	adc	r24, r19
     14a:	0a 20       	and	r0, r10
     14c:	0a 20       	and	r0, r10
     14e:	0a 20       	and	r0, r10
     150:	0a 20       	and	r0, r10
     152:	0a 20       	and	r0, r10
     154:	0a 20       	and	r0, r10
     156:	0a 20       	and	r0, r10
     158:	83 1f       	adc	r24, r19
     15a:	0a 20       	and	r0, r10
     15c:	0a 20       	and	r0, r10
     15e:	0a 20       	and	r0, r10
     160:	0a 20       	and	r0, r10
     162:	0a 20       	and	r0, r10
     164:	0a 20       	and	r0, r10
     166:	0a 20       	and	r0, r10
     168:	8c 1f       	adc	r24, r28
     16a:	0a 20       	and	r0, r10
     16c:	0a 20       	and	r0, r10
     16e:	0a 20       	and	r0, r10
     170:	0a 20       	and	r0, r10
     172:	0a 20       	and	r0, r10
     174:	0a 20       	and	r0, r10
     176:	0a 20       	and	r0, r10
     178:	c6 1f       	adc	r28, r22
     17a:	0a 20       	and	r0, r10
     17c:	0a 20       	and	r0, r10
     17e:	0a 20       	and	r0, r10
     180:	0a 20       	and	r0, r10
     182:	0a 20       	and	r0, r10
     184:	0a 20       	and	r0, r10
     186:	0a 20       	and	r0, r10
     188:	8c 1f       	adc	r24, r28
     18a:	0a 20       	and	r0, r10
     18c:	0a 20       	and	r0, r10
     18e:	0a 20       	and	r0, r10
     190:	0a 20       	and	r0, r10
     192:	0a 20       	and	r0, r10
     194:	0a 20       	and	r0, r10
     196:	0a 20       	and	r0, r10
     198:	c6 1f       	adc	r28, r22
     19a:	0a 20       	and	r0, r10
     19c:	0a 20       	and	r0, r10
     19e:	0a 20       	and	r0, r10
     1a0:	0a 20       	and	r0, r10
     1a2:	0a 20       	and	r0, r10
     1a4:	0a 20       	and	r0, r10
     1a6:	0a 20       	and	r0, r10
     1a8:	a8 1f       	adc	r26, r24
     1aa:	0a 20       	and	r0, r10
     1ac:	0a 20       	and	r0, r10
     1ae:	0a 20       	and	r0, r10
     1b0:	0a 20       	and	r0, r10
     1b2:	0a 20       	and	r0, r10
     1b4:	0a 20       	and	r0, r10
     1b6:	0a 20       	and	r0, r10
     1b8:	ca 1f       	adc	r28, r26
     1ba:	0a 20       	and	r0, r10
     1bc:	0a 20       	and	r0, r10
     1be:	0a 20       	and	r0, r10
     1c0:	0a 20       	and	r0, r10
     1c2:	0a 20       	and	r0, r10
     1c4:	0a 20       	and	r0, r10
     1c6:	0a 20       	and	r0, r10
     1c8:	ca 1f       	adc	r28, r26
     1ca:	0a 20       	and	r0, r10
     1cc:	0a 20       	and	r0, r10
     1ce:	0a 20       	and	r0, r10
     1d0:	0a 20       	and	r0, r10
     1d2:	0a 20       	and	r0, r10
     1d4:	0a 20       	and	r0, r10
     1d6:	0a 20       	and	r0, r10
     1d8:	e0 1f       	adc	r30, r16
     1da:	0a 20       	and	r0, r10
     1dc:	0a 20       	and	r0, r10
     1de:	0a 20       	and	r0, r10
     1e0:	0a 20       	and	r0, r10
     1e2:	0a 20       	and	r0, r10
     1e4:	0a 20       	and	r0, r10
     1e6:	0a 20       	and	r0, r10
     1e8:	fe 1f       	adc	r31, r30
     1ea:	0a 20       	and	r0, r10
     1ec:	0a 20       	and	r0, r10
     1ee:	0a 20       	and	r0, r10
     1f0:	0a 20       	and	r0, r10
     1f2:	0a 20       	and	r0, r10
     1f4:	0a 20       	and	r0, r10
     1f6:	0a 20       	and	r0, r10
     1f8:	fe 1f       	adc	r31, r30
     1fa:	0a 20       	and	r0, r10
     1fc:	0a 20       	and	r0, r10
     1fe:	0a 20       	and	r0, r10
     200:	0a 20       	and	r0, r10
     202:	0a 20       	and	r0, r10
     204:	0a 20       	and	r0, r10
     206:	0a 20       	and	r0, r10
     208:	0a 20       	and	r0, r10
     20a:	0a 20       	and	r0, r10
     20c:	0a 20       	and	r0, r10
     20e:	0a 20       	and	r0, r10
     210:	0a 20       	and	r0, r10
     212:	0a 20       	and	r0, r10
     214:	0a 20       	and	r0, r10
     216:	0a 20       	and	r0, r10
     218:	0a 20       	and	r0, r10
     21a:	0a 20       	and	r0, r10
     21c:	0a 20       	and	r0, r10
     21e:	0a 20       	and	r0, r10
     220:	0a 20       	and	r0, r10
     222:	0a 20       	and	r0, r10
     224:	0a 20       	and	r0, r10
     226:	0a 20       	and	r0, r10
     228:	0a 20       	and	r0, r10
     22a:	0a 20       	and	r0, r10
     22c:	0a 20       	and	r0, r10
     22e:	0a 20       	and	r0, r10
     230:	0a 20       	and	r0, r10
     232:	0a 20       	and	r0, r10
     234:	0a 20       	and	r0, r10
     236:	0a 20       	and	r0, r10
     238:	0a 20       	and	r0, r10
     23a:	0a 20       	and	r0, r10
     23c:	0a 20       	and	r0, r10
     23e:	0a 20       	and	r0, r10
     240:	0a 20       	and	r0, r10
     242:	0a 20       	and	r0, r10
     244:	0a 20       	and	r0, r10
     246:	0a 20       	and	r0, r10
     248:	0a 20       	and	r0, r10
     24a:	0a 20       	and	r0, r10
     24c:	0a 20       	and	r0, r10
     24e:	0a 20       	and	r0, r10
     250:	0a 20       	and	r0, r10
     252:	0a 20       	and	r0, r10
     254:	0a 20       	and	r0, r10
     256:	0a 20       	and	r0, r10
     258:	09 20       	and	r0, r9

0000025a <__trampolines_end>:
     25a:	74 65       	ori	r23, 0x54	; 84
     25c:	78 74       	andi	r23, 0x48	; 72
     25e:	2f 70       	andi	r18, 0x0F	; 15
     260:	6c 61       	ori	r22, 0x1C	; 28
     262:	69 6e       	ori	r22, 0xE9	; 233
	...

00000265 <_ZZN10GsmManager11sendViaGprsEPcE3__c_0>:
     265:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

00000270 <_ZZN10GsmManager11sendViaGprsEPcE3__c_1>:
	...

00000271 <_ZZN10GsmManager11sendViaGprsEPcE3__c_2>:
	...

00000272 <_ZZN10GsmManager11sendViaGprsEPcE3__c>:
     272:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000027d <_ZZ18ensureBatteryLevelvE3__c_0>:
     27d:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 52 65 74     BatteryLevel Ret
     28d:	72 69 65 76 65 64 00                                rieved.

00000294 <_ZZ18ensureBatteryLevelvE3__c>:
     294:	42 61 74 74 65 72 79 4c 65 76 65 6c 20 46 61 69     BatteryLevel Fai
     2a4:	6c 65 64 00                                         led.

000002a8 <_ZZ16readSensorsAsyncvE3__c_3>:
     2a8:	50 56 20 56 6f 6c 74 61 67 65 28 41 63 74 29 3a     PV Voltage(Act):
	...

000002b9 <_ZZ16readSensorsAsyncvE3__c_2>:
     2b9:	50 56 20 56 6f 6c 74 61 67 65 28 52 61 77 29 3a     PV Voltage(Raw):
	...

000002ca <_ZZ16readSensorsAsyncvE3__c_1>:
     2ca:	42 61 74 74 65 72 79 20 56 6f 6c 74 61 67 65 28     Battery Voltage(
     2da:	41 63 74 29 3a 00                                   Act):.

000002e0 <_ZZ16readSensorsAsyncvE3__c_0>:
     2e0:	42 61 74 74 65 72 79 20 56 6f 6c 74 61 67 65 28     Battery Voltage(
     2f0:	52 61 77 29 3a 00                                   Raw):.

000002f6 <_ZZ16readSensorsAsyncvE3__c>:
     2f6:	52 65 61 64 69 6e 67 20 53 65 6e 73 6f 72 73 00     Reading Sensors.

00000306 <_ZZ20execTransmitReadingsP14DailyCycleDataE3__c_1>:
     306:	53 4d 53 20 53 65 6e 64 20 46 61 69 6c 65 64 20     SMS Send Failed 
     316:	21 21 00                                            !!.

00000319 <_ZZ20execTransmitReadingsP14DailyCycleDataE3__c_0>:
     319:	53 65 6e 64 69 6e 67 20 53 65 6e 73 6f 72 73 20     Sending Sensors 
     329:	43 6d 70 74 00                                      Cmpt.

0000032e <_ZZ20execTransmitReadingsP14DailyCycleDataE3__c>:
     32e:	47 50 52 53 20 46 61 69 6c 65 64 2d 54 72 79 69     GPRS Failed-Tryi
     33e:	6e 67 20 53 4d 53 2e 2e 2e 00                       ng SMS....

00000348 <_ZZ9loopCyclevE3__c_2>:
     348:	46 72 65 65 4d 65 6d 6f 72 79 00                    FreeMemory.

00000353 <_ZZ9loopCyclevE3__c_1>:
     353:	49 6e 20 44 61 69 6c 79 20 43 79 63 6c 65 2e 2e     In Daily Cycle..
     363:	2e 00                                               ..

00000365 <_ZZ9loopCyclevE3__c_0>:
     365:	50 65 72 73 69 73 74 69 6e 67 20 73 65 6e 73 6f     Persisting senso
     375:	72 20 64 61 74 61 2e 2e 2e 00                       r data....

0000037f <_ZZ9loopCyclevE3__c>:
     37f:	52 65 61 64 69 6e 67 20 73 65 6e 73 6f 72 73 2e     Reading sensors.
     38f:	2e 2e 00                                            ...

00000392 <_ZZ4loopE3__c>:
     392:	45 4e 44 20 43 59 43 4c 45 00                       END CYCLE.

0000039c <_ZZ5setupE3__c>:
     39c:	52 75 6e 6e 69 6e 67 00                             Running.

000003a4 <digital_pin_to_timer_PGM>:
     3a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3b4:	00 00 00 00                                         ....

000003b8 <digital_pin_to_bit_mask_PGM>:
     3b8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3c8:	04 08 10 20                                         ... 

000003cc <digital_pin_to_port_PGM>:
     3cc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3dc:	03 03 03 03                                         ....

000003e0 <port_to_input_PGM>:
     3e0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003ea <port_to_output_PGM>:
     3ea:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003f4 <port_to_mode_PGM>:
     3f4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003fe <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     3fe:	09 3c 2d 2d 2d 20 00                                .<--- .

00000405 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     405:	09 2d 2d 2d 3e 20 00                                .---> .

0000040c <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     40c:	09 3c 2d 2d 2d 20 00                                .<--- .

00000413 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     413:	09 2d 2d 2d 3e 20 00                                .---> .

0000041a <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     41a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000421 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     421:	09 2d 2d 2d 3e 20 00                                .---> .

00000428 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     428:	09 3c 2d 2d 2d 20 00                                .<--- .

0000042f <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     42f:	09 2d 2d 2d 3e 20 00                                .---> .

00000436 <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     436:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

0000043e <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     43e:	53 50 41 43 45 00                                   SPACE.

00000444 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     444:	09 3c 2d 2d 2d 20 00                                .<--- .

0000044b <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     44b:	52 45 44 49 52 00                                   REDIR.

00000451 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     451:	55 52 4c 00                                         URL.

00000455 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     455:	55 41 00                                            UA.

00000458 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     458:	43 49 44 00                                         CID.

0000045c <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     45c:	4c 65 6e 3a 20 00                                   Len: .

00000462 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     462:	53 74 61 74 75 73 3a 20 00                          Status: .

0000046b <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     46b:	43 4f 4e 54 45 4e 54 00                             CONTENT.

00000473 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     473:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

0000047f <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     47f:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

0000048a <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     48a:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

00000496 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     496:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000004a3 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     4a3:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000004b0 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     4b0:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

000004bf <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     4bf:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

000004c8 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     4c8:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004d5 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     4d5:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

000004e2 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     4e2:	09 2d 2d 2d 3e 20 00                                .---> .

000004e9 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     4e9:	22 2c 00                                            ",.

000004ec <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     4ec:	22 2c 22 00                                         ",".

000004f0 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     4f0:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

000004fe <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     4fe:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000050c <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     50c:	09 2d 2d 2d 3e 20 00                                .---> .

00000513 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     513:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

0000051f <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     51f:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

0000052b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     52b:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000536 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     536:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

00000543 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     543:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000054e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     54e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000556 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     556:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000055f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     55f:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

0000056c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     56c:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     57c:	44 22 2c 00                                         D",.

00000580 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     580:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     590:	45 52 22 2c 00                                      ER",.

00000595 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     595:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000059f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     59f:	09 2d 2d 2d 3e 20 00                                .---> .

000005a6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     5a6:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000005b0 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     5b0:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     5c0:	4e 22 2c 00                                         N",.

000005c4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     5c4:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     5d4:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

000005e2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     5e2:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000005ed <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     5ed:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000005f8 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     5f8:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000600 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     600:	3e 20 00                                            > .

00000603 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     603:	3e 20 00                                            > .

00000606 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     606:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

00000610 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     610:	41 54 2b 43 53 51 00                                AT+CSQ.

00000617 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     617:	2b 43 53 51 3a 20 00                                +CSQ: .

0000061e <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     61e:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000627 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     627:	2b 43 52 45 47 3a 20 00                             +CREG: .

0000062f <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     62f:	41 54 2b 43 42 43 00                                AT+CBC.

00000636 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     636:	2b 43 42 43 3a 20 00                                +CBC: .

0000063d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     63d:	53 49 4d 38 30 30 48 00                             SIM800H.

00000645 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     645:	09 3c 2d 2d 2d 20 00                                .<--- .

0000064c <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     64c:	09 2d 2d 2d 3e 20 00                                .---> .

00000653 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     653:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

00000663 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     663:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

00000673 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     673:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

0000067e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     67e:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000689 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     689:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000694 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     694:	09 3c 2d 2d 2d 20 00                                .<--- .

0000069b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     69b:	09 2d 2d 2d 3e 20 00                                .---> .

000006a2 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     6a2:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

000006ac <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     6ac:	41 54 45 30 00                                      ATE0.

000006b1 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     6b1:	41 54 45 30 00                                      ATE0.

000006b6 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     6b6:	41 54 00                                            AT.

000006b9 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     6b9:	41 54 00                                            AT.

000006bc <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     6bc:	41 54 00                                            AT.

000006bf <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     6bf:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     6cf:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     6df:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     6ef:	2e 00                                               ..

000006f1 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     6f1:	41 54 00                                            AT.

000006f4 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     6f4:	41 54 00                                            AT.

000006f7 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     6f7:	41 54 00                                            AT.

000006fa <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     6fa:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     70a:	61 62 6c 65 00                                      able.

0000070f <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     70f:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     71f:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000730 <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     730:	4f 4b 00                                            OK.

00000733 <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     733:	46 4f 4e 41 00                                      FONA.

00000738 <_ZZN13Adafruit_FONAC4EaE3__c>:
     738:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000740 <__ctors_start>:
     740:	60 1c       	adc	r6, r0
     742:	cb 21       	and	r28, r11
     744:	d2 27       	eor	r29, r18

00000746 <__ctors_end>:
     746:	67 1c       	adc	r6, r7

00000748 <__dtors_end>:
     748:	11 24       	eor	r1, r1
     74a:	1f be       	out	0x3f, r1	; 63
     74c:	cf ef       	ldi	r28, 0xFF	; 255
     74e:	d8 e0       	ldi	r29, 0x08	; 8
     750:	de bf       	out	0x3e, r29	; 62
     752:	cd bf       	out	0x3d, r28	; 61

00000754 <__do_copy_data>:
     754:	14 e0       	ldi	r17, 0x04	; 4
     756:	a0 e0       	ldi	r26, 0x00	; 0
     758:	b1 e0       	ldi	r27, 0x01	; 1
     75a:	ee eb       	ldi	r30, 0xBE	; 190
     75c:	fa e7       	ldi	r31, 0x7A	; 122
     75e:	02 c0       	rjmp	.+4      	; 0x764 <__do_copy_data+0x10>
     760:	05 90       	lpm	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	a4 33       	cpi	r26, 0x34	; 52
     766:	b1 07       	cpc	r27, r17
     768:	d9 f7       	brne	.-10     	; 0x760 <__do_copy_data+0xc>

0000076a <__do_clear_bss>:
     76a:	28 e0       	ldi	r18, 0x08	; 8
     76c:	a4 e3       	ldi	r26, 0x34	; 52
     76e:	b4 e0       	ldi	r27, 0x04	; 4
     770:	01 c0       	rjmp	.+2      	; 0x774 <.do_clear_bss_start>

00000772 <.do_clear_bss_loop>:
     772:	1d 92       	st	X+, r1

00000774 <.do_clear_bss_start>:
     774:	a3 35       	cpi	r26, 0x53	; 83
     776:	b2 07       	cpc	r27, r18
     778:	e1 f7       	brne	.-8      	; 0x772 <.do_clear_bss_loop>

0000077a <__do_global_ctors>:
     77a:	13 e0       	ldi	r17, 0x03	; 3
     77c:	c3 ea       	ldi	r28, 0xA3	; 163
     77e:	d3 e0       	ldi	r29, 0x03	; 3
     780:	04 c0       	rjmp	.+8      	; 0x78a <__do_global_ctors+0x10>
     782:	21 97       	sbiw	r28, 0x01	; 1
     784:	fe 01       	movw	r30, r28
     786:	0e 94 cf 39 	call	0x739e	; 0x739e <__tablejump2__>
     78a:	c0 3a       	cpi	r28, 0xA0	; 160
     78c:	d1 07       	cpc	r29, r17
     78e:	c9 f7       	brne	.-14     	; 0x782 <__do_global_ctors+0x8>
     790:	0e 94 00 28 	call	0x5000	; 0x5000 <main>
     794:	0c 94 52 3d 	jmp	0x7aa4	; 0x7aa4 <__do_global_dtors>

00000798 <__bad_interrupt>:
     798:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000079c <_ZN10GsmManagerC1Eh>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(uint8_t isMock)
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
     7a4:	16 2f       	mov	r17, r22
     7a6:	64 e0       	ldi	r22, 0x04	; 4
     7a8:	05 96       	adiw	r24, 0x05	; 5
     7aa:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <_ZN13Adafruit_FONAC1Ea>
{
	_isMock = isMock;
     7ae:	1c 83       	std	Y+4, r17	; 0x04
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     7b8:	08 95       	ret

000007ba <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     7ba:	fc 01       	movw	r30, r24
     7bc:	11 82       	std	Z+1, r1	; 0x01
     7be:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     7c0:	13 82       	std	Z+3, r1	; 0x03
     7c2:	12 82       	std	Z+2, r1	; 0x02
     7c4:	08 95       	ret

000007c6 <_ZN10GsmManager5beginEv>:
	#endif
}

bool GsmManager::begin(){
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29

	if (_isMock)
     7d2:	fc 01       	movw	r30, r24
     7d4:	24 81       	ldd	r18, Z+4	; 0x04
     7d6:	21 11       	cpse	r18, r1
     7d8:	22 c0       	rjmp	.+68     	; 0x81e <_ZN10GsmManager5beginEv+0x58>
     7da:	ec 01       	movw	r28, r24
		return true;

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     7dc:	8f e1       	ldi	r24, 0x1F	; 31
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 0f 28 	call	0x501e	; 0x501e <_Znwj>
     7e4:	8c 01       	movw	r16, r24
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	42 e0       	ldi	r20, 0x02	; 2
     7ea:	63 e0       	ldi	r22, 0x03	; 3
     7ec:	0e 94 57 38 	call	0x70ae	; 0x70ae <_ZN14SoftwareSerialC1Ehhb>
     7f0:	7e 01       	movw	r14, r28
     7f2:	f1 ee       	ldi	r31, 0xE1	; 225
     7f4:	ef 1a       	sub	r14, r31
     7f6:	fe ef       	ldi	r31, 0xFE	; 254
     7f8:	ff 0a       	sbc	r15, r31
     7fa:	f7 01       	movw	r30, r14
     7fc:	11 83       	std	Z+1, r17	; 0x01
     7fe:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     800:	40 ec       	ldi	r20, 0xC0	; 192
     802:	52 e1       	ldi	r21, 0x12	; 18
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	c8 01       	movw	r24, r16
     80a:	0e 94 82 38 	call	0x7104	; 0x7104 <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     80e:	f7 01       	movw	r30, r14
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	ce 01       	movw	r24, r28
     816:	05 96       	adiw	r24, 0x05	; 5
     818:	0e 94 84 30 	call	0x6108	; 0x6108 <_ZN13Adafruit_FONA5beginER6Stream>
     81c:	01 c0       	rjmp	.+2      	; 0x820 <_ZN10GsmManager5beginEv+0x5a>
}

bool GsmManager::begin(){

	if (_isMock)
		return true;
     81e:	81 e0       	ldi	r24, 0x01	; 1

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
	fonaSerial->begin(4800);
	return fona.begin(*fonaSerial);
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
	
	if (_isMock)
     82e:	fc 01       	movw	r30, r24
     830:	24 81       	ldd	r18, Z+4	; 0x04
     832:	22 23       	and	r18, r18
     834:	39 f0       	breq	.+14     	; 0x844 <_ZN10GsmManager14getBattPercentEPj+0x16>
	{
		*vbat = 99;
     836:	83 e6       	ldi	r24, 0x63	; 99
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	fb 01       	movw	r30, r22
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	80 83       	st	Z, r24
		return true;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 95       	ret
	}
	
	return fona.getBattPercent(vbat);
     844:	05 96       	adiw	r24, 0x05	; 5
     846:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     84a:	08 95       	ret

0000084c <_ZN10GsmManager10sendViaSmsEPc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(char* data) {
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	65 97       	sbiw	r28, 0x15	; 21
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61

	if (_isMock)
     862:	dc 01       	movw	r26, r24
     864:	14 96       	adiw	r26, 0x04	; 4
     866:	1c 91       	ld	r17, X
     868:	14 97       	sbiw	r26, 0x04	; 4
     86a:	11 23       	and	r17, r17
     86c:	31 f0       	breq	.+12     	; 0x87a <_ZN10GsmManager10sendViaSmsEPc+0x2e>
	{
		MOCK_DATA_SENT_SMS = data;
     86e:	13 96       	adiw	r26, 0x03	; 3
     870:	7c 93       	st	X, r23
     872:	6e 93       	st	-X, r22
     874:	12 97       	sbiw	r26, 0x02	; 2
		return 1;
     876:	11 e0       	ldi	r17, 0x01	; 1
     878:	1a c0       	rjmp	.+52     	; 0x8ae <_ZN10GsmManager10sendViaSmsEPc+0x62>
     87a:	ab 01       	movw	r20, r22
	}

	char sendto[21]="+447968988149";
     87c:	2e e0       	ldi	r18, 0x0E	; 14
     87e:	e4 e1       	ldi	r30, 0x14	; 20
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	de 01       	movw	r26, r28
     884:	11 96       	adiw	r26, 0x01	; 1
     886:	01 90       	ld	r0, Z+
     888:	0d 92       	st	X+, r0
     88a:	2a 95       	dec	r18
     88c:	e1 f7       	brne	.-8      	; 0x886 <_ZN10GsmManager10sendViaSmsEPc+0x3a>
     88e:	fe 01       	movw	r30, r28
     890:	3f 96       	adiw	r30, 0x0f	; 15
     892:	27 e0       	ldi	r18, 0x07	; 7
     894:	df 01       	movw	r26, r30
     896:	1d 92       	st	X+, r1
     898:	2a 95       	dec	r18
     89a:	e9 f7       	brne	.-6      	; 0x896 <_ZN10GsmManager10sendViaSmsEPc+0x4a>
	if (!fona.sendSMS(sendto, data)) {
     89c:	be 01       	movw	r22, r28
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	0e 94 3a 32 	call	0x6474	; 0x6474 <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     8a8:	81 11       	cpse	r24, r1
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <_ZN10GsmManager10sendViaSmsEPc+0x62>
		return 1;
     8ac:	11 e0       	ldi	r17, 0x01	; 1
	} else {
		return 0;
	}
}
     8ae:	81 2f       	mov	r24, r17
     8b0:	65 96       	adiw	r28, 0x15	; 21
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	08 95       	ret

000008c4 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
     8c4:	fc 01       	movw	r30, r24
     8c6:	24 81       	ldd	r18, Z+4	; 0x04
     8c8:	21 11       	cpse	r18, r1
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <_ZN10GsmManager16getNetworkStatusEv+0x10>
		return 7; //magic
	else
		return fona.getNetworkStatus();
     8cc:	05 96       	adiw	r24, 0x05	; 5
     8ce:	0e 94 6d 36 	call	0x6cda	; 0x6cda <_ZN13Adafruit_FONA16getNetworkStatusEv>
     8d2:	08 95       	ret
}

uint8_t GsmManager::getNetworkStatus()
{
	if (_isMock)
		return 7; //magic
     8d4:	87 e0       	ldi	r24, 0x07	; 7
	else
		return fona.getNetworkStatus();
}
     8d6:	08 95       	ret

000008d8 <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
     8d8:	fc 01       	movw	r30, r24
     8da:	24 81       	ldd	r18, Z+4	; 0x04
     8dc:	21 11       	cpse	r18, r1
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <_ZN10GsmManager7getRSSIEv+0x10>
		return 21; //magic
	else
		return fona.getRSSI();
     8e0:	05 96       	adiw	r24, 0x05	; 5
     8e2:	0e 94 8c 36 	call	0x6d18	; 0x6d18 <_ZN13Adafruit_FONA7getRSSIEv>
     8e6:	08 95       	ret
}

uint8_t GsmManager::getRSSI()
{
	if (_isMock)
		return 21; //magic
     8e8:	85 e1       	ldi	r24, 0x15	; 21
	else
		return fona.getRSSI();
}
     8ea:	08 95       	ret

000008ec <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
	return fona.enableGPRS(switchOn);
     8ec:	05 96       	adiw	r24, 0x05	; 5
     8ee:	0e 94 9a 33 	call	0x6734	; 0x6734 <_ZN13Adafruit_FONA10enableGPRSEb>
}
     8f2:	08 95       	ret

000008f4 <_ZN10GsmManager11sendViaGprsEPc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(char* data)
{
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	00 d0       	rcall	.+0      	; 0x90e <__stack+0xf>
     90e:	00 d0       	rcall	.+0      	; 0x910 <__stack+0x11>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
	if (_isMock)
     914:	fc 01       	movw	r30, r24
     916:	24 81       	ldd	r18, Z+4	; 0x04
     918:	22 23       	and	r18, r18
     91a:	29 f0       	breq	.+10     	; 0x926 <__stack+0x27>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		MOCK_DATA_SENT_GPRS = data;
     91c:	71 83       	std	Z+1, r23	; 0x01
     91e:	60 83       	st	Z, r22
		return 0;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	60 c0       	rjmp	.+192    	; 0x9e6 <__stack+0xe7>
     926:	4b 01       	movw	r8, r22
	uint16_t statuscode;
	int16_t length;
	char* url="http://r.mkacars.org/do.php"; //TODO: should not require https?!
		                                                      
	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     928:	fb 01       	movw	r30, r22
     92a:	01 90       	ld	r0, Z+
     92c:	00 20       	and	r0, r0
     92e:	e9 f7       	brne	.-6      	; 0x92a <__stack+0x2b>
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	8f 01       	movw	r16, r30
     934:	06 1b       	sub	r16, r22
     936:	17 0b       	sbc	r17, r23
     938:	5c 01       	movw	r10, r24
     93a:	f5 e0       	ldi	r31, 0x05	; 5
     93c:	af 0e       	add	r10, r31
     93e:	b1 1c       	adc	r11, r1
     940:	ce 01       	movw	r24, r28
     942:	03 96       	adiw	r24, 0x03	; 3
     944:	6c 01       	movw	r12, r24
     946:	fe 01       	movw	r30, r28
     948:	31 96       	adiw	r30, 0x01	; 1
     94a:	7f 01       	movw	r14, r30
     94c:	9b 01       	movw	r18, r22
     94e:	42 e7       	ldi	r20, 0x72	; 114
     950:	52 e0       	ldi	r21, 0x02	; 2
     952:	65 e8       	ldi	r22, 0x85	; 133
     954:	72 e0       	ldi	r23, 0x02	; 2
     956:	c5 01       	movw	r24, r10
     958:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     95c:	81 11       	cpse	r24, r1
     95e:	19 c0       	rjmp	.+50     	; 0x992 <__stack+0x93>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     960:	21 e7       	ldi	r18, 0x71	; 113
     962:	32 e0       	ldi	r19, 0x02	; 2
     964:	40 e7       	ldi	r20, 0x70	; 112
     966:	52 e0       	ldi	r21, 0x02	; 2
     968:	65 e6       	ldi	r22, 0x65	; 101
     96a:	72 e0       	ldi	r23, 0x02	; 2
     96c:	c5 01       	movw	r24, r10
     96e:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     972:	f4 01       	movw	r30, r8
     974:	01 90       	ld	r0, Z+
     976:	00 20       	and	r0, r0
     978:	e9 f7       	brne	.-6      	; 0x974 <__stack+0x75>
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	8f 01       	movw	r16, r30
     97e:	08 19       	sub	r16, r8
     980:	19 09       	sbc	r17, r9
     982:	94 01       	movw	r18, r8
     984:	4a e5       	ldi	r20, 0x5A	; 90
     986:	52 e0       	ldi	r21, 0x02	; 2
     988:	65 e8       	ldi	r22, 0x85	; 133
     98a:	72 e0       	ldi	r23, 0x02	; 2
     98c:	c5 01       	movw	r24, r10
     98e:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
	}

	if (!succ)
     992:	88 23       	and	r24, r24
     994:	31 f1       	breq	.+76     	; 0x9e2 <__stack+0xe3>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	18 16       	cp	r1, r24
     99c:	19 06       	cpc	r1, r25
     99e:	b4 f4       	brge	.+44     	; 0x9cc <__stack+0xcd>
			while (fona.available()) {
     9a0:	c5 01       	movw	r24, r10
     9a2:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN13Adafruit_FONA9availableEv>
     9a6:	89 2b       	or	r24, r25
     9a8:	b1 f3       	breq	.-20     	; 0x996 <__stack+0x97>
				char c = fona.read();
     9aa:	c5 01       	movw	r24, r10
     9ac:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <_ZN13Adafruit_FONA4readEv>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     9b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     9b4:	95 ff       	sbrs	r25, 5
     9b6:	fc cf       	rjmp	.-8      	; 0x9b0 <__stack+0xb1>
				UDR0 = c;
     9b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
					                                                      
				length--;
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	9c 83       	std	Y+4, r25	; 0x04
     9c4:	8b 83       	std	Y+3, r24	; 0x03
				if (! length) break;
     9c6:	89 2b       	or	r24, r25
     9c8:	59 f7       	brne	.-42     	; 0x9a0 <__stack+0xa1>
     9ca:	e5 cf       	rjmp	.-54     	; 0x996 <__stack+0x97>
			}
		}
		fona.HTTP_POST_end();
     9cc:	c5 01       	movw	r24, r10
     9ce:	0e 94 1e 32 	call	0x643c	; 0x643c <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	88 3c       	cpi	r24, 0xC8	; 200
     9d8:	91 05       	cpc	r25, r1
     9da:	29 f4       	brne	.+10     	; 0x9e6 <__stack+0xe7>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <__stack+0xe7>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
	}

	if (!succ)
	{
		ret = 999;
     9e2:	87 ee       	ldi	r24, 0xE7	; 231
     9e4:	93 e0       	ldi	r25, 0x03	; 3
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
	}
	                                                      
	return ret;
}
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	9f 90       	pop	r9
     a04:	8f 90       	pop	r8
     a06:	08 95       	ret

00000a08 <_Z16getNumOfPadCharsjh>:

uint8_t getNumOfPadChars(unsigned int value, uint8_t padLength)
{
	uint8_t padChars = 0;
	
	if (value <10)
     a08:	8a 30       	cpi	r24, 0x0A	; 10
     a0a:	91 05       	cpc	r25, r1
     a0c:	38 f4       	brcc	.+14     	; 0xa1c <_Z16getNumOfPadCharsjh+0x14>
		padChars = max(0, padLength-1);
     a0e:	86 2f       	mov	r24, r22
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	42 f5       	brpl	.+80     	; 0xa66 <_Z16getNumOfPadCharsjh+0x5e>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	08 95       	ret
	else if (value < 100)
     a1c:	84 36       	cpi	r24, 0x64	; 100
     a1e:	91 05       	cpc	r25, r1
     a20:	38 f4       	brcc	.+14     	; 0xa30 <_Z16getNumOfPadCharsjh+0x28>
		padChars = max(0, padLength-2);
     a22:	86 2f       	mov	r24, r22
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 97       	sbiw	r24, 0x02	; 2
     a28:	f2 f4       	brpl	.+60     	; 0xa66 <_Z16getNumOfPadCharsjh+0x5e>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	08 95       	ret
	else if (value < 1000)
     a30:	88 3e       	cpi	r24, 0xE8	; 232
     a32:	23 e0       	ldi	r18, 0x03	; 3
     a34:	92 07       	cpc	r25, r18
     a36:	38 f4       	brcc	.+14     	; 0xa46 <_Z16getNumOfPadCharsjh+0x3e>
		padChars = max(0, padLength-3);
     a38:	86 2f       	mov	r24, r22
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	03 97       	sbiw	r24, 0x03	; 3
     a3e:	9a f4       	brpl	.+38     	; 0xa66 <_Z16getNumOfPadCharsjh+0x5e>
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	08 95       	ret
	else if (value < 10000)
     a46:	80 31       	cpi	r24, 0x10	; 16
     a48:	97 42       	sbci	r25, 0x27	; 39
     a4a:	38 f4       	brcc	.+14     	; 0xa5a <_Z16getNumOfPadCharsjh+0x52>
		padChars = max(0, padLength-4);
     a4c:	86 2f       	mov	r24, r22
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	04 97       	sbiw	r24, 0x04	; 4
     a52:	4a f4       	brpl	.+18     	; 0xa66 <_Z16getNumOfPadCharsjh+0x5e>
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	08 95       	ret
	else
		padChars = max(0, padLength-5);
     a5a:	86 2f       	mov	r24, r22
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	05 97       	sbiw	r24, 0x05	; 5
     a60:	12 f4       	brpl	.+4      	; 0xa66 <_Z16getNumOfPadCharsjh+0x5e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0

	return padChars;	
}
     a66:	08 95       	ret

00000a68 <_Z16writeCharWithPadPcch>:


byte writeCharWithPad(char* buffer, const char value, byte padLength)
{
     a68:	fc 01       	movw	r30, r24
	byte padChars = max(0, padLength-1);
     a6a:	84 2f       	mov	r24, r20
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	12 f4       	brpl	.+4      	; 0xa76 <_Z16writeCharWithPadPcch+0xe>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	98 17       	cp	r25, r24
     a7a:	28 f4       	brcc	.+10     	; 0xa86 <_Z16writeCharWithPadPcch+0x1e>
		*(buffer++) = '0';
     a7c:	20 e3       	ldi	r18, 0x30	; 48
     a7e:	20 83       	st	Z, r18
byte writeCharWithPad(char* buffer, const char value, byte padLength)
{
	byte padChars = max(0, padLength-1);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a80:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = '0';
     a82:	31 96       	adiw	r30, 0x01	; 1
byte writeCharWithPad(char* buffer, const char value, byte padLength)
{
	byte padChars = max(0, padLength-1);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     a84:	f9 cf       	rjmp	.-14     	; 0xa78 <_Z16writeCharWithPadPcch+0x10>
		*(buffer++) = '0';
	
	*(buffer++) = value;
     a86:	60 83       	st	Z, r22

	return padChars + 1;
}
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	08 95       	ret

00000a8c <_Z19writeCharArrWithPadPcPKch>:



byte writeCharArrWithPad(char* buffer, const char* value, byte padLength)
{
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	fc 01       	movw	r30, r24
	byte valLen = strlen(value);
     a92:	eb 01       	movw	r28, r22
     a94:	09 90       	ld	r0, Y+
     a96:	00 20       	and	r0, r0
     a98:	e9 f7       	brne	.-6      	; 0xa94 <_Z19writeCharArrWithPadPcPKch+0x8>
     a9a:	21 97       	sbiw	r28, 0x01	; 1
     a9c:	c6 1b       	sub	r28, r22
     a9e:	d7 0b       	sbc	r29, r23
     aa0:	8c 2f       	mov	r24, r28
	byte padChars = max(0, padLength-valLen);
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	4c 1b       	sub	r20, r28
     aa6:	51 09       	sbc	r21, r1
     aa8:	12 f4       	brpl	.+4      	; 0xaae <_Z19writeCharArrWithPadPcPKch+0x22>
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
	
	//First pad
	for(byte i=0;i<padChars;i++)
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	94 17       	cp	r25, r20
     ab2:	28 f4       	brcc	.+10     	; 0xabe <_Z19writeCharArrWithPadPcPKch+0x32>
		*(buffer++) = '0';
     ab4:	20 e3       	ldi	r18, 0x30	; 48
     ab6:	20 83       	st	Z, r18
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     ab8:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = '0';
     aba:	31 96       	adiw	r30, 0x01	; 1
{
	byte valLen = strlen(value);
	byte padChars = max(0, padLength-valLen);
	
	//First pad
	for(byte i=0;i<padChars;i++)
     abc:	f9 cf       	rjmp	.-14     	; 0xab0 <_Z19writeCharArrWithPadPcPKch+0x24>
     abe:	90 e0       	ldi	r25, 0x00	; 0
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     ac0:	98 17       	cp	r25, r24
     ac2:	40 f4       	brcc	.+16     	; 0xad4 <_Z19writeCharArrWithPadPcPKch+0x48>
		*(buffer++) = *(value+i);
     ac4:	db 01       	movw	r26, r22
     ac6:	a9 0f       	add	r26, r25
     ac8:	b1 1d       	adc	r27, r1
     aca:	2c 91       	ld	r18, X
     acc:	20 83       	st	Z, r18
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     ace:	9f 5f       	subi	r25, 0xFF	; 255
		*(buffer++) = *(value+i);
     ad0:	31 96       	adiw	r30, 0x01	; 1
	
	//First pad
	for(byte i=0;i<padChars;i++)
		*(buffer++) = '0';
	
	for(byte i=0;i<valLen;i++)
     ad2:	f6 cf       	rjmp	.-20     	; 0xac0 <_Z19writeCharArrWithPadPcPKch+0x34>
		*(buffer++) = *(value+i);

	return padChars + valLen;
}
     ad4:	8c 2f       	mov	r24, r28
     ad6:	84 0f       	add	r24, r20
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <_Z16writeByteWithPadPchh>:
	//
	//return writeCharArrWithPad(buffer, strRaw, padLength);
//}

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
	byte padChars =getNumOfPadChars(value, padLength);
     aea:	e6 2e       	mov	r14, r22
     aec:	f1 2c       	mov	r15, r1
     aee:	64 2f       	mov	r22, r20
     af0:	c7 01       	movw	r24, r14
     af2:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z16getNumOfPadCharsjh>
     af6:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	81 17       	cp	r24, r17
     afc:	28 f4       	brcc	.+10     	; 0xb08 <_Z16writeByteWithPadPchh+0x2a>
		*(buffer++) = '0';
     afe:	90 e3       	ldi	r25, 0x30	; 48
     b00:	98 83       	st	Y, r25

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     b02:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     b04:	21 96       	adiw	r28, 0x01	; 1

byte writeByteWithPad(char* buffer, byte value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     b06:	f9 cf       	rjmp	.-14     	; 0xafa <_Z16writeByteWithPadPchh+0x1c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     b08:	4a e0       	ldi	r20, 0x0A	; 10
     b0a:	be 01       	movw	r22, r28
     b0c:	c7 01       	movw	r24, r14
     b0e:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     b12:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     b14:	fe 01       	movw	r30, r28
     b16:	e8 0f       	add	r30, r24
     b18:	f1 1d       	adc	r31, r1
     b1a:	90 81       	ld	r25, Z
     b1c:	99 23       	and	r25, r25
     b1e:	11 f0       	breq	.+4      	; 0xb24 <_Z16writeByteWithPadPchh+0x46>
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	f8 cf       	rjmp	.-16     	; 0xb14 <_Z16writeByteWithPadPchh+0x36>
	
	return padChars + offset;	
}
     b24:	81 0f       	add	r24, r17
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	08 95       	ret

00000b32 <_Z12writeWithPadPcjh>:

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
     b3e:	7b 01       	movw	r14, r22
	byte padChars =getNumOfPadChars(value, padLength);
     b40:	64 2f       	mov	r22, r20
     b42:	c7 01       	movw	r24, r14
     b44:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z16getNumOfPadCharsjh>
     b48:	18 2f       	mov	r17, r24

	for(byte i=0;i<padChars;i++)
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	81 17       	cp	r24, r17
     b4e:	28 f4       	brcc	.+10     	; 0xb5a <_Z12writeWithPadPcjh+0x28>
		*(buffer++) = '0';
     b50:	90 e3       	ldi	r25, 0x30	; 48
     b52:	98 83       	st	Y, r25

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     b54:	8f 5f       	subi	r24, 0xFF	; 255
		*(buffer++) = '0';
     b56:	21 96       	adiw	r28, 0x01	; 1

byte writeWithPad(char* buffer, unsigned int value, byte padLength)
{
	byte padChars =getNumOfPadChars(value, padLength);

	for(byte i=0;i<padChars;i++)
     b58:	f9 cf       	rjmp	.-14     	; 0xb4c <_Z12writeWithPadPcjh+0x1a>
     b5a:	4a e0       	ldi	r20, 0x0A	; 10
     b5c:	be 01       	movw	r22, r28
     b5e:	c7 01       	movw	r24, r14
     b60:	0e 94 db 3c 	call	0x79b6	; 0x79b6 <__utoa_ncheck>
		*(buffer++) = '0';
	
	utoa(value, buffer, 10);

	byte offset = 0;
     b64:	80 e0       	ldi	r24, 0x00	; 0
	while(*(buffer+offset)!= 0){offset++;} //However many characters it took
     b66:	fe 01       	movw	r30, r28
     b68:	e8 0f       	add	r30, r24
     b6a:	f1 1d       	adc	r31, r1
     b6c:	90 81       	ld	r25, Z
     b6e:	99 23       	and	r25, r25
     b70:	11 f0       	breq	.+4      	; 0xb76 <_Z12writeWithPadPcjh+0x44>
     b72:	8f 5f       	subi	r24, 0xFF	; 255
     b74:	f8 cf       	rjmp	.-16     	; 0xb66 <_Z12writeWithPadPcjh+0x34>
	
	return padChars + offset;
}
     b76:	81 0f       	add	r24, r17
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	08 95       	ret

00000b84 <_ZN12RmMemManagerC1Eb>:
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock){
	_isMock=isMock;
     b84:	fc 01       	movw	r30, r24
     b86:	60 83       	st	Z, r22
     b88:	08 95       	ret

00000b8a <_ZN12RmMemManager17getLongFromMemoryEj>:
	toggleLED(Bottom, All_Clear);
	toggleLED(Top, All_Clear);
}

unsigned long RmMemManager::getLongFromMemory(unsigned int address)
{
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	00 d0       	rcall	.+0      	; 0xb9a <_ZN12RmMemManager17getLongFromMemoryEj+0x10>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <_ZN12RmMemManager17getLongFromMemoryEj+0x12>
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	8b 01       	movw	r16, r22

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     ba2:	cb 01       	movw	r24, r22
     ba4:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
     ba8:	d8 2e       	mov	r13, r24
     baa:	c8 01       	movw	r24, r16
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
     bb2:	e8 2e       	mov	r14, r24
     bb4:	c8 01       	movw	r24, r16
     bb6:	02 96       	adiw	r24, 0x02	; 2
     bb8:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
     bbc:	f8 2e       	mov	r15, r24
     bbe:	c8 01       	movw	r24, r16
     bc0:	03 96       	adiw	r24, 0x03	; 3
     bc2:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
	byte b4 = EEPROM.read(address+3);
	
	//Interpret it exactly as it's stored in memory
	byte bArr[] = {b1,b2,b3,b4};
	
	volatile long derefValue = *(long*)(&bArr);
     bc6:	4d 2d       	mov	r20, r13
     bc8:	5e 2d       	mov	r21, r14
     bca:	6f 2d       	mov	r22, r15
     bcc:	78 2f       	mov	r23, r24
     bce:	49 83       	std	Y+1, r20	; 0x01
     bd0:	5a 83       	std	Y+2, r21	; 0x02
     bd2:	6b 83       	std	Y+3, r22	; 0x03
     bd4:	7c 83       	std	Y+4, r23	; 0x04
	
	return derefValue;	
     bd6:	69 81       	ldd	r22, Y+1	; 0x01
     bd8:	7a 81       	ldd	r23, Y+2	; 0x02
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	08 95       	ret

00000bf6 <_Z17getUIntFromMemoryj>:

unsigned int /*RmMemManager::*/getUIntFromMemory(unsigned int address)
{
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <_Z17getUIntFromMemoryj+0xc>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	8c 01       	movw	r16, r24
     c08:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
     c0c:	f8 2e       	mov	r15, r24
     c0e:	c8 01       	movw	r24, r16
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
	byte b2 = EEPROM.read(address+1);
		
	//Interpret it exactly as it's stored in memory
	byte bArr[] = {b1,b2};
		
	volatile int derefValue = *(int*)(&bArr);
     c16:	2f 2d       	mov	r18, r15
     c18:	38 2f       	mov	r19, r24
     c1a:	3a 83       	std	Y+2, r19	; 0x02
     c1c:	29 83       	std	Y+1, r18	; 0x01
		
	return derefValue;
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	08 95       	ret

00000c32 <_ZN12RmMemManager15setLongToMemoryEjm>:

void RmMemManager::setLongToMemory(unsigned int address, unsigned long value)
{
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	28 97       	sbiw	r28, 0x08	; 8
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	8b 01       	movw	r16, r22
     c4c:	2d 83       	std	Y+5, r18	; 0x05
     c4e:	3e 83       	std	Y+6, r19	; 0x06
     c50:	4f 83       	std	Y+7, r20	; 0x07
     c52:	58 87       	std	Y+8, r21	; 0x08
	//Interpret the bytes as they're stored in memory, little or big endian, we don't care
	volatile byte byte1 = * ((byte*)&value); //LSB
     c54:	29 83       	std	Y+1, r18	; 0x01
	volatile byte byte2 = * (((byte*)&value)+1); //MSB
     c56:	8e 81       	ldd	r24, Y+6	; 0x06
     c58:	8a 83       	std	Y+2, r24	; 0x02
	volatile byte byte3 = * (((byte*)&value)+2); //MSB
     c5a:	8f 81       	ldd	r24, Y+7	; 0x07
     c5c:	8b 83       	std	Y+3, r24	; 0x03
	volatile byte byte4 = * (((byte*)&value)+3); //MSB
     c5e:	88 85       	ldd	r24, Y+8	; 0x08
     c60:	8c 83       	std	Y+4, r24	; 0x04
	
	EEPROM.write(address,   byte1);
     c62:	69 81       	ldd	r22, Y+1	; 0x01
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     c64:	c8 01       	movw	r24, r16
     c66:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>
	EEPROM.write(address+1, byte2);
     c6a:	6a 81       	ldd	r22, Y+2	; 0x02
     c6c:	c8 01       	movw	r24, r16
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>
	EEPROM.write(address+2, byte3);
     c74:	6b 81       	ldd	r22, Y+3	; 0x03
     c76:	c8 01       	movw	r24, r16
     c78:	02 96       	adiw	r24, 0x02	; 2
     c7a:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>
	EEPROM.write(address+3, byte4);
     c7e:	6c 81       	ldd	r22, Y+4	; 0x04
     c80:	c8 01       	movw	r24, r16
     c82:	03 96       	adiw	r24, 0x03	; 3
     c84:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>
}
     c88:	28 96       	adiw	r28, 0x08	; 8
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <_Z15setUIntToMemoryjj>:

void /* RmMemManager::*/setUIntToMemory(unsigned int address, unsigned int value)
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <_Z15setUIntToMemoryjj+0xa>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <_Z15setUIntToMemoryjj+0xc>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	8c 01       	movw	r16, r24
     cb0:	7c 83       	std	Y+4, r23	; 0x04
     cb2:	6b 83       	std	Y+3, r22	; 0x03
	//Interpret the bytes as they're stored in memory, little or big endian, we don't care
	volatile byte byte1 = * ((byte*)&value); //LSB
     cb4:	69 83       	std	Y+1, r22	; 0x01
	volatile byte byte2 = * (((byte*)&value)+1); //MSB
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	8a 83       	std	Y+2, r24	; 0x02
	
	EEPROM.write(address,   byte1);
     cba:	69 81       	ldd	r22, Y+1	; 0x01
     cbc:	c8 01       	movw	r24, r16
     cbe:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>
	EEPROM.write(address+1, byte2);
     cc2:	6a 81       	ldd	r22, Y+2	; 0x02
     cc4:	c8 01       	movw	r24, r16
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	69 97       	sbiw	r28, 0x19	; 25
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	5c 01       	movw	r10, r24
     d04:	7b 01       	movw	r14, r22
     d06:	8a 01       	movw	r16, r20
     d08:	69 01       	movw	r12, r18
	uint8_t readingSz = sizeof(SensorData);
	
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     d0a:	64 e6       	ldi	r22, 0x64	; 100
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
     d12:	69 83       	std	Y+1, r22	; 0x01
     d14:	7a 83       	std	Y+2, r23	; 0x02
     d16:	8b 83       	std	Y+3, r24	; 0x03
     d18:	9c 83       	std	Y+4, r25	; 0x04
	volatile unsigned long alreadySentTo = getLongFromMemory(MEMLOC_SENT_UPTO);
     d1a:	6c e0       	ldi	r22, 0x0C	; 12
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	c5 01       	movw	r24, r10
     d20:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
     d24:	6d 83       	std	Y+5, r22	; 0x05
     d26:	7e 83       	std	Y+6, r23	; 0x06
     d28:	8f 83       	std	Y+7, r24	; 0x07
     d2a:	98 87       	std	Y+8, r25	; 0x08
	
	//We need the last {<maxNoOfReadings}. This may mean we skip from {alreadySentTo-x} onwards.
	volatile unsigned long numOfLastReadings = min(entryCount-alreadySentTo, maxNoOfReadings); //Take last n readings
     d2c:	49 81       	ldd	r20, Y+1	; 0x01
     d2e:	5a 81       	ldd	r21, Y+2	; 0x02
     d30:	6b 81       	ldd	r22, Y+3	; 0x03
     d32:	7c 81       	ldd	r23, Y+4	; 0x04
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	af 81       	ldd	r26, Y+7	; 0x07
     d3a:	b8 85       	ldd	r27, Y+8	; 0x08
     d3c:	48 1b       	sub	r20, r24
     d3e:	59 0b       	sbc	r21, r25
     d40:	6a 0b       	sbc	r22, r26
     d42:	7b 0b       	sbc	r23, r27
     d44:	c8 01       	movw	r24, r16
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	48 17       	cp	r20, r24
     d4c:	59 07       	cpc	r21, r25
     d4e:	6a 07       	cpc	r22, r26
     d50:	7b 07       	cpc	r23, r27
     d52:	60 f4       	brcc	.+24     	; 0xd6c <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x8e>
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	ab 81       	ldd	r26, Y+3	; 0x03
     d5a:	bc 81       	ldd	r27, Y+4	; 0x04
     d5c:	4d 81       	ldd	r20, Y+5	; 0x05
     d5e:	5e 81       	ldd	r21, Y+6	; 0x06
     d60:	6f 81       	ldd	r22, Y+7	; 0x07
     d62:	78 85       	ldd	r23, Y+8	; 0x08
     d64:	84 1b       	sub	r24, r20
     d66:	95 0b       	sbc	r25, r21
     d68:	a6 0b       	sbc	r26, r22
     d6a:	b7 0b       	sbc	r27, r23
     d6c:	89 87       	std	Y+9, r24	; 0x09
     d6e:	9a 87       	std	Y+10, r25	; 0x0a
     d70:	ab 87       	std	Y+11, r26	; 0x0b
     d72:	bc 87       	std	Y+12, r27	; 0x0c
	if (numOfLastReadings == 0)
     d74:	69 85       	ldd	r22, Y+9	; 0x09
     d76:	7a 85       	ldd	r23, Y+10	; 0x0a
     d78:	8b 85       	ldd	r24, Y+11	; 0x0b
     d7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d7c:	61 15       	cp	r22, r1
     d7e:	71 05       	cpc	r23, r1
     d80:	81 05       	cpc	r24, r1
     d82:	91 05       	cpc	r25, r1
     d84:	51 f4       	brne	.+20     	; 0xd9a <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xbc>
	{
		*loadedUpTo = alreadySentTo; /* Nothing more */
     d86:	0d 81       	ldd	r16, Y+5	; 0x05
     d88:	1e 81       	ldd	r17, Y+6	; 0x06
     d8a:	2f 81       	ldd	r18, Y+7	; 0x07
     d8c:	38 85       	ldd	r19, Y+8	; 0x08
     d8e:	f6 01       	movw	r30, r12
     d90:	00 83       	st	Z, r16
     d92:	11 83       	std	Z+1, r17	; 0x01
     d94:	22 83       	std	Z+2, r18	; 0x02
     d96:	33 83       	std	Z+3, r19	; 0x03
		return 0UL; //Nothing to send
     d98:	69 c0       	rjmp	.+210    	; 0xe6c <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x18e>
	}
	
	//Get read idx => 2 readings if 10 entry count => @ idx 8 offset
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	ab 81       	ldd	r26, Y+3	; 0x03
     da0:	bc 81       	ldd	r27, Y+4	; 0x04
     da2:	49 85       	ldd	r20, Y+9	; 0x09
     da4:	5a 85       	ldd	r21, Y+10	; 0x0a
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	84 1b       	sub	r24, r20
     dac:	95 0b       	sbc	r25, r21
     dae:	a6 0b       	sbc	r26, r22
     db0:	b7 0b       	sbc	r27, r23
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	9e 87       	std	Y+14, r25	; 0x0e
     dc0:	8d 87       	std	Y+13, r24	; 0x0d
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc6:	88 59       	subi	r24, 0x98	; 152
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	98 8b       	std	Y+16, r25	; 0x10
     dcc:	8f 87       	std	Y+15, r24	; 0x0f

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     dce:	18 8e       	std	Y+24, r1	; 0x18
     dd0:	1f 8a       	std	Y+23, r1	; 0x17
     dd2:	8f 89       	ldd	r24, Y+23	; 0x17
     dd4:	98 8d       	ldd	r25, Y+24	; 0x18
     dd6:	09 2e       	mov	r0, r25
     dd8:	00 0c       	add	r0, r0
     dda:	aa 0b       	sbc	r26, r26
     ddc:	bb 0b       	sbc	r27, r27
     dde:	49 85       	ldd	r20, Y+9	; 0x09
     de0:	5a 85       	ldd	r21, Y+10	; 0x0a
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	84 17       	cp	r24, r20
     de8:	95 07       	cpc	r25, r21
     dea:	a6 07       	cpc	r26, r22
     dec:	b7 07       	cpc	r27, r23
     dee:	88 f5       	brcc	.+98     	; 0xe52 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x174>
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     df0:	1e 8a       	std	Y+22, r1	; 0x16
     df2:	1d 8a       	std	Y+21, r1	; 0x15
     df4:	8d 89       	ldd	r24, Y+21	; 0x15
     df6:	9e 89       	ldd	r25, Y+22	; 0x16
     df8:	08 97       	sbiw	r24, 0x08	; 8
     dfa:	2c f5       	brge	.+74     	; 0xe46 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x168>
		{
			unsigned int currBufferOffset = (readingNo*readingSz)+byteIdx;//curr buffer offset
     dfc:	0f 89       	ldd	r16, Y+23	; 0x17
     dfe:	18 8d       	ldd	r17, Y+24	; 0x18
     e00:	00 0f       	add	r16, r16
     e02:	11 1f       	adc	r17, r17
     e04:	00 0f       	add	r16, r16
     e06:	11 1f       	adc	r17, r17
     e08:	00 0f       	add	r16, r16
     e0a:	11 1f       	adc	r17, r17
     e0c:	8d 89       	ldd	r24, Y+21	; 0x15
     e0e:	9e 89       	ldd	r25, Y+22	; 0x16
     e10:	08 0f       	add	r16, r24
     e12:	19 1f       	adc	r17, r25
			unsigned int currReadAddress = startReadAddress + currBufferOffset;
     e14:	af 84       	ldd	r10, Y+15	; 0x0f
     e16:	b8 88       	ldd	r11, Y+16	; 0x10
     e18:	a0 0e       	add	r10, r16
     e1a:	b1 1e       	adc	r11, r17
			unsigned volatile int stopme=currBufferOffset;
     e1c:	1c 8b       	std	Y+20, r17	; 0x14
     e1e:	0b 8b       	std	Y+19, r16	; 0x13
			unsigned volatile int stopme2=currReadAddress;
     e20:	ba 8a       	std	Y+18, r11	; 0x12
     e22:	a9 8a       	std	Y+17, r10	; 0x11

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     e24:	c5 01       	movw	r24, r10
     e26:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
			volatile byte stopx = (byte)EEPROM.read(currReadAddress);
     e2a:	89 8f       	std	Y+25, r24	; 0x19
			*(rPtr+currBufferOffset) = EEPROM.read(currReadAddress);
     e2c:	0e 0d       	add	r16, r14
     e2e:	1f 1d       	adc	r17, r15
     e30:	c5 01       	movw	r24, r10
     e32:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <eeprom_read_byte>
     e36:	f8 01       	movw	r30, r16
     e38:	80 83       	st	Z, r24
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
		for(volatile int byteIdx=0;byteIdx<readingSz;byteIdx++)
     e3a:	8d 89       	ldd	r24, Y+21	; 0x15
     e3c:	9e 89       	ldd	r25, Y+22	; 0x16
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	9e 8b       	std	Y+22, r25	; 0x16
     e42:	8d 8b       	std	Y+21, r24	; 0x15
     e44:	d7 cf       	rjmp	.-82     	; 0xdf4 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x116>
	volatile unsigned int startReadOffset = (entryCount-numOfLastReadings) * readingSz;
	volatile unsigned int startReadAddress = MEMADDR_READING_DATA_START + startReadOffset;

	byte* rPtr = (byte*)buffer;//&r2;
	
	for(volatile int readingNo = 0; readingNo < numOfLastReadings; readingNo++)
     e46:	8f 89       	ldd	r24, Y+23	; 0x17
     e48:	98 8d       	ldd	r25, Y+24	; 0x18
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	98 8f       	std	Y+24, r25	; 0x18
     e4e:	8f 8b       	std	Y+23, r24	; 0x17
     e50:	c0 cf       	rjmp	.-128    	; 0xdd2 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0xf4>
		}
	
	
	
	
	*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	ab 81       	ldd	r26, Y+3	; 0x03
     e58:	bc 81       	ldd	r27, Y+4	; 0x04
     e5a:	f6 01       	movw	r30, r12
     e5c:	80 83       	st	Z, r24
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	a2 83       	std	Z+2, r26	; 0x02
     e62:	b3 83       	std	Z+3, r27	; 0x03
	return numOfLastReadings;
     e64:	69 85       	ldd	r22, Y+9	; 0x09
     e66:	7a 85       	ldd	r23, Y+10	; 0x0a
     e68:	8b 85       	ldd	r24, Y+11	; 0x0b
     e6a:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     e6c:	69 96       	adiw	r28, 0x19	; 25
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	08 95       	ret

00000e8e <_ZN12RmMemManager12markDataSentEm>:

void RmMemManager::markDataSent(unsigned long sentUpTo)
{
	setLongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
     e8e:	9a 01       	movw	r18, r20
     e90:	ab 01       	movw	r20, r22
     e92:	6c e0       	ldi	r22, 0x0C	; 12
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
     e9a:	08 95       	ret

00000e9c <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
}

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
     e9c:	08 95       	ret

00000e9e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:
	//TODO
}

void RmMemManager::appendSensorEntry(SensorData* r)
{
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	60 97       	sbiw	r28, 0x10	; 16
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	6c 01       	movw	r12, r24
     ec0:	7b 01       	movw	r14, r22
	volatile unsigned int readingSz = sizeof(SensorData); //const
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	
	//Read where next entry is free
	volatile unsigned long entryCount = getLongFromMemory(MEMLOC_READING_ENTRY_COUNT);
     eca:	64 e6       	ldi	r22, 0x64	; 100
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	c6 01       	movw	r24, r12
     ed0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
     ed4:	6b 83       	std	Y+3, r22	; 0x03
     ed6:	7c 83       	std	Y+4, r23	; 0x04
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	9e 83       	std	Y+6, r25	; 0x06
	volatile unsigned long nextFreeOffset = entryCount * sizeof(SensorData);
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	ad 81       	ldd	r26, Y+5	; 0x05
     ee2:	be 81       	ldd	r27, Y+6	; 0x06
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	aa 1f       	adc	r26, r26
     eea:	bb 1f       	adc	r27, r27
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	aa 1f       	adc	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	aa 1f       	adc	r26, r26
     efa:	bb 1f       	adc	r27, r27
     efc:	8f 83       	std	Y+7, r24	; 0x07
     efe:	98 87       	std	Y+8, r25	; 0x08
     f00:	a9 87       	std	Y+9, r26	; 0x09
     f02:	ba 87       	std	Y+10, r27	; 0x0a
	volatile unsigned long nextFreeAddress = MEMADDR_READING_DATA_START + nextFreeOffset;
     f04:	8f 81       	ldd	r24, Y+7	; 0x07
     f06:	98 85       	ldd	r25, Y+8	; 0x08
     f08:	a9 85       	ldd	r26, Y+9	; 0x09
     f0a:	ba 85       	ldd	r27, Y+10	; 0x0a
     f0c:	88 59       	subi	r24, 0x98	; 152
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	af 4f       	sbci	r26, 0xFF	; 255
     f12:	bf 4f       	sbci	r27, 0xFF	; 255
     f14:	8b 87       	std	Y+11, r24	; 0x0b
     f16:	9c 87       	std	Y+12, r25	; 0x0c
     f18:	ad 87       	std	Y+13, r26	; 0x0d
     f1a:	be 87       	std	Y+14, r27	; 0x0e

	//TODO: modulo both free address (AND entry count?)

	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	08 30       	cpi	r16, 0x08	; 8
     f22:	11 05       	cpc	r17, r1
     f24:	78 f4       	brcc	.+30     	; 0xf44 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0xa6>
		EEPROM.write(nextFreeAddress+i, *(rPtr+i));
     f26:	f7 01       	movw	r30, r14
     f28:	e0 0f       	add	r30, r16
     f2a:	f1 1f       	adc	r31, r17
     f2c:	60 81       	ld	r22, Z
     f2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f30:	9c 85       	ldd	r25, Y+12	; 0x0c
     f32:	ad 85       	ldd	r26, Y+13	; 0x0d
     f34:	be 85       	ldd	r27, Y+14	; 0x0e
     f36:	80 0f       	add	r24, r16
     f38:	91 1f       	adc	r25, r17
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     f3a:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <eeprom_write_byte>

	//TODO: modulo both free address (AND entry count?)

	byte* rPtr = (byte*)r;

	for(int i=0;i<sizeof(SensorData);i++)
     f3e:	0f 5f       	subi	r16, 0xFF	; 255
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	ee cf       	rjmp	.-36     	; 0xf20 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x82>
		EEPROM.write(nextFreeAddress+i, *(rPtr+i));

	//Update entry count
	setLongToMemory(MEMLOC_READING_ENTRY_COUNT, entryCount+1);
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	ad 81       	ldd	r26, Y+5	; 0x05
     f4a:	be 81       	ldd	r27, Y+6	; 0x06
     f4c:	9c 01       	movw	r18, r24
     f4e:	ad 01       	movw	r20, r26
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	4f 4f       	sbci	r20, 0xFF	; 255
     f56:	5f 4f       	sbci	r21, 0xFF	; 255
     f58:	64 e6       	ldi	r22, 0x64	; 100
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	c6 01       	movw	r24, r12
     f5e:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	volatile int stop=2;
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	98 8b       	std	Y+16, r25	; 0x10
     f68:	8f 87       	std	Y+15, r24	; 0x0f
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
     f6a:	60 96       	adiw	r28, 0x10	; 16
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret

00000f88 <_Z13internalFlashRbS_9LED_STATEb>:
	)
{
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
     f88:	40 32       	cpi	r20, 0x20	; 32
     f8a:	31 f4       	brne	.+12     	; 0xf98 <_Z13internalFlashRbS_9LED_STATEb+0x10>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
     f8c:	fc 01       	movw	r30, r24
     f8e:	50 81       	ld	r21, Z
     f90:	31 e0       	ldi	r19, 0x01	; 1
     f92:	35 27       	eor	r19, r21
     f94:	30 83       	st	Z, r19
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Slow) {
     f98:	40 34       	cpi	r20, 0x40	; 64
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <_Z13internalFlashRbS_9LED_STATEb+0x1a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == Green_Solid) {
     fa2:	40 31       	cpi	r20, 0x10	; 16
     fa4:	21 f4       	brne	.+8      	; 0xfae <_Z13internalFlashRbS_9LED_STATEb+0x26>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
     fa6:	31 e0       	ldi	r19, 0x01	; 1
     fa8:	fc 01       	movw	r30, r24
     faa:	30 83       	st	Z, r19
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
	}
	else if (currLedState == All_Clear) {
     fae:	40 38       	cpi	r20, 0x80	; 128
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <_Z13internalFlashRbS_9LED_STATEb+0x2e>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
     fb2:	fc 01       	movw	r30, r24
     fb4:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
     fb6:	42 30       	cpi	r20, 0x02	; 2
     fb8:	31 f4       	brne	.+12     	; 0xfc6 <_Z13internalFlashRbS_9LED_STATEb+0x3e>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
     fba:	fb 01       	movw	r30, r22
     fbc:	90 81       	ld	r25, Z
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	89 27       	eor	r24, r25
     fc2:	80 83       	st	Z, r24
     fc4:	08 95       	ret
	}
	else if (currLedState == Red_Slow) {
     fc6:	44 30       	cpi	r20, 0x04	; 4
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <_Z13internalFlashRbS_9LED_STATEb+0x48>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
     fca:	fb 01       	movw	r30, r22
     fcc:	20 83       	st	Z, r18
     fce:	08 95       	ret
	}
	else if (currLedState == Red_Solid) {
     fd0:	41 30       	cpi	r20, 0x01	; 1
     fd2:	21 f4       	brne	.+8      	; 0xfdc <_Z13internalFlashRbS_9LED_STATEb+0x54>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	fb 01       	movw	r30, r22
     fd8:	80 83       	st	Z, r24
     fda:	08 95       	ret
	}
	else if (currLedState == All_Clear) {
     fdc:	40 38       	cpi	r20, 0x80	; 128
     fde:	11 f4       	brne	.+4      	; 0xfe4 <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
     fe0:	fb 01       	movw	r30, r22
     fe2:	10 82       	st	Z, r1
     fe4:	08 95       	ret

00000fe6 <_ZN12RmMemManager8flashLEDEv>:

//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
     fe6:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__data_end>
     fea:	9f 5f       	subi	r25, 0xFF	; 255
     fec:	8b ea       	ldi	r24, 0xAB	; 171
     fee:	98 9f       	mul	r25, r24
     ff0:	81 2d       	mov	r24, r1
     ff2:	11 24       	eor	r1, r1
     ff4:	86 95       	lsr	r24
     ff6:	28 2f       	mov	r18, r24
     ff8:	22 0f       	add	r18, r18
     ffa:	82 0f       	add	r24, r18
     ffc:	98 1b       	sub	r25, r24
     ffe:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <__data_end>

	//Flash Bottom LED	
	internalFlash(
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	91 11       	cpse	r25, r1
    1006:	20 e0       	ldi	r18, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1008:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <_ledBottomState>
    100c:	67 e3       	ldi	r22, 0x37	; 55
    100e:	74 e0       	ldi	r23, 0x04	; 4
    1010:	88 e3       	ldi	r24, 0x38	; 56
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 c4 07 	call	0xf88	; 0xf88 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1018:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <_ledBottomPinGreen>
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    1022:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <_ledBottomPinRed>
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__data_end>
    1032:	81 11       	cpse	r24, r1
    1034:	20 e0       	ldi	r18, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    1036:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    103a:	66 e3       	ldi	r22, 0x36	; 54
    103c:	74 e0       	ldi	r23, 0x04	; 4
    103e:	85 e3       	ldi	r24, 0x35	; 53
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	0e 94 c4 07 	call	0xf88	; 0xf88 <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    1046:	60 91 35 04 	lds	r22, 0x0435	; 0x800435 <_ledTopPinGreen>
    104a:	8b e0       	ldi	r24, 0x0B	; 11
    104c:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    1050:	60 91 36 04 	lds	r22, 0x0436	; 0x800436 <_ledTopPinRed>
    1054:	8a e0       	ldi	r24, 0x0A	; 10
    1056:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
    105a:	08 95       	ret

0000105c <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:
}

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
	if (led_num == Bottom)
    105c:	61 30       	cpi	r22, 0x01	; 1
    105e:	19 f4       	brne	.+6      	; 0x1066 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0xa>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    1060:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <_ledBottomState>
    1064:	08 95       	ret
	else if (led_num == Top)
    1066:	61 11       	cpse	r22, r1
    1068:	02 c0       	rjmp	.+4      	; 0x106e <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x12>
		_ledTopState = state;
    106a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
    106e:	08 95       	ret

00001070 <_ZN12RmMemManager5resetEv>:

RmMemManager::RmMemManager(boolean isMock){
	_isMock=isMock;
}

void RmMemManager::reset(){
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	ec 01       	movw	r28, r24
	_flashCallCount=0;
    1076:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <__data_end>
	toggleLED(Bottom, All_Clear);
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	0e 94 2e 08 	call	0x105c	; 0x105c <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <_ZN12RmMemManager7readVccEv>:
}

float RmMemManager::readVcc() {
  long result;
  // Read 1.1V reference against AVcc - TODO: does this even work ?!
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1092:	8e e4       	ldi	r24, 0x4E	; 78
    1094:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  delay(2); // Wait for Vref to settle
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
  ADCSRA |= _BV(ADSC); // Convert
    10a4:	ea e7       	ldi	r30, 0x7A	; 122
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	80 83       	st	Z, r24
  while (bit_is_set(ADCSRA,ADSC));
    10ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    10b2:	86 fd       	sbrc	r24, 6
    10b4:	fc cf       	rjmp	.-8      	; 0x10ae <_ZN12RmMemManager7readVccEv+0x1c>
  result = ADCL;
    10b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  result |= ADCH<<8;
    10ba:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	32 2f       	mov	r19, r18
    10c2:	22 27       	eor	r18, r18
    10c4:	a9 01       	movw	r20, r18
    10c6:	33 0f       	add	r19, r19
    10c8:	66 0b       	sbc	r22, r22
    10ca:	77 0b       	sbc	r23, r23
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	28 2b       	or	r18, r24
  result = 1125300L / result; // Back-calculate AVcc in mV
    10d2:	64 eb       	ldi	r22, 0xB4	; 180
    10d4:	7b e2       	ldi	r23, 0x2B	; 43
    10d6:	81 e1       	ldi	r24, 0x11	; 17
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 b0 39 	call	0x7360	; 0x7360 <__divmodsi4>
  return result / 1000;
    10de:	ca 01       	movw	r24, r20
    10e0:	b9 01       	movw	r22, r18
    10e2:	28 ee       	ldi	r18, 0xE8	; 232
    10e4:	33 e0       	ldi	r19, 0x03	; 3
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	0e 94 b0 39 	call	0x7360	; 0x7360 <__divmodsi4>
    10ee:	ca 01       	movw	r24, r20
    10f0:	b9 01       	movw	r22, r18
    10f2:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
}
    10f6:	08 95       	ret

000010f8 <_ZN12RmMemManager16takeSampleAnalogEi>:
	//still required?
}

//Returns (analog_reading * vcc)
//TODO: Doesn't really belong in memory manager class :|
float RmMemManager::takeSampleAnalog(int pinNo)	{
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
	if (_isMock)
    1108:	fc 01       	movw	r30, r24
    110a:	20 81       	ld	r18, Z
    110c:	21 11       	cpse	r18, r1
    110e:	1d c0       	rjmp	.+58     	; 0x114a <_ZN12RmMemManager16takeSampleAnalogEi+0x52>
    1110:	ec 01       	movw	r28, r24
		return 5;
		
	int batt = analogRead(pinNo); 
    1112:	86 2f       	mov	r24, r22
    1114:	0e 94 a6 2b 	call	0x574c	; 0x574c <analogRead>
    1118:	8c 01       	movw	r16, r24
	float vcc = readVcc();
    111a:	ce 01       	movw	r24, r28
    111c:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN12RmMemManager7readVccEv>
    1120:	6b 01       	movw	r12, r22
    1122:	7c 01       	movw	r14, r24
	batt *= vcc;
    1124:	b8 01       	movw	r22, r16
    1126:	11 0f       	add	r17, r17
    1128:	88 0b       	sbc	r24, r24
    112a:	99 0b       	sbc	r25, r25
    112c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1130:	a7 01       	movw	r20, r14
    1132:	96 01       	movw	r18, r12
    1134:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <__mulsf3>
    1138:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__fixsfsi>
	return batt;
    113c:	07 2e       	mov	r0, r23
    113e:	00 0c       	add	r0, r0
    1140:	88 0b       	sbc	r24, r24
    1142:	99 0b       	sbc	r25, r25
    1144:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <_ZN12RmMemManager16takeSampleAnalogEi+0x5a>

//Returns (analog_reading * vcc)
//TODO: Doesn't really belong in memory manager class :|
float RmMemManager::takeSampleAnalog(int pinNo)	{
	if (_isMock)
		return 5;
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	80 ea       	ldi	r24, 0xA0	; 160
    1150:	90 e4       	ldi	r25, 0x40	; 64
		
	int batt = analogRead(pinNo); 
	float vcc = readVcc();
	batt *= vcc;
	return batt;
}
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	08 95       	ret

00001164 <_Z41__static_initialization_and_destruction_0ii>:
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
    117e:	4b 01       	movw	r8, r22
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	39 f5       	brne	.+78     	; 0x11d2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
    1184:	6f 3f       	cpi	r22, 0xFF	; 255
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	21 f5       	brne	.+72     	; 0x11d2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
char replybuffer[255];
SYS_STATE _currSystemState = SysState_Initialising;
uint32_t readingTime=10*1000; //10 secs for readings - MATCH-R-TIME

//C++ instances
RmMemManager mem(IS_SENSOR_MOCK);
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	81 ea       	ldi	r24, 0xA1	; 161
    118e:	95 e0       	ldi	r25, 0x05	; 5
    1190:	0e 94 c2 05 	call	0xb84	; 0xb84 <_ZN12RmMemManagerC1Eb>
GsmManager gsm(IS_GSM_MOCK);
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	80 e8       	ldi	r24, 0x80	; 128
    1198:	94 e0       	ldi	r25, 0x04	; 4
    119a:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN10GsmManagerC1Eh>
Timing timer(IS_TIMING_MOCK, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME); //TODO: But loop delay will be many times in a given cycle so cycleTime() won't be accurate!
    119e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <readingTime>
    11a2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <readingTime+0x1>
    11a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <readingTime+0x2>
    11aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <readingTime+0x3>
    11ae:	0f 2e       	mov	r0, r31
    11b0:	f0 e8       	ldi	r31, 0x80	; 128
    11b2:	af 2e       	mov	r10, r31
    11b4:	fe ee       	ldi	r31, 0xEE	; 238
    11b6:	bf 2e       	mov	r11, r31
    11b8:	f6 e3       	ldi	r31, 0x36	; 54
    11ba:	cf 2e       	mov	r12, r31
    11bc:	d1 2c       	mov	r13, r1
    11be:	f0 2d       	mov	r31, r0
    11c0:	e1 2c       	mov	r14, r1
    11c2:	f1 2c       	mov	r15, r1
    11c4:	87 01       	movw	r16, r14
    11c6:	e3 94       	inc	r14
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	83 e5       	ldi	r24, 0x53	; 83
    11cc:	94 e0       	ldi	r25, 0x04	; 4
    11ce:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN6TimingC1Ehmmm>
    11d2:	cd 2b       	or	r28, r29
    11d4:	59 f4       	brne	.+22     	; 0x11ec <_Z41__static_initialization_and_destruction_0ii+0x88>
    11d6:	89 20       	and	r8, r9
    11d8:	80 94       	com	r8
    11da:	41 f4       	brne	.+16     	; 0x11ec <_Z41__static_initialization_and_destruction_0ii+0x88>
    11dc:	83 e5       	ldi	r24, 0x53	; 83
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN6TimingD1Ev>
SYS_STATE _currSystemState = SysState_Initialising;
uint32_t readingTime=10*1000; //10 secs for readings - MATCH-R-TIME

//C++ instances
RmMemManager mem(IS_SENSOR_MOCK);
GsmManager gsm(IS_GSM_MOCK);
    11e4:	80 e8       	ldi	r24, 0x80	; 128
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN10GsmManagerD1Ev>
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	08 95       	ret

00001206 <_Z15get_free_memoryv>:
/*********************/
#ifdef DEBUG
extern int __bss_end;
extern void *__brkval;
int get_free_memory()
{
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	00 d0       	rcall	.+0      	; 0x120c <_Z15get_free_memoryv+0x6>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
  int free_memory;
  if((int)__brkval == 0)
    1210:	80 91 4f 08 	lds	r24, 0x084F	; 0x80084f <__brkval>
    1214:	90 91 50 08 	lds	r25, 0x0850	; 0x800850 <__brkval+0x1>
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	31 f4       	brne	.+12     	; 0x1228 <_Z15get_free_memoryv+0x22>
    free_memory = ((int)&free_memory) - ((int)&__bss_end);
    121c:	ce 01       	movw	r24, r28
    121e:	82 55       	subi	r24, 0x52	; 82
    1220:	98 40       	sbci	r25, 0x08	; 8
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <_Z15get_free_memoryv+0x32>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    1228:	9e 01       	movw	r18, r28
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	a9 01       	movw	r20, r18
    1230:	48 1b       	sub	r20, r24
    1232:	59 0b       	sbc	r21, r25
    1234:	5a 83       	std	Y+2, r21	; 0x02
    1236:	49 83       	std	Y+1, r20	; 0x01
  return free_memory;
}
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <_Z10updateLEDsv>:
	//(2 minutes)

	delay(LOOP_DELAY);
}

void updateLEDs(){
    1246:	08 95       	ret

00001248 <_Z17toggleSystemStatel>:
	//_currSystemState &= SysState_InTest;
	//mem.toggleLED(Bottom, LED_STATE.Green_Solid);
	//mem.toggleLED(Top, LED_STATE.Green_Solid);
}

void toggleSystemState(volatile long state){
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	00 d0       	rcall	.+0      	; 0x124e <_Z17toggleSystemStatel+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <_Z17toggleSystemStatel+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	69 83       	std	Y+1, r22	; 0x01
    1256:	7a 83       	std	Y+2, r23	; 0x02
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	9c 83       	std	Y+4, r25	; 0x04
												RM_LOG2("System State OFF: ", (SYS_STATE)~state);
		_currSystemState = (SYS_STATE) ((long)_currSystemState & state); //Off
	}
		
	updateLEDs();
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <_Z14setErrorByFlaglh9SYS_STATE>:
//measure ttf ! and temp!
//discard analog reading too low
//what is ADC-voltage ??
//use fona rtc?

void setErrorByFlag(long memLoc, uint8_t errCode, SYS_STATE systemState = SysState_Initialising){
    126a:	08 95       	ret

0000126c <_Z24initialiseModulePristinej>:

	resetSensorData();	
}

/* Called once to initalise module - for first time in it's life only */
void initialiseModulePristine(unsigned int moduleId){
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	28 97       	sbiw	r28, 0x08	; 8
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61

	volatile long val = SysState_OneTimeInit;
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e2       	ldi	r21, 0x20	; 32
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	49 83       	std	Y+1, r20	; 0x01
    128a:	5a 83       	std	Y+2, r21	; 0x02
    128c:	6b 83       	std	Y+3, r22	; 0x03
    128e:	7c 83       	std	Y+4, r23	; 0x04
	volatile long val2 = ~SysState_OneTimeInit;
    1290:	4f ef       	ldi	r20, 0xFF	; 255
    1292:	5f ed       	ldi	r21, 0xDF	; 223
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	7f ef       	ldi	r23, 0xFF	; 255
    1298:	4d 83       	std	Y+5, r20	; 0x05
    129a:	5e 83       	std	Y+6, r21	; 0x06
    129c:	6f 83       	std	Y+7, r22	; 0x07
    129e:	78 87       	std	Y+8, r23	; 0x08
	toggleSystemState(SysState_OneTimeInit);
	
	mem.setLongToMemory(MEMLOC_MODULE_ID, moduleId);
    12a0:	9c 01       	movw	r18, r24
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	81 ea       	ldi	r24, 0xA1	; 161
    12ac:	95 e0       	ldi	r25, 0x05	; 5
    12ae:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_BOOTCOUNT, 0);
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	68 e0       	ldi	r22, 0x08	; 8
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	81 ea       	ldi	r24, 0xA1	; 161
    12be:	95 e0       	ldi	r25, 0x05	; 5
    12c0:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_READING_ENTRY_COUNT, 0);
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	a9 01       	movw	r20, r18
    12ca:	64 e6       	ldi	r22, 0x64	; 100
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	81 ea       	ldi	r24, 0xA1	; 161
    12d0:	95 e0       	ldi	r25, 0x05	; 5
    12d2:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	a9 01       	movw	r20, r18
    12dc:	6c e0       	ldi	r22, 0x0C	; 12
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	81 ea       	ldi	r24, 0xA1	; 161
    12e2:	95 e0       	ldi	r25, 0x05	; 5
    12e4:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	
	toggleSystemState(~SysState_OneTimeInit);
}
    12e8:	28 96       	adiw	r28, 0x08	; 8
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <_Z8shutdownv>:
//Sends a high on digital pin to reset external CMOS timer
void shutdown() {

  toggleSystemState(SysState_ShuttingDown);
  
  delay(3000); //Wait for any pending writes etc.
    12fa:	68 eb       	ldi	r22, 0xB8	; 184
    12fc:	7b e0       	ldi	r23, 0x0B	; 11
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
  
  digitalWrite(PIN_TIMER_SHUTDOWN, HIGH);
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
  
  //TODO: If PNP is bust, will perpetually remain like this?
  _moduleHasShutdown = true; //Just incase shutdown takes some time
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_moduleHasShutdown>
    1314:	08 95       	ret

00001316 <_Z15resetOnNewCyclev>:
unsigned long _currCycleNumber = 0;
boolean _isAtCycleStart;  //Will be true ONLY once at the 1st loop of every cycle

void resetOnNewCycle(){
	
	_isDailyCycle=false;
    1316:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_isDailyCycle>
	_moduleHasShutdown=false;
    131a:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_moduleHasShutdown>
	_currCycleNumber = false;
    131e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_currCycleNumber>
    1322:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_currCycleNumber+0x1>
    1326:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_currCycleNumber+0x2>
    132a:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <_currCycleNumber+0x3>
	
	//Important to let loop() function know it's at start so can do initialisation
	_isAtCycleStart = true;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_isAtCycleStart>

	if (!gsm.begin()) {
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN10GsmManager5beginEv>
    133c:	81 11       	cpse	r24, r1
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <_Z15resetOnNewCyclev+0x2e>
		//FONA library did not begin - store in ROM, terminate and don't consume power(TODO: Why would this ever happen?)
		shutdown();
    1340:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z8shutdownv>
	}	

	//Reset all
	mem.reset();
    1344:	81 ea       	ldi	r24, 0xA1	; 161
    1346:	95 e0       	ldi	r25, 0x05	; 5
    1348:	0e 94 38 08 	call	0x1070	; 0x1070 <_ZN12RmMemManager5resetEv>
	gsm.reset();
    134c:	80 e8       	ldi	r24, 0x80	; 128
    134e:	94 e0       	ldi	r25, 0x04	; 4
    1350:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN10GsmManager5resetEv>
	timer.reset();
    1354:	83 e5       	ldi	r24, 0x53	; 83
    1356:	94 e0       	ldi	r25, 0x04	; 4
    1358:	0e 94 18 22 	call	0x4430	; 0x4430 <_ZN6Timing5resetEv>
    135c:	08 95       	ret

0000135e <setup>:
}


void setup() {
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	00 d0       	rcall	.+0      	; 0x1364 <setup+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
 
   unsigned char ResetSrc = MCUSR;   // TODO: save reset reason if not 0
    1368:	84 b7       	in	r24, 0x34	; 52
   unsigned volatile int px=9;
    136a:	89 e0       	ldi	r24, 0x09	; 9
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
   MCUSR = 0x00;  // cleared for next reset detection
    1372:	14 be       	out	0x34, r1	; 52
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1374:	26 e0       	ldi	r18, 0x06	; 6
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	52 ec       	ldi	r21, 0xC2	; 194
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	85 e6       	ldi	r24, 0x65	; 101
    1380:	97 e0       	ldi	r25, 0x07	; 7
    1382:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_ZN14HardwareSerial5beginEmh>
	//fona.setHTTPSRedirect(true);

	#ifdef DEBUG

	Serial.begin(115200); //Writes to Serial output
	Serial.print(F("Running"));
    1386:	6c e9       	ldi	r22, 0x9C	; 156
    1388:	73 e0       	ldi	r23, 0x03	; 3
    138a:	85 e6       	ldi	r24, 0x65	; 101
    138c:	97 e0       	ldi	r25, 0x07	; 7
    138e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>

	#endif	

	//Mark all the outputs pins as such
 	pinMode(PIN_TIMER_SHUTDOWN, OUTPUT);
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
 	pinMode(PIN_LED_BOTTOM_GREEN, OUTPUT);
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	89 e0       	ldi	r24, 0x09	; 9
    139e:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
 	pinMode(PIN_LED_BOTTOM_RED, OUTPUT);
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	88 e0       	ldi	r24, 0x08	; 8
    13a6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
 	pinMode(PIN_LED_TOP_GREEN, OUTPUT);
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	8b e0       	ldi	r24, 0x0B	; 11
    13ae:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
 	pinMode(PIN_LED_TOP_RED, OUTPUT);
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	8a e0       	ldi	r24, 0x0A	; 10
    13b6:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
	
	resetOnNewCycle();
    13ba:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15resetOnNewCyclev>
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <_Z10toggleGPRSb>:
/********************************************************/
/********************** Transmission ********************/
/********************************************************/
bool toggleGPRS(boolean onOff){
	
	bool ret = gsm.enableGPRS(onOff);
    13c8:	68 2f       	mov	r22, r24
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	94 e0       	ldi	r25, 0x04	; 4
    13ce:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN10GsmManager10enableGPRSEb>
	if (ret)
		toggleSystemState(SysState_GPRSIsOn); //Success
	else
		toggleSystemState(SysState_GPRSToggleError); //Failure
	return ret;
}
    13d2:	08 95       	ret

000013d4 <_Z10sendViaSmsPc>:

uint8_t sendViaSms(char* data){
	
	toggleSystemState(SysState_GPRSSendingViaSms);
	
	uint8_t ret = gsm.sendViaSms(data);
    13d4:	bc 01       	movw	r22, r24
    13d6:	80 e8       	ldi	r24, 0x80	; 128
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN10GsmManager10sendViaSmsEPc>
		toggleSystemState(SysState_GPRSSendViaSmsError);
		
	toggleSystemState(~SysState_GPRSSendingViaSms);
	
	return ret;
}
    13de:	08 95       	ret

000013e0 <_Z11sendViaGprsPc>:

uint16_t sendViaGprs(char* data){
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <_Z11sendViaGprsPc+0x6>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	
	toggleSystemState(SysState_GPRSSendingViaNet);
	
	volatile uint16_t ret = gsm.sendViaGprs(data);
    13ea:	bc 01       	movw	r22, r24
    13ec:	80 e8       	ldi	r24, 0x80	; 128
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN10GsmManager11sendViaGprsEPc>
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
	if (ret == 0)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
	else
		toggleSystemState(SysState_GPRSSendViaNetError);
	
	toggleSystemState(~SysState_GPRSSendingViaNet);

	return ret;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <_Z14loopSystemTestv>:
	}
		
	updateLEDs();
}

boolean loopSystemTest() {
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
	
	bool doContinue;
	
	if (_isAtCycleStart) {
    140e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_isAtCycleStart>
    1412:	88 23       	and	r24, r24
    1414:	29 f0       	breq	.+10     	; 0x1420 <_Z14loopSystemTestv+0x16>
		
		toggleSystemState(SysState_InTest);
		
		if (!toggleGPRS(true))
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_Z10toggleGPRSb>
		{
			//LED lights will show error condition so leave running to allow user to see (?)
		}
		
		doContinue=true;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	2b c0       	rjmp	.+86     	; 0x1476 <_Z14loopSystemTestv+0x6c>
	}
	else if (timer._at1Min) { //Wait 1 min to initialise GPRS module
    1420:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <timer+0xd>
    1424:	88 23       	and	r24, r24
    1426:	01 f1       	breq	.+64     	; 0x1468 <_Z14loopSystemTestv+0x5e>
												RM_LOG("System-Test : At 1 Min !");
    1428:	61 ea       	ldi	r22, 0xA1	; 161
    142a:	72 e0       	ldi	r23, 0x02	; 2
    142c:	85 e6       	ldi	r24, 0x65	; 101
    142e:	97 e0       	ldi	r25, 0x07	; 7
    1430:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
		uint16_t retCode = sendViaGprs("Test From Module");
    1434:	8a eb       	ldi	r24, 0xBA	; 186
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_Z11sendViaGprsPc>
    143c:	ec 01       	movw	r28, r24
		
		RM_LOG2("GSM Result", retCode);
    143e:	6b ec       	ldi	r22, 0xCB	; 203
    1440:	72 e0       	ldi	r23, 0x02	; 2
    1442:	85 e6       	ldi	r24, 0x65	; 101
    1444:	97 e0       	ldi	r25, 0x07	; 7
    1446:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    144a:	66 ed       	ldi	r22, 0xD6	; 214
    144c:	72 e0       	ldi	r23, 0x02	; 2
    144e:	85 e6       	ldi	r24, 0x65	; 101
    1450:	97 e0       	ldi	r25, 0x07	; 7
    1452:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1456:	4a e0       	ldi	r20, 0x0A	; 10
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	be 01       	movw	r22, r28
    145c:	85 e6       	ldi	r24, 0x65	; 101
    145e:	97 e0       	ldi	r25, 0x07	; 7
    1460:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN5Print7printlnEji>
		//TODO: On failure, send via Sms?

		doContinue=true;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <_Z14loopSystemTestv+0x6c>
	}
	else if (!timer._has1Min30SecsElapsed) { //Wait 30 secs to send msg 
    1468:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <timer+0x13>
    146c:	81 11       	cpse	r24, r1
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <_Z14loopSystemTestv+0x6a>
		doContinue=true;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <_Z14loopSystemTestv+0x6c>
	}
	else{
		toggleSystemState(~SysState_InTest);
		doContinue=false;
    1474:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return doContinue;
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <_Z15resetSensorDatav>:
	
	//Done at start of each cycle but strictly not necessary as
	//system would have re-booted after each cycle but still here as 
	//1) we could change logic and keep it on between certain cycles - e.g. to charge batt
	//2) for unit tests
	noBattReadings=0;
    147c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <noBattReadings>
	noPVReadings=0;
    1480:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <noPVReadings>
	nocurrReadings=0;
    1484:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <nocurrReadings>
	noTempReadings=0;
    1488:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <noTempReadings>

	//Just clear global instance instead of new to prevent fragmentation
	_currSensorData.BattVoltage=0;
    148c:	eb e4       	ldi	r30, 0x4B	; 75
    148e:	f4 e0       	ldi	r31, 0x04	; 4
    1490:	11 82       	std	Z+1, r1	; 0x01
    1492:	10 82       	st	Z, r1
	_currSensorData.Current=0;
    1494:	13 82       	std	Z+3, r1	; 0x03
    1496:	12 82       	std	Z+2, r1	; 0x02
	_currSensorData.PVVoltage=0;
    1498:	15 82       	std	Z+5, r1	; 0x05
    149a:	14 82       	std	Z+4, r1	; 0x04
	_currSensorData.Temperature=0;
    149c:	17 82       	std	Z+7, r1	; 0x07
    149e:	16 82       	std	Z+6, r1	; 0x06
    14a0:	08 95       	ret

000014a2 <_Z17resetAtCycleStartv>:
	//Store for each boot-no?
}

void resetAtCycleStart(){

	resetSensorData();	
    14a2:	0e 94 3e 0a 	call	0x147c	; 0x147c <_Z15resetSensorDatav>
    14a6:	08 95       	ret

000014a8 <_Z17persistSensorDatav>:
	_currSensorData.Temperature=0;
}

void persistSensorData() {
	
	mem.appendSensorEntry(&_currSensorData);
    14a8:	6b e4       	ldi	r22, 0x4B	; 75
    14aa:	74 e0       	ldi	r23, 0x04	; 4
    14ac:	81 ea       	ldi	r24, 0xA1	; 161
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
    14b4:	08 95       	ret

000014b6 <_Z16readSensorsAsyncv>:
}

void readSensorsAsync() {
    14b6:	3f 92       	push	r3
    14b8:	4f 92       	push	r4
    14ba:	5f 92       	push	r5
    14bc:	6f 92       	push	r6
    14be:	7f 92       	push	r7
    14c0:	8f 92       	push	r8
    14c2:	9f 92       	push	r9
    14c4:	af 92       	push	r10
    14c6:	bf 92       	push	r11
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	62 97       	sbiw	r28, 0x12	; 18
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
	//Collect sensor data for x minutes, calc average, remove outliers
	//TODO: Should this be RMS instead?

                                                      RM_LOG(F("Reading Sensors"));
    14e8:	66 ef       	ldi	r22, 0xF6	; 246
    14ea:	72 e0       	ldi	r23, 0x02	; 2
    14ec:	85 e6       	ldi	r24, 0x65	; 101
    14ee:	97 e0       	ldi	r25, 0x07	; 7
    14f0:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    float pvRaw   = mem.takeSampleAnalog(PIN_PV_VOLTAGE);
    14f4:	6e e0       	ldi	r22, 0x0E	; 14
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	81 ea       	ldi	r24, 0xA1	; 161
    14fa:	95 e0       	ldi	r25, 0x05	; 5
    14fc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12RmMemManager16takeSampleAnalogEi>
    1500:	6b 01       	movw	r12, r22
    1502:	7c 01       	movw	r14, r24
    float pvAct = (pvRaw/1024.0) * 15.70589;
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5a e3       	ldi	r21, 0x3A	; 58
    150c:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <__mulsf3>
    1510:	23 e5       	ldi	r18, 0x53	; 83
    1512:	3b e4       	ldi	r19, 0x4B	; 75
    1514:	4b e7       	ldi	r20, 0x7B	; 123
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <__mulsf3>
    151c:	6b 87       	std	Y+11, r22	; 0x0b
    151e:	7c 87       	std	Y+12, r23	; 0x0c
    1520:	8d 87       	std	Y+13, r24	; 0x0d
    1522:	9e 87       	std	Y+14, r25	; 0x0e
    
    float battRaw = mem.takeSampleAnalog(PIN_BATT_VOLTAGE);
    1524:	6f e0       	ldi	r22, 0x0F	; 15
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	81 ea       	ldi	r24, 0xA1	; 161
    152a:	95 e0       	ldi	r25, 0x05	; 5
    152c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12RmMemManager16takeSampleAnalogEi>
    1530:	4b 01       	movw	r8, r22
    1532:	5c 01       	movw	r10, r24
    float battAct = (battRaw/1024.0) * 6.0; //6=28/4.6666
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5a e3       	ldi	r21, 0x3A	; 58
    153c:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <__mulsf3>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 ec       	ldi	r20, 0xC0	; 192
    1546:	50 e4       	ldi	r21, 0x40	; 64
    1548:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <__mulsf3>
    154c:	6f 87       	std	Y+15, r22	; 0x0f
    154e:	78 8b       	std	Y+16, r23	; 0x10
    1550:	89 8b       	std	Y+17, r24	; 0x11
    1552:	9a 8b       	std	Y+18, r25	; 0x12
    
    float currentRaw = mem.takeSampleAnalog(PIN_CURRENT);
    1554:	61 e1       	ldi	r22, 0x11	; 17
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	81 ea       	ldi	r24, 0xA1	; 161
    155a:	95 e0       	ldi	r25, 0x05	; 5
    155c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12RmMemManager16takeSampleAnalogEi>
    1560:	6f 83       	std	Y+7, r22	; 0x07
    1562:	78 87       	std	Y+8, r23	; 0x08
    1564:	89 87       	std	Y+9, r24	; 0x09
    1566:	9a 87       	std	Y+10, r25	; 0x0a
    float currentAct = (battRaw/1024.0) * 1.0; //TODO: Not sure about current calibration yet !

    float tempRaw = mem.takeSampleAnalog(PIN_TEMP);
    1568:	60 e1       	ldi	r22, 0x10	; 16
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	81 ea       	ldi	r24, 0xA1	; 161
    156e:	95 e0       	ldi	r25, 0x05	; 5
    1570:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN12RmMemManager16takeSampleAnalogEi>
    1574:	2b 01       	movw	r4, r22
    1576:	3c 01       	movw	r6, r24
    float tempAct = (tempRaw/1024.0);
    tempAct -= 0.5;
    tempAct = tempAct / 0.01;

                                                    //TODO: Use calibrated 
                                                    RM_LOG2(F("Battery Voltage(Raw):"), battRaw);
    1578:	60 ee       	ldi	r22, 0xE0	; 224
    157a:	72 e0       	ldi	r23, 0x02	; 2
    157c:	85 e6       	ldi	r24, 0x65	; 101
    157e:	97 e0       	ldi	r25, 0x07	; 7
    1580:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1584:	66 ed       	ldi	r22, 0xD6	; 214
    1586:	72 e0       	ldi	r23, 0x02	; 2
    1588:	85 e6       	ldi	r24, 0x65	; 101
    158a:	97 e0       	ldi	r25, 0x07	; 7
    158c:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1590:	22 e0       	ldi	r18, 0x02	; 2
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	b5 01       	movw	r22, r10
    1596:	a4 01       	movw	r20, r8
    1598:	85 e6       	ldi	r24, 0x65	; 101
    159a:	97 e0       	ldi	r25, 0x07	; 7
    159c:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN5Print7printlnEdi>
                                                    RM_LOG2(F("Battery Voltage(Act):"), battAct);
    15a0:	6a ec       	ldi	r22, 0xCA	; 202
    15a2:	72 e0       	ldi	r23, 0x02	; 2
    15a4:	85 e6       	ldi	r24, 0x65	; 101
    15a6:	97 e0       	ldi	r25, 0x07	; 7
    15a8:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    15ac:	66 ed       	ldi	r22, 0xD6	; 214
    15ae:	72 e0       	ldi	r23, 0x02	; 2
    15b0:	85 e6       	ldi	r24, 0x65	; 101
    15b2:	97 e0       	ldi	r25, 0x07	; 7
    15b4:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    15b8:	22 e0       	ldi	r18, 0x02	; 2
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	4f 85       	ldd	r20, Y+15	; 0x0f
    15be:	58 89       	ldd	r21, Y+16	; 0x10
    15c0:	69 89       	ldd	r22, Y+17	; 0x11
    15c2:	7a 89       	ldd	r23, Y+18	; 0x12
    15c4:	85 e6       	ldi	r24, 0x65	; 101
    15c6:	97 e0       	ldi	r25, 0x07	; 7
    15c8:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN5Print7printlnEdi>
                                                    RM_LOG2(F("PV Voltage(Raw):"), pvRaw);
    15cc:	69 eb       	ldi	r22, 0xB9	; 185
    15ce:	72 e0       	ldi	r23, 0x02	; 2
    15d0:	85 e6       	ldi	r24, 0x65	; 101
    15d2:	97 e0       	ldi	r25, 0x07	; 7
    15d4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    15d8:	66 ed       	ldi	r22, 0xD6	; 214
    15da:	72 e0       	ldi	r23, 0x02	; 2
    15dc:	85 e6       	ldi	r24, 0x65	; 101
    15de:	97 e0       	ldi	r25, 0x07	; 7
    15e0:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    15e4:	22 e0       	ldi	r18, 0x02	; 2
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	b7 01       	movw	r22, r14
    15ea:	a6 01       	movw	r20, r12
    15ec:	85 e6       	ldi	r24, 0x65	; 101
    15ee:	97 e0       	ldi	r25, 0x07	; 7
    15f0:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN5Print7printlnEdi>
                                                    RM_LOG2(F("PV Voltage(Act):"), pvAct);
    15f4:	68 ea       	ldi	r22, 0xA8	; 168
    15f6:	72 e0       	ldi	r23, 0x02	; 2
    15f8:	85 e6       	ldi	r24, 0x65	; 101
    15fa:	97 e0       	ldi	r25, 0x07	; 7
    15fc:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1600:	66 ed       	ldi	r22, 0xD6	; 214
    1602:	72 e0       	ldi	r23, 0x02	; 2
    1604:	85 e6       	ldi	r24, 0x65	; 101
    1606:	97 e0       	ldi	r25, 0x07	; 7
    1608:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    160c:	22 e0       	ldi	r18, 0x02	; 2
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4b 85       	ldd	r20, Y+11	; 0x0b
    1612:	5c 85       	ldd	r21, Y+12	; 0x0c
    1614:	6d 85       	ldd	r22, Y+13	; 0x0d
    1616:	7e 85       	ldd	r23, Y+14	; 0x0e
    1618:	85 e6       	ldi	r24, 0x65	; 101
    161a:	97 e0       	ldi	r25, 0x07	; 7
    161c:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN5Print7printlnEdi>


    //TODO: Ideally some measure of variance in addition to avg should be got
	
    //Incremental average
    if (battRaw > 0) {
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	c5 01       	movw	r24, r10
    1628:	b4 01       	movw	r22, r8
    162a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__gesf2>
    162e:	18 16       	cp	r1, r24
    1630:	b4 f5       	brge	.+108    	; 0x169e <_Z16readSensorsAsyncv+0x1e8>
      
      volatile long currReading = _currSensorData.BattVoltage * noBattReadings;
    1632:	0b e4       	ldi	r16, 0x4B	; 75
    1634:	14 e0       	ldi	r17, 0x04	; 4
    1636:	f8 01       	movw	r30, r16
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	30 90 40 04 	lds	r3, 0x0440	; 0x800440 <noBattReadings>
    1640:	32 9e       	mul	r3, r18
    1642:	c0 01       	movw	r24, r0
    1644:	33 9e       	mul	r3, r19
    1646:	90 0d       	add	r25, r0
    1648:	11 24       	eor	r1, r1
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	ab 83       	std	Y+3, r26	; 0x03
    1654:	bc 83       	std	Y+4, r27	; 0x04
	  volatile int px=9;
    1656:	89 e0       	ldi	r24, 0x09	; 9
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
      noBattReadings++;
    165e:	33 94       	inc	r3
    1660:	30 92 40 04 	sts	0x0440, r3	; 0x800440 <noBattReadings>
      _currSensorData.BattVoltage = (currReading + battRaw)/noBattReadings; //Will be >0 denom because of above
    1664:	69 81       	ldd	r22, Y+1	; 0x01
    1666:	7a 81       	ldd	r23, Y+2	; 0x02
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1670:	a5 01       	movw	r20, r10
    1672:	94 01       	movw	r18, r8
    1674:	0e 94 0d 24 	call	0x481a	; 0x481a <__addsf3>
    1678:	4b 01       	movw	r8, r22
    167a:	5c 01       	movw	r10, r24
    167c:	63 2d       	mov	r22, r3
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	c5 01       	movw	r24, r10
    168e:	b4 01       	movw	r22, r8
    1690:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__divsf3>
    1694:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__fixunssfsi>
    1698:	f8 01       	movw	r30, r16
    169a:	71 83       	std	Z+1, r23	; 0x01
    169c:	60 83       	st	Z, r22
    }
    
    if (pvRaw > 0) {
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	a9 01       	movw	r20, r18
    16a4:	c7 01       	movw	r24, r14
    16a6:	b6 01       	movw	r22, r12
    16a8:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__gesf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	54 f5       	brge	.+84     	; 0x1704 <_Z16readSensorsAsyncv+0x24e>
      
      long currReading = _currSensorData.PVVoltage * noPVReadings;
    16b0:	0b e4       	ldi	r16, 0x4B	; 75
    16b2:	14 e0       	ldi	r17, 0x04	; 4
    16b4:	f8 01       	movw	r30, r16
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	95 81       	ldd	r25, Z+5	; 0x05
    16ba:	b0 90 3f 04 	lds	r11, 0x043F	; 0x80043f <noPVReadings>
    16be:	b8 9e       	mul	r11, r24
    16c0:	b0 01       	movw	r22, r0
    16c2:	b9 9e       	mul	r11, r25
    16c4:	70 0d       	add	r23, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
      noPVReadings++;
    16cc:	b3 94       	inc	r11
    16ce:	b0 92 3f 04 	sts	0x043F, r11	; 0x80043f <noPVReadings>
      _currSensorData.PVVoltage = (currReading + pvRaw)/noPVReadings; //Will be >0 denom because of above
    16d2:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    16d6:	a7 01       	movw	r20, r14
    16d8:	96 01       	movw	r18, r12
    16da:	0e 94 0d 24 	call	0x481a	; 0x481a <__addsf3>
    16de:	6b 01       	movw	r12, r22
    16e0:	7c 01       	movw	r14, r24
    16e2:	6b 2d       	mov	r22, r11
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__divsf3>
    16fa:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__fixunssfsi>
    16fe:	f8 01       	movw	r30, r16
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    }
    
    if (currentRaw > 0) {
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__gesf2>
    1716:	18 16       	cp	r1, r24
    1718:	64 f5       	brge	.+88     	; 0x1772 <_Z16readSensorsAsyncv+0x2bc>
      
      long currReading = _currSensorData.Current * nocurrReadings;
    171a:	0b e4       	ldi	r16, 0x4B	; 75
    171c:	14 e0       	ldi	r17, 0x04	; 4
    171e:	f8 01       	movw	r30, r16
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	f0 90 3e 04 	lds	r15, 0x043E	; 0x80043e <nocurrReadings>
    1728:	f8 9e       	mul	r15, r24
    172a:	b0 01       	movw	r22, r0
    172c:	f9 9e       	mul	r15, r25
    172e:	70 0d       	add	r23, r0
    1730:	11 24       	eor	r1, r1
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
      nocurrReadings++;
    1736:	f3 94       	inc	r15
    1738:	f0 92 3e 04 	sts	0x043E, r15	; 0x80043e <nocurrReadings>
      _currSensorData.Current = (currReading + currentRaw)/nocurrReadings; //Will be >0 denom because of above
    173c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    1740:	2f 81       	ldd	r18, Y+7	; 0x07
    1742:	38 85       	ldd	r19, Y+8	; 0x08
    1744:	49 85       	ldd	r20, Y+9	; 0x09
    1746:	5a 85       	ldd	r21, Y+10	; 0x0a
    1748:	0e 94 0d 24 	call	0x481a	; 0x481a <__addsf3>
    174c:	4b 01       	movw	r8, r22
    174e:	5c 01       	movw	r10, r24
    1750:	6f 2d       	mov	r22, r15
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    175c:	9b 01       	movw	r18, r22
    175e:	ac 01       	movw	r20, r24
    1760:	c5 01       	movw	r24, r10
    1762:	b4 01       	movw	r22, r8
    1764:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__divsf3>
    1768:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__fixunssfsi>
    176c:	f8 01       	movw	r30, r16
    176e:	73 83       	std	Z+3, r23	; 0x03
    1770:	62 83       	std	Z+2, r22	; 0x02
    }
    
    if (tempRaw > 0) {
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	c3 01       	movw	r24, r6
    177a:	b2 01       	movw	r22, r4
    177c:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__gesf2>
    1780:	18 16       	cp	r1, r24
    1782:	54 f5       	brge	.+84     	; 0x17d8 <_Z16readSensorsAsyncv+0x322>
      
      long currReading = _currSensorData.Temperature * noTempReadings;
    1784:	0b e4       	ldi	r16, 0x4B	; 75
    1786:	14 e0       	ldi	r17, 0x04	; 4
    1788:	f8 01       	movw	r30, r16
    178a:	86 81       	ldd	r24, Z+6	; 0x06
    178c:	97 81       	ldd	r25, Z+7	; 0x07
    178e:	f0 90 3d 04 	lds	r15, 0x043D	; 0x80043d <noTempReadings>
    1792:	f8 9e       	mul	r15, r24
    1794:	b0 01       	movw	r22, r0
    1796:	f9 9e       	mul	r15, r25
    1798:	70 0d       	add	r23, r0
    179a:	11 24       	eor	r1, r1
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
      noTempReadings++;
    17a0:	f3 94       	inc	r15
    17a2:	f0 92 3d 04 	sts	0x043D, r15	; 0x80043d <noTempReadings>
      _currSensorData.Temperature = (currReading + tempRaw)/noTempReadings; //Will be >0 denom because of above
    17a6:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    17aa:	a3 01       	movw	r20, r6
    17ac:	92 01       	movw	r18, r4
    17ae:	0e 94 0d 24 	call	0x481a	; 0x481a <__addsf3>
    17b2:	4b 01       	movw	r8, r22
    17b4:	5c 01       	movw	r10, r24
    17b6:	6f 2d       	mov	r22, r15
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    17c2:	9b 01       	movw	r18, r22
    17c4:	ac 01       	movw	r20, r24
    17c6:	c5 01       	movw	r24, r10
    17c8:	b4 01       	movw	r22, r8
    17ca:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__divsf3>
    17ce:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__fixunssfsi>
    17d2:	f8 01       	movw	r30, r16
    17d4:	77 83       	std	Z+7, r23	; 0x07
    17d6:	66 83       	std	Z+6, r22	; 0x06
    }
                                                     // RM_LOG2(F("Sensors-Curr"), cData.Current);

	//TODO: If any above are 0, record it as an error ("no of 0s")
}
    17d8:	62 96       	adiw	r28, 0x12	; 18
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	6f 90       	pop	r6
    1800:	5f 90       	pop	r5
    1802:	4f 90       	pop	r4
    1804:	3f 90       	pop	r3
    1806:	08 95       	ret

00001808 <_Z17prepareDataForSMSP10SensorDatajPcj>:


void prepareDataForSMS(SensorData* readings, unsigned int noOfReadings, 
					   char* strBuffer, unsigned int maxStrBuffer) {
    1808:	08 95       	ret

0000180a <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>:
//ModuleID-BootCount-NetworkStatus-RSSI-BattPct-(BattCurrentPVTempErrchar,)*
uint16_t prepareDataForGPRS(SensorData* readings, unsigned int noOfReadings, 
						long moduleId, long bootCount, uint8_t networkStatus,
						uint8_t rssi, uint16_t batPct,
						char* strBuffer, unsigned int maxStrBuffer) //TODO: Take max buffer into account
{
    180a:	4f 92       	push	r4
    180c:	5f 92       	push	r5
    180e:	6f 92       	push	r6
    1810:	7f 92       	push	r7
    1812:	8f 92       	push	r8
    1814:	9f 92       	push	r9
    1816:	af 92       	push	r10
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	2d 97       	sbiw	r28, 0x0d	; 13
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	2c 01       	movw	r4, r24
    183a:	3b 01       	movw	r6, r22
    183c:	ca 01       	movw	r24, r20
    183e:	b9 01       	movw	r22, r18
    1840:	ea 86       	std	Y+10, r14	; 0x0a
    1842:	fb 86       	std	Y+11, r15	; 0x0b
    1844:	0c 87       	std	Y+12, r16	; 0x0c
    1846:	1d 87       	std	Y+13, r17	; 0x0d
    1848:	ef 8c       	ldd	r14, Y+31	; 0x1f
    184a:	f8 a0       	ldd	r15, Y+32	; 0x20
	volatile byte offset = 0;
    184c:	19 82       	std	Y+1, r1	; 0x01
	char* origiBufferStart = strBuffer;
	
	//strBuffer = utoa(0, strBuffer, 10);
	offset = writeWithPad(strBuffer, moduleId,0);
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	c7 01       	movw	r24, r14
    1852:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    1856:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    1858:	09 81       	ldd	r16, Y+1	; 0x01
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	f7 01       	movw	r30, r14
    185e:	e0 0f       	add	r30, r16
    1860:	f1 1f       	adc	r31, r17
	
	*strBuffer++='-'; //Add a dash
    1862:	0f 5f       	subi	r16, 0xFF	; 255
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	0e 0d       	add	r16, r14
    1868:	1f 1d       	adc	r17, r15
    186a:	0f 2e       	mov	r0, r31
    186c:	fd e2       	ldi	r31, 0x2D	; 45
    186e:	df 2e       	mov	r13, r31
    1870:	f0 2d       	mov	r31, r0
    1872:	d0 82       	st	Z, r13
	
	offset = writeWithPad(strBuffer, bootCount, 0);
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	6a 85       	ldd	r22, Y+10	; 0x0a
    1878:	7b 85       	ldd	r23, Y+11	; 0x0b
    187a:	c8 01       	movw	r24, r16
    187c:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    1880:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	f8 01       	movw	r30, r16
    1888:	e8 0f       	add	r30, r24
    188a:	f9 1f       	adc	r31, r25
	
	*strBuffer++='-'; //Add a dash
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	08 0f       	add	r16, r24
    1890:	19 1f       	adc	r17, r25
    1892:	d0 82       	st	Z, r13

	//Network status
	offset = writeByteWithPad(strBuffer, networkStatus, 0);
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	6c 2d       	mov	r22, r12
    1898:	c8 01       	movw	r24, r16
    189a:	0e 94 6f 05 	call	0xade	; 0xade <_Z16writeByteWithPadPchh>
    189e:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	f8 01       	movw	r30, r16
    18a6:	e8 0f       	add	r30, r24
    18a8:	f9 1f       	adc	r31, r25
	
	*strBuffer++='-'; //Add a dash
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	08 0f       	add	r16, r24
    18ae:	19 1f       	adc	r17, r25
    18b0:	d0 82       	st	Z, r13
	//TODO: Below won't work as GPRS not on yet...?! Maybe?
	
	
	
	//Get network signal
	offset = writeByteWithPad(strBuffer, rssi, 0);
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	6a 2d       	mov	r22, r10
    18b6:	c8 01       	movw	r24, r16
    18b8:	0e 94 6f 05 	call	0xade	; 0xade <_Z16writeByteWithPadPchh>
    18bc:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	f8 01       	movw	r30, r16
    18c4:	e8 0f       	add	r30, r24
    18c6:	f9 1f       	adc	r31, r25

	*strBuffer++='-'; //Add a dash
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	08 0f       	add	r16, r24
    18cc:	19 1f       	adc	r17, r25
    18ce:	d0 82       	st	Z, r13
	
	//Get battery pct
	offset = writeWithPad(strBuffer, batPct, 0);
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	b4 01       	movw	r22, r8
    18d4:	c8 01       	movw	r24, r16
    18d6:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    18da:	89 83       	std	Y+1, r24	; 0x01
	strBuffer += offset;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	08 0f       	add	r16, r24
    18e0:	11 1d       	adc	r17, r1
	
	if (noOfReadings > 0) //Could have no new readings but we still send above data
    18e2:	61 14       	cp	r6, r1
    18e4:	71 04       	cpc	r7, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xe0>
    18e8:	51 c0       	rjmp	.+162    	; 0x198c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
	{
		*strBuffer++='-'; //Add a dash
    18ea:	8d e2       	ldi	r24, 0x2D	; 45
    18ec:	f8 01       	movw	r30, r16
    18ee:	80 83       	st	Z, r24
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
	
		for(unsigned int i=0;i<noOfReadings;i++)
    18f4:	c1 2c       	mov	r12, r1
    18f6:	d1 2c       	mov	r13, r1
    18f8:	c6 14       	cp	r12, r6
    18fa:	d7 04       	cpc	r13, r7
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xf6>
    18fe:	46 c0       	rjmp	.+140    	; 0x198c <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x182>
		{
			SensorData r = readings[i];
    1900:	f6 01       	movw	r30, r12
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	e4 0d       	add	r30, r4
    1910:	f5 1d       	adc	r31, r5
    1912:	88 e0       	ldi	r24, 0x08	; 8
    1914:	de 01       	movw	r26, r28
    1916:	12 96       	adiw	r26, 0x02	; 2
    1918:	01 90       	ld	r0, Z+
    191a:	0d 92       	st	X+, r0
    191c:	8a 95       	dec	r24
    191e:	e1 f7       	brne	.-8      	; 0x1918 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x10e>
		
			offset = writeWithPad(strBuffer, r.BattVoltage, 4);
    1920:	6a 81       	ldd	r22, Y+2	; 0x02
    1922:	7b 81       	ldd	r23, Y+3	; 0x03
    1924:	44 e0       	ldi	r20, 0x04	; 4
    1926:	c8 01       	movw	r24, r16
    1928:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    192c:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	08 0f       	add	r16, r24
    1932:	11 1d       	adc	r17, r1

			offset = writeWithPad(strBuffer, r.Current, 4);
    1934:	6c 81       	ldd	r22, Y+4	; 0x04
    1936:	7d 81       	ldd	r23, Y+5	; 0x05
    1938:	44 e0       	ldi	r20, 0x04	; 4
    193a:	c8 01       	movw	r24, r16
    193c:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    1940:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	08 0f       	add	r16, r24
    1946:	11 1d       	adc	r17, r1

			offset = writeWithPad(strBuffer, r.PVVoltage, 4);
    1948:	6e 81       	ldd	r22, Y+6	; 0x06
    194a:	7f 81       	ldd	r23, Y+7	; 0x07
    194c:	44 e0       	ldi	r20, 0x04	; 4
    194e:	c8 01       	movw	r24, r16
    1950:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    1954:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	08 0f       	add	r16, r24
    195a:	11 1d       	adc	r17, r1

			offset = writeWithPad(strBuffer, r.Temperature, 4);
    195c:	68 85       	ldd	r22, Y+8	; 0x08
    195e:	79 85       	ldd	r23, Y+9	; 0x09
    1960:	44 e0       	ldi	r20, 0x04	; 4
    1962:	c8 01       	movw	r24, r16
    1964:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    1968:	89 83       	std	Y+1, r24	; 0x01
			strBuffer += offset;
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	08 0f       	add	r16, r24
    196e:	11 1d       	adc	r17, r1
				//
				//offset = writeCharWithPad(strBuffer, r.ErrorChar, 0);
				//strBuffer += offset;
			//}

			if (i < noOfReadings-1)
    1970:	c3 01       	movw	r24, r6
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	c8 16       	cp	r12, r24
    1976:	d9 06       	cpc	r13, r25
    1978:	28 f4       	brcc	.+10     	; 0x1984 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0x17a>
				*strBuffer++=','; //Add a comma between reading sets
    197a:	8c e2       	ldi	r24, 0x2C	; 44
    197c:	f8 01       	movw	r30, r16
    197e:	80 83       	st	Z, r24
    1980:	0f 5f       	subi	r16, 0xFF	; 255
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
	
	if (noOfReadings > 0) //Could have no new readings but we still send above data
	{
		*strBuffer++='-'; //Add a dash
	
		for(unsigned int i=0;i<noOfReadings;i++)
    1984:	ff ef       	ldi	r31, 0xFF	; 255
    1986:	cf 1a       	sub	r12, r31
    1988:	df 0a       	sbc	r13, r31
    198a:	b6 cf       	rjmp	.-148    	; 0x18f8 <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj+0xee>
			if (i < noOfReadings-1)
				*strBuffer++=','; //Add a comma between reading sets
		}
	}
	
	*strBuffer='\0'; //Terminate string
    198c:	f8 01       	movw	r30, r16
    198e:	10 82       	st	Z, r1
	
	return strBuffer-origiBufferStart;
}
    1990:	c8 01       	movw	r24, r16
    1992:	8e 19       	sub	r24, r14
    1994:	9f 09       	sbc	r25, r15
    1996:	2d 96       	adiw	r28, 0x0d	; 13
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	7f 90       	pop	r7
    19ba:	6f 90       	pop	r6
    19bc:	5f 90       	pop	r5
    19be:	4f 90       	pop	r4
    19c0:	08 95       	ret

000019c2 <_Z20execTransmitReadingsP14DailyCycleData>:
	else
		toggleSystemState(SysState_GPRSToggleError); //Failure
	return ret;
}

void execTransmitReadings(DailyCycleData* ret) {
    19c2:	4f 92       	push	r4
    19c4:	5f 92       	push	r5
    19c6:	6f 92       	push	r6
    19c8:	7f 92       	push	r7
    19ca:	8f 92       	push	r8
    19cc:	9f 92       	push	r9
    19ce:	af 92       	push	r10
    19d0:	bf 92       	push	r11
    19d2:	cf 92       	push	r12
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	c0 58       	subi	r28, 0x80	; 128
    19e8:	d1 09       	sbc	r29, r1
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	3c 01       	movw	r6, r24

	ret->BootNo = _currCycleNumber;
    19f6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_currCycleNumber>
    19fa:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_currCycleNumber+0x1>
    19fe:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <_currCycleNumber+0x2>
    1a02:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <_currCycleNumber+0x3>
    1a06:	f3 01       	movw	r30, r6
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
		
	//Load the readings to be sent into memory  
	byte requestedLoadCount = 2;
	unsigned long loadedUpTo = 0;
    1a10:	19 8a       	std	Y+17, r1	; 0x11
    1a12:	1a 8a       	std	Y+18, r1	; 0x12
    1a14:	1b 8a       	std	Y+19, r1	; 0x13
    1a16:	1c 8a       	std	Y+20, r1	; 0x14
  	SensorData dszReadings[requestedLoadCount];
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	31 96       	adiw	r30, 0x01	; 1
    1a20:	8f 3f       	cpi	r24, 0xFF	; 255
    1a22:	2f ef       	ldi	r18, 0xFF	; 255
    1a24:	92 07       	cpc	r25, r18
    1a26:	59 f0       	breq	.+22     	; 0x1a3e <_Z20execTransmitReadingsP14DailyCycleData+0x7c>
} ModuleData;


//TODO: All these to be uint16_t ?

typedef struct SensorData{
    1a28:	11 82       	std	Z+1, r1	; 0x01
    1a2a:	10 82       	st	Z, r1
    1a2c:	13 82       	std	Z+3, r1	; 0x03
    1a2e:	12 82       	std	Z+2, r1	; 0x02
    1a30:	15 82       	std	Z+5, r1	; 0x05
    1a32:	14 82       	std	Z+4, r1	; 0x04
    1a34:	17 82       	std	Z+7, r1	; 0x07
    1a36:	16 82       	std	Z+6, r1	; 0x06
    1a38:	38 96       	adiw	r30, 0x08	; 8
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 cf       	rjmp	.-30     	; 0x1a20 <_Z20execTransmitReadingsP14DailyCycleData+0x5e>
  	unsigned actLoadCount = mem.loadSensorData(dszReadings, requestedLoadCount, &loadedUpTo);
    1a3e:	9e 01       	movw	r18, r28
    1a40:	2f 5e       	subi	r18, 0xEF	; 239
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	42 e0       	ldi	r20, 0x02	; 2
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	be 01       	movw	r22, r28
    1a4a:	6f 5f       	subi	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	81 ea       	ldi	r24, 0xA1	; 161
    1a50:	95 e0       	ldi	r25, 0x05	; 5
    1a52:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    1a56:	d6 2e       	mov	r13, r22
    1a58:	b7 2e       	mov	r11, r23

	ret->NoOfReadings = actLoadCount;
    1a5a:	d3 01       	movw	r26, r6
    1a5c:	16 96       	adiw	r26, 0x06	; 6
    1a5e:	6c 93       	st	X, r22
		
	unsigned long moduleId = mem.getLongFromMemory(MEMLOC_MODULE_ID);
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	81 ea       	ldi	r24, 0xA1	; 161
    1a66:	95 e0       	ldi	r25, 0x05	; 5
    1a68:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    1a6c:	c3 58       	subi	r28, 0x83	; 131
    1a6e:	df 4f       	sbci	r29, 0xFF	; 255
    1a70:	68 83       	st	Y, r22
    1a72:	79 83       	std	Y+1, r23	; 0x01
    1a74:	8a 83       	std	Y+2, r24	; 0x02
    1a76:	9b 83       	std	Y+3, r25	; 0x03
    1a78:	cd 57       	subi	r28, 0x7D	; 125
    1a7a:	d0 40       	sbci	r29, 0x00	; 0
	ret->RSSI = gsm.getRSSI();
    1a7c:	80 e8       	ldi	r24, 0x80	; 128
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_ZN10GsmManager7getRSSIEv>
    1a84:	f3 01       	movw	r30, r6
    1a86:	86 87       	std	Z+14, r24	; 0x0e
	ret->NetworkStatus = gsm.getNetworkStatus();
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	94 e0       	ldi	r25, 0x04	; 4
    1a8c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_ZN10GsmManager16getNetworkStatusEv>
    1a90:	d3 01       	movw	r26, r6
    1a92:	1d 96       	adiw	r26, 0x0d	; 13
    1a94:	8c 93       	st	X, r24
	
	//Get battery pct
	uint16_t batPct=0;
    1a96:	1e 8a       	std	Y+22, r1	; 0x16
    1a98:	1d 8a       	std	Y+21, r1	; 0x15
	if (!gsm.getBattPercent(&batPct))
    1a9a:	be 01       	movw	r22, r28
    1a9c:	6b 5e       	subi	r22, 0xEB	; 235
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	80 e8       	ldi	r24, 0x80	; 128
    1aa2:	94 e0       	ldi	r25, 0x04	; 4
    1aa4:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN10GsmManager14getBattPercentEPj>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	04 c0       	rjmp	.+8      	; 0x1ab4 <_Z20execTransmitReadingsP14DailyCycleData+0xf2>
		ret->GetBatteryFailure = true;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	f3 01       	movw	r30, r6
    1ab0:	85 83       	std	Z+5, r24	; 0x05
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <_Z20execTransmitReadingsP14DailyCycleData+0xfa>
	else
		ret->BattPct = batPct;
    1ab4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ab6:	d3 01       	movw	r26, r6
    1ab8:	1c 96       	adiw	r26, 0x0c	; 12
    1aba:	8c 93       	st	X, r24
	//Even if no ret.NoOfReadings == 0, still get signal etc data and store/send
	
	//char buffer
	//TODO: Test correctness with increasing buffer sizes to get optimal
  	uint16_t DATA_BUFFER_LEN = 100;
  	char strBuffer[DATA_BUFFER_LEN]=""; //TODO: MAX?
    1abc:	1a 8e       	std	Y+26, r1	; 0x1a
    1abe:	19 8e       	std	Y+25, r1	; 0x19
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	7b 96       	adiw	r30, 0x1b	; 27
    1ac4:	82 e6       	ldi	r24, 0x62	; 98
    1ac6:	df 01       	movw	r26, r30
    1ac8:	1d 92       	st	X+, r1
    1aca:	8a 95       	dec	r24
    1acc:	e9 f7       	brne	.-6      	; 0x1ac8 <_Z20execTransmitReadingsP14DailyCycleData+0x106>

  	ret->GsmMessageLength =
		prepareDataForGPRS(dszReadings, actLoadCount, moduleId, ret->BootNo,
    1ace:	f3 01       	movw	r30, r6
    1ad0:	e0 80       	ld	r14, Z
    1ad2:	f1 80       	ldd	r15, Z+1	; 0x01
    1ad4:	02 81       	ldd	r16, Z+2	; 0x02
    1ad6:	13 81       	ldd	r17, Z+3	; 0x03
    1ad8:	8d 88       	ldd	r8, Y+21	; 0x15
    1ada:	9e 88       	ldd	r9, Y+22	; 0x16
    1adc:	1f 92       	push	r1
    1ade:	84 e6       	ldi	r24, 0x64	; 100
    1ae0:	8f 93       	push	r24
    1ae2:	2e 01       	movw	r4, r28
    1ae4:	f9 e1       	ldi	r31, 0x19	; 25
    1ae6:	4f 0e       	add	r4, r31
    1ae8:	51 1c       	adc	r5, r1
    1aea:	5f 92       	push	r5
    1aec:	4f 92       	push	r4
    1aee:	d3 01       	movw	r26, r6
    1af0:	1e 96       	adiw	r26, 0x0e	; 14
    1af2:	ac 90       	ld	r10, X
    1af4:	1e 97       	sbiw	r26, 0x0e	; 14
    1af6:	1d 96       	adiw	r26, 0x0d	; 13
    1af8:	cc 90       	ld	r12, X
    1afa:	c3 58       	subi	r28, 0x83	; 131
    1afc:	df 4f       	sbci	r29, 0xFF	; 255
    1afe:	28 81       	ld	r18, Y
    1b00:	39 81       	ldd	r19, Y+1	; 0x01
    1b02:	4a 81       	ldd	r20, Y+2	; 0x02
    1b04:	5b 81       	ldd	r21, Y+3	; 0x03
    1b06:	cd 57       	subi	r28, 0x7D	; 125
    1b08:	d0 40       	sbci	r29, 0x00	; 0
    1b0a:	6d 2d       	mov	r22, r13
    1b0c:	7b 2d       	mov	r23, r11
    1b0e:	ce 01       	movw	r24, r28
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	0e 94 05 0c 	call	0x180a	; 0x180a <_Z18prepareDataForGPRSP10SensorDatajllhhjPcj>
						ret->NetworkStatus, ret->RSSI, batPct, strBuffer, DATA_BUFFER_LEN);
    1b16:	f3 01       	movw	r30, r6
    1b18:	90 87       	std	Z+8, r25	; 0x08
    1b1a:	87 83       	std	Z+7, r24	; 0x07


volatile int test = strlen(strBuffer);
    1b1c:	f2 01       	movw	r30, r4
    1b1e:	01 90       	ld	r0, Z+
    1b20:	00 20       	and	r0, r0
    1b22:	e9 f7       	brne	.-6      	; 0x1b1e <_Z20execTransmitReadingsP14DailyCycleData+0x15c>
    1b24:	31 97       	sbiw	r30, 0x01	; 1
    1b26:	e4 19       	sub	r30, r4
    1b28:	f5 09       	sbc	r31, r5
    1b2a:	f8 8f       	std	Y+24, r31	; 0x18
    1b2c:	ef 8b       	std	Y+23, r30	; 0x17
	//Send via GPRS - on failure, try SMS
	ret->GsmFailureCode = sendViaGprs(strBuffer);
    1b2e:	c2 01       	movw	r24, r4
    1b30:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_Z11sendViaGprsPc>
    1b34:	d3 01       	movw	r26, r6
    1b36:	1a 96       	adiw	r26, 0x0a	; 10
    1b38:	9c 93       	st	X, r25
    1b3a:	8e 93       	st	-X, r24
    1b3c:	19 97       	sbiw	r26, 0x09	; 9

	if (ret->GsmFailureCode > 0) {
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	89 2b       	or	r24, r25
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <_Z20execTransmitReadingsP14DailyCycleData+0x18a>
    1b4a:	47 c0       	rjmp	.+142    	; 0x1bda <_Z20execTransmitReadingsP14DailyCycleData+0x218>
														RM_LOG2(F("GPRS Failed-Trying SMS..."),ret->GsmFailureCode);
    1b4c:	6e e2       	ldi	r22, 0x2E	; 46
    1b4e:	73 e0       	ldi	r23, 0x03	; 3
    1b50:	85 e6       	ldi	r24, 0x65	; 101
    1b52:	97 e0       	ldi	r25, 0x07	; 7
    1b54:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b58:	66 ed       	ldi	r22, 0xD6	; 214
    1b5a:	72 e0       	ldi	r23, 0x02	; 2
    1b5c:	85 e6       	ldi	r24, 0x65	; 101
    1b5e:	97 e0       	ldi	r25, 0x07	; 7
    1b60:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1b64:	f3 01       	movw	r30, r6
    1b66:	61 85       	ldd	r22, Z+9	; 0x09
    1b68:	72 85       	ldd	r23, Z+10	; 0x0a
    1b6a:	4a e0       	ldi	r20, 0x0A	; 10
    1b6c:	50 e0       	ldi	r21, 0x00	; 0
    1b6e:	85 e6       	ldi	r24, 0x65	; 101
    1b70:	97 e0       	ldi	r25, 0x07	; 7
    1b72:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN5Print7printlnEji>
		memset(strBuffer, 0, DATA_BUFFER_LEN); //TODO: TEST
    1b76:	84 e6       	ldi	r24, 0x64	; 100
    1b78:	d2 01       	movw	r26, r4
    1b7a:	1d 92       	st	X+, r1
    1b7c:	8a 95       	dec	r24
    1b7e:	e9 f7       	brne	.-6      	; 0x1b7a <_Z20execTransmitReadingsP14DailyCycleData+0x1b8>
		const uint8_t SMS_LIMIT = 140;

		prepareDataForSMS(dszReadings, actLoadCount, strBuffer, SMS_LIMIT);
														RM_LOG2(F("Sending Sensors Cmpt"),strBuffer);
    1b80:	69 e1       	ldi	r22, 0x19	; 25
    1b82:	73 e0       	ldi	r23, 0x03	; 3
    1b84:	85 e6       	ldi	r24, 0x65	; 101
    1b86:	97 e0       	ldi	r25, 0x07	; 7
    1b88:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b8c:	66 ed       	ldi	r22, 0xD6	; 214
    1b8e:	72 e0       	ldi	r23, 0x02	; 2
    1b90:	85 e6       	ldi	r24, 0x65	; 101
    1b92:	97 e0       	ldi	r25, 0x07	; 7
    1b94:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1b98:	b2 01       	movw	r22, r4
    1b9a:	85 e6       	ldi	r24, 0x65	; 101
    1b9c:	97 e0       	ldi	r25, 0x07	; 7
    1b9e:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
		ret->SmsFailureCode = sendViaSms(strBuffer);
    1ba2:	c2 01       	movw	r24, r4
    1ba4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_Z10sendViaSmsPc>
    1ba8:	f3 01       	movw	r30, r6
    1baa:	83 87       	std	Z+11, r24	; 0x0b
		if (ret->SmsFailureCode > 0) {
    1bac:	88 23       	and	r24, r24
    1bae:	a9 f0       	breq	.+42     	; 0x1bda <_Z20execTransmitReadingsP14DailyCycleData+0x218>
														RM_LOG2(F("SMS Send Failed !!"), ret->SmsFailureCode);
    1bb0:	66 e0       	ldi	r22, 0x06	; 6
    1bb2:	73 e0       	ldi	r23, 0x03	; 3
    1bb4:	85 e6       	ldi	r24, 0x65	; 101
    1bb6:	97 e0       	ldi	r25, 0x07	; 7
    1bb8:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bbc:	66 ed       	ldi	r22, 0xD6	; 214
    1bbe:	72 e0       	ldi	r23, 0x02	; 2
    1bc0:	85 e6       	ldi	r24, 0x65	; 101
    1bc2:	97 e0       	ldi	r25, 0x07	; 7
    1bc4:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1bc8:	d3 01       	movw	r26, r6
    1bca:	1b 96       	adiw	r26, 0x0b	; 11
    1bcc:	6c 91       	ld	r22, X
    1bce:	4a e0       	ldi	r20, 0x0A	; 10
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	85 e6       	ldi	r24, 0x65	; 101
    1bd4:	97 e0       	ldi	r25, 0x07	; 7
    1bd6:	0e 94 16 29 	call	0x522c	; 0x522c <_ZN5Print7printlnEhi>
			//If even SMS is failing, can't do much
		}
	}
	
	//Only update sent-to flag if actually changed
	if (ret->NoOfReadings > 0 &&
    1bda:	f3 01       	movw	r30, r6
    1bdc:	86 81       	ldd	r24, Z+6	; 0x06
    1bde:	88 23       	and	r24, r24
    1be0:	79 f0       	breq	.+30     	; 0x1c00 <_Z20execTransmitReadingsP14DailyCycleData+0x23e>
	   (ret->GsmFailureCode == 0 || ret->SmsFailureCode == 0))
    1be2:	81 85       	ldd	r24, Z+9	; 0x09
    1be4:	92 85       	ldd	r25, Z+10	; 0x0a
			//If even SMS is failing, can't do much
		}
	}
	
	//Only update sent-to flag if actually changed
	if (ret->NoOfReadings > 0 &&
    1be6:	89 2b       	or	r24, r25
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <_Z20execTransmitReadingsP14DailyCycleData+0x22e>
	   (ret->GsmFailureCode == 0 || ret->SmsFailureCode == 0))
    1bea:	83 85       	ldd	r24, Z+11	; 0x0b
    1bec:	81 11       	cpse	r24, r1
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <_Z20execTransmitReadingsP14DailyCycleData+0x23e>
	{
		mem.markDataSent(loadedUpTo);
    1bf0:	49 89       	ldd	r20, Y+17	; 0x11
    1bf2:	5a 89       	ldd	r21, Y+18	; 0x12
    1bf4:	6b 89       	ldd	r22, Y+19	; 0x13
    1bf6:	7c 89       	ldd	r23, Y+20	; 0x14
    1bf8:	81 ea       	ldi	r24, 0xA1	; 161
    1bfa:	95 e0       	ldi	r25, 0x05	; 5
    1bfc:	0e 94 47 07 	call	0xe8e	; 0xe8e <_ZN12RmMemManager12markDataSentEm>
 	}
}
    1c00:	c0 58       	subi	r28, 0x80	; 128
    1c02:	df 4f       	sbci	r29, 0xFF	; 255
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	df 90       	pop	r13
    1c1c:	cf 90       	pop	r12
    1c1e:	bf 90       	pop	r11
    1c20:	af 90       	pop	r10
    1c22:	9f 90       	pop	r9
    1c24:	8f 90       	pop	r8
    1c26:	7f 90       	pop	r7
    1c28:	6f 90       	pop	r6
    1c2a:	5f 90       	pop	r5
    1c2c:	4f 90       	pop	r4
    1c2e:	08 95       	ret

00001c30 <_Z18ensureBatteryLevelv>:


/********************************************************/
/********************** Battery *************************/
/********************************************************/
bool ensureBatteryLevel() {
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <_Z18ensureBatteryLevelv+0x8>
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62

     uint16_t vbat;
     if (!gsm.getBattPercent(&vbat)) {
    1c3c:	be 01       	movw	r22, r28
    1c3e:	6f 5f       	subi	r22, 0xFF	; 255
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	80 e8       	ldi	r24, 0x80	; 128
    1c44:	94 e0       	ldi	r25, 0x04	; 4
    1c46:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN10GsmManager14getBattPercentEPj>
    1c4a:	18 2f       	mov	r17, r24
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <_Z18ensureBatteryLevelv+0x2e>
                                                    RM_LOG(F("BatteryLevel Failed"));
    1c50:	64 e9       	ldi	r22, 0x94	; 148
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	85 e6       	ldi	r24, 0x65	; 101
    1c56:	97 e0       	ldi	r25, 0x07	; 7
    1c58:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return false; //Don't keep up module if can't get battery level.
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <_Z18ensureBatteryLevelv+0x64>
    } else {
                                                    RM_LOG2(F("BatteryLevel Retrieved"), vbat);
    1c5e:	6d e7       	ldi	r22, 0x7D	; 125
    1c60:	72 e0       	ldi	r23, 0x02	; 2
    1c62:	85 e6       	ldi	r24, 0x65	; 101
    1c64:	97 e0       	ldi	r25, 0x07	; 7
    1c66:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c6a:	66 ed       	ldi	r22, 0xD6	; 214
    1c6c:	72 e0       	ldi	r23, 0x02	; 2
    1c6e:	85 e6       	ldi	r24, 0x65	; 101
    1c70:	97 e0       	ldi	r25, 0x07	; 7
    1c72:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1c76:	69 81       	ldd	r22, Y+1	; 0x01
    1c78:	7a 81       	ldd	r23, Y+2	; 0x02
    1c7a:	4a e0       	ldi	r20, 0x0A	; 10
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	85 e6       	ldi	r24, 0x65	; 101
    1c80:	97 e0       	ldi	r25, 0x07	; 7
    1c82:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN5Print7printlnEji>
        //Require charging if less than threshold
        return vbat <= 80;
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	11 e0       	ldi	r17, 0x01	; 1
    1c8c:	81 35       	cpi	r24, 0x51	; 81
    1c8e:	91 05       	cpc	r25, r1
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <_Z18ensureBatteryLevelv+0x64>
    1c92:	10 e0       	ldi	r17, 0x00	; 0
    }
}
    1c94:	81 2f       	mov	r24, r17
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	08 95       	ret

00001ca2 <_Z9loopCyclev>:
//					If EOD, transmit readings
//					If Battery low, keep system up to charge it
//			loop() shuts down module when loopCycles says not to wait any more

//A cycle runs about every hour
boolean loopCycle() {
    1ca2:	cf 93       	push	r28
  
  boolean doContinueCycle = false;

  //Read sensors for 10 secs
  if (!timer._has10SecsElapsed) { //MATCH-R-TIME
    1ca4:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <timer+0x16>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <_Z9loopCyclev+0x1e>
                                                    RM_LOG(F("Reading sensors..."));
    1cac:	6f e7       	ldi	r22, 0x7F	; 127
    1cae:	73 e0       	ldi	r23, 0x03	; 3
    1cb0:	85 e6       	ldi	r24, 0x65	; 101
    1cb2:	97 e0       	ldi	r25, 0x07	; 7
    1cb4:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
	  toggleSystemState(SysState_TakingReadings);
      readSensorsAsync();
    1cb8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <_Z16readSensorsAsyncv>
	  
	  doContinueCycle |= true;
    1cbc:	c1 e0       	ldi	r28, 0x01	; 1
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <_Z9loopCyclev+0x20>
//			loop() shuts down module when loopCycles says not to wait any more

//A cycle runs about every hour
boolean loopCycle() {
  
  boolean doContinueCycle = false;
    1cc0:	c0 e0       	ldi	r28, 0x00	; 0
	  
	  doContinueCycle |= true;
  }

  //At the 10 sec mark, save readings down once
  if (timer._at10Secs) { //MATCH-R-TIME	  
    1cc2:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <timer+0xc>
    1cc6:	88 23       	and	r24, r24
    1cc8:	41 f0       	breq	.+16     	; 0x1cda <_Z9loopCyclev+0x38>
													RM_LOG(F("Persisting sensor data..."));
    1cca:	65 e6       	ldi	r22, 0x65	; 101
    1ccc:	73 e0       	ldi	r23, 0x03	; 3
    1cce:	85 e6       	ldi	r24, 0x65	; 101
    1cd0:	97 e0       	ldi	r25, 0x07	; 7
    1cd2:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
	  toggleSystemState(~SysState_TakingReadings);
	  persistSensorData();
    1cd6:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_Z17persistSensorDatav>
  }
  
  //Once a day, send sensor data
  if (_isDailyCycle) {
    1cda:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_isDailyCycle>
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <_Z9loopCyclev+0x42>
    1ce2:	4c c0       	rjmp	.+152    	; 0x1d7c <_Z9loopCyclev+0xda>
                                                    RM_LOG(F("In Daily Cycle..."));
    1ce4:	63 e5       	ldi	r22, 0x53	; 83
    1ce6:	73 e0       	ldi	r23, 0x03	; 3
    1ce8:	85 e6       	ldi	r24, 0x65	; 101
    1cea:	97 e0       	ldi	r25, 0x07	; 7
    1cec:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
	//Initialize GPRS module so it can load whilst readings are collected
	//Note: All reads and writes to global _dailyCycleData are done here to prevent global state use
	if (_isAtCycleStart)
    1cf0:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_isAtCycleStart>
    1cf4:	88 23       	and	r24, r24
    1cf6:	e9 f0       	breq	.+58     	; 0x1d32 <_Z9loopCyclev+0x90>
	{
		_dailyCycleData = new DailyCycleData();
    1cf8:	81 e1       	ldi	r24, 0x11	; 17
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 0f 28 	call	0x501e	; 0x501e <_Znwj>
    1d00:	21 e1       	ldi	r18, 0x11	; 17
    1d02:	fc 01       	movw	r30, r24
    1d04:	11 92       	st	Z+, r1
    1d06:	2a 95       	dec	r18
    1d08:	e9 f7       	brne	.-6      	; 0x1d04 <_Z9loopCyclev+0x62>
	//bool           HasBeenSent	= false;
} SensorData;


/* Stored in ROM and attempted to be sent every day along with readings */
typedef struct DailyCycleData {
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e4       	ldi	r19, 0x40	; 64
    1d0e:	fc 01       	movw	r30, r24
    1d10:	30 8b       	std	Z+16, r19	; 0x10
    1d12:	27 87       	std	Z+15, r18	; 0x0f
    1d14:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <_dailyCycleData+0x1>
    1d18:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_dailyCycleData>

		if (!toggleGPRS(true))
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_Z10toggleGPRSb>
    1d22:	81 11       	cpse	r24, r1
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <_Z9loopCyclev+0x90>
		{
			_dailyCycleData->GPRSToggleFailure = true;
    1d26:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_dailyCycleData>
    1d2a:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	84 83       	std	Z+4, r24	; 0x04
			//2) we don't need a separate code flow for doing the above in failure case
		}
	}
	
	//Wait a minute to acquire signal before sending the data
	if (timer._at1Min) {
    1d32:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <timer+0xd>
    1d36:	88 23       	and	r24, r24
    1d38:	31 f0       	breq	.+12     	; 0x1d46 <_Z9loopCyclev+0xa4>
		//We try and send even if GPRS didn't toggle on above incase toggle was a false -ve
		execTransmitReadings(_dailyCycleData);
    1d3a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_dailyCycleData>
    1d3e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    1d42:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_Z20execTransmitReadingsP14DailyCycleData>
	}
		
	//Give it time to flush the buffer before shutting down - TODO: necessary?
	if (timer._at1Min30Secs)
    1d46:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer+0xe>
    1d4a:	88 23       	and	r24, r24
    1d4c:	91 f0       	breq	.+36     	; 0x1d72 <_Z9loopCyclev+0xd0>
	{
		//Store a record of SystemStates on this daily transmit cycle
		_dailyCycleData->SystemState = _currSystemState; //TODO: Necessary?
    1d4e:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <_dailyCycleData>
    1d52:	70 91 4a 04 	lds	r23, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    1d56:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_currSystemState>
    1d5a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_currSystemState+0x1>
    1d5e:	fb 01       	movw	r30, r22
    1d60:	90 8b       	std	Z+16, r25	; 0x10
    1d62:	87 87       	std	Z+15, r24	; 0x0f
		mem.appendDailyEntry(_dailyCycleData);
    1d64:	81 ea       	ldi	r24, 0xA1	; 161
    1d66:	95 e0       	ldi	r25, 0x05	; 5
    1d68:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
		//Done sending - shut down GPRS
		toggleGPRS(false); //Ignore failure
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_Z10toggleGPRSb>
	}
		
	doContinueCycle |= !timer._has1Min30SecsElapsed;
    1d72:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <timer+0x13>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	89 27       	eor	r24, r25
    1d7a:	c8 2b       	or	r28, r24
  } //End is-daily-cycle

  //Check battery level at start of a cycle
  if (_isAtCycleStart) {
    1d7c:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_isAtCycleStart>
    1d80:	88 23       	and	r24, r24
    1d82:	d1 f0       	breq	.+52     	; 0x1db8 <_Z9loopCyclev+0x116>
                                                    RM_LOG2(F("FreeMemory"), get_free_memory());
    1d84:	68 e4       	ldi	r22, 0x48	; 72
    1d86:	73 e0       	ldi	r23, 0x03	; 3
    1d88:	85 e6       	ldi	r24, 0x65	; 101
    1d8a:	97 e0       	ldi	r25, 0x07	; 7
    1d8c:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1d90:	66 ed       	ldi	r22, 0xD6	; 214
    1d92:	72 e0       	ldi	r23, 0x02	; 2
    1d94:	85 e6       	ldi	r24, 0x65	; 101
    1d96:	97 e0       	ldi	r25, 0x07	; 7
    1d98:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    1d9c:	0e 94 03 09 	call	0x1206	; 0x1206 <_Z15get_free_memoryv>
    1da0:	4a e0       	ldi	r20, 0x0A	; 10
    1da2:	50 e0       	ldi	r21, 0x00	; 0
    1da4:	bc 01       	movw	r22, r24
    1da6:	85 e6       	ldi	r24, 0x65	; 101
    1da8:	97 e0       	ldi	r25, 0x07	; 7
    1daa:	0e 94 a1 29 	call	0x5342	; 0x5342 <_ZN5Print7printlnEii>
      bool needsCharging = ensureBatteryLevel();
    1dae:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_Z18ensureBatteryLevelv>
      _chargingInProgress = needsCharging;
    1db2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_chargingInProgress>
    1db6:	c8 2b       	or	r28, r24

      doContinueCycle |= needsCharging;
  }

  if (_chargingInProgress) {
    1db8:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <_chargingInProgress>
    1dbc:	88 23       	and	r24, r24
    1dbe:	c1 f0       	breq	.+48     	; 0x1df0 <_Z9loopCyclev+0x14e>

	  toggleSystemState(SysState_IsCharging);
	  
      if (timer._at30SecInterval) {
    1dc0:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <timer+0x11>
    1dc4:	88 23       	and	r24, r24
    1dc6:	99 f0       	breq	.+38     	; 0x1dee <_Z9loopCyclev+0x14c>
          bool needsCharging = ensureBatteryLevel();
    1dc8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_Z18ensureBatteryLevelv>

          //Charge for 15 mins max - battery may have low rate now
          bool doneCharging = !needsCharging || timer._has15MinElapsed;
    1dcc:	88 23       	and	r24, r24
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <_Z9loopCyclev+0x13a>
    1dd0:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <timer+0x17>
    1dd4:	88 23       	and	r24, r24
    1dd6:	21 f0       	breq	.+8      	; 0x1de0 <_Z9loopCyclev+0x13e>
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <_Z9loopCyclev+0x140>
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <_Z9loopCyclev+0x140>
    1de0:	90 e0       	ldi	r25, 0x00	; 0

          _chargingInProgress =   !doneCharging;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	89 27       	eor	r24, r25
    1de6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_chargingInProgress>
    1dea:	c8 2b       	or	r28, r24
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <_Z9loopCyclev+0x14e>
          doContinueCycle |=      !doneCharging;
      }
      else
          doContinueCycle |= true;
    1dee:	c1 e0       	ldi	r28, 0x01	; 1
  else{
	  toggleSystemState(~SysState_IsCharging);
  }
  
  return doContinueCycle;
}
    1df0:	8c 2f       	mov	r24, r28
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <_Z10assertTrueb>:
/****************************************************/
/********************** TESTING *********************/
/****************************************************/
#ifdef UNIT_TESTS
void assertTrue(bool val)
{
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <_Z10assertTrueb+0x6>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	if (!val){
    1e00:	81 11       	cpse	r24, r1
    1e02:	08 c0       	rjmp	.+16     	; 0x1e14 <_Z10assertTrueb+0x1e>
		volatile int failure=10/0;
    1e04:	8a e0       	ldi	r24, 0x0A	; 10
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <__divmodhi4>
    1e10:	7a 83       	std	Y+2, r23	; 0x02
    1e12:	69 83       	std	Y+1, r22	; 0x01
	}
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <_Z9assertIntjjPc>:

void assertInt(volatile unsigned int expected, volatile unsigned int actual, char* msg = NULL)
{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <_Z9assertIntjjPc+0x6>
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <_Z9assertIntjjPc+0x8>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	7c 83       	std	Y+4, r23	; 0x04
    1e30:	6b 83       	std	Y+3, r22	; 0x03
	assertTrue(expected == actual);
    1e32:	49 81       	ldd	r20, Y+1	; 0x01
    1e34:	5a 81       	ldd	r21, Y+2	; 0x02
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	42 17       	cp	r20, r18
    1e3e:	53 07       	cpc	r21, r19
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <_Z9assertIntjjPc+0x26>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <_Z6assertmmPc>:

void assert(volatile unsigned long expected, volatile unsigned long actual, char* msg = NULL)
{
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	28 97       	sbiw	r28, 0x08	; 8
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	69 83       	std	Y+1, r22	; 0x01
    1e70:	7a 83       	std	Y+2, r23	; 0x02
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	9c 83       	std	Y+4, r25	; 0x04
    1e76:	2d 83       	std	Y+5, r18	; 0x05
    1e78:	3e 83       	std	Y+6, r19	; 0x06
    1e7a:	4f 83       	std	Y+7, r20	; 0x07
    1e7c:	58 87       	std	Y+8, r21	; 0x08
	assertTrue(expected == actual);
    1e7e:	09 81       	ldd	r16, Y+1	; 0x01
    1e80:	1a 81       	ldd	r17, Y+2	; 0x02
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	4d 81       	ldd	r20, Y+5	; 0x05
    1e88:	5e 81       	ldd	r21, Y+6	; 0x06
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	04 17       	cp	r16, r20
    1e92:	15 07       	cpc	r17, r21
    1e94:	26 07       	cpc	r18, r22
    1e96:	37 07       	cpc	r19, r23
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <_Z6assertmmPc+0x46>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
}
    1ea0:	28 96       	adiw	r28, 0x08	; 8
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <_Z26assertCharStringsIdenticalPKcS0_i>:

void assertCharStringsIdentical(const char* expected, const char* actualRaw, int len_TODO=-1)
{
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <_Z26assertCharStringsIdenticalPKcS0_i+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <_Z26assertCharStringsIdenticalPKcS0_i+0x8>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
	unsigned volatile int cmp = strcmp(expected, actualRaw);
    1ec2:	0e 94 9a 3c 	call	0x7934	; 0x7934 <strcmp>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	unsigned volatile int res = cmp==0;
    1eca:	29 81       	ldd	r18, Y+1	; 0x01
    1ecc:	3a 81       	ldd	r19, Y+2	; 0x02
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	23 2b       	or	r18, r19
    1ed4:	11 f0       	breq	.+4      	; 0x1eda <_Z26assertCharStringsIdenticalPKcS0_i+0x24>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
	
	assertTrue(res);
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	23 2b       	or	r18, r19
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <_Z26assertCharStringsIdenticalPKcS0_i+0x34>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	08 95       	ret

00001efc <_Z22assertStringsIdenticalRK6StringPKci>:

void assertStringsIdentical(const String& expected, const char* actualRaw, int len_TODO=-1)
{
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	28 97       	sbiw	r28, 0x08	; 8
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	7c 01       	movw	r14, r24
    1f1a:	8b 01       	movw	r16, r22
	String actual(actualRaw);
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	0e 94 c5 2c 	call	0x598a	; 0x598a <_ZN6StringC1EPKc>
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
    1f24:	b8 01       	movw	r22, r16
    1f26:	f7 01       	movw	r30, r14
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	0e 94 9a 3c 	call	0x7934	; 0x7934 <strcmp>
    1f30:	21 e0       	ldi	r18, 0x01	; 1
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	89 2b       	or	r24, r25
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <_Z22assertStringsIdenticalRK6StringPKci+0x40>
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	38 87       	std	Y+8, r19	; 0x08
    1f3e:	2f 83       	std	Y+7, r18	; 0x07
	
	assertTrue(res);
    1f40:	2f 81       	ldd	r18, Y+7	; 0x07
    1f42:	38 85       	ldd	r19, Y+8	; 0x08
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	23 2b       	or	r18, r19
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <_Z22assertStringsIdenticalRK6StringPKci+0x50>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
	assertTrue(res);
}

void assertStringsIdentical(const String& expected, const char* actualRaw, int len_TODO=-1)
{
	String actual(actualRaw);
    1f50:	ce 01       	movw	r24, r28
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	0e 94 57 2c 	call	0x58ae	; 0x58ae <_ZN6StringD1Ev>
	unsigned volatile int res = strcmp(expected.c_str(), actualRaw)==0;
	
	assertTrue(res);
}
    1f58:	28 96       	adiw	r28, 0x08	; 8
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	08 95       	ret

00001f72 <_Z23assertReadingsIdentical10SensorDataS_>:
//{
	//return assertStringsIdentical(expected, actual.c_str());
//}

void assertReadingsIdentical(SensorData expected, SensorData r1)
{
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	60 97       	sbiw	r28, 0x10	; 16
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	29 83       	std	Y+1, r18	; 0x01
    1f98:	3a 83       	std	Y+2, r19	; 0x02
    1f9a:	4b 83       	std	Y+3, r20	; 0x03
    1f9c:	5c 83       	std	Y+4, r21	; 0x04
    1f9e:	6d 83       	std	Y+5, r22	; 0x05
    1fa0:	7e 83       	std	Y+6, r23	; 0x06
    1fa2:	8f 83       	std	Y+7, r24	; 0x07
    1fa4:	98 87       	std	Y+8, r25	; 0x08
    1fa6:	a9 86       	std	Y+9, r10	; 0x09
    1fa8:	ba 86       	std	Y+10, r11	; 0x0a
    1faa:	cb 86       	std	Y+11, r12	; 0x0b
    1fac:	dc 86       	std	Y+12, r13	; 0x0c
    1fae:	ed 86       	std	Y+13, r14	; 0x0d
    1fb0:	fe 86       	std	Y+14, r15	; 0x0e
    1fb2:	0f 87       	std	Y+15, r16	; 0x0f
    1fb4:	18 8b       	std	Y+16, r17	; 0x10
	assert(expected.BattVoltage, r1.BattVoltage, "batt");
    1fb6:	29 85       	ldd	r18, Y+9	; 0x09
    1fb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	69 81       	ldd	r22, Y+1	; 0x01
    1fc0:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	08 ed       	ldi	r16, 0xD8	; 216
    1fc8:	12 e0       	ldi	r17, 0x02	; 2
    1fca:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(expected.Current, r1.Current, "current");
    1fce:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fd0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	6b 81       	ldd	r22, Y+3	; 0x03
    1fd8:	7c 81       	ldd	r23, Y+4	; 0x04
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0d ed       	ldi	r16, 0xDD	; 221
    1fe0:	12 e0       	ldi	r17, 0x02	; 2
    1fe2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(expected.PVVoltage, r1.PVVoltage, "pv");
    1fe6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fe8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	6d 81       	ldd	r22, Y+5	; 0x05
    1ff0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	05 ee       	ldi	r16, 0xE5	; 229
    1ff8:	12 e0       	ldi	r17, 0x02	; 2
    1ffa:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(expected.Temperature, r1.Temperature, "temp");
    1ffe:	2f 85       	ldd	r18, Y+15	; 0x0f
    2000:	38 89       	ldd	r19, Y+16	; 0x10
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	08 ee       	ldi	r16, 0xE8	; 232
    2010:	12 e0       	ldi	r17, 0x02	; 2
    2012:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	//assert(expected.ErrorChar, r1.ErrorChar, "errorCode");
}
    2016:	60 96       	adiw	r28, 0x10	; 16
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	bf 90       	pop	r11
    2034:	af 90       	pop	r10
    2036:	08 95       	ret

00002038 <_Z17createMockReadingbc>:


int _mockNo = 0;
SensorData createMockReading(bool append = true, char errorChar = 0)
{
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	60 97       	sbiw	r28, 0x10	; 16
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
	++_mockNo;
    204c:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_mockNo>
    2050:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_mockNo+0x1>
    2054:	2f 5f       	subi	r18, 0xFF	; 255
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
    2058:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <_mockNo+0x1>
    205c:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <_mockNo>
	
	SensorData r2;
    2060:	fe 01       	movw	r30, r28
    2062:	39 96       	adiw	r30, 0x09	; 9
    2064:	98 e0       	ldi	r25, 0x08	; 8
    2066:	df 01       	movw	r26, r30
    2068:	1d 92       	st	X+, r1
    206a:	9a 95       	dec	r25
    206c:	e9 f7       	brne	.-6      	; 0x2068 <_Z17createMockReadingbc+0x30>
	r2.BattVoltage=_mockNo*2;
    206e:	a9 01       	movw	r20, r18
    2070:	44 0f       	add	r20, r20
    2072:	55 1f       	adc	r21, r21
    2074:	5a 87       	std	Y+10, r21	; 0x0a
    2076:	49 87       	std	Y+9, r20	; 0x09
	r2.Current=_mockNo*30;
    2078:	9e e1       	ldi	r25, 0x1E	; 30
    207a:	92 9f       	mul	r25, r18
    207c:	a0 01       	movw	r20, r0
    207e:	93 9f       	mul	r25, r19
    2080:	50 0d       	add	r21, r0
    2082:	11 24       	eor	r1, r1
    2084:	5c 87       	std	Y+12, r21	; 0x0c
    2086:	4b 87       	std	Y+11, r20	; 0x0b
	r2.PVVoltage=_mockNo*29;
    2088:	9d e1       	ldi	r25, 0x1D	; 29
    208a:	92 9f       	mul	r25, r18
    208c:	a0 01       	movw	r20, r0
    208e:	93 9f       	mul	r25, r19
    2090:	50 0d       	add	r21, r0
    2092:	11 24       	eor	r1, r1
    2094:	5e 87       	std	Y+14, r21	; 0x0e
    2096:	4d 87       	std	Y+13, r20	; 0x0d
	r2.Temperature=_mockNo*37;
    2098:	95 e2       	ldi	r25, 0x25	; 37
    209a:	92 9f       	mul	r25, r18
    209c:	a0 01       	movw	r20, r0
    209e:	93 9f       	mul	r25, r19
    20a0:	50 0d       	add	r21, r0
    20a2:	11 24       	eor	r1, r1
    20a4:	58 8b       	std	Y+16, r21	; 0x10
    20a6:	4f 87       	std	Y+15, r20	; 0x0f
	//r2.ErrorChar=errorChar;
	if (append)
    20a8:	88 23       	and	r24, r24
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <_Z17createMockReadingbc+0x7e>
		mem.appendSensorEntry(&r2);
    20ac:	bf 01       	movw	r22, r30
    20ae:	81 ea       	ldi	r24, 0xA1	; 161
    20b0:	95 e0       	ldi	r25, 0x05	; 5
    20b2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	return r2;
    20b6:	88 e0       	ldi	r24, 0x08	; 8
    20b8:	fe 01       	movw	r30, r28
    20ba:	39 96       	adiw	r30, 0x09	; 9
    20bc:	de 01       	movw	r26, r28
    20be:	11 96       	adiw	r26, 0x01	; 1
    20c0:	01 90       	ld	r0, Z+
    20c2:	0d 92       	st	X+, r0
    20c4:	8a 95       	dec	r24
    20c6:	e1 f7       	brne	.-8      	; 0x20c0 <_Z17createMockReadingbc+0x88>
    20c8:	29 81       	ldd	r18, Y+1	; 0x01
    20ca:	3a 81       	ldd	r19, Y+2	; 0x02
    20cc:	4b 81       	ldd	r20, Y+3	; 0x03
    20ce:	5c 81       	ldd	r21, Y+4	; 0x04
    20d0:	6d 81       	ldd	r22, Y+5	; 0x05
    20d2:	7e 81       	ldd	r23, Y+6	; 0x06
}
    20d4:	8f 81       	ldd	r24, Y+7	; 0x07
    20d6:	98 85       	ldd	r25, Y+8	; 0x08
    20d8:	60 96       	adiw	r28, 0x10	; 16
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <_Z11runLoadTestv>:

void runLoadTest()
{
    20ea:	7f 92       	push	r7
    20ec:	8f 92       	push	r8
    20ee:	9f 92       	push	r9
    20f0:	af 92       	push	r10
    20f2:	bf 92       	push	r11
    20f4:	cf 92       	push	r12
    20f6:	df 92       	push	r13
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	cc 57       	subi	r28, 0x7C	; 124
    210a:	d1 09       	sbc	r29, r1
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
	//Load some fake readings
	SensorData 
		r0=createMockReading(),
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z17createMockReadingbc>
    211e:	29 83       	std	Y+1, r18	; 0x01
    2120:	3a 83       	std	Y+2, r19	; 0x02
    2122:	4b 83       	std	Y+3, r20	; 0x03
    2124:	5c 83       	std	Y+4, r21	; 0x04
    2126:	6d 83       	std	Y+5, r22	; 0x05
    2128:	7e 83       	std	Y+6, r23	; 0x06
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	98 87       	std	Y+8, r25	; 0x08
		r1=createMockReading(),
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z17createMockReadingbc>
    2136:	29 87       	std	Y+9, r18	; 0x09
    2138:	3a 87       	std	Y+10, r19	; 0x0a
    213a:	4b 87       	std	Y+11, r20	; 0x0b
    213c:	5c 87       	std	Y+12, r21	; 0x0c
    213e:	6d 87       	std	Y+13, r22	; 0x0d
    2140:	7e 87       	std	Y+14, r23	; 0x0e
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    2144:	98 8b       	std	Y+16, r25	; 0x10
		r2=createMockReading(),
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z17createMockReadingbc>
    214e:	29 8b       	std	Y+17, r18	; 0x11
    2150:	3a 8b       	std	Y+18, r19	; 0x12
    2152:	4b 8b       	std	Y+19, r20	; 0x13
    2154:	5c 8b       	std	Y+20, r21	; 0x14
    2156:	6d 8b       	std	Y+21, r22	; 0x15
    2158:	7e 8b       	std	Y+22, r23	; 0x16
    215a:	8f 8b       	std	Y+23, r24	; 0x17
    215c:	98 8f       	std	Y+24, r25	; 0x18
		r3=createMockReading(),
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z17createMockReadingbc>
    2166:	29 8f       	std	Y+25, r18	; 0x19
    2168:	3a 8f       	std	Y+26, r19	; 0x1a
    216a:	4b 8f       	std	Y+27, r20	; 0x1b
    216c:	5c 8f       	std	Y+28, r21	; 0x1c
    216e:	6d 8f       	std	Y+29, r22	; 0x1d
    2170:	7e 8f       	std	Y+30, r23	; 0x1e
    2172:	8f 8f       	std	Y+31, r24	; 0x1f
    2174:	98 a3       	std	Y+32, r25	; 0x20
		r4=createMockReading();
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z17createMockReadingbc>
    217e:	29 a3       	std	Y+33, r18	; 0x21
    2180:	3a a3       	std	Y+34, r19	; 0x22
    2182:	4b a3       	std	Y+35, r20	; 0x23
    2184:	5c a3       	std	Y+36, r21	; 0x24
    2186:	6d a3       	std	Y+37, r22	; 0x25
    2188:	7e a3       	std	Y+38, r23	; 0x26
    218a:	8f a3       	std	Y+39, r24	; 0x27
    218c:	98 a7       	std	Y+40, r25	; 0x28
		
	SensorData buffer[10];
    218e:	0f 2e       	mov	r0, r31
    2190:	f0 e5       	ldi	r31, 0x50	; 80
    2192:	7f 2e       	mov	r7, r31
    2194:	f0 2d       	mov	r31, r0
    2196:	4e 01       	movw	r8, r28
    2198:	89 e2       	ldi	r24, 0x29	; 41
    219a:	88 0e       	add	r8, r24
    219c:	91 1c       	adc	r9, r1
    219e:	f4 01       	movw	r30, r8
    21a0:	87 2d       	mov	r24, r7
    21a2:	11 92       	st	Z+, r1
    21a4:	8a 95       	dec	r24
    21a6:	e9 f7       	brne	.-6      	; 0x21a2 <_Z11runLoadTestv+0xb8>
	unsigned long loadedTo;
	
	assert(5, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT));
    21a8:	64 e6       	ldi	r22, 0x64	; 100
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	81 ea       	ldi	r24, 0xA1	; 161
    21ae:	95 e0       	ldi	r25, 0x05	; 5
    21b0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    21b4:	9b 01       	movw	r18, r22
    21b6:	ac 01       	movw	r20, r24
    21b8:	00 e0       	ldi	r16, 0x00	; 0
    21ba:	10 e0       	ldi	r17, 0x00	; 0
    21bc:	65 e0       	ldi	r22, 0x05	; 5
    21be:	70 e0       	ldi	r23, 0x00	; 0
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Requested for 3, sent-to=0 => return last 3
	loadedTo=0;
    21c8:	ed 96       	adiw	r28, 0x3d	; 61
    21ca:	1c ae       	std	Y+60, r1	; 0x3c
    21cc:	1d ae       	std	Y+61, r1	; 0x3d
    21ce:	1e ae       	std	Y+62, r1	; 0x3e
    21d0:	1f ae       	std	Y+63, r1	; 0x3f
    21d2:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    21d4:	f4 01       	movw	r30, r8
    21d6:	87 2d       	mov	r24, r7
    21d8:	11 92       	st	Z+, r1
    21da:	8a 95       	dec	r24
    21dc:	e9 f7       	brne	.-6      	; 0x21d8 <_Z11runLoadTestv+0xee>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	a9 01       	movw	r20, r18
    21e4:	6c e0       	ldi	r22, 0x0C	; 12
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	81 ea       	ldi	r24, 0xA1	; 161
    21ea:	95 e0       	ldi	r25, 0x05	; 5
    21ec:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.loadSensorData(buffer, 3, &loadedTo);
    21f0:	9e 01       	movw	r18, r28
    21f2:	27 58       	subi	r18, 0x87	; 135
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	43 e0       	ldi	r20, 0x03	; 3
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	b4 01       	movw	r22, r8
    21fc:	81 ea       	ldi	r24, 0xA1	; 161
    21fe:	95 e0       	ldi	r25, 0x05	; 5
    2200:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
	assert(5, loadedTo);
    2204:	ed 96       	adiw	r28, 0x3d	; 61
    2206:	2c ad       	ldd	r18, Y+60	; 0x3c
    2208:	3d ad       	ldd	r19, Y+61	; 0x3d
    220a:	4e ad       	ldd	r20, Y+62	; 0x3e
    220c:	5f ad       	ldd	r21, Y+63	; 0x3f
    220e:	ed 97       	sbiw	r28, 0x3d	; 61
    2210:	65 e0       	ldi	r22, 0x05	; 5
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertReadingsIdentical(r2, buffer[0]);
    221c:	a9 a4       	ldd	r10, Y+41	; 0x29
    221e:	ba a4       	ldd	r11, Y+42	; 0x2a
    2220:	cb a4       	ldd	r12, Y+43	; 0x2b
    2222:	dc a4       	ldd	r13, Y+44	; 0x2c
    2224:	ed a4       	ldd	r14, Y+45	; 0x2d
    2226:	fe a4       	ldd	r15, Y+46	; 0x2e
    2228:	0f a5       	ldd	r16, Y+47	; 0x2f
    222a:	18 a9       	ldd	r17, Y+48	; 0x30
    222c:	29 89       	ldd	r18, Y+17	; 0x11
    222e:	3a 89       	ldd	r19, Y+18	; 0x12
    2230:	4b 89       	ldd	r20, Y+19	; 0x13
    2232:	5c 89       	ldd	r21, Y+20	; 0x14
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r3, buffer[1]);
    2240:	a9 a8       	ldd	r10, Y+49	; 0x31
    2242:	ba a8       	ldd	r11, Y+50	; 0x32
    2244:	cb a8       	ldd	r12, Y+51	; 0x33
    2246:	dc a8       	ldd	r13, Y+52	; 0x34
    2248:	ed a8       	ldd	r14, Y+53	; 0x35
    224a:	fe a8       	ldd	r15, Y+54	; 0x36
    224c:	0f a9       	ldd	r16, Y+55	; 0x37
    224e:	18 ad       	ldd	r17, Y+56	; 0x38
    2250:	29 8d       	ldd	r18, Y+25	; 0x19
    2252:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2254:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2256:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2258:	6d 8d       	ldd	r22, Y+29	; 0x1d
    225a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    225c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    225e:	98 a1       	ldd	r25, Y+32	; 0x20
    2260:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[2]);
    2264:	a9 ac       	ldd	r10, Y+57	; 0x39
    2266:	ba ac       	ldd	r11, Y+58	; 0x3a
    2268:	cb ac       	ldd	r12, Y+59	; 0x3b
    226a:	dc ac       	ldd	r13, Y+60	; 0x3c
    226c:	ed ac       	ldd	r14, Y+61	; 0x3d
    226e:	fe ac       	ldd	r15, Y+62	; 0x3e
    2270:	0f ad       	ldd	r16, Y+63	; 0x3f
    2272:	21 96       	adiw	r28, 0x01	; 1
    2274:	1f ad       	ldd	r17, Y+63	; 0x3f
    2276:	21 97       	sbiw	r28, 0x01	; 1
    2278:	29 a1       	ldd	r18, Y+33	; 0x21
    227a:	3a a1       	ldd	r19, Y+34	; 0x22
    227c:	4b a1       	ldd	r20, Y+35	; 0x23
    227e:	5c a1       	ldd	r21, Y+36	; 0x24
    2280:	6d a1       	ldd	r22, Y+37	; 0x25
    2282:	7e a1       	ldd	r23, Y+38	; 0x26
    2284:	8f a1       	ldd	r24, Y+39	; 0x27
    2286:	98 a5       	ldd	r25, Y+40	; 0x28
    2288:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[3].BattVoltage); //Sanity check - no others populated
    228c:	23 96       	adiw	r28, 0x03	; 3
    228e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2290:	3f ad       	ldd	r19, Y+63	; 0x3f
    2292:	23 97       	sbiw	r28, 0x03	; 3
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	00 e0       	ldi	r16, 0x00	; 0
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	cb 01       	movw	r24, r22
    22a2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>

	//Requested for 3, sent-upto=3 => return last 2
	loadedTo=0;
    22a6:	ed 96       	adiw	r28, 0x3d	; 61
    22a8:	1c ae       	std	Y+60, r1	; 0x3c
    22aa:	1d ae       	std	Y+61, r1	; 0x3d
    22ac:	1e ae       	std	Y+62, r1	; 0x3e
    22ae:	1f ae       	std	Y+63, r1	; 0x3f
    22b0:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    22b2:	f4 01       	movw	r30, r8
    22b4:	87 2d       	mov	r24, r7
    22b6:	11 92       	st	Z+, r1
    22b8:	8a 95       	dec	r24
    22ba:	e9 f7       	brne	.-6      	; 0x22b6 <_Z11runLoadTestv+0x1cc>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 3);
    22bc:	23 e0       	ldi	r18, 0x03	; 3
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	6c e0       	ldi	r22, 0x0C	; 12
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	81 ea       	ldi	r24, 0xA1	; 161
    22ca:	95 e0       	ldi	r25, 0x05	; 5
    22cc:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(2,mem.loadSensorData(buffer, 3, &loadedTo));
    22d0:	9e 01       	movw	r18, r28
    22d2:	27 58       	subi	r18, 0x87	; 135
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	43 e0       	ldi	r20, 0x03	; 3
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	b4 01       	movw	r22, r8
    22dc:	81 ea       	ldi	r24, 0xA1	; 161
    22de:	95 e0       	ldi	r25, 0x05	; 5
    22e0:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    22e4:	9b 01       	movw	r18, r22
    22e6:	ac 01       	movw	r20, r24
    22e8:	62 e0       	ldi	r22, 0x02	; 2
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(5, loadedTo);
    22f4:	ed 96       	adiw	r28, 0x3d	; 61
    22f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    22f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    22fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    22fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    22fe:	ed 97       	sbiw	r28, 0x3d	; 61
    2300:	65 e0       	ldi	r22, 0x05	; 5
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertReadingsIdentical(r3, buffer[0]);
    230c:	a9 a4       	ldd	r10, Y+41	; 0x29
    230e:	ba a4       	ldd	r11, Y+42	; 0x2a
    2310:	cb a4       	ldd	r12, Y+43	; 0x2b
    2312:	dc a4       	ldd	r13, Y+44	; 0x2c
    2314:	ed a4       	ldd	r14, Y+45	; 0x2d
    2316:	fe a4       	ldd	r15, Y+46	; 0x2e
    2318:	0f a5       	ldd	r16, Y+47	; 0x2f
    231a:	18 a9       	ldd	r17, Y+48	; 0x30
    231c:	29 8d       	ldd	r18, Y+25	; 0x19
    231e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2320:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2322:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2324:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2326:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2328:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232a:	98 a1       	ldd	r25, Y+32	; 0x20
    232c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[1]);
    2330:	a9 a8       	ldd	r10, Y+49	; 0x31
    2332:	ba a8       	ldd	r11, Y+50	; 0x32
    2334:	cb a8       	ldd	r12, Y+51	; 0x33
    2336:	dc a8       	ldd	r13, Y+52	; 0x34
    2338:	ed a8       	ldd	r14, Y+53	; 0x35
    233a:	fe a8       	ldd	r15, Y+54	; 0x36
    233c:	0f a9       	ldd	r16, Y+55	; 0x37
    233e:	18 ad       	ldd	r17, Y+56	; 0x38
    2340:	29 a1       	ldd	r18, Y+33	; 0x21
    2342:	3a a1       	ldd	r19, Y+34	; 0x22
    2344:	4b a1       	ldd	r20, Y+35	; 0x23
    2346:	5c a1       	ldd	r21, Y+36	; 0x24
    2348:	6d a1       	ldd	r22, Y+37	; 0x25
    234a:	7e a1       	ldd	r23, Y+38	; 0x26
    234c:	8f a1       	ldd	r24, Y+39	; 0x27
    234e:	98 a5       	ldd	r25, Y+40	; 0x28
    2350:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[2].BattVoltage); //Sanity check - no others populated
    2354:	29 ad       	ldd	r18, Y+57	; 0x39
    2356:	3a ad       	ldd	r19, Y+58	; 0x3a
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	00 e0       	ldi	r16, 0x00	; 0
    235e:	10 e0       	ldi	r17, 0x00	; 0
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	cb 01       	movw	r24, r22
    2366:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Requested for 8, sent-to=0 => return all 4
	loadedTo=0;
    236a:	ed 96       	adiw	r28, 0x3d	; 61
    236c:	1c ae       	std	Y+60, r1	; 0x3c
    236e:	1d ae       	std	Y+61, r1	; 0x3d
    2370:	1e ae       	std	Y+62, r1	; 0x3e
    2372:	1f ae       	std	Y+63, r1	; 0x3f
    2374:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2376:	f4 01       	movw	r30, r8
    2378:	87 2d       	mov	r24, r7
    237a:	11 92       	st	Z+, r1
    237c:	8a 95       	dec	r24
    237e:	e9 f7       	brne	.-6      	; 0x237a <_Z11runLoadTestv+0x290>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 0);
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	a9 01       	movw	r20, r18
    2386:	6c e0       	ldi	r22, 0x0C	; 12
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	81 ea       	ldi	r24, 0xA1	; 161
    238c:	95 e0       	ldi	r25, 0x05	; 5
    238e:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(5,mem.loadSensorData(buffer, 8, &loadedTo));
    2392:	9e 01       	movw	r18, r28
    2394:	27 58       	subi	r18, 0x87	; 135
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	48 e0       	ldi	r20, 0x08	; 8
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	b4 01       	movw	r22, r8
    239e:	81 ea       	ldi	r24, 0xA1	; 161
    23a0:	95 e0       	ldi	r25, 0x05	; 5
    23a2:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	65 e0       	ldi	r22, 0x05	; 5
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(5, loadedTo);
    23b6:	ed 96       	adiw	r28, 0x3d	; 61
    23b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    23ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    23bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    23be:	5f ad       	ldd	r21, Y+63	; 0x3f
    23c0:	ed 97       	sbiw	r28, 0x3d	; 61
    23c2:	65 e0       	ldi	r22, 0x05	; 5
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertReadingsIdentical(r0, buffer[0]);
    23ce:	a9 a4       	ldd	r10, Y+41	; 0x29
    23d0:	ba a4       	ldd	r11, Y+42	; 0x2a
    23d2:	cb a4       	ldd	r12, Y+43	; 0x2b
    23d4:	dc a4       	ldd	r13, Y+44	; 0x2c
    23d6:	ed a4       	ldd	r14, Y+45	; 0x2d
    23d8:	fe a4       	ldd	r15, Y+46	; 0x2e
    23da:	0f a5       	ldd	r16, Y+47	; 0x2f
    23dc:	18 a9       	ldd	r17, Y+48	; 0x30
    23de:	29 81       	ldd	r18, Y+1	; 0x01
    23e0:	3a 81       	ldd	r19, Y+2	; 0x02
    23e2:	4b 81       	ldd	r20, Y+3	; 0x03
    23e4:	5c 81       	ldd	r21, Y+4	; 0x04
    23e6:	6d 81       	ldd	r22, Y+5	; 0x05
    23e8:	7e 81       	ldd	r23, Y+6	; 0x06
    23ea:	8f 81       	ldd	r24, Y+7	; 0x07
    23ec:	98 85       	ldd	r25, Y+8	; 0x08
    23ee:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r1, buffer[1]);
    23f2:	a9 a8       	ldd	r10, Y+49	; 0x31
    23f4:	ba a8       	ldd	r11, Y+50	; 0x32
    23f6:	cb a8       	ldd	r12, Y+51	; 0x33
    23f8:	dc a8       	ldd	r13, Y+52	; 0x34
    23fa:	ed a8       	ldd	r14, Y+53	; 0x35
    23fc:	fe a8       	ldd	r15, Y+54	; 0x36
    23fe:	0f a9       	ldd	r16, Y+55	; 0x37
    2400:	18 ad       	ldd	r17, Y+56	; 0x38
    2402:	29 85       	ldd	r18, Y+9	; 0x09
    2404:	3a 85       	ldd	r19, Y+10	; 0x0a
    2406:	4b 85       	ldd	r20, Y+11	; 0x0b
    2408:	5c 85       	ldd	r21, Y+12	; 0x0c
    240a:	6d 85       	ldd	r22, Y+13	; 0x0d
    240c:	7e 85       	ldd	r23, Y+14	; 0x0e
    240e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2410:	98 89       	ldd	r25, Y+16	; 0x10
    2412:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r2, buffer[2]);
    2416:	a9 ac       	ldd	r10, Y+57	; 0x39
    2418:	ba ac       	ldd	r11, Y+58	; 0x3a
    241a:	cb ac       	ldd	r12, Y+59	; 0x3b
    241c:	dc ac       	ldd	r13, Y+60	; 0x3c
    241e:	ed ac       	ldd	r14, Y+61	; 0x3d
    2420:	fe ac       	ldd	r15, Y+62	; 0x3e
    2422:	0f ad       	ldd	r16, Y+63	; 0x3f
    2424:	21 96       	adiw	r28, 0x01	; 1
    2426:	1f ad       	ldd	r17, Y+63	; 0x3f
    2428:	21 97       	sbiw	r28, 0x01	; 1
    242a:	29 89       	ldd	r18, Y+17	; 0x11
    242c:	3a 89       	ldd	r19, Y+18	; 0x12
    242e:	4b 89       	ldd	r20, Y+19	; 0x13
    2430:	5c 89       	ldd	r21, Y+20	; 0x14
    2432:	6d 89       	ldd	r22, Y+21	; 0x15
    2434:	7e 89       	ldd	r23, Y+22	; 0x16
    2436:	8f 89       	ldd	r24, Y+23	; 0x17
    2438:	98 8d       	ldd	r25, Y+24	; 0x18
    243a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r3, buffer[3]);
    243e:	22 96       	adiw	r28, 0x02	; 2
    2440:	af ac       	ldd	r10, Y+63	; 0x3f
    2442:	22 97       	sbiw	r28, 0x02	; 2
    2444:	23 96       	adiw	r28, 0x03	; 3
    2446:	bf ac       	ldd	r11, Y+63	; 0x3f
    2448:	23 97       	sbiw	r28, 0x03	; 3
    244a:	24 96       	adiw	r28, 0x04	; 4
    244c:	cf ac       	ldd	r12, Y+63	; 0x3f
    244e:	24 97       	sbiw	r28, 0x04	; 4
    2450:	25 96       	adiw	r28, 0x05	; 5
    2452:	df ac       	ldd	r13, Y+63	; 0x3f
    2454:	25 97       	sbiw	r28, 0x05	; 5
    2456:	26 96       	adiw	r28, 0x06	; 6
    2458:	ef ac       	ldd	r14, Y+63	; 0x3f
    245a:	26 97       	sbiw	r28, 0x06	; 6
    245c:	27 96       	adiw	r28, 0x07	; 7
    245e:	ff ac       	ldd	r15, Y+63	; 0x3f
    2460:	27 97       	sbiw	r28, 0x07	; 7
    2462:	28 96       	adiw	r28, 0x08	; 8
    2464:	0f ad       	ldd	r16, Y+63	; 0x3f
    2466:	28 97       	sbiw	r28, 0x08	; 8
    2468:	29 96       	adiw	r28, 0x09	; 9
    246a:	1f ad       	ldd	r17, Y+63	; 0x3f
    246c:	29 97       	sbiw	r28, 0x09	; 9
    246e:	29 8d       	ldd	r18, Y+25	; 0x19
    2470:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2472:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2474:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2476:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2478:	7e 8d       	ldd	r23, Y+30	; 0x1e
    247a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    247c:	98 a1       	ldd	r25, Y+32	; 0x20
    247e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r4, buffer[4]);
    2482:	2a 96       	adiw	r28, 0x0a	; 10
    2484:	af ac       	ldd	r10, Y+63	; 0x3f
    2486:	2a 97       	sbiw	r28, 0x0a	; 10
    2488:	2b 96       	adiw	r28, 0x0b	; 11
    248a:	bf ac       	ldd	r11, Y+63	; 0x3f
    248c:	2b 97       	sbiw	r28, 0x0b	; 11
    248e:	2c 96       	adiw	r28, 0x0c	; 12
    2490:	cf ac       	ldd	r12, Y+63	; 0x3f
    2492:	2c 97       	sbiw	r28, 0x0c	; 12
    2494:	2d 96       	adiw	r28, 0x0d	; 13
    2496:	df ac       	ldd	r13, Y+63	; 0x3f
    2498:	2d 97       	sbiw	r28, 0x0d	; 13
    249a:	2e 96       	adiw	r28, 0x0e	; 14
    249c:	ef ac       	ldd	r14, Y+63	; 0x3f
    249e:	2e 97       	sbiw	r28, 0x0e	; 14
    24a0:	2f 96       	adiw	r28, 0x0f	; 15
    24a2:	ff ac       	ldd	r15, Y+63	; 0x3f
    24a4:	2f 97       	sbiw	r28, 0x0f	; 15
    24a6:	60 96       	adiw	r28, 0x10	; 16
    24a8:	0f ad       	ldd	r16, Y+63	; 0x3f
    24aa:	60 97       	sbiw	r28, 0x10	; 16
    24ac:	61 96       	adiw	r28, 0x11	; 17
    24ae:	1f ad       	ldd	r17, Y+63	; 0x3f
    24b0:	61 97       	sbiw	r28, 0x11	; 17
    24b2:	29 a1       	ldd	r18, Y+33	; 0x21
    24b4:	3a a1       	ldd	r19, Y+34	; 0x22
    24b6:	4b a1       	ldd	r20, Y+35	; 0x23
    24b8:	5c a1       	ldd	r21, Y+36	; 0x24
    24ba:	6d a1       	ldd	r22, Y+37	; 0x25
    24bc:	7e a1       	ldd	r23, Y+38	; 0x26
    24be:	8f a1       	ldd	r24, Y+39	; 0x27
    24c0:	98 a5       	ldd	r25, Y+40	; 0x28
    24c2:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assert(0, buffer[5].BattVoltage); //Sanity check - no others populated
    24c6:	63 96       	adiw	r28, 0x13	; 19
    24c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    24ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    24cc:	63 97       	sbiw	r28, 0x13	; 19
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	00 e0       	ldi	r16, 0x00	; 0
    24d4:	10 e0       	ldi	r17, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	cb 01       	movw	r24, r22
    24dc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Requested for 5, sent-to=5 => return none
	loadedTo=0;
    24e0:	ed 96       	adiw	r28, 0x3d	; 61
    24e2:	1c ae       	std	Y+60, r1	; 0x3c
    24e4:	1d ae       	std	Y+61, r1	; 0x3d
    24e6:	1e ae       	std	Y+62, r1	; 0x3e
    24e8:	1f ae       	std	Y+63, r1	; 0x3f
    24ea:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    24ec:	f4 01       	movw	r30, r8
    24ee:	87 2d       	mov	r24, r7
    24f0:	11 92       	st	Z+, r1
    24f2:	8a 95       	dec	r24
    24f4:	e9 f7       	brne	.-6      	; 0x24f0 <_Z11runLoadTestv+0x406>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    24f6:	25 e0       	ldi	r18, 0x05	; 5
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	50 e0       	ldi	r21, 0x00	; 0
    24fe:	6c e0       	ldi	r22, 0x0C	; 12
    2500:	70 e0       	ldi	r23, 0x00	; 0
    2502:	81 ea       	ldi	r24, 0xA1	; 161
    2504:	95 e0       	ldi	r25, 0x05	; 5
    2506:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(0, mem.loadSensorData(buffer, 5, &loadedTo));
    250a:	9e 01       	movw	r18, r28
    250c:	27 58       	subi	r18, 0x87	; 135
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	45 e0       	ldi	r20, 0x05	; 5
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	b4 01       	movw	r22, r8
    2516:	81 ea       	ldi	r24, 0xA1	; 161
    2518:	95 e0       	ldi	r25, 0x05	; 5
    251a:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    251e:	9b 01       	movw	r18, r22
    2520:	ac 01       	movw	r20, r24
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	cb 01       	movw	r24, r22
    2528:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(5, loadedTo); //Loaded becomes sent-to as no extra readings input
    252c:	ed 96       	adiw	r28, 0x3d	; 61
    252e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2530:	3d ad       	ldd	r19, Y+61	; 0x3d
    2532:	4e ad       	ldd	r20, Y+62	; 0x3e
    2534:	5f ad       	ldd	r21, Y+63	; 0x3f
    2536:	ed 97       	sbiw	r28, 0x3d	; 61
    2538:	65 e0       	ldi	r22, 0x05	; 5
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    2544:	29 a5       	ldd	r18, Y+41	; 0x29
    2546:	3a a5       	ldd	r19, Y+42	; 0x2a
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	cb 01       	movw	r24, r22
    2552:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Requested for 9, sent-to=5 => return none
	loadedTo=0;
    2556:	ed 96       	adiw	r28, 0x3d	; 61
    2558:	1c ae       	std	Y+60, r1	; 0x3c
    255a:	1d ae       	std	Y+61, r1	; 0x3d
    255c:	1e ae       	std	Y+62, r1	; 0x3e
    255e:	1f ae       	std	Y+63, r1	; 0x3f
    2560:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    2562:	f4 01       	movw	r30, r8
    2564:	87 2d       	mov	r24, r7
    2566:	11 92       	st	Z+, r1
    2568:	8a 95       	dec	r24
    256a:	e9 f7       	brne	.-6      	; 0x2566 <_Z11runLoadTestv+0x47c>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    256c:	25 e0       	ldi	r18, 0x05	; 5
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	6c e0       	ldi	r22, 0x0C	; 12
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	81 ea       	ldi	r24, 0xA1	; 161
    257a:	95 e0       	ldi	r25, 0x05	; 5
    257c:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(0,mem.loadSensorData(buffer, 9, &loadedTo));
    2580:	9e 01       	movw	r18, r28
    2582:	27 58       	subi	r18, 0x87	; 135
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
    2586:	49 e0       	ldi	r20, 0x09	; 9
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	b4 01       	movw	r22, r8
    258c:	81 ea       	ldi	r24, 0xA1	; 161
    258e:	95 e0       	ldi	r25, 0x05	; 5
    2590:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	cb 01       	movw	r24, r22
    259e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(5, loadedTo);
    25a2:	ed 96       	adiw	r28, 0x3d	; 61
    25a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    25a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    25a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    25aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    25ac:	ed 97       	sbiw	r28, 0x3d	; 61
    25ae:	65 e0       	ldi	r22, 0x05	; 5
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    25ba:	29 a5       	ldd	r18, Y+41	; 0x29
    25bc:	3a a5       	ldd	r19, Y+42	; 0x2a
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	cb 01       	movw	r24, r22
    25c8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>

	//NONE loaded, requested for 5, sent-to=0 => return none
	initialiseModulePristine(1); //Clear existing loads
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 36 09 	call	0x126c	; 0x126c <_Z24initialiseModulePristinej>
	loadedTo=0;
    25d4:	ed 96       	adiw	r28, 0x3d	; 61
    25d6:	1c ae       	std	Y+60, r1	; 0x3c
    25d8:	1d ae       	std	Y+61, r1	; 0x3d
    25da:	1e ae       	std	Y+62, r1	; 0x3e
    25dc:	1f ae       	std	Y+63, r1	; 0x3f
    25de:	ed 97       	sbiw	r28, 0x3d	; 61
	memset(buffer, 0, sizeof(SensorData)*10);
    25e0:	f4 01       	movw	r30, r8
    25e2:	11 92       	st	Z+, r1
    25e4:	7a 94       	dec	r7
    25e6:	e9 f7       	brne	.-6      	; 0x25e2 <_Z11runLoadTestv+0x4f8>
	assert(0, mem.loadSensorData(buffer, 5, &loadedTo));
    25e8:	9e 01       	movw	r18, r28
    25ea:	27 58       	subi	r18, 0x87	; 135
    25ec:	3f 4f       	sbci	r19, 0xFF	; 255
    25ee:	45 e0       	ldi	r20, 0x05	; 5
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	b4 01       	movw	r22, r8
    25f4:	81 ea       	ldi	r24, 0xA1	; 161
    25f6:	95 e0       	ldi	r25, 0x05	; 5
    25f8:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    25fc:	9b 01       	movw	r18, r22
    25fe:	ac 01       	movw	r20, r24
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	cb 01       	movw	r24, r22
    2606:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(0, loadedTo);
    260a:	ed 96       	adiw	r28, 0x3d	; 61
    260c:	2c ad       	ldd	r18, Y+60	; 0x3c
    260e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2610:	4e ad       	ldd	r20, Y+62	; 0x3e
    2612:	5f ad       	ldd	r21, Y+63	; 0x3f
    2614:	ed 97       	sbiw	r28, 0x3d	; 61
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	cb 01       	movw	r24, r22
    261c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(0, buffer[0].BattVoltage); //Sanity check - no others populated
    2620:	29 a5       	ldd	r18, Y+41	; 0x29
    2622:	3a a5       	ldd	r19, Y+42	; 0x2a
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	cb 01       	movw	r24, r22
    262e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
}
    2632:	c4 58       	subi	r28, 0x84	; 132
    2634:	df 4f       	sbci	r29, 0xFF	; 255
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	df 90       	pop	r13
    264e:	cf 90       	pop	r12
    2650:	bf 90       	pop	r11
    2652:	af 90       	pop	r10
    2654:	9f 90       	pop	r9
    2656:	8f 90       	pop	r8
    2658:	7f 90       	pop	r7
    265a:	08 95       	ret

0000265c <_Z10runPadTestv>:

void runPadTest()
{
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	6d 97       	sbiw	r28, 0x1d	; 29
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
	byte buffSz=16;
	char buff[buffSz];

	//Integer test
	assert(1, writeWithPad(buff, 0, 0));
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	ce 01       	movw	r24, r28
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	7c 01       	movw	r14, r24
    2686:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	00 e0       	ldi	r16, 0x00	; 0
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	61 e0       	ldi	r22, 0x01	; 1
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0", buff);
    26a2:	4f ef       	ldi	r20, 0xFF	; 255
    26a4:	5f ef       	ldi	r21, 0xFF	; 255
    26a6:	b7 01       	movw	r22, r14
    26a8:	86 e1       	ldi	r24, 0x16	; 22
    26aa:	93 e0       	ldi	r25, 0x03	; 3
    26ac:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    26b0:	68 94       	set
    26b2:	dd 24       	eor	r13, r13
    26b4:	d4 f8       	bld	r13, 4
    26b6:	f7 01       	movw	r30, r14
    26b8:	8d 2d       	mov	r24, r13
    26ba:	11 92       	st	Z+, r1
    26bc:	8a 95       	dec	r24
    26be:	e9 f7       	brne	.-6      	; 0x26ba <_Z10runPadTestv+0x5e>
	
	assert(3,writeWithPad(buff, 456, 0));
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	68 ec       	ldi	r22, 0xC8	; 200
    26c4:	71 e0       	ldi	r23, 0x01	; 1
    26c6:	c7 01       	movw	r24, r14
    26c8:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	63 e0       	ldi	r22, 0x03	; 3
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("456", buff);
    26e0:	4f ef       	ldi	r20, 0xFF	; 255
    26e2:	5f ef       	ldi	r21, 0xFF	; 255
    26e4:	b7 01       	movw	r22, r14
    26e6:	8d ee       	ldi	r24, 0xED	; 237
    26e8:	92 e0       	ldi	r25, 0x02	; 2
    26ea:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    26ee:	f7 01       	movw	r30, r14
    26f0:	8d 2d       	mov	r24, r13
    26f2:	11 92       	st	Z+, r1
    26f4:	8a 95       	dec	r24
    26f6:	e9 f7       	brne	.-6      	; 0x26f2 <_Z10runPadTestv+0x96>
	
	assert(4, writeWithPad(buff, 6, 4));
    26f8:	44 e0       	ldi	r20, 0x04	; 4
    26fa:	66 e0       	ldi	r22, 0x06	; 6
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	c7 01       	movw	r24, r14
    2700:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	50 e0       	ldi	r21, 0x00	; 0
    270c:	64 e0       	ldi	r22, 0x04	; 4
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0006", buff);
    2718:	4f ef       	ldi	r20, 0xFF	; 255
    271a:	5f ef       	ldi	r21, 0xFF	; 255
    271c:	b7 01       	movw	r22, r14
    271e:	81 ef       	ldi	r24, 0xF1	; 241
    2720:	92 e0       	ldi	r25, 0x02	; 2
    2722:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2726:	f7 01       	movw	r30, r14
    2728:	8d 2d       	mov	r24, r13
    272a:	11 92       	st	Z+, r1
    272c:	8a 95       	dec	r24
    272e:	e9 f7       	brne	.-6      	; 0x272a <_Z10runPadTestv+0xce>
	
	assert(4, writeWithPad(buff, 23, 4));
    2730:	44 e0       	ldi	r20, 0x04	; 4
    2732:	67 e1       	ldi	r22, 0x17	; 23
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	c7 01       	movw	r24, r14
    2738:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	64 e0       	ldi	r22, 0x04	; 4
    2746:	70 e0       	ldi	r23, 0x00	; 0
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0023", buff);
    2750:	4f ef       	ldi	r20, 0xFF	; 255
    2752:	5f ef       	ldi	r21, 0xFF	; 255
    2754:	b7 01       	movw	r22, r14
    2756:	86 ef       	ldi	r24, 0xF6	; 246
    2758:	92 e0       	ldi	r25, 0x02	; 2
    275a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    275e:	f7 01       	movw	r30, r14
    2760:	8d 2d       	mov	r24, r13
    2762:	11 92       	st	Z+, r1
    2764:	8a 95       	dec	r24
    2766:	e9 f7       	brne	.-6      	; 0x2762 <_Z10runPadTestv+0x106>
	
	assert(4, writeWithPad(buff, 785, 4));
    2768:	44 e0       	ldi	r20, 0x04	; 4
    276a:	61 e1       	ldi	r22, 0x11	; 17
    276c:	73 e0       	ldi	r23, 0x03	; 3
    276e:	c7 01       	movw	r24, r14
    2770:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	64 e0       	ldi	r22, 0x04	; 4
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0785", buff);
    2788:	4f ef       	ldi	r20, 0xFF	; 255
    278a:	5f ef       	ldi	r21, 0xFF	; 255
    278c:	b7 01       	movw	r22, r14
    278e:	8b ef       	ldi	r24, 0xFB	; 251
    2790:	92 e0       	ldi	r25, 0x02	; 2
    2792:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2796:	f7 01       	movw	r30, r14
    2798:	8d 2d       	mov	r24, r13
    279a:	11 92       	st	Z+, r1
    279c:	8a 95       	dec	r24
    279e:	e9 f7       	brne	.-6      	; 0x279a <_Z10runPadTestv+0x13e>
	
	assert(4, writeWithPad(buff, 1022, 4));
    27a0:	44 e0       	ldi	r20, 0x04	; 4
    27a2:	6e ef       	ldi	r22, 0xFE	; 254
    27a4:	73 e0       	ldi	r23, 0x03	; 3
    27a6:	c7 01       	movw	r24, r14
    27a8:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("1022", buff);
    27c0:	4f ef       	ldi	r20, 0xFF	; 255
    27c2:	5f ef       	ldi	r21, 0xFF	; 255
    27c4:	b7 01       	movw	r22, r14
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	93 e0       	ldi	r25, 0x03	; 3
    27ca:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    27ce:	f7 01       	movw	r30, r14
    27d0:	8d 2d       	mov	r24, r13
    27d2:	11 92       	st	Z+, r1
    27d4:	8a 95       	dec	r24
    27d6:	e9 f7       	brne	.-6      	; 0x27d2 <_Z10runPadTestv+0x176>
	
	assert(5, writeWithPad(buff, 10100, 4));
    27d8:	44 e0       	ldi	r20, 0x04	; 4
    27da:	64 e7       	ldi	r22, 0x74	; 116
    27dc:	77 e2       	ldi	r23, 0x27	; 39
    27de:	c7 01       	movw	r24, r14
    27e0:	0e 94 99 05 	call	0xb32	; 0xb32 <_Z12writeWithPadPcjh>
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	50 e0       	ldi	r21, 0x00	; 0
    27ec:	65 e0       	ldi	r22, 0x05	; 5
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("10100", buff);
    27f8:	4f ef       	ldi	r20, 0xFF	; 255
    27fa:	5f ef       	ldi	r21, 0xFF	; 255
    27fc:	b7 01       	movw	r22, r14
    27fe:	85 e0       	ldi	r24, 0x05	; 5
    2800:	93 e0       	ldi	r25, 0x03	; 3
    2802:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2806:	f7 01       	movw	r30, r14
    2808:	8d 2d       	mov	r24, r13
    280a:	11 92       	st	Z+, r1
    280c:	8a 95       	dec	r24
    280e:	e9 f7       	brne	.-6      	; 0x280a <_Z10runPadTestv+0x1ae>


	//byte test
	assert(1, writeByteWithPad(buff, 0, 0));
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	c7 01       	movw	r24, r14
    2816:	0e 94 6f 05 	call	0xade	; 0xade <_Z16writeByteWithPadPchh>
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0", buff);
    282e:	4f ef       	ldi	r20, 0xFF	; 255
    2830:	5f ef       	ldi	r21, 0xFF	; 255
    2832:	b7 01       	movw	r22, r14
    2834:	86 e1       	ldi	r24, 0x16	; 22
    2836:	93 e0       	ldi	r25, 0x03	; 3
    2838:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    283c:	f7 01       	movw	r30, r14
    283e:	8d 2d       	mov	r24, r13
    2840:	11 92       	st	Z+, r1
    2842:	8a 95       	dec	r24
    2844:	e9 f7       	brne	.-6      	; 0x2840 <_Z10runPadTestv+0x1e4>
	
	assert(3, writeByteWithPad(buff, 138, 2));
    2846:	42 e0       	ldi	r20, 0x02	; 2
    2848:	6a e8       	ldi	r22, 0x8A	; 138
    284a:	c7 01       	movw	r24, r14
    284c:	0e 94 6f 05 	call	0xade	; 0xade <_Z16writeByteWithPadPchh>
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	63 e0       	ldi	r22, 0x03	; 3
    285a:	70 e0       	ldi	r23, 0x00	; 0
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("138", buff);
    2864:	4f ef       	ldi	r20, 0xFF	; 255
    2866:	5f ef       	ldi	r21, 0xFF	; 255
    2868:	b7 01       	movw	r22, r14
    286a:	8b e0       	ldi	r24, 0x0B	; 11
    286c:	93 e0       	ldi	r25, 0x03	; 3
    286e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2872:	f7 01       	movw	r30, r14
    2874:	8d 2d       	mov	r24, r13
    2876:	11 92       	st	Z+, r1
    2878:	8a 95       	dec	r24
    287a:	e9 f7       	brne	.-6      	; 0x2876 <_Z10runPadTestv+0x21a>
	
	assert(4, writeByteWithPad(buff, 6, 4));
    287c:	44 e0       	ldi	r20, 0x04	; 4
    287e:	66 e0       	ldi	r22, 0x06	; 6
    2880:	c7 01       	movw	r24, r14
    2882:	0e 94 6f 05 	call	0xade	; 0xade <_Z16writeByteWithPadPchh>
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	64 e0       	ldi	r22, 0x04	; 4
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0006", buff);
    289a:	4f ef       	ldi	r20, 0xFF	; 255
    289c:	5f ef       	ldi	r21, 0xFF	; 255
    289e:	b7 01       	movw	r22, r14
    28a0:	81 ef       	ldi	r24, 0xF1	; 241
    28a2:	92 e0       	ldi	r25, 0x02	; 2
    28a4:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    28a8:	f7 01       	movw	r30, r14
    28aa:	8d 2d       	mov	r24, r13
    28ac:	11 92       	st	Z+, r1
    28ae:	8a 95       	dec	r24
    28b0:	e9 f7       	brne	.-6      	; 0x28ac <_Z10runPadTestv+0x250>
	
	//char* from string test
	assert(1, writeCharArrWithPad(buff, "T", 0));
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	60 e1       	ldi	r22, 0x10	; 16
    28b6:	73 e0       	ldi	r23, 0x03	; 3
    28b8:	c7 01       	movw	r24, r14
    28ba:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	50 e0       	ldi	r21, 0x00	; 0
    28c6:	61 e0       	ldi	r22, 0x01	; 1
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("T", buff);
    28d2:	4f ef       	ldi	r20, 0xFF	; 255
    28d4:	5f ef       	ldi	r21, 0xFF	; 255
    28d6:	b7 01       	movw	r22, r14
    28d8:	80 e1       	ldi	r24, 0x10	; 16
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    28e0:	f7 01       	movw	r30, r14
    28e2:	8d 2d       	mov	r24, r13
    28e4:	11 92       	st	Z+, r1
    28e6:	8a 95       	dec	r24
    28e8:	e9 f7       	brne	.-6      	; 0x28e4 <_Z10runPadTestv+0x288>
	
	assert(2, writeCharArrWithPad(buff, "T", 2));
    28ea:	42 e0       	ldi	r20, 0x02	; 2
    28ec:	60 e1       	ldi	r22, 0x10	; 16
    28ee:	73 e0       	ldi	r23, 0x03	; 3
    28f0:	c7 01       	movw	r24, r14
    28f2:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    290a:	4f ef       	ldi	r20, 0xFF	; 255
    290c:	5f ef       	ldi	r21, 0xFF	; 255
    290e:	b7 01       	movw	r22, r14
    2910:	8f e0       	ldi	r24, 0x0F	; 15
    2912:	93 e0       	ldi	r25, 0x03	; 3
    2914:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2918:	f7 01       	movw	r30, r14
    291a:	8d 2d       	mov	r24, r13
    291c:	11 92       	st	Z+, r1
    291e:	8a 95       	dec	r24
    2920:	e9 f7       	brne	.-6      	; 0x291c <_Z10runPadTestv+0x2c0>
	
	assert(5, writeCharArrWithPad(buff, "", 5));
    2922:	45 e0       	ldi	r20, 0x05	; 5
    2924:	6c ea       	ldi	r22, 0xAC	; 172
    2926:	73 e0       	ldi	r23, 0x03	; 3
    2928:	c7 01       	movw	r24, r14
    292a:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	65 e0       	ldi	r22, 0x05	; 5
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("00000", buff);
    2942:	4f ef       	ldi	r20, 0xFF	; 255
    2944:	5f ef       	ldi	r21, 0xFF	; 255
    2946:	b7 01       	movw	r22, r14
    2948:	82 e1       	ldi	r24, 0x12	; 18
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2950:	f7 01       	movw	r30, r14
    2952:	8d 2d       	mov	r24, r13
    2954:	11 92       	st	Z+, r1
    2956:	8a 95       	dec	r24
    2958:	e9 f7       	brne	.-6      	; 0x2954 <_Z10runPadTestv+0x2f8>
	
	assert(13, writeCharArrWithPad(buff, "Serious Error", 2));
    295a:	42 e0       	ldi	r20, 0x02	; 2
    295c:	68 e1       	ldi	r22, 0x18	; 24
    295e:	73 e0       	ldi	r23, 0x03	; 3
    2960:	c7 01       	movw	r24, r14
    2962:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	6d e0       	ldi	r22, 0x0D	; 13
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("Serious Error", buff);
    297a:	4f ef       	ldi	r20, 0xFF	; 255
    297c:	5f ef       	ldi	r21, 0xFF	; 255
    297e:	b7 01       	movw	r22, r14
    2980:	88 e1       	ldi	r24, 0x18	; 24
    2982:	93 e0       	ldi	r25, 0x03	; 3
    2984:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2988:	f7 01       	movw	r30, r14
    298a:	8d 2d       	mov	r24, r13
    298c:	11 92       	st	Z+, r1
    298e:	8a 95       	dec	r24
    2990:	e9 f7       	brne	.-6      	; 0x298c <_Z10runPadTestv+0x330>
//	String test((const char*)"T");
//	assert(1, writeStrToStrWithPad(strDest,0, test, 0));
//	assertRealStringsIdentical("T", strDest);
		
	//Char* test
	char testMsg[]={'T', '\0'};
    2992:	84 e5       	ldi	r24, 0x54	; 84
    2994:	89 8b       	std	Y+17, r24	; 0x11
    2996:	1a 8a       	std	Y+18, r1	; 0x12
	assert(2, writeCharArrWithPad(buff, testMsg, 2));
    2998:	42 e0       	ldi	r20, 0x02	; 2
    299a:	be 01       	movw	r22, r28
    299c:	6f 5e       	subi	r22, 0xEF	; 239
    299e:	7f 4f       	sbci	r23, 0xFF	; 255
    29a0:	c7 01       	movw	r24, r14
    29a2:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	62 e0       	ldi	r22, 0x02	; 2
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    29ba:	4f ef       	ldi	r20, 0xFF	; 255
    29bc:	5f ef       	ldi	r21, 0xFF	; 255
    29be:	b7 01       	movw	r22, r14
    29c0:	8f e0       	ldi	r24, 0x0F	; 15
    29c2:	93 e0       	ldi	r25, 0x03	; 3
    29c4:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    29c8:	f7 01       	movw	r30, r14
    29ca:	8d 2d       	mov	r24, r13
    29cc:	11 92       	st	Z+, r1
    29ce:	8a 95       	dec	r24
    29d0:	e9 f7       	brne	.-6      	; 0x29cc <_Z10runPadTestv+0x370>
	
	char testMsg2[]={'E','r','r','o','r',' ','S','o','m','e','\0'};
    29d2:	8b e0       	ldi	r24, 0x0B	; 11
    29d4:	e9 e2       	ldi	r30, 0x29	; 41
    29d6:	f1 e0       	ldi	r31, 0x01	; 1
    29d8:	de 01       	movw	r26, r28
    29da:	53 96       	adiw	r26, 0x13	; 19
    29dc:	01 90       	ld	r0, Z+
    29de:	0d 92       	st	X+, r0
    29e0:	8a 95       	dec	r24
    29e2:	e1 f7       	brne	.-8      	; 0x29dc <_Z10runPadTestv+0x380>
	assert(10, writeCharArrWithPad(buff, testMsg2, 2));
    29e4:	42 e0       	ldi	r20, 0x02	; 2
    29e6:	be 01       	movw	r22, r28
    29e8:	6d 5e       	subi	r22, 0xED	; 237
    29ea:	7f 4f       	sbci	r23, 0xFF	; 255
    29ec:	c7 01       	movw	r24, r14
    29ee:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	6a e0       	ldi	r22, 0x0A	; 10
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("Error Some", buff);
    2a06:	4f ef       	ldi	r20, 0xFF	; 255
    2a08:	5f ef       	ldi	r21, 0xFF	; 255
    2a0a:	b7 01       	movw	r22, r14
    2a0c:	86 e2       	ldi	r24, 0x26	; 38
    2a0e:	93 e0       	ldi	r25, 0x03	; 3
    2a10:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2a14:	f7 01       	movw	r30, r14
    2a16:	8d 2d       	mov	r24, r13
    2a18:	11 92       	st	Z+, r1
    2a1a:	8a 95       	dec	r24
    2a1c:	e9 f7       	brne	.-6      	; 0x2a18 <_Z10runPadTestv+0x3bc>
	
	assert(2, writeCharArrWithPad(buff, "T", 2));
    2a1e:	42 e0       	ldi	r20, 0x02	; 2
    2a20:	60 e1       	ldi	r22, 0x10	; 16
    2a22:	73 e0       	ldi	r23, 0x03	; 3
    2a24:	c7 01       	movw	r24, r14
    2a26:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	62 e0       	ldi	r22, 0x02	; 2
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("0T", buff);
    2a3e:	4f ef       	ldi	r20, 0xFF	; 255
    2a40:	5f ef       	ldi	r21, 0xFF	; 255
    2a42:	b7 01       	movw	r22, r14
    2a44:	8f e0       	ldi	r24, 0x0F	; 15
    2a46:	93 e0       	ldi	r25, 0x03	; 3
    2a48:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2a4c:	f7 01       	movw	r30, r14
    2a4e:	8d 2d       	mov	r24, r13
    2a50:	11 92       	st	Z+, r1
    2a52:	8a 95       	dec	r24
    2a54:	e9 f7       	brne	.-6      	; 0x2a50 <_Z10runPadTestv+0x3f4>
	
	assert(13, writeCharArrWithPad(buff, "Serious Error", 2));
    2a56:	42 e0       	ldi	r20, 0x02	; 2
    2a58:	68 e1       	ldi	r22, 0x18	; 24
    2a5a:	73 e0       	ldi	r23, 0x03	; 3
    2a5c:	c7 01       	movw	r24, r14
    2a5e:	0e 94 46 05 	call	0xa8c	; 0xa8c <_Z19writeCharArrWithPadPcPKch>
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	6d e0       	ldi	r22, 0x0D	; 13
    2a6c:	70 e0       	ldi	r23, 0x00	; 0
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertCharStringsIdentical("Serious Error", buff);
    2a76:	4f ef       	ldi	r20, 0xFF	; 255
    2a78:	5f ef       	ldi	r21, 0xFF	; 255
    2a7a:	b7 01       	movw	r22, r14
    2a7c:	88 e1       	ldi	r24, 0x18	; 24
    2a7e:	93 e0       	ldi	r25, 0x03	; 3
    2a80:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	memset(buff, 0, buffSz);
    2a84:	f7 01       	movw	r30, r14
    2a86:	11 92       	st	Z+, r1
    2a88:	da 94       	dec	r13
    2a8a:	e9 f7       	brne	.-6      	; 0x2a86 <_Z10runPadTestv+0x42a>
}
    2a8c:	6d 96       	adiw	r28, 0x1d	; 29
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	08 95       	ret

00002aa8 <_Z11runSendTestv>:

void runSendTest()
{
    2aa8:	5f 92       	push	r5
    2aaa:	6f 92       	push	r6
    2aac:	7f 92       	push	r7
    2aae:	8f 92       	push	r8
    2ab0:	9f 92       	push	r9
    2ab2:	af 92       	push	r10
    2ab4:	bf 92       	push	r11
    2ab6:	cf 92       	push	r12
    2ab8:	df 92       	push	r13
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	c0 5e       	subi	r28, 0xE0	; 224
    2acc:	d1 09       	sbc	r29, r1
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
	//Check numbers save and load OK in correct endian order
	unsigned long testCases[7] = {0, 1, 100, 262144, 2048, 4+32+128+1024+2048,4};
    2ad8:	8c e1       	ldi	r24, 0x1C	; 28
    2ada:	e4 e3       	ldi	r30, 0x34	; 52
    2adc:	f1 e0       	ldi	r31, 0x01	; 1
    2ade:	de 01       	movw	r26, r28
    2ae0:	11 96       	adiw	r26, 0x01	; 1
    2ae2:	01 90       	ld	r0, Z+
    2ae4:	0d 92       	st	X+, r0
    2ae6:	8a 95       	dec	r24
    2ae8:	e1 f7       	brne	.-8      	; 0x2ae2 <_Z11runSendTestv+0x3a>
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
    2aea:	e1 2c       	mov	r14, r1
    2aec:	f1 2c       	mov	r15, r1
    2aee:	87 e0       	ldi	r24, 0x07	; 7
    2af0:	e8 16       	cp	r14, r24
    2af2:	f1 04       	cpc	r15, r1
    2af4:	ec f4       	brge	.+58     	; 0x2b30 <_Z11runSendTestv+0x88>
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
    2af6:	b7 01       	movw	r22, r14
    2af8:	66 0f       	add	r22, r22
    2afa:	77 1f       	adc	r23, r23
    2afc:	66 0f       	add	r22, r22
    2afe:	77 1f       	adc	r23, r23
    2b00:	e1 e0       	ldi	r30, 0x01	; 1
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	ec 0f       	add	r30, r28
    2b06:	fd 1f       	adc	r31, r29
    2b08:	e6 0f       	add	r30, r22
    2b0a:	f7 1f       	adc	r31, r23
    2b0c:	20 81       	ld	r18, Z
    2b0e:	31 81       	ldd	r19, Z+1	; 0x01
    2b10:	42 81       	ldd	r20, Z+2	; 0x02
    2b12:	53 81       	ldd	r21, Z+3	; 0x03
    2b14:	ad e1       	ldi	r26, 0x1D	; 29
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	ac 0f       	add	r26, r28
    2b1a:	bd 1f       	adc	r27, r29
    2b1c:	6a 0f       	add	r22, r26
    2b1e:	7b 1f       	adc	r23, r27
    2b20:	81 ea       	ldi	r24, 0xA1	; 161
    2b22:	95 e0       	ldi	r25, 0x05	; 5
    2b24:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
{
	//Check numbers save and load OK in correct endian order
	unsigned long testCases[7] = {0, 1, 100, 262144, 2048, 4+32+128+1024+2048,4};
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
    2b28:	bf ef       	ldi	r27, 0xFF	; 255
    2b2a:	eb 1a       	sub	r14, r27
    2b2c:	fb 0a       	sbc	r15, r27
    2b2e:	df cf       	rjmp	.-66     	; 0x2aee <_Z11runSendTestv+0x46>
    2b30:	e1 2c       	mov	r14, r1
    2b32:	f1 2c       	mov	r15, r1
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
	
	for(int t=0 ; t<7 ; t++)
    2b34:	e7 e0       	ldi	r30, 0x07	; 7
    2b36:	ee 16       	cp	r14, r30
    2b38:	f1 04       	cpc	r15, r1
    2b3a:	9c f5       	brge	.+102    	; 0x2ba2 <_Z11runSendTestv+0xfa>
	{
		long test = testCases[t];
    2b3c:	b7 01       	movw	r22, r14
    2b3e:	66 0f       	add	r22, r22
    2b40:	77 1f       	adc	r23, r23
    2b42:	66 0f       	add	r22, r22
    2b44:	77 1f       	adc	r23, r23
    2b46:	e1 e0       	ldi	r30, 0x01	; 1
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	ec 0f       	add	r30, r28
    2b4c:	fd 1f       	adc	r31, r29
    2b4e:	e6 0f       	add	r30, r22
    2b50:	f7 1f       	adc	r31, r23
    2b52:	80 80       	ld	r8, Z
    2b54:	91 80       	ldd	r9, Z+1	; 0x01
    2b56:	a2 80       	ldd	r10, Z+2	; 0x02
    2b58:	b3 80       	ldd	r11, Z+3	; 0x03
		volatile unsigned long readValue = mem.getLongFromMemory((int)(bufferTest+t));
    2b5a:	8d e1       	ldi	r24, 0x1D	; 29
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	8c 0f       	add	r24, r28
    2b60:	9d 1f       	adc	r25, r29
    2b62:	68 0f       	add	r22, r24
    2b64:	79 1f       	adc	r23, r25
    2b66:	81 ea       	ldi	r24, 0xA1	; 161
    2b68:	95 e0       	ldi	r25, 0x05	; 5
    2b6a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2b6e:	c3 52       	subi	r28, 0x23	; 35
    2b70:	df 4f       	sbci	r29, 0xFF	; 255
    2b72:	68 83       	st	Y, r22
    2b74:	79 83       	std	Y+1, r23	; 0x01
    2b76:	8a 83       	std	Y+2, r24	; 0x02
    2b78:	9b 83       	std	Y+3, r25	; 0x03
    2b7a:	cd 5d       	subi	r28, 0xDD	; 221
    2b7c:	d0 40       	sbci	r29, 0x00	; 0
		assert(test, readValue, "long test");
    2b7e:	c3 52       	subi	r28, 0x23	; 35
    2b80:	df 4f       	sbci	r29, 0xFF	; 255
    2b82:	28 81       	ld	r18, Y
    2b84:	39 81       	ldd	r19, Y+1	; 0x01
    2b86:	4a 81       	ldd	r20, Y+2	; 0x02
    2b88:	5b 81       	ldd	r21, Y+3	; 0x03
    2b8a:	cd 5d       	subi	r28, 0xDD	; 221
    2b8c:	d0 40       	sbci	r29, 0x00	; 0
    2b8e:	01 e3       	ldi	r16, 0x31	; 49
    2b90:	13 e0       	ldi	r17, 0x03	; 3
    2b92:	c5 01       	movw	r24, r10
    2b94:	b4 01       	movw	r22, r8
    2b96:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	unsigned long bufferTest[7];
	
	for(int t=0 ; t<7 ; t++)
		mem.setLongToMemory((int)(bufferTest+t), testCases[t]);
	
	for(int t=0 ; t<7 ; t++)
    2b9a:	9f ef       	ldi	r25, 0xFF	; 255
    2b9c:	e9 1a       	sub	r14, r25
    2b9e:	f9 0a       	sbc	r15, r25
    2ba0:	c9 cf       	rjmp	.-110    	; 0x2b34 <_Z11runSendTestv+0x8c>
		volatile unsigned long readValue = mem.getLongFromMemory((int)(bufferTest+t));
		assert(test, readValue, "long test");
	}
	
	//Check values set at address are ok and don't overwrite each other
	mem.setLongToMemory(MEMLOC_MODULE_ID, 5);
    2ba2:	25 e0       	ldi	r18, 0x05	; 5
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	81 ea       	ldi	r24, 0xA1	; 161
    2bb0:	95 e0       	ldi	r25, 0x05	; 5
    2bb2:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_BOOTCOUNT, 343); //TODO: Test for overflow - if continues ok, leave it
    2bb6:	27 e5       	ldi	r18, 0x57	; 87
    2bb8:	31 e0       	ldi	r19, 0x01	; 1
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	68 e0       	ldi	r22, 0x08	; 8
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	81 ea       	ldi	r24, 0xA1	; 161
    2bc4:	95 e0       	ldi	r25, 0x05	; 5
    2bc6:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_VERSION, 843);
    2bca:	2b e4       	ldi	r18, 0x4B	; 75
    2bcc:	33 e0       	ldi	r19, 0x03	; 3
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	64 e0       	ldi	r22, 0x04	; 4
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	81 ea       	ldi	r24, 0xA1	; 161
    2bd8:	95 e0       	ldi	r25, 0x05	; 5
    2bda:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	mem.setLongToMemory(MEMLOC_SENT_UPTO, 5);
    2bde:	25 e0       	ldi	r18, 0x05	; 5
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	6c e0       	ldi	r22, 0x0C	; 12
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	81 ea       	ldi	r24, 0xA1	; 161
    2bec:	95 e0       	ldi	r25, 0x05	; 5
    2bee:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	assert(5, mem.getLongFromMemory(MEMLOC_MODULE_ID), "module id test");
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	81 ea       	ldi	r24, 0xA1	; 161
    2bf8:	95 e0       	ldi	r25, 0x05	; 5
    2bfa:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2bfe:	9b 01       	movw	r18, r22
    2c00:	ac 01       	movw	r20, r24
    2c02:	0b e3       	ldi	r16, 0x3B	; 59
    2c04:	13 e0       	ldi	r17, 0x03	; 3
    2c06:	65 e0       	ldi	r22, 0x05	; 5
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(343, mem.getLongFromMemory(MEMLOC_BOOTCOUNT), "bootcount test");
    2c12:	68 e0       	ldi	r22, 0x08	; 8
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	81 ea       	ldi	r24, 0xA1	; 161
    2c18:	95 e0       	ldi	r25, 0x05	; 5
    2c1a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2c1e:	9b 01       	movw	r18, r22
    2c20:	ac 01       	movw	r20, r24
    2c22:	0a e4       	ldi	r16, 0x4A	; 74
    2c24:	13 e0       	ldi	r17, 0x03	; 3
    2c26:	67 e5       	ldi	r22, 0x57	; 87
    2c28:	71 e0       	ldi	r23, 0x01	; 1
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(843, mem.getLongFromMemory(MEMLOC_VERSION), "version test");
    2c32:	64 e0       	ldi	r22, 0x04	; 4
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	81 ea       	ldi	r24, 0xA1	; 161
    2c38:	95 e0       	ldi	r25, 0x05	; 5
    2c3a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2c3e:	9b 01       	movw	r18, r22
    2c40:	ac 01       	movw	r20, r24
    2c42:	09 e5       	ldi	r16, 0x59	; 89
    2c44:	13 e0       	ldi	r17, 0x03	; 3
    2c46:	6b e4       	ldi	r22, 0x4B	; 75
    2c48:	73 e0       	ldi	r23, 0x03	; 3
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>

	_currCycleNumber = 343; //Normally done in loop() setup
    2c52:	87 e5       	ldi	r24, 0x57	; 87
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	a0 e0       	ldi	r26, 0x00	; 0
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_currCycleNumber>
    2c5e:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <_currCycleNumber+0x1>
    2c62:	a0 93 45 04 	sts	0x0445, r26	; 0x800445 <_currCycleNumber+0x2>
    2c66:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <_currCycleNumber+0x3>
	
	//Test a single reading save
	//Simulate 5 entries already being present
	int expNoOfReadings = 5;
	mem.setLongToMemory(MEMLOC_READING_ENTRY_COUNT, expNoOfReadings);
    2c6a:	25 e0       	ldi	r18, 0x05	; 5
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	64 e6       	ldi	r22, 0x64	; 100
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	81 ea       	ldi	r24, 0xA1	; 161
    2c78:	95 e0       	ldi	r25, 0x05	; 5
    2c7a:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
	
	SensorData r1;
    2c7e:	68 94       	set
    2c80:	55 24       	eor	r5, r5
    2c82:	53 f8       	bld	r5, 3
    2c84:	be 01       	movw	r22, r28
    2c86:	67 5c       	subi	r22, 0xC7	; 199
    2c88:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8a:	db 01       	movw	r26, r22
    2c8c:	e5 2d       	mov	r30, r5
    2c8e:	1d 92       	st	X+, r1
    2c90:	ea 95       	dec	r30
    2c92:	e9 f7       	brne	.-6      	; 0x2c8e <_Z11runSendTestv+0x1e6>
	r1.BattVoltage=1088;
    2c94:	80 e4       	ldi	r24, 0x40	; 64
    2c96:	94 e0       	ldi	r25, 0x04	; 4
    2c98:	9a af       	std	Y+58, r25	; 0x3a
    2c9a:	89 af       	std	Y+57, r24	; 0x39
	r1.Current=433;
    2c9c:	81 eb       	ldi	r24, 0xB1	; 177
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	9c af       	std	Y+60, r25	; 0x3c
    2ca2:	8b af       	std	Y+59, r24	; 0x3b
	r1.PVVoltage=1045;
    2ca4:	85 e1       	ldi	r24, 0x15	; 21
    2ca6:	94 e0       	ldi	r25, 0x04	; 4
    2ca8:	9e af       	std	Y+62, r25	; 0x3e
    2caa:	8d af       	std	Y+61, r24	; 0x3d
	r1.Temperature=308;
    2cac:	84 e3       	ldi	r24, 0x34	; 52
    2cae:	91 e0       	ldi	r25, 0x01	; 1
    2cb0:	21 96       	adiw	r28, 0x01	; 1
    2cb2:	9f af       	std	Y+63, r25	; 0x3f
    2cb4:	8e af       	std	Y+62, r24	; 0x3e
    2cb6:	21 97       	sbiw	r28, 0x01	; 1
	mem.appendSensorEntry(&r1);
    2cb8:	81 ea       	ldi	r24, 0xA1	; 161
    2cba:	95 e0       	ldi	r25, 0x05	; 5
    2cbc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	
	//Check reading and should have increased entry count by now
	SensorData dszReading[1];
    2cc0:	7e 01       	movw	r14, r28
    2cc2:	f1 e4       	ldi	r31, 0x41	; 65
    2cc4:	ef 0e       	add	r14, r31
    2cc6:	f1 1c       	adc	r15, r1
    2cc8:	d7 01       	movw	r26, r14
    2cca:	e5 2d       	mov	r30, r5
    2ccc:	1d 92       	st	X+, r1
    2cce:	ea 95       	dec	r30
    2cd0:	e9 f7       	brne	.-6      	; 0x2ccc <_Z11runSendTestv+0x224>
	unsigned long loadedTo;
	unsigned int loadCount = mem.loadSensorData(dszReading, 1, &loadedTo);
    2cd2:	9e 01       	movw	r18, r28
    2cd4:	27 5b       	subi	r18, 0xB7	; 183
    2cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	b7 01       	movw	r22, r14
    2cde:	81 ea       	ldi	r24, 0xA1	; 161
    2ce0:	95 e0       	ldi	r25, 0x05	; 5
    2ce2:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2ce6:	4b 01       	movw	r8, r22
    2ce8:	5c 01       	movw	r10, r24
	assert(++expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2cea:	64 e6       	ldi	r22, 0x64	; 100
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	81 ea       	ldi	r24, 0xA1	; 161
    2cf0:	95 e0       	ldi	r25, 0x05	; 5
    2cf2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	06 e6       	ldi	r16, 0x66	; 102
    2cfc:	13 e0       	ldi	r17, 0x03	; 3
    2cfe:	66 e0       	ldi	r22, 0x06	; 6
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(1, loadCount, "load count");
    2d0a:	a5 01       	movw	r20, r10
    2d0c:	94 01       	movw	r18, r8
    2d0e:	44 27       	eor	r20, r20
    2d10:	55 27       	eor	r21, r21
    2d12:	01 e7       	ldi	r16, 0x71	; 113
    2d14:	13 e0       	ldi	r17, 0x03	; 3
    2d16:	61 e0       	ldi	r22, 0x01	; 1
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertReadingsIdentical(r1, (SensorData)dszReading[0]);
    2d22:	d7 01       	movw	r26, r14
    2d24:	ac 90       	ld	r10, X
    2d26:	23 96       	adiw	r28, 0x03	; 3
    2d28:	bf ac       	ldd	r11, Y+63	; 0x3f
    2d2a:	23 97       	sbiw	r28, 0x03	; 3
    2d2c:	24 96       	adiw	r28, 0x04	; 4
    2d2e:	cf ac       	ldd	r12, Y+63	; 0x3f
    2d30:	24 97       	sbiw	r28, 0x04	; 4
    2d32:	25 96       	adiw	r28, 0x05	; 5
    2d34:	df ac       	ldd	r13, Y+63	; 0x3f
    2d36:	25 97       	sbiw	r28, 0x05	; 5
    2d38:	26 96       	adiw	r28, 0x06	; 6
    2d3a:	ef ac       	ldd	r14, Y+63	; 0x3f
    2d3c:	26 97       	sbiw	r28, 0x06	; 6
    2d3e:	27 96       	adiw	r28, 0x07	; 7
    2d40:	ff ac       	ldd	r15, Y+63	; 0x3f
    2d42:	27 97       	sbiw	r28, 0x07	; 7
    2d44:	28 96       	adiw	r28, 0x08	; 8
    2d46:	0f ad       	ldd	r16, Y+63	; 0x3f
    2d48:	28 97       	sbiw	r28, 0x08	; 8
    2d4a:	29 96       	adiw	r28, 0x09	; 9
    2d4c:	1f ad       	ldd	r17, Y+63	; 0x3f
    2d4e:	29 97       	sbiw	r28, 0x09	; 9
    2d50:	29 ad       	ldd	r18, Y+57	; 0x39
    2d52:	3a ad       	ldd	r19, Y+58	; 0x3a
    2d54:	4b ad       	ldd	r20, Y+59	; 0x3b
    2d56:	5c ad       	ldd	r21, Y+60	; 0x3c
    2d58:	6d ad       	ldd	r22, Y+61	; 0x3d
    2d5a:	7e ad       	ldd	r23, Y+62	; 0x3e
    2d5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d5e:	21 96       	adiw	r28, 0x01	; 1
    2d60:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d62:	21 97       	sbiw	r28, 0x01	; 1
    2d64:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>

	SensorData r2;
    2d68:	4e 01       	movw	r8, r28
    2d6a:	bd e4       	ldi	r27, 0x4D	; 77
    2d6c:	8b 0e       	add	r8, r27
    2d6e:	91 1c       	adc	r9, r1
    2d70:	f4 01       	movw	r30, r8
    2d72:	85 2d       	mov	r24, r5
    2d74:	11 92       	st	Z+, r1
    2d76:	8a 95       	dec	r24
    2d78:	e9 f7       	brne	.-6      	; 0x2d74 <_Z11runSendTestv+0x2cc>
	r2.BattVoltage=7456;
    2d7a:	80 e2       	ldi	r24, 0x20	; 32
    2d7c:	9d e1       	ldi	r25, 0x1D	; 29
    2d7e:	d4 01       	movw	r26, r8
    2d80:	11 96       	adiw	r26, 0x01	; 1
    2d82:	9c 93       	st	X, r25
    2d84:	8e 93       	st	-X, r24
	r2.Current=1785;
    2d86:	89 ef       	ldi	r24, 0xF9	; 249
    2d88:	96 e0       	ldi	r25, 0x06	; 6
    2d8a:	13 96       	adiw	r26, 0x03	; 3
    2d8c:	9c 93       	st	X, r25
    2d8e:	8e 93       	st	-X, r24
    2d90:	12 97       	sbiw	r26, 0x02	; 2
	r2.PVVoltage=8943;
    2d92:	8f ee       	ldi	r24, 0xEF	; 239
    2d94:	92 e2       	ldi	r25, 0x22	; 34
    2d96:	15 96       	adiw	r26, 0x05	; 5
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24
    2d9c:	14 97       	sbiw	r26, 0x04	; 4
	r2.Temperature=1866;
    2d9e:	8a e4       	ldi	r24, 0x4A	; 74
    2da0:	97 e0       	ldi	r25, 0x07	; 7
    2da2:	17 96       	adiw	r26, 0x07	; 7
    2da4:	9c 93       	st	X, r25
    2da6:	8e 93       	st	-X, r24
    2da8:	16 97       	sbiw	r26, 0x06	; 6
	//r2.ErrorChar='T';
	mem.appendSensorEntry(&r2);
    2daa:	b4 01       	movw	r22, r8
    2dac:	81 ea       	ldi	r24, 0xA1	; 161
    2dae:	95 e0       	ldi	r25, 0x05	; 5
    2db0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_ZN12RmMemManager17appendSensorEntryEP10SensorData>
	
	
	//Check reading and should have increased entry count by now
	SensorData dszReading2[1];
    2db4:	3e 01       	movw	r6, r28
    2db6:	b5 e5       	ldi	r27, 0x55	; 85
    2db8:	6b 0e       	add	r6, r27
    2dba:	71 1c       	adc	r7, r1
    2dbc:	f3 01       	movw	r30, r6
    2dbe:	11 92       	st	Z+, r1
    2dc0:	5a 94       	dec	r5
    2dc2:	e9 f7       	brne	.-6      	; 0x2dbe <_Z11runSendTestv+0x316>
	loadCount = mem.loadSensorData(dszReading2, 1, &loadedTo);
    2dc4:	9e 01       	movw	r18, r28
    2dc6:	27 5b       	subi	r18, 0xB7	; 183
    2dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	b3 01       	movw	r22, r6
    2dd0:	81 ea       	ldi	r24, 0xA1	; 161
    2dd2:	95 e0       	ldi	r25, 0x05	; 5
    2dd4:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2dd8:	6b 01       	movw	r12, r22
    2dda:	7c 01       	movw	r14, r24
	assert(++expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2ddc:	64 e6       	ldi	r22, 0x64	; 100
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	81 ea       	ldi	r24, 0xA1	; 161
    2de2:	95 e0       	ldi	r25, 0x05	; 5
    2de4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2de8:	9b 01       	movw	r18, r22
    2dea:	ac 01       	movw	r20, r24
    2dec:	06 e6       	ldi	r16, 0x66	; 102
    2dee:	13 e0       	ldi	r17, 0x03	; 3
    2df0:	67 e0       	ldi	r22, 0x07	; 7
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(1, loadCount, "load count");
    2dfc:	a7 01       	movw	r20, r14
    2dfe:	96 01       	movw	r18, r12
    2e00:	44 27       	eor	r20, r20
    2e02:	55 27       	eor	r21, r21
    2e04:	01 e7       	ldi	r16, 0x71	; 113
    2e06:	13 e0       	ldi	r17, 0x03	; 3
    2e08:	61 e0       	ldi	r22, 0x01	; 1
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	//assert(r2.Sent, (byte)0);//TODO
	assertReadingsIdentical(r2, (SensorData)dszReading2[0]);
    2e14:	d3 01       	movw	r26, r6
    2e16:	ac 90       	ld	r10, X
    2e18:	11 96       	adiw	r26, 0x01	; 1
    2e1a:	bc 90       	ld	r11, X
    2e1c:	11 97       	sbiw	r26, 0x01	; 1
    2e1e:	12 96       	adiw	r26, 0x02	; 2
    2e20:	cc 90       	ld	r12, X
    2e22:	12 97       	sbiw	r26, 0x02	; 2
    2e24:	13 96       	adiw	r26, 0x03	; 3
    2e26:	dc 90       	ld	r13, X
    2e28:	13 97       	sbiw	r26, 0x03	; 3
    2e2a:	14 96       	adiw	r26, 0x04	; 4
    2e2c:	ec 90       	ld	r14, X
    2e2e:	14 97       	sbiw	r26, 0x04	; 4
    2e30:	15 96       	adiw	r26, 0x05	; 5
    2e32:	fc 90       	ld	r15, X
    2e34:	15 97       	sbiw	r26, 0x05	; 5
    2e36:	16 96       	adiw	r26, 0x06	; 6
    2e38:	0c 91       	ld	r16, X
    2e3a:	16 97       	sbiw	r26, 0x06	; 6
    2e3c:	17 96       	adiw	r26, 0x07	; 7
    2e3e:	1c 91       	ld	r17, X
    2e40:	f4 01       	movw	r30, r8
    2e42:	20 81       	ld	r18, Z
    2e44:	31 81       	ldd	r19, Z+1	; 0x01
    2e46:	42 81       	ldd	r20, Z+2	; 0x02
    2e48:	53 81       	ldd	r21, Z+3	; 0x03
    2e4a:	64 81       	ldd	r22, Z+4	; 0x04
    2e4c:	75 81       	ldd	r23, Z+5	; 0x05
    2e4e:	86 81       	ldd	r24, Z+6	; 0x06
    2e50:	97 81       	ldd	r25, Z+7	; 0x07
    2e52:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	
	volatile int stop5=0;
    2e56:	6f 96       	adiw	r28, 0x1f	; 31
    2e58:	1f ae       	std	Y+63, r1	; 0x3f
    2e5a:	1e ae       	std	Y+62, r1	; 0x3e
    2e5c:	6f 97       	sbiw	r28, 0x1f	; 31
	
	//Now get last 2 readings and ensure order preserved
	SensorData dszReadings[2];
    2e5e:	3e 01       	movw	r6, r28
    2e60:	ff e5       	ldi	r31, 0x5F	; 95
    2e62:	6f 0e       	add	r6, r31
    2e64:	71 1c       	adc	r7, r1
    2e66:	80 e1       	ldi	r24, 0x10	; 16
    2e68:	d3 01       	movw	r26, r6
    2e6a:	1d 92       	st	X+, r1
    2e6c:	8a 95       	dec	r24
    2e6e:	e9 f7       	brne	.-6      	; 0x2e6a <_Z11runSendTestv+0x3c2>
	loadCount = mem.loadSensorData(dszReadings, 2, &loadedTo);
    2e70:	9e 01       	movw	r18, r28
    2e72:	27 5b       	subi	r18, 0xB7	; 183
    2e74:	3f 4f       	sbci	r19, 0xFF	; 255
    2e76:	42 e0       	ldi	r20, 0x02	; 2
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	b3 01       	movw	r22, r6
    2e7c:	81 ea       	ldi	r24, 0xA1	; 161
    2e7e:	95 e0       	ldi	r25, 0x05	; 5
    2e80:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    2e84:	6b 01       	movw	r12, r22
    2e86:	7c 01       	movw	r14, r24
	assert(expNoOfReadings, mem.getLongFromMemory(MEMLOC_READING_ENTRY_COUNT), "# readings");
    2e88:	64 e6       	ldi	r22, 0x64	; 100
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	81 ea       	ldi	r24, 0xA1	; 161
    2e8e:	95 e0       	ldi	r25, 0x05	; 5
    2e90:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2e94:	9b 01       	movw	r18, r22
    2e96:	ac 01       	movw	r20, r24
    2e98:	06 e6       	ldi	r16, 0x66	; 102
    2e9a:	13 e0       	ldi	r17, 0x03	; 3
    2e9c:	67 e0       	ldi	r22, 0x07	; 7
    2e9e:	70 e0       	ldi	r23, 0x00	; 0
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(2, loadCount, "load count");
    2ea8:	a7 01       	movw	r20, r14
    2eaa:	96 01       	movw	r18, r12
    2eac:	44 27       	eor	r20, r20
    2eae:	55 27       	eor	r21, r21
    2eb0:	01 e7       	ldi	r16, 0x71	; 113
    2eb2:	13 e0       	ldi	r17, 0x03	; 3
    2eb4:	62 e0       	ldi	r22, 0x02	; 2
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertReadingsIdentical(r1, (SensorData)dszReadings[0]); //Make sure 1 isn't clobbered !
    2ec0:	f3 01       	movw	r30, r6
    2ec2:	a0 80       	ld	r10, Z
    2ec4:	b1 80       	ldd	r11, Z+1	; 0x01
    2ec6:	c2 80       	ldd	r12, Z+2	; 0x02
    2ec8:	d3 80       	ldd	r13, Z+3	; 0x03
    2eca:	e4 80       	ldd	r14, Z+4	; 0x04
    2ecc:	f5 80       	ldd	r15, Z+5	; 0x05
    2ece:	06 81       	ldd	r16, Z+6	; 0x06
    2ed0:	17 81       	ldd	r17, Z+7	; 0x07
    2ed2:	29 ad       	ldd	r18, Y+57	; 0x39
    2ed4:	3a ad       	ldd	r19, Y+58	; 0x3a
    2ed6:	4b ad       	ldd	r20, Y+59	; 0x3b
    2ed8:	5c ad       	ldd	r21, Y+60	; 0x3c
    2eda:	6d ad       	ldd	r22, Y+61	; 0x3d
    2edc:	7e ad       	ldd	r23, Y+62	; 0x3e
    2ede:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ee0:	21 96       	adiw	r28, 0x01	; 1
    2ee2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ee4:	21 97       	sbiw	r28, 0x01	; 1
    2ee6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	assertReadingsIdentical(r2, (SensorData)dszReadings[1]);
    2eea:	d3 01       	movw	r26, r6
    2eec:	18 96       	adiw	r26, 0x08	; 8
    2eee:	ac 90       	ld	r10, X
    2ef0:	18 97       	sbiw	r26, 0x08	; 8
    2ef2:	19 96       	adiw	r26, 0x09	; 9
    2ef4:	bc 90       	ld	r11, X
    2ef6:	19 97       	sbiw	r26, 0x09	; 9
    2ef8:	1a 96       	adiw	r26, 0x0a	; 10
    2efa:	cc 90       	ld	r12, X
    2efc:	1a 97       	sbiw	r26, 0x0a	; 10
    2efe:	1b 96       	adiw	r26, 0x0b	; 11
    2f00:	dc 90       	ld	r13, X
    2f02:	1b 97       	sbiw	r26, 0x0b	; 11
    2f04:	1c 96       	adiw	r26, 0x0c	; 12
    2f06:	ec 90       	ld	r14, X
    2f08:	1c 97       	sbiw	r26, 0x0c	; 12
    2f0a:	1d 96       	adiw	r26, 0x0d	; 13
    2f0c:	fc 90       	ld	r15, X
    2f0e:	1d 97       	sbiw	r26, 0x0d	; 13
    2f10:	1e 96       	adiw	r26, 0x0e	; 14
    2f12:	0c 91       	ld	r16, X
    2f14:	1e 97       	sbiw	r26, 0x0e	; 14
    2f16:	1f 96       	adiw	r26, 0x0f	; 15
    2f18:	1c 91       	ld	r17, X
    2f1a:	f4 01       	movw	r30, r8
    2f1c:	20 81       	ld	r18, Z
    2f1e:	31 81       	ldd	r19, Z+1	; 0x01
    2f20:	42 81       	ldd	r20, Z+2	; 0x02
    2f22:	53 81       	ldd	r21, Z+3	; 0x03
    2f24:	64 81       	ldd	r22, Z+4	; 0x04
    2f26:	75 81       	ldd	r23, Z+5	; 0x05
    2f28:	86 81       	ldd	r24, Z+6	; 0x06
    2f2a:	97 81       	ldd	r25, Z+7	; 0x07
    2f2c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <_Z23assertReadingsIdentical10SensorDataS_>
	
	//Before GPRS sending, just verify last-sent-to flag value
	assert(5, mem.getLongFromMemory(MEMLOC_SENT_UPTO));
    2f30:	6c e0       	ldi	r22, 0x0C	; 12
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	81 ea       	ldi	r24, 0xA1	; 161
    2f36:	95 e0       	ldi	r25, 0x05	; 5
    2f38:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2f3c:	9b 01       	movw	r18, r22
    2f3e:	ac 01       	movw	r20, r24
    2f40:	00 e0       	ldi	r16, 0x00	; 0
    2f42:	10 e0       	ldi	r17, 0x00	; 0
    2f44:	65 e0       	ldi	r22, 0x05	; 5
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>

	//Send another batch of readings
	execTransmitReadings(_dailyCycleData);
    2f50:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_dailyCycleData>
    2f54:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    2f58:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_Z20execTransmitReadingsP14DailyCycleData>
	
	//First check data sent is as expected
	char* actualStr = gsm.MOCK_DATA_SENT_GPRS;
    2f5c:	0f 2e       	mov	r0, r31
    2f5e:	f0 e8       	ldi	r31, 0x80	; 128
    2f60:	ef 2e       	mov	r14, r31
    2f62:	f4 e0       	ldi	r31, 0x04	; 4
    2f64:	ff 2e       	mov	r15, r31
    2f66:	f0 2d       	mov	r31, r0
    2f68:	d7 01       	movw	r26, r14
    2f6a:	6d 91       	ld	r22, X+
    2f6c:	7c 91       	ld	r23, X
	char expectedStr[100] = "5-343-7-21-99-1088043310450308,7456178589431866";
    2f6e:	80 e3       	ldi	r24, 0x30	; 48
    2f70:	e0 e5       	ldi	r30, 0x50	; 80
    2f72:	f1 e0       	ldi	r31, 0x01	; 1
    2f74:	de 01       	movw	r26, r28
    2f76:	a1 59       	subi	r26, 0x91	; 145
    2f78:	bf 4f       	sbci	r27, 0xFF	; 255
    2f7a:	01 90       	ld	r0, Z+
    2f7c:	0d 92       	st	X+, r0
    2f7e:	8a 95       	dec	r24
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <_Z11runSendTestv+0x4d2>
    2f82:	ef e6       	ldi	r30, 0x6F	; 111
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	ec 0f       	add	r30, r28
    2f88:	fd 1f       	adc	r31, r29
    2f8a:	f0 96       	adiw	r30, 0x30	; 48
    2f8c:	84 e3       	ldi	r24, 0x34	; 52
    2f8e:	df 01       	movw	r26, r30
    2f90:	1d 92       	st	X+, r1
    2f92:	8a 95       	dec	r24
    2f94:	e9 f7       	brne	.-6      	; 0x2f90 <_Z11runSendTestv+0x4e8>
	assertCharStringsIdentical(expectedStr, actualStr);
    2f96:	4f ef       	ldi	r20, 0xFF	; 255
    2f98:	5f ef       	ldi	r21, 0xFF	; 255
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	81 59       	subi	r24, 0x91	; 145
    2f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>

	//Ensure sent-to flag updated
	assert(5+2, mem.getLongFromMemory(MEMLOC_SENT_UPTO));
    2fa4:	6c e0       	ldi	r22, 0x0C	; 12
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	81 ea       	ldi	r24, 0xA1	; 161
    2faa:	95 e0       	ldi	r25, 0x05	; 5
    2fac:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    2fb0:	9b 01       	movw	r18, r22
    2fb2:	ac 01       	movw	r20, r24
    2fb4:	67 e0       	ldi	r22, 0x07	; 7
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Send again. No data but still expect to receive base-level data.
	_dailyCycleData = new DailyCycleData();
    2fc0:	81 e1       	ldi	r24, 0x11	; 17
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0e 94 0f 28 	call	0x501e	; 0x501e <_Znwj>
    2fc8:	21 e1       	ldi	r18, 0x11	; 17
    2fca:	fc 01       	movw	r30, r24
    2fcc:	11 92       	st	Z+, r1
    2fce:	2a 95       	dec	r18
    2fd0:	e9 f7       	brne	.-6      	; 0x2fcc <_Z11runSendTestv+0x524>
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e4       	ldi	r19, 0x40	; 64
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	50 96       	adiw	r26, 0x10	; 16
    2fda:	3c 93       	st	X, r19
    2fdc:	2e 93       	st	-X, r18
    2fde:	1f 97       	sbiw	r26, 0x0f	; 15
    2fe0:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <_dailyCycleData+0x1>
    2fe4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <_dailyCycleData>
	gsm.MOCK_DATA_SENT_GPRS = (""); //reset mock
    2fe8:	0f 2e       	mov	r0, r31
    2fea:	fc ea       	ldi	r31, 0xAC	; 172
    2fec:	cf 2e       	mov	r12, r31
    2fee:	f3 e0       	ldi	r31, 0x03	; 3
    2ff0:	df 2e       	mov	r13, r31
    2ff2:	f0 2d       	mov	r31, r0
    2ff4:	f7 01       	movw	r30, r14
    2ff6:	d1 82       	std	Z+1, r13	; 0x01
    2ff8:	c0 82       	st	Z, r12
	execTransmitReadings(_dailyCycleData);
    2ffa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_Z20execTransmitReadingsP14DailyCycleData>
	assertCharStringsIdentical("5-343-7-21-99", gsm.MOCK_DATA_SENT_GPRS);
    2ffe:	d7 01       	movw	r26, r14
    3000:	6d 91       	ld	r22, X+
    3002:	7c 91       	ld	r23, X
    3004:	4f ef       	ldi	r20, 0xFF	; 255
    3006:	5f ef       	ldi	r21, 0xFF	; 255
    3008:	8c e7       	ldi	r24, 0x7C	; 124
    300a:	93 e0       	ldi	r25, 0x03	; 3
    300c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_Z26assertCharStringsIdenticalPKcS0_i>
	assert(5+2, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
    3010:	6c e0       	ldi	r22, 0x0C	; 12
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	81 ea       	ldi	r24, 0xA1	; 161
    3016:	95 e0       	ldi	r25, 0x05	; 5
    3018:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    301c:	9b 01       	movw	r18, r22
    301e:	ac 01       	movw	r20, r24
    3020:	67 e0       	ldi	r22, 0x07	; 7
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Add a new reading and ONLY that reading should've been sent
	gsm.MOCK_DATA_SENT_GPRS = (""); //reset mock
    302c:	f7 01       	movw	r30, r14
    302e:	d1 82       	std	Z+1, r13	; 0x01
    3030:	c0 82       	st	Z, r12
	SensorData newReading = createMockReading();
    3032:	60 e0       	ldi	r22, 0x00	; 0
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	0e 94 1c 10 	call	0x2038	; 0x2038 <_Z17createMockReadingbc>
    303a:	cd 52       	subi	r28, 0x2D	; 45
    303c:	df 4f       	sbci	r29, 0xFF	; 255
    303e:	28 83       	st	Y, r18
    3040:	c3 5d       	subi	r28, 0xD3	; 211
    3042:	d0 40       	sbci	r29, 0x00	; 0
    3044:	cc 52       	subi	r28, 0x2C	; 44
    3046:	df 4f       	sbci	r29, 0xFF	; 255
    3048:	38 83       	st	Y, r19
    304a:	c4 5d       	subi	r28, 0xD4	; 212
    304c:	d0 40       	sbci	r29, 0x00	; 0
    304e:	cb 52       	subi	r28, 0x2B	; 43
    3050:	df 4f       	sbci	r29, 0xFF	; 255
    3052:	48 83       	st	Y, r20
    3054:	c5 5d       	subi	r28, 0xD5	; 213
    3056:	d0 40       	sbci	r29, 0x00	; 0
    3058:	ca 52       	subi	r28, 0x2A	; 42
    305a:	df 4f       	sbci	r29, 0xFF	; 255
    305c:	58 83       	st	Y, r21
    305e:	c6 5d       	subi	r28, 0xD6	; 214
    3060:	d0 40       	sbci	r29, 0x00	; 0
    3062:	c9 52       	subi	r28, 0x29	; 41
    3064:	df 4f       	sbci	r29, 0xFF	; 255
    3066:	68 83       	st	Y, r22
    3068:	c7 5d       	subi	r28, 0xD7	; 215
    306a:	d0 40       	sbci	r29, 0x00	; 0
    306c:	c8 52       	subi	r28, 0x28	; 40
    306e:	df 4f       	sbci	r29, 0xFF	; 255
    3070:	78 83       	st	Y, r23
    3072:	c8 5d       	subi	r28, 0xD8	; 216
    3074:	d0 40       	sbci	r29, 0x00	; 0
    3076:	c7 52       	subi	r28, 0x27	; 39
    3078:	df 4f       	sbci	r29, 0xFF	; 255
    307a:	88 83       	st	Y, r24
    307c:	c9 5d       	subi	r28, 0xD9	; 217
    307e:	d0 40       	sbci	r29, 0x00	; 0
    3080:	c6 52       	subi	r28, 0x26	; 38
    3082:	df 4f       	sbci	r29, 0xFF	; 255
    3084:	98 83       	st	Y, r25
    3086:	ca 5d       	subi	r28, 0xDA	; 218
    3088:	d0 40       	sbci	r29, 0x00	; 0
	execTransmitReadings(_dailyCycleData);
    308a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <_dailyCycleData>
    308e:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    3092:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_Z20execTransmitReadingsP14DailyCycleData>
	volatile int len = strlen(gsm.MOCK_DATA_SENT_GPRS);
    3096:	f7 01       	movw	r30, r14
    3098:	a0 81       	ld	r26, Z
    309a:	b1 81       	ldd	r27, Z+1	; 0x01
    309c:	fd 01       	movw	r30, r26
    309e:	01 90       	ld	r0, Z+
    30a0:	00 20       	and	r0, r0
    30a2:	e9 f7       	brne	.-6      	; 0x309e <_Z11runSendTestv+0x5f6>
    30a4:	31 97       	sbiw	r30, 0x01	; 1
    30a6:	ea 1b       	sub	r30, r26
    30a8:	fb 0b       	sbc	r31, r27
    30aa:	c5 52       	subi	r28, 0x25	; 37
    30ac:	df 4f       	sbci	r29, 0xFF	; 255
    30ae:	f9 83       	std	Y+1, r31	; 0x01
    30b0:	e8 83       	st	Y, r30
    30b2:	cb 5d       	subi	r28, 0xDB	; 219
    30b4:	d0 40       	sbci	r29, 0x00	; 0
	assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS) < 35); //Could also check for commas
    30b6:	fd 01       	movw	r30, r26
    30b8:	01 90       	ld	r0, Z+
    30ba:	00 20       	and	r0, r0
    30bc:	e9 f7       	brne	.-6      	; 0x30b8 <_Z11runSendTestv+0x610>
    30be:	31 97       	sbiw	r30, 0x01	; 1
    30c0:	ea 1b       	sub	r30, r26
    30c2:	fb 0b       	sbc	r31, r27
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	b3 97       	sbiw	r30, 0x23	; 35
    30c8:	08 f0       	brcs	.+2      	; 0x30cc <_Z11runSendTestv+0x624>
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
	assert(5+3, mem.getLongFromMemory(MEMLOC_SENT_UPTO)); //unchanged
    30d0:	6c e0       	ldi	r22, 0x0C	; 12
    30d2:	70 e0       	ldi	r23, 0x00	; 0
    30d4:	81 ea       	ldi	r24, 0xA1	; 161
    30d6:	95 e0       	ldi	r25, 0x05	; 5
    30d8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    30dc:	9b 01       	movw	r18, r22
    30de:	ac 01       	movw	r20, r24
    30e0:	00 e0       	ldi	r16, 0x00	; 0
    30e2:	10 e0       	ldi	r17, 0x00	; 0
    30e4:	68 e0       	ldi	r22, 0x08	; 8
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
}
    30f0:	c0 52       	subi	r28, 0x20	; 32
    30f2:	df 4f       	sbci	r29, 0xFF	; 255
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	ff 90       	pop	r15
    3108:	ef 90       	pop	r14
    310a:	df 90       	pop	r13
    310c:	cf 90       	pop	r12
    310e:	bf 90       	pop	r11
    3110:	af 90       	pop	r10
    3112:	9f 90       	pop	r9
    3114:	8f 90       	pop	r8
    3116:	7f 90       	pop	r7
    3118:	6f 90       	pop	r6
    311a:	5f 90       	pop	r5
    311c:	08 95       	ret

0000311e <_Z16runFullCycleTestv>:
//TODO: Test timing flags - runSingleCycleTimingTest()
//TODO: Test module status sent back (?)

uint16_t _testFullCycleLoopCount=0;
boolean runFullCycleTest()
{	
    311e:	6f 92       	push	r6
    3120:	7f 92       	push	r7
    3122:	8f 92       	push	r8
    3124:	9f 92       	push	r9
    3126:	af 92       	push	r10
    3128:	bf 92       	push	r11
    312a:	cf 92       	push	r12
    312c:	df 92       	push	r13
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	62 97       	sbiw	r28, 0x12	; 18
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
	//We simulate cycles for 24 hours then ensure data got sent. Repeat for a month(years?)
	volatile uint32_t cyclesInDay = timer.getCyclesInOneDay();
    314a:	83 e5       	ldi	r24, 0x53	; 83
    314c:	94 e0       	ldi	r25, 0x04	; 4
    314e:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN6Timing17getCyclesInOneDayEv>
    3152:	69 83       	std	Y+1, r22	; 0x01
    3154:	7a 83       	std	Y+2, r23	; 0x02
    3156:	8b 83       	std	Y+3, r24	; 0x03
    3158:	9c 83       	std	Y+4, r25	; 0x04

	uint32_t loadedTo;
	
	volatile int count = get_free_memory();
    315a:	0e 94 03 09 	call	0x1206	; 0x1206 <_Z15get_free_memoryv>
    315e:	9a 87       	std	Y+10, r25	; 0x0a
    3160:	89 87       	std	Y+9, r24	; 0x09
	//on heap?
	
	
	 unsigned int requestedLoadCount = 10; //TODO: How will it store 454 ?!?!
	 unsigned long loadedUpTo = 0;
	 SensorData* dszReadings = new SensorData[requestedLoadCount];
    3162:	80 e5       	ldi	r24, 0x50	; 80
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 11 28 	call	0x5022	; 0x5022 <_Znaj>
    316a:	78 2e       	mov	r7, r24
    316c:	19 2f       	mov	r17, r25
    316e:	e8 2f       	mov	r30, r24
    3170:	f9 2f       	mov	r31, r25
    3172:	89 e0       	ldi	r24, 0x09	; 9
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	8f 3f       	cpi	r24, 0xFF	; 255
    3178:	2f ef       	ldi	r18, 0xFF	; 255
    317a:	92 07       	cpc	r25, r18
    317c:	59 f0       	breq	.+22     	; 0x3194 <_Z16runFullCycleTestv+0x76>
} ModuleData;


//TODO: All these to be uint16_t ?

typedef struct SensorData{
    317e:	11 82       	std	Z+1, r1	; 0x01
    3180:	10 82       	st	Z, r1
    3182:	13 82       	std	Z+3, r1	; 0x03
    3184:	12 82       	std	Z+2, r1	; 0x02
    3186:	15 82       	std	Z+5, r1	; 0x05
    3188:	14 82       	std	Z+4, r1	; 0x04
    318a:	17 82       	std	Z+7, r1	; 0x07
    318c:	16 82       	std	Z+6, r1	; 0x06
    318e:	38 96       	adiw	r30, 0x08	; 8
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 cf       	rjmp	.-30     	; 0x3176 <_Z16runFullCycleTestv+0x58>
	 
	//In the beginning, check no of readings in memory already
	volatile uint32_t initLoadCount = mem.loadSensorData(dszReadings, requestedLoadCount, &loadedTo);
    3194:	9e 01       	movw	r18, r28
    3196:	2b 5f       	subi	r18, 0xFB	; 251
    3198:	3f 4f       	sbci	r19, 0xFF	; 255
    319a:	4a e0       	ldi	r20, 0x0A	; 10
    319c:	50 e0       	ldi	r21, 0x00	; 0
    319e:	67 2d       	mov	r22, r7
    31a0:	71 2f       	mov	r23, r17
    31a2:	81 ea       	ldi	r24, 0xA1	; 161
    31a4:	95 e0       	ldi	r25, 0x05	; 5
    31a6:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    31aa:	6b 87       	std	Y+11, r22	; 0x0b
    31ac:	7c 87       	std	Y+12, r23	; 0x0c
    31ae:	8d 87       	std	Y+13, r24	; 0x0d
    31b0:	9e 87       	std	Y+14, r25	; 0x0e
	//memset(dszReadings, 0, sizeof(SensorData)*requestedLoadCount);

	//Call normal looping function
	boolean doContinue = loopCycle();
    31b2:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_Z9loopCyclev>
    31b6:	68 2e       	mov	r6, r24
		
	//Simulate time advanced by readingTime/3 so we get 3 readings
	timer.MOCK_ADVANCE_TIME(readingTime/3);
    31b8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <readingTime>
    31bc:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <readingTime+0x1>
    31c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <readingTime+0x2>
    31c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <readingTime+0x3>
    31c8:	2b ea       	ldi	r18, 0xAB	; 171
    31ca:	3a ea       	ldi	r19, 0xAA	; 170
    31cc:	4a ea       	ldi	r20, 0xAA	; 170
    31ce:	5a ea       	ldi	r21, 0xAA	; 170
    31d0:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <__umulsidi3>
    31d4:	00 e2       	ldi	r16, 0x20	; 32
    31d6:	0e 94 0d 3a 	call	0x741a	; 0x741a <__lshrdi3>
    31da:	82 2e       	mov	r8, r18
    31dc:	93 2e       	mov	r9, r19
    31de:	a4 2e       	mov	r10, r20
    31e0:	b5 2e       	mov	r11, r21
    31e2:	b5 01       	movw	r22, r10
    31e4:	a4 01       	movw	r20, r8
    31e6:	76 95       	lsr	r23
    31e8:	67 95       	ror	r22
    31ea:	57 95       	ror	r21
    31ec:	47 95       	ror	r20
    31ee:	83 e5       	ldi	r24, 0x53	; 83
    31f0:	94 e0       	ldi	r25, 0x04	; 4
    31f2:	0e 94 06 22 	call	0x440c	; 0x440c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
		
	if (doContinue)
    31f6:	61 10       	cpse	r6, r1
    31f8:	e2 c0       	rjmp	.+452    	; 0x33be <_Z16runFullCycleTestv+0x2a0>
		return true; //This cycle is still running, doing work
		
	_testFullCycleLoopCount++;
    31fa:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_testFullCycleLoopCount>
    31fe:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_testFullCycleLoopCount+0x1>
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <_testFullCycleLoopCount+0x1>
    3208:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_testFullCycleLoopCount>
		
	//Cycle is done, let's check we have 1 more reading saved in memory
	volatile uint32_t newLoadCount = mem.loadSensorData(dszReadings, requestedLoadCount, &loadedTo);
    320c:	9e 01       	movw	r18, r28
    320e:	2b 5f       	subi	r18, 0xFB	; 251
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	4a e0       	ldi	r20, 0x0A	; 10
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	67 2d       	mov	r22, r7
    3218:	71 2f       	mov	r23, r17
    321a:	81 ea       	ldi	r24, 0xA1	; 161
    321c:	95 e0       	ldi	r25, 0x05	; 5
    321e:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>
    3222:	6f 87       	std	Y+15, r22	; 0x0f
    3224:	78 8b       	std	Y+16, r23	; 0x10
    3226:	89 8b       	std	Y+17, r24	; 0x11
    3228:	9a 8b       	std	Y+18, r25	; 0x12
	assert(initLoadCount+1, newLoadCount);
    322a:	2f 85       	ldd	r18, Y+15	; 0x0f
    322c:	38 89       	ldd	r19, Y+16	; 0x10
    322e:	49 89       	ldd	r20, Y+17	; 0x11
    3230:	5a 89       	ldd	r21, Y+18	; 0x12
    3232:	8b 85       	ldd	r24, Y+11	; 0x0b
    3234:	9c 85       	ldd	r25, Y+12	; 0x0c
    3236:	ad 85       	ldd	r26, Y+13	; 0x0d
    3238:	be 85       	ldd	r27, Y+14	; 0x0e
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	6f 5f       	subi	r22, 0xFF	; 255
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	8f 4f       	sbci	r24, 0xFF	; 255
    3244:	9f 4f       	sbci	r25, 0xFF	; 255
    3246:	00 e0       	ldi	r16, 0x00	; 0
    3248:	10 e0       	ldi	r17, 0x00	; 0
    324a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>

	if (_testFullCycleLoopCount < cyclesInDay) {
    324e:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_testFullCycleLoopCount>
    3252:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_testFullCycleLoopCount+0x1>
    3256:	a0 e0       	ldi	r26, 0x00	; 0
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	49 81       	ldd	r20, Y+1	; 0x01
    325c:	5a 81       	ldd	r21, Y+2	; 0x02
    325e:	6b 81       	ldd	r22, Y+3	; 0x03
    3260:	7c 81       	ldd	r23, Y+4	; 0x04
    3262:	84 17       	cp	r24, r20
    3264:	95 07       	cpc	r25, r21
    3266:	a6 07       	cpc	r26, r22
    3268:	b7 07       	cpc	r27, r23
    326a:	a0 f4       	brcc	.+40     	; 0x3294 <_Z16runFullCycleTestv+0x176>
		assert(0, _isDailyCycle);
    326c:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <_isDailyCycle>
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	cb 01       	movw	r24, r22
    327c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
		assertTrue(_dailyCycleData==NULL); //This should not be set during the day
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <_dailyCycleData>
    3286:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    328a:	23 2b       	or	r18, r19
    328c:	09 f0       	breq	.+2      	; 0x3290 <_Z16runFullCycleTestv+0x172>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
	
	//# of readings required per day ?!
	
		
	//Simulate next cycle (typically after a few minutes)
	resetOnNewCycle();
    3294:	0e 94 8b 09 	call	0x1316	; 0x1316 <_Z15resetOnNewCyclev>
	if (_testFullCycleLoopCount < cyclesInDay)
    3298:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_testFullCycleLoopCount>
    329c:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <_testFullCycleLoopCount+0x1>
    32a0:	a0 e0       	ldi	r26, 0x00	; 0
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	49 81       	ldd	r20, Y+1	; 0x01
    32a6:	5a 81       	ldd	r21, Y+2	; 0x02
    32a8:	6b 81       	ldd	r22, Y+3	; 0x03
    32aa:	7c 81       	ldd	r23, Y+4	; 0x04
    32ac:	84 17       	cp	r24, r20
    32ae:	95 07       	cpc	r25, r21
    32b0:	a6 07       	cpc	r26, r22
    32b2:	b7 07       	cpc	r27, r23
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <_Z16runFullCycleTestv+0x19a>
    32b6:	83 c0       	rjmp	.+262    	; 0x33be <_Z16runFullCycleTestv+0x2a0>
		return true;
	
	//TODO: Check memory has 1 daily reading stored now and is transmitted
		
	assert(1, _isDailyCycle);
    32b8:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <_isDailyCycle>
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	00 e0       	ldi	r16, 0x00	; 0
    32c4:	10 e0       	ldi	r17, 0x00	; 0
    32c6:	61 e0       	ldi	r22, 0x01	; 1
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assertTrue(_dailyCycleData != NULL);
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <_dailyCycleData>
    32d8:	30 91 4a 04 	lds	r19, 0x044A	; 0x80044a <_dailyCycleData+0x1>
    32dc:	23 2b       	or	r18, r19
    32de:	09 f4       	brne	.+2      	; 0x32e2 <_Z16runFullCycleTestv+0x1c4>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
	boolean ret = true;
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
    32e6:	c1 2c       	mov	r12, r1
    32e8:	d1 2c       	mov	r13, r1
    32ea:	84 e6       	ldi	r24, 0x64	; 100
    32ec:	c8 16       	cp	r12, r24
    32ee:	d1 04       	cpc	r13, r1
    32f0:	0c f0       	brlt	.+2      	; 0x32f4 <_Z16runFullCycleTestv+0x1d6>
    32f2:	65 c0       	rjmp	.+202    	; 0x33be <_Z16runFullCycleTestv+0x2a0>
    32f4:	e1 2c       	mov	r14, r1
    32f6:	f1 2c       	mov	r15, r1
	{
		//Let 23 hours pass, should end up with ?? readings
		for(int hrCtr=0;hrCtr<23;hrCtr++)
    32f8:	e7 e1       	ldi	r30, 0x17	; 23
    32fa:	ee 16       	cp	r14, r30
    32fc:	f1 04       	cpc	r15, r1
    32fe:	c4 f5       	brge	.+112    	; 0x3370 <_Z16runFullCycleTestv+0x252>
		{
			loopCycle();
    3300:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_Z9loopCyclev>
			assert(0, strlen(gsm.MOCK_DATA_SENT_GPRS));
    3304:	0f 2e       	mov	r0, r31
    3306:	f0 e8       	ldi	r31, 0x80	; 128
    3308:	af 2e       	mov	r10, r31
    330a:	f4 e0       	ldi	r31, 0x04	; 4
    330c:	bf 2e       	mov	r11, r31
    330e:	f0 2d       	mov	r31, r0
    3310:	f5 01       	movw	r30, r10
    3312:	a0 81       	ld	r26, Z
    3314:	b1 81       	ldd	r27, Z+1	; 0x01
    3316:	fd 01       	movw	r30, r26
    3318:	01 90       	ld	r0, Z+
    331a:	00 20       	and	r0, r0
    331c:	e9 f7       	brne	.-6      	; 0x3318 <_Z16runFullCycleTestv+0x1fa>
    331e:	31 97       	sbiw	r30, 0x01	; 1
    3320:	9f 01       	movw	r18, r30
    3322:	2a 1b       	sub	r18, r26
    3324:	3b 0b       	sbc	r19, r27
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	00 e0       	ldi	r16, 0x00	; 0
    332c:	10 e0       	ldi	r17, 0x00	; 0
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	cb 01       	movw	r24, r22
    3334:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
			assert(0, strlen(gsm.MOCK_DATA_SENT_SMS));
    3338:	f5 01       	movw	r30, r10
    333a:	a2 81       	ldd	r26, Z+2	; 0x02
    333c:	b3 81       	ldd	r27, Z+3	; 0x03
    333e:	fd 01       	movw	r30, r26
    3340:	01 90       	ld	r0, Z+
    3342:	00 20       	and	r0, r0
    3344:	e9 f7       	brne	.-6      	; 0x3340 <_Z16runFullCycleTestv+0x222>
    3346:	31 97       	sbiw	r30, 0x01	; 1
    3348:	9f 01       	movw	r18, r30
    334a:	2a 1b       	sub	r18, r26
    334c:	3b 0b       	sbc	r19, r27
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	50 e0       	ldi	r21, 0x00	; 0
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	cb 01       	movw	r24, r22
    3358:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
			assertTrue(!_isDailyCycle);
    335c:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <_isDailyCycle>
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	89 27       	eor	r24, r25
    3364:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
	{
		//Let 23 hours pass, should end up with ?? readings
		for(int hrCtr=0;hrCtr<23;hrCtr++)
    3368:	ff ef       	ldi	r31, 0xFF	; 255
    336a:	ef 1a       	sub	r14, r31
    336c:	ff 0a       	sbc	r15, r31
    336e:	c4 cf       	rjmp	.-120    	; 0x32f8 <_Z16runFullCycleTestv+0x1da>
			assert(0, strlen(gsm.MOCK_DATA_SENT_SMS));
			assertTrue(!_isDailyCycle);
		}
		
		//EOD loop - after 1 day, should've transmitted
		loopCycle();
    3370:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_Z9loopCyclev>
		assertTrue(_isDailyCycle);
    3374:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_isDailyCycle>
    3378:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_GPRS)>0);
    337c:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <gsm>
    3380:	f0 91 81 04 	lds	r31, 0x0481	; 0x800481 <gsm+0x1>
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 81       	ld	r25, Z
    3388:	91 11       	cpse	r25, r1
    338a:	01 c0       	rjmp	.+2      	; 0x338e <_Z16runFullCycleTestv+0x270>
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>
		assertTrue(strlen(gsm.MOCK_DATA_SENT_SMS)==0);
    3392:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <gsm+0x2>
    3396:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <gsm+0x3>
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 81       	ld	r25, Z
    339e:	91 11       	cpse	r25, r1
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_Z10assertTrueb>

		//Reset
		gsm.MOCK_DATA_SENT_GPRS = "";
    33a6:	e0 e8       	ldi	r30, 0x80	; 128
    33a8:	f4 e0       	ldi	r31, 0x04	; 4
    33aa:	8c ea       	ldi	r24, 0xAC	; 172
    33ac:	93 e0       	ldi	r25, 0x03	; 3
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
		gsm.MOCK_DATA_SENT_SMS = "";
    33b2:	93 83       	std	Z+3, r25	; 0x03
    33b4:	82 83       	std	Z+2, r24	; 0x02
	assert(1, _isDailyCycle);
	assertTrue(_dailyCycleData != NULL);
	boolean ret = true;
	
	//Let's do a 100 days of readings
	for(int dayCtr=0;dayCtr<100; dayCtr++)
    33b6:	2f ef       	ldi	r18, 0xFF	; 255
    33b8:	c2 1a       	sub	r12, r18
    33ba:	d2 0a       	sbc	r13, r18
    33bc:	96 cf       	rjmp	.-212    	; 0x32ea <_Z16runFullCycleTestv+0x1cc>
		gsm.MOCK_DATA_SENT_GPRS = "";
		gsm.MOCK_DATA_SENT_SMS = "";
	}
	
	return ret;
}
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	62 96       	adiw	r28, 0x12	; 18
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	df 90       	pop	r13
    33da:	cf 90       	pop	r12
    33dc:	bf 90       	pop	r11
    33de:	af 90       	pop	r10
    33e0:	9f 90       	pop	r9
    33e2:	8f 90       	pop	r8
    33e4:	7f 90       	pop	r7
    33e6:	6f 90       	pop	r6
    33e8:	08 95       	ret

000033ea <_Z23runIntraCycleTimerTestsv>:


boolean runIntraCycleTimerTests(){
    33ea:	af 92       	push	r10
    33ec:	bf 92       	push	r11
    33ee:	cf 92       	push	r12
    33f0:	df 92       	push	r13
    33f2:	ef 92       	push	r14
    33f4:	ff 92       	push	r15
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	ad 97       	sbiw	r28, 0x2d	; 45
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    340e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <readingTime>
    3412:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <readingTime+0x1>
    3416:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <readingTime+0x2>
    341a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <readingTime+0x3>
    341e:	0f 2e       	mov	r0, r31
    3420:	f0 e8       	ldi	r31, 0x80	; 128
    3422:	af 2e       	mov	r10, r31
    3424:	fe ee       	ldi	r31, 0xEE	; 238
    3426:	bf 2e       	mov	r11, r31
    3428:	f6 e3       	ldi	r31, 0x36	; 54
    342a:	cf 2e       	mov	r12, r31
    342c:	d1 2c       	mov	r13, r1
    342e:	f0 2d       	mov	r31, r0
    3430:	e1 2c       	mov	r14, r1
    3432:	f1 2c       	mov	r15, r1
    3434:	87 01       	movw	r16, r14
    3436:	e3 94       	inc	r14
    3438:	61 e0       	ldi	r22, 0x01	; 1
    343a:	ce 01       	movw	r24, r28
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN6TimingC1Ehmmm>
	
	testTimer.MOCK_ADVANCE_TIME(9*1000);  //not early
    3442:	48 e2       	ldi	r20, 0x28	; 40
    3444:	53 e2       	ldi	r21, 0x23	; 35
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	ce 01       	movw	r24, r28
    344c:	01 96       	adiw	r24, 0x01	; 1
    344e:	0e 94 06 22 	call	0x440c	; 0x440c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    3452:	ce 01       	movw	r24, r28
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN6Timing11onCycleLoopEv>
	assert(false, testTimer._at10Secs);
    345a:	2d 85       	ldd	r18, Y+13	; 0x0d
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	00 e0       	ldi	r16, 0x00	; 0
    3464:	10 e0       	ldi	r17, 0x00	; 0
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	cb 01       	movw	r24, r22
    346c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	testTimer.MOCK_ADVANCE_TIME(11*1000); //even if time passed
    3470:	48 ef       	ldi	r20, 0xF8	; 248
    3472:	5a e2       	ldi	r21, 0x2A	; 42
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	ce 01       	movw	r24, r28
    347a:	01 96       	adiw	r24, 0x01	; 1
    347c:	0e 94 06 22 	call	0x440c	; 0x440c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN6Timing11onCycleLoopEv>
	assert(true, testTimer._at10Secs);
    3488:	2d 85       	ldd	r18, Y+13	; 0x0d
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	61 e0       	ldi	r22, 0x01	; 1
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	testTimer.MOCK_ADVANCE_TIME(12*1000); //only once
    349c:	40 ee       	ldi	r20, 0xE0	; 224
    349e:	5e e2       	ldi	r21, 0x2E	; 46
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	ce 01       	movw	r24, r28
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	0e 94 06 22 	call	0x440c	; 0x440c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>
	testTimer.onCycleLoop();
    34ac:	ce 01       	movw	r24, r28
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN6Timing11onCycleLoopEv>
	assert(false, testTimer._at10Secs);
    34b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e0       	ldi	r20, 0x00	; 0
    34ba:	50 e0       	ldi	r21, 0x00	; 0
    34bc:	60 e0       	ldi	r22, 0x00	; 0
    34be:	70 e0       	ldi	r23, 0x00	; 0
    34c0:	cb 01       	movw	r24, r22
    34c2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
}


boolean runIntraCycleTimerTests(){
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    34c6:	ce 01       	movw	r24, r28
    34c8:	01 96       	adiw	r24, 0x01	; 1
    34ca:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN6TimingD1Ev>
	assert(true, testTimer._at10Secs);
	
	testTimer.MOCK_ADVANCE_TIME(12*1000); //only once
	testTimer.onCycleLoop();
	assert(false, testTimer._at10Secs);
}
    34ce:	ad 96       	adiw	r28, 0x2d	; 45
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	ff 90       	pop	r15
    34e4:	ef 90       	pop	r14
    34e6:	df 90       	pop	r13
    34e8:	cf 90       	pop	r12
    34ea:	bf 90       	pop	r11
    34ec:	af 90       	pop	r10
    34ee:	08 95       	ret

000034f0 <_Z23runInterCycleTimerTestsv>:

boolean runInterCycleTimerTests(){ //i.e. check the IsDaily flag
    34f0:	4f 92       	push	r4
    34f2:	5f 92       	push	r5
    34f4:	6f 92       	push	r6
    34f6:	7f 92       	push	r7
    34f8:	8f 92       	push	r8
    34fa:	9f 92       	push	r9
    34fc:	af 92       	push	r10
    34fe:	bf 92       	push	r11
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	c2 56       	subi	r28, 0x62	; 98
    3516:	d1 09       	sbc	r29, r1
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    3522:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <readingTime>
    3526:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <readingTime+0x1>
    352a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <readingTime+0x2>
    352e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <readingTime+0x3>
    3532:	0f 2e       	mov	r0, r31
    3534:	f0 e8       	ldi	r31, 0x80	; 128
    3536:	af 2e       	mov	r10, r31
    3538:	fe ee       	ldi	r31, 0xEE	; 238
    353a:	bf 2e       	mov	r11, r31
    353c:	f6 e3       	ldi	r31, 0x36	; 54
    353e:	cf 2e       	mov	r12, r31
    3540:	d1 2c       	mov	r13, r1
    3542:	f0 2d       	mov	r31, r0
    3544:	e1 2c       	mov	r14, r1
    3546:	f1 2c       	mov	r15, r1
    3548:	87 01       	movw	r16, r14
    354a:	e3 94       	inc	r14
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	ce 01       	movw	r24, r28
    3550:	01 96       	adiw	r24, 0x01	; 1
    3552:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN6TimingC1Ehmmm>
	
	//Move forward and check daily-cycle flag set
	volatile uint32_t oneCycleTime = testTimer.getTimePerCycleInMs()/1000;
    3556:	ce 01       	movw	r24, r28
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	0e 94 3a 22 	call	0x4474	; 0x4474 <_ZN6Timing19getTimePerCycleInMsEv>
    355e:	28 ee       	ldi	r18, 0xE8	; 232
    3560:	33 e0       	ldi	r19, 0x03	; 3
    3562:	40 e0       	ldi	r20, 0x00	; 0
    3564:	50 e0       	ldi	r21, 0x00	; 0
    3566:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    356a:	2e a7       	std	Y+46, r18	; 0x2e
    356c:	3f a7       	std	Y+47, r19	; 0x2f
    356e:	48 ab       	std	Y+48, r20	; 0x30
    3570:	59 ab       	std	Y+49, r21	; 0x31
	volatile uint32_t cyclesInOneDay = testTimer.getCyclesInOneDay();
    3572:	ce 01       	movw	r24, r28
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	0e 94 58 22 	call	0x44b0	; 0x44b0 <_ZN6Timing17getCyclesInOneDayEv>
    357a:	6a ab       	std	Y+50, r22	; 0x32
    357c:	7b ab       	std	Y+51, r23	; 0x33
    357e:	8c ab       	std	Y+52, r24	; 0x34
    3580:	9d ab       	std	Y+53, r25	; 0x35
	
	Timing t2(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    3582:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <readingTime>
    3586:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <readingTime+0x1>
    358a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <readingTime+0x2>
    358e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <readingTime+0x3>
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	ce 01       	movw	r24, r28
    3596:	c6 96       	adiw	r24, 0x36	; 54
    3598:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN6TimingC1Ehmmm>
	testTimer = t2;//new Timing(true, 1, 3*60); //say module wakes every 3 minutes
    359c:	8d e2       	ldi	r24, 0x2D	; 45
    359e:	fe 01       	movw	r30, r28
    35a0:	f6 96       	adiw	r30, 0x36	; 54
    35a2:	de 01       	movw	r26, r28
    35a4:	11 96       	adiw	r26, 0x01	; 1
    35a6:	01 90       	ld	r0, Z+
    35a8:	0d 92       	st	X+, r0
    35aa:	8a 95       	dec	r24
    35ac:	e1 f7       	brne	.-8      	; 0x35a6 <_Z23runInterCycleTimerTestsv+0xb6>
	testTimer.onCycleLoop();
    35ae:	ce 01       	movw	r24, r28
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN6Timing11onCycleLoopEv>
	
	//The first is daily exactly once
	int32_t currTestCycle=0;
    35b6:	c1 2c       	mov	r12, r1
    35b8:	d1 2c       	mov	r13, r1
    35ba:	76 01       	movw	r14, r12
	for(;currTestCycle<cyclesInOneDay;currTestCycle++)
    35bc:	4c 2d       	mov	r20, r12
    35be:	5d 2d       	mov	r21, r13
    35c0:	6e 2d       	mov	r22, r14
    35c2:	7f 2d       	mov	r23, r15
    35c4:	8a a9       	ldd	r24, Y+50	; 0x32
    35c6:	9b a9       	ldd	r25, Y+51	; 0x33
    35c8:	ac a9       	ldd	r26, Y+52	; 0x34
    35ca:	bd a9       	ldd	r27, Y+53	; 0x35
    35cc:	c8 16       	cp	r12, r24
    35ce:	d9 06       	cpc	r13, r25
    35d0:	ea 06       	cpc	r14, r26
    35d2:	fb 06       	cpc	r15, r27
    35d4:	b8 f4       	brcc	.+46     	; 0x3604 <_Z23runInterCycleTimerTestsv+0x114>
		assert(false, testTimer.isDailyCycle(currTestCycle));
    35d6:	b7 01       	movw	r22, r14
    35d8:	a6 01       	movw	r20, r12
    35da:	ce 01       	movw	r24, r28
    35dc:	01 96       	adiw	r24, 0x01	; 1
    35de:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e0       	ldi	r20, 0x00	; 0
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	00 e0       	ldi	r16, 0x00	; 0
    35ec:	10 e0       	ldi	r17, 0x00	; 0
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	cb 01       	movw	r24, r22
    35f4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	testTimer = t2;//new Timing(true, 1, 3*60); //say module wakes every 3 minutes
	testTimer.onCycleLoop();
	
	//The first is daily exactly once
	int32_t currTestCycle=0;
	for(;currTestCycle<cyclesInOneDay;currTestCycle++)
    35f8:	2f ef       	ldi	r18, 0xFF	; 255
    35fa:	c2 1a       	sub	r12, r18
    35fc:	d2 0a       	sbc	r13, r18
    35fe:	e2 0a       	sbc	r14, r18
    3600:	f2 0a       	sbc	r15, r18
    3602:	dc cf       	rjmp	.-72     	; 0x35bc <_Z23runInterCycleTimerTestsv+0xcc>
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
    3604:	ce 01       	movw	r24, r28
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	00 e0       	ldi	r16, 0x00	; 0
    3616:	10 e0       	ldi	r17, 0x00	; 0
    3618:	61 e0       	ldi	r22, 0x01	; 1
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
    3624:	3f ef       	ldi	r19, 0xFF	; 255
    3626:	c3 1a       	sub	r12, r19
    3628:	d3 0a       	sbc	r13, r19
    362a:	e3 0a       	sbc	r14, r19
    362c:	f3 0a       	sbc	r15, r19
			  -
			 (++currTestCycle*oneCycleTime)
    362e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3630:	7f a5       	ldd	r23, Y+47	; 0x2f
    3632:	88 a9       	ldd	r24, Y+48	; 0x30
    3634:	99 a9       	ldd	r25, Y+49	; 0x31
    3636:	a7 01       	movw	r20, r14
    3638:	96 01       	movw	r18, r12
    363a:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <__mulsi3>

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
			  -
    363e:	0f 2e       	mov	r0, r31
    3640:	81 2c       	mov	r8, r1
    3642:	f3 ea       	ldi	r31, 0xA3	; 163
    3644:	9f 2e       	mov	r9, r31
    3646:	f2 e0       	ldi	r31, 0x02	; 2
    3648:	af 2e       	mov	r10, r31
    364a:	b1 2c       	mov	r11, r1
    364c:	f0 2d       	mov	r31, r0
    364e:	a5 01       	movw	r20, r10
    3650:	94 01       	movw	r18, r8
    3652:	26 1b       	sub	r18, r22
    3654:	37 0b       	sbc	r19, r23
    3656:	48 0b       	sbc	r20, r24
    3658:	59 0b       	sbc	r21, r25
    365a:	da 01       	movw	r26, r20
    365c:	c9 01       	movw	r24, r18
			 (++currTestCycle*oneCycleTime)
			) > oneCycleTime)
    365e:	4e a5       	ldd	r20, Y+46	; 0x2e
    3660:	5f a5       	ldd	r21, Y+47	; 0x2f
    3662:	68 a9       	ldd	r22, Y+48	; 0x30
    3664:	79 a9       	ldd	r23, Y+49	; 0x31
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
    3666:	48 17       	cp	r20, r24
    3668:	59 07       	cpc	r21, r25
    366a:	6a 07       	cpc	r22, r26
    366c:	7b 07       	cpc	r23, r27
    366e:	90 f4       	brcc	.+36     	; 0x3694 <_Z23runInterCycleTimerTestsv+0x1a4>
			  -
			 (++currTestCycle*oneCycleTime)
			) > oneCycleTime)
		assert(false, testTimer.isDailyCycle(currTestCycle));
    3670:	b7 01       	movw	r22, r14
    3672:	a6 01       	movw	r20, r12
    3674:	ce 01       	movw	r24, r28
    3676:	01 96       	adiw	r24, 0x01	; 1
    3678:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    367c:	28 2f       	mov	r18, r24
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	00 e0       	ldi	r16, 0x00	; 0
    3686:	10 e0       	ldi	r17, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	cb 01       	movw	r24, r22
    368e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at ~23:59:59
	
	//The next cycle occurs when the time is closest to the 48th hour
	while(( (24UL*2*3600)
    3692:	c8 cf       	rjmp	.-112    	; 0x3624 <_Z23runInterCycleTimerTestsv+0x134>
			  -
			 (++currTestCycle*oneCycleTime)
			) > oneCycleTime)
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
    3694:	4c 2d       	mov	r20, r12
    3696:	5d 2d       	mov	r21, r13
    3698:	6e 2d       	mov	r22, r14
    369a:	7f 2d       	mov	r23, r15
    369c:	ce 01       	movw	r24, r28
    369e:	01 96       	adiw	r24, 0x01	; 1
    36a0:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    36a4:	28 2f       	mov	r18, r24
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	40 e0       	ldi	r20, 0x00	; 0
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	00 e0       	ldi	r16, 0x00	; 0
    36ae:	10 e0       	ldi	r17, 0x00	; 0
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//And 3rd cycle
	while(( (24UL*3*3600)
    36bc:	46 01       	movw	r8, r12
    36be:	57 01       	movw	r10, r14
    36c0:	3f ef       	ldi	r19, 0xFF	; 255
    36c2:	83 1a       	sub	r8, r19
    36c4:	93 0a       	sbc	r9, r19
    36c6:	a3 0a       	sbc	r10, r19
    36c8:	b3 0a       	sbc	r11, r19
			  -
			(++currTestCycle*oneCycleTime)
    36ca:	6e a5       	ldd	r22, Y+46	; 0x2e
    36cc:	7f a5       	ldd	r23, Y+47	; 0x2f
    36ce:	88 a9       	ldd	r24, Y+48	; 0x30
    36d0:	99 a9       	ldd	r25, Y+49	; 0x31
    36d2:	a5 01       	movw	r20, r10
    36d4:	94 01       	movw	r18, r8
    36d6:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <__mulsi3>

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
	
	//And 3rd cycle
	while(( (24UL*3*3600)
			  -
    36da:	0f 2e       	mov	r0, r31
    36dc:	f0 e8       	ldi	r31, 0x80	; 128
    36de:	4f 2e       	mov	r4, r31
    36e0:	f4 ef       	ldi	r31, 0xF4	; 244
    36e2:	5f 2e       	mov	r5, r31
    36e4:	f3 e0       	ldi	r31, 0x03	; 3
    36e6:	6f 2e       	mov	r6, r31
    36e8:	71 2c       	mov	r7, r1
    36ea:	f0 2d       	mov	r31, r0
    36ec:	a3 01       	movw	r20, r6
    36ee:	92 01       	movw	r18, r4
    36f0:	26 1b       	sub	r18, r22
    36f2:	37 0b       	sbc	r19, r23
    36f4:	48 0b       	sbc	r20, r24
    36f6:	59 0b       	sbc	r21, r25
    36f8:	da 01       	movw	r26, r20
    36fa:	c9 01       	movw	r24, r18
			(++currTestCycle*oneCycleTime)
			) > oneCycleTime)
    36fc:	4e a5       	ldd	r20, Y+46	; 0x2e
    36fe:	5f a5       	ldd	r21, Y+47	; 0x2f
    3700:	68 a9       	ldd	r22, Y+48	; 0x30
    3702:	79 a9       	ldd	r23, Y+49	; 0x31
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
	
	//And 3rd cycle
	while(( (24UL*3*3600)
    3704:	48 17       	cp	r20, r24
    3706:	59 07       	cpc	r21, r25
    3708:	6a 07       	cpc	r22, r26
    370a:	7b 07       	cpc	r23, r27
    370c:	a0 f4       	brcc	.+40     	; 0x3736 <_Z23runInterCycleTimerTestsv+0x246>
			  -
			(++currTestCycle*oneCycleTime)
			) > oneCycleTime)
	assert(false, testTimer.isDailyCycle(currTestCycle));
    370e:	b5 01       	movw	r22, r10
    3710:	a4 01       	movw	r20, r8
    3712:	ce 01       	movw	r24, r28
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	00 e0       	ldi	r16, 0x00	; 0
    3724:	10 e0       	ldi	r17, 0x00	; 0
    3726:	60 e0       	ldi	r22, 0x00	; 0
    3728:	70 e0       	ldi	r23, 0x00	; 0
    372a:	cb 01       	movw	r24, r22
    372c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
		assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+1~23:59:59
	
	//And 3rd cycle
	while(( (24UL*3*3600)
    3730:	75 01       	movw	r14, r10
    3732:	64 01       	movw	r12, r8
    3734:	c3 cf       	rjmp	.-122    	; 0x36bc <_Z23runInterCycleTimerTestsv+0x1cc>
			  -
			(++currTestCycle*oneCycleTime)
			) > oneCycleTime)
	assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+2~23:59:59
    3736:	48 2d       	mov	r20, r8
    3738:	59 2d       	mov	r21, r9
    373a:	6a 2d       	mov	r22, r10
    373c:	7b 2d       	mov	r23, r11
    373e:	ce 01       	movw	r24, r28
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	00 e0       	ldi	r16, 0x00	; 0
    3750:	10 e0       	ldi	r17, 0x00	; 0
    3752:	61 e0       	ldi	r22, 0x01	; 1
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	assert(false, testTimer.isDailyCycle(++currTestCycle)); //at T+3~00:00:01
    375e:	b7 01       	movw	r22, r14
    3760:	a6 01       	movw	r20, r12
    3762:	4e 5f       	subi	r20, 0xFE	; 254
    3764:	5f 4f       	sbci	r21, 0xFF	; 255
    3766:	6f 4f       	sbci	r22, 0xFF	; 255
    3768:	7f 4f       	sbci	r23, 0xFF	; 255
    376a:	ce 01       	movw	r24, r28
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    3772:	28 2f       	mov	r18, r24
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e0       	ldi	r20, 0x00	; 0
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	cb 01       	movw	r24, r22
    3780:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <_Z6assertmmPc>
	
	//Move forward and check daily-cycle flag set
	volatile uint32_t oneCycleTime = testTimer.getTimePerCycleInMs()/1000;
	volatile uint32_t cyclesInOneDay = testTimer.getCyclesInOneDay();
	
	Timing t2(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    3784:	ce 01       	movw	r24, r28
    3786:	c6 96       	adiw	r24, 0x36	; 54
    3788:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN6TimingD1Ev>
	assert(false, testTimer._at10Secs);
}

boolean runInterCycleTimerTests(){ //i.e. check the IsDaily flag
	
	Timing testTimer(true, readingTime, LOOP_DELAY, INTRA_CYCLE_DOWNTIME);
    378c:	ce 01       	movw	r24, r28
    378e:	01 96       	adiw	r24, 0x01	; 1
    3790:	0e 94 05 22 	call	0x440a	; 0x440a <_ZN6TimingD1Ev>
			) > oneCycleTime)
	assert(false, testTimer.isDailyCycle(currTestCycle));

	assert(true, testTimer.isDailyCycle(currTestCycle)); //at T+2~23:59:59
	assert(false, testTimer.isDailyCycle(++currTestCycle)); //at T+3~00:00:01
}
    3794:	ce 59       	subi	r28, 0x9E	; 158
    3796:	df 4f       	sbci	r29, 0xFF	; 255
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	df 90       	pop	r13
    37b0:	cf 90       	pop	r12
    37b2:	bf 90       	pop	r11
    37b4:	af 90       	pop	r10
    37b6:	9f 90       	pop	r9
    37b8:	8f 90       	pop	r8
    37ba:	7f 90       	pop	r7
    37bc:	6f 90       	pop	r6
    37be:	5f 90       	pop	r5
    37c0:	4f 90       	pop	r4
    37c2:	08 95       	ret

000037c4 <_Z11runAllTestsv>:
#endif //End define UNIT_TESTS

bool runAllTests()
{
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <_Z11runAllTestsv+0x6>
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
	bool doContinue = true;
	
#ifdef UNIT_TESTS

	if (_isAtCycleStart) initialiseModulePristine(1);
    37ce:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_isAtCycleStart>
    37d2:	88 23       	and	r24, r24
    37d4:	21 f0       	breq	.+8      	; 0x37de <_Z11runAllTestsv+0x1a>
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	0e 94 36 09 	call	0x126c	; 0x126c <_Z24initialiseModulePristinej>



volatile int count = get_free_memory();
    37de:	0e 94 03 09 	call	0x1206	; 0x1206 <_Z15get_free_memoryv>
    37e2:	9a 83       	std	Y+2, r25	; 0x02
    37e4:	89 83       	std	Y+1, r24	; 0x01

	//Subsequent tests require looping callbacks
	doContinue = runFullCycleTest();
    37e6:	0e 94 8f 18 	call	0x311e	; 0x311e <_Z16runFullCycleTestv>
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	08 95       	ret

000037f4 <loop>:

#ifdef GPS
GpsData gpsData;
#endif

void loop() {
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <loop+0x6>
    37fa:	00 d0       	rcall	.+0      	; 0x37fc <loop+0x8>
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <loop+0xa>
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62

	if (_moduleHasShutdown)
    3802:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_moduleHasShutdown>
    3806:	81 11       	cpse	r24, r1
    3808:	52 c0       	rjmp	.+164    	; 0x38ae <loop+0xba>
		return;

volatile int free = get_free_memory();
    380a:	0e 94 03 09 	call	0x1206	; 0x1206 <_Z15get_free_memoryv>
    380e:	9a 83       	std	Y+2, r25	; 0x02
    3810:	89 83       	std	Y+1, r24	; 0x01

	volatile unsigned long currentMillis = timer.getMillis();
    3812:	83 e5       	ldi	r24, 0x53	; 83
    3814:	94 e0       	ldi	r25, 0x04	; 4
    3816:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN6Timing9getMillisEv>
    381a:	6b 83       	std	Y+3, r22	; 0x03
    381c:	7c 83       	std	Y+4, r23	; 0x04
    381e:	8d 83       	std	Y+5, r24	; 0x05
    3820:	9e 83       	std	Y+6, r25	; 0x06

	//If board b eing powered up for the first time, start timer before running 1st cycle
	if (_isAtCycleStart) {
    3822:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_isAtCycleStart>
    3826:	88 23       	and	r24, r24
    3828:	51 f1       	breq	.+84     	; 0x387e <loop+0x8a>
				
		//Update bootcount
		_currCycleNumber = 1 + mem.getLongFromMemory(MEMLOC_BOOTCOUNT);
    382a:	68 e0       	ldi	r22, 0x08	; 8
    382c:	70 e0       	ldi	r23, 0x00	; 0
    382e:	81 ea       	ldi	r24, 0xA1	; 161
    3830:	95 e0       	ldi	r25, 0x05	; 5
    3832:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN12RmMemManager17getLongFromMemoryEj>
    3836:	9b 01       	movw	r18, r22
    3838:	ac 01       	movw	r20, r24
    383a:	2f 5f       	subi	r18, 0xFF	; 255
    383c:	3f 4f       	sbci	r19, 0xFF	; 255
    383e:	4f 4f       	sbci	r20, 0xFF	; 255
    3840:	5f 4f       	sbci	r21, 0xFF	; 255
    3842:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <_currCycleNumber>
    3846:	30 93 44 04 	sts	0x0444, r19	; 0x800444 <_currCycleNumber+0x1>
    384a:	40 93 45 04 	sts	0x0445, r20	; 0x800445 <_currCycleNumber+0x2>
    384e:	50 93 46 04 	sts	0x0446, r21	; 0x800446 <_currCycleNumber+0x3>
		mem.setLongToMemory(MEMLOC_BOOTCOUNT, _currCycleNumber);
    3852:	68 e0       	ldi	r22, 0x08	; 8
    3854:	70 e0       	ldi	r23, 0x00	; 0
    3856:	81 ea       	ldi	r24, 0xA1	; 161
    3858:	95 e0       	ldi	r25, 0x05	; 5
    385a:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN12RmMemManager15setLongToMemoryEjm>
					
		_isDailyCycle = timer.isDailyCycle(_currCycleNumber);
    385e:	40 91 43 04 	lds	r20, 0x0443	; 0x800443 <_currCycleNumber>
    3862:	50 91 44 04 	lds	r21, 0x0444	; 0x800444 <_currCycleNumber+0x1>
    3866:	60 91 45 04 	lds	r22, 0x0445	; 0x800445 <_currCycleNumber+0x2>
    386a:	70 91 46 04 	lds	r23, 0x0446	; 0x800446 <_currCycleNumber+0x3>
    386e:	83 e5       	ldi	r24, 0x53	; 83
    3870:	94 e0       	ldi	r25, 0x04	; 4
    3872:	0e 94 7d 23 	call	0x46fa	; 0x46fa <_ZN6Timing12isDailyCycleEm>
    3876:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <_isDailyCycle>
		
		//Reset all data before new cycle begins
		//Strictly not necessary as it gets re-booted each time (but req'd for unit-tests)
		resetAtCycleStart();
    387a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <_Z17resetAtCycleStartv>
	}

	timer.onCycleLoop();
    387e:	83 e5       	ldi	r24, 0x53	; 83
    3880:	94 e0       	ldi	r25, 0x04	; 4
    3882:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN6Timing11onCycleLoopEv>
	
	
	
	
	#ifdef UNIT_TESTS
		doContinue = runAllTests();
    3886:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <_Z11runAllTestsv>
			doContinue = loopSystemTest();
		else
			doContinue = loopCycle();
	#endif
	
	_isAtCycleStart = false;
    388a:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_isAtCycleStart>

	//If all work done, shut down
	if (!doContinue) {
    388e:	81 11       	cpse	r24, r1
    3890:	08 c0       	rjmp	.+16     	; 0x38a2 <loop+0xae>
		
		RM_LOG(F("END CYCLE"));
    3892:	62 e9       	ldi	r22, 0x92	; 146
    3894:	73 e0       	ldi	r23, 0x03	; 3
    3896:	85 e6       	ldi	r24, 0x65	; 101
    3898:	97 e0       	ldi	r25, 0x07	; 7
    389a:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
		shutdown();
    389e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z8shutdownv>
	}

	//Try POST to site with large timeout
	//(2 minutes)

	delay(LOOP_DELAY);
    38a2:	61 e0       	ldi	r22, 0x01	; 1
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
}
    38ae:	26 96       	adiw	r28, 0x06	; 6
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <_GLOBAL__sub_I__isSystemTest>:
		//TODO:Extensive logging for later diagnostics
		//TODO: See if memory can store 480+ readings !!
		//TODO: SMS FALLBACK TEST
	
	return doContinue;
}
    38c0:	6f ef       	ldi	r22, 0xFF	; 255
    38c2:	7f ef       	ldi	r23, 0xFF	; 255
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z41__static_initialization_and_destruction_0ii>
    38cc:	08 95       	ret

000038ce <_GLOBAL__sub_D__isSystemTest>:
    38ce:	6f ef       	ldi	r22, 0xFF	; 255
    38d0:	7f ef       	ldi	r23, 0xFF	; 255
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z41__static_initialization_and_destruction_0ii>
    38da:	08 95       	ret

000038dc <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    38e4:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_state>
  twi_sendStop = true;		// default value
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <twi_sendStop>
  twi_inRepStart = false;
    38ee:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    38f2:	82 e1       	ldi	r24, 0x12	; 18
    38f4:	61 e0       	ldi	r22, 0x01	; 1
    38f6:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
  digitalWrite(SCL, 1);
    38fa:	83 e1       	ldi	r24, 0x13	; 19
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    3902:	89 eb       	ldi	r24, 0xB9	; 185
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	29 eb       	ldi	r18, 0xB9	; 185
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	f9 01       	movw	r30, r18
    390c:	20 81       	ld	r18, Z
    390e:	2e 7f       	andi	r18, 0xFE	; 254
    3910:	fc 01       	movw	r30, r24
    3912:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    3914:	89 eb       	ldi	r24, 0xB9	; 185
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	29 eb       	ldi	r18, 0xB9	; 185
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	f9 01       	movw	r30, r18
    391e:	20 81       	ld	r18, Z
    3920:	2d 7f       	andi	r18, 0xFD	; 253
    3922:	fc 01       	movw	r30, r24
    3924:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    3926:	88 eb       	ldi	r24, 0xB8	; 184
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	28 e4       	ldi	r18, 0x48	; 72
    392c:	fc 01       	movw	r30, r24
    392e:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3930:	8c eb       	ldi	r24, 0xBC	; 188
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	25 e4       	ldi	r18, 0x45	; 69
    3936:	fc 01       	movw	r30, r24
    3938:	20 83       	st	Z, r18
}
    393a:	00 00       	nop
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	08 95       	ret

00003942 <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    3942:	cf 93       	push	r28
    3944:	df 93       	push	r29
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    394a:	8c eb       	ldi	r24, 0xBC	; 188
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	2c eb       	ldi	r18, 0xBC	; 188
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	f9 01       	movw	r30, r18
    3954:	20 81       	ld	r18, Z
    3956:	2a 7b       	andi	r18, 0xBA	; 186
    3958:	fc 01       	movw	r30, r24
    395a:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    395c:	82 e1       	ldi	r24, 0x12	; 18
    395e:	60 e0       	ldi	r22, 0x00	; 0
    3960:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
  digitalWrite(SCL, 0);
    3964:	83 e1       	ldi	r24, 0x13	; 19
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
}
    396c:	00 00       	nop
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	08 95       	ret

00003974 <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	1f 92       	push	r1
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    3980:	8a eb       	ldi	r24, 0xBA	; 186
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	29 81       	ldd	r18, Y+1	; 0x01
    3986:	22 0f       	add	r18, r18
    3988:	fc 01       	movw	r30, r24
    398a:	20 83       	st	Z, r18
}
    398c:	00 00       	nop
    398e:	0f 90       	pop	r0
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	08 95       	ret

00003996 <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	cf 93       	push	r28
    399c:	df 93       	push	r29
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <twi_setFrequency+0xa>
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <twi_setFrequency+0xc>
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	69 83       	std	Y+1, r22	; 0x01
    39a8:	7a 83       	std	Y+2, r23	; 0x02
    39aa:	8b 83       	std	Y+3, r24	; 0x03
    39ac:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    39ae:	08 eb       	ldi	r16, 0xB8	; 184
    39b0:	10 e0       	ldi	r17, 0x00	; 0
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	94 e2       	ldi	r25, 0x24	; 36
    39b6:	a4 ef       	ldi	r26, 0xF4	; 244
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	29 81       	ldd	r18, Y+1	; 0x01
    39bc:	3a 81       	ldd	r19, Y+2	; 0x02
    39be:	4b 81       	ldd	r20, Y+3	; 0x03
    39c0:	5c 81       	ldd	r21, Y+4	; 0x04
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    39ca:	da 01       	movw	r26, r20
    39cc:	c9 01       	movw	r24, r18
    39ce:	40 97       	sbiw	r24, 0x10	; 16
    39d0:	a1 09       	sbc	r26, r1
    39d2:	b1 09       	sbc	r27, r1
    39d4:	b6 95       	lsr	r27
    39d6:	a7 95       	ror	r26
    39d8:	97 95       	ror	r25
    39da:	87 95       	ror	r24
    39dc:	f8 01       	movw	r30, r16
    39de:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    39e0:	00 00       	nop
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	df 91       	pop	r29
    39ec:	cf 91       	pop	r28
    39ee:	1f 91       	pop	r17
    39f0:	0f 91       	pop	r16
    39f2:	08 95       	ret

000039f4 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <twi_readFrom+0x6>
    39fa:	00 d0       	rcall	.+0      	; 0x39fc <twi_readFrom+0x8>
    39fc:	00 d0       	rcall	.+0      	; 0x39fe <twi_readFrom+0xa>
    39fe:	cd b7       	in	r28, 0x3d	; 61
    3a00:	de b7       	in	r29, 0x3e	; 62
    3a02:	8a 83       	std	Y+2, r24	; 0x02
    3a04:	7c 83       	std	Y+4, r23	; 0x04
    3a06:	6b 83       	std	Y+3, r22	; 0x03
    3a08:	4d 83       	std	Y+5, r20	; 0x05
    3a0a:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0e:	81 32       	cpi	r24, 0x21	; 33
    3a10:	18 f0       	brcs	.+6      	; 0x3a18 <twi_readFrom+0x24>
    return 0;
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	6b c0       	rjmp	.+214    	; 0x3aec <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    3a16:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    3a18:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_state>
    3a1c:	88 23       	and	r24, r24
    3a1e:	d9 f7       	brne	.-10     	; 0x3a16 <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_state>
  twi_sendStop = sendStop;
    3a26:	8e 81       	ldd	r24, Y+6	; 0x06
    3a28:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3a2c:	8f ef       	ldi	r24, 0xFF	; 255
    3a2e:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3a32:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	81 50       	subi	r24, 0x01	; 1
    3a3a:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <twi_slarw>
  twi_slarw |= address << 1;
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	88 2f       	mov	r24, r24
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	98 2f       	mov	r25, r24
    3a50:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <twi_slarw>
    3a54:	89 2b       	or	r24, r25
    3a56:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <twi_slarw>

  if (true == twi_inRepStart) {
    3a5a:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <twi_inRepStart>
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	c1 f4       	brne	.+48     	; 0x3a92 <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    3a62:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    3a66:	8b eb       	ldi	r24, 0xBB	; 187
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <twi_slarw>
    3a6e:	fc 01       	movw	r30, r24
    3a70:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    3a72:	8c eb       	ldi	r24, 0xBC	; 188
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	fc 01       	movw	r30, r24
    3a78:	80 81       	ld	r24, Z
    3a7a:	88 2f       	mov	r24, r24
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	88 70       	andi	r24, 0x08	; 8
    3a80:	99 27       	eor	r25, r25
    3a82:	89 2b       	or	r24, r25
    3a84:	81 f7       	brne	.-32     	; 0x3a66 <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    3a86:	8c eb       	ldi	r24, 0xBC	; 188
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	25 ec       	ldi	r18, 0xC5	; 197
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	20 83       	st	Z, r18
    3a90:	07 c0       	rjmp	.+14     	; 0x3aa0 <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3a92:	8c eb       	ldi	r24, 0xBC	; 188
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	25 ee       	ldi	r18, 0xE5	; 229
    3a98:	fc 01       	movw	r30, r24
    3a9a:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3a9c:	01 c0       	rjmp	.+2      	; 0x3aa0 <twi_readFrom+0xac>
    continue;
    3a9e:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3aa0:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_state>
    3aa4:	81 30       	cpi	r24, 0x01	; 1
    3aa6:	d9 f3       	breq	.-10     	; 0x3a9e <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3aa8:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3aac:	8d 81       	ldd	r24, Y+5	; 0x05
    3aae:	98 17       	cp	r25, r24
    3ab0:	18 f4       	brcc	.+6      	; 0x3ab8 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    3ab2:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3ab6:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3ab8:	19 82       	std	Y+1, r1	; 0x01
    3aba:	13 c0       	rjmp	.+38     	; 0x3ae2 <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ac6:	82 0f       	add	r24, r18
    3ac8:	93 1f       	adc	r25, r19
    3aca:	29 81       	ldd	r18, Y+1	; 0x01
    3acc:	22 2f       	mov	r18, r18
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	27 55       	subi	r18, 0x57	; 87
    3ad2:	39 4f       	sbci	r19, 0xF9	; 249
    3ad4:	f9 01       	movw	r30, r18
    3ad6:	20 81       	ld	r18, Z
    3ad8:	fc 01       	movw	r30, r24
    3ada:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	8f 5f       	subi	r24, 0xFF	; 255
    3ae0:	89 83       	std	Y+1, r24	; 0x01
    3ae2:	99 81       	ldd	r25, Y+1	; 0x01
    3ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae6:	98 17       	cp	r25, r24
    3ae8:	48 f3       	brcs	.-46     	; 0x3abc <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3aec:	26 96       	adiw	r28, 0x06	; 6
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	df 91       	pop	r29
    3afa:	cf 91       	pop	r28
    3afc:	08 95       	ret

00003afe <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    3afe:	0f 93       	push	r16
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	27 97       	sbiw	r28, 0x07	; 7
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	8a 83       	std	Y+2, r24	; 0x02
    3b16:	7c 83       	std	Y+4, r23	; 0x04
    3b18:	6b 83       	std	Y+3, r22	; 0x03
    3b1a:	4d 83       	std	Y+5, r20	; 0x05
    3b1c:	2e 83       	std	Y+6, r18	; 0x06
    3b1e:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3b20:	8d 81       	ldd	r24, Y+5	; 0x05
    3b22:	81 32       	cpi	r24, 0x21	; 33
    3b24:	18 f0       	brcs	.+6      	; 0x3b2c <twi_writeTo+0x2e>
    return 1;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	76 c0       	rjmp	.+236    	; 0x3c16 <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    3b2a:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3b2c:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_state>
    3b30:	88 23       	and	r24, r24
    3b32:	d9 f7       	brne	.-10     	; 0x3b2a <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    3b34:	82 e0       	ldi	r24, 0x02	; 2
    3b36:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_state>
  twi_sendStop = sendStop;
    3b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b3c:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3b40:	8f ef       	ldi	r24, 0xFF	; 255
    3b42:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3b46:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3b50:	19 82       	std	Y+1, r1	; 0x01
    3b52:	13 c0       	rjmp	.+38     	; 0x3b7a <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	88 2f       	mov	r24, r24
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	29 81       	ldd	r18, Y+1	; 0x01
    3b5c:	22 2f       	mov	r18, r18
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	4b 81       	ldd	r20, Y+3	; 0x03
    3b62:	5c 81       	ldd	r21, Y+4	; 0x04
    3b64:	24 0f       	add	r18, r20
    3b66:	35 1f       	adc	r19, r21
    3b68:	f9 01       	movw	r30, r18
    3b6a:	20 81       	ld	r18, Z
    3b6c:	87 55       	subi	r24, 0x57	; 87
    3b6e:	99 4f       	sbci	r25, 0xF9	; 249
    3b70:	fc 01       	movw	r30, r24
    3b72:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	8f 5f       	subi	r24, 0xFF	; 255
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	99 81       	ldd	r25, Y+1	; 0x01
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	98 17       	cp	r25, r24
    3b80:	48 f3       	brcs	.-46     	; 0x3b54 <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    3b82:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <twi_slarw>
  twi_slarw |= address << 1;
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	88 2f       	mov	r24, r24
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	88 0f       	add	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	98 2f       	mov	r25, r24
    3b92:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <twi_slarw>
    3b96:	89 2b       	or	r24, r25
    3b98:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    3b9c:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <twi_inRepStart>
    3ba0:	81 30       	cpi	r24, 0x01	; 1
    3ba2:	c1 f4       	brne	.+48     	; 0x3bd4 <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    3ba4:	10 92 a4 06 	sts	0x06A4, r1	; 0x8006a4 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    3ba8:	8b eb       	ldi	r24, 0xBB	; 187
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <twi_slarw>
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    3bb4:	8c eb       	ldi	r24, 0xBC	; 188
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	fc 01       	movw	r30, r24
    3bba:	80 81       	ld	r24, Z
    3bbc:	88 2f       	mov	r24, r24
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	88 70       	andi	r24, 0x08	; 8
    3bc2:	99 27       	eor	r25, r25
    3bc4:	89 2b       	or	r24, r25
    3bc6:	81 f7       	brne	.-32     	; 0x3ba8 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    3bc8:	8c eb       	ldi	r24, 0xBC	; 188
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	25 ec       	ldi	r18, 0xC5	; 197
    3bce:	fc 01       	movw	r30, r24
    3bd0:	20 83       	st	Z, r18
    3bd2:	07 c0       	rjmp	.+14     	; 0x3be2 <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    3bd4:	8c eb       	ldi	r24, 0xBC	; 188
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	25 ee       	ldi	r18, 0xE5	; 229
    3bda:	fc 01       	movw	r30, r24
    3bdc:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3bde:	01 c0       	rjmp	.+2      	; 0x3be2 <twi_writeTo+0xe4>
    continue;
    3be0:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3be2:	8e 81       	ldd	r24, Y+6	; 0x06
    3be4:	88 23       	and	r24, r24
    3be6:	21 f0       	breq	.+8      	; 0x3bf0 <twi_writeTo+0xf2>
    3be8:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_state>
    3bec:	82 30       	cpi	r24, 0x02	; 2
    3bee:	c1 f3       	breq	.-16     	; 0x3be0 <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    3bf0:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <twi_error>
    3bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    3bf6:	11 f4       	brne	.+4      	; 0x3bfc <twi_writeTo+0xfe>
    return 0;	// success
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	0d c0       	rjmp	.+26     	; 0x3c16 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    3bfc:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <twi_error>
    3c00:	80 32       	cpi	r24, 0x20	; 32
    3c02:	11 f4       	brne	.+4      	; 0x3c08 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	07 c0       	rjmp	.+14     	; 0x3c16 <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    3c08:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <twi_error>
    3c0c:	80 33       	cpi	r24, 0x30	; 48
    3c0e:	11 f4       	brne	.+4      	; 0x3c14 <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    3c10:	83 e0       	ldi	r24, 0x03	; 3
    3c12:	01 c0       	rjmp	.+2      	; 0x3c16 <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    3c14:	84 e0       	ldi	r24, 0x04	; 4
}
    3c16:	27 96       	adiw	r28, 0x07	; 7
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	df 91       	pop	r29
    3c24:	cf 91       	pop	r28
    3c26:	0f 91       	pop	r16
    3c28:	08 95       	ret

00003c2a <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	00 d0       	rcall	.+0      	; 0x3c30 <twi_transmit+0x6>
    3c30:	00 d0       	rcall	.+0      	; 0x3c32 <twi_transmit+0x8>
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	9b 83       	std	Y+3, r25	; 0x03
    3c38:	8a 83       	std	Y+2, r24	; 0x02
    3c3a:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    3c3c:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_txBufferLength>
    3c40:	28 2f       	mov	r18, r24
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	8c 81       	ldd	r24, Y+4	; 0x04
    3c46:	88 2f       	mov	r24, r24
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	82 0f       	add	r24, r18
    3c4c:	93 1f       	adc	r25, r19
    3c4e:	81 97       	sbiw	r24, 0x21	; 33
    3c50:	14 f0       	brlt	.+4      	; 0x3c56 <twi_transmit+0x2c>
    return 1;
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	2c c0       	rjmp	.+88     	; 0x3cae <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    3c56:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <twi_state>
    3c5a:	84 30       	cpi	r24, 0x04	; 4
    3c5c:	11 f0       	breq	.+4      	; 0x3c62 <twi_transmit+0x38>
    return 2;
    3c5e:	82 e0       	ldi	r24, 0x02	; 2
    3c60:	26 c0       	rjmp	.+76     	; 0x3cae <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    3c62:	19 82       	std	Y+1, r1	; 0x01
    3c64:	19 c0       	rjmp	.+50     	; 0x3c98 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    3c66:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_txBufferLength>
    3c6a:	28 2f       	mov	r18, r24
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
    3c70:	88 2f       	mov	r24, r24
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	82 0f       	add	r24, r18
    3c76:	93 1f       	adc	r25, r19
    3c78:	29 81       	ldd	r18, Y+1	; 0x01
    3c7a:	22 2f       	mov	r18, r18
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	4a 81       	ldd	r20, Y+2	; 0x02
    3c80:	5b 81       	ldd	r21, Y+3	; 0x03
    3c82:	24 0f       	add	r18, r20
    3c84:	35 1f       	adc	r19, r21
    3c86:	f9 01       	movw	r30, r18
    3c88:	20 81       	ld	r18, Z
    3c8a:	85 53       	subi	r24, 0x35	; 53
    3c8c:	99 4f       	sbci	r25, 0xF9	; 249
    3c8e:	fc 01       	movw	r30, r24
    3c90:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	8f 5f       	subi	r24, 0xFF	; 255
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	99 81       	ldd	r25, Y+1	; 0x01
    3c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9c:	98 17       	cp	r25, r24
    3c9e:	18 f3       	brcs	.-58     	; 0x3c66 <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    3ca0:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <twi_txBufferLength>
    3ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca6:	89 0f       	add	r24, r25
    3ca8:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_txBufferLength>
  
  return 0;
    3cac:	80 e0       	ldi	r24, 0x00	; 0
}
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	00 d0       	rcall	.+0      	; 0x3cc2 <twi_attachSlaveRxEvent+0x6>
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <twi_onSlaveReceive+0x1>
    3cd2:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <twi_onSlaveReceive>
}
    3cd6:	00 00       	nop
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	08 95       	ret

00003ce2 <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	00 d0       	rcall	.+0      	; 0x3ce8 <twi_attachSlaveTxEvent+0x6>
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	9a 83       	std	Y+2, r25	; 0x02
    3cee:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <twi_onSlaveTransmit+0x1>
    3cf8:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <twi_onSlaveTransmit>
}
    3cfc:	00 00       	nop
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	08 95       	ret

00003d08 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	1f 92       	push	r1
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	88 23       	and	r24, r24
    3d18:	31 f0       	breq	.+12     	; 0x3d26 <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d1a:	8c eb       	ldi	r24, 0xBC	; 188
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	25 ec       	ldi	r18, 0xC5	; 197
    3d20:	fc 01       	movw	r30, r24
    3d22:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    3d24:	05 c0       	rjmp	.+10     	; 0x3d30 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3d26:	8c eb       	ldi	r24, 0xBC	; 188
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	25 e8       	ldi	r18, 0x85	; 133
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	20 83       	st	Z, r18
  }
}
    3d30:	00 00       	nop
    3d32:	0f 90       	pop	r0
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	08 95       	ret

00003d3a <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3d42:	8c eb       	ldi	r24, 0xBC	; 188
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	25 ed       	ldi	r18, 0xD5	; 213
    3d48:	fc 01       	movw	r30, r24
    3d4a:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <twi_stop+0x16>
    continue;
    3d4e:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3d50:	8c eb       	ldi	r24, 0xBC	; 188
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	fc 01       	movw	r30, r24
    3d56:	80 81       	ld	r24, Z
    3d58:	88 2f       	mov	r24, r24
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	80 71       	andi	r24, 0x10	; 16
    3d5e:	99 27       	eor	r25, r25
    3d60:	89 2b       	or	r24, r25
    3d62:	a9 f7       	brne	.-22     	; 0x3d4e <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3d64:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_state>
}
    3d68:	00 00       	nop
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	08 95       	ret

00003d70 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3d78:	8c eb       	ldi	r24, 0xBC	; 188
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	25 ec       	ldi	r18, 0xC5	; 197
    3d7e:	fc 01       	movw	r30, r24
    3d80:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    3d82:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_state>
}
    3d86:	00 00       	nop
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	08 95       	ret

00003d8e <__vector_24>:

ISR(TWI_vect)
{
    3d8e:	1f 92       	push	r1
    3d90:	0f 92       	push	r0
    3d92:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3d96:	0f 92       	push	r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	2f 93       	push	r18
    3d9c:	3f 93       	push	r19
    3d9e:	4f 93       	push	r20
    3da0:	5f 93       	push	r21
    3da2:	6f 93       	push	r22
    3da4:	7f 93       	push	r23
    3da6:	8f 93       	push	r24
    3da8:	9f 93       	push	r25
    3daa:	af 93       	push	r26
    3dac:	bf 93       	push	r27
    3dae:	ef 93       	push	r30
    3db0:	ff 93       	push	r31
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    3dba:	89 eb       	ldi	r24, 0xB9	; 185
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	80 81       	ld	r24, Z
    3dc2:	88 2f       	mov	r24, r24
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	88 7f       	andi	r24, 0xF8	; 248
    3dc8:	99 27       	eor	r25, r25
    3dca:	09 2e       	mov	r0, r25
    3dcc:	00 0c       	add	r0, r0
    3dce:	aa 0b       	sbc	r26, r26
    3dd0:	bb 0b       	sbc	r27, r27
    3dd2:	40 e0       	ldi	r20, 0x00	; 0
    3dd4:	50 e0       	ldi	r21, 0x00	; 0
    3dd6:	28 ef       	ldi	r18, 0xF8	; 248
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	84 1b       	sub	r24, r20
    3ddc:	95 0b       	sbc	r25, r21
    3dde:	28 17       	cp	r18, r24
    3de0:	39 07       	cpc	r19, r25
    3de2:	08 f4       	brcc	.+2      	; 0x3de6 <__vector_24+0x58>
    3de4:	17 c1       	rjmp	.+558    	; 0x4014 <__vector_24+0x286>
    3de6:	8c 5c       	subi	r24, 0xCC	; 204
    3de8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dea:	fc 01       	movw	r30, r24
    3dec:	0c 94 cf 39 	jmp	0x739e	; 0x739e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3df0:	8b eb       	ldi	r24, 0xBB	; 187
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <twi_slarw>
    3df8:	fc 01       	movw	r30, r24
    3dfa:	20 83       	st	Z, r18
      twi_reply(1);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      break;
    3e02:	08 c1       	rjmp	.+528    	; 0x4014 <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3e04:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3e08:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <twi_masterBufferLength>
    3e0c:	98 17       	cp	r25, r24
    3e0e:	a0 f4       	brcc	.+40     	; 0x3e38 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3e10:	8b eb       	ldi	r24, 0xBB	; 187
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	20 91 c9 06 	lds	r18, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3e18:	31 e0       	ldi	r19, 0x01	; 1
    3e1a:	32 0f       	add	r19, r18
    3e1c:	30 93 c9 06 	sts	0x06C9, r19	; 0x8006c9 <twi_masterBufferIndex>
    3e20:	22 2f       	mov	r18, r18
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	27 55       	subi	r18, 0x57	; 87
    3e26:	39 4f       	sbci	r19, 0xF9	; 249
    3e28:	f9 01       	movw	r30, r18
    3e2a:	20 81       	ld	r18, Z
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	20 83       	st	Z, r18
        twi_reply(1);
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    3e36:	ee c0       	rjmp	.+476    	; 0x4014 <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    3e38:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <twi_sendStop>
    3e3c:	88 23       	and	r24, r24
    3e3e:	19 f0       	breq	.+6      	; 0x3e46 <__vector_24+0xb8>
          twi_stop();
    3e40:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    3e44:	e7 c0       	rjmp	.+462    	; 0x4014 <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3e4c:	8c eb       	ldi	r24, 0xBC	; 188
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	24 ea       	ldi	r18, 0xA4	; 164
    3e52:	fc 01       	movw	r30, r24
    3e54:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    3e56:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_state>
	}
      }
      break;
    3e5a:	dc c0       	rjmp	.+440    	; 0x4014 <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3e5c:	80 e2       	ldi	r24, 0x20	; 32
    3e5e:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <twi_error>
      twi_stop();
    3e62:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <twi_stop>
      break;
    3e66:	d6 c0       	rjmp	.+428    	; 0x4014 <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3e68:	80 e3       	ldi	r24, 0x30	; 48
    3e6a:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <twi_error>
      twi_stop();
    3e6e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <twi_stop>
      break;
    3e72:	d0 c0       	rjmp	.+416    	; 0x4014 <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3e74:	88 e3       	ldi	r24, 0x38	; 56
    3e76:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <twi_error>
      twi_releaseBus();
    3e7a:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <twi_releaseBus>
      break;
    3e7e:	ca c0       	rjmp	.+404    	; 0x4014 <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3e80:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3e84:	91 e0       	ldi	r25, 0x01	; 1
    3e86:	98 0f       	add	r25, r24
    3e88:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <twi_masterBufferIndex>
    3e8c:	88 2f       	mov	r24, r24
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	2b eb       	ldi	r18, 0xBB	; 187
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	f9 01       	movw	r30, r18
    3e96:	20 81       	ld	r18, Z
    3e98:	87 55       	subi	r24, 0x57	; 87
    3e9a:	99 4f       	sbci	r25, 0xF9	; 249
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	20 83       	st	Z, r18
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3ea0:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3ea4:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <twi_masterBufferLength>
    3ea8:	98 17       	cp	r25, r24
    3eaa:	20 f4       	brcc	.+8      	; 0x3eb4 <__vector_24+0x126>
        twi_reply(1);
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    3eb2:	b0 c0       	rjmp	.+352    	; 0x4014 <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      }
      break;
    3eba:	ac c0       	rjmp	.+344    	; 0x4014 <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3ebc:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <twi_masterBufferIndex>
    3ec0:	91 e0       	ldi	r25, 0x01	; 1
    3ec2:	98 0f       	add	r25, r24
    3ec4:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <twi_masterBufferIndex>
    3ec8:	88 2f       	mov	r24, r24
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	2b eb       	ldi	r18, 0xBB	; 187
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	f9 01       	movw	r30, r18
    3ed2:	20 81       	ld	r18, Z
    3ed4:	87 55       	subi	r24, 0x57	; 87
    3ed6:	99 4f       	sbci	r25, 0xF9	; 249
    3ed8:	fc 01       	movw	r30, r24
    3eda:	20 83       	st	Z, r18
	if (twi_sendStop)
    3edc:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <twi_sendStop>
    3ee0:	88 23       	and	r24, r24
    3ee2:	19 f0       	breq	.+6      	; 0x3eea <__vector_24+0x15c>
          twi_stop();
    3ee4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    3ee8:	95 c0       	rjmp	.+298    	; 0x4014 <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3ef0:	8c eb       	ldi	r24, 0xBC	; 188
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	24 ea       	ldi	r18, 0xA4	; 164
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    3efa:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_state>
	}    
	break;
    3efe:	8a c0       	rjmp	.+276    	; 0x4014 <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    3f00:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <twi_stop>
      break;
    3f04:	87 c0       	rjmp	.+270    	; 0x4014 <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3f06:	83 e0       	ldi	r24, 0x03	; 3
    3f08:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3f0c:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <twi_rxBufferIndex>
      twi_reply(1);
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      break;
    3f16:	7e c0       	rjmp	.+252    	; 0x4014 <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3f18:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <twi_rxBufferIndex>
    3f1c:	80 32       	cpi	r24, 0x20	; 32
    3f1e:	a0 f4       	brcc	.+40     	; 0x3f48 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3f20:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <twi_rxBufferIndex>
    3f24:	91 e0       	ldi	r25, 0x01	; 1
    3f26:	98 0f       	add	r25, r24
    3f28:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <twi_rxBufferIndex>
    3f2c:	88 2f       	mov	r24, r24
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	2b eb       	ldi	r18, 0xBB	; 187
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	f9 01       	movw	r30, r18
    3f36:	20 81       	ld	r18, Z
    3f38:	83 51       	subi	r24, 0x13	; 19
    3f3a:	99 4f       	sbci	r25, 0xF9	; 249
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	20 83       	st	Z, r18
        twi_reply(1);
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    3f46:	66 c0       	rjmp	.+204    	; 0x4014 <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      }
      break;
    3f4e:	62 c0       	rjmp	.+196    	; 0x4014 <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3f50:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3f54:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <twi_rxBufferIndex>
    3f58:	80 32       	cpi	r24, 0x20	; 32
    3f5a:	40 f4       	brcc	.+16     	; 0x3f6c <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3f5c:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <twi_rxBufferIndex>
    3f60:	88 2f       	mov	r24, r24
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	83 51       	subi	r24, 0x13	; 19
    3f66:	99 4f       	sbci	r25, 0xF9	; 249
    3f68:	fc 01       	movw	r30, r24
    3f6a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3f6c:	20 91 a7 06 	lds	r18, 0x06A7	; 0x8006a7 <twi_onSlaveReceive>
    3f70:	30 91 a8 06 	lds	r19, 0x06A8	; 0x8006a8 <twi_onSlaveReceive+0x1>
    3f74:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <twi_rxBufferIndex>
    3f78:	88 2f       	mov	r24, r24
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	8d ee       	ldi	r24, 0xED	; 237
    3f80:	96 e0       	ldi	r25, 0x06	; 6
    3f82:	f9 01       	movw	r30, r18
    3f84:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3f86:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <twi_rxBufferIndex>
      break;
    3f8a:	44 c0       	rjmp	.+136    	; 0x4014 <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      break;
    3f92:	40 c0       	rjmp	.+128    	; 0x4014 <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3f94:	84 e0       	ldi	r24, 0x04	; 4
    3f96:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3f9a:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3f9e:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3fa2:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <twi_onSlaveTransmit>
    3fa6:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <twi_onSlaveTransmit+0x1>
    3faa:	fc 01       	movw	r30, r24
    3fac:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3fae:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_txBufferLength>
    3fb2:	88 23       	and	r24, r24
    3fb4:	29 f4       	brne	.+10     	; 0x3fc0 <__vector_24+0x232>
        twi_txBufferLength = 1;
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3fbc:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3fc0:	8b eb       	ldi	r24, 0xBB	; 187
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	20 91 eb 06 	lds	r18, 0x06EB	; 0x8006eb <twi_txBufferIndex>
    3fc8:	31 e0       	ldi	r19, 0x01	; 1
    3fca:	32 0f       	add	r19, r18
    3fcc:	30 93 eb 06 	sts	0x06EB, r19	; 0x8006eb <twi_txBufferIndex>
    3fd0:	22 2f       	mov	r18, r18
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	25 53       	subi	r18, 0x35	; 53
    3fd6:	39 4f       	sbci	r19, 0xF9	; 249
    3fd8:	f9 01       	movw	r30, r18
    3fda:	20 81       	ld	r18, Z
    3fdc:	fc 01       	movw	r30, r24
    3fde:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3fe0:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <twi_txBufferIndex>
    3fe4:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <twi_txBufferLength>
    3fe8:	98 17       	cp	r25, r24
    3fea:	20 f4       	brcc	.+8      	; 0x3ff4 <__vector_24+0x266>
        twi_reply(1);
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    3ff2:	10 c0       	rjmp	.+32     	; 0x4014 <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      }
      break;
    3ffa:	0c c0       	rjmp	.+24     	; 0x4014 <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    4002:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <twi_state>
      break;
    4006:	06 c0       	rjmp	.+12     	; 0x4014 <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4008:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <twi_error>
      twi_stop();
    400c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <twi_stop>
      break;
    4010:	01 c0       	rjmp	.+2      	; 0x4014 <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    4012:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4014:	00 00       	nop
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	ff 91       	pop	r31
    401c:	ef 91       	pop	r30
    401e:	bf 91       	pop	r27
    4020:	af 91       	pop	r26
    4022:	9f 91       	pop	r25
    4024:	8f 91       	pop	r24
    4026:	7f 91       	pop	r23
    4028:	6f 91       	pop	r22
    402a:	5f 91       	pop	r21
    402c:	4f 91       	pop	r20
    402e:	3f 91       	pop	r19
    4030:	2f 91       	pop	r18
    4032:	0f 90       	pop	r0
    4034:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    4038:	0f 90       	pop	r0
    403a:	1f 90       	pop	r1
    403c:	18 95       	reti

0000403e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    403e:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	20 91 44 07 	lds	r18, 0x0744	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
}
    4048:	82 1b       	sub	r24, r18
    404a:	91 09       	sbc	r25, r1
    404c:	08 95       	ret

0000404e <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    404e:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
    4052:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>
    4056:	98 17       	cp	r25, r24
    4058:	50 f4       	brcc	.+20     	; 0x406e <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    405a:	e9 2f       	mov	r30, r25
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	eb 5b       	subi	r30, 0xBB	; 187
    4060:	f8 4f       	sbci	r31, 0xF8	; 248
    4062:	20 81       	ld	r18, Z
    4064:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    4066:	9f 5f       	subi	r25, 0xFF	; 255
    4068:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    406e:	2f ef       	ldi	r18, 0xFF	; 255
    4070:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    4072:	c9 01       	movw	r24, r18
    4074:	08 95       	ret

00004076 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    4076:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
    407a:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>
    407e:	e8 17       	cp	r30, r24
    4080:	30 f4       	brcc	.+12     	; 0x408e <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	eb 5b       	subi	r30, 0xBB	; 187
    4086:	f8 4f       	sbci	r31, 0xF8	; 248
    4088:	80 81       	ld	r24, Z
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    408e:	8f ef       	ldi	r24, 0xFF	; 255
    4090:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    4092:	08 95       	ret

00004094 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    4094:	08 95       	ret

00004096 <_ZN7TwoWire16onReceiveServiceEPhi>:
  // XXX: to be implemented.
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    4096:	cf 93       	push	r28
    4098:	df 93       	push	r29
    409a:	ec 01       	movw	r28, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    409c:	e0 91 1b 07 	lds	r30, 0x071B	; 0x80071b <_ZN7TwoWire14user_onReceiveE>
    40a0:	f0 91 1c 07 	lds	r31, 0x071C	; 0x80071c <_ZN7TwoWire14user_onReceiveE+0x1>
    40a4:	30 97       	sbiw	r30, 0x00	; 0
    40a6:	e1 f0       	breq	.+56     	; 0x40e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    40a8:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
    40ac:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>
    40b0:	98 17       	cp	r25, r24
    40b2:	b0 f0       	brcs	.+44     	; 0x40e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    40b6:	29 2f       	mov	r18, r25
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	26 17       	cp	r18, r22
    40bc:	37 07       	cpc	r19, r23
    40be:	54 f4       	brge	.+20     	; 0x40d4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    rxBuffer[i] = inBytes[i];    
    40c0:	de 01       	movw	r26, r28
    40c2:	a9 0f       	add	r26, r25
    40c4:	b1 1d       	adc	r27, r1
    40c6:	4c 91       	ld	r20, X
    40c8:	d9 01       	movw	r26, r18
    40ca:	ab 5b       	subi	r26, 0xBB	; 187
    40cc:	b8 4f       	sbci	r27, 0xF8	; 248
    40ce:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    40d0:	9f 5f       	subi	r25, 0xFF	; 255
    40d2:	f1 cf       	rjmp	.-30     	; 0x40b6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    40d4:	cb 01       	movw	r24, r22
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    40d6:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    40da:	60 93 43 07 	sts	0x0743, r22	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    40de:	09 95       	icall
}
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	08 95       	ret

000040e6 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    40e6:	e0 91 1d 07 	lds	r30, 0x071D	; 0x80071d <_ZN7TwoWire14user_onRequestE>
    40ea:	f0 91 1e 07 	lds	r31, 0x071E	; 0x80071e <_ZN7TwoWire14user_onRequestE+0x1>
    40ee:	30 97       	sbiw	r30, 0x00	; 0
    40f0:	29 f0       	breq	.+10     	; 0x40fc <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    40f2:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    40f6:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    40fa:	09 95       	icall
    40fc:	08 95       	ret

000040fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    40fe:	cf 92       	push	r12
    4100:	df 92       	push	r13
    4102:	ef 92       	push	r14
    4104:	ff 92       	push	r15
    4106:	0f 93       	push	r16
    4108:	1f 93       	push	r17
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	8c 01       	movw	r16, r24
    4110:	6b 01       	movw	r12, r22
    4112:	7a 01       	movw	r14, r20
  if(transmitting){
    4114:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <_ZN7TwoWire12transmittingE>
    4118:	88 23       	and	r24, r24
    411a:	99 f0       	breq	.+38     	; 0x4142 <_ZN7TwoWire5writeEPKhj+0x44>
    411c:	c0 e0       	ldi	r28, 0x00	; 0
    411e:	d0 e0       	ldi	r29, 0x00	; 0
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    4120:	ce 15       	cp	r28, r14
    4122:	df 05       	cpc	r29, r15
    4124:	90 f4       	brcc	.+36     	; 0x414a <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    4126:	d8 01       	movw	r26, r16
    4128:	ed 91       	ld	r30, X+
    412a:	fc 91       	ld	r31, X
    412c:	01 90       	ld	r0, Z+
    412e:	f0 81       	ld	r31, Z
    4130:	e0 2d       	mov	r30, r0
    4132:	d6 01       	movw	r26, r12
    4134:	ac 0f       	add	r26, r28
    4136:	bd 1f       	adc	r27, r29
    4138:	6c 91       	ld	r22, X
    413a:	c8 01       	movw	r24, r16
    413c:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    413e:	21 96       	adiw	r28, 0x01	; 1
    4140:	ef cf       	rjmp	.-34     	; 0x4120 <_ZN7TwoWire5writeEPKhj+0x22>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    4142:	64 2f       	mov	r22, r20
    4144:	c6 01       	movw	r24, r12
    4146:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <twi_transmit>
  }
  return quantity;
}
    414a:	c7 01       	movw	r24, r14
    414c:	df 91       	pop	r29
    414e:	cf 91       	pop	r28
    4150:	1f 91       	pop	r17
    4152:	0f 91       	pop	r16
    4154:	ff 90       	pop	r15
    4156:	ef 90       	pop	r14
    4158:	df 90       	pop	r13
    415a:	cf 90       	pop	r12
    415c:	08 95       	ret

0000415e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	1f 92       	push	r1
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
    4168:	fc 01       	movw	r30, r24
    416a:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    416c:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <_ZN7TwoWire12transmittingE>
    4170:	99 23       	and	r25, r25
    4172:	d9 f0       	breq	.+54     	; 0x41aa <_ZN7TwoWire5writeEh+0x4c>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    4174:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <_ZN7TwoWire14txBufferLengthE>
    4178:	90 32       	cpi	r25, 0x20	; 32
    417a:	38 f0       	brcs	.+14     	; 0x418a <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	93 83       	std	Z+3, r25	; 0x03
    4182:	82 83       	std	Z+2, r24	; 0x02
      setWriteError();
      return 0;
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	17 c0       	rjmp	.+46     	; 0x41b8 <_ZN7TwoWire5writeEh+0x5a>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    418a:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <_ZN7TwoWire13txBufferIndexE>
    418e:	e8 2f       	mov	r30, r24
    4190:	f0 e0       	ldi	r31, 0x00	; 0
    4192:	ee 5d       	subi	r30, 0xDE	; 222
    4194:	f8 4f       	sbci	r31, 0xF8	; 248
    4196:	99 81       	ldd	r25, Y+1	; 0x01
    4198:	90 83       	st	Z, r25
    ++txBufferIndex;
    419a:	8f 5f       	subi	r24, 0xFF	; 255
    419c:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    41a0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <_ZN7TwoWire14txBufferLengthE>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	07 c0       	rjmp	.+14     	; 0x41b8 <_ZN7TwoWire5writeEh+0x5a>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    41aa:	61 e0       	ldi	r22, 0x01	; 1
    41ac:	ce 01       	movw	r24, r28
    41ae:	01 96       	adiw	r24, 0x01	; 1
    41b0:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <twi_transmit>
  }
  return 1;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	90 e0       	ldi	r25, 0x00	; 0
}
    41b8:	0f 90       	pop	r0
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	08 95       	ret

000041c0 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    41c0:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    41c2:	13 82       	std	Z+3, r1	; 0x03
    41c4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    41c6:	88 ee       	ldi	r24, 0xE8	; 232
    41c8:	93 e0       	ldi	r25, 0x03	; 3
    41ca:	a0 e0       	ldi	r26, 0x00	; 0
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	84 83       	std	Z+4, r24	; 0x04
    41d0:	95 83       	std	Z+5, r25	; 0x05
    41d2:	a6 83       	std	Z+6, r26	; 0x06
    41d4:	b7 83       	std	Z+7, r27	; 0x07
    41d6:	8e e8       	ldi	r24, 0x8E	; 142
    41d8:	93 e0       	ldi	r25, 0x03	; 3
    41da:	91 83       	std	Z+1, r25	; 0x01
    41dc:	80 83       	st	Z, r24
    41de:	08 95       	ret

000041e0 <_Z41__static_initialization_and_destruction_0ii>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	39 f4       	brne	.+14     	; 0x41f2 <_Z41__static_initialization_and_destruction_0ii+0x12>
    41e4:	6f 3f       	cpi	r22, 0xFF	; 255
    41e6:	7f 4f       	sbci	r23, 0xFF	; 255
    41e8:	21 f4       	brne	.+8      	; 0x41f2 <_Z41__static_initialization_and_destruction_0ii+0x12>
    41ea:	8f e0       	ldi	r24, 0x0F	; 15
    41ec:	97 e0       	ldi	r25, 0x07	; 7
    41ee:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <_ZN7TwoWireC1Ev>
    41f2:	08 95       	ret

000041f4 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    41f4:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    41f8:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    41fc:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    4200:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    4204:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <twi_init>
    4208:	08 95       	ret

0000420a <_ZN7TwoWire5beginEh>:
}

void TwoWire::begin(uint8_t address)
{
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	ec 01       	movw	r28, r24
    4210:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    4212:	0e 94 ba 1c 	call	0x3974	; 0x3974 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    4216:	83 e7       	ldi	r24, 0x73	; 115
    4218:	90 e2       	ldi	r25, 0x20	; 32
    421a:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    421e:	8b e4       	ldi	r24, 0x4B	; 75
    4220:	90 e2       	ldi	r25, 0x20	; 32
    4222:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <twi_attachSlaveRxEvent>
  begin();
    4226:	ce 01       	movw	r24, r28
    4228:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN7TwoWire5beginEv>
}
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	08 95       	ret

00004232 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    4232:	0e 94 05 21 	call	0x420a	; 0x420a <_ZN7TwoWire5beginEh>
    4236:	08 95       	ret

00004238 <_ZN7TwoWire3endEv>:
}

void TwoWire::end(void)
{
  twi_disable();
    4238:	0e 94 a1 1c 	call	0x3942	; 0x3942 <twi_disable>
    423c:	08 95       	ret

0000423e <_ZN7TwoWire8setClockEm>:
}

void TwoWire::setClock(uint32_t clock)
{
  twi_setFrequency(clock);
    423e:	cb 01       	movw	r24, r22
    4240:	ba 01       	movw	r22, r20
    4242:	0e 94 cb 1c 	call	0x3996	; 0x3996 <twi_setFrequency>
    4246:	08 95       	ret

00004248 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    424e:	60 93 42 07 	sts	0x0742, r22	; 0x800742 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4252:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    4256:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <_ZN7TwoWire14txBufferLengthE>
    425a:	08 95       	ret

0000425c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    425c:	0e 94 24 21 	call	0x4248	; 0x4248 <_ZN7TwoWire17beginTransmissionEh>
    4260:	08 95       	ret

00004262 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    4262:	0f 93       	push	r16
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    4264:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <_ZN7TwoWire14txBufferLengthE>
    4268:	06 2f       	mov	r16, r22
    426a:	21 e0       	ldi	r18, 0x01	; 1
    426c:	62 e2       	ldi	r22, 0x22	; 34
    426e:	77 e0       	ldi	r23, 0x07	; 7
    4270:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <_ZN7TwoWire9txAddressE>
    4274:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    4278:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    427c:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    4280:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <_ZN7TwoWire12transmittingE>
  return ret;
}
    4284:	0f 91       	pop	r16
    4286:	08 95       	ret

00004288 <_ZN7TwoWire11requestFromEhhmhh>:
{
  twi_setFrequency(clock);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    4288:	8f 92       	push	r8
    428a:	9f 92       	push	r9
    428c:	af 92       	push	r10
    428e:	bf 92       	push	r11
    4290:	cf 92       	push	r12
    4292:	df 92       	push	r13
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	cf 93       	push	r28
    429e:	df 93       	push	r29
    42a0:	ec 01       	movw	r28, r24
    42a2:	d6 2e       	mov	r13, r22
    42a4:	f4 2e       	mov	r15, r20
    42a6:	48 01       	movw	r8, r16
    42a8:	59 01       	movw	r10, r18
  if (isize > 0) {
    42aa:	ee 20       	and	r14, r14
    42ac:	69 f1       	breq	.+90     	; 0x4308 <_ZN7TwoWire11requestFromEhhmhh+0x80>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    42ae:	0e 94 24 21 	call	0x4248	; 0x4248 <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    42b2:	23 e0       	ldi	r18, 0x03	; 3
    42b4:	2e 15       	cp	r18, r14
    42b6:	20 f4       	brcc	.+8      	; 0x42c0 <_ZN7TwoWire11requestFromEhhmhh+0x38>
    isize = 3;
    42b8:	0f 2e       	mov	r0, r31
    42ba:	f3 e0       	ldi	r31, 0x03	; 3
    42bc:	ef 2e       	mov	r14, r31
    42be:	f0 2d       	mov	r31, r0
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    42c0:	1f ef       	ldi	r17, 0xFF	; 255
    42c2:	1e 0d       	add	r17, r14
    42c4:	ee 20       	and	r14, r14
    42c6:	e1 f0       	breq	.+56     	; 0x4300 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    write((uint8_t)(iaddress >> (isize*8)));
    42c8:	e8 81       	ld	r30, Y
    42ca:	f9 81       	ldd	r31, Y+1	; 0x01
    42cc:	01 90       	ld	r0, Z+
    42ce:	f0 81       	ld	r31, Z
    42d0:	e0 2d       	mov	r30, r0
    42d2:	81 2f       	mov	r24, r17
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	a5 01       	movw	r20, r10
    42e4:	94 01       	movw	r18, r8
    42e6:	04 c0       	rjmp	.+8      	; 0x42f0 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    42e8:	56 95       	lsr	r21
    42ea:	47 95       	ror	r20
    42ec:	37 95       	ror	r19
    42ee:	27 95       	ror	r18
    42f0:	8a 95       	dec	r24
    42f2:	d2 f7       	brpl	.-12     	; 0x42e8 <_ZN7TwoWire11requestFromEhhmhh+0x60>
    42f4:	ca 01       	movw	r24, r20
    42f6:	b9 01       	movw	r22, r18
    42f8:	ce 01       	movw	r24, r28
    42fa:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    42fc:	e1 2e       	mov	r14, r17
    42fe:	e0 cf       	rjmp	.-64     	; 0x42c0 <_ZN7TwoWire11requestFromEhhmhh+0x38>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	ce 01       	movw	r24, r28
    4304:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    4308:	30 e2       	ldi	r19, 0x20	; 32
    430a:	3f 15       	cp	r19, r15
    430c:	18 f4       	brcc	.+6      	; 0x4314 <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    quantity = BUFFER_LENGTH;
    430e:	68 94       	set
    4310:	ff 24       	eor	r15, r15
    4312:	f5 f8       	bld	r15, 5
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    4314:	2c 2d       	mov	r18, r12
    4316:	4f 2d       	mov	r20, r15
    4318:	65 e4       	ldi	r22, 0x45	; 69
    431a:	77 e0       	ldi	r23, 0x07	; 7
    431c:	8d 2d       	mov	r24, r13
    431e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    4322:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    4326:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <_ZN7TwoWire14rxBufferLengthE>

  return read;
}
    432a:	df 91       	pop	r29
    432c:	cf 91       	pop	r28
    432e:	1f 91       	pop	r17
    4330:	0f 91       	pop	r16
    4332:	ff 90       	pop	r15
    4334:	ef 90       	pop	r14
    4336:	df 90       	pop	r13
    4338:	cf 90       	pop	r12
    433a:	bf 90       	pop	r11
    433c:	af 90       	pop	r10
    433e:	9f 90       	pop	r9
    4340:	8f 90       	pop	r8
    4342:	08 95       	ret

00004344 <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    4344:	cf 92       	push	r12
    4346:	ef 92       	push	r14
    4348:	0f 93       	push	r16
    434a:	1f 93       	push	r17
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    434c:	c2 2e       	mov	r12, r18
    434e:	e1 2c       	mov	r14, r1
    4350:	00 e0       	ldi	r16, 0x00	; 0
    4352:	10 e0       	ldi	r17, 0x00	; 0
    4354:	98 01       	movw	r18, r16
    4356:	0e 94 44 21 	call	0x4288	; 0x4288 <_ZN7TwoWire11requestFromEhhmhh>
}
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	ef 90       	pop	r14
    4360:	cf 90       	pop	r12
    4362:	08 95       	ret

00004364 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    4364:	21 e0       	ldi	r18, 0x01	; 1
    4366:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN7TwoWire11requestFromEhhh>
}
    436a:	08 95       	ret

0000436c <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    436c:	21 e0       	ldi	r18, 0x01	; 1
    436e:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN7TwoWire11requestFromEhhh>
}
    4372:	08 95       	ret

00004374 <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    4374:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN7TwoWire11requestFromEhhh>
}
    4378:	08 95       	ret

0000437a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    437a:	61 e0       	ldi	r22, 0x01	; 1
    437c:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN7TwoWire15endTransmissionEh>
}
    4380:	08 95       	ret

00004382 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    4382:	70 93 1c 07 	sts	0x071C, r23	; 0x80071c <_ZN7TwoWire14user_onReceiveE+0x1>
    4386:	60 93 1b 07 	sts	0x071B, r22	; 0x80071b <_ZN7TwoWire14user_onReceiveE>
    438a:	08 95       	ret

0000438c <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    438c:	70 93 1e 07 	sts	0x071E, r23	; 0x80071e <_ZN7TwoWire14user_onRequestE+0x1>
    4390:	60 93 1d 07 	sts	0x071D, r22	; 0x80071d <_ZN7TwoWire14user_onRequestE>
    4394:	08 95       	ret

00004396 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4396:	6f ef       	ldi	r22, 0xFF	; 255
    4398:	7f ef       	ldi	r23, 0xFF	; 255
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Z41__static_initialization_and_destruction_0ii>
    43a2:	08 95       	ret

000043a4 <_ZN6TimingC1Ehmmm>:

#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "Timing.h"

Timing::Timing(
    43a4:	af 92       	push	r10
    43a6:	bf 92       	push	r11
    43a8:	cf 92       	push	r12
    43aa:	df 92       	push	r13
    43ac:	ef 92       	push	r14
    43ae:	ff 92       	push	r15
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	fc 01       	movw	r30, r24
				uint8_t isMock, 
				volatile uint32_t readingTime, 
				volatile uint32_t loopDelay, 
				volatile uint32_t intercycleDownTime)
    43b6:	10 82       	st	Z, r1
    43b8:	11 82       	std	Z+1, r1	; 0x01
    43ba:	12 82       	std	Z+2, r1	; 0x02
    43bc:	13 82       	std	Z+3, r1	; 0x03
    43be:	14 82       	std	Z+4, r1	; 0x04
    43c0:	15 82       	std	Z+5, r1	; 0x05
    43c2:	16 82       	std	Z+6, r1	; 0x06
    43c4:	17 82       	std	Z+7, r1	; 0x07
    43c6:	10 86       	std	Z+8, r1	; 0x08
    43c8:	11 86       	std	Z+9, r1	; 0x09
    43ca:	12 86       	std	Z+10, r1	; 0x0a
    43cc:	13 86       	std	Z+11, r1	; 0x0b
    43ce:	11 8e       	std	Z+25, r1	; 0x19
    43d0:	12 8e       	std	Z+26, r1	; 0x1a
    43d2:	13 8e       	std	Z+27, r1	; 0x1b
    43d4:	14 8e       	std	Z+28, r1	; 0x1c
    43d6:	11 a6       	std	Z+41, r1	; 0x29
    43d8:	12 a6       	std	Z+42, r1	; 0x2a
    43da:	13 a6       	std	Z+43, r1	; 0x2b
    43dc:	14 a6       	std	Z+44, r1	; 0x2c
{
	_loopDelay = loopDelay;
    43de:	e4 82       	std	Z+4, r14	; 0x04
    43e0:	f5 82       	std	Z+5, r15	; 0x05
    43e2:	06 83       	std	Z+6, r16	; 0x06
    43e4:	17 83       	std	Z+7, r17	; 0x07
	_readingTime = readingTime;
    43e6:	20 87       	std	Z+8, r18	; 0x08
    43e8:	31 87       	std	Z+9, r19	; 0x09
    43ea:	42 87       	std	Z+10, r20	; 0x0a
    43ec:	53 87       	std	Z+11, r21	; 0x0b
	_intercycleDownTime = intercycleDownTime;
    43ee:	a0 82       	st	Z, r10
    43f0:	b1 82       	std	Z+1, r11	; 0x01
    43f2:	c2 82       	std	Z+2, r12	; 0x02
    43f4:	d3 82       	std	Z+3, r13	; 0x03
	_isMock = isMock;
    43f6:	60 8f       	std	Z+24, r22	; 0x18
}
    43f8:	1f 91       	pop	r17
    43fa:	0f 91       	pop	r16
    43fc:	ff 90       	pop	r15
    43fe:	ef 90       	pop	r14
    4400:	df 90       	pop	r13
    4402:	cf 90       	pop	r12
    4404:	bf 90       	pop	r11
    4406:	af 90       	pop	r10
    4408:	08 95       	ret

0000440a <_ZN6TimingD1Ev>:

Timing::~Timing() {}
    440a:	08 95       	ret

0000440c <_ZN6Timing17MOCK_ADVANCE_TIMEEm>:

#ifdef UNIT_TESTS
void Timing::MOCK_ADVANCE_TIME(uint32_t milliseconds){
    440c:	0f 93       	push	r16
    440e:	1f 93       	push	r17
	_MOCK_ADVANCED_BY += milliseconds;
    4410:	fc 01       	movw	r30, r24
    4412:	01 a5       	ldd	r16, Z+41	; 0x29
    4414:	12 a5       	ldd	r17, Z+42	; 0x2a
    4416:	23 a5       	ldd	r18, Z+43	; 0x2b
    4418:	34 a5       	ldd	r19, Z+44	; 0x2c
    441a:	40 0f       	add	r20, r16
    441c:	51 1f       	adc	r21, r17
    441e:	62 1f       	adc	r22, r18
    4420:	73 1f       	adc	r23, r19
    4422:	41 a7       	std	Z+41, r20	; 0x29
    4424:	52 a7       	std	Z+42, r21	; 0x2a
    4426:	63 a7       	std	Z+43, r22	; 0x2b
    4428:	74 a7       	std	Z+44, r23	; 0x2c
}
    442a:	1f 91       	pop	r17
    442c:	0f 91       	pop	r16
    442e:	08 95       	ret

00004430 <_ZN6Timing5resetEv>:
#endif

void Timing::reset(){
    4430:	fc 01       	movw	r30, r24
	__is10SecsTriggered = 
	
	__last1SecInterval =
	__last30SecInterval = 
	
	0;
    4432:	15 a2       	std	Z+37, r1	; 0x25
    4434:	16 a2       	std	Z+38, r1	; 0x26
    4436:	17 a2       	std	Z+39, r1	; 0x27
    4438:	10 a6       	std	Z+40, r1	; 0x28
    443a:	11 a2       	std	Z+33, r1	; 0x21
    443c:	12 a2       	std	Z+34, r1	; 0x22
    443e:	13 a2       	std	Z+35, r1	; 0x23
    4440:	14 a2       	std	Z+36, r1	; 0x24
    4442:	10 a2       	std	Z+32, r1	; 0x20
    4444:	17 8e       	std	Z+31, r1	; 0x1f
    4446:	16 8e       	std	Z+30, r1	; 0x1e
    4448:	15 8e       	std	Z+29, r1	; 0x1d
    444a:	11 8e       	std	Z+25, r1	; 0x19
    444c:	12 8e       	std	Z+26, r1	; 0x1a
    444e:	13 8e       	std	Z+27, r1	; 0x1b
    4450:	14 8e       	std	Z+28, r1	; 0x1c
    4452:	17 8a       	std	Z+23, r1	; 0x17
    4454:	16 8a       	std	Z+22, r1	; 0x16
    4456:	15 8a       	std	Z+21, r1	; 0x15
    4458:	14 8a       	std	Z+20, r1	; 0x14
    445a:	13 8a       	std	Z+19, r1	; 0x13
    445c:	12 8a       	std	Z+18, r1	; 0x12
    445e:	11 8a       	std	Z+17, r1	; 0x11
    4460:	10 8a       	std	Z+16, r1	; 0x10
    4462:	17 86       	std	Z+15, r1	; 0x0f
    4464:	16 86       	std	Z+14, r1	; 0x0e
    4466:	15 86       	std	Z+13, r1	; 0x0d
    4468:	14 86       	std	Z+12, r1	; 0x0c
	
	#ifdef UNIT_TESTS	
	_MOCK_ADVANCED_BY = 0;
    446a:	11 a6       	std	Z+41, r1	; 0x29
    446c:	12 a6       	std	Z+42, r1	; 0x2a
    446e:	13 a6       	std	Z+43, r1	; 0x2b
    4470:	14 a6       	std	Z+44, r1	; 0x2c
    4472:	08 95       	ret

00004474 <_ZN6Timing19getTimePerCycleInMsEv>:
	#endif
}


uint32_t Timing::getTimePerCycleInMs(){
    4474:	0f 93       	push	r16
    4476:	1f 93       	push	r17
    4478:	fc 01       	movw	r30, r24
	uint32_t oneCycleTime = _loopDelay+_readingTime+_intercycleDownTime;
    447a:	84 81       	ldd	r24, Z+4	; 0x04
    447c:	95 81       	ldd	r25, Z+5	; 0x05
    447e:	a6 81       	ldd	r26, Z+6	; 0x06
    4480:	b7 81       	ldd	r27, Z+7	; 0x07
    4482:	40 85       	ldd	r20, Z+8	; 0x08
    4484:	51 85       	ldd	r21, Z+9	; 0x09
    4486:	62 85       	ldd	r22, Z+10	; 0x0a
    4488:	73 85       	ldd	r23, Z+11	; 0x0b
    448a:	48 0f       	add	r20, r24
    448c:	59 1f       	adc	r21, r25
    448e:	6a 1f       	adc	r22, r26
    4490:	7b 1f       	adc	r23, r27
    4492:	80 81       	ld	r24, Z
    4494:	91 81       	ldd	r25, Z+1	; 0x01
    4496:	a2 81       	ldd	r26, Z+2	; 0x02
    4498:	b3 81       	ldd	r27, Z+3	; 0x03
    449a:	8a 01       	movw	r16, r20
    449c:	9b 01       	movw	r18, r22
    449e:	08 0f       	add	r16, r24
    44a0:	19 1f       	adc	r17, r25
    44a2:	2a 1f       	adc	r18, r26
    44a4:	3b 1f       	adc	r19, r27
    44a6:	c9 01       	movw	r24, r18
    44a8:	b8 01       	movw	r22, r16
	return oneCycleTime;
}
    44aa:	1f 91       	pop	r17
    44ac:	0f 91       	pop	r16
    44ae:	08 95       	ret

000044b0 <_ZN6Timing17getCyclesInOneDayEv>:

uint32_t Timing::getCyclesInOneDay(){
	uint32_t oneCycleTime = getTimePerCycleInMs()/1000;
    44b0:	0e 94 3a 22 	call	0x4474	; 0x4474 <_ZN6Timing19getTimePerCycleInMsEv>
    44b4:	28 ee       	ldi	r18, 0xE8	; 232
    44b6:	33 e0       	ldi	r19, 0x03	; 3
    44b8:	40 e0       	ldi	r20, 0x00	; 0
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
	uint32_t cyclesInOneDay = (24UL*60*60)/oneCycleTime;
    44c0:	60 e8       	ldi	r22, 0x80	; 128
    44c2:	71 e5       	ldi	r23, 0x51	; 81
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
	return cyclesInOneDay;
}
    44cc:	ca 01       	movw	r24, r20
    44ce:	b9 01       	movw	r22, r18
    44d0:	08 95       	ret

000044d2 <_ZN6Timing9getMillisEv>:
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}

unsigned long Timing::getMillis()
{
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	00 d0       	rcall	.+0      	; 0x44dc <_ZN6Timing9getMillisEv+0xa>
    44dc:	00 d0       	rcall	.+0      	; 0x44de <_ZN6Timing9getMillisEv+0xc>
    44de:	cd b7       	in	r28, 0x3d	; 61
    44e0:	de b7       	in	r29, 0x3e	; 62
    44e2:	8c 01       	movw	r16, r24
	if (_isMock)
    44e4:	fc 01       	movw	r30, r24
    44e6:	80 8d       	ldd	r24, Z+24	; 0x18
    44e8:	88 23       	and	r24, r24
    44ea:	e1 f0       	breq	.+56     	; 0x4524 <_ZN6Timing9getMillisEv+0x52>
	{
		//Speed up time in DEBUG mode ! // Each second=>x minutes
		volatile unsigned long currentMillis = millis();
    44ec:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <millis>
    44f0:	69 83       	std	Y+1, r22	; 0x01
    44f2:	7a 83       	std	Y+2, r23	; 0x02
    44f4:	8b 83       	std	Y+3, r24	; 0x03
    44f6:	9c 83       	std	Y+4, r25	; 0x04

		#ifdef UNIT_TESTS
		currentMillis += _MOCK_ADVANCED_BY;
    44f8:	f8 01       	movw	r30, r16
    44fa:	41 a5       	ldd	r20, Z+41	; 0x29
    44fc:	52 a5       	ldd	r21, Z+42	; 0x2a
    44fe:	63 a5       	ldd	r22, Z+43	; 0x2b
    4500:	74 a5       	ldd	r23, Z+44	; 0x2c
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	ab 81       	ldd	r26, Y+3	; 0x03
    4508:	bc 81       	ldd	r27, Y+4	; 0x04
    450a:	84 0f       	add	r24, r20
    450c:	95 1f       	adc	r25, r21
    450e:	a6 1f       	adc	r26, r22
    4510:	b7 1f       	adc	r27, r23
    4512:	89 83       	std	Y+1, r24	; 0x01
    4514:	9a 83       	std	Y+2, r25	; 0x02
    4516:	ab 83       	std	Y+3, r26	; 0x03
    4518:	bc 83       	std	Y+4, r27	; 0x04
		#endif
		
		return currentMillis;
    451a:	69 81       	ldd	r22, Y+1	; 0x01
    451c:	7a 81       	ldd	r23, Y+2	; 0x02
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	9c 81       	ldd	r25, Y+4	; 0x04
    4522:	02 c0       	rjmp	.+4      	; 0x4528 <_ZN6Timing9getMillisEv+0x56>
		//currentMillis = 1L*40*60*1000*secsFromStart;
		//return currentMillis;
	}
	else
	{
		return millis();
    4524:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <millis>
	}
}
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	0f 91       	pop	r16
    4538:	08 95       	ret

0000453a <_ZN6Timing11onCycleLoopEv>:
	uint32_t oneCycleTime = getTimePerCycleInMs()/1000;
	uint32_t cyclesInOneDay = (24UL*60*60)/oneCycleTime;
	return cyclesInOneDay;
}

void Timing::onCycleLoop(){
    453a:	0f 93       	push	r16
    453c:	1f 93       	push	r17
    453e:	cf 93       	push	r28
    4540:	df 93       	push	r29
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
    4546:	28 97       	sbiw	r28, 0x08	; 8
    4548:	0f b6       	in	r0, 0x3f	; 63
    454a:	f8 94       	cli
    454c:	de bf       	out	0x3e, r29	; 62
    454e:	0f be       	out	0x3f, r0	; 63
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	8c 01       	movw	r16, r24
	
	volatile unsigned long currentMillis = getMillis();
    4554:	0e 94 69 22 	call	0x44d2	; 0x44d2 <_ZN6Timing9getMillisEv>
    4558:	69 83       	std	Y+1, r22	; 0x01
    455a:	7a 83       	std	Y+2, r23	; 0x02
    455c:	8b 83       	std	Y+3, r24	; 0x03
    455e:	9c 83       	std	Y+4, r25	; 0x04
	
	if (_currCycleStartTime == 0)
    4560:	f8 01       	movw	r30, r16
    4562:	81 8d       	ldd	r24, Z+25	; 0x19
    4564:	92 8d       	ldd	r25, Z+26	; 0x1a
    4566:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4568:	b4 8d       	ldd	r27, Z+28	; 0x1c
    456a:	89 2b       	or	r24, r25
    456c:	8a 2b       	or	r24, r26
    456e:	8b 2b       	or	r24, r27
    4570:	41 f4       	brne	.+16     	; 0x4582 <_ZN6Timing11onCycleLoopEv+0x48>
		_currCycleStartTime = currentMillis;
    4572:	89 81       	ldd	r24, Y+1	; 0x01
    4574:	9a 81       	ldd	r25, Y+2	; 0x02
    4576:	ab 81       	ldd	r26, Y+3	; 0x03
    4578:	bc 81       	ldd	r27, Y+4	; 0x04
    457a:	81 8f       	std	Z+25, r24	; 0x19
    457c:	92 8f       	std	Z+26, r25	; 0x1a
    457e:	a3 8f       	std	Z+27, r26	; 0x1b
    4580:	b4 8f       	std	Z+28, r27	; 0x1c
	
	//How long has this cycle been running for ?
	volatile unsigned long currCycleDuration = currentMillis - _currCycleStartTime;
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	9a 81       	ldd	r25, Y+2	; 0x02
    4586:	ab 81       	ldd	r26, Y+3	; 0x03
    4588:	bc 81       	ldd	r27, Y+4	; 0x04
    458a:	f8 01       	movw	r30, r16
    458c:	41 8d       	ldd	r20, Z+25	; 0x19
    458e:	52 8d       	ldd	r21, Z+26	; 0x1a
    4590:	63 8d       	ldd	r22, Z+27	; 0x1b
    4592:	74 8d       	ldd	r23, Z+28	; 0x1c
    4594:	84 1b       	sub	r24, r20
    4596:	95 0b       	sbc	r25, r21
    4598:	a6 0b       	sbc	r26, r22
    459a:	b7 0b       	sbc	r27, r23
    459c:	8d 83       	std	Y+5, r24	; 0x05
    459e:	9e 83       	std	Y+6, r25	; 0x06
    45a0:	af 83       	std	Y+7, r26	; 0x07
    45a2:	b8 87       	std	Y+8, r27	; 0x08
	//RM_LOG2(F("CurrCycleDuration"), currCycleDuration);
		
	//Some don't latch, so reset them
	_at10Secs = false;
    45a4:	14 86       	std	Z+12, r1	; 0x0c
	_at1Min = false;
    45a6:	15 86       	std	Z+13, r1	; 0x0d
	_at1Min30Secs = false;
    45a8:	16 86       	std	Z+14, r1	; 0x0e
	_at2Mins = false;
    45aa:	17 86       	std	Z+15, r1	; 0x0f
	_at30SecInterval = false;
    45ac:	11 8a       	std	Z+17, r1	; 0x11
	_at1SecInterval = false;
    45ae:	10 8a       	std	Z+16, r1	; 0x10
	//__is1MinTriggered = false;
	//__is2MinTriggered = false;


	//10 seconds
	if (currCycleDuration >= 10*1000) {
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	9e 81       	ldd	r25, Y+6	; 0x06
    45b4:	af 81       	ldd	r26, Y+7	; 0x07
    45b6:	b8 85       	ldd	r27, Y+8	; 0x08
    45b8:	80 31       	cpi	r24, 0x10	; 16
    45ba:	97 42       	sbci	r25, 0x27	; 39
    45bc:	a1 05       	cpc	r26, r1
    45be:	b1 05       	cpc	r27, r1
    45c0:	48 f0       	brcs	.+18     	; 0x45d4 <_ZN6Timing11onCycleLoopEv+0x9a>
		_has10SecsElapsed = true;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	f8 01       	movw	r30, r16
    45c6:	86 8b       	std	Z+22, r24	; 0x16
			
		//One-Time @10-Secs triggered
		if (!__is10SecsTriggered) {
    45c8:	80 a1       	ldd	r24, Z+32	; 0x20
    45ca:	81 11       	cpse	r24, r1
    45cc:	03 c0       	rjmp	.+6      	; 0x45d4 <_ZN6Timing11onCycleLoopEv+0x9a>
				
			_at10Secs = true;
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	84 87       	std	Z+12, r24	; 0x0c
			__is10SecsTriggered = true;
    45d2:	80 a3       	std	Z+32, r24	; 0x20
		}
	}
		
	//1 minute
	if (currCycleDuration >= 1L*60*1000) {
    45d4:	8d 81       	ldd	r24, Y+5	; 0x05
    45d6:	9e 81       	ldd	r25, Y+6	; 0x06
    45d8:	af 81       	ldd	r26, Y+7	; 0x07
    45da:	b8 85       	ldd	r27, Y+8	; 0x08
    45dc:	80 36       	cpi	r24, 0x60	; 96
    45de:	9a 4e       	sbci	r25, 0xEA	; 234
    45e0:	a1 05       	cpc	r26, r1
    45e2:	b1 05       	cpc	r27, r1
    45e4:	48 f0       	brcs	.+18     	; 0x45f8 <_ZN6Timing11onCycleLoopEv+0xbe>
		_has1MinElapsed = true;
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	f8 01       	movw	r30, r16
    45ea:	82 8b       	std	Z+18, r24	; 0x12
			
		//One-Time @1-Min triggered
		if (!__is1MinTriggered) {
    45ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    45ee:	81 11       	cpse	r24, r1
    45f0:	03 c0       	rjmp	.+6      	; 0x45f8 <_ZN6Timing11onCycleLoopEv+0xbe>
				
			_at1Min = true;
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	85 87       	std	Z+13, r24	; 0x0d
			__is1MinTriggered = true;
    45f6:	85 8f       	std	Z+29, r24	; 0x1d
		}
	}
		
	//1 minute 30 secs
	if (currCycleDuration >= 3L*60*1000/2) {
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	af 81       	ldd	r26, Y+7	; 0x07
    45fe:	b8 85       	ldd	r27, Y+8	; 0x08
    4600:	80 39       	cpi	r24, 0x90	; 144
    4602:	9f 45       	sbci	r25, 0x5F	; 95
    4604:	a1 40       	sbci	r26, 0x01	; 1
    4606:	b1 05       	cpc	r27, r1
    4608:	48 f0       	brcs	.+18     	; 0x461c <_ZN6Timing11onCycleLoopEv+0xe2>
		_has1Min30SecsElapsed = true;
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	f8 01       	movw	r30, r16
    460e:	83 8b       	std	Z+19, r24	; 0x13
			
		//One-Time @1-Min triggered
		if (!__is1Min30SecsTriggered) {
    4610:	86 8d       	ldd	r24, Z+30	; 0x1e
    4612:	81 11       	cpse	r24, r1
    4614:	03 c0       	rjmp	.+6      	; 0x461c <_ZN6Timing11onCycleLoopEv+0xe2>
				
			_at1Min30Secs = true;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	86 87       	std	Z+14, r24	; 0x0e
			__is1Min30SecsTriggered = true;
    461a:	86 8f       	std	Z+30, r24	; 0x1e
		}
	}
		
	//2 minutes
	if (currCycleDuration >= 2L*60*1000) {
    461c:	8d 81       	ldd	r24, Y+5	; 0x05
    461e:	9e 81       	ldd	r25, Y+6	; 0x06
    4620:	af 81       	ldd	r26, Y+7	; 0x07
    4622:	b8 85       	ldd	r27, Y+8	; 0x08
    4624:	80 3c       	cpi	r24, 0xC0	; 192
    4626:	94 4d       	sbci	r25, 0xD4	; 212
    4628:	a1 40       	sbci	r26, 0x01	; 1
    462a:	b1 05       	cpc	r27, r1
    462c:	48 f0       	brcs	.+18     	; 0x4640 <_ZN6Timing11onCycleLoopEv+0x106>
		_has2MinElapsed = true;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	f8 01       	movw	r30, r16
    4632:	85 8b       	std	Z+21, r24	; 0x15
			
		//One-Time @2-Min triggered
		if (!__is2MinTriggered) {
    4634:	87 8d       	ldd	r24, Z+31	; 0x1f
    4636:	81 11       	cpse	r24, r1
    4638:	03 c0       	rjmp	.+6      	; 0x4640 <_ZN6Timing11onCycleLoopEv+0x106>
				
			_at2Mins = true;
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	87 87       	std	Z+15, r24	; 0x0f
			__is2MinTriggered = true;
    463e:	87 8f       	std	Z+31, r24	; 0x1f
		}
	}
		
	//5 mins
	if (currCycleDuration >= 5L*60*1000)
    4640:	8d 81       	ldd	r24, Y+5	; 0x05
    4642:	9e 81       	ldd	r25, Y+6	; 0x06
    4644:	af 81       	ldd	r26, Y+7	; 0x07
    4646:	b8 85       	ldd	r27, Y+8	; 0x08
    4648:	80 3e       	cpi	r24, 0xE0	; 224
    464a:	93 49       	sbci	r25, 0x93	; 147
    464c:	a4 40       	sbci	r26, 0x04	; 4
    464e:	b1 05       	cpc	r27, r1
    4650:	18 f0       	brcs	.+6      	; 0x4658 <_ZN6Timing11onCycleLoopEv+0x11e>
	_has5MinElapsed=true;
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	f8 01       	movw	r30, r16
    4656:	84 8b       	std	Z+20, r24	; 0x14
		
	//15 mins
	if (currCycleDuration >= 15L*60*1000)
    4658:	8d 81       	ldd	r24, Y+5	; 0x05
    465a:	9e 81       	ldd	r25, Y+6	; 0x06
    465c:	af 81       	ldd	r26, Y+7	; 0x07
    465e:	b8 85       	ldd	r27, Y+8	; 0x08
    4660:	80 3a       	cpi	r24, 0xA0	; 160
    4662:	9b 4b       	sbci	r25, 0xBB	; 187
    4664:	ad 40       	sbci	r26, 0x0D	; 13
    4666:	b1 05       	cpc	r27, r1
    4668:	18 f0       	brcs	.+6      	; 0x4670 <_ZN6Timing11onCycleLoopEv+0x136>
	_has15MinElapsed=true;
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	f8 01       	movw	r30, r16
    466e:	87 8b       	std	Z+23, r24	; 0x17
		
	//1 sec interval
	if ( (currentMillis - __last1SecInterval) >= 1L*1000) {
    4670:	89 81       	ldd	r24, Y+1	; 0x01
    4672:	9a 81       	ldd	r25, Y+2	; 0x02
    4674:	ab 81       	ldd	r26, Y+3	; 0x03
    4676:	bc 81       	ldd	r27, Y+4	; 0x04
    4678:	f8 01       	movw	r30, r16
    467a:	41 a1       	ldd	r20, Z+33	; 0x21
    467c:	52 a1       	ldd	r21, Z+34	; 0x22
    467e:	63 a1       	ldd	r22, Z+35	; 0x23
    4680:	74 a1       	ldd	r23, Z+36	; 0x24
    4682:	84 1b       	sub	r24, r20
    4684:	95 0b       	sbc	r25, r21
    4686:	a6 0b       	sbc	r26, r22
    4688:	b7 0b       	sbc	r27, r23
    468a:	88 3e       	cpi	r24, 0xE8	; 232
    468c:	93 40       	sbci	r25, 0x03	; 3
    468e:	a1 05       	cpc	r26, r1
    4690:	b1 05       	cpc	r27, r1
    4692:	58 f0       	brcs	.+22     	; 0x46aa <_ZN6Timing11onCycleLoopEv+0x170>
		_at1SecInterval = true;
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	f8 01       	movw	r30, r16
    4698:	80 8b       	std	Z+16, r24	; 0x10
		__last1SecInterval = currentMillis;
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	9a 81       	ldd	r25, Y+2	; 0x02
    469e:	ab 81       	ldd	r26, Y+3	; 0x03
    46a0:	bc 81       	ldd	r27, Y+4	; 0x04
    46a2:	81 a3       	std	Z+33, r24	; 0x21
    46a4:	92 a3       	std	Z+34, r25	; 0x22
    46a6:	a3 a3       	std	Z+35, r26	; 0x23
    46a8:	b4 a3       	std	Z+36, r27	; 0x24
	}
		
	//30 sec interval
	if ( (currentMillis - __last30SecInterval) >= 30L*1000) {
    46aa:	89 81       	ldd	r24, Y+1	; 0x01
    46ac:	9a 81       	ldd	r25, Y+2	; 0x02
    46ae:	ab 81       	ldd	r26, Y+3	; 0x03
    46b0:	bc 81       	ldd	r27, Y+4	; 0x04
    46b2:	f8 01       	movw	r30, r16
    46b4:	45 a1       	ldd	r20, Z+37	; 0x25
    46b6:	56 a1       	ldd	r21, Z+38	; 0x26
    46b8:	67 a1       	ldd	r22, Z+39	; 0x27
    46ba:	70 a5       	ldd	r23, Z+40	; 0x28
    46bc:	84 1b       	sub	r24, r20
    46be:	95 0b       	sbc	r25, r21
    46c0:	a6 0b       	sbc	r26, r22
    46c2:	b7 0b       	sbc	r27, r23
    46c4:	80 33       	cpi	r24, 0x30	; 48
    46c6:	95 47       	sbci	r25, 0x75	; 117
    46c8:	a1 05       	cpc	r26, r1
    46ca:	b1 05       	cpc	r27, r1
    46cc:	58 f0       	brcs	.+22     	; 0x46e4 <_ZN6Timing11onCycleLoopEv+0x1aa>
		_at30SecInterval = true;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	f8 01       	movw	r30, r16
    46d2:	81 8b       	std	Z+17, r24	; 0x11
		__last30SecInterval = currentMillis;
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	ab 81       	ldd	r26, Y+3	; 0x03
    46da:	bc 81       	ldd	r27, Y+4	; 0x04
    46dc:	85 a3       	std	Z+37, r24	; 0x25
    46de:	96 a3       	std	Z+38, r25	; 0x26
    46e0:	a7 a3       	std	Z+39, r26	; 0x27
    46e2:	b0 a7       	std	Z+40, r27	; 0x28
	//RM_LOG("_is30SecInterval",_is30SecInterval);
	//RM_LOG("_at1SecInterval",_is1SecInterval);
	//RM_LOG2("_gpsFetchInProgress",_gpsFetchInProgress);
	//RM_LOG2("_chargingInProgress",_chargingInProgress);

}
    46e4:	28 96       	adiw	r28, 0x08	; 8
    46e6:	0f b6       	in	r0, 0x3f	; 63
    46e8:	f8 94       	cli
    46ea:	de bf       	out	0x3e, r29	; 62
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	cd bf       	out	0x3d, r28	; 61
    46f0:	df 91       	pop	r29
    46f2:	cf 91       	pop	r28
    46f4:	1f 91       	pop	r17
    46f6:	0f 91       	pop	r16
    46f8:	08 95       	ret

000046fa <_ZN6Timing12isDailyCycleEm>:
	////If so, persist data (taking into account previous readings or don't read at all?)
	//return false;
//}

boolean Timing::isDailyCycle(unsigned long currCycleNumber)
{
    46fa:	8f 92       	push	r8
    46fc:	9f 92       	push	r9
    46fe:	af 92       	push	r10
    4700:	bf 92       	push	r11
    4702:	cf 92       	push	r12
    4704:	df 92       	push	r13
    4706:	ef 92       	push	r14
    4708:	ff 92       	push	r15
    470a:	0f 93       	push	r16
    470c:	1f 93       	push	r17
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	2c 97       	sbiw	r28, 0x0c	; 12
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
    4722:	fc 01       	movw	r30, r24
    4724:	6a 01       	movw	r12, r20
    4726:	7b 01       	movw	r14, r22
	//Calc approximate time between cycles. Divide by 1000 to prevent overflow when multiplied later.
	volatile uint32_t durationPerCycleInSecs =
		(_intercycleDownTime + _readingTime + _loopDelay)/1000;
    4728:	80 81       	ld	r24, Z
    472a:	91 81       	ldd	r25, Z+1	; 0x01
    472c:	a2 81       	ldd	r26, Z+2	; 0x02
    472e:	b3 81       	ldd	r27, Z+3	; 0x03
    4730:	40 85       	ldd	r20, Z+8	; 0x08
    4732:	51 85       	ldd	r21, Z+9	; 0x09
    4734:	62 85       	ldd	r22, Z+10	; 0x0a
    4736:	73 85       	ldd	r23, Z+11	; 0x0b
    4738:	48 0f       	add	r20, r24
    473a:	59 1f       	adc	r21, r25
    473c:	6a 1f       	adc	r22, r26
    473e:	7b 1f       	adc	r23, r27
    4740:	84 81       	ldd	r24, Z+4	; 0x04
    4742:	95 81       	ldd	r25, Z+5	; 0x05
    4744:	a6 81       	ldd	r26, Z+6	; 0x06
    4746:	b7 81       	ldd	r27, Z+7	; 0x07
    4748:	8a 01       	movw	r16, r20
    474a:	9b 01       	movw	r18, r22
    474c:	08 0f       	add	r16, r24
    474e:	19 1f       	adc	r17, r25
    4750:	2a 1f       	adc	r18, r26
    4752:	3b 1f       	adc	r19, r27
    4754:	c9 01       	movw	r24, r18
    4756:	b8 01       	movw	r22, r16
    4758:	28 ee       	ldi	r18, 0xE8	; 232
    475a:	33 e0       	ldi	r19, 0x03	; 3
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	50 e0       	ldi	r21, 0x00	; 0
    4760:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    4764:	29 83       	std	Y+1, r18	; 0x01
    4766:	3a 83       	std	Y+2, r19	; 0x02
    4768:	4b 83       	std	Y+3, r20	; 0x03
    476a:	5c 83       	std	Y+4, r21	; 0x04
	//- todo: if kept up by battery? whilst sending? add a EEPROM entry when cycle finishes?
	
	//Calc current time since module was installed
	volatile uint32_t totalDurationHrs = (currCycleNumber*durationPerCycleInSecs)/(60*60);
    476c:	29 81       	ldd	r18, Y+1	; 0x01
    476e:	3a 81       	ldd	r19, Y+2	; 0x02
    4770:	4b 81       	ldd	r20, Y+3	; 0x03
    4772:	5c 81       	ldd	r21, Y+4	; 0x04
    4774:	c7 01       	movw	r24, r14
    4776:	b6 01       	movw	r22, r12
    4778:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <__mulsi3>
    477c:	0f 2e       	mov	r0, r31
    477e:	f0 e1       	ldi	r31, 0x10	; 16
    4780:	8f 2e       	mov	r8, r31
    4782:	fe e0       	ldi	r31, 0x0E	; 14
    4784:	9f 2e       	mov	r9, r31
    4786:	a1 2c       	mov	r10, r1
    4788:	b1 2c       	mov	r11, r1
    478a:	f0 2d       	mov	r31, r0
    478c:	a5 01       	movw	r20, r10
    478e:	94 01       	movw	r18, r8
    4790:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    4794:	2d 83       	std	Y+5, r18	; 0x05
    4796:	3e 83       	std	Y+6, r19	; 0x06
    4798:	4f 83       	std	Y+7, r20	; 0x07
    479a:	58 87       	std	Y+8, r21	; 0x08
	
	//Check if 1 hour is almost up by looking at totalDuration of next cycle
	volatile uint32_t nextDurationHrs = ((currCycleNumber+1)*durationPerCycleInSecs)/(60*60);
    479c:	a7 01       	movw	r20, r14
    479e:	96 01       	movw	r18, r12
    47a0:	2f 5f       	subi	r18, 0xFF	; 255
    47a2:	3f 4f       	sbci	r19, 0xFF	; 255
    47a4:	4f 4f       	sbci	r20, 0xFF	; 255
    47a6:	5f 4f       	sbci	r21, 0xFF	; 255
    47a8:	69 81       	ldd	r22, Y+1	; 0x01
    47aa:	7a 81       	ldd	r23, Y+2	; 0x02
    47ac:	8b 81       	ldd	r24, Y+3	; 0x03
    47ae:	9c 81       	ldd	r25, Y+4	; 0x04
    47b0:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <__mulsi3>
    47b4:	a5 01       	movw	r20, r10
    47b6:	94 01       	movw	r18, r8
    47b8:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    47bc:	29 87       	std	Y+9, r18	; 0x09
    47be:	3a 87       	std	Y+10, r19	; 0x0a
    47c0:	4b 87       	std	Y+11, r20	; 0x0b
    47c2:	5c 87       	std	Y+12, r21	; 0x0c
	
	//Check if it's a daily/weekly cycle by seeing if next cycle will rollover
	if ((int)totalDurationHrs/HOURS_IN_DAY < (int)nextDurationHrs/HOURS_IN_DAY)
    47c4:	8d 81       	ldd	r24, Y+5	; 0x05
    47c6:	9e 81       	ldd	r25, Y+6	; 0x06
    47c8:	af 81       	ldd	r26, Y+7	; 0x07
    47ca:	b8 85       	ldd	r27, Y+8	; 0x08
    47cc:	28 e1       	ldi	r18, 0x18	; 24
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	b9 01       	movw	r22, r18
    47d2:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <__divmodhi4>
    47d6:	fb 01       	movw	r30, r22
    47d8:	89 85       	ldd	r24, Y+9	; 0x09
    47da:	9a 85       	ldd	r25, Y+10	; 0x0a
    47dc:	ab 85       	ldd	r26, Y+11	; 0x0b
    47de:	bc 85       	ldd	r27, Y+12	; 0x0c
    47e0:	b9 01       	movw	r22, r18
    47e2:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <__divmodhi4>
    47e6:	e6 17       	cp	r30, r22
    47e8:	f7 07       	cpc	r31, r23
    47ea:	14 f4       	brge	.+4      	; 0x47f0 <_ZN6Timing12isDailyCycleEm+0xf6>
		return true;
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	01 c0       	rjmp	.+2      	; 0x47f2 <_ZN6Timing12isDailyCycleEm+0xf8>
	else
		return false;	
    47f0:	80 e0       	ldi	r24, 0x00	; 0
}
    47f2:	2c 96       	adiw	r28, 0x0c	; 12
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	df 91       	pop	r29
    4800:	cf 91       	pop	r28
    4802:	1f 91       	pop	r17
    4804:	0f 91       	pop	r16
    4806:	ff 90       	pop	r15
    4808:	ef 90       	pop	r14
    480a:	df 90       	pop	r13
    480c:	cf 90       	pop	r12
    480e:	bf 90       	pop	r11
    4810:	af 90       	pop	r10
    4812:	9f 90       	pop	r9
    4814:	8f 90       	pop	r8
    4816:	08 95       	ret

00004818 <__subsf3>:
    4818:	50 58       	subi	r21, 0x80	; 128

0000481a <__addsf3>:
    481a:	bb 27       	eor	r27, r27
    481c:	aa 27       	eor	r26, r26
    481e:	0e 94 24 24 	call	0x4848	; 0x4848 <__addsf3x>
    4822:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__fp_round>
    4826:	0e 94 67 25 	call	0x4ace	; 0x4ace <__fp_pscA>
    482a:	38 f0       	brcs	.+14     	; 0x483a <__addsf3+0x20>
    482c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <__fp_pscB>
    4830:	20 f0       	brcs	.+8      	; 0x483a <__addsf3+0x20>
    4832:	39 f4       	brne	.+14     	; 0x4842 <__addsf3+0x28>
    4834:	9f 3f       	cpi	r25, 0xFF	; 255
    4836:	19 f4       	brne	.+6      	; 0x483e <__addsf3+0x24>
    4838:	26 f4       	brtc	.+8      	; 0x4842 <__addsf3+0x28>
    483a:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__fp_nan>
    483e:	0e f4       	brtc	.+2      	; 0x4842 <__addsf3+0x28>
    4840:	e0 95       	com	r30
    4842:	e7 fb       	bst	r30, 7
    4844:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__fp_inf>

00004848 <__addsf3x>:
    4848:	e9 2f       	mov	r30, r25
    484a:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <__fp_split3>
    484e:	58 f3       	brcs	.-42     	; 0x4826 <__addsf3+0xc>
    4850:	ba 17       	cp	r27, r26
    4852:	62 07       	cpc	r22, r18
    4854:	73 07       	cpc	r23, r19
    4856:	84 07       	cpc	r24, r20
    4858:	95 07       	cpc	r25, r21
    485a:	20 f0       	brcs	.+8      	; 0x4864 <__addsf3x+0x1c>
    485c:	79 f4       	brne	.+30     	; 0x487c <__addsf3x+0x34>
    485e:	a6 f5       	brtc	.+104    	; 0x48c8 <__addsf3x+0x80>
    4860:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__fp_zero>
    4864:	0e f4       	brtc	.+2      	; 0x4868 <__addsf3x+0x20>
    4866:	e0 95       	com	r30
    4868:	0b 2e       	mov	r0, r27
    486a:	ba 2f       	mov	r27, r26
    486c:	a0 2d       	mov	r26, r0
    486e:	0b 01       	movw	r0, r22
    4870:	b9 01       	movw	r22, r18
    4872:	90 01       	movw	r18, r0
    4874:	0c 01       	movw	r0, r24
    4876:	ca 01       	movw	r24, r20
    4878:	a0 01       	movw	r20, r0
    487a:	11 24       	eor	r1, r1
    487c:	ff 27       	eor	r31, r31
    487e:	59 1b       	sub	r21, r25
    4880:	99 f0       	breq	.+38     	; 0x48a8 <__addsf3x+0x60>
    4882:	59 3f       	cpi	r21, 0xF9	; 249
    4884:	50 f4       	brcc	.+20     	; 0x489a <__addsf3x+0x52>
    4886:	50 3e       	cpi	r21, 0xE0	; 224
    4888:	68 f1       	brcs	.+90     	; 0x48e4 <__addsf3x+0x9c>
    488a:	1a 16       	cp	r1, r26
    488c:	f0 40       	sbci	r31, 0x00	; 0
    488e:	a2 2f       	mov	r26, r18
    4890:	23 2f       	mov	r18, r19
    4892:	34 2f       	mov	r19, r20
    4894:	44 27       	eor	r20, r20
    4896:	58 5f       	subi	r21, 0xF8	; 248
    4898:	f3 cf       	rjmp	.-26     	; 0x4880 <__addsf3x+0x38>
    489a:	46 95       	lsr	r20
    489c:	37 95       	ror	r19
    489e:	27 95       	ror	r18
    48a0:	a7 95       	ror	r26
    48a2:	f0 40       	sbci	r31, 0x00	; 0
    48a4:	53 95       	inc	r21
    48a6:	c9 f7       	brne	.-14     	; 0x489a <__addsf3x+0x52>
    48a8:	7e f4       	brtc	.+30     	; 0x48c8 <__addsf3x+0x80>
    48aa:	1f 16       	cp	r1, r31
    48ac:	ba 0b       	sbc	r27, r26
    48ae:	62 0b       	sbc	r22, r18
    48b0:	73 0b       	sbc	r23, r19
    48b2:	84 0b       	sbc	r24, r20
    48b4:	ba f0       	brmi	.+46     	; 0x48e4 <__addsf3x+0x9c>
    48b6:	91 50       	subi	r25, 0x01	; 1
    48b8:	a1 f0       	breq	.+40     	; 0x48e2 <__addsf3x+0x9a>
    48ba:	ff 0f       	add	r31, r31
    48bc:	bb 1f       	adc	r27, r27
    48be:	66 1f       	adc	r22, r22
    48c0:	77 1f       	adc	r23, r23
    48c2:	88 1f       	adc	r24, r24
    48c4:	c2 f7       	brpl	.-16     	; 0x48b6 <__addsf3x+0x6e>
    48c6:	0e c0       	rjmp	.+28     	; 0x48e4 <__addsf3x+0x9c>
    48c8:	ba 0f       	add	r27, r26
    48ca:	62 1f       	adc	r22, r18
    48cc:	73 1f       	adc	r23, r19
    48ce:	84 1f       	adc	r24, r20
    48d0:	48 f4       	brcc	.+18     	; 0x48e4 <__addsf3x+0x9c>
    48d2:	87 95       	ror	r24
    48d4:	77 95       	ror	r23
    48d6:	67 95       	ror	r22
    48d8:	b7 95       	ror	r27
    48da:	f7 95       	ror	r31
    48dc:	9e 3f       	cpi	r25, 0xFE	; 254
    48de:	08 f0       	brcs	.+2      	; 0x48e2 <__addsf3x+0x9a>
    48e0:	b0 cf       	rjmp	.-160    	; 0x4842 <__addsf3+0x28>
    48e2:	93 95       	inc	r25
    48e4:	88 0f       	add	r24, r24
    48e6:	08 f0       	brcs	.+2      	; 0x48ea <__addsf3x+0xa2>
    48e8:	99 27       	eor	r25, r25
    48ea:	ee 0f       	add	r30, r30
    48ec:	97 95       	ror	r25
    48ee:	87 95       	ror	r24
    48f0:	08 95       	ret

000048f2 <__divsf3>:
    48f2:	0e 94 8d 24 	call	0x491a	; 0x491a <__divsf3x>
    48f6:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__fp_round>
    48fa:	0e 94 6e 25 	call	0x4adc	; 0x4adc <__fp_pscB>
    48fe:	58 f0       	brcs	.+22     	; 0x4916 <__divsf3+0x24>
    4900:	0e 94 67 25 	call	0x4ace	; 0x4ace <__fp_pscA>
    4904:	40 f0       	brcs	.+16     	; 0x4916 <__divsf3+0x24>
    4906:	29 f4       	brne	.+10     	; 0x4912 <__divsf3+0x20>
    4908:	5f 3f       	cpi	r21, 0xFF	; 255
    490a:	29 f0       	breq	.+10     	; 0x4916 <__divsf3+0x24>
    490c:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__fp_inf>
    4910:	51 11       	cpse	r21, r1
    4912:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__fp_szero>
    4916:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__fp_nan>

0000491a <__divsf3x>:
    491a:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <__fp_split3>
    491e:	68 f3       	brcs	.-38     	; 0x48fa <__divsf3+0x8>

00004920 <__divsf3_pse>:
    4920:	99 23       	and	r25, r25
    4922:	b1 f3       	breq	.-20     	; 0x4910 <__divsf3+0x1e>
    4924:	55 23       	and	r21, r21
    4926:	91 f3       	breq	.-28     	; 0x490c <__divsf3+0x1a>
    4928:	95 1b       	sub	r25, r21
    492a:	55 0b       	sbc	r21, r21
    492c:	bb 27       	eor	r27, r27
    492e:	aa 27       	eor	r26, r26
    4930:	62 17       	cp	r22, r18
    4932:	73 07       	cpc	r23, r19
    4934:	84 07       	cpc	r24, r20
    4936:	38 f0       	brcs	.+14     	; 0x4946 <__divsf3_pse+0x26>
    4938:	9f 5f       	subi	r25, 0xFF	; 255
    493a:	5f 4f       	sbci	r21, 0xFF	; 255
    493c:	22 0f       	add	r18, r18
    493e:	33 1f       	adc	r19, r19
    4940:	44 1f       	adc	r20, r20
    4942:	aa 1f       	adc	r26, r26
    4944:	a9 f3       	breq	.-22     	; 0x4930 <__divsf3_pse+0x10>
    4946:	35 d0       	rcall	.+106    	; 0x49b2 <__divsf3_pse+0x92>
    4948:	0e 2e       	mov	r0, r30
    494a:	3a f0       	brmi	.+14     	; 0x495a <__divsf3_pse+0x3a>
    494c:	e0 e8       	ldi	r30, 0x80	; 128
    494e:	32 d0       	rcall	.+100    	; 0x49b4 <__divsf3_pse+0x94>
    4950:	91 50       	subi	r25, 0x01	; 1
    4952:	50 40       	sbci	r21, 0x00	; 0
    4954:	e6 95       	lsr	r30
    4956:	00 1c       	adc	r0, r0
    4958:	ca f7       	brpl	.-14     	; 0x494c <__divsf3_pse+0x2c>
    495a:	2b d0       	rcall	.+86     	; 0x49b2 <__divsf3_pse+0x92>
    495c:	fe 2f       	mov	r31, r30
    495e:	29 d0       	rcall	.+82     	; 0x49b2 <__divsf3_pse+0x92>
    4960:	66 0f       	add	r22, r22
    4962:	77 1f       	adc	r23, r23
    4964:	88 1f       	adc	r24, r24
    4966:	bb 1f       	adc	r27, r27
    4968:	26 17       	cp	r18, r22
    496a:	37 07       	cpc	r19, r23
    496c:	48 07       	cpc	r20, r24
    496e:	ab 07       	cpc	r26, r27
    4970:	b0 e8       	ldi	r27, 0x80	; 128
    4972:	09 f0       	breq	.+2      	; 0x4976 <__divsf3_pse+0x56>
    4974:	bb 0b       	sbc	r27, r27
    4976:	80 2d       	mov	r24, r0
    4978:	bf 01       	movw	r22, r30
    497a:	ff 27       	eor	r31, r31
    497c:	93 58       	subi	r25, 0x83	; 131
    497e:	5f 4f       	sbci	r21, 0xFF	; 255
    4980:	3a f0       	brmi	.+14     	; 0x4990 <__divsf3_pse+0x70>
    4982:	9e 3f       	cpi	r25, 0xFE	; 254
    4984:	51 05       	cpc	r21, r1
    4986:	78 f0       	brcs	.+30     	; 0x49a6 <__divsf3_pse+0x86>
    4988:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__fp_inf>
    498c:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__fp_szero>
    4990:	5f 3f       	cpi	r21, 0xFF	; 255
    4992:	e4 f3       	brlt	.-8      	; 0x498c <__divsf3_pse+0x6c>
    4994:	98 3e       	cpi	r25, 0xE8	; 232
    4996:	d4 f3       	brlt	.-12     	; 0x498c <__divsf3_pse+0x6c>
    4998:	86 95       	lsr	r24
    499a:	77 95       	ror	r23
    499c:	67 95       	ror	r22
    499e:	b7 95       	ror	r27
    49a0:	f7 95       	ror	r31
    49a2:	9f 5f       	subi	r25, 0xFF	; 255
    49a4:	c9 f7       	brne	.-14     	; 0x4998 <__divsf3_pse+0x78>
    49a6:	88 0f       	add	r24, r24
    49a8:	91 1d       	adc	r25, r1
    49aa:	96 95       	lsr	r25
    49ac:	87 95       	ror	r24
    49ae:	97 f9       	bld	r25, 7
    49b0:	08 95       	ret
    49b2:	e1 e0       	ldi	r30, 0x01	; 1
    49b4:	66 0f       	add	r22, r22
    49b6:	77 1f       	adc	r23, r23
    49b8:	88 1f       	adc	r24, r24
    49ba:	bb 1f       	adc	r27, r27
    49bc:	62 17       	cp	r22, r18
    49be:	73 07       	cpc	r23, r19
    49c0:	84 07       	cpc	r24, r20
    49c2:	ba 07       	cpc	r27, r26
    49c4:	20 f0       	brcs	.+8      	; 0x49ce <__divsf3_pse+0xae>
    49c6:	62 1b       	sub	r22, r18
    49c8:	73 0b       	sbc	r23, r19
    49ca:	84 0b       	sbc	r24, r20
    49cc:	ba 0b       	sbc	r27, r26
    49ce:	ee 1f       	adc	r30, r30
    49d0:	88 f7       	brcc	.-30     	; 0x49b4 <__divsf3_pse+0x94>
    49d2:	e0 95       	com	r30
    49d4:	08 95       	ret

000049d6 <__fixsfsi>:
    49d6:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__fixunssfsi>
    49da:	68 94       	set
    49dc:	b1 11       	cpse	r27, r1
    49de:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__fp_szero>
    49e2:	08 95       	ret

000049e4 <__fixunssfsi>:
    49e4:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <__fp_splitA>
    49e8:	88 f0       	brcs	.+34     	; 0x4a0c <__fixunssfsi+0x28>
    49ea:	9f 57       	subi	r25, 0x7F	; 127
    49ec:	98 f0       	brcs	.+38     	; 0x4a14 <__fixunssfsi+0x30>
    49ee:	b9 2f       	mov	r27, r25
    49f0:	99 27       	eor	r25, r25
    49f2:	b7 51       	subi	r27, 0x17	; 23
    49f4:	b0 f0       	brcs	.+44     	; 0x4a22 <__fixunssfsi+0x3e>
    49f6:	e1 f0       	breq	.+56     	; 0x4a30 <__fixunssfsi+0x4c>
    49f8:	66 0f       	add	r22, r22
    49fa:	77 1f       	adc	r23, r23
    49fc:	88 1f       	adc	r24, r24
    49fe:	99 1f       	adc	r25, r25
    4a00:	1a f0       	brmi	.+6      	; 0x4a08 <__fixunssfsi+0x24>
    4a02:	ba 95       	dec	r27
    4a04:	c9 f7       	brne	.-14     	; 0x49f8 <__fixunssfsi+0x14>
    4a06:	14 c0       	rjmp	.+40     	; 0x4a30 <__fixunssfsi+0x4c>
    4a08:	b1 30       	cpi	r27, 0x01	; 1
    4a0a:	91 f0       	breq	.+36     	; 0x4a30 <__fixunssfsi+0x4c>
    4a0c:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fp_zero>
    4a10:	b1 e0       	ldi	r27, 0x01	; 1
    4a12:	08 95       	ret
    4a14:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__fp_zero>
    4a18:	67 2f       	mov	r22, r23
    4a1a:	78 2f       	mov	r23, r24
    4a1c:	88 27       	eor	r24, r24
    4a1e:	b8 5f       	subi	r27, 0xF8	; 248
    4a20:	39 f0       	breq	.+14     	; 0x4a30 <__fixunssfsi+0x4c>
    4a22:	b9 3f       	cpi	r27, 0xF9	; 249
    4a24:	cc f3       	brlt	.-14     	; 0x4a18 <__fixunssfsi+0x34>
    4a26:	86 95       	lsr	r24
    4a28:	77 95       	ror	r23
    4a2a:	67 95       	ror	r22
    4a2c:	b3 95       	inc	r27
    4a2e:	d9 f7       	brne	.-10     	; 0x4a26 <__fixunssfsi+0x42>
    4a30:	3e f4       	brtc	.+14     	; 0x4a40 <__fixunssfsi+0x5c>
    4a32:	90 95       	com	r25
    4a34:	80 95       	com	r24
    4a36:	70 95       	com	r23
    4a38:	61 95       	neg	r22
    4a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a40:	08 95       	ret

00004a42 <__floatunsisf>:
    4a42:	e8 94       	clt
    4a44:	09 c0       	rjmp	.+18     	; 0x4a58 <__floatsisf+0x12>

00004a46 <__floatsisf>:
    4a46:	97 fb       	bst	r25, 7
    4a48:	3e f4       	brtc	.+14     	; 0x4a58 <__floatsisf+0x12>
    4a4a:	90 95       	com	r25
    4a4c:	80 95       	com	r24
    4a4e:	70 95       	com	r23
    4a50:	61 95       	neg	r22
    4a52:	7f 4f       	sbci	r23, 0xFF	; 255
    4a54:	8f 4f       	sbci	r24, 0xFF	; 255
    4a56:	9f 4f       	sbci	r25, 0xFF	; 255
    4a58:	99 23       	and	r25, r25
    4a5a:	a9 f0       	breq	.+42     	; 0x4a86 <__floatsisf+0x40>
    4a5c:	f9 2f       	mov	r31, r25
    4a5e:	96 e9       	ldi	r25, 0x96	; 150
    4a60:	bb 27       	eor	r27, r27
    4a62:	93 95       	inc	r25
    4a64:	f6 95       	lsr	r31
    4a66:	87 95       	ror	r24
    4a68:	77 95       	ror	r23
    4a6a:	67 95       	ror	r22
    4a6c:	b7 95       	ror	r27
    4a6e:	f1 11       	cpse	r31, r1
    4a70:	f8 cf       	rjmp	.-16     	; 0x4a62 <__floatsisf+0x1c>
    4a72:	fa f4       	brpl	.+62     	; 0x4ab2 <__floatsisf+0x6c>
    4a74:	bb 0f       	add	r27, r27
    4a76:	11 f4       	brne	.+4      	; 0x4a7c <__floatsisf+0x36>
    4a78:	60 ff       	sbrs	r22, 0
    4a7a:	1b c0       	rjmp	.+54     	; 0x4ab2 <__floatsisf+0x6c>
    4a7c:	6f 5f       	subi	r22, 0xFF	; 255
    4a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a80:	8f 4f       	sbci	r24, 0xFF	; 255
    4a82:	9f 4f       	sbci	r25, 0xFF	; 255
    4a84:	16 c0       	rjmp	.+44     	; 0x4ab2 <__floatsisf+0x6c>
    4a86:	88 23       	and	r24, r24
    4a88:	11 f0       	breq	.+4      	; 0x4a8e <__floatsisf+0x48>
    4a8a:	96 e9       	ldi	r25, 0x96	; 150
    4a8c:	11 c0       	rjmp	.+34     	; 0x4ab0 <__floatsisf+0x6a>
    4a8e:	77 23       	and	r23, r23
    4a90:	21 f0       	breq	.+8      	; 0x4a9a <__floatsisf+0x54>
    4a92:	9e e8       	ldi	r25, 0x8E	; 142
    4a94:	87 2f       	mov	r24, r23
    4a96:	76 2f       	mov	r23, r22
    4a98:	05 c0       	rjmp	.+10     	; 0x4aa4 <__floatsisf+0x5e>
    4a9a:	66 23       	and	r22, r22
    4a9c:	71 f0       	breq	.+28     	; 0x4aba <__floatsisf+0x74>
    4a9e:	96 e8       	ldi	r25, 0x86	; 134
    4aa0:	86 2f       	mov	r24, r22
    4aa2:	70 e0       	ldi	r23, 0x00	; 0
    4aa4:	60 e0       	ldi	r22, 0x00	; 0
    4aa6:	2a f0       	brmi	.+10     	; 0x4ab2 <__floatsisf+0x6c>
    4aa8:	9a 95       	dec	r25
    4aaa:	66 0f       	add	r22, r22
    4aac:	77 1f       	adc	r23, r23
    4aae:	88 1f       	adc	r24, r24
    4ab0:	da f7       	brpl	.-10     	; 0x4aa8 <__floatsisf+0x62>
    4ab2:	88 0f       	add	r24, r24
    4ab4:	96 95       	lsr	r25
    4ab6:	87 95       	ror	r24
    4ab8:	97 f9       	bld	r25, 7
    4aba:	08 95       	ret

00004abc <__fp_inf>:
    4abc:	97 f9       	bld	r25, 7
    4abe:	9f 67       	ori	r25, 0x7F	; 127
    4ac0:	80 e8       	ldi	r24, 0x80	; 128
    4ac2:	70 e0       	ldi	r23, 0x00	; 0
    4ac4:	60 e0       	ldi	r22, 0x00	; 0
    4ac6:	08 95       	ret

00004ac8 <__fp_nan>:
    4ac8:	9f ef       	ldi	r25, 0xFF	; 255
    4aca:	80 ec       	ldi	r24, 0xC0	; 192
    4acc:	08 95       	ret

00004ace <__fp_pscA>:
    4ace:	00 24       	eor	r0, r0
    4ad0:	0a 94       	dec	r0
    4ad2:	16 16       	cp	r1, r22
    4ad4:	17 06       	cpc	r1, r23
    4ad6:	18 06       	cpc	r1, r24
    4ad8:	09 06       	cpc	r0, r25
    4ada:	08 95       	ret

00004adc <__fp_pscB>:
    4adc:	00 24       	eor	r0, r0
    4ade:	0a 94       	dec	r0
    4ae0:	12 16       	cp	r1, r18
    4ae2:	13 06       	cpc	r1, r19
    4ae4:	14 06       	cpc	r1, r20
    4ae6:	05 06       	cpc	r0, r21
    4ae8:	08 95       	ret

00004aea <__fp_round>:
    4aea:	09 2e       	mov	r0, r25
    4aec:	03 94       	inc	r0
    4aee:	00 0c       	add	r0, r0
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <__fp_round+0xc>
    4af2:	88 23       	and	r24, r24
    4af4:	52 f0       	brmi	.+20     	; 0x4b0a <__fp_round+0x20>
    4af6:	bb 0f       	add	r27, r27
    4af8:	40 f4       	brcc	.+16     	; 0x4b0a <__fp_round+0x20>
    4afa:	bf 2b       	or	r27, r31
    4afc:	11 f4       	brne	.+4      	; 0x4b02 <__fp_round+0x18>
    4afe:	60 ff       	sbrs	r22, 0
    4b00:	04 c0       	rjmp	.+8      	; 0x4b0a <__fp_round+0x20>
    4b02:	6f 5f       	subi	r22, 0xFF	; 255
    4b04:	7f 4f       	sbci	r23, 0xFF	; 255
    4b06:	8f 4f       	sbci	r24, 0xFF	; 255
    4b08:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0a:	08 95       	ret

00004b0c <__fp_split3>:
    4b0c:	57 fd       	sbrc	r21, 7
    4b0e:	90 58       	subi	r25, 0x80	; 128
    4b10:	44 0f       	add	r20, r20
    4b12:	55 1f       	adc	r21, r21
    4b14:	59 f0       	breq	.+22     	; 0x4b2c <__fp_splitA+0x10>
    4b16:	5f 3f       	cpi	r21, 0xFF	; 255
    4b18:	71 f0       	breq	.+28     	; 0x4b36 <__fp_splitA+0x1a>
    4b1a:	47 95       	ror	r20

00004b1c <__fp_splitA>:
    4b1c:	88 0f       	add	r24, r24
    4b1e:	97 fb       	bst	r25, 7
    4b20:	99 1f       	adc	r25, r25
    4b22:	61 f0       	breq	.+24     	; 0x4b3c <__fp_splitA+0x20>
    4b24:	9f 3f       	cpi	r25, 0xFF	; 255
    4b26:	79 f0       	breq	.+30     	; 0x4b46 <__fp_splitA+0x2a>
    4b28:	87 95       	ror	r24
    4b2a:	08 95       	ret
    4b2c:	12 16       	cp	r1, r18
    4b2e:	13 06       	cpc	r1, r19
    4b30:	14 06       	cpc	r1, r20
    4b32:	55 1f       	adc	r21, r21
    4b34:	f2 cf       	rjmp	.-28     	; 0x4b1a <__fp_split3+0xe>
    4b36:	46 95       	lsr	r20
    4b38:	f1 df       	rcall	.-30     	; 0x4b1c <__fp_splitA>
    4b3a:	08 c0       	rjmp	.+16     	; 0x4b4c <__fp_splitA+0x30>
    4b3c:	16 16       	cp	r1, r22
    4b3e:	17 06       	cpc	r1, r23
    4b40:	18 06       	cpc	r1, r24
    4b42:	99 1f       	adc	r25, r25
    4b44:	f1 cf       	rjmp	.-30     	; 0x4b28 <__fp_splitA+0xc>
    4b46:	86 95       	lsr	r24
    4b48:	71 05       	cpc	r23, r1
    4b4a:	61 05       	cpc	r22, r1
    4b4c:	08 94       	sec
    4b4e:	08 95       	ret

00004b50 <__fp_zero>:
    4b50:	e8 94       	clt

00004b52 <__fp_szero>:
    4b52:	bb 27       	eor	r27, r27
    4b54:	66 27       	eor	r22, r22
    4b56:	77 27       	eor	r23, r23
    4b58:	cb 01       	movw	r24, r22
    4b5a:	97 f9       	bld	r25, 7
    4b5c:	08 95       	ret

00004b5e <__gesf2>:
    4b5e:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__fp_cmp>
    4b62:	08 f4       	brcc	.+2      	; 0x4b66 <__gesf2+0x8>
    4b64:	8f ef       	ldi	r24, 0xFF	; 255
    4b66:	08 95       	ret

00004b68 <__mulsf3>:
    4b68:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__mulsf3x>
    4b6c:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__fp_round>
    4b70:	0e 94 67 25 	call	0x4ace	; 0x4ace <__fp_pscA>
    4b74:	38 f0       	brcs	.+14     	; 0x4b84 <__mulsf3+0x1c>
    4b76:	0e 94 6e 25 	call	0x4adc	; 0x4adc <__fp_pscB>
    4b7a:	20 f0       	brcs	.+8      	; 0x4b84 <__mulsf3+0x1c>
    4b7c:	95 23       	and	r25, r21
    4b7e:	11 f0       	breq	.+4      	; 0x4b84 <__mulsf3+0x1c>
    4b80:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__fp_inf>
    4b84:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__fp_nan>
    4b88:	11 24       	eor	r1, r1
    4b8a:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__fp_szero>

00004b8e <__mulsf3x>:
    4b8e:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <__fp_split3>
    4b92:	70 f3       	brcs	.-36     	; 0x4b70 <__mulsf3+0x8>

00004b94 <__mulsf3_pse>:
    4b94:	95 9f       	mul	r25, r21
    4b96:	c1 f3       	breq	.-16     	; 0x4b88 <__mulsf3+0x20>
    4b98:	95 0f       	add	r25, r21
    4b9a:	50 e0       	ldi	r21, 0x00	; 0
    4b9c:	55 1f       	adc	r21, r21
    4b9e:	62 9f       	mul	r22, r18
    4ba0:	f0 01       	movw	r30, r0
    4ba2:	72 9f       	mul	r23, r18
    4ba4:	bb 27       	eor	r27, r27
    4ba6:	f0 0d       	add	r31, r0
    4ba8:	b1 1d       	adc	r27, r1
    4baa:	63 9f       	mul	r22, r19
    4bac:	aa 27       	eor	r26, r26
    4bae:	f0 0d       	add	r31, r0
    4bb0:	b1 1d       	adc	r27, r1
    4bb2:	aa 1f       	adc	r26, r26
    4bb4:	64 9f       	mul	r22, r20
    4bb6:	66 27       	eor	r22, r22
    4bb8:	b0 0d       	add	r27, r0
    4bba:	a1 1d       	adc	r26, r1
    4bbc:	66 1f       	adc	r22, r22
    4bbe:	82 9f       	mul	r24, r18
    4bc0:	22 27       	eor	r18, r18
    4bc2:	b0 0d       	add	r27, r0
    4bc4:	a1 1d       	adc	r26, r1
    4bc6:	62 1f       	adc	r22, r18
    4bc8:	73 9f       	mul	r23, r19
    4bca:	b0 0d       	add	r27, r0
    4bcc:	a1 1d       	adc	r26, r1
    4bce:	62 1f       	adc	r22, r18
    4bd0:	83 9f       	mul	r24, r19
    4bd2:	a0 0d       	add	r26, r0
    4bd4:	61 1d       	adc	r22, r1
    4bd6:	22 1f       	adc	r18, r18
    4bd8:	74 9f       	mul	r23, r20
    4bda:	33 27       	eor	r19, r19
    4bdc:	a0 0d       	add	r26, r0
    4bde:	61 1d       	adc	r22, r1
    4be0:	23 1f       	adc	r18, r19
    4be2:	84 9f       	mul	r24, r20
    4be4:	60 0d       	add	r22, r0
    4be6:	21 1d       	adc	r18, r1
    4be8:	82 2f       	mov	r24, r18
    4bea:	76 2f       	mov	r23, r22
    4bec:	6a 2f       	mov	r22, r26
    4bee:	11 24       	eor	r1, r1
    4bf0:	9f 57       	subi	r25, 0x7F	; 127
    4bf2:	50 40       	sbci	r21, 0x00	; 0
    4bf4:	9a f0       	brmi	.+38     	; 0x4c1c <__mulsf3_pse+0x88>
    4bf6:	f1 f0       	breq	.+60     	; 0x4c34 <__mulsf3_pse+0xa0>
    4bf8:	88 23       	and	r24, r24
    4bfa:	4a f0       	brmi	.+18     	; 0x4c0e <__mulsf3_pse+0x7a>
    4bfc:	ee 0f       	add	r30, r30
    4bfe:	ff 1f       	adc	r31, r31
    4c00:	bb 1f       	adc	r27, r27
    4c02:	66 1f       	adc	r22, r22
    4c04:	77 1f       	adc	r23, r23
    4c06:	88 1f       	adc	r24, r24
    4c08:	91 50       	subi	r25, 0x01	; 1
    4c0a:	50 40       	sbci	r21, 0x00	; 0
    4c0c:	a9 f7       	brne	.-22     	; 0x4bf8 <__mulsf3_pse+0x64>
    4c0e:	9e 3f       	cpi	r25, 0xFE	; 254
    4c10:	51 05       	cpc	r21, r1
    4c12:	80 f0       	brcs	.+32     	; 0x4c34 <__mulsf3_pse+0xa0>
    4c14:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__fp_inf>
    4c18:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__fp_szero>
    4c1c:	5f 3f       	cpi	r21, 0xFF	; 255
    4c1e:	e4 f3       	brlt	.-8      	; 0x4c18 <__mulsf3_pse+0x84>
    4c20:	98 3e       	cpi	r25, 0xE8	; 232
    4c22:	d4 f3       	brlt	.-12     	; 0x4c18 <__mulsf3_pse+0x84>
    4c24:	86 95       	lsr	r24
    4c26:	77 95       	ror	r23
    4c28:	67 95       	ror	r22
    4c2a:	b7 95       	ror	r27
    4c2c:	f7 95       	ror	r31
    4c2e:	e7 95       	ror	r30
    4c30:	9f 5f       	subi	r25, 0xFF	; 255
    4c32:	c1 f7       	brne	.-16     	; 0x4c24 <__mulsf3_pse+0x90>
    4c34:	fe 2b       	or	r31, r30
    4c36:	88 0f       	add	r24, r24
    4c38:	91 1d       	adc	r25, r1
    4c3a:	96 95       	lsr	r25
    4c3c:	87 95       	ror	r24
    4c3e:	97 f9       	bld	r25, 7
    4c40:	08 95       	ret

00004c42 <__fp_cmp>:
    4c42:	99 0f       	add	r25, r25
    4c44:	00 08       	sbc	r0, r0
    4c46:	55 0f       	add	r21, r21
    4c48:	aa 0b       	sbc	r26, r26
    4c4a:	e0 e8       	ldi	r30, 0x80	; 128
    4c4c:	fe ef       	ldi	r31, 0xFE	; 254
    4c4e:	16 16       	cp	r1, r22
    4c50:	17 06       	cpc	r1, r23
    4c52:	e8 07       	cpc	r30, r24
    4c54:	f9 07       	cpc	r31, r25
    4c56:	c0 f0       	brcs	.+48     	; 0x4c88 <__fp_cmp+0x46>
    4c58:	12 16       	cp	r1, r18
    4c5a:	13 06       	cpc	r1, r19
    4c5c:	e4 07       	cpc	r30, r20
    4c5e:	f5 07       	cpc	r31, r21
    4c60:	98 f0       	brcs	.+38     	; 0x4c88 <__fp_cmp+0x46>
    4c62:	62 1b       	sub	r22, r18
    4c64:	73 0b       	sbc	r23, r19
    4c66:	84 0b       	sbc	r24, r20
    4c68:	95 0b       	sbc	r25, r21
    4c6a:	39 f4       	brne	.+14     	; 0x4c7a <__fp_cmp+0x38>
    4c6c:	0a 26       	eor	r0, r26
    4c6e:	61 f0       	breq	.+24     	; 0x4c88 <__fp_cmp+0x46>
    4c70:	23 2b       	or	r18, r19
    4c72:	24 2b       	or	r18, r20
    4c74:	25 2b       	or	r18, r21
    4c76:	21 f4       	brne	.+8      	; 0x4c80 <__fp_cmp+0x3e>
    4c78:	08 95       	ret
    4c7a:	0a 26       	eor	r0, r26
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <__fp_cmp+0x3e>
    4c7e:	a1 40       	sbci	r26, 0x01	; 1
    4c80:	a6 95       	lsr	r26
    4c82:	8f ef       	ldi	r24, 0xFF	; 255
    4c84:	81 1d       	adc	r24, r1
    4c86:	81 1d       	adc	r24, r1
    4c88:	08 95       	ret

00004c8a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4c8a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4c8c:	91 8d       	ldd	r25, Z+25	; 0x19
    4c8e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c90:	89 2f       	mov	r24, r25
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	80 5c       	subi	r24, 0xC0	; 192
    4c96:	9f 4f       	sbci	r25, 0xFF	; 255
    4c98:	82 1b       	sub	r24, r18
    4c9a:	91 09       	sbc	r25, r1
}
    4c9c:	8f 73       	andi	r24, 0x3F	; 63
    4c9e:	99 27       	eor	r25, r25
    4ca0:	08 95       	ret

00004ca2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4ca2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4ca4:	91 8d       	ldd	r25, Z+25	; 0x19
    4ca6:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ca8:	98 17       	cp	r25, r24
    4caa:	31 f0       	breq	.+12     	; 0x4cb8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4cac:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cae:	e8 0f       	add	r30, r24
    4cb0:	f1 1d       	adc	r31, r1
    4cb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4cb8:	8f ef       	ldi	r24, 0xFF	; 255
    4cba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4cbc:	08 95       	ret

00004cbe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4cbe:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4cc0:	91 8d       	ldd	r25, Z+25	; 0x19
    4cc2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cc4:	98 17       	cp	r25, r24
    4cc6:	61 f0       	breq	.+24     	; 0x4ce0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4cc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cca:	df 01       	movw	r26, r30
    4ccc:	a8 0f       	add	r26, r24
    4cce:	b1 1d       	adc	r27, r1
    4cd0:	5d 96       	adiw	r26, 0x1d	; 29
    4cd2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4cd4:	92 8d       	ldd	r25, Z+26	; 0x1a
    4cd6:	9f 5f       	subi	r25, 0xFF	; 255
    4cd8:	9f 73       	andi	r25, 0x3F	; 63
    4cda:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4ce0:	8f ef       	ldi	r24, 0xFF	; 255
    4ce2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4ce4:	08 95       	ret

00004ce6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4ce6:	88 ec       	ldi	r24, 0xC8	; 200
    4ce8:	97 e2       	ldi	r25, 0x27	; 39
    4cea:	89 2b       	or	r24, r25
    4cec:	49 f0       	breq	.+18     	; 0x4d00 <_Z14serialEventRunv+0x1a>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	89 2b       	or	r24, r25
    4cf4:	29 f0       	breq	.+10     	; 0x4d00 <_Z14serialEventRunv+0x1a>
    4cf6:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <_Z17Serial0_availablev>
    4cfa:	81 11       	cpse	r24, r1
    4cfc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    4d00:	08 95       	ret

00004d02 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4d02:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4d04:	84 8d       	ldd	r24, Z+28	; 0x1c
    4d06:	df 01       	movw	r26, r30
    4d08:	a8 0f       	add	r26, r24
    4d0a:	b1 1d       	adc	r27, r1
    4d0c:	a3 5a       	subi	r26, 0xA3	; 163
    4d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4d10:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4d12:	84 8d       	ldd	r24, Z+28	; 0x1c
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	01 96       	adiw	r24, 0x01	; 1
    4d18:	8f 73       	andi	r24, 0x3F	; 63
    4d1a:	99 27       	eor	r25, r25
    4d1c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    4d1e:	a6 89       	ldd	r26, Z+22	; 0x16
    4d20:	b7 89       	ldd	r27, Z+23	; 0x17
    4d22:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    4d24:	a0 89       	ldd	r26, Z+16	; 0x10
    4d26:	b1 89       	ldd	r27, Z+17	; 0x11
    4d28:	8c 91       	ld	r24, X
    4d2a:	80 64       	ori	r24, 0x40	; 64
    4d2c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    4d2e:	93 8d       	ldd	r25, Z+27	; 0x1b
    4d30:	84 8d       	ldd	r24, Z+28	; 0x1c
    4d32:	98 13       	cpse	r25, r24
    4d34:	06 c0       	rjmp	.+12     	; 0x4d42 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    4d36:	02 88       	ldd	r0, Z+18	; 0x12
    4d38:	f3 89       	ldd	r31, Z+19	; 0x13
    4d3a:	e0 2d       	mov	r30, r0
    4d3c:	80 81       	ld	r24, Z
    4d3e:	8f 7d       	andi	r24, 0xDF	; 223
    4d40:	80 83       	st	Z, r24
    4d42:	08 95       	ret

00004d44 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    4d44:	ef 92       	push	r14
    4d46:	ff 92       	push	r15
    4d48:	0f 93       	push	r16
    4d4a:	1f 93       	push	r17
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	ec 01       	movw	r28, r24
  _written = true;
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4d56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d5a:	98 13       	cpse	r25, r24
    4d5c:	05 c0       	rjmp	.+10     	; 0x4d68 <_ZN14HardwareSerial5writeEh+0x24>
    4d5e:	e8 89       	ldd	r30, Y+16	; 0x10
    4d60:	f9 89       	ldd	r31, Y+17	; 0x11
    4d62:	80 81       	ld	r24, Z
    4d64:	85 fd       	sbrc	r24, 5
    4d66:	24 c0       	rjmp	.+72     	; 0x4db0 <_ZN14HardwareSerial5writeEh+0x6c>
    4d68:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4d6a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4d6c:	10 e0       	ldi	r17, 0x00	; 0
    4d6e:	0f 5f       	subi	r16, 0xFF	; 255
    4d70:	1f 4f       	sbci	r17, 0xFF	; 255
    4d72:	0f 73       	andi	r16, 0x3F	; 63
    4d74:	11 27       	eor	r17, r17
    4d76:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d7a:	e8 12       	cpse	r14, r24
    4d7c:	0c c0       	rjmp	.+24     	; 0x4d96 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    4d7e:	0f b6       	in	r0, 0x3f	; 63
    4d80:	07 fc       	sbrc	r0, 7
    4d82:	fa cf       	rjmp	.-12     	; 0x4d78 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4d84:	e8 89       	ldd	r30, Y+16	; 0x10
    4d86:	f9 89       	ldd	r31, Y+17	; 0x11
    4d88:	80 81       	ld	r24, Z
    4d8a:	85 ff       	sbrs	r24, 5
    4d8c:	f5 cf       	rjmp	.-22     	; 0x4d78 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4d8e:	ce 01       	movw	r24, r28
    4d90:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4d94:	f1 cf       	rjmp	.-30     	; 0x4d78 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d98:	fe 01       	movw	r30, r28
    4d9a:	e8 0f       	add	r30, r24
    4d9c:	f1 1d       	adc	r31, r1
    4d9e:	e3 5a       	subi	r30, 0xA3	; 163
    4da0:	ff 4f       	sbci	r31, 0xFF	; 255
    4da2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    4da4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    4da6:	ea 89       	ldd	r30, Y+18	; 0x12
    4da8:	fb 89       	ldd	r31, Y+19	; 0x13
    4daa:	80 81       	ld	r24, Z
    4dac:	80 62       	ori	r24, 0x20	; 32
    4dae:	07 c0       	rjmp	.+14     	; 0x4dbe <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    4db0:	ee 89       	ldd	r30, Y+22	; 0x16
    4db2:	ff 89       	ldd	r31, Y+23	; 0x17
    4db4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    4db6:	e8 89       	ldd	r30, Y+16	; 0x10
    4db8:	f9 89       	ldd	r31, Y+17	; 0x11
    4dba:	80 81       	ld	r24, Z
    4dbc:	80 64       	ori	r24, 0x40	; 64
    4dbe:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	08 95       	ret

00004dd2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4dd2:	cf 93       	push	r28
    4dd4:	df 93       	push	r29
    4dd6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4dd8:	88 8d       	ldd	r24, Y+24	; 0x18
    4dda:	88 23       	and	r24, r24
    4ddc:	c9 f0       	breq	.+50     	; 0x4e10 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4dde:	ea 89       	ldd	r30, Y+18	; 0x12
    4de0:	fb 89       	ldd	r31, Y+19	; 0x13
    4de2:	80 81       	ld	r24, Z
    4de4:	85 fd       	sbrc	r24, 5
    4de6:	05 c0       	rjmp	.+10     	; 0x4df2 <_ZN14HardwareSerial5flushEv+0x20>
    4de8:	a8 89       	ldd	r26, Y+16	; 0x10
    4dea:	b9 89       	ldd	r27, Y+17	; 0x11
    4dec:	8c 91       	ld	r24, X
    4dee:	86 fd       	sbrc	r24, 6
    4df0:	0f c0       	rjmp	.+30     	; 0x4e10 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4df2:	0f b6       	in	r0, 0x3f	; 63
    4df4:	07 fc       	sbrc	r0, 7
    4df6:	f5 cf       	rjmp	.-22     	; 0x4de2 <_ZN14HardwareSerial5flushEv+0x10>
    4df8:	80 81       	ld	r24, Z
    4dfa:	85 ff       	sbrs	r24, 5
    4dfc:	f2 cf       	rjmp	.-28     	; 0x4de2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4dfe:	a8 89       	ldd	r26, Y+16	; 0x10
    4e00:	b9 89       	ldd	r27, Y+17	; 0x11
    4e02:	8c 91       	ld	r24, X
    4e04:	85 ff       	sbrs	r24, 5
    4e06:	ed cf       	rjmp	.-38     	; 0x4de2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    4e08:	ce 01       	movw	r24, r28
    4e0a:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4e0e:	e7 cf       	rjmp	.-50     	; 0x4dde <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	08 95       	ret

00004e16 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4e16:	cf 92       	push	r12
    4e18:	df 92       	push	r13
    4e1a:	ef 92       	push	r14
    4e1c:	ff 92       	push	r15
    4e1e:	1f 93       	push	r17
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	ec 01       	movw	r28, r24
    4e26:	6a 01       	movw	r12, r20
    4e28:	7b 01       	movw	r14, r22
    4e2a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4e2c:	e8 89       	ldd	r30, Y+16	; 0x10
    4e2e:	f9 89       	ldd	r31, Y+17	; 0x11
    4e30:	82 e0       	ldi	r24, 0x02	; 2
    4e32:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4e34:	41 15       	cp	r20, r1
    4e36:	51 4e       	sbci	r21, 0xE1	; 225
    4e38:	61 05       	cpc	r22, r1
    4e3a:	71 05       	cpc	r23, r1
    4e3c:	b1 f0       	breq	.+44     	; 0x4e6a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	79 e0       	ldi	r23, 0x09	; 9
    4e42:	8d e3       	ldi	r24, 0x3D	; 61
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	a7 01       	movw	r20, r14
    4e48:	96 01       	movw	r18, r12
    4e4a:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    4e4e:	da 01       	movw	r26, r20
    4e50:	c9 01       	movw	r24, r18
    4e52:	01 97       	sbiw	r24, 0x01	; 1
    4e54:	a1 09       	sbc	r26, r1
    4e56:	b1 09       	sbc	r27, r1
    4e58:	b6 95       	lsr	r27
    4e5a:	a7 95       	ror	r26
    4e5c:	97 95       	ror	r25
    4e5e:	87 95       	ror	r24
    4e60:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4e62:	21 15       	cp	r18, r1
    4e64:	80 e1       	ldi	r24, 0x10	; 16
    4e66:	38 07       	cpc	r19, r24
    4e68:	a8 f0       	brcs	.+42     	; 0x4e94 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    4e6a:	e8 89       	ldd	r30, Y+16	; 0x10
    4e6c:	f9 89       	ldd	r31, Y+17	; 0x11
    4e6e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4e70:	60 e8       	ldi	r22, 0x80	; 128
    4e72:	74 e8       	ldi	r23, 0x84	; 132
    4e74:	8e e1       	ldi	r24, 0x1E	; 30
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	a7 01       	movw	r20, r14
    4e7a:	96 01       	movw	r18, r12
    4e7c:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    4e80:	da 01       	movw	r26, r20
    4e82:	c9 01       	movw	r24, r18
    4e84:	01 97       	sbiw	r24, 0x01	; 1
    4e86:	a1 09       	sbc	r26, r1
    4e88:	b1 09       	sbc	r27, r1
    4e8a:	b6 95       	lsr	r27
    4e8c:	a7 95       	ror	r26
    4e8e:	97 95       	ror	r25
    4e90:	87 95       	ror	r24
    4e92:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4e94:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e96:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e98:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4e9a:	ee 85       	ldd	r30, Y+14	; 0x0e
    4e9c:	ff 85       	ldd	r31, Y+15	; 0x0f
    4e9e:	20 83       	st	Z, r18

  _written = false;
    4ea0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4ea2:	ec 89       	ldd	r30, Y+20	; 0x14
    4ea4:	fd 89       	ldd	r31, Y+21	; 0x15
    4ea6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    4ea8:	ea 89       	ldd	r30, Y+18	; 0x12
    4eaa:	fb 89       	ldd	r31, Y+19	; 0x13
    4eac:	80 81       	ld	r24, Z
    4eae:	80 61       	ori	r24, 0x10	; 16
    4eb0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4eb2:	ea 89       	ldd	r30, Y+18	; 0x12
    4eb4:	fb 89       	ldd	r31, Y+19	; 0x13
    4eb6:	80 81       	ld	r24, Z
    4eb8:	88 60       	ori	r24, 0x08	; 8
    4eba:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    4ebc:	ea 89       	ldd	r30, Y+18	; 0x12
    4ebe:	fb 89       	ldd	r31, Y+19	; 0x13
    4ec0:	80 81       	ld	r24, Z
    4ec2:	80 68       	ori	r24, 0x80	; 128
    4ec4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4ec6:	ea 89       	ldd	r30, Y+18	; 0x12
    4ec8:	fb 89       	ldd	r31, Y+19	; 0x13
    4eca:	80 81       	ld	r24, Z
    4ecc:	8f 7d       	andi	r24, 0xDF	; 223
    4ece:	80 83       	st	Z, r24
}
    4ed0:	df 91       	pop	r29
    4ed2:	cf 91       	pop	r28
    4ed4:	1f 91       	pop	r17
    4ed6:	ff 90       	pop	r15
    4ed8:	ef 90       	pop	r14
    4eda:	df 90       	pop	r13
    4edc:	cf 90       	pop	r12
    4ede:	08 95       	ret

00004ee0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4ee0:	1f 92       	push	r1
    4ee2:	0f 92       	push	r0
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	0f 92       	push	r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	2f 93       	push	r18
    4eec:	8f 93       	push	r24
    4eee:	9f 93       	push	r25
    4ef0:	ef 93       	push	r30
    4ef2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4ef4:	e0 91 75 07 	lds	r30, 0x0775	; 0x800775 <Serial+0x10>
    4ef8:	f0 91 76 07 	lds	r31, 0x0776	; 0x800776 <Serial+0x11>
    4efc:	80 81       	ld	r24, Z
    4efe:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <Serial+0x16>
    4f02:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <Serial+0x17>
    4f06:	82 fd       	sbrc	r24, 2
    4f08:	12 c0       	rjmp	.+36     	; 0x4f2e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4f0a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4f0c:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <Serial+0x19>
    4f10:	8f 5f       	subi	r24, 0xFF	; 255
    4f12:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4f14:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <Serial+0x1a>
    4f18:	82 17       	cp	r24, r18
    4f1a:	51 f0       	breq	.+20     	; 0x4f30 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4f1c:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <Serial+0x19>
    4f20:	f0 e0       	ldi	r31, 0x00	; 0
    4f22:	eb 59       	subi	r30, 0x9B	; 155
    4f24:	f8 4f       	sbci	r31, 0xF8	; 248
    4f26:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4f28:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <Serial+0x19>
    4f2c:	01 c0       	rjmp	.+2      	; 0x4f30 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4f2e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4f30:	ff 91       	pop	r31
    4f32:	ef 91       	pop	r30
    4f34:	9f 91       	pop	r25
    4f36:	8f 91       	pop	r24
    4f38:	2f 91       	pop	r18
    4f3a:	0f 90       	pop	r0
    4f3c:	0f be       	out	0x3f, r0	; 63
    4f3e:	0f 90       	pop	r0
    4f40:	1f 90       	pop	r1
    4f42:	18 95       	reti

00004f44 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4f44:	1f 92       	push	r1
    4f46:	0f 92       	push	r0
    4f48:	0f b6       	in	r0, 0x3f	; 63
    4f4a:	0f 92       	push	r0
    4f4c:	11 24       	eor	r1, r1
    4f4e:	2f 93       	push	r18
    4f50:	3f 93       	push	r19
    4f52:	4f 93       	push	r20
    4f54:	5f 93       	push	r21
    4f56:	6f 93       	push	r22
    4f58:	7f 93       	push	r23
    4f5a:	8f 93       	push	r24
    4f5c:	9f 93       	push	r25
    4f5e:	af 93       	push	r26
    4f60:	bf 93       	push	r27
    4f62:	ef 93       	push	r30
    4f64:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4f66:	85 e6       	ldi	r24, 0x65	; 101
    4f68:	97 e0       	ldi	r25, 0x07	; 7
    4f6a:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4f6e:	ff 91       	pop	r31
    4f70:	ef 91       	pop	r30
    4f72:	bf 91       	pop	r27
    4f74:	af 91       	pop	r26
    4f76:	9f 91       	pop	r25
    4f78:	8f 91       	pop	r24
    4f7a:	7f 91       	pop	r23
    4f7c:	6f 91       	pop	r22
    4f7e:	5f 91       	pop	r21
    4f80:	4f 91       	pop	r20
    4f82:	3f 91       	pop	r19
    4f84:	2f 91       	pop	r18
    4f86:	0f 90       	pop	r0
    4f88:	0f be       	out	0x3f, r0	; 63
    4f8a:	0f 90       	pop	r0
    4f8c:	1f 90       	pop	r1
    4f8e:	18 95       	reti

00004f90 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4f90:	85 e6       	ldi	r24, 0x65	; 101
    4f92:	97 e0       	ldi	r25, 0x07	; 7
    4f94:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <_ZN14HardwareSerial9availableEv>
    4f98:	21 e0       	ldi	r18, 0x01	; 1
    4f9a:	89 2b       	or	r24, r25
    4f9c:	09 f4       	brne	.+2      	; 0x4fa0 <_Z17Serial0_availablev+0x10>
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
}
    4fa0:	82 2f       	mov	r24, r18
    4fa2:	08 95       	ret

00004fa4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4fa4:	e5 e6       	ldi	r30, 0x65	; 101
    4fa6:	f7 e0       	ldi	r31, 0x07	; 7
    4fa8:	13 82       	std	Z+3, r1	; 0x03
    4faa:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4fac:	88 ee       	ldi	r24, 0xE8	; 232
    4fae:	93 e0       	ldi	r25, 0x03	; 3
    4fb0:	a0 e0       	ldi	r26, 0x00	; 0
    4fb2:	b0 e0       	ldi	r27, 0x00	; 0
    4fb4:	84 83       	std	Z+4, r24	; 0x04
    4fb6:	95 83       	std	Z+5, r25	; 0x05
    4fb8:	a6 83       	std	Z+6, r26	; 0x06
    4fba:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4fbc:	8e e9       	ldi	r24, 0x9E	; 158
    4fbe:	93 e0       	ldi	r25, 0x03	; 3
    4fc0:	91 83       	std	Z+1, r25	; 0x01
    4fc2:	80 83       	st	Z, r24
    4fc4:	85 ec       	ldi	r24, 0xC5	; 197
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	95 87       	std	Z+13, r25	; 0x0d
    4fca:	84 87       	std	Z+12, r24	; 0x0c
    4fcc:	84 ec       	ldi	r24, 0xC4	; 196
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	97 87       	std	Z+15, r25	; 0x0f
    4fd2:	86 87       	std	Z+14, r24	; 0x0e
    4fd4:	80 ec       	ldi	r24, 0xC0	; 192
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	91 8b       	std	Z+17, r25	; 0x11
    4fda:	80 8b       	std	Z+16, r24	; 0x10
    4fdc:	81 ec       	ldi	r24, 0xC1	; 193
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	93 8b       	std	Z+19, r25	; 0x13
    4fe2:	82 8b       	std	Z+18, r24	; 0x12
    4fe4:	82 ec       	ldi	r24, 0xC2	; 194
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	95 8b       	std	Z+21, r25	; 0x15
    4fea:	84 8b       	std	Z+20, r24	; 0x14
    4fec:	86 ec       	ldi	r24, 0xC6	; 198
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	97 8b       	std	Z+23, r25	; 0x17
    4ff2:	86 8b       	std	Z+22, r24	; 0x16
    4ff4:	11 8e       	std	Z+25, r1	; 0x19
    4ff6:	12 8e       	std	Z+26, r1	; 0x1a
    4ff8:	13 8e       	std	Z+27, r1	; 0x1b
    4ffa:	14 8e       	std	Z+28, r1	; 0x1c
    4ffc:	08 95       	ret

00004ffe <initVariant>:
    4ffe:	08 95       	ret

00005000 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5000:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <init>

	initVariant();
    5004:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5008:	0e 94 af 09 	call	0x135e	; 0x135e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    500c:	c3 e7       	ldi	r28, 0x73	; 115
    500e:	d6 e2       	ldi	r29, 0x26	; 38
#endif
	
	setup();
    
	for (;;) {
		loop();
    5010:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <loop>
		if (serialEventRun) serialEventRun();
    5014:	20 97       	sbiw	r28, 0x00	; 0
    5016:	e1 f3       	breq	.-8      	; 0x5010 <main+0x10>
    5018:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <_Z14serialEventRunv>
    501c:	f9 cf       	rjmp	.-14     	; 0x5010 <main+0x10>

0000501e <_Znwj>:
    501e:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <malloc>

00005022 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    5022:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <malloc>

00005026 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    5026:	cf 92       	push	r12
    5028:	df 92       	push	r13
    502a:	ef 92       	push	r14
    502c:	ff 92       	push	r15
    502e:	0f 93       	push	r16
    5030:	1f 93       	push	r17
    5032:	cf 93       	push	r28
    5034:	df 93       	push	r29
    5036:	6c 01       	movw	r12, r24
    5038:	7a 01       	movw	r14, r20
    503a:	8b 01       	movw	r16, r22
    503c:	c0 e0       	ldi	r28, 0x00	; 0
    503e:	d0 e0       	ldi	r29, 0x00	; 0
    5040:	ce 15       	cp	r28, r14
    5042:	df 05       	cpc	r29, r15
    5044:	81 f0       	breq	.+32     	; 0x5066 <_ZN5Print5writeEPKhj+0x40>
    5046:	d8 01       	movw	r26, r16
    5048:	6d 91       	ld	r22, X+
    504a:	8d 01       	movw	r16, r26
    504c:	d6 01       	movw	r26, r12
    504e:	ed 91       	ld	r30, X+
    5050:	fc 91       	ld	r31, X
    5052:	01 90       	ld	r0, Z+
    5054:	f0 81       	ld	r31, Z
    5056:	e0 2d       	mov	r30, r0
    5058:	c6 01       	movw	r24, r12
    505a:	09 95       	icall
    505c:	89 2b       	or	r24, r25
    505e:	11 f0       	breq	.+4      	; 0x5064 <_ZN5Print5writeEPKhj+0x3e>
    5060:	21 96       	adiw	r28, 0x01	; 1
    5062:	ee cf       	rjmp	.-36     	; 0x5040 <_ZN5Print5writeEPKhj+0x1a>
    5064:	7e 01       	movw	r14, r28
    5066:	c7 01       	movw	r24, r14
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	ff 90       	pop	r15
    5072:	ef 90       	pop	r14
    5074:	df 90       	pop	r13
    5076:	cf 90       	pop	r12
    5078:	08 95       	ret

0000507a <_ZN5Print5writeEPKc>:
    507a:	61 15       	cp	r22, r1
    507c:	71 05       	cpc	r23, r1
    507e:	79 f0       	breq	.+30     	; 0x509e <_ZN5Print5writeEPKc+0x24>
    5080:	fb 01       	movw	r30, r22
    5082:	01 90       	ld	r0, Z+
    5084:	00 20       	and	r0, r0
    5086:	e9 f7       	brne	.-6      	; 0x5082 <_ZN5Print5writeEPKc+0x8>
    5088:	31 97       	sbiw	r30, 0x01	; 1
    508a:	af 01       	movw	r20, r30
    508c:	46 1b       	sub	r20, r22
    508e:	57 0b       	sbc	r21, r23
    5090:	dc 01       	movw	r26, r24
    5092:	ed 91       	ld	r30, X+
    5094:	fc 91       	ld	r31, X
    5096:	02 80       	ldd	r0, Z+2	; 0x02
    5098:	f3 81       	ldd	r31, Z+3	; 0x03
    509a:	e0 2d       	mov	r30, r0
    509c:	09 94       	ijmp
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	08 95       	ret

000050a4 <_ZN5Print5printEPK19__FlashStringHelper>:
    50a4:	ef 92       	push	r14
    50a6:	ff 92       	push	r15
    50a8:	0f 93       	push	r16
    50aa:	1f 93       	push	r17
    50ac:	cf 93       	push	r28
    50ae:	df 93       	push	r29
    50b0:	8c 01       	movw	r16, r24
    50b2:	7b 01       	movw	r14, r22
    50b4:	c0 e0       	ldi	r28, 0x00	; 0
    50b6:	d0 e0       	ldi	r29, 0x00	; 0
    50b8:	f7 01       	movw	r30, r14
    50ba:	ec 0f       	add	r30, r28
    50bc:	fd 1f       	adc	r31, r29
    50be:	64 91       	lpm	r22, Z
    50c0:	66 23       	and	r22, r22
    50c2:	61 f0       	breq	.+24     	; 0x50dc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    50c4:	d8 01       	movw	r26, r16
    50c6:	ed 91       	ld	r30, X+
    50c8:	fc 91       	ld	r31, X
    50ca:	01 90       	ld	r0, Z+
    50cc:	f0 81       	ld	r31, Z
    50ce:	e0 2d       	mov	r30, r0
    50d0:	c8 01       	movw	r24, r16
    50d2:	09 95       	icall
    50d4:	89 2b       	or	r24, r25
    50d6:	11 f0       	breq	.+4      	; 0x50dc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    50d8:	21 96       	adiw	r28, 0x01	; 1
    50da:	ee cf       	rjmp	.-36     	; 0x50b8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    50dc:	ce 01       	movw	r24, r28
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	ff 90       	pop	r15
    50e8:	ef 90       	pop	r14
    50ea:	08 95       	ret

000050ec <_ZN5Print5printEPKc>:
    50ec:	0c 94 3d 28 	jmp	0x507a	; 0x507a <_ZN5Print5writeEPKc>

000050f0 <_ZN5Print5printEc>:
    50f0:	dc 01       	movw	r26, r24
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	01 90       	ld	r0, Z+
    50f8:	f0 81       	ld	r31, Z
    50fa:	e0 2d       	mov	r30, r0
    50fc:	09 94       	ijmp

000050fe <_ZN5Print7printlnEv>:
    50fe:	6a ea       	ldi	r22, 0xAA	; 170
    5100:	73 e0       	ldi	r23, 0x03	; 3
    5102:	0c 94 3d 28 	jmp	0x507a	; 0x507a <_ZN5Print5writeEPKc>

00005106 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5106:	0f 93       	push	r16
    5108:	1f 93       	push	r17
    510a:	cf 93       	push	r28
    510c:	df 93       	push	r29
    510e:	ec 01       	movw	r28, r24
    5110:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5114:	8c 01       	movw	r16, r24
    5116:	ce 01       	movw	r24, r28
    5118:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    511c:	80 0f       	add	r24, r16
    511e:	91 1f       	adc	r25, r17
    5120:	df 91       	pop	r29
    5122:	cf 91       	pop	r28
    5124:	1f 91       	pop	r17
    5126:	0f 91       	pop	r16
    5128:	08 95       	ret

0000512a <_ZN5Print7printlnEPKc>:
    512a:	0f 93       	push	r16
    512c:	1f 93       	push	r17
    512e:	cf 93       	push	r28
    5130:	df 93       	push	r29
    5132:	ec 01       	movw	r28, r24
    5134:	0e 94 3d 28 	call	0x507a	; 0x507a <_ZN5Print5writeEPKc>
    5138:	8c 01       	movw	r16, r24
    513a:	ce 01       	movw	r24, r28
    513c:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5140:	80 0f       	add	r24, r16
    5142:	91 1f       	adc	r25, r17
    5144:	df 91       	pop	r29
    5146:	cf 91       	pop	r28
    5148:	1f 91       	pop	r17
    514a:	0f 91       	pop	r16
    514c:	08 95       	ret

0000514e <_ZN5Print7printlnEc>:
    514e:	0f 93       	push	r16
    5150:	1f 93       	push	r17
    5152:	cf 93       	push	r28
    5154:	df 93       	push	r29
    5156:	ec 01       	movw	r28, r24
    5158:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN5Print5printEc>
    515c:	8c 01       	movw	r16, r24
    515e:	ce 01       	movw	r24, r28
    5160:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5164:	80 0f       	add	r24, r16
    5166:	91 1f       	adc	r25, r17
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	1f 91       	pop	r17
    516e:	0f 91       	pop	r16
    5170:	08 95       	ret

00005172 <_ZN5Print11printNumberEmh>:
    5172:	8f 92       	push	r8
    5174:	9f 92       	push	r9
    5176:	af 92       	push	r10
    5178:	bf 92       	push	r11
    517a:	ef 92       	push	r14
    517c:	ff 92       	push	r15
    517e:	0f 93       	push	r16
    5180:	1f 93       	push	r17
    5182:	cf 93       	push	r28
    5184:	df 93       	push	r29
    5186:	cd b7       	in	r28, 0x3d	; 61
    5188:	de b7       	in	r29, 0x3e	; 62
    518a:	a1 97       	sbiw	r28, 0x21	; 33
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	f8 94       	cli
    5190:	de bf       	out	0x3e, r29	; 62
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	cd bf       	out	0x3d, r28	; 61
    5196:	7c 01       	movw	r14, r24
    5198:	fa 01       	movw	r30, r20
    519a:	cb 01       	movw	r24, r22
    519c:	19 a2       	std	Y+33, r1	; 0x21
    519e:	22 30       	cpi	r18, 0x02	; 2
    51a0:	08 f4       	brcc	.+2      	; 0x51a4 <_ZN5Print11printNumberEmh+0x32>
    51a2:	2a e0       	ldi	r18, 0x0A	; 10
    51a4:	8e 01       	movw	r16, r28
    51a6:	0f 5d       	subi	r16, 0xDF	; 223
    51a8:	1f 4f       	sbci	r17, 0xFF	; 255
    51aa:	82 2e       	mov	r8, r18
    51ac:	91 2c       	mov	r9, r1
    51ae:	a1 2c       	mov	r10, r1
    51b0:	b1 2c       	mov	r11, r1
    51b2:	bf 01       	movw	r22, r30
    51b4:	a5 01       	movw	r20, r10
    51b6:	94 01       	movw	r18, r8
    51b8:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    51bc:	f9 01       	movw	r30, r18
    51be:	ca 01       	movw	r24, r20
    51c0:	01 50       	subi	r16, 0x01	; 1
    51c2:	11 09       	sbc	r17, r1
    51c4:	6a 30       	cpi	r22, 0x0A	; 10
    51c6:	10 f4       	brcc	.+4      	; 0x51cc <_ZN5Print11printNumberEmh+0x5a>
    51c8:	60 5d       	subi	r22, 0xD0	; 208
    51ca:	01 c0       	rjmp	.+2      	; 0x51ce <_ZN5Print11printNumberEmh+0x5c>
    51cc:	69 5c       	subi	r22, 0xC9	; 201
    51ce:	d8 01       	movw	r26, r16
    51d0:	6c 93       	st	X, r22
    51d2:	23 2b       	or	r18, r19
    51d4:	24 2b       	or	r18, r20
    51d6:	25 2b       	or	r18, r21
    51d8:	61 f7       	brne	.-40     	; 0x51b2 <_ZN5Print11printNumberEmh+0x40>
    51da:	b8 01       	movw	r22, r16
    51dc:	c7 01       	movw	r24, r14
    51de:	0e 94 3d 28 	call	0x507a	; 0x507a <_ZN5Print5writeEPKc>
    51e2:	a1 96       	adiw	r28, 0x21	; 33
    51e4:	0f b6       	in	r0, 0x3f	; 63
    51e6:	f8 94       	cli
    51e8:	de bf       	out	0x3e, r29	; 62
    51ea:	0f be       	out	0x3f, r0	; 63
    51ec:	cd bf       	out	0x3d, r28	; 61
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	1f 91       	pop	r17
    51f4:	0f 91       	pop	r16
    51f6:	ff 90       	pop	r15
    51f8:	ef 90       	pop	r14
    51fa:	bf 90       	pop	r11
    51fc:	af 90       	pop	r10
    51fe:	9f 90       	pop	r9
    5200:	8f 90       	pop	r8
    5202:	08 95       	ret

00005204 <_ZN5Print5printEmi>:
    5204:	21 15       	cp	r18, r1
    5206:	31 05       	cpc	r19, r1
    5208:	41 f4       	brne	.+16     	; 0x521a <_ZN5Print5printEmi+0x16>
    520a:	dc 01       	movw	r26, r24
    520c:	ed 91       	ld	r30, X+
    520e:	fc 91       	ld	r31, X
    5210:	01 90       	ld	r0, Z+
    5212:	f0 81       	ld	r31, Z
    5214:	e0 2d       	mov	r30, r0
    5216:	64 2f       	mov	r22, r20
    5218:	09 94       	ijmp
    521a:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <_ZN5Print11printNumberEmh>

0000521e <_ZN5Print5printEhi>:
    521e:	9a 01       	movw	r18, r20
    5220:	46 2f       	mov	r20, r22
    5222:	50 e0       	ldi	r21, 0x00	; 0
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	70 e0       	ldi	r23, 0x00	; 0
    5228:	0c 94 02 29 	jmp	0x5204	; 0x5204 <_ZN5Print5printEmi>

0000522c <_ZN5Print7printlnEhi>:
    522c:	0f 93       	push	r16
    522e:	1f 93       	push	r17
    5230:	cf 93       	push	r28
    5232:	df 93       	push	r29
    5234:	ec 01       	movw	r28, r24
    5236:	0e 94 0f 29 	call	0x521e	; 0x521e <_ZN5Print5printEhi>
    523a:	8c 01       	movw	r16, r24
    523c:	ce 01       	movw	r24, r28
    523e:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5242:	80 0f       	add	r24, r16
    5244:	91 1f       	adc	r25, r17
    5246:	df 91       	pop	r29
    5248:	cf 91       	pop	r28
    524a:	1f 91       	pop	r17
    524c:	0f 91       	pop	r16
    524e:	08 95       	ret

00005250 <_ZN5Print5printEji>:
    5250:	9a 01       	movw	r18, r20
    5252:	ab 01       	movw	r20, r22
    5254:	60 e0       	ldi	r22, 0x00	; 0
    5256:	70 e0       	ldi	r23, 0x00	; 0
    5258:	0c 94 02 29 	jmp	0x5204	; 0x5204 <_ZN5Print5printEmi>

0000525c <_ZN5Print7printlnEji>:
    525c:	0f 93       	push	r16
    525e:	1f 93       	push	r17
    5260:	cf 93       	push	r28
    5262:	df 93       	push	r29
    5264:	ec 01       	movw	r28, r24
    5266:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN5Print5printEji>
    526a:	8c 01       	movw	r16, r24
    526c:	ce 01       	movw	r24, r28
    526e:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5272:	80 0f       	add	r24, r16
    5274:	91 1f       	adc	r25, r17
    5276:	df 91       	pop	r29
    5278:	cf 91       	pop	r28
    527a:	1f 91       	pop	r17
    527c:	0f 91       	pop	r16
    527e:	08 95       	ret

00005280 <_ZN5Print7printlnEmi>:
    5280:	0f 93       	push	r16
    5282:	1f 93       	push	r17
    5284:	cf 93       	push	r28
    5286:	df 93       	push	r29
    5288:	ec 01       	movw	r28, r24
    528a:	0e 94 02 29 	call	0x5204	; 0x5204 <_ZN5Print5printEmi>
    528e:	8c 01       	movw	r16, r24
    5290:	ce 01       	movw	r24, r28
    5292:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5296:	80 0f       	add	r24, r16
    5298:	91 1f       	adc	r25, r17
    529a:	df 91       	pop	r29
    529c:	cf 91       	pop	r28
    529e:	1f 91       	pop	r17
    52a0:	0f 91       	pop	r16
    52a2:	08 95       	ret

000052a4 <_ZN5Print5printEli>:
    52a4:	cf 92       	push	r12
    52a6:	df 92       	push	r13
    52a8:	ef 92       	push	r14
    52aa:	ff 92       	push	r15
    52ac:	0f 93       	push	r16
    52ae:	1f 93       	push	r17
    52b0:	cf 93       	push	r28
    52b2:	df 93       	push	r29
    52b4:	21 15       	cp	r18, r1
    52b6:	31 05       	cpc	r19, r1
    52b8:	81 f4       	brne	.+32     	; 0x52da <_ZN5Print5printEli+0x36>
    52ba:	dc 01       	movw	r26, r24
    52bc:	ed 91       	ld	r30, X+
    52be:	fc 91       	ld	r31, X
    52c0:	01 90       	ld	r0, Z+
    52c2:	f0 81       	ld	r31, Z
    52c4:	e0 2d       	mov	r30, r0
    52c6:	64 2f       	mov	r22, r20
    52c8:	df 91       	pop	r29
    52ca:	cf 91       	pop	r28
    52cc:	1f 91       	pop	r17
    52ce:	0f 91       	pop	r16
    52d0:	ff 90       	pop	r15
    52d2:	ef 90       	pop	r14
    52d4:	df 90       	pop	r13
    52d6:	cf 90       	pop	r12
    52d8:	09 94       	ijmp
    52da:	2a 30       	cpi	r18, 0x0A	; 10
    52dc:	31 05       	cpc	r19, r1
    52de:	01 f5       	brne	.+64     	; 0x5320 <_ZN5Print5printEli+0x7c>
    52e0:	77 ff       	sbrs	r23, 7
    52e2:	1d c0       	rjmp	.+58     	; 0x531e <_ZN5Print5printEli+0x7a>
    52e4:	6a 01       	movw	r12, r20
    52e6:	7b 01       	movw	r14, r22
    52e8:	ec 01       	movw	r28, r24
    52ea:	6d e2       	ldi	r22, 0x2D	; 45
    52ec:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN5Print5printEc>
    52f0:	8c 01       	movw	r16, r24
    52f2:	44 27       	eor	r20, r20
    52f4:	55 27       	eor	r21, r21
    52f6:	ba 01       	movw	r22, r20
    52f8:	4c 19       	sub	r20, r12
    52fa:	5d 09       	sbc	r21, r13
    52fc:	6e 09       	sbc	r22, r14
    52fe:	7f 09       	sbc	r23, r15
    5300:	2a e0       	ldi	r18, 0x0A	; 10
    5302:	ce 01       	movw	r24, r28
    5304:	0e 94 b9 28 	call	0x5172	; 0x5172 <_ZN5Print11printNumberEmh>
    5308:	80 0f       	add	r24, r16
    530a:	91 1f       	adc	r25, r17
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	1f 91       	pop	r17
    5312:	0f 91       	pop	r16
    5314:	ff 90       	pop	r15
    5316:	ef 90       	pop	r14
    5318:	df 90       	pop	r13
    531a:	cf 90       	pop	r12
    531c:	08 95       	ret
    531e:	2a e0       	ldi	r18, 0x0A	; 10
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	ff 90       	pop	r15
    532a:	ef 90       	pop	r14
    532c:	df 90       	pop	r13
    532e:	cf 90       	pop	r12
    5330:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <_ZN5Print11printNumberEmh>

00005334 <_ZN5Print5printEii>:
    5334:	9a 01       	movw	r18, r20
    5336:	ab 01       	movw	r20, r22
    5338:	77 0f       	add	r23, r23
    533a:	66 0b       	sbc	r22, r22
    533c:	77 0b       	sbc	r23, r23
    533e:	0c 94 52 29 	jmp	0x52a4	; 0x52a4 <_ZN5Print5printEli>

00005342 <_ZN5Print7printlnEii>:
    5342:	0f 93       	push	r16
    5344:	1f 93       	push	r17
    5346:	cf 93       	push	r28
    5348:	df 93       	push	r29
    534a:	ec 01       	movw	r28, r24
    534c:	0e 94 9a 29 	call	0x5334	; 0x5334 <_ZN5Print5printEii>
    5350:	8c 01       	movw	r16, r24
    5352:	ce 01       	movw	r24, r28
    5354:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5358:	80 0f       	add	r24, r16
    535a:	91 1f       	adc	r25, r17
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	1f 91       	pop	r17
    5362:	0f 91       	pop	r16
    5364:	08 95       	ret

00005366 <_ZN5Print7printlnEli>:
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	ec 01       	movw	r28, r24
    5370:	0e 94 52 29 	call	0x52a4	; 0x52a4 <_ZN5Print5printEli>
    5374:	8c 01       	movw	r16, r24
    5376:	ce 01       	movw	r24, r28
    5378:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    537c:	80 0f       	add	r24, r16
    537e:	91 1f       	adc	r25, r17
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	1f 91       	pop	r17
    5386:	0f 91       	pop	r16
    5388:	08 95       	ret

0000538a <_ZN5Print10printFloatEdh>:
    538a:	7f 92       	push	r7
    538c:	8f 92       	push	r8
    538e:	9f 92       	push	r9
    5390:	af 92       	push	r10
    5392:	bf 92       	push	r11
    5394:	cf 92       	push	r12
    5396:	df 92       	push	r13
    5398:	ef 92       	push	r14
    539a:	ff 92       	push	r15
    539c:	0f 93       	push	r16
    539e:	1f 93       	push	r17
    53a0:	cf 93       	push	r28
    53a2:	df 93       	push	r29
    53a4:	8c 01       	movw	r16, r24
    53a6:	6a 01       	movw	r12, r20
    53a8:	7b 01       	movw	r14, r22
    53aa:	72 2e       	mov	r7, r18
    53ac:	9a 01       	movw	r18, r20
    53ae:	ab 01       	movw	r20, r22
    53b0:	c7 01       	movw	r24, r14
    53b2:	b6 01       	movw	r22, r12
    53b4:	0e 94 65 39 	call	0x72ca	; 0x72ca <__unordsf2>
    53b8:	88 23       	and	r24, r24
    53ba:	19 f0       	breq	.+6      	; 0x53c2 <_ZN5Print10printFloatEdh+0x38>
    53bc:	6d ea       	ldi	r22, 0xAD	; 173
    53be:	73 e0       	ldi	r23, 0x03	; 3
    53c0:	27 c0       	rjmp	.+78     	; 0x5410 <_ZN5Print10printFloatEdh+0x86>
    53c2:	46 01       	movw	r8, r12
    53c4:	57 01       	movw	r10, r14
    53c6:	e8 94       	clt
    53c8:	b7 f8       	bld	r11, 7
    53ca:	2f ef       	ldi	r18, 0xFF	; 255
    53cc:	3f ef       	ldi	r19, 0xFF	; 255
    53ce:	4f e7       	ldi	r20, 0x7F	; 127
    53d0:	5f e7       	ldi	r21, 0x7F	; 127
    53d2:	c5 01       	movw	r24, r10
    53d4:	b4 01       	movw	r22, r8
    53d6:	0e 94 65 39 	call	0x72ca	; 0x72ca <__unordsf2>
    53da:	81 11       	cpse	r24, r1
    53dc:	0d c0       	rjmp	.+26     	; 0x53f8 <_ZN5Print10printFloatEdh+0x6e>
    53de:	2f ef       	ldi	r18, 0xFF	; 255
    53e0:	3f ef       	ldi	r19, 0xFF	; 255
    53e2:	4f e7       	ldi	r20, 0x7F	; 127
    53e4:	5f e7       	ldi	r21, 0x7F	; 127
    53e6:	c5 01       	movw	r24, r10
    53e8:	b4 01       	movw	r22, r8
    53ea:	0e 94 60 39 	call	0x72c0	; 0x72c0 <__cmpsf2>
    53ee:	18 16       	cp	r1, r24
    53f0:	1c f4       	brge	.+6      	; 0x53f8 <_ZN5Print10printFloatEdh+0x6e>
    53f2:	61 eb       	ldi	r22, 0xB1	; 177
    53f4:	73 e0       	ldi	r23, 0x03	; 3
    53f6:	0c c0       	rjmp	.+24     	; 0x5410 <_ZN5Print10printFloatEdh+0x86>
    53f8:	2f ef       	ldi	r18, 0xFF	; 255
    53fa:	3f ef       	ldi	r19, 0xFF	; 255
    53fc:	4f e7       	ldi	r20, 0x7F	; 127
    53fe:	5f e4       	ldi	r21, 0x4F	; 79
    5400:	c7 01       	movw	r24, r14
    5402:	b6 01       	movw	r22, r12
    5404:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__gesf2>
    5408:	18 16       	cp	r1, r24
    540a:	94 f4       	brge	.+36     	; 0x5430 <_ZN5Print10printFloatEdh+0xa6>
    540c:	65 eb       	ldi	r22, 0xB5	; 181
    540e:	73 e0       	ldi	r23, 0x03	; 3
    5410:	c8 01       	movw	r24, r16
    5412:	df 91       	pop	r29
    5414:	cf 91       	pop	r28
    5416:	1f 91       	pop	r17
    5418:	0f 91       	pop	r16
    541a:	ff 90       	pop	r15
    541c:	ef 90       	pop	r14
    541e:	df 90       	pop	r13
    5420:	cf 90       	pop	r12
    5422:	bf 90       	pop	r11
    5424:	af 90       	pop	r10
    5426:	9f 90       	pop	r9
    5428:	8f 90       	pop	r8
    542a:	7f 90       	pop	r7
    542c:	0c 94 3d 28 	jmp	0x507a	; 0x507a <_ZN5Print5writeEPKc>
    5430:	2f ef       	ldi	r18, 0xFF	; 255
    5432:	3f ef       	ldi	r19, 0xFF	; 255
    5434:	4f e7       	ldi	r20, 0x7F	; 127
    5436:	5f ec       	ldi	r21, 0xCF	; 207
    5438:	c7 01       	movw	r24, r14
    543a:	b6 01       	movw	r22, r12
    543c:	0e 94 60 39 	call	0x72c0	; 0x72c0 <__cmpsf2>
    5440:	87 fd       	sbrc	r24, 7
    5442:	e4 cf       	rjmp	.-56     	; 0x540c <_ZN5Print10printFloatEdh+0x82>
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	30 e0       	ldi	r19, 0x00	; 0
    5448:	a9 01       	movw	r20, r18
    544a:	c7 01       	movw	r24, r14
    544c:	b6 01       	movw	r22, r12
    544e:	0e 94 60 39 	call	0x72c0	; 0x72c0 <__cmpsf2>
    5452:	87 ff       	sbrs	r24, 7
    5454:	0a c0       	rjmp	.+20     	; 0x546a <_ZN5Print10printFloatEdh+0xe0>
    5456:	6d e2       	ldi	r22, 0x2D	; 45
    5458:	c8 01       	movw	r24, r16
    545a:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN5Print5printEc>
    545e:	ec 01       	movw	r28, r24
    5460:	f7 fa       	bst	r15, 7
    5462:	f0 94       	com	r15
    5464:	f7 f8       	bld	r15, 7
    5466:	f0 94       	com	r15
    5468:	02 c0       	rjmp	.+4      	; 0x546e <_ZN5Print10printFloatEdh+0xe4>
    546a:	c0 e0       	ldi	r28, 0x00	; 0
    546c:	d0 e0       	ldi	r29, 0x00	; 0
    546e:	b1 2c       	mov	r11, r1
    5470:	60 e0       	ldi	r22, 0x00	; 0
    5472:	70 e0       	ldi	r23, 0x00	; 0
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	9f e3       	ldi	r25, 0x3F	; 63
    5478:	7b 14       	cp	r7, r11
    547a:	41 f0       	breq	.+16     	; 0x548c <_ZN5Print10printFloatEdh+0x102>
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e2       	ldi	r20, 0x20	; 32
    5482:	51 e4       	ldi	r21, 0x41	; 65
    5484:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__divsf3>
    5488:	b3 94       	inc	r11
    548a:	f6 cf       	rjmp	.-20     	; 0x5478 <_ZN5Print10printFloatEdh+0xee>
    548c:	a7 01       	movw	r20, r14
    548e:	96 01       	movw	r18, r12
    5490:	0e 94 0d 24 	call	0x481a	; 0x481a <__addsf3>
    5494:	6b 01       	movw	r12, r22
    5496:	7c 01       	movw	r14, r24
    5498:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__fixunssfsi>
    549c:	4b 01       	movw	r8, r22
    549e:	5c 01       	movw	r10, r24
    54a0:	2a e0       	ldi	r18, 0x0A	; 10
    54a2:	ab 01       	movw	r20, r22
    54a4:	bc 01       	movw	r22, r24
    54a6:	c8 01       	movw	r24, r16
    54a8:	0e 94 b9 28 	call	0x5172	; 0x5172 <_ZN5Print11printNumberEmh>
    54ac:	c8 0f       	add	r28, r24
    54ae:	d9 1f       	adc	r29, r25
    54b0:	77 20       	and	r7, r7
    54b2:	c9 f1       	breq	.+114    	; 0x5526 <_ZN5Print10printFloatEdh+0x19c>
    54b4:	c5 01       	movw	r24, r10
    54b6:	b4 01       	movw	r22, r8
    54b8:	0e 94 21 25 	call	0x4a42	; 0x4a42 <__floatunsisf>
    54bc:	9b 01       	movw	r18, r22
    54be:	ac 01       	movw	r20, r24
    54c0:	c7 01       	movw	r24, r14
    54c2:	b6 01       	movw	r22, r12
    54c4:	0e 94 0c 24 	call	0x4818	; 0x4818 <__subsf3>
    54c8:	6b 01       	movw	r12, r22
    54ca:	7c 01       	movw	r14, r24
    54cc:	69 eb       	ldi	r22, 0xB9	; 185
    54ce:	73 e0       	ldi	r23, 0x03	; 3
    54d0:	c8 01       	movw	r24, r16
    54d2:	0e 94 3d 28 	call	0x507a	; 0x507a <_ZN5Print5writeEPKc>
    54d6:	c8 0f       	add	r28, r24
    54d8:	d9 1f       	adc	r29, r25
    54da:	20 e0       	ldi	r18, 0x00	; 0
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	40 e2       	ldi	r20, 0x20	; 32
    54e0:	51 e4       	ldi	r21, 0x41	; 65
    54e2:	c7 01       	movw	r24, r14
    54e4:	b6 01       	movw	r22, r12
    54e6:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <__mulsf3>
    54ea:	4b 01       	movw	r8, r22
    54ec:	5c 01       	movw	r10, r24
    54ee:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <__fixsfsi>
    54f2:	6b 01       	movw	r12, r22
    54f4:	7c 01       	movw	r14, r24
    54f6:	4a e0       	ldi	r20, 0x0A	; 10
    54f8:	50 e0       	ldi	r21, 0x00	; 0
    54fa:	c8 01       	movw	r24, r16
    54fc:	0e 94 9a 29 	call	0x5334	; 0x5334 <_ZN5Print5printEii>
    5500:	c8 0f       	add	r28, r24
    5502:	d9 1f       	adc	r29, r25
    5504:	b6 01       	movw	r22, r12
    5506:	dd 0c       	add	r13, r13
    5508:	88 0b       	sbc	r24, r24
    550a:	99 0b       	sbc	r25, r25
    550c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__floatsisf>
    5510:	9b 01       	movw	r18, r22
    5512:	ac 01       	movw	r20, r24
    5514:	c5 01       	movw	r24, r10
    5516:	b4 01       	movw	r22, r8
    5518:	0e 94 0c 24 	call	0x4818	; 0x4818 <__subsf3>
    551c:	6b 01       	movw	r12, r22
    551e:	7c 01       	movw	r14, r24
    5520:	7a 94       	dec	r7
    5522:	71 10       	cpse	r7, r1
    5524:	da cf       	rjmp	.-76     	; 0x54da <_ZN5Print10printFloatEdh+0x150>
    5526:	ce 01       	movw	r24, r28
    5528:	df 91       	pop	r29
    552a:	cf 91       	pop	r28
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	ff 90       	pop	r15
    5532:	ef 90       	pop	r14
    5534:	df 90       	pop	r13
    5536:	cf 90       	pop	r12
    5538:	bf 90       	pop	r11
    553a:	af 90       	pop	r10
    553c:	9f 90       	pop	r9
    553e:	8f 90       	pop	r8
    5540:	7f 90       	pop	r7
    5542:	08 95       	ret

00005544 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    5544:	0f 93       	push	r16
    5546:	1f 93       	push	r17
    5548:	cf 93       	push	r28
    554a:	df 93       	push	r29
    554c:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    554e:	0e 94 c5 29 	call	0x538a	; 0x538a <_ZN5Print10printFloatEdh>
    5552:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    5554:	ce 01       	movw	r24, r28
    5556:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
  return n;
}
    555a:	80 0f       	add	r24, r16
    555c:	91 1f       	adc	r25, r17
    555e:	df 91       	pop	r29
    5560:	cf 91       	pop	r28
    5562:	1f 91       	pop	r17
    5564:	0f 91       	pop	r16
    5566:	08 95       	ret

00005568 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5568:	1f 92       	push	r1
    556a:	0f 92       	push	r0
    556c:	0f b6       	in	r0, 0x3f	; 63
    556e:	0f 92       	push	r0
    5570:	11 24       	eor	r1, r1
    5572:	2f 93       	push	r18
    5574:	3f 93       	push	r19
    5576:	8f 93       	push	r24
    5578:	9f 93       	push	r25
    557a:	af 93       	push	r26
    557c:	bf 93       	push	r27
    557e:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <timer0_millis>
    5582:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <timer0_millis+0x1>
    5586:	a0 91 05 08 	lds	r26, 0x0805	; 0x800805 <timer0_millis+0x2>
    558a:	b0 91 06 08 	lds	r27, 0x0806	; 0x800806 <timer0_millis+0x3>
    558e:	30 91 02 08 	lds	r19, 0x0802	; 0x800802 <timer0_fract>
    5592:	23 e0       	ldi	r18, 0x03	; 3
    5594:	23 0f       	add	r18, r19
    5596:	2d 37       	cpi	r18, 0x7D	; 125
    5598:	20 f4       	brcc	.+8      	; 0x55a2 <__vector_16+0x3a>
    559a:	01 96       	adiw	r24, 0x01	; 1
    559c:	a1 1d       	adc	r26, r1
    559e:	b1 1d       	adc	r27, r1
    55a0:	05 c0       	rjmp	.+10     	; 0x55ac <__vector_16+0x44>
    55a2:	26 e8       	ldi	r18, 0x86	; 134
    55a4:	23 0f       	add	r18, r19
    55a6:	02 96       	adiw	r24, 0x02	; 2
    55a8:	a1 1d       	adc	r26, r1
    55aa:	b1 1d       	adc	r27, r1
    55ac:	20 93 02 08 	sts	0x0802, r18	; 0x800802 <timer0_fract>
    55b0:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <timer0_millis>
    55b4:	90 93 04 08 	sts	0x0804, r25	; 0x800804 <timer0_millis+0x1>
    55b8:	a0 93 05 08 	sts	0x0805, r26	; 0x800805 <timer0_millis+0x2>
    55bc:	b0 93 06 08 	sts	0x0806, r27	; 0x800806 <timer0_millis+0x3>
    55c0:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <timer0_overflow_count>
    55c4:	90 91 08 08 	lds	r25, 0x0808	; 0x800808 <timer0_overflow_count+0x1>
    55c8:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <timer0_overflow_count+0x2>
    55cc:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <timer0_overflow_count+0x3>
    55d0:	01 96       	adiw	r24, 0x01	; 1
    55d2:	a1 1d       	adc	r26, r1
    55d4:	b1 1d       	adc	r27, r1
    55d6:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <timer0_overflow_count>
    55da:	90 93 08 08 	sts	0x0808, r25	; 0x800808 <timer0_overflow_count+0x1>
    55de:	a0 93 09 08 	sts	0x0809, r26	; 0x800809 <timer0_overflow_count+0x2>
    55e2:	b0 93 0a 08 	sts	0x080A, r27	; 0x80080a <timer0_overflow_count+0x3>
    55e6:	bf 91       	pop	r27
    55e8:	af 91       	pop	r26
    55ea:	9f 91       	pop	r25
    55ec:	8f 91       	pop	r24
    55ee:	3f 91       	pop	r19
    55f0:	2f 91       	pop	r18
    55f2:	0f 90       	pop	r0
    55f4:	0f be       	out	0x3f, r0	; 63
    55f6:	0f 90       	pop	r0
    55f8:	1f 90       	pop	r1
    55fa:	18 95       	reti

000055fc <millis>:
    55fc:	2f b7       	in	r18, 0x3f	; 63
    55fe:	f8 94       	cli
    5600:	60 91 03 08 	lds	r22, 0x0803	; 0x800803 <timer0_millis>
    5604:	70 91 04 08 	lds	r23, 0x0804	; 0x800804 <timer0_millis+0x1>
    5608:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <timer0_millis+0x2>
    560c:	90 91 06 08 	lds	r25, 0x0806	; 0x800806 <timer0_millis+0x3>
    5610:	2f bf       	out	0x3f, r18	; 63
    5612:	08 95       	ret

00005614 <micros>:
    5614:	3f b7       	in	r19, 0x3f	; 63
    5616:	f8 94       	cli
    5618:	80 91 07 08 	lds	r24, 0x0807	; 0x800807 <timer0_overflow_count>
    561c:	90 91 08 08 	lds	r25, 0x0808	; 0x800808 <timer0_overflow_count+0x1>
    5620:	a0 91 09 08 	lds	r26, 0x0809	; 0x800809 <timer0_overflow_count+0x2>
    5624:	b0 91 0a 08 	lds	r27, 0x080A	; 0x80080a <timer0_overflow_count+0x3>
    5628:	26 b5       	in	r18, 0x26	; 38
    562a:	a8 9b       	sbis	0x15, 0	; 21
    562c:	05 c0       	rjmp	.+10     	; 0x5638 <micros+0x24>
    562e:	2f 3f       	cpi	r18, 0xFF	; 255
    5630:	19 f0       	breq	.+6      	; 0x5638 <micros+0x24>
    5632:	01 96       	adiw	r24, 0x01	; 1
    5634:	a1 1d       	adc	r26, r1
    5636:	b1 1d       	adc	r27, r1
    5638:	3f bf       	out	0x3f, r19	; 63
    563a:	ba 2f       	mov	r27, r26
    563c:	a9 2f       	mov	r26, r25
    563e:	98 2f       	mov	r25, r24
    5640:	88 27       	eor	r24, r24
    5642:	82 0f       	add	r24, r18
    5644:	91 1d       	adc	r25, r1
    5646:	a1 1d       	adc	r26, r1
    5648:	b1 1d       	adc	r27, r1
    564a:	bc 01       	movw	r22, r24
    564c:	cd 01       	movw	r24, r26
    564e:	42 e0       	ldi	r20, 0x02	; 2
    5650:	66 0f       	add	r22, r22
    5652:	77 1f       	adc	r23, r23
    5654:	88 1f       	adc	r24, r24
    5656:	99 1f       	adc	r25, r25
    5658:	4a 95       	dec	r20
    565a:	d1 f7       	brne	.-12     	; 0x5650 <micros+0x3c>
    565c:	08 95       	ret

0000565e <delay>:
    565e:	8f 92       	push	r8
    5660:	9f 92       	push	r9
    5662:	af 92       	push	r10
    5664:	bf 92       	push	r11
    5666:	cf 92       	push	r12
    5668:	df 92       	push	r13
    566a:	ef 92       	push	r14
    566c:	ff 92       	push	r15
    566e:	6b 01       	movw	r12, r22
    5670:	7c 01       	movw	r14, r24
    5672:	0e 94 0a 2b 	call	0x5614	; 0x5614 <micros>
    5676:	4b 01       	movw	r8, r22
    5678:	5c 01       	movw	r10, r24
    567a:	c1 14       	cp	r12, r1
    567c:	d1 04       	cpc	r13, r1
    567e:	e1 04       	cpc	r14, r1
    5680:	f1 04       	cpc	r15, r1
    5682:	01 f1       	breq	.+64     	; 0x56c4 <delay+0x66>
    5684:	0e 94 10 39 	call	0x7220	; 0x7220 <yield>
    5688:	0e 94 0a 2b 	call	0x5614	; 0x5614 <micros>
    568c:	dc 01       	movw	r26, r24
    568e:	cb 01       	movw	r24, r22
    5690:	88 19       	sub	r24, r8
    5692:	99 09       	sbc	r25, r9
    5694:	aa 09       	sbc	r26, r10
    5696:	bb 09       	sbc	r27, r11
    5698:	88 3e       	cpi	r24, 0xE8	; 232
    569a:	93 40       	sbci	r25, 0x03	; 3
    569c:	a1 05       	cpc	r26, r1
    569e:	b1 05       	cpc	r27, r1
    56a0:	60 f3       	brcs	.-40     	; 0x567a <delay+0x1c>
    56a2:	21 e0       	ldi	r18, 0x01	; 1
    56a4:	c2 1a       	sub	r12, r18
    56a6:	d1 08       	sbc	r13, r1
    56a8:	e1 08       	sbc	r14, r1
    56aa:	f1 08       	sbc	r15, r1
    56ac:	88 ee       	ldi	r24, 0xE8	; 232
    56ae:	88 0e       	add	r8, r24
    56b0:	83 e0       	ldi	r24, 0x03	; 3
    56b2:	98 1e       	adc	r9, r24
    56b4:	a1 1c       	adc	r10, r1
    56b6:	b1 1c       	adc	r11, r1
    56b8:	c1 14       	cp	r12, r1
    56ba:	d1 04       	cpc	r13, r1
    56bc:	e1 04       	cpc	r14, r1
    56be:	f1 04       	cpc	r15, r1
    56c0:	19 f7       	brne	.-58     	; 0x5688 <delay+0x2a>
    56c2:	db cf       	rjmp	.-74     	; 0x567a <delay+0x1c>
    56c4:	ff 90       	pop	r15
    56c6:	ef 90       	pop	r14
    56c8:	df 90       	pop	r13
    56ca:	cf 90       	pop	r12
    56cc:	bf 90       	pop	r11
    56ce:	af 90       	pop	r10
    56d0:	9f 90       	pop	r9
    56d2:	8f 90       	pop	r8
    56d4:	08 95       	ret

000056d6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    56d6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    56d8:	84 b5       	in	r24, 0x24	; 36
    56da:	82 60       	ori	r24, 0x02	; 2
    56dc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    56de:	84 b5       	in	r24, 0x24	; 36
    56e0:	81 60       	ori	r24, 0x01	; 1
    56e2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    56e4:	85 b5       	in	r24, 0x25	; 37
    56e6:	82 60       	ori	r24, 0x02	; 2
    56e8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    56ea:	85 b5       	in	r24, 0x25	; 37
    56ec:	81 60       	ori	r24, 0x01	; 1
    56ee:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    56f0:	ee e6       	ldi	r30, 0x6E	; 110
    56f2:	f0 e0       	ldi	r31, 0x00	; 0
    56f4:	80 81       	ld	r24, Z
    56f6:	81 60       	ori	r24, 0x01	; 1
    56f8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    56fa:	e1 e8       	ldi	r30, 0x81	; 129
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5700:	80 81       	ld	r24, Z
    5702:	82 60       	ori	r24, 0x02	; 2
    5704:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5706:	80 81       	ld	r24, Z
    5708:	81 60       	ori	r24, 0x01	; 1
    570a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    570c:	e0 e8       	ldi	r30, 0x80	; 128
    570e:	f0 e0       	ldi	r31, 0x00	; 0
    5710:	80 81       	ld	r24, Z
    5712:	81 60       	ori	r24, 0x01	; 1
    5714:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5716:	e1 eb       	ldi	r30, 0xB1	; 177
    5718:	f0 e0       	ldi	r31, 0x00	; 0
    571a:	80 81       	ld	r24, Z
    571c:	84 60       	ori	r24, 0x04	; 4
    571e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5720:	e0 eb       	ldi	r30, 0xB0	; 176
    5722:	f0 e0       	ldi	r31, 0x00	; 0
    5724:	80 81       	ld	r24, Z
    5726:	81 60       	ori	r24, 0x01	; 1
    5728:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    572a:	ea e7       	ldi	r30, 0x7A	; 122
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	80 81       	ld	r24, Z
    5730:	84 60       	ori	r24, 0x04	; 4
    5732:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5734:	80 81       	ld	r24, Z
    5736:	82 60       	ori	r24, 0x02	; 2
    5738:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    573a:	80 81       	ld	r24, Z
    573c:	81 60       	ori	r24, 0x01	; 1
    573e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5740:	80 81       	ld	r24, Z
    5742:	80 68       	ori	r24, 0x80	; 128
    5744:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5746:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    574a:	08 95       	ret

0000574c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    574c:	8e 30       	cpi	r24, 0x0E	; 14
    574e:	08 f0       	brcs	.+2      	; 0x5752 <analogRead+0x6>
    5750:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5752:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <analog_reference>
    5756:	90 e4       	ldi	r25, 0x40	; 64
    5758:	29 9f       	mul	r18, r25
    575a:	90 01       	movw	r18, r0
    575c:	11 24       	eor	r1, r1
    575e:	87 70       	andi	r24, 0x07	; 7
    5760:	82 2b       	or	r24, r18
    5762:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5766:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    576a:	80 64       	ori	r24, 0x40	; 64
    576c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    5770:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5774:	86 fd       	sbrc	r24, 6
    5776:	fc cf       	rjmp	.-8      	; 0x5770 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5778:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    577c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    5780:	90 e0       	ldi	r25, 0x00	; 0
}
    5782:	92 2b       	or	r25, r18
    5784:	08 95       	ret

00005786 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5786:	83 30       	cpi	r24, 0x03	; 3
    5788:	81 f0       	breq	.+32     	; 0x57aa <turnOffPWM+0x24>
    578a:	28 f4       	brcc	.+10     	; 0x5796 <turnOffPWM+0x10>
    578c:	81 30       	cpi	r24, 0x01	; 1
    578e:	99 f0       	breq	.+38     	; 0x57b6 <turnOffPWM+0x30>
    5790:	82 30       	cpi	r24, 0x02	; 2
    5792:	a1 f0       	breq	.+40     	; 0x57bc <turnOffPWM+0x36>
    5794:	08 95       	ret
    5796:	87 30       	cpi	r24, 0x07	; 7
    5798:	a9 f0       	breq	.+42     	; 0x57c4 <turnOffPWM+0x3e>
    579a:	88 30       	cpi	r24, 0x08	; 8
    579c:	b9 f0       	breq	.+46     	; 0x57cc <turnOffPWM+0x46>
    579e:	84 30       	cpi	r24, 0x04	; 4
    57a0:	d1 f4       	brne	.+52     	; 0x57d6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    57a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57a6:	8f 7d       	andi	r24, 0xDF	; 223
    57a8:	03 c0       	rjmp	.+6      	; 0x57b0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    57aa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57ae:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    57b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57b4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    57b6:	84 b5       	in	r24, 0x24	; 36
    57b8:	8f 77       	andi	r24, 0x7F	; 127
    57ba:	02 c0       	rjmp	.+4      	; 0x57c0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    57bc:	84 b5       	in	r24, 0x24	; 36
    57be:	8f 7d       	andi	r24, 0xDF	; 223
    57c0:	84 bd       	out	0x24, r24	; 36
    57c2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    57c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57c8:	8f 77       	andi	r24, 0x7F	; 127
    57ca:	03 c0       	rjmp	.+6      	; 0x57d2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    57cc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57d0:	8f 7d       	andi	r24, 0xDF	; 223
    57d2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57d6:	08 95       	ret

000057d8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    57d8:	cf 93       	push	r28
    57da:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	fc 01       	movw	r30, r24
    57e0:	e8 54       	subi	r30, 0x48	; 72
    57e2:	fc 4f       	sbci	r31, 0xFC	; 252
    57e4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    57e6:	fc 01       	movw	r30, r24
    57e8:	e4 53       	subi	r30, 0x34	; 52
    57ea:	fc 4f       	sbci	r31, 0xFC	; 252
    57ec:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    57ee:	88 23       	and	r24, r24
    57f0:	61 f1       	breq	.+88     	; 0x584a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	88 0f       	add	r24, r24
    57f6:	99 1f       	adc	r25, r25
    57f8:	fc 01       	movw	r30, r24
    57fa:	ec 50       	subi	r30, 0x0C	; 12
    57fc:	fc 4f       	sbci	r31, 0xFC	; 252
    57fe:	c5 91       	lpm	r28, Z+
    5800:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5802:	fc 01       	movw	r30, r24
    5804:	e6 51       	subi	r30, 0x16	; 22
    5806:	fc 4f       	sbci	r31, 0xFC	; 252
    5808:	a5 91       	lpm	r26, Z+
    580a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    580c:	61 11       	cpse	r22, r1
    580e:	09 c0       	rjmp	.+18     	; 0x5822 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5810:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5812:	f8 94       	cli
		*reg &= ~bit;
    5814:	88 81       	ld	r24, Y
    5816:	20 95       	com	r18
    5818:	82 23       	and	r24, r18
    581a:	88 83       	st	Y, r24
		*out &= ~bit;
    581c:	ec 91       	ld	r30, X
    581e:	2e 23       	and	r18, r30
    5820:	0b c0       	rjmp	.+22     	; 0x5838 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5822:	62 30       	cpi	r22, 0x02	; 2
    5824:	61 f4       	brne	.+24     	; 0x583e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5826:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5828:	f8 94       	cli
		*reg &= ~bit;
    582a:	88 81       	ld	r24, Y
    582c:	32 2f       	mov	r19, r18
    582e:	30 95       	com	r19
    5830:	83 23       	and	r24, r19
    5832:	88 83       	st	Y, r24
		*out |= bit;
    5834:	ec 91       	ld	r30, X
    5836:	2e 2b       	or	r18, r30
    5838:	2c 93       	st	X, r18
		SREG = oldSREG;
    583a:	9f bf       	out	0x3f, r25	; 63
    583c:	06 c0       	rjmp	.+12     	; 0x584a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    583e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5840:	f8 94       	cli
		*reg |= bit;
    5842:	e8 81       	ld	r30, Y
    5844:	2e 2b       	or	r18, r30
    5846:	28 83       	st	Y, r18
		SREG = oldSREG;
    5848:	8f bf       	out	0x3f, r24	; 63
	}
}
    584a:	df 91       	pop	r29
    584c:	cf 91       	pop	r28
    584e:	08 95       	ret

00005850 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5850:	1f 93       	push	r17
    5852:	cf 93       	push	r28
    5854:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5856:	28 2f       	mov	r18, r24
    5858:	30 e0       	ldi	r19, 0x00	; 0
    585a:	f9 01       	movw	r30, r18
    585c:	ec 55       	subi	r30, 0x5C	; 92
    585e:	fc 4f       	sbci	r31, 0xFC	; 252
    5860:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5862:	f9 01       	movw	r30, r18
    5864:	e8 54       	subi	r30, 0x48	; 72
    5866:	fc 4f       	sbci	r31, 0xFC	; 252
    5868:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    586a:	f9 01       	movw	r30, r18
    586c:	e4 53       	subi	r30, 0x34	; 52
    586e:	fc 4f       	sbci	r31, 0xFC	; 252
    5870:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5872:	cc 23       	and	r28, r28
    5874:	c1 f0       	breq	.+48     	; 0x58a6 <digitalWrite+0x56>
    5876:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5878:	81 11       	cpse	r24, r1
    587a:	0e 94 c3 2b 	call	0x5786	; 0x5786 <turnOffPWM>

	out = portOutputRegister(port);
    587e:	ec 2f       	mov	r30, r28
    5880:	f0 e0       	ldi	r31, 0x00	; 0
    5882:	ee 0f       	add	r30, r30
    5884:	ff 1f       	adc	r31, r31
    5886:	e6 51       	subi	r30, 0x16	; 22
    5888:	fc 4f       	sbci	r31, 0xFC	; 252
    588a:	a5 91       	lpm	r26, Z+
    588c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    588e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5890:	f8 94       	cli

	if (val == LOW) {
    5892:	11 11       	cpse	r17, r1
    5894:	04 c0       	rjmp	.+8      	; 0x589e <digitalWrite+0x4e>
		*out &= ~bit;
    5896:	8c 91       	ld	r24, X
    5898:	d0 95       	com	r29
    589a:	d8 23       	and	r29, r24
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    589e:	ec 91       	ld	r30, X
    58a0:	de 2b       	or	r29, r30
    58a2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    58a4:	9f bf       	out	0x3f, r25	; 63
}
    58a6:	df 91       	pop	r29
    58a8:	cf 91       	pop	r28
    58aa:	1f 91       	pop	r17
    58ac:	08 95       	ret

000058ae <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    58ae:	fc 01       	movw	r30, r24
    58b0:	80 81       	ld	r24, Z
    58b2:	91 81       	ldd	r25, Z+1	; 0x01
    58b4:	0c 94 ed 3a 	jmp	0x75da	; 0x75da <free>

000058b8 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    58b8:	cf 93       	push	r28
    58ba:	df 93       	push	r29
    58bc:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    58be:	88 81       	ld	r24, Y
    58c0:	99 81       	ldd	r25, Y+1	; 0x01
    58c2:	00 97       	sbiw	r24, 0x00	; 0
    58c4:	11 f0       	breq	.+4      	; 0x58ca <_ZN6String10invalidateEv+0x12>
    58c6:	0e 94 ed 3a 	call	0x75da	; 0x75da <free>
	buffer = NULL;
    58ca:	19 82       	std	Y+1, r1	; 0x01
    58cc:	18 82       	st	Y, r1
	capacity = len = 0;
    58ce:	1d 82       	std	Y+5, r1	; 0x05
    58d0:	1c 82       	std	Y+4, r1	; 0x04
    58d2:	1b 82       	std	Y+3, r1	; 0x03
    58d4:	1a 82       	std	Y+2, r1	; 0x02
}
    58d6:	df 91       	pop	r29
    58d8:	cf 91       	pop	r28
    58da:	08 95       	ret

000058dc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    58dc:	0f 93       	push	r16
    58de:	1f 93       	push	r17
    58e0:	cf 93       	push	r28
    58e2:	df 93       	push	r29
    58e4:	ec 01       	movw	r28, r24
    58e6:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    58e8:	6f 5f       	subi	r22, 0xFF	; 255
    58ea:	7f 4f       	sbci	r23, 0xFF	; 255
    58ec:	88 81       	ld	r24, Y
    58ee:	99 81       	ldd	r25, Y+1	; 0x01
    58f0:	0e 94 76 3b 	call	0x76ec	; 0x76ec <realloc>
	if (newbuffer) {
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	31 f0       	breq	.+12     	; 0x5904 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    58f8:	99 83       	std	Y+1, r25	; 0x01
    58fa:	88 83       	st	Y, r24
		capacity = maxStrLen;
    58fc:	1b 83       	std	Y+3, r17	; 0x03
    58fe:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    5900:	81 e0       	ldi	r24, 0x01	; 1
    5902:	01 c0       	rjmp	.+2      	; 0x5906 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    5904:	80 e0       	ldi	r24, 0x00	; 0
}
    5906:	df 91       	pop	r29
    5908:	cf 91       	pop	r28
    590a:	1f 91       	pop	r17
    590c:	0f 91       	pop	r16
    590e:	08 95       	ret

00005910 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    5916:	88 81       	ld	r24, Y
    5918:	99 81       	ldd	r25, Y+1	; 0x01
    591a:	89 2b       	or	r24, r25
    591c:	29 f0       	breq	.+10     	; 0x5928 <_ZN6String7reserveEj+0x18>
    591e:	8a 81       	ldd	r24, Y+2	; 0x02
    5920:	9b 81       	ldd	r25, Y+3	; 0x03
    5922:	86 17       	cp	r24, r22
    5924:	97 07       	cpc	r25, r23
    5926:	60 f4       	brcc	.+24     	; 0x5940 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    5928:	ce 01       	movw	r24, r28
    592a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN6String12changeBufferEj>
    592e:	88 23       	and	r24, r24
    5930:	41 f0       	breq	.+16     	; 0x5942 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    5932:	8c 81       	ldd	r24, Y+4	; 0x04
    5934:	9d 81       	ldd	r25, Y+5	; 0x05
    5936:	89 2b       	or	r24, r25
    5938:	19 f4       	brne	.+6      	; 0x5940 <_ZN6String7reserveEj+0x30>
    593a:	e8 81       	ld	r30, Y
    593c:	f9 81       	ldd	r31, Y+1	; 0x01
    593e:	10 82       	st	Z, r1
    5940:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    5942:	df 91       	pop	r29
    5944:	cf 91       	pop	r28
    5946:	08 95       	ret

00005948 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    5948:	ef 92       	push	r14
    594a:	ff 92       	push	r15
    594c:	0f 93       	push	r16
    594e:	1f 93       	push	r17
    5950:	cf 93       	push	r28
    5952:	df 93       	push	r29
    5954:	ec 01       	movw	r28, r24
    5956:	7b 01       	movw	r14, r22
    5958:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    595a:	ba 01       	movw	r22, r20
    595c:	0e 94 88 2c 	call	0x5910	; 0x5910 <_ZN6String7reserveEj>
    5960:	81 11       	cpse	r24, r1
    5962:	04 c0       	rjmp	.+8      	; 0x596c <_ZN6String4copyEPKcj+0x24>
		invalidate();
    5964:	ce 01       	movw	r24, r28
    5966:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_ZN6String10invalidateEv>
		return *this;
    596a:	07 c0       	rjmp	.+14     	; 0x597a <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    596c:	1d 83       	std	Y+5, r17	; 0x05
    596e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    5970:	b7 01       	movw	r22, r14
    5972:	88 81       	ld	r24, Y
    5974:	99 81       	ldd	r25, Y+1	; 0x01
    5976:	0e 94 a3 3c 	call	0x7946	; 0x7946 <strcpy>
	return *this;
}
    597a:	ce 01       	movw	r24, r28
    597c:	df 91       	pop	r29
    597e:	cf 91       	pop	r28
    5980:	1f 91       	pop	r17
    5982:	0f 91       	pop	r16
    5984:	ff 90       	pop	r15
    5986:	ef 90       	pop	r14
    5988:	08 95       	ret

0000598a <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    598a:	fc 01       	movw	r30, r24
    598c:	11 82       	std	Z+1, r1	; 0x01
    598e:	10 82       	st	Z, r1
	capacity = 0;
    5990:	13 82       	std	Z+3, r1	; 0x03
    5992:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5994:	15 82       	std	Z+5, r1	; 0x05
    5996:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    5998:	61 15       	cp	r22, r1
    599a:	71 05       	cpc	r23, r1
    599c:	51 f0       	breq	.+20     	; 0x59b2 <_ZN6StringC1EPKc+0x28>
    599e:	fb 01       	movw	r30, r22
    59a0:	01 90       	ld	r0, Z+
    59a2:	00 20       	and	r0, r0
    59a4:	e9 f7       	brne	.-6      	; 0x59a0 <_ZN6StringC1EPKc+0x16>
    59a6:	31 97       	sbiw	r30, 0x01	; 1
    59a8:	af 01       	movw	r20, r30
    59aa:	46 1b       	sub	r20, r22
    59ac:	57 0b       	sbc	r21, r23
    59ae:	0c 94 a4 2c 	jmp	0x5948	; 0x5948 <_ZN6String4copyEPKcj>
    59b2:	08 95       	ret

000059b4 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    59b4:	88 5e       	subi	r24, 0xE8	; 232
    59b6:	9e 4f       	sbci	r25, 0xFE	; 254
    59b8:	dc 01       	movw	r26, r24
    59ba:	8d 91       	ld	r24, X+
    59bc:	9c 91       	ld	r25, X
    59be:	dc 01       	movw	r26, r24
    59c0:	ed 91       	ld	r30, X+
    59c2:	fc 91       	ld	r31, X
    59c4:	04 80       	ldd	r0, Z+4	; 0x04
    59c6:	f5 81       	ldd	r31, Z+5	; 0x05
    59c8:	e0 2d       	mov	r30, r0
    59ca:	09 94       	ijmp

000059cc <_ZN13Adafruit_FONA5writeEh>:
    59cc:	88 5e       	subi	r24, 0xE8	; 232
    59ce:	9e 4f       	sbci	r25, 0xFE	; 254
    59d0:	dc 01       	movw	r26, r24
    59d2:	8d 91       	ld	r24, X+
    59d4:	9c 91       	ld	r25, X
    59d6:	dc 01       	movw	r26, r24
    59d8:	ed 91       	ld	r30, X+
    59da:	fc 91       	ld	r31, X
    59dc:	01 90       	ld	r0, Z+
    59de:	f0 81       	ld	r31, Z
    59e0:	e0 2d       	mov	r30, r0
    59e2:	09 94       	ijmp

000059e4 <_ZN13Adafruit_FONA4readEv>:
    59e4:	88 5e       	subi	r24, 0xE8	; 232
    59e6:	9e 4f       	sbci	r25, 0xFE	; 254
    59e8:	dc 01       	movw	r26, r24
    59ea:	8d 91       	ld	r24, X+
    59ec:	9c 91       	ld	r25, X
    59ee:	dc 01       	movw	r26, r24
    59f0:	ed 91       	ld	r30, X+
    59f2:	fc 91       	ld	r31, X
    59f4:	06 80       	ldd	r0, Z+6	; 0x06
    59f6:	f7 81       	ldd	r31, Z+7	; 0x07
    59f8:	e0 2d       	mov	r30, r0
    59fa:	09 94       	ijmp

000059fc <_ZN13Adafruit_FONA4peekEv>:
    59fc:	88 5e       	subi	r24, 0xE8	; 232
    59fe:	9e 4f       	sbci	r25, 0xFE	; 254
    5a00:	dc 01       	movw	r26, r24
    5a02:	8d 91       	ld	r24, X+
    5a04:	9c 91       	ld	r25, X
    5a06:	dc 01       	movw	r26, r24
    5a08:	ed 91       	ld	r30, X+
    5a0a:	fc 91       	ld	r31, X
    5a0c:	00 84       	ldd	r0, Z+8	; 0x08
    5a0e:	f1 85       	ldd	r31, Z+9	; 0x09
    5a10:	e0 2d       	mov	r30, r0
    5a12:	09 94       	ijmp

00005a14 <_ZN13Adafruit_FONA5flushEv>:
    5a14:	88 5e       	subi	r24, 0xE8	; 232
    5a16:	9e 4f       	sbci	r25, 0xFE	; 254
    5a18:	dc 01       	movw	r26, r24
    5a1a:	8d 91       	ld	r24, X+
    5a1c:	9c 91       	ld	r25, X
    5a1e:	dc 01       	movw	r26, r24
    5a20:	ed 91       	ld	r30, X+
    5a22:	fc 91       	ld	r31, X
    5a24:	02 84       	ldd	r0, Z+10	; 0x0a
    5a26:	f3 85       	ldd	r31, Z+11	; 0x0b
    5a28:	e0 2d       	mov	r30, r0
    5a2a:	09 94       	ijmp

00005a2c <_ZN13Adafruit_FONAC1Ea>:
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	13 82       	std	Z+3, r1	; 0x03
    5a30:	12 82       	std	Z+2, r1	; 0x02
    5a32:	88 ee       	ldi	r24, 0xE8	; 232
    5a34:	93 e0       	ldi	r25, 0x03	; 3
    5a36:	a0 e0       	ldi	r26, 0x00	; 0
    5a38:	b0 e0       	ldi	r27, 0x00	; 0
    5a3a:	84 83       	std	Z+4, r24	; 0x04
    5a3c:	95 83       	std	Z+5, r25	; 0x05
    5a3e:	a6 83       	std	Z+6, r26	; 0x06
    5a40:	b7 83       	std	Z+7, r27	; 0x07
    5a42:	88 e1       	ldi	r24, 0x18	; 24
    5a44:	94 e0       	ldi	r25, 0x04	; 4
    5a46:	91 83       	std	Z+1, r25	; 0x01
    5a48:	80 83       	st	Z, r24
    5a4a:	64 87       	std	Z+12, r22	; 0x0c
    5a4c:	df 01       	movw	r26, r30
    5a4e:	a3 5f       	subi	r26, 0xF3	; 243
    5a50:	be 4f       	sbci	r27, 0xFE	; 254
    5a52:	88 e3       	ldi	r24, 0x38	; 56
    5a54:	97 e0       	ldi	r25, 0x07	; 7
    5a56:	11 96       	adiw	r26, 0x01	; 1
    5a58:	9c 93       	st	X, r25
    5a5a:	8e 93       	st	-X, r24
    5a5c:	12 96       	adiw	r26, 0x02	; 2
    5a5e:	11 96       	adiw	r26, 0x01	; 1
    5a60:	1c 92       	st	X, r1
    5a62:	1e 92       	st	-X, r1
    5a64:	12 96       	adiw	r26, 0x02	; 2
    5a66:	11 96       	adiw	r26, 0x01	; 1
    5a68:	1c 92       	st	X, r1
    5a6a:	1e 92       	st	-X, r1
    5a6c:	17 96       	adiw	r26, 0x07	; 7
    5a6e:	11 96       	adiw	r26, 0x01	; 1
    5a70:	1c 92       	st	X, r1
    5a72:	1e 92       	st	-X, r1
    5a74:	15 97       	sbiw	r26, 0x05	; 5
    5a76:	1c 92       	st	X, r1
    5a78:	11 96       	adiw	r26, 0x01	; 1
    5a7a:	83 e3       	ldi	r24, 0x33	; 51
    5a7c:	97 e0       	ldi	r25, 0x07	; 7
    5a7e:	8d 93       	st	X+, r24
    5a80:	9c 93       	st	X, r25
    5a82:	ea 5e       	subi	r30, 0xEA	; 234
    5a84:	fe 4f       	sbci	r31, 0xFE	; 254
    5a86:	80 e3       	ldi	r24, 0x30	; 48
    5a88:	97 e0       	ldi	r25, 0x07	; 7
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	80 83       	st	Z, r24
    5a8e:	08 95       	ret

00005a90 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    5a90:	fc 01       	movw	r30, r24
    5a92:	e3 5f       	subi	r30, 0xF3	; 243
    5a94:	fe 4f       	sbci	r31, 0xFE	; 254
    5a96:	71 83       	std	Z+1, r23	; 0x01
    5a98:	60 83       	st	Z, r22
    5a9a:	32 96       	adiw	r30, 0x02	; 2
    5a9c:	51 83       	std	Z+1, r21	; 0x01
    5a9e:	40 83       	st	Z, r20
    5aa0:	32 96       	adiw	r30, 0x02	; 2
    5aa2:	31 83       	std	Z+1, r19	; 0x01
    5aa4:	20 83       	st	Z, r18
    5aa6:	08 95       	ret

00005aa8 <_ZN13Adafruit_FONA10flushInputEv>:
    5aa8:	0f 93       	push	r16
    5aaa:	1f 93       	push	r17
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	ec 01       	movw	r28, r24
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	8c 01       	movw	r16, r24
    5ab8:	0f 5f       	subi	r16, 0xFF	; 255
    5aba:	1f 4f       	sbci	r17, 0xFF	; 255
    5abc:	88 97       	sbiw	r24, 0x28	; 40
    5abe:	d8 f4       	brcc	.+54     	; 0x5af6 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    5ac0:	e8 81       	ld	r30, Y
    5ac2:	f9 81       	ldd	r31, Y+1	; 0x01
    5ac4:	04 80       	ldd	r0, Z+4	; 0x04
    5ac6:	f5 81       	ldd	r31, Z+5	; 0x05
    5ac8:	e0 2d       	mov	r30, r0
    5aca:	ce 01       	movw	r24, r28
    5acc:	09 95       	icall
    5ace:	89 2b       	or	r24, r25
    5ad0:	51 f0       	breq	.+20     	; 0x5ae6 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    5ad2:	e8 81       	ld	r30, Y
    5ad4:	f9 81       	ldd	r31, Y+1	; 0x01
    5ad6:	06 80       	ldd	r0, Z+6	; 0x06
    5ad8:	f7 81       	ldd	r31, Z+7	; 0x07
    5ada:	e0 2d       	mov	r30, r0
    5adc:	ce 01       	movw	r24, r28
    5ade:	09 95       	icall
    5ae0:	00 e0       	ldi	r16, 0x00	; 0
    5ae2:	10 e0       	ldi	r17, 0x00	; 0
    5ae4:	ed cf       	rjmp	.-38     	; 0x5ac0 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    5ae6:	61 e0       	ldi	r22, 0x01	; 1
    5ae8:	70 e0       	ldi	r23, 0x00	; 0
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    5af2:	c8 01       	movw	r24, r16
    5af4:	e0 cf       	rjmp	.-64     	; 0x5ab6 <_ZN13Adafruit_FONA10flushInputEv+0xe>
    5af6:	df 91       	pop	r29
    5af8:	cf 91       	pop	r28
    5afa:	1f 91       	pop	r17
    5afc:	0f 91       	pop	r16
    5afe:	08 95       	ret

00005b00 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    5b00:	ff 92       	push	r15
    5b02:	0f 93       	push	r16
    5b04:	1f 93       	push	r17
    5b06:	cf 93       	push	r28
    5b08:	df 93       	push	r29
    5b0a:	ec 01       	movw	r28, r24
    5b0c:	8b 01       	movw	r16, r22
    5b0e:	f4 2e       	mov	r15, r20
    5b10:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    5b14:	6c e0       	ldi	r22, 0x0C	; 12
    5b16:	75 e0       	ldi	r23, 0x05	; 5
    5b18:	85 e6       	ldi	r24, 0x65	; 101
    5b1a:	97 e0       	ldi	r25, 0x07	; 7
    5b1c:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5b20:	6e ef       	ldi	r22, 0xFE	; 254
    5b22:	74 e0       	ldi	r23, 0x04	; 4
    5b24:	85 e6       	ldi	r24, 0x65	; 101
    5b26:	97 e0       	ldi	r25, 0x07	; 7
    5b28:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5b2c:	b8 01       	movw	r22, r16
    5b2e:	85 e6       	ldi	r24, 0x65	; 101
    5b30:	97 e0       	ldi	r25, 0x07	; 7
    5b32:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5b36:	62 e2       	ldi	r22, 0x22	; 34
    5b38:	85 e6       	ldi	r24, 0x65	; 101
    5b3a:	97 e0       	ldi	r25, 0x07	; 7
    5b3c:	0e 94 a7 28 	call	0x514e	; 0x514e <_ZN5Print7printlnEc>
    5b40:	c8 5e       	subi	r28, 0xE8	; 232
    5b42:	de 4f       	sbci	r29, 0xFE	; 254
    5b44:	60 ef       	ldi	r22, 0xF0	; 240
    5b46:	74 e0       	ldi	r23, 0x04	; 4
    5b48:	88 81       	ld	r24, Y
    5b4a:	99 81       	ldd	r25, Y+1	; 0x01
    5b4c:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5b50:	b8 01       	movw	r22, r16
    5b52:	88 81       	ld	r24, Y
    5b54:	99 81       	ldd	r25, Y+1	; 0x01
    5b56:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5b5a:	88 81       	ld	r24, Y
    5b5c:	99 81       	ldd	r25, Y+1	; 0x01
    5b5e:	ff 20       	and	r15, r15
    5b60:	19 f0       	breq	.+6      	; 0x5b68 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    5b62:	6c ee       	ldi	r22, 0xEC	; 236
    5b64:	74 e0       	ldi	r23, 0x04	; 4
    5b66:	02 c0       	rjmp	.+4      	; 0x5b6c <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    5b68:	69 ee       	ldi	r22, 0xE9	; 233
    5b6a:	74 e0       	ldi	r23, 0x04	; 4
    5b6c:	df 91       	pop	r29
    5b6e:	cf 91       	pop	r28
    5b70:	1f 91       	pop	r17
    5b72:	0f 91       	pop	r16
    5b74:	ff 90       	pop	r15
    5b76:	0c 94 52 28 	jmp	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>

00005b7a <_ZN13Adafruit_FONA8readlineEjb>:
    5b7a:	9f 92       	push	r9
    5b7c:	af 92       	push	r10
    5b7e:	bf 92       	push	r11
    5b80:	cf 92       	push	r12
    5b82:	df 92       	push	r13
    5b84:	ef 92       	push	r14
    5b86:	ff 92       	push	r15
    5b88:	0f 93       	push	r16
    5b8a:	1f 93       	push	r17
    5b8c:	cf 93       	push	r28
    5b8e:	df 93       	push	r29
    5b90:	7c 01       	movw	r14, r24
    5b92:	94 2e       	mov	r9, r20
    5b94:	8b 01       	movw	r16, r22
    5b96:	00 0f       	add	r16, r16
    5b98:	11 1f       	adc	r17, r17
    5b9a:	00 0f       	add	r16, r16
    5b9c:	11 1f       	adc	r17, r17
    5b9e:	c0 e0       	ldi	r28, 0x00	; 0
    5ba0:	d0 e0       	ldi	r29, 0x00	; 0
    5ba2:	57 01       	movw	r10, r14
    5ba4:	88 ee       	ldi	r24, 0xE8	; 232
    5ba6:	a8 1a       	sub	r10, r24
    5ba8:	8e ef       	ldi	r24, 0xFE	; 254
    5baa:	b8 0a       	sbc	r11, r24
    5bac:	01 15       	cp	r16, r1
    5bae:	11 05       	cpc	r17, r1
    5bb0:	09 f4       	brne	.+2      	; 0x5bb4 <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    5bb2:	50 c0       	rjmp	.+160    	; 0x5c54 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    5bb4:	ce 3f       	cpi	r28, 0xFE	; 254
    5bb6:	d1 05       	cpc	r29, r1
    5bb8:	80 f0       	brcs	.+32     	; 0x5bda <_ZN13Adafruit_FONA8readlineEjb+0x60>
    5bba:	6e e3       	ldi	r22, 0x3E	; 62
    5bbc:	74 e0       	ldi	r23, 0x04	; 4
    5bbe:	22 c0       	rjmp	.+68     	; 0x5c04 <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    5bc0:	f5 01       	movw	r30, r10
    5bc2:	80 81       	ld	r24, Z
    5bc4:	91 81       	ldd	r25, Z+1	; 0x01
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	ed 91       	ld	r30, X+
    5bca:	fc 91       	ld	r31, X
    5bcc:	06 80       	ldd	r0, Z+6	; 0x06
    5bce:	f7 81       	ldd	r31, Z+7	; 0x07
    5bd0:	e0 2d       	mov	r30, r0
    5bd2:	09 95       	icall
    5bd4:	6c 01       	movw	r12, r24
    5bd6:	8d 30       	cpi	r24, 0x0D	; 13
    5bd8:	69 f4       	brne	.+26     	; 0x5bf4 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    5bda:	d5 01       	movw	r26, r10
    5bdc:	8d 91       	ld	r24, X+
    5bde:	9c 91       	ld	r25, X
    5be0:	dc 01       	movw	r26, r24
    5be2:	ed 91       	ld	r30, X+
    5be4:	fc 91       	ld	r31, X
    5be6:	04 80       	ldd	r0, Z+4	; 0x04
    5be8:	f5 81       	ldd	r31, Z+5	; 0x05
    5bea:	e0 2d       	mov	r30, r0
    5bec:	09 95       	icall
    5bee:	89 2b       	or	r24, r25
    5bf0:	39 f7       	brne	.-50     	; 0x5bc0 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    5bf2:	26 c0       	rjmp	.+76     	; 0x5c40 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    5bf4:	8a 30       	cpi	r24, 0x0A	; 10
    5bf6:	59 f4       	brne	.+22     	; 0x5c0e <_ZN13Adafruit_FONA8readlineEjb+0x94>
    5bf8:	20 97       	sbiw	r28, 0x00	; 0
    5bfa:	79 f3       	breq	.-34     	; 0x5bda <_ZN13Adafruit_FONA8readlineEjb+0x60>
    5bfc:	91 10       	cpse	r9, r1
    5bfe:	07 c0       	rjmp	.+14     	; 0x5c0e <_ZN13Adafruit_FONA8readlineEjb+0x94>
    5c00:	66 e3       	ldi	r22, 0x36	; 54
    5c02:	74 e0       	ldi	r23, 0x04	; 4
    5c04:	85 e6       	ldi	r24, 0x65	; 101
    5c06:	97 e0       	ldi	r25, 0x07	; 7
    5c08:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5c0c:	23 c0       	rjmp	.+70     	; 0x5c54 <_ZN13Adafruit_FONA8readlineEjb+0xda>
    5c0e:	f7 01       	movw	r30, r14
    5c10:	ec 0f       	add	r30, r28
    5c12:	fd 1f       	adc	r31, r29
    5c14:	c6 86       	std	Z+14, r12	; 0x0e
    5c16:	b6 01       	movw	r22, r12
    5c18:	77 27       	eor	r23, r23
    5c1a:	40 e1       	ldi	r20, 0x10	; 16
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	85 e6       	ldi	r24, 0x65	; 101
    5c20:	97 e0       	ldi	r25, 0x07	; 7
    5c22:	0e 94 9a 29 	call	0x5334	; 0x5334 <_ZN5Print5printEii>
    5c26:	6b eb       	ldi	r22, 0xBB	; 187
    5c28:	73 e0       	ldi	r23, 0x03	; 3
    5c2a:	85 e6       	ldi	r24, 0x65	; 101
    5c2c:	97 e0       	ldi	r25, 0x07	; 7
    5c2e:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    5c32:	6c 2d       	mov	r22, r12
    5c34:	85 e6       	ldi	r24, 0x65	; 101
    5c36:	97 e0       	ldi	r25, 0x07	; 7
    5c38:	0e 94 a7 28 	call	0x514e	; 0x514e <_ZN5Print7printlnEc>
    5c3c:	21 96       	adiw	r28, 0x01	; 1
    5c3e:	cd cf       	rjmp	.-102    	; 0x5bda <_ZN13Adafruit_FONA8readlineEjb+0x60>
    5c40:	01 50       	subi	r16, 0x01	; 1
    5c42:	11 09       	sbc	r17, r1
    5c44:	e9 f2       	breq	.-70     	; 0x5c00 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    5c46:	61 e0       	ldi	r22, 0x01	; 1
    5c48:	70 e0       	ldi	r23, 0x00	; 0
    5c4a:	80 e0       	ldi	r24, 0x00	; 0
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    5c52:	ac cf       	rjmp	.-168    	; 0x5bac <_ZN13Adafruit_FONA8readlineEjb+0x32>
    5c54:	f7 01       	movw	r30, r14
    5c56:	ec 0f       	add	r30, r28
    5c58:	fd 1f       	adc	r31, r29
    5c5a:	16 86       	std	Z+14, r1	; 0x0e
    5c5c:	8c 2f       	mov	r24, r28
    5c5e:	df 91       	pop	r29
    5c60:	cf 91       	pop	r28
    5c62:	1f 91       	pop	r17
    5c64:	0f 91       	pop	r16
    5c66:	ff 90       	pop	r15
    5c68:	ef 90       	pop	r14
    5c6a:	df 90       	pop	r13
    5c6c:	cf 90       	pop	r12
    5c6e:	bf 90       	pop	r11
    5c70:	af 90       	pop	r10
    5c72:	9f 90       	pop	r9
    5c74:	08 95       	ret

00005c76 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    5c76:	0f 93       	push	r16
    5c78:	1f 93       	push	r17
    5c7a:	cf 93       	push	r28
    5c7c:	df 93       	push	r29
    5c7e:	ec 01       	movw	r28, r24
    5c80:	8b 01       	movw	r16, r22
    5c82:	ba 01       	movw	r22, r20
    5c84:	40 e0       	ldi	r20, 0x00	; 0
    5c86:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    5c8a:	64 e4       	ldi	r22, 0x44	; 68
    5c8c:	74 e0       	ldi	r23, 0x04	; 4
    5c8e:	85 e6       	ldi	r24, 0x65	; 101
    5c90:	97 e0       	ldi	r25, 0x07	; 7
    5c92:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5c96:	2e 96       	adiw	r28, 0x0e	; 14
    5c98:	be 01       	movw	r22, r28
    5c9a:	85 e6       	ldi	r24, 0x65	; 101
    5c9c:	97 e0       	ldi	r25, 0x07	; 7
    5c9e:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    5ca2:	b8 01       	movw	r22, r16
    5ca4:	ce 01       	movw	r24, r28
    5ca6:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <strcmp_P>
    5caa:	21 e0       	ldi	r18, 0x01	; 1
    5cac:	89 2b       	or	r24, r25
    5cae:	09 f0       	breq	.+2      	; 0x5cb2 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	82 2f       	mov	r24, r18
    5cb4:	df 91       	pop	r29
    5cb6:	cf 91       	pop	r28
    5cb8:	1f 91       	pop	r17
    5cba:	0f 91       	pop	r16
    5cbc:	08 95       	ret

00005cbe <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    5cbe:	cf 93       	push	r28
    5cc0:	df 93       	push	r29
    5cc2:	ec 01       	movw	r28, r24
    5cc4:	fc 01       	movw	r30, r24
    5cc6:	e8 5e       	subi	r30, 0xE8	; 232
    5cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    5cca:	66 23       	and	r22, r22
    5ccc:	31 f0       	breq	.+12     	; 0x5cda <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    5cce:	62 e2       	ldi	r22, 0x22	; 34
    5cd0:	80 81       	ld	r24, Z
    5cd2:	91 81       	ldd	r25, Z+1	; 0x01
    5cd4:	0e 94 a7 28 	call	0x514e	; 0x514e <_ZN5Print7printlnEc>
    5cd8:	04 c0       	rjmp	.+8      	; 0x5ce2 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    5cda:	80 81       	ld	r24, Z
    5cdc:	91 81       	ldd	r25, Z+1	; 0x01
    5cde:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    5ce2:	fe 01       	movw	r30, r28
    5ce4:	ea 5e       	subi	r30, 0xEA	; 234
    5ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ce8:	60 81       	ld	r22, Z
    5cea:	71 81       	ldd	r23, Z+1	; 0x01
    5cec:	40 e1       	ldi	r20, 0x10	; 16
    5cee:	57 e2       	ldi	r21, 0x27	; 39
    5cf0:	ce 01       	movw	r24, r28
    5cf2:	df 91       	pop	r29
    5cf4:	cf 91       	pop	r28
    5cf6:	0c 94 3b 2e 	jmp	0x5c76	; 0x5c76 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00005cfa <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    5cfa:	0f 93       	push	r16
    5cfc:	1f 93       	push	r17
    5cfe:	cf 93       	push	r28
    5d00:	df 93       	push	r29
    5d02:	ec 01       	movw	r28, r24
    5d04:	8a 01       	movw	r16, r20
    5d06:	41 e0       	ldi	r20, 0x01	; 1
    5d08:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    5d0c:	fe 01       	movw	r30, r28
    5d0e:	e8 5e       	subi	r30, 0xE8	; 232
    5d10:	fe 4f       	sbci	r31, 0xFE	; 254
    5d12:	b8 01       	movw	r22, r16
    5d14:	80 81       	ld	r24, Z
    5d16:	91 81       	ldd	r25, Z+1	; 0x01
    5d18:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    5d1c:	61 e0       	ldi	r22, 0x01	; 1
    5d1e:	ce 01       	movw	r24, r28
    5d20:	df 91       	pop	r29
    5d22:	cf 91       	pop	r28
    5d24:	1f 91       	pop	r17
    5d26:	0f 91       	pop	r16
    5d28:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <_ZN13Adafruit_FONA13HTTP_para_endEb>

00005d2c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    5d2c:	0f 93       	push	r16
    5d2e:	1f 93       	push	r17
    5d30:	cf 93       	push	r28
    5d32:	df 93       	push	r29
    5d34:	ec 01       	movw	r28, r24
    5d36:	8a 01       	movw	r16, r20
    5d38:	41 e0       	ldi	r20, 0x01	; 1
    5d3a:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    5d3e:	fe 01       	movw	r30, r28
    5d40:	e8 5e       	subi	r30, 0xE8	; 232
    5d42:	fe 4f       	sbci	r31, 0xFE	; 254
    5d44:	b8 01       	movw	r22, r16
    5d46:	80 81       	ld	r24, Z
    5d48:	91 81       	ldd	r25, Z+1	; 0x01
    5d4a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5d4e:	61 e0       	ldi	r22, 0x01	; 1
    5d50:	ce 01       	movw	r24, r28
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <_ZN13Adafruit_FONA13HTTP_para_endEb>

00005d5e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    5d5e:	cf 92       	push	r12
    5d60:	df 92       	push	r13
    5d62:	ef 92       	push	r14
    5d64:	ff 92       	push	r15
    5d66:	cf 93       	push	r28
    5d68:	df 93       	push	r29
    5d6a:	ec 01       	movw	r28, r24
    5d6c:	69 01       	movw	r12, r18
    5d6e:	7a 01       	movw	r14, r20
    5d70:	40 e0       	ldi	r20, 0x00	; 0
    5d72:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    5d76:	fe 01       	movw	r30, r28
    5d78:	e8 5e       	subi	r30, 0xE8	; 232
    5d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    5d7c:	2a e0       	ldi	r18, 0x0A	; 10
    5d7e:	30 e0       	ldi	r19, 0x00	; 0
    5d80:	b7 01       	movw	r22, r14
    5d82:	a6 01       	movw	r20, r12
    5d84:	80 81       	ld	r24, Z
    5d86:	91 81       	ldd	r25, Z+1	; 0x01
    5d88:	0e 94 52 29 	call	0x52a4	; 0x52a4 <_ZN5Print5printEli>
    5d8c:	60 e0       	ldi	r22, 0x00	; 0
    5d8e:	ce 01       	movw	r24, r28
    5d90:	df 91       	pop	r29
    5d92:	cf 91       	pop	r28
    5d94:	ff 90       	pop	r15
    5d96:	ef 90       	pop	r14
    5d98:	df 90       	pop	r13
    5d9a:	cf 90       	pop	r12
    5d9c:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <_ZN13Adafruit_FONA13HTTP_para_endEb>

00005da0 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    5da0:	4f 92       	push	r4
    5da2:	5f 92       	push	r5
    5da4:	6f 92       	push	r6
    5da6:	7f 92       	push	r7
    5da8:	8f 92       	push	r8
    5daa:	9f 92       	push	r9
    5dac:	af 92       	push	r10
    5dae:	bf 92       	push	r11
    5db0:	ef 92       	push	r14
    5db2:	ff 92       	push	r15
    5db4:	0f 93       	push	r16
    5db6:	1f 93       	push	r17
    5db8:	cf 93       	push	r28
    5dba:	df 93       	push	r29
    5dbc:	7c 01       	movw	r14, r24
    5dbe:	2a 01       	movw	r4, r20
    5dc0:	3b 01       	movw	r6, r22
    5dc2:	48 01       	movw	r8, r16
    5dc4:	59 01       	movw	r10, r18
    5dc6:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    5dca:	62 ee       	ldi	r22, 0xE2	; 226
    5dcc:	74 e0       	ldi	r23, 0x04	; 4
    5dce:	85 e6       	ldi	r24, 0x65	; 101
    5dd0:	97 e0       	ldi	r25, 0x07	; 7
    5dd2:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5dd6:	65 ed       	ldi	r22, 0xD5	; 213
    5dd8:	74 e0       	ldi	r23, 0x04	; 4
    5dda:	85 e6       	ldi	r24, 0x65	; 101
    5ddc:	97 e0       	ldi	r25, 0x07	; 7
    5dde:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5de2:	2a e0       	ldi	r18, 0x0A	; 10
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	b3 01       	movw	r22, r6
    5de8:	a2 01       	movw	r20, r4
    5dea:	85 e6       	ldi	r24, 0x65	; 101
    5dec:	97 e0       	ldi	r25, 0x07	; 7
    5dee:	0e 94 02 29 	call	0x5204	; 0x5204 <_ZN5Print5printEmi>
    5df2:	6c e2       	ldi	r22, 0x2C	; 44
    5df4:	85 e6       	ldi	r24, 0x65	; 101
    5df6:	97 e0       	ldi	r25, 0x07	; 7
    5df8:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN5Print5printEc>
    5dfc:	2a e0       	ldi	r18, 0x0A	; 10
    5dfe:	30 e0       	ldi	r19, 0x00	; 0
    5e00:	b5 01       	movw	r22, r10
    5e02:	a4 01       	movw	r20, r8
    5e04:	85 e6       	ldi	r24, 0x65	; 101
    5e06:	97 e0       	ldi	r25, 0x07	; 7
    5e08:	0e 94 40 29 	call	0x5280	; 0x5280 <_ZN5Print7printlnEmi>
    5e0c:	e7 01       	movw	r28, r14
    5e0e:	c8 5e       	subi	r28, 0xE8	; 232
    5e10:	de 4f       	sbci	r29, 0xFE	; 254
    5e12:	68 ec       	ldi	r22, 0xC8	; 200
    5e14:	74 e0       	ldi	r23, 0x04	; 4
    5e16:	88 81       	ld	r24, Y
    5e18:	99 81       	ldd	r25, Y+1	; 0x01
    5e1a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5e1e:	2a e0       	ldi	r18, 0x0A	; 10
    5e20:	30 e0       	ldi	r19, 0x00	; 0
    5e22:	b3 01       	movw	r22, r6
    5e24:	a2 01       	movw	r20, r4
    5e26:	88 81       	ld	r24, Y
    5e28:	99 81       	ldd	r25, Y+1	; 0x01
    5e2a:	0e 94 02 29 	call	0x5204	; 0x5204 <_ZN5Print5printEmi>
    5e2e:	65 ec       	ldi	r22, 0xC5	; 197
    5e30:	73 e0       	ldi	r23, 0x03	; 3
    5e32:	88 81       	ld	r24, Y
    5e34:	99 81       	ldd	r25, Y+1	; 0x01
    5e36:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    5e3a:	2a e0       	ldi	r18, 0x0A	; 10
    5e3c:	30 e0       	ldi	r19, 0x00	; 0
    5e3e:	b5 01       	movw	r22, r10
    5e40:	a4 01       	movw	r20, r8
    5e42:	88 81       	ld	r24, Y
    5e44:	99 81       	ldd	r25, Y+1	; 0x01
    5e46:	0e 94 40 29 	call	0x5280	; 0x5280 <_ZN5Print7printlnEmi>
    5e4a:	40 e1       	ldi	r20, 0x10	; 16
    5e4c:	57 e2       	ldi	r21, 0x27	; 39
    5e4e:	6f eb       	ldi	r22, 0xBF	; 191
    5e50:	74 e0       	ldi	r23, 0x04	; 4
    5e52:	c7 01       	movw	r24, r14
    5e54:	df 91       	pop	r29
    5e56:	cf 91       	pop	r28
    5e58:	1f 91       	pop	r17
    5e5a:	0f 91       	pop	r16
    5e5c:	ff 90       	pop	r15
    5e5e:	ef 90       	pop	r14
    5e60:	bf 90       	pop	r11
    5e62:	af 90       	pop	r10
    5e64:	9f 90       	pop	r9
    5e66:	8f 90       	pop	r8
    5e68:	7f 90       	pop	r7
    5e6a:	6f 90       	pop	r6
    5e6c:	5f 90       	pop	r5
    5e6e:	4f 90       	pop	r4
    5e70:	0c 94 3b 2e 	jmp	0x5c76	; 0x5c76 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00005e74 <_ZN13Adafruit_FONA8getReplyEPcj>:
    5e74:	ef 92       	push	r14
    5e76:	ff 92       	push	r15
    5e78:	0f 93       	push	r16
    5e7a:	1f 93       	push	r17
    5e7c:	cf 93       	push	r28
    5e7e:	df 93       	push	r29
    5e80:	ec 01       	movw	r28, r24
    5e82:	8b 01       	movw	r16, r22
    5e84:	7a 01       	movw	r14, r20
    5e86:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    5e8a:	6f e2       	ldi	r22, 0x2F	; 47
    5e8c:	74 e0       	ldi	r23, 0x04	; 4
    5e8e:	85 e6       	ldi	r24, 0x65	; 101
    5e90:	97 e0       	ldi	r25, 0x07	; 7
    5e92:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5e96:	b8 01       	movw	r22, r16
    5e98:	85 e6       	ldi	r24, 0x65	; 101
    5e9a:	97 e0       	ldi	r25, 0x07	; 7
    5e9c:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    5ea0:	fe 01       	movw	r30, r28
    5ea2:	e8 5e       	subi	r30, 0xE8	; 232
    5ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ea6:	b8 01       	movw	r22, r16
    5ea8:	80 81       	ld	r24, Z
    5eaa:	91 81       	ldd	r25, Z+1	; 0x01
    5eac:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    5eb0:	40 e0       	ldi	r20, 0x00	; 0
    5eb2:	b7 01       	movw	r22, r14
    5eb4:	ce 01       	movw	r24, r28
    5eb6:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    5eba:	18 2f       	mov	r17, r24
    5ebc:	68 e2       	ldi	r22, 0x28	; 40
    5ebe:	74 e0       	ldi	r23, 0x04	; 4
    5ec0:	85 e6       	ldi	r24, 0x65	; 101
    5ec2:	97 e0       	ldi	r25, 0x07	; 7
    5ec4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5ec8:	be 01       	movw	r22, r28
    5eca:	62 5f       	subi	r22, 0xF2	; 242
    5ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ece:	85 e6       	ldi	r24, 0x65	; 101
    5ed0:	97 e0       	ldi	r25, 0x07	; 7
    5ed2:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    5ed6:	81 2f       	mov	r24, r17
    5ed8:	df 91       	pop	r29
    5eda:	cf 91       	pop	r28
    5edc:	1f 91       	pop	r17
    5ede:	0f 91       	pop	r16
    5ee0:	ff 90       	pop	r15
    5ee2:	ef 90       	pop	r14
    5ee4:	08 95       	ret

00005ee6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    5ee6:	ef 92       	push	r14
    5ee8:	ff 92       	push	r15
    5eea:	0f 93       	push	r16
    5eec:	1f 93       	push	r17
    5eee:	cf 93       	push	r28
    5ef0:	df 93       	push	r29
    5ef2:	ec 01       	movw	r28, r24
    5ef4:	8b 01       	movw	r16, r22
    5ef6:	7a 01       	movw	r14, r20
    5ef8:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    5efc:	61 e2       	ldi	r22, 0x21	; 33
    5efe:	74 e0       	ldi	r23, 0x04	; 4
    5f00:	85 e6       	ldi	r24, 0x65	; 101
    5f02:	97 e0       	ldi	r25, 0x07	; 7
    5f04:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5f08:	b8 01       	movw	r22, r16
    5f0a:	85 e6       	ldi	r24, 0x65	; 101
    5f0c:	97 e0       	ldi	r25, 0x07	; 7
    5f0e:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5f12:	fe 01       	movw	r30, r28
    5f14:	e8 5e       	subi	r30, 0xE8	; 232
    5f16:	fe 4f       	sbci	r31, 0xFE	; 254
    5f18:	b8 01       	movw	r22, r16
    5f1a:	80 81       	ld	r24, Z
    5f1c:	91 81       	ldd	r25, Z+1	; 0x01
    5f1e:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    5f22:	40 e0       	ldi	r20, 0x00	; 0
    5f24:	b7 01       	movw	r22, r14
    5f26:	ce 01       	movw	r24, r28
    5f28:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    5f2c:	18 2f       	mov	r17, r24
    5f2e:	6a e1       	ldi	r22, 0x1A	; 26
    5f30:	74 e0       	ldi	r23, 0x04	; 4
    5f32:	85 e6       	ldi	r24, 0x65	; 101
    5f34:	97 e0       	ldi	r25, 0x07	; 7
    5f36:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5f3a:	be 01       	movw	r22, r28
    5f3c:	62 5f       	subi	r22, 0xF2	; 242
    5f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f40:	85 e6       	ldi	r24, 0x65	; 101
    5f42:	97 e0       	ldi	r25, 0x07	; 7
    5f44:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    5f48:	81 2f       	mov	r24, r17
    5f4a:	df 91       	pop	r29
    5f4c:	cf 91       	pop	r28
    5f4e:	1f 91       	pop	r17
    5f50:	0f 91       	pop	r16
    5f52:	ff 90       	pop	r15
    5f54:	ef 90       	pop	r14
    5f56:	08 95       	ret

00005f58 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    5f58:	8f 92       	push	r8
    5f5a:	9f 92       	push	r9
    5f5c:	af 92       	push	r10
    5f5e:	bf 92       	push	r11
    5f60:	cf 92       	push	r12
    5f62:	df 92       	push	r13
    5f64:	ef 92       	push	r14
    5f66:	ff 92       	push	r15
    5f68:	0f 93       	push	r16
    5f6a:	1f 93       	push	r17
    5f6c:	cf 93       	push	r28
    5f6e:	df 93       	push	r29
    5f70:	ec 01       	movw	r28, r24
    5f72:	6b 01       	movw	r12, r22
    5f74:	49 01       	movw	r8, r18
    5f76:	5a 01       	movw	r10, r20
    5f78:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    5f7c:	63 e1       	ldi	r22, 0x13	; 19
    5f7e:	74 e0       	ldi	r23, 0x04	; 4
    5f80:	85 e6       	ldi	r24, 0x65	; 101
    5f82:	97 e0       	ldi	r25, 0x07	; 7
    5f84:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5f88:	b6 01       	movw	r22, r12
    5f8a:	85 e6       	ldi	r24, 0x65	; 101
    5f8c:	97 e0       	ldi	r25, 0x07	; 7
    5f8e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5f92:	2a e0       	ldi	r18, 0x0A	; 10
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	b5 01       	movw	r22, r10
    5f98:	a4 01       	movw	r20, r8
    5f9a:	85 e6       	ldi	r24, 0x65	; 101
    5f9c:	97 e0       	ldi	r25, 0x07	; 7
    5f9e:	0e 94 b3 29 	call	0x5366	; 0x5366 <_ZN5Print7printlnEli>
    5fa2:	7e 01       	movw	r14, r28
    5fa4:	88 ee       	ldi	r24, 0xE8	; 232
    5fa6:	e8 1a       	sub	r14, r24
    5fa8:	8e ef       	ldi	r24, 0xFE	; 254
    5faa:	f8 0a       	sbc	r15, r24
    5fac:	b6 01       	movw	r22, r12
    5fae:	f7 01       	movw	r30, r14
    5fb0:	80 81       	ld	r24, Z
    5fb2:	91 81       	ldd	r25, Z+1	; 0x01
    5fb4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5fb8:	2a e0       	ldi	r18, 0x0A	; 10
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	b5 01       	movw	r22, r10
    5fbe:	a4 01       	movw	r20, r8
    5fc0:	f7 01       	movw	r30, r14
    5fc2:	80 81       	ld	r24, Z
    5fc4:	91 81       	ldd	r25, Z+1	; 0x01
    5fc6:	0e 94 b3 29 	call	0x5366	; 0x5366 <_ZN5Print7printlnEli>
    5fca:	40 e0       	ldi	r20, 0x00	; 0
    5fcc:	b8 01       	movw	r22, r16
    5fce:	ce 01       	movw	r24, r28
    5fd0:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    5fd4:	18 2f       	mov	r17, r24
    5fd6:	6c e0       	ldi	r22, 0x0C	; 12
    5fd8:	74 e0       	ldi	r23, 0x04	; 4
    5fda:	85 e6       	ldi	r24, 0x65	; 101
    5fdc:	97 e0       	ldi	r25, 0x07	; 7
    5fde:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    5fe2:	be 01       	movw	r22, r28
    5fe4:	62 5f       	subi	r22, 0xF2	; 242
    5fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe8:	85 e6       	ldi	r24, 0x65	; 101
    5fea:	97 e0       	ldi	r25, 0x07	; 7
    5fec:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    5ff0:	81 2f       	mov	r24, r17
    5ff2:	df 91       	pop	r29
    5ff4:	cf 91       	pop	r28
    5ff6:	1f 91       	pop	r17
    5ff8:	0f 91       	pop	r16
    5ffa:	ff 90       	pop	r15
    5ffc:	ef 90       	pop	r14
    5ffe:	df 90       	pop	r13
    6000:	cf 90       	pop	r12
    6002:	bf 90       	pop	r11
    6004:	af 90       	pop	r10
    6006:	9f 90       	pop	r9
    6008:	8f 90       	pop	r8
    600a:	08 95       	ret

0000600c <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    600c:	af 92       	push	r10
    600e:	bf 92       	push	r11
    6010:	cf 92       	push	r12
    6012:	df 92       	push	r13
    6014:	ef 92       	push	r14
    6016:	ff 92       	push	r15
    6018:	0f 93       	push	r16
    601a:	1f 93       	push	r17
    601c:	cf 93       	push	r28
    601e:	df 93       	push	r29
    6020:	ec 01       	movw	r28, r24
    6022:	6b 01       	movw	r12, r22
    6024:	7a 01       	movw	r14, r20
    6026:	59 01       	movw	r10, r18
    6028:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    602c:	65 e0       	ldi	r22, 0x05	; 5
    602e:	74 e0       	ldi	r23, 0x04	; 4
    6030:	85 e6       	ldi	r24, 0x65	; 101
    6032:	97 e0       	ldi	r25, 0x07	; 7
    6034:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6038:	b6 01       	movw	r22, r12
    603a:	85 e6       	ldi	r24, 0x65	; 101
    603c:	97 e0       	ldi	r25, 0x07	; 7
    603e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6042:	62 e2       	ldi	r22, 0x22	; 34
    6044:	85 e6       	ldi	r24, 0x65	; 101
    6046:	97 e0       	ldi	r25, 0x07	; 7
    6048:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN5Print5printEc>
    604c:	b7 01       	movw	r22, r14
    604e:	85 e6       	ldi	r24, 0x65	; 101
    6050:	97 e0       	ldi	r25, 0x07	; 7
    6052:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6056:	62 e2       	ldi	r22, 0x22	; 34
    6058:	85 e6       	ldi	r24, 0x65	; 101
    605a:	97 e0       	ldi	r25, 0x07	; 7
    605c:	0e 94 a7 28 	call	0x514e	; 0x514e <_ZN5Print7printlnEc>
    6060:	8e 01       	movw	r16, r28
    6062:	08 5e       	subi	r16, 0xE8	; 232
    6064:	1e 4f       	sbci	r17, 0xFE	; 254
    6066:	b6 01       	movw	r22, r12
    6068:	f8 01       	movw	r30, r16
    606a:	80 81       	ld	r24, Z
    606c:	91 81       	ldd	r25, Z+1	; 0x01
    606e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6072:	62 e2       	ldi	r22, 0x22	; 34
    6074:	f8 01       	movw	r30, r16
    6076:	80 81       	ld	r24, Z
    6078:	91 81       	ldd	r25, Z+1	; 0x01
    607a:	0e 94 78 28 	call	0x50f0	; 0x50f0 <_ZN5Print5printEc>
    607e:	b7 01       	movw	r22, r14
    6080:	f8 01       	movw	r30, r16
    6082:	80 81       	ld	r24, Z
    6084:	91 81       	ldd	r25, Z+1	; 0x01
    6086:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    608a:	62 e2       	ldi	r22, 0x22	; 34
    608c:	f8 01       	movw	r30, r16
    608e:	80 81       	ld	r24, Z
    6090:	91 81       	ldd	r25, Z+1	; 0x01
    6092:	0e 94 a7 28 	call	0x514e	; 0x514e <_ZN5Print7printlnEc>
    6096:	40 e0       	ldi	r20, 0x00	; 0
    6098:	b5 01       	movw	r22, r10
    609a:	ce 01       	movw	r24, r28
    609c:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    60a0:	18 2f       	mov	r17, r24
    60a2:	6e ef       	ldi	r22, 0xFE	; 254
    60a4:	73 e0       	ldi	r23, 0x03	; 3
    60a6:	85 e6       	ldi	r24, 0x65	; 101
    60a8:	97 e0       	ldi	r25, 0x07	; 7
    60aa:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    60ae:	be 01       	movw	r22, r28
    60b0:	62 5f       	subi	r22, 0xF2	; 242
    60b2:	7f 4f       	sbci	r23, 0xFF	; 255
    60b4:	85 e6       	ldi	r24, 0x65	; 101
    60b6:	97 e0       	ldi	r25, 0x07	; 7
    60b8:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    60bc:	81 2f       	mov	r24, r17
    60be:	df 91       	pop	r29
    60c0:	cf 91       	pop	r28
    60c2:	1f 91       	pop	r17
    60c4:	0f 91       	pop	r16
    60c6:	ff 90       	pop	r15
    60c8:	ef 90       	pop	r14
    60ca:	df 90       	pop	r13
    60cc:	cf 90       	pop	r12
    60ce:	bf 90       	pop	r11
    60d0:	af 90       	pop	r10
    60d2:	08 95       	ret

000060d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    60d4:	0f 93       	push	r16
    60d6:	1f 93       	push	r17
    60d8:	cf 93       	push	r28
    60da:	df 93       	push	r29
    60dc:	ec 01       	movw	r28, r24
    60de:	8a 01       	movw	r16, r20
    60e0:	a9 01       	movw	r20, r18
    60e2:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    60e6:	88 23       	and	r24, r24
    60e8:	41 f0       	breq	.+16     	; 0x60fa <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    60ea:	b8 01       	movw	r22, r16
    60ec:	ce 01       	movw	r24, r28
    60ee:	0e 96       	adiw	r24, 0x0e	; 14
    60f0:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <strcmp_P>
    60f4:	21 e0       	ldi	r18, 0x01	; 1
    60f6:	89 2b       	or	r24, r25
    60f8:	09 f0       	breq	.+2      	; 0x60fc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	82 2f       	mov	r24, r18
    60fe:	df 91       	pop	r29
    6100:	cf 91       	pop	r28
    6102:	1f 91       	pop	r17
    6104:	0f 91       	pop	r16
    6106:	08 95       	ret

00006108 <_ZN13Adafruit_FONA5beginER6Stream>:
    6108:	cf 92       	push	r12
    610a:	df 92       	push	r13
    610c:	ef 92       	push	r14
    610e:	ff 92       	push	r15
    6110:	0f 93       	push	r16
    6112:	1f 93       	push	r17
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	ec 01       	movw	r28, r24
    611a:	7c 01       	movw	r14, r24
    611c:	88 ee       	ldi	r24, 0xE8	; 232
    611e:	e8 1a       	sub	r14, r24
    6120:	8e ef       	ldi	r24, 0xFE	; 254
    6122:	f8 0a       	sbc	r15, r24
    6124:	d7 01       	movw	r26, r14
    6126:	6d 93       	st	X+, r22
    6128:	7c 93       	st	X, r23
    612a:	61 e0       	ldi	r22, 0x01	; 1
    612c:	8c 85       	ldd	r24, Y+12	; 0x0c
    612e:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
    6132:	61 e0       	ldi	r22, 0x01	; 1
    6134:	8c 85       	ldd	r24, Y+12	; 0x0c
    6136:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
    613a:	6a e0       	ldi	r22, 0x0A	; 10
    613c:	70 e0       	ldi	r23, 0x00	; 0
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    6146:	60 e0       	ldi	r22, 0x00	; 0
    6148:	8c 85       	ldd	r24, Y+12	; 0x0c
    614a:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
    614e:	64 e6       	ldi	r22, 0x64	; 100
    6150:	70 e0       	ldi	r23, 0x00	; 0
    6152:	80 e0       	ldi	r24, 0x00	; 0
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    615a:	61 e0       	ldi	r22, 0x01	; 1
    615c:	8c 85       	ldd	r24, Y+12	; 0x0c
    615e:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
    6162:	6f e0       	ldi	r22, 0x0F	; 15
    6164:	77 e0       	ldi	r23, 0x07	; 7
    6166:	85 e6       	ldi	r24, 0x65	; 101
    6168:	97 e0       	ldi	r25, 0x07	; 7
    616a:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    616e:	8e e0       	ldi	r24, 0x0E	; 14
    6170:	c8 2e       	mov	r12, r24
    6172:	d1 2c       	mov	r13, r1
    6174:	8e 01       	movw	r16, r28
    6176:	0a 5e       	subi	r16, 0xEA	; 234
    6178:	1e 4f       	sbci	r17, 0xFE	; 254
    617a:	f7 01       	movw	r30, r14
    617c:	80 81       	ld	r24, Z
    617e:	91 81       	ldd	r25, Z+1	; 0x01
    6180:	dc 01       	movw	r26, r24
    6182:	ed 91       	ld	r30, X+
    6184:	fc 91       	ld	r31, X
    6186:	04 80       	ldd	r0, Z+4	; 0x04
    6188:	f5 81       	ldd	r31, Z+5	; 0x05
    618a:	e0 2d       	mov	r30, r0
    618c:	09 95       	icall
    618e:	89 2b       	or	r24, r25
    6190:	89 f0       	breq	.+34     	; 0x61b4 <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    6192:	6a ef       	ldi	r22, 0xFA	; 250
    6194:	76 e0       	ldi	r23, 0x06	; 6
    6196:	85 e6       	ldi	r24, 0x65	; 101
    6198:	97 e0       	ldi	r25, 0x07	; 7
    619a:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    619e:	f7 01       	movw	r30, r14
    61a0:	80 81       	ld	r24, Z
    61a2:	91 81       	ldd	r25, Z+1	; 0x01
    61a4:	dc 01       	movw	r26, r24
    61a6:	ed 91       	ld	r30, X+
    61a8:	fc 91       	ld	r31, X
    61aa:	06 80       	ldd	r0, Z+6	; 0x06
    61ac:	f7 81       	ldd	r31, Z+7	; 0x07
    61ae:	e0 2d       	mov	r30, r0
    61b0:	09 95       	icall
    61b2:	e3 cf       	rjmp	.-58     	; 0x617a <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    61b4:	f8 01       	movw	r30, r16
    61b6:	40 81       	ld	r20, Z
    61b8:	51 81       	ldd	r21, Z+1	; 0x01
    61ba:	24 ef       	ldi	r18, 0xF4	; 244
    61bc:	31 e0       	ldi	r19, 0x01	; 1
    61be:	67 ef       	ldi	r22, 0xF7	; 247
    61c0:	76 e0       	ldi	r23, 0x06	; 6
    61c2:	ce 01       	movw	r24, r28
    61c4:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    61c8:	81 11       	cpse	r24, r1
    61ca:	63 c0       	rjmp	.+198    	; 0x6292 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    61cc:	d7 01       	movw	r26, r14
    61ce:	8d 91       	ld	r24, X+
    61d0:	9c 91       	ld	r25, X
    61d2:	dc 01       	movw	r26, r24
    61d4:	ed 91       	ld	r30, X+
    61d6:	fc 91       	ld	r31, X
    61d8:	04 80       	ldd	r0, Z+4	; 0x04
    61da:	f5 81       	ldd	r31, Z+5	; 0x05
    61dc:	e0 2d       	mov	r30, r0
    61de:	09 95       	icall
    61e0:	89 2b       	or	r24, r25
    61e2:	59 f0       	breq	.+22     	; 0x61fa <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    61e4:	f7 01       	movw	r30, r14
    61e6:	80 81       	ld	r24, Z
    61e8:	91 81       	ldd	r25, Z+1	; 0x01
    61ea:	dc 01       	movw	r26, r24
    61ec:	ed 91       	ld	r30, X+
    61ee:	fc 91       	ld	r31, X
    61f0:	06 80       	ldd	r0, Z+6	; 0x06
    61f2:	f7 81       	ldd	r31, Z+7	; 0x07
    61f4:	e0 2d       	mov	r30, r0
    61f6:	09 95       	icall
    61f8:	e9 cf       	rjmp	.-46     	; 0x61cc <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    61fa:	24 ef       	ldi	r18, 0xF4	; 244
    61fc:	31 e0       	ldi	r19, 0x01	; 1
    61fe:	44 ef       	ldi	r20, 0xF4	; 244
    6200:	56 e0       	ldi	r21, 0x06	; 6
    6202:	61 ef       	ldi	r22, 0xF1	; 241
    6204:	76 e0       	ldi	r23, 0x06	; 6
    6206:	ce 01       	movw	r24, r28
    6208:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    620c:	81 11       	cpse	r24, r1
    620e:	41 c0       	rjmp	.+130    	; 0x6292 <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    6210:	64 ef       	ldi	r22, 0xF4	; 244
    6212:	71 e0       	ldi	r23, 0x01	; 1
    6214:	80 e0       	ldi	r24, 0x00	; 0
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    621c:	b1 e0       	ldi	r27, 0x01	; 1
    621e:	cb 1a       	sub	r12, r27
    6220:	d1 08       	sbc	r13, r1
    6222:	09 f0       	breq	.+2      	; 0x6226 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    6224:	aa cf       	rjmp	.-172    	; 0x617a <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    6226:	6f eb       	ldi	r22, 0xBF	; 191
    6228:	76 e0       	ldi	r23, 0x06	; 6
    622a:	85 e6       	ldi	r24, 0x65	; 101
    622c:	97 e0       	ldi	r25, 0x07	; 7
    622e:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN5Print7printlnEPK19__FlashStringHelper>
    6232:	d8 01       	movw	r26, r16
    6234:	4d 91       	ld	r20, X+
    6236:	5c 91       	ld	r21, X
    6238:	24 ef       	ldi	r18, 0xF4	; 244
    623a:	31 e0       	ldi	r19, 0x01	; 1
    623c:	6c eb       	ldi	r22, 0xBC	; 188
    623e:	76 e0       	ldi	r23, 0x06	; 6
    6240:	ce 01       	movw	r24, r28
    6242:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    6246:	64 e6       	ldi	r22, 0x64	; 100
    6248:	70 e0       	ldi	r23, 0x00	; 0
    624a:	80 e0       	ldi	r24, 0x00	; 0
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    6252:	f8 01       	movw	r30, r16
    6254:	40 81       	ld	r20, Z
    6256:	51 81       	ldd	r21, Z+1	; 0x01
    6258:	24 ef       	ldi	r18, 0xF4	; 244
    625a:	31 e0       	ldi	r19, 0x01	; 1
    625c:	69 eb       	ldi	r22, 0xB9	; 185
    625e:	76 e0       	ldi	r23, 0x06	; 6
    6260:	ce 01       	movw	r24, r28
    6262:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    6266:	64 e6       	ldi	r22, 0x64	; 100
    6268:	70 e0       	ldi	r23, 0x00	; 0
    626a:	80 e0       	ldi	r24, 0x00	; 0
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    6272:	d8 01       	movw	r26, r16
    6274:	4d 91       	ld	r20, X+
    6276:	5c 91       	ld	r21, X
    6278:	24 ef       	ldi	r18, 0xF4	; 244
    627a:	31 e0       	ldi	r19, 0x01	; 1
    627c:	66 eb       	ldi	r22, 0xB6	; 182
    627e:	76 e0       	ldi	r23, 0x06	; 6
    6280:	ce 01       	movw	r24, r28
    6282:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    6286:	64 e6       	ldi	r22, 0x64	; 100
    6288:	70 e0       	ldi	r23, 0x00	; 0
    628a:	80 e0       	ldi	r24, 0x00	; 0
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    6292:	f8 01       	movw	r30, r16
    6294:	40 81       	ld	r20, Z
    6296:	51 81       	ldd	r21, Z+1	; 0x01
    6298:	24 ef       	ldi	r18, 0xF4	; 244
    629a:	31 e0       	ldi	r19, 0x01	; 1
    629c:	61 eb       	ldi	r22, 0xB1	; 177
    629e:	76 e0       	ldi	r23, 0x06	; 6
    62a0:	ce 01       	movw	r24, r28
    62a2:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    62a6:	64 e6       	ldi	r22, 0x64	; 100
    62a8:	70 e0       	ldi	r23, 0x00	; 0
    62aa:	80 e0       	ldi	r24, 0x00	; 0
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    62b2:	d8 01       	movw	r26, r16
    62b4:	4d 91       	ld	r20, X+
    62b6:	5c 91       	ld	r21, X
    62b8:	24 ef       	ldi	r18, 0xF4	; 244
    62ba:	31 e0       	ldi	r19, 0x01	; 1
    62bc:	6c ea       	ldi	r22, 0xAC	; 172
    62be:	76 e0       	ldi	r23, 0x06	; 6
    62c0:	ce 01       	movw	r24, r28
    62c2:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    62c6:	d8 2e       	mov	r13, r24
    62c8:	88 23       	and	r24, r24
    62ca:	09 f4       	brne	.+2      	; 0x62ce <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    62cc:	97 c0       	rjmp	.+302    	; 0x63fc <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    62ce:	f8 01       	movw	r30, r16
    62d0:	40 81       	ld	r20, Z
    62d2:	51 81       	ldd	r21, Z+1	; 0x01
    62d4:	24 ef       	ldi	r18, 0xF4	; 244
    62d6:	31 e0       	ldi	r19, 0x01	; 1
    62d8:	62 ea       	ldi	r22, 0xA2	; 162
    62da:	76 e0       	ldi	r23, 0x06	; 6
    62dc:	ce 01       	movw	r24, r28
    62de:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    62e2:	64 e6       	ldi	r22, 0x64	; 100
    62e4:	70 e0       	ldi	r23, 0x00	; 0
    62e6:	80 e0       	ldi	r24, 0x00	; 0
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	0e 94 2f 2b 	call	0x565e	; 0x565e <delay>
    62ee:	ce 01       	movw	r24, r28
    62f0:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    62f4:	6b e9       	ldi	r22, 0x9B	; 155
    62f6:	76 e0       	ldi	r23, 0x06	; 6
    62f8:	85 e6       	ldi	r24, 0x65	; 101
    62fa:	97 e0       	ldi	r25, 0x07	; 7
    62fc:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6300:	6f ec       	ldi	r22, 0xCF	; 207
    6302:	73 e0       	ldi	r23, 0x03	; 3
    6304:	85 e6       	ldi	r24, 0x65	; 101
    6306:	97 e0       	ldi	r25, 0x07	; 7
    6308:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    630c:	6f ec       	ldi	r22, 0xCF	; 207
    630e:	73 e0       	ldi	r23, 0x03	; 3
    6310:	d7 01       	movw	r26, r14
    6312:	8d 91       	ld	r24, X+
    6314:	9c 91       	ld	r25, X
    6316:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    631a:	41 e0       	ldi	r20, 0x01	; 1
    631c:	64 ef       	ldi	r22, 0xF4	; 244
    631e:	71 e0       	ldi	r23, 0x01	; 1
    6320:	ce 01       	movw	r24, r28
    6322:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    6326:	64 e9       	ldi	r22, 0x94	; 148
    6328:	76 e0       	ldi	r23, 0x06	; 6
    632a:	85 e6       	ldi	r24, 0x65	; 101
    632c:	97 e0       	ldi	r25, 0x07	; 7
    632e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6332:	8e 01       	movw	r16, r28
    6334:	02 5f       	subi	r16, 0xF2	; 242
    6336:	1f 4f       	sbci	r17, 0xFF	; 255
    6338:	b8 01       	movw	r22, r16
    633a:	85 e6       	ldi	r24, 0x65	; 101
    633c:	97 e0       	ldi	r25, 0x07	; 7
    633e:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    6342:	69 e8       	ldi	r22, 0x89	; 137
    6344:	76 e0       	ldi	r23, 0x06	; 6
    6346:	c8 01       	movw	r24, r16
    6348:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    634c:	89 2b       	or	r24, r25
    634e:	11 f0       	breq	.+4      	; 0x6354 <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    6350:	83 e0       	ldi	r24, 0x03	; 3
    6352:	23 c0       	rjmp	.+70     	; 0x639a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    6354:	6e e7       	ldi	r22, 0x7E	; 126
    6356:	76 e0       	ldi	r23, 0x06	; 6
    6358:	c8 01       	movw	r24, r16
    635a:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    635e:	89 2b       	or	r24, r25
    6360:	11 f0       	breq	.+4      	; 0x6366 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    6362:	82 e0       	ldi	r24, 0x02	; 2
    6364:	1a c0       	rjmp	.+52     	; 0x639a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    6366:	63 e7       	ldi	r22, 0x73	; 115
    6368:	76 e0       	ldi	r23, 0x06	; 6
    636a:	c8 01       	movw	r24, r16
    636c:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    6370:	89 2b       	or	r24, r25
    6372:	11 f0       	breq	.+4      	; 0x6378 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    6374:	81 e0       	ldi	r24, 0x01	; 1
    6376:	11 c0       	rjmp	.+34     	; 0x639a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    6378:	63 e6       	ldi	r22, 0x63	; 99
    637a:	76 e0       	ldi	r23, 0x06	; 6
    637c:	c8 01       	movw	r24, r16
    637e:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    6382:	89 2b       	or	r24, r25
    6384:	11 f0       	breq	.+4      	; 0x638a <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    6386:	84 e0       	ldi	r24, 0x04	; 4
    6388:	08 c0       	rjmp	.+16     	; 0x639a <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    638a:	63 e5       	ldi	r22, 0x53	; 83
    638c:	76 e0       	ldi	r23, 0x06	; 6
    638e:	c8 01       	movw	r24, r16
    6390:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    6394:	89 2b       	or	r24, r25
    6396:	11 f0       	breq	.+4      	; 0x639c <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    6398:	85 e0       	ldi	r24, 0x05	; 5
    639a:	8d 87       	std	Y+13, r24	; 0x0d
    639c:	8d 85       	ldd	r24, Y+13	; 0x0d
    639e:	81 30       	cpi	r24, 0x01	; 1
    63a0:	69 f5       	brne	.+90     	; 0x63fc <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    63a2:	6c e4       	ldi	r22, 0x4C	; 76
    63a4:	76 e0       	ldi	r23, 0x06	; 6
    63a6:	85 e6       	ldi	r24, 0x65	; 101
    63a8:	97 e0       	ldi	r25, 0x07	; 7
    63aa:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    63ae:	63 ed       	ldi	r22, 0xD3	; 211
    63b0:	73 e0       	ldi	r23, 0x03	; 3
    63b2:	85 e6       	ldi	r24, 0x65	; 101
    63b4:	97 e0       	ldi	r25, 0x07	; 7
    63b6:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    63ba:	63 ed       	ldi	r22, 0xD3	; 211
    63bc:	73 e0       	ldi	r23, 0x03	; 3
    63be:	f7 01       	movw	r30, r14
    63c0:	80 81       	ld	r24, Z
    63c2:	91 81       	ldd	r25, Z+1	; 0x01
    63c4:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    63c8:	41 e0       	ldi	r20, 0x01	; 1
    63ca:	64 ef       	ldi	r22, 0xF4	; 244
    63cc:	71 e0       	ldi	r23, 0x01	; 1
    63ce:	ce 01       	movw	r24, r28
    63d0:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    63d4:	65 e4       	ldi	r22, 0x45	; 69
    63d6:	76 e0       	ldi	r23, 0x06	; 6
    63d8:	85 e6       	ldi	r24, 0x65	; 101
    63da:	97 e0       	ldi	r25, 0x07	; 7
    63dc:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    63e0:	b8 01       	movw	r22, r16
    63e2:	85 e6       	ldi	r24, 0x65	; 101
    63e4:	97 e0       	ldi	r25, 0x07	; 7
    63e6:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    63ea:	6d e3       	ldi	r22, 0x3D	; 61
    63ec:	76 e0       	ldi	r23, 0x06	; 6
    63ee:	c8 01       	movw	r24, r16
    63f0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    63f4:	89 2b       	or	r24, r25
    63f6:	11 f0       	breq	.+4      	; 0x63fc <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    63f8:	86 e0       	ldi	r24, 0x06	; 6
    63fa:	8d 87       	std	Y+13, r24	; 0x0d
    63fc:	8d 2d       	mov	r24, r13
    63fe:	df 91       	pop	r29
    6400:	cf 91       	pop	r28
    6402:	1f 91       	pop	r17
    6404:	0f 91       	pop	r16
    6406:	ff 90       	pop	r15
    6408:	ef 90       	pop	r14
    640a:	df 90       	pop	r13
    640c:	cf 90       	pop	r12
    640e:	08 95       	ret

00006410 <_ZN13Adafruit_FONA9HTTP_initEv>:
    6410:	fc 01       	movw	r30, r24
    6412:	ea 5e       	subi	r30, 0xEA	; 234
    6414:	fe 4f       	sbci	r31, 0xFE	; 254
    6416:	40 81       	ld	r20, Z
    6418:	51 81       	ldd	r21, Z+1	; 0x01
    641a:	24 ef       	ldi	r18, 0xF4	; 244
    641c:	31 e0       	ldi	r19, 0x01	; 1
    641e:	6f e1       	ldi	r22, 0x1F	; 31
    6420:	75 e0       	ldi	r23, 0x05	; 5
    6422:	0c 94 6a 30 	jmp	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00006426 <_ZN13Adafruit_FONA9HTTP_termEv>:
    6426:	fc 01       	movw	r30, r24
    6428:	ea 5e       	subi	r30, 0xEA	; 234
    642a:	fe 4f       	sbci	r31, 0xFE	; 254
    642c:	40 81       	ld	r20, Z
    642e:	51 81       	ldd	r21, Z+1	; 0x01
    6430:	24 ef       	ldi	r18, 0xF4	; 244
    6432:	31 e0       	ldi	r19, 0x01	; 1
    6434:	63 e1       	ldi	r22, 0x13	; 19
    6436:	75 e0       	ldi	r23, 0x05	; 5
    6438:	0c 94 6a 30 	jmp	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000643c <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    643c:	0c 94 13 32 	jmp	0x6426	; 0x6426 <_ZN13Adafruit_FONA9HTTP_termEv>

00006440 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    6440:	0f 93       	push	r16
    6442:	1f 93       	push	r17
    6444:	cf 93       	push	r28
    6446:	df 93       	push	r29
    6448:	ec 01       	movw	r28, r24
    644a:	8a 01       	movw	r16, r20
    644c:	a9 01       	movw	r20, r18
    644e:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <_ZN13Adafruit_FONA8getReplyEPcj>
    6452:	88 23       	and	r24, r24
    6454:	41 f0       	breq	.+16     	; 0x6466 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    6456:	b8 01       	movw	r22, r16
    6458:	ce 01       	movw	r24, r28
    645a:	0e 96       	adiw	r24, 0x0e	; 14
    645c:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <strcmp_P>
    6460:	21 e0       	ldi	r18, 0x01	; 1
    6462:	89 2b       	or	r24, r25
    6464:	09 f0       	breq	.+2      	; 0x6468 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    6466:	20 e0       	ldi	r18, 0x00	; 0
    6468:	82 2f       	mov	r24, r18
    646a:	df 91       	pop	r29
    646c:	cf 91       	pop	r28
    646e:	1f 91       	pop	r17
    6470:	0f 91       	pop	r16
    6472:	08 95       	ret

00006474 <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    6474:	af 92       	push	r10
    6476:	bf 92       	push	r11
    6478:	cf 92       	push	r12
    647a:	df 92       	push	r13
    647c:	ef 92       	push	r14
    647e:	ff 92       	push	r15
    6480:	0f 93       	push	r16
    6482:	1f 93       	push	r17
    6484:	cf 93       	push	r28
    6486:	df 93       	push	r29
    6488:	cd b7       	in	r28, 0x3d	; 61
    648a:	de b7       	in	r29, 0x3e	; 62
    648c:	6e 97       	sbiw	r28, 0x1e	; 30
    648e:	0f b6       	in	r0, 0x3f	; 63
    6490:	f8 94       	cli
    6492:	de bf       	out	0x3e, r29	; 62
    6494:	0f be       	out	0x3f, r0	; 63
    6496:	cd bf       	out	0x3d, r28	; 61
    6498:	8c 01       	movw	r16, r24
    649a:	5b 01       	movw	r10, r22
    649c:	6a 01       	movw	r12, r20
    649e:	fc 01       	movw	r30, r24
    64a0:	ea 5e       	subi	r30, 0xEA	; 234
    64a2:	fe 4f       	sbci	r31, 0xFE	; 254
    64a4:	40 81       	ld	r20, Z
    64a6:	51 81       	ldd	r21, Z+1	; 0x01
    64a8:	24 ef       	ldi	r18, 0xF4	; 244
    64aa:	31 e0       	ldi	r19, 0x01	; 1
    64ac:	66 e0       	ldi	r22, 0x06	; 6
    64ae:	76 e0       	ldi	r23, 0x06	; 6
    64b0:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    64b4:	88 23       	and	r24, r24
    64b6:	09 f4       	brne	.+2      	; 0x64ba <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    64b8:	88 c0       	rjmp	.+272    	; 0x65ca <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    64ba:	8a e0       	ldi	r24, 0x0A	; 10
    64bc:	e5 ee       	ldi	r30, 0xE5	; 229
    64be:	f1 e0       	ldi	r31, 0x01	; 1
    64c0:	9e 01       	movw	r18, r28
    64c2:	2f 5f       	subi	r18, 0xFF	; 255
    64c4:	3f 4f       	sbci	r19, 0xFF	; 255
    64c6:	79 01       	movw	r14, r18
    64c8:	d9 01       	movw	r26, r18
    64ca:	01 90       	ld	r0, Z+
    64cc:	0d 92       	st	X+, r0
    64ce:	8a 95       	dec	r24
    64d0:	e1 f7       	brne	.-8      	; 0x64ca <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    64d2:	fe 01       	movw	r30, r28
    64d4:	3b 96       	adiw	r30, 0x0b	; 11
    64d6:	84 e1       	ldi	r24, 0x14	; 20
    64d8:	df 01       	movw	r26, r30
    64da:	1d 92       	st	X+, r1
    64dc:	8a 95       	dec	r24
    64de:	e9 f7       	brne	.-6      	; 0x64da <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    64e0:	43 e1       	ldi	r20, 0x13	; 19
    64e2:	50 e0       	ldi	r21, 0x00	; 0
    64e4:	b5 01       	movw	r22, r10
    64e6:	ce 01       	movw	r24, r28
    64e8:	0a 96       	adiw	r24, 0x0a	; 10
    64ea:	0e 94 aa 3c 	call	0x7954	; 0x7954 <strncpy>
    64ee:	f7 01       	movw	r30, r14
    64f0:	01 90       	ld	r0, Z+
    64f2:	00 20       	and	r0, r0
    64f4:	e9 f7       	brne	.-6      	; 0x64f0 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    64f6:	31 97       	sbiw	r30, 0x01	; 1
    64f8:	82 e2       	ldi	r24, 0x22	; 34
    64fa:	80 83       	st	Z, r24
    64fc:	24 ef       	ldi	r18, 0xF4	; 244
    64fe:	31 e0       	ldi	r19, 0x01	; 1
    6500:	43 e0       	ldi	r20, 0x03	; 3
    6502:	56 e0       	ldi	r21, 0x06	; 6
    6504:	b7 01       	movw	r22, r14
    6506:	c8 01       	movw	r24, r16
    6508:	0e 94 20 32 	call	0x6440	; 0x6440 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    650c:	88 23       	and	r24, r24
    650e:	09 f4       	brne	.+2      	; 0x6512 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    6510:	5c c0       	rjmp	.+184    	; 0x65ca <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    6512:	60 e0       	ldi	r22, 0x00	; 0
    6514:	76 e0       	ldi	r23, 0x06	; 6
    6516:	85 e6       	ldi	r24, 0x65	; 101
    6518:	97 e0       	ldi	r25, 0x07	; 7
    651a:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    651e:	b6 01       	movw	r22, r12
    6520:	85 e6       	ldi	r24, 0x65	; 101
    6522:	97 e0       	ldi	r25, 0x07	; 7
    6524:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    6528:	b6 01       	movw	r22, r12
    652a:	78 01       	movw	r14, r16
    652c:	b8 ee       	ldi	r27, 0xE8	; 232
    652e:	eb 1a       	sub	r14, r27
    6530:	be ef       	ldi	r27, 0xFE	; 254
    6532:	fb 0a       	sbc	r15, r27
    6534:	f7 01       	movw	r30, r14
    6536:	80 81       	ld	r24, Z
    6538:	91 81       	ldd	r25, Z+1	; 0x01
    653a:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    653e:	d7 01       	movw	r26, r14
    6540:	8d 91       	ld	r24, X+
    6542:	9c 91       	ld	r25, X
    6544:	0e 94 7f 28 	call	0x50fe	; 0x50fe <_ZN5Print7printlnEv>
    6548:	f7 01       	movw	r30, r14
    654a:	80 81       	ld	r24, Z
    654c:	91 81       	ldd	r25, Z+1	; 0x01
    654e:	dc 01       	movw	r26, r24
    6550:	ed 91       	ld	r30, X+
    6552:	fc 91       	ld	r31, X
    6554:	01 90       	ld	r0, Z+
    6556:	f0 81       	ld	r31, Z
    6558:	e0 2d       	mov	r30, r0
    655a:	6a e1       	ldi	r22, 0x1A	; 26
    655c:	09 95       	icall
    655e:	6c ee       	ldi	r22, 0xEC	; 236
    6560:	73 e0       	ldi	r23, 0x03	; 3
    6562:	85 e6       	ldi	r24, 0x65	; 101
    6564:	97 e0       	ldi	r25, 0x07	; 7
    6566:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    656a:	f8 01       	movw	r30, r16
    656c:	85 85       	ldd	r24, Z+13	; 0x0d
    656e:	84 50       	subi	r24, 0x04	; 4
    6570:	82 30       	cpi	r24, 0x02	; 2
    6572:	60 f4       	brcc	.+24     	; 0x658c <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    6574:	40 e0       	ldi	r20, 0x00	; 0
    6576:	68 ec       	ldi	r22, 0xC8	; 200
    6578:	70 e0       	ldi	r23, 0x00	; 0
    657a:	c8 01       	movw	r24, r16
    657c:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    6580:	40 e0       	ldi	r20, 0x00	; 0
    6582:	68 ec       	ldi	r22, 0xC8	; 200
    6584:	70 e0       	ldi	r23, 0x00	; 0
    6586:	c8 01       	movw	r24, r16
    6588:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    658c:	40 e0       	ldi	r20, 0x00	; 0
    658e:	60 e1       	ldi	r22, 0x10	; 16
    6590:	77 e2       	ldi	r23, 0x27	; 39
    6592:	c8 01       	movw	r24, r16
    6594:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    6598:	78 01       	movw	r14, r16
    659a:	fe e0       	ldi	r31, 0x0E	; 14
    659c:	ef 0e       	add	r14, r31
    659e:	f1 1c       	adc	r15, r1
    65a0:	6f ee       	ldi	r22, 0xEF	; 239
    65a2:	73 e0       	ldi	r23, 0x03	; 3
    65a4:	c7 01       	movw	r24, r14
    65a6:	0e 94 b9 3c 	call	0x7972	; 0x7972 <strstr>
    65aa:	89 2b       	or	r24, r25
    65ac:	71 f0       	breq	.+28     	; 0x65ca <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    65ae:	40 e0       	ldi	r20, 0x00	; 0
    65b0:	68 ee       	ldi	r22, 0xE8	; 232
    65b2:	73 e0       	ldi	r23, 0x03	; 3
    65b4:	c8 01       	movw	r24, r16
    65b6:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    65ba:	62 ec       	ldi	r22, 0xC2	; 194
    65bc:	73 e0       	ldi	r23, 0x03	; 3
    65be:	c7 01       	movw	r24, r14
    65c0:	0e 94 9a 3c 	call	0x7934	; 0x7934 <strcmp>
    65c4:	21 e0       	ldi	r18, 0x01	; 1
    65c6:	89 2b       	or	r24, r25
    65c8:	09 f0       	breq	.+2      	; 0x65cc <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	82 2f       	mov	r24, r18
    65ce:	6e 96       	adiw	r28, 0x1e	; 30
    65d0:	0f b6       	in	r0, 0x3f	; 63
    65d2:	f8 94       	cli
    65d4:	de bf       	out	0x3e, r29	; 62
    65d6:	0f be       	out	0x3f, r0	; 63
    65d8:	cd bf       	out	0x3d, r28	; 61
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	1f 91       	pop	r17
    65e0:	0f 91       	pop	r16
    65e2:	ff 90       	pop	r15
    65e4:	ef 90       	pop	r14
    65e6:	df 90       	pop	r13
    65e8:	cf 90       	pop	r12
    65ea:	bf 90       	pop	r11
    65ec:	af 90       	pop	r10
    65ee:	08 95       	ret

000065f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    65f0:	cf 92       	push	r12
    65f2:	df 92       	push	r13
    65f4:	ef 92       	push	r14
    65f6:	ff 92       	push	r15
    65f8:	0f 93       	push	r16
    65fa:	1f 93       	push	r17
    65fc:	cf 93       	push	r28
    65fe:	df 93       	push	r29
    6600:	ec 01       	movw	r28, r24
    6602:	68 01       	movw	r12, r16
    6604:	87 01       	movw	r16, r14
    6606:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    660a:	b6 01       	movw	r22, r12
    660c:	ce 01       	movw	r24, r28
    660e:	0e 96       	adiw	r24, 0x0e	; 14
    6610:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <strcmp_P>
    6614:	21 e0       	ldi	r18, 0x01	; 1
    6616:	89 2b       	or	r24, r25
    6618:	09 f0       	breq	.+2      	; 0x661c <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    661a:	20 e0       	ldi	r18, 0x00	; 0
    661c:	82 2f       	mov	r24, r18
    661e:	df 91       	pop	r29
    6620:	cf 91       	pop	r28
    6622:	1f 91       	pop	r17
    6624:	0f 91       	pop	r16
    6626:	ff 90       	pop	r15
    6628:	ef 90       	pop	r14
    662a:	df 90       	pop	r13
    662c:	cf 90       	pop	r12
    662e:	08 95       	ret

00006630 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    6630:	ef 92       	push	r14
    6632:	ff 92       	push	r15
    6634:	0f 93       	push	r16
    6636:	1f 93       	push	r17
    6638:	fc 01       	movw	r30, r24
    663a:	ea 5e       	subi	r30, 0xEA	; 234
    663c:	fe 4f       	sbci	r31, 0xFE	; 254
    663e:	00 81       	ld	r16, Z
    6640:	11 81       	ldd	r17, Z+1	; 0x01
    6642:	26 2f       	mov	r18, r22
    6644:	30 e0       	ldi	r19, 0x00	; 0
    6646:	40 e0       	ldi	r20, 0x00	; 0
    6648:	50 e0       	ldi	r21, 0x00	; 0
    664a:	64 ef       	ldi	r22, 0xF4	; 244
    664c:	e6 2e       	mov	r14, r22
    664e:	ff 24       	eor	r15, r15
    6650:	f3 94       	inc	r15
    6652:	63 e7       	ldi	r22, 0x73	; 115
    6654:	74 e0       	ldi	r23, 0x04	; 4
    6656:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    665a:	1f 91       	pop	r17
    665c:	0f 91       	pop	r16
    665e:	ff 90       	pop	r15
    6660:	ef 90       	pop	r14
    6662:	08 95       	ret

00006664 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    6664:	0f 93       	push	r16
    6666:	1f 93       	push	r17
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	ec 01       	movw	r28, r24
    666e:	8b 01       	movw	r16, r22
    6670:	0e 94 13 32 	call	0x6426	; 0x6426 <_ZN13Adafruit_FONA9HTTP_termEv>
    6674:	ce 01       	movw	r24, r28
    6676:	0e 94 08 32 	call	0x6410	; 0x6410 <_ZN13Adafruit_FONA9HTTP_initEv>
    667a:	81 11       	cpse	r24, r1
    667c:	02 c0       	rjmp	.+4      	; 0x6682 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    667e:	80 e0       	ldi	r24, 0x00	; 0
    6680:	38 c0       	rjmp	.+112    	; 0x66f2 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    6682:	21 e0       	ldi	r18, 0x01	; 1
    6684:	30 e0       	ldi	r19, 0x00	; 0
    6686:	40 e0       	ldi	r20, 0x00	; 0
    6688:	50 e0       	ldi	r21, 0x00	; 0
    668a:	68 e5       	ldi	r22, 0x58	; 88
    668c:	74 e0       	ldi	r23, 0x04	; 4
    668e:	ce 01       	movw	r24, r28
    6690:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    6694:	88 23       	and	r24, r24
    6696:	99 f3       	breq	.-26     	; 0x667e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    6698:	fe 01       	movw	r30, r28
    669a:	ec 5e       	subi	r30, 0xEC	; 236
    669c:	fe 4f       	sbci	r31, 0xFE	; 254
    669e:	40 81       	ld	r20, Z
    66a0:	51 81       	ldd	r21, Z+1	; 0x01
    66a2:	65 e5       	ldi	r22, 0x55	; 85
    66a4:	74 e0       	ldi	r23, 0x04	; 4
    66a6:	ce 01       	movw	r24, r28
    66a8:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    66ac:	88 23       	and	r24, r24
    66ae:	39 f3       	breq	.-50     	; 0x667e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    66b0:	a8 01       	movw	r20, r16
    66b2:	61 e5       	ldi	r22, 0x51	; 81
    66b4:	74 e0       	ldi	r23, 0x04	; 4
    66b6:	ce 01       	movw	r24, r28
    66b8:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    66bc:	88 23       	and	r24, r24
    66be:	f9 f2       	breq	.-66     	; 0x667e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    66c0:	fe 01       	movw	r30, r28
    66c2:	ed 5e       	subi	r30, 0xED	; 237
    66c4:	fe 4f       	sbci	r31, 0xFE	; 254
    66c6:	90 81       	ld	r25, Z
    66c8:	99 23       	and	r25, r25
    66ca:	99 f0       	breq	.+38     	; 0x66f2 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    66cc:	21 e0       	ldi	r18, 0x01	; 1
    66ce:	30 e0       	ldi	r19, 0x00	; 0
    66d0:	40 e0       	ldi	r20, 0x00	; 0
    66d2:	50 e0       	ldi	r21, 0x00	; 0
    66d4:	6b e4       	ldi	r22, 0x4B	; 75
    66d6:	74 e0       	ldi	r23, 0x04	; 4
    66d8:	ce 01       	movw	r24, r28
    66da:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    66de:	88 23       	and	r24, r24
    66e0:	71 f2       	breq	.-100    	; 0x667e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    66e2:	61 e0       	ldi	r22, 0x01	; 1
    66e4:	ce 01       	movw	r24, r28
    66e6:	df 91       	pop	r29
    66e8:	cf 91       	pop	r28
    66ea:	1f 91       	pop	r17
    66ec:	0f 91       	pop	r16
    66ee:	0c 94 18 33 	jmp	0x6630	; 0x6630 <_ZN13Adafruit_FONA8HTTP_sslEb>
    66f2:	df 91       	pop	r29
    66f4:	cf 91       	pop	r28
    66f6:	1f 91       	pop	r17
    66f8:	0f 91       	pop	r16
    66fa:	08 95       	ret

000066fc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    66fc:	ef 92       	push	r14
    66fe:	ff 92       	push	r15
    6700:	0f 93       	push	r16
    6702:	1f 93       	push	r17
    6704:	cf 93       	push	r28
    6706:	df 93       	push	r29
    6708:	ec 01       	movw	r28, r24
    670a:	79 01       	movw	r14, r18
    670c:	98 01       	movw	r18, r16
    670e:	0e 94 06 30 	call	0x600c	; 0x600c <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    6712:	b7 01       	movw	r22, r14
    6714:	ce 01       	movw	r24, r28
    6716:	0e 96       	adiw	r24, 0x0e	; 14
    6718:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <strcmp_P>
    671c:	21 e0       	ldi	r18, 0x01	; 1
    671e:	89 2b       	or	r24, r25
    6720:	09 f0       	breq	.+2      	; 0x6724 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    6722:	20 e0       	ldi	r18, 0x00	; 0
    6724:	82 2f       	mov	r24, r18
    6726:	df 91       	pop	r29
    6728:	cf 91       	pop	r28
    672a:	1f 91       	pop	r17
    672c:	0f 91       	pop	r16
    672e:	ff 90       	pop	r15
    6730:	ef 90       	pop	r14
    6732:	08 95       	ret

00006734 <_ZN13Adafruit_FONA10enableGPRSEb>:
    6734:	8f 92       	push	r8
    6736:	9f 92       	push	r9
    6738:	af 92       	push	r10
    673a:	bf 92       	push	r11
    673c:	cf 92       	push	r12
    673e:	df 92       	push	r13
    6740:	ef 92       	push	r14
    6742:	ff 92       	push	r15
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	cf 93       	push	r28
    674a:	df 93       	push	r29
    674c:	ec 01       	movw	r28, r24
    674e:	20 e2       	ldi	r18, 0x20	; 32
    6750:	3e e4       	ldi	r19, 0x4E	; 78
    6752:	66 23       	and	r22, r22
    6754:	09 f4       	brne	.+2      	; 0x6758 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    6756:	0f c1       	rjmp	.+542    	; 0x6976 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    6758:	48 ef       	ldi	r20, 0xF8	; 248
    675a:	55 e0       	ldi	r21, 0x05	; 5
    675c:	6d ee       	ldi	r22, 0xED	; 237
    675e:	75 e0       	ldi	r23, 0x05	; 5
    6760:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    6764:	7e 01       	movw	r14, r28
    6766:	8a ee       	ldi	r24, 0xEA	; 234
    6768:	e8 1a       	sub	r14, r24
    676a:	8e ef       	ldi	r24, 0xFE	; 254
    676c:	f8 0a       	sbc	r15, r24
    676e:	f7 01       	movw	r30, r14
    6770:	40 81       	ld	r20, Z
    6772:	51 81       	ldd	r21, Z+1	; 0x01
    6774:	20 e1       	ldi	r18, 0x10	; 16
    6776:	37 e2       	ldi	r19, 0x27	; 39
    6778:	62 ee       	ldi	r22, 0xE2	; 226
    677a:	75 e0       	ldi	r23, 0x05	; 5
    677c:	ce 01       	movw	r24, r28
    677e:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    6782:	88 23       	and	r24, r24
    6784:	09 f4       	brne	.+2      	; 0x6788 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    6786:	24 c1       	rjmp	.+584    	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    6788:	f7 01       	movw	r30, r14
    678a:	40 81       	ld	r20, Z
    678c:	51 81       	ldd	r21, Z+1	; 0x01
    678e:	20 e1       	ldi	r18, 0x10	; 16
    6790:	37 e2       	ldi	r19, 0x27	; 39
    6792:	64 ec       	ldi	r22, 0xC4	; 196
    6794:	75 e0       	ldi	r23, 0x05	; 5
    6796:	ce 01       	movw	r24, r28
    6798:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    679c:	88 23       	and	r24, r24
    679e:	09 f4       	brne	.+2      	; 0x67a2 <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    67a0:	17 c1       	rjmp	.+558    	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    67a2:	4e 01       	movw	r8, r28
    67a4:	f3 ef       	ldi	r31, 0xF3	; 243
    67a6:	8f 1a       	sub	r8, r31
    67a8:	fe ef       	ldi	r31, 0xFE	; 254
    67aa:	9f 0a       	sbc	r9, r31
    67ac:	f4 01       	movw	r30, r8
    67ae:	40 81       	ld	r20, Z
    67b0:	51 81       	ldd	r21, Z+1	; 0x01
    67b2:	41 15       	cp	r20, r1
    67b4:	51 05       	cpc	r21, r1
    67b6:	a9 f4       	brne	.+42     	; 0x67e2 <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    67b8:	f7 01       	movw	r30, r14
    67ba:	40 81       	ld	r20, Z
    67bc:	51 81       	ldd	r21, Z+1	; 0x01
    67be:	20 e3       	ldi	r18, 0x30	; 48
    67c0:	35 e7       	ldi	r19, 0x75	; 117
    67c2:	6f e5       	ldi	r22, 0x5F	; 95
    67c4:	75 e0       	ldi	r23, 0x05	; 5
    67c6:	ce 01       	movw	r24, r28
    67c8:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    67cc:	88 23       	and	r24, r24
    67ce:	09 f4       	brne	.+2      	; 0x67d2 <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    67d0:	ff c0       	rjmp	.+510    	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    67d2:	f7 01       	movw	r30, r14
    67d4:	40 81       	ld	r20, Z
    67d6:	51 81       	ldd	r21, Z+1	; 0x01
    67d8:	20 e1       	ldi	r18, 0x10	; 16
    67da:	37 e2       	ldi	r19, 0x27	; 39
    67dc:	66 e5       	ldi	r22, 0x56	; 86
    67de:	75 e0       	ldi	r23, 0x05	; 5
    67e0:	e8 c0       	rjmp	.+464    	; 0x69b2 <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    67e2:	f7 01       	movw	r30, r14
    67e4:	20 81       	ld	r18, Z
    67e6:	31 81       	ldd	r19, Z+1	; 0x01
    67e8:	00 e1       	ldi	r16, 0x10	; 16
    67ea:	17 e2       	ldi	r17, 0x27	; 39
    67ec:	60 eb       	ldi	r22, 0xB0	; 176
    67ee:	75 e0       	ldi	r23, 0x05	; 5
    67f0:	ce 01       	movw	r24, r28
    67f2:	0e 94 7e 33 	call	0x66fc	; 0x66fc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    67f6:	88 23       	and	r24, r24
    67f8:	09 f4       	brne	.+2      	; 0x67fc <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    67fa:	ea c0       	rjmp	.+468    	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    67fc:	ce 01       	movw	r24, r28
    67fe:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN13Adafruit_FONA10flushInputEv>
    6802:	8e 01       	movw	r16, r28
    6804:	08 5e       	subi	r16, 0xE8	; 232
    6806:	1e 4f       	sbci	r17, 0xFE	; 254
    6808:	66 ea       	ldi	r22, 0xA6	; 166
    680a:	75 e0       	ldi	r23, 0x05	; 5
    680c:	f8 01       	movw	r30, r16
    680e:	80 81       	ld	r24, Z
    6810:	91 81       	ldd	r25, Z+1	; 0x01
    6812:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6816:	f4 01       	movw	r30, r8
    6818:	60 81       	ld	r22, Z
    681a:	71 81       	ldd	r23, Z+1	; 0x01
    681c:	f8 01       	movw	r30, r16
    681e:	80 81       	ld	r24, Z
    6820:	91 81       	ldd	r25, Z+1	; 0x01
    6822:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6826:	5e 01       	movw	r10, r28
    6828:	f1 ef       	ldi	r31, 0xF1	; 241
    682a:	af 1a       	sub	r10, r31
    682c:	fe ef       	ldi	r31, 0xFE	; 254
    682e:	bf 0a       	sbc	r11, r31
    6830:	f5 01       	movw	r30, r10
    6832:	80 81       	ld	r24, Z
    6834:	91 81       	ldd	r25, Z+1	; 0x01
    6836:	89 2b       	or	r24, r25
    6838:	79 f0       	breq	.+30     	; 0x6858 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    683a:	60 e1       	ldi	r22, 0x10	; 16
    683c:	74 e0       	ldi	r23, 0x04	; 4
    683e:	f8 01       	movw	r30, r16
    6840:	80 81       	ld	r24, Z
    6842:	91 81       	ldd	r25, Z+1	; 0x01
    6844:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    6848:	f5 01       	movw	r30, r10
    684a:	60 81       	ld	r22, Z
    684c:	71 81       	ldd	r23, Z+1	; 0x01
    684e:	f8 01       	movw	r30, r16
    6850:	80 81       	ld	r24, Z
    6852:	91 81       	ldd	r25, Z+1	; 0x01
    6854:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6858:	6e 01       	movw	r12, r28
    685a:	ff ee       	ldi	r31, 0xEF	; 239
    685c:	cf 1a       	sub	r12, r31
    685e:	fe ef       	ldi	r31, 0xFE	; 254
    6860:	df 0a       	sbc	r13, r31
    6862:	f6 01       	movw	r30, r12
    6864:	80 81       	ld	r24, Z
    6866:	91 81       	ldd	r25, Z+1	; 0x01
    6868:	89 2b       	or	r24, r25
    686a:	79 f0       	breq	.+30     	; 0x688a <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    686c:	60 e1       	ldi	r22, 0x10	; 16
    686e:	74 e0       	ldi	r23, 0x04	; 4
    6870:	f8 01       	movw	r30, r16
    6872:	80 81       	ld	r24, Z
    6874:	91 81       	ldd	r25, Z+1	; 0x01
    6876:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    687a:	f6 01       	movw	r30, r12
    687c:	60 81       	ld	r22, Z
    687e:	71 81       	ldd	r23, Z+1	; 0x01
    6880:	f8 01       	movw	r30, r16
    6882:	80 81       	ld	r24, Z
    6884:	91 81       	ldd	r25, Z+1	; 0x01
    6886:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    688a:	62 e1       	ldi	r22, 0x12	; 18
    688c:	74 e0       	ldi	r23, 0x04	; 4
    688e:	f8 01       	movw	r30, r16
    6890:	80 81       	ld	r24, Z
    6892:	91 81       	ldd	r25, Z+1	; 0x01
    6894:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    6898:	6f e9       	ldi	r22, 0x9F	; 159
    689a:	75 e0       	ldi	r23, 0x05	; 5
    689c:	85 e6       	ldi	r24, 0x65	; 101
    689e:	97 e0       	ldi	r25, 0x07	; 7
    68a0:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    68a4:	65 e9       	ldi	r22, 0x95	; 149
    68a6:	75 e0       	ldi	r23, 0x05	; 5
    68a8:	85 e6       	ldi	r24, 0x65	; 101
    68aa:	97 e0       	ldi	r25, 0x07	; 7
    68ac:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    68b0:	f4 01       	movw	r30, r8
    68b2:	60 81       	ld	r22, Z
    68b4:	71 81       	ldd	r23, Z+1	; 0x01
    68b6:	85 e6       	ldi	r24, 0x65	; 101
    68b8:	97 e0       	ldi	r25, 0x07	; 7
    68ba:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    68be:	f5 01       	movw	r30, r10
    68c0:	80 81       	ld	r24, Z
    68c2:	91 81       	ldd	r25, Z+1	; 0x01
    68c4:	89 2b       	or	r24, r25
    68c6:	69 f0       	breq	.+26     	; 0x68e2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    68c8:	60 e1       	ldi	r22, 0x10	; 16
    68ca:	74 e0       	ldi	r23, 0x04	; 4
    68cc:	85 e6       	ldi	r24, 0x65	; 101
    68ce:	97 e0       	ldi	r25, 0x07	; 7
    68d0:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    68d4:	f5 01       	movw	r30, r10
    68d6:	60 81       	ld	r22, Z
    68d8:	71 81       	ldd	r23, Z+1	; 0x01
    68da:	85 e6       	ldi	r24, 0x65	; 101
    68dc:	97 e0       	ldi	r25, 0x07	; 7
    68de:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    68e2:	f6 01       	movw	r30, r12
    68e4:	80 81       	ld	r24, Z
    68e6:	91 81       	ldd	r25, Z+1	; 0x01
    68e8:	89 2b       	or	r24, r25
    68ea:	69 f0       	breq	.+26     	; 0x6906 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    68ec:	60 e1       	ldi	r22, 0x10	; 16
    68ee:	74 e0       	ldi	r23, 0x04	; 4
    68f0:	85 e6       	ldi	r24, 0x65	; 101
    68f2:	97 e0       	ldi	r25, 0x07	; 7
    68f4:	0e 94 76 28 	call	0x50ec	; 0x50ec <_ZN5Print5printEPKc>
    68f8:	f6 01       	movw	r30, r12
    68fa:	60 81       	ld	r22, Z
    68fc:	71 81       	ldd	r23, Z+1	; 0x01
    68fe:	85 e6       	ldi	r24, 0x65	; 101
    6900:	97 e0       	ldi	r25, 0x07	; 7
    6902:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6906:	62 e1       	ldi	r22, 0x12	; 18
    6908:	74 e0       	ldi	r23, 0x04	; 4
    690a:	85 e6       	ldi	r24, 0x65	; 101
    690c:	97 e0       	ldi	r25, 0x07	; 7
    690e:	0e 94 95 28 	call	0x512a	; 0x512a <_ZN5Print7printlnEPKc>
    6912:	f7 01       	movw	r30, r14
    6914:	60 81       	ld	r22, Z
    6916:	71 81       	ldd	r23, Z+1	; 0x01
    6918:	40 e1       	ldi	r20, 0x10	; 16
    691a:	57 e2       	ldi	r21, 0x27	; 39
    691c:	ce 01       	movw	r24, r28
    691e:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    6922:	88 23       	and	r24, r24
    6924:	09 f4       	brne	.+2      	; 0x6928 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    6926:	54 c0       	rjmp	.+168    	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    6928:	f5 01       	movw	r30, r10
    692a:	40 81       	ld	r20, Z
    692c:	51 81       	ldd	r21, Z+1	; 0x01
    692e:	41 15       	cp	r20, r1
    6930:	51 05       	cpc	r21, r1
    6932:	39 f4       	brne	.+14     	; 0x6942 <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    6934:	f6 01       	movw	r30, r12
    6936:	40 81       	ld	r20, Z
    6938:	51 81       	ldd	r21, Z+1	; 0x01
    693a:	41 15       	cp	r20, r1
    693c:	51 05       	cpc	r21, r1
    693e:	71 f4       	brne	.+28     	; 0x695c <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    6940:	3b cf       	rjmp	.-394    	; 0x67b8 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    6942:	f7 01       	movw	r30, r14
    6944:	20 81       	ld	r18, Z
    6946:	31 81       	ldd	r19, Z+1	; 0x01
    6948:	00 e1       	ldi	r16, 0x10	; 16
    694a:	17 e2       	ldi	r17, 0x27	; 39
    694c:	60 e8       	ldi	r22, 0x80	; 128
    694e:	75 e0       	ldi	r23, 0x05	; 5
    6950:	ce 01       	movw	r24, r28
    6952:	0e 94 7e 33 	call	0x66fc	; 0x66fc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    6956:	81 11       	cpse	r24, r1
    6958:	ed cf       	rjmp	.-38     	; 0x6934 <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    695a:	3a c0       	rjmp	.+116    	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    695c:	f7 01       	movw	r30, r14
    695e:	20 81       	ld	r18, Z
    6960:	31 81       	ldd	r19, Z+1	; 0x01
    6962:	00 e1       	ldi	r16, 0x10	; 16
    6964:	17 e2       	ldi	r17, 0x27	; 39
    6966:	6c e6       	ldi	r22, 0x6C	; 108
    6968:	75 e0       	ldi	r23, 0x05	; 5
    696a:	ce 01       	movw	r24, r28
    696c:	0e 94 7e 33 	call	0x66fc	; 0x66fc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    6970:	81 11       	cpse	r24, r1
    6972:	22 cf       	rjmp	.-444    	; 0x67b8 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    6974:	2d c0       	rjmp	.+90     	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    6976:	4e e4       	ldi	r20, 0x4E	; 78
    6978:	55 e0       	ldi	r21, 0x05	; 5
    697a:	63 e4       	ldi	r22, 0x43	; 67
    697c:	75 e0       	ldi	r23, 0x05	; 5
    697e:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    6982:	88 23       	and	r24, r24
    6984:	29 f1       	breq	.+74     	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    6986:	8e 01       	movw	r16, r28
    6988:	0a 5e       	subi	r16, 0xEA	; 234
    698a:	1e 4f       	sbci	r17, 0xFE	; 254
    698c:	f8 01       	movw	r30, r16
    698e:	40 81       	ld	r20, Z
    6990:	51 81       	ldd	r21, Z+1	; 0x01
    6992:	20 e1       	ldi	r18, 0x10	; 16
    6994:	37 e2       	ldi	r19, 0x27	; 39
    6996:	66 e3       	ldi	r22, 0x36	; 54
    6998:	75 e0       	ldi	r23, 0x05	; 5
    699a:	ce 01       	movw	r24, r28
    699c:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    69a0:	88 23       	and	r24, r24
    69a2:	b1 f0       	breq	.+44     	; 0x69d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    69a4:	f8 01       	movw	r30, r16
    69a6:	40 81       	ld	r20, Z
    69a8:	51 81       	ldd	r21, Z+1	; 0x01
    69aa:	20 e1       	ldi	r18, 0x10	; 16
    69ac:	37 e2       	ldi	r19, 0x27	; 39
    69ae:	6b e2       	ldi	r22, 0x2B	; 43
    69b0:	75 e0       	ldi	r23, 0x05	; 5
    69b2:	ce 01       	movw	r24, r28
    69b4:	df 91       	pop	r29
    69b6:	cf 91       	pop	r28
    69b8:	1f 91       	pop	r17
    69ba:	0f 91       	pop	r16
    69bc:	ff 90       	pop	r15
    69be:	ef 90       	pop	r14
    69c0:	df 90       	pop	r13
    69c2:	cf 90       	pop	r12
    69c4:	bf 90       	pop	r11
    69c6:	af 90       	pop	r10
    69c8:	9f 90       	pop	r9
    69ca:	8f 90       	pop	r8
    69cc:	0c 94 6a 30 	jmp	0x60d4	; 0x60d4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    69d0:	80 e0       	ldi	r24, 0x00	; 0
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	1f 91       	pop	r17
    69d8:	0f 91       	pop	r16
    69da:	ff 90       	pop	r15
    69dc:	ef 90       	pop	r14
    69de:	df 90       	pop	r13
    69e0:	cf 90       	pop	r12
    69e2:	bf 90       	pop	r11
    69e4:	af 90       	pop	r10
    69e6:	9f 90       	pop	r9
    69e8:	8f 90       	pop	r8
    69ea:	08 95       	ret

000069ec <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    69ec:	af 92       	push	r10
    69ee:	bf 92       	push	r11
    69f0:	cf 92       	push	r12
    69f2:	df 92       	push	r13
    69f4:	ef 92       	push	r14
    69f6:	ff 92       	push	r15
    69f8:	0f 93       	push	r16
    69fa:	cf 93       	push	r28
    69fc:	df 93       	push	r29
    69fe:	5b 01       	movw	r10, r22
    6a00:	6a 01       	movw	r12, r20
    6a02:	e2 2e       	mov	r14, r18
    6a04:	0e 96       	adiw	r24, 0x0e	; 14
    6a06:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <strstr_P>
    6a0a:	ec 01       	movw	r28, r24
    6a0c:	89 2b       	or	r24, r25
    6a0e:	c1 f0       	breq	.+48     	; 0x6a40 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    6a10:	c5 01       	movw	r24, r10
    6a12:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <__strlen_P>
    6a16:	8c 0f       	add	r24, r28
    6a18:	9d 1f       	adc	r25, r29
    6a1a:	c0 e0       	ldi	r28, 0x00	; 0
    6a1c:	f1 2c       	mov	r15, r1
    6a1e:	c0 17       	cp	r28, r16
    6a20:	41 f0       	breq	.+16     	; 0x6a32 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    6a22:	b7 01       	movw	r22, r14
    6a24:	0e 94 8f 3c 	call	0x791e	; 0x791e <strchr>
    6a28:	00 97       	sbiw	r24, 0x00	; 0
    6a2a:	51 f0       	breq	.+20     	; 0x6a40 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    6a2c:	01 96       	adiw	r24, 0x01	; 1
    6a2e:	cf 5f       	subi	r28, 0xFF	; 255
    6a30:	f6 cf       	rjmp	.-20     	; 0x6a1e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    6a32:	0e 94 3c 3c 	call	0x7878	; 0x7878 <atoi>
    6a36:	f6 01       	movw	r30, r12
    6a38:	91 83       	std	Z+1, r25	; 0x01
    6a3a:	80 83       	st	Z, r24
    6a3c:	81 e0       	ldi	r24, 0x01	; 1
    6a3e:	01 c0       	rjmp	.+2      	; 0x6a42 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    6a40:	80 e0       	ldi	r24, 0x00	; 0
    6a42:	df 91       	pop	r29
    6a44:	cf 91       	pop	r28
    6a46:	0f 91       	pop	r16
    6a48:	ff 90       	pop	r15
    6a4a:	ef 90       	pop	r14
    6a4c:	df 90       	pop	r13
    6a4e:	cf 90       	pop	r12
    6a50:	bf 90       	pop	r11
    6a52:	af 90       	pop	r10
    6a54:	08 95       	ret

00006a56 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    6a56:	ef 92       	push	r14
    6a58:	ff 92       	push	r15
    6a5a:	0f 93       	push	r16
    6a5c:	cf 93       	push	r28
    6a5e:	df 93       	push	r29
    6a60:	ec 01       	movw	r28, r24
    6a62:	7b 01       	movw	r14, r22
    6a64:	44 ef       	ldi	r20, 0xF4	; 244
    6a66:	51 e0       	ldi	r21, 0x01	; 1
    6a68:	6a e8       	ldi	r22, 0x8A	; 138
    6a6a:	74 e0       	ldi	r23, 0x04	; 4
    6a6c:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    6a70:	00 e0       	ldi	r16, 0x00	; 0
    6a72:	2c e2       	ldi	r18, 0x2C	; 44
    6a74:	a7 01       	movw	r20, r14
    6a76:	6f e7       	ldi	r22, 0x7F	; 127
    6a78:	74 e0       	ldi	r23, 0x04	; 4
    6a7a:	ce 01       	movw	r24, r28
    6a7c:	0e 94 f6 34 	call	0x69ec	; 0x69ec <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    6a80:	df 91       	pop	r29
    6a82:	cf 91       	pop	r28
    6a84:	0f 91       	pop	r16
    6a86:	ff 90       	pop	r15
    6a88:	ef 90       	pop	r14
    6a8a:	08 95       	ret

00006a8c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    6a8c:	4f 92       	push	r4
    6a8e:	5f 92       	push	r5
    6a90:	6f 92       	push	r6
    6a92:	7f 92       	push	r7
    6a94:	af 92       	push	r10
    6a96:	bf 92       	push	r11
    6a98:	cf 92       	push	r12
    6a9a:	df 92       	push	r13
    6a9c:	ef 92       	push	r14
    6a9e:	ff 92       	push	r15
    6aa0:	0f 93       	push	r16
    6aa2:	1f 93       	push	r17
    6aa4:	cf 93       	push	r28
    6aa6:	df 93       	push	r29
    6aa8:	ec 01       	movw	r28, r24
    6aaa:	5a 01       	movw	r10, r20
    6aac:	69 01       	movw	r12, r18
    6aae:	27 01       	movw	r4, r14
    6ab0:	38 01       	movw	r6, r16
    6ab2:	fc 01       	movw	r30, r24
    6ab4:	ea 5e       	subi	r30, 0xEA	; 234
    6ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    6ab8:	00 81       	ld	r16, Z
    6aba:	11 81       	ldd	r17, Z+1	; 0x01
    6abc:	26 2f       	mov	r18, r22
    6abe:	30 e0       	ldi	r19, 0x00	; 0
    6ac0:	40 e0       	ldi	r20, 0x00	; 0
    6ac2:	50 e0       	ldi	r21, 0x00	; 0
    6ac4:	84 ef       	ldi	r24, 0xF4	; 244
    6ac6:	e8 2e       	mov	r14, r24
    6ac8:	ff 24       	eor	r15, r15
    6aca:	f3 94       	inc	r15
    6acc:	60 eb       	ldi	r22, 0xB0	; 176
    6ace:	74 e0       	ldi	r23, 0x04	; 4
    6ad0:	ce 01       	movw	r24, r28
    6ad2:	0e 94 f8 32 	call	0x65f0	; 0x65f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    6ad6:	81 11       	cpse	r24, r1
    6ad8:	02 c0       	rjmp	.+4      	; 0x6ade <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    6ada:	80 e0       	ldi	r24, 0x00	; 0
    6adc:	17 c0       	rjmp	.+46     	; 0x6b0c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    6ade:	40 e0       	ldi	r20, 0x00	; 0
    6ae0:	b2 01       	movw	r22, r4
    6ae2:	ce 01       	movw	r24, r28
    6ae4:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    6ae8:	01 e0       	ldi	r16, 0x01	; 1
    6aea:	2c e2       	ldi	r18, 0x2C	; 44
    6aec:	a5 01       	movw	r20, r10
    6aee:	63 ea       	ldi	r22, 0xA3	; 163
    6af0:	74 e0       	ldi	r23, 0x04	; 4
    6af2:	ce 01       	movw	r24, r28
    6af4:	0e 94 f6 34 	call	0x69ec	; 0x69ec <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    6af8:	88 23       	and	r24, r24
    6afa:	79 f3       	breq	.-34     	; 0x6ada <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    6afc:	02 e0       	ldi	r16, 0x02	; 2
    6afe:	2c e2       	ldi	r18, 0x2C	; 44
    6b00:	a6 01       	movw	r20, r12
    6b02:	66 e9       	ldi	r22, 0x96	; 150
    6b04:	74 e0       	ldi	r23, 0x04	; 4
    6b06:	ce 01       	movw	r24, r28
    6b08:	0e 94 f6 34 	call	0x69ec	; 0x69ec <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    6b0c:	df 91       	pop	r29
    6b0e:	cf 91       	pop	r28
    6b10:	1f 91       	pop	r17
    6b12:	0f 91       	pop	r16
    6b14:	ff 90       	pop	r15
    6b16:	ef 90       	pop	r14
    6b18:	df 90       	pop	r13
    6b1a:	cf 90       	pop	r12
    6b1c:	bf 90       	pop	r11
    6b1e:	af 90       	pop	r10
    6b20:	7f 90       	pop	r7
    6b22:	6f 90       	pop	r6
    6b24:	5f 90       	pop	r5
    6b26:	4f 90       	pop	r4
    6b28:	08 95       	ret

00006b2a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    6b2a:	4f 92       	push	r4
    6b2c:	5f 92       	push	r5
    6b2e:	6f 92       	push	r6
    6b30:	7f 92       	push	r7
    6b32:	8f 92       	push	r8
    6b34:	9f 92       	push	r9
    6b36:	af 92       	push	r10
    6b38:	bf 92       	push	r11
    6b3a:	cf 92       	push	r12
    6b3c:	df 92       	push	r13
    6b3e:	ef 92       	push	r14
    6b40:	ff 92       	push	r15
    6b42:	0f 93       	push	r16
    6b44:	1f 93       	push	r17
    6b46:	cf 93       	push	r28
    6b48:	df 93       	push	r29
    6b4a:	ec 01       	movw	r28, r24
    6b4c:	2a 01       	movw	r4, r20
    6b4e:	39 01       	movw	r6, r18
    6b50:	48 01       	movw	r8, r16
    6b52:	57 01       	movw	r10, r14
    6b54:	0e 94 32 33 	call	0x6664	; 0x6664 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    6b58:	88 23       	and	r24, r24
    6b5a:	09 f4       	brne	.+2      	; 0x6b5e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    6b5c:	71 c0       	rjmp	.+226    	; 0x6c40 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    6b5e:	a2 01       	movw	r20, r4
    6b60:	6b e6       	ldi	r22, 0x6B	; 107
    6b62:	74 e0       	ldi	r23, 0x04	; 4
    6b64:	ce 01       	movw	r24, r28
    6b66:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    6b6a:	88 23       	and	r24, r24
    6b6c:	09 f4       	brne	.+2      	; 0x6b70 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    6b6e:	68 c0       	rjmp	.+208    	; 0x6c40 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    6b70:	a8 01       	movw	r20, r16
    6b72:	60 e0       	ldi	r22, 0x00	; 0
    6b74:	70 e0       	ldi	r23, 0x00	; 0
    6b76:	00 e1       	ldi	r16, 0x10	; 16
    6b78:	17 e2       	ldi	r17, 0x27	; 39
    6b7a:	20 e0       	ldi	r18, 0x00	; 0
    6b7c:	30 e0       	ldi	r19, 0x00	; 0
    6b7e:	ce 01       	movw	r24, r28
    6b80:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    6b84:	88 23       	and	r24, r24
    6b86:	09 f4       	brne	.+2      	; 0x6b8a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    6b88:	5b c0       	rjmp	.+182    	; 0x6c40 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    6b8a:	fe 01       	movw	r30, r28
    6b8c:	e8 5e       	subi	r30, 0xE8	; 232
    6b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    6b90:	80 81       	ld	r24, Z
    6b92:	91 81       	ldd	r25, Z+1	; 0x01
    6b94:	dc 01       	movw	r26, r24
    6b96:	ed 91       	ld	r30, X+
    6b98:	fc 91       	ld	r31, X
    6b9a:	02 80       	ldd	r0, Z+2	; 0x02
    6b9c:	f3 81       	ldd	r31, Z+3	; 0x03
    6b9e:	e0 2d       	mov	r30, r0
    6ba0:	a4 01       	movw	r20, r8
    6ba2:	b3 01       	movw	r22, r6
    6ba4:	09 95       	icall
    6ba6:	fe 01       	movw	r30, r28
    6ba8:	ea 5e       	subi	r30, 0xEA	; 234
    6baa:	fe 4f       	sbci	r31, 0xFE	; 254
    6bac:	60 81       	ld	r22, Z
    6bae:	71 81       	ldd	r23, Z+1	; 0x01
    6bb0:	40 e1       	ldi	r20, 0x10	; 16
    6bb2:	57 e2       	ldi	r21, 0x27	; 39
    6bb4:	ce 01       	movw	r24, r28
    6bb6:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    6bba:	88 23       	and	r24, r24
    6bbc:	09 f4       	brne	.+2      	; 0x6bc0 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    6bbe:	40 c0       	rjmp	.+128    	; 0x6c40 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    6bc0:	10 e1       	ldi	r17, 0x10	; 16
    6bc2:	e1 2e       	mov	r14, r17
    6bc4:	17 e2       	ldi	r17, 0x27	; 39
    6bc6:	f1 2e       	mov	r15, r17
    6bc8:	00 e0       	ldi	r16, 0x00	; 0
    6bca:	10 e0       	ldi	r17, 0x00	; 0
    6bcc:	96 01       	movw	r18, r12
    6bce:	a5 01       	movw	r20, r10
    6bd0:	61 e0       	ldi	r22, 0x01	; 1
    6bd2:	ce 01       	movw	r24, r28
    6bd4:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    6bd8:	88 23       	and	r24, r24
    6bda:	91 f1       	breq	.+100    	; 0x6c40 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    6bdc:	62 e6       	ldi	r22, 0x62	; 98
    6bde:	74 e0       	ldi	r23, 0x04	; 4
    6be0:	85 e6       	ldi	r24, 0x65	; 101
    6be2:	97 e0       	ldi	r25, 0x07	; 7
    6be4:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6be8:	f5 01       	movw	r30, r10
    6bea:	60 81       	ld	r22, Z
    6bec:	71 81       	ldd	r23, Z+1	; 0x01
    6bee:	4a e0       	ldi	r20, 0x0A	; 10
    6bf0:	50 e0       	ldi	r21, 0x00	; 0
    6bf2:	85 e6       	ldi	r24, 0x65	; 101
    6bf4:	97 e0       	ldi	r25, 0x07	; 7
    6bf6:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN5Print7printlnEji>
    6bfa:	6c e5       	ldi	r22, 0x5C	; 92
    6bfc:	74 e0       	ldi	r23, 0x04	; 4
    6bfe:	85 e6       	ldi	r24, 0x65	; 101
    6c00:	97 e0       	ldi	r25, 0x07	; 7
    6c02:	0e 94 52 28 	call	0x50a4	; 0x50a4 <_ZN5Print5printEPK19__FlashStringHelper>
    6c06:	d6 01       	movw	r26, r12
    6c08:	6d 91       	ld	r22, X+
    6c0a:	7c 91       	ld	r23, X
    6c0c:	4a e0       	ldi	r20, 0x0A	; 10
    6c0e:	50 e0       	ldi	r21, 0x00	; 0
    6c10:	85 e6       	ldi	r24, 0x65	; 101
    6c12:	97 e0       	ldi	r25, 0x07	; 7
    6c14:	0e 94 2e 29 	call	0x525c	; 0x525c <_ZN5Print7printlnEji>
    6c18:	b6 01       	movw	r22, r12
    6c1a:	ce 01       	movw	r24, r28
    6c1c:	df 91       	pop	r29
    6c1e:	cf 91       	pop	r28
    6c20:	1f 91       	pop	r17
    6c22:	0f 91       	pop	r16
    6c24:	ff 90       	pop	r15
    6c26:	ef 90       	pop	r14
    6c28:	df 90       	pop	r13
    6c2a:	cf 90       	pop	r12
    6c2c:	bf 90       	pop	r11
    6c2e:	af 90       	pop	r10
    6c30:	9f 90       	pop	r9
    6c32:	8f 90       	pop	r8
    6c34:	7f 90       	pop	r7
    6c36:	6f 90       	pop	r6
    6c38:	5f 90       	pop	r5
    6c3a:	4f 90       	pop	r4
    6c3c:	0c 94 2b 35 	jmp	0x6a56	; 0x6a56 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    6c40:	80 e0       	ldi	r24, 0x00	; 0
    6c42:	df 91       	pop	r29
    6c44:	cf 91       	pop	r28
    6c46:	1f 91       	pop	r17
    6c48:	0f 91       	pop	r16
    6c4a:	ff 90       	pop	r15
    6c4c:	ef 90       	pop	r14
    6c4e:	df 90       	pop	r13
    6c50:	cf 90       	pop	r12
    6c52:	bf 90       	pop	r11
    6c54:	af 90       	pop	r10
    6c56:	9f 90       	pop	r9
    6c58:	8f 90       	pop	r8
    6c5a:	7f 90       	pop	r7
    6c5c:	6f 90       	pop	r6
    6c5e:	5f 90       	pop	r5
    6c60:	4f 90       	pop	r4
    6c62:	08 95       	ret

00006c64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    6c64:	af 92       	push	r10
    6c66:	bf 92       	push	r11
    6c68:	cf 92       	push	r12
    6c6a:	df 92       	push	r13
    6c6c:	ef 92       	push	r14
    6c6e:	0f 93       	push	r16
    6c70:	1f 93       	push	r17
    6c72:	cf 93       	push	r28
    6c74:	df 93       	push	r29
    6c76:	ec 01       	movw	r28, r24
    6c78:	6a 01       	movw	r12, r20
    6c7a:	59 01       	movw	r10, r18
    6c7c:	10 2f       	mov	r17, r16
    6c7e:	0e 2d       	mov	r16, r14
    6c80:	44 ef       	ldi	r20, 0xF4	; 244
    6c82:	51 e0       	ldi	r21, 0x01	; 1
    6c84:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    6c88:	21 2f       	mov	r18, r17
    6c8a:	a5 01       	movw	r20, r10
    6c8c:	b6 01       	movw	r22, r12
    6c8e:	ce 01       	movw	r24, r28
    6c90:	0e 94 f6 34 	call	0x69ec	; 0x69ec <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    6c94:	18 2f       	mov	r17, r24
    6c96:	88 23       	and	r24, r24
    6c98:	31 f0       	breq	.+12     	; 0x6ca6 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    6c9a:	40 e0       	ldi	r20, 0x00	; 0
    6c9c:	64 ef       	ldi	r22, 0xF4	; 244
    6c9e:	71 e0       	ldi	r23, 0x01	; 1
    6ca0:	ce 01       	movw	r24, r28
    6ca2:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <_ZN13Adafruit_FONA8readlineEjb>
    6ca6:	81 2f       	mov	r24, r17
    6ca8:	df 91       	pop	r29
    6caa:	cf 91       	pop	r28
    6cac:	1f 91       	pop	r17
    6cae:	0f 91       	pop	r16
    6cb0:	ef 90       	pop	r14
    6cb2:	df 90       	pop	r13
    6cb4:	cf 90       	pop	r12
    6cb6:	bf 90       	pop	r11
    6cb8:	af 90       	pop	r10
    6cba:	08 95       	ret

00006cbc <_ZN13Adafruit_FONA14getBattPercentEPj>:
    6cbc:	ef 92       	push	r14
    6cbe:	0f 93       	push	r16
    6cc0:	9b 01       	movw	r18, r22
    6cc2:	ee 24       	eor	r14, r14
    6cc4:	e3 94       	inc	r14
    6cc6:	0c e2       	ldi	r16, 0x2C	; 44
    6cc8:	46 e3       	ldi	r20, 0x36	; 54
    6cca:	56 e0       	ldi	r21, 0x06	; 6
    6ccc:	6f e2       	ldi	r22, 0x2F	; 47
    6cce:	76 e0       	ldi	r23, 0x06	; 6
    6cd0:	0e 94 32 36 	call	0x6c64	; 0x6c64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    6cd4:	0f 91       	pop	r16
    6cd6:	ef 90       	pop	r14
    6cd8:	08 95       	ret

00006cda <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    6cda:	ef 92       	push	r14
    6cdc:	0f 93       	push	r16
    6cde:	cf 93       	push	r28
    6ce0:	df 93       	push	r29
    6ce2:	00 d0       	rcall	.+0      	; 0x6ce4 <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    6ce4:	cd b7       	in	r28, 0x3d	; 61
    6ce6:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    6ce8:	ee 24       	eor	r14, r14
    6cea:	e3 94       	inc	r14
    6cec:	0c e2       	ldi	r16, 0x2C	; 44
    6cee:	9e 01       	movw	r18, r28
    6cf0:	2f 5f       	subi	r18, 0xFF	; 255
    6cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    6cf4:	47 e2       	ldi	r20, 0x27	; 39
    6cf6:	56 e0       	ldi	r21, 0x06	; 6
    6cf8:	6e e1       	ldi	r22, 0x1E	; 30
    6cfa:	76 e0       	ldi	r23, 0x06	; 6
    6cfc:	0e 94 32 36 	call	0x6c64	; 0x6c64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    6d00:	88 23       	and	r24, r24
    6d02:	11 f0       	breq	.+4      	; 0x6d08 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    6d04:	89 81       	ldd	r24, Y+1	; 0x01
    6d06:	01 c0       	rjmp	.+2      	; 0x6d0a <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    6d08:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    6d0a:	0f 90       	pop	r0
    6d0c:	0f 90       	pop	r0
    6d0e:	df 91       	pop	r29
    6d10:	cf 91       	pop	r28
    6d12:	0f 91       	pop	r16
    6d14:	ef 90       	pop	r14
    6d16:	08 95       	ret

00006d18 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    6d18:	ef 92       	push	r14
    6d1a:	0f 93       	push	r16
    6d1c:	cf 93       	push	r28
    6d1e:	df 93       	push	r29
    6d20:	00 d0       	rcall	.+0      	; 0x6d22 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    6d22:	cd b7       	in	r28, 0x3d	; 61
    6d24:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    6d26:	e1 2c       	mov	r14, r1
    6d28:	0c e2       	ldi	r16, 0x2C	; 44
    6d2a:	9e 01       	movw	r18, r28
    6d2c:	2f 5f       	subi	r18, 0xFF	; 255
    6d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d30:	47 e1       	ldi	r20, 0x17	; 23
    6d32:	56 e0       	ldi	r21, 0x06	; 6
    6d34:	60 e1       	ldi	r22, 0x10	; 16
    6d36:	76 e0       	ldi	r23, 0x06	; 6
    6d38:	0e 94 32 36 	call	0x6c64	; 0x6c64 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    6d3c:	88 23       	and	r24, r24
    6d3e:	11 f0       	breq	.+4      	; 0x6d44 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    6d40:	89 81       	ldd	r24, Y+1	; 0x01
    6d42:	01 c0       	rjmp	.+2      	; 0x6d46 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    6d44:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    6d46:	0f 90       	pop	r0
    6d48:	0f 90       	pop	r0
    6d4a:	df 91       	pop	r29
    6d4c:	cf 91       	pop	r28
    6d4e:	0f 91       	pop	r16
    6d50:	ef 90       	pop	r14
    6d52:	08 95       	ret

00006d54 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    6d54:	20 91 4d 08 	lds	r18, 0x084D	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6d58:	30 91 4e 08 	lds	r19, 0x084E	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6d5c:	28 17       	cp	r18, r24
    6d5e:	39 07       	cpc	r19, r25
    6d60:	b9 f4       	brne	.+46     	; 0x6d90 <_ZN14SoftwareSerial4readEv+0x3c>
    6d62:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6d66:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6d6a:	98 17       	cp	r25, r24
    6d6c:	89 f0       	breq	.+34     	; 0x6d90 <_ZN14SoftwareSerial4readEv+0x3c>
    6d6e:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6d72:	f0 e0       	ldi	r31, 0x00	; 0
    6d74:	e3 5f       	subi	r30, 0xF3	; 243
    6d76:	f7 4f       	sbci	r31, 0xF7	; 247
    6d78:	80 81       	ld	r24, Z
    6d7a:	20 91 0b 08 	lds	r18, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6d7e:	30 e0       	ldi	r19, 0x00	; 0
    6d80:	2f 5f       	subi	r18, 0xFF	; 255
    6d82:	3f 4f       	sbci	r19, 0xFF	; 255
    6d84:	2f 73       	andi	r18, 0x3F	; 63
    6d86:	33 27       	eor	r19, r19
    6d88:	20 93 0b 08 	sts	0x080B, r18	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	08 95       	ret
    6d90:	8f ef       	ldi	r24, 0xFF	; 255
    6d92:	9f ef       	ldi	r25, 0xFF	; 255
    6d94:	08 95       	ret

00006d96 <_ZN14SoftwareSerial5writeEh>:
    6d96:	1f 93       	push	r17
    6d98:	cf 93       	push	r28
    6d9a:	df 93       	push	r29
    6d9c:	dc 01       	movw	r26, r24
    6d9e:	5c 96       	adiw	r26, 0x1c	; 28
    6da0:	8d 91       	ld	r24, X+
    6da2:	9c 91       	ld	r25, X
    6da4:	5d 97       	sbiw	r26, 0x1d	; 29
    6da6:	00 97       	sbiw	r24, 0x00	; 0
    6da8:	39 f4       	brne	.+14     	; 0x6db8 <_ZN14SoftwareSerial5writeEh+0x22>
    6daa:	21 e0       	ldi	r18, 0x01	; 1
    6dac:	30 e0       	ldi	r19, 0x00	; 0
    6dae:	13 96       	adiw	r26, 0x03	; 3
    6db0:	3c 93       	st	X, r19
    6db2:	2e 93       	st	-X, r18
    6db4:	12 97       	sbiw	r26, 0x02	; 2
    6db6:	3b c0       	rjmp	.+118    	; 0x6e2e <_ZN14SoftwareSerial5writeEh+0x98>
    6db8:	51 96       	adiw	r26, 0x11	; 17
    6dba:	ed 91       	ld	r30, X+
    6dbc:	fc 91       	ld	r31, X
    6dbe:	52 97       	sbiw	r26, 0x12	; 18
    6dc0:	50 96       	adiw	r26, 0x10	; 16
    6dc2:	2c 91       	ld	r18, X
    6dc4:	50 97       	sbiw	r26, 0x10	; 16
    6dc6:	32 2f       	mov	r19, r18
    6dc8:	30 95       	com	r19
    6dca:	1f b7       	in	r17, 0x3f	; 63
    6dcc:	5e 96       	adiw	r26, 0x1e	; 30
    6dce:	4c 91       	ld	r20, X
    6dd0:	5e 97       	sbiw	r26, 0x1e	; 30
    6dd2:	74 2f       	mov	r23, r20
    6dd4:	72 70       	andi	r23, 0x02	; 2
    6dd6:	41 fd       	sbrc	r20, 1
    6dd8:	60 95       	com	r22
    6dda:	f8 94       	cli
    6ddc:	40 81       	ld	r20, Z
    6dde:	77 23       	and	r23, r23
    6de0:	11 f0       	breq	.+4      	; 0x6de6 <_ZN14SoftwareSerial5writeEh+0x50>
    6de2:	42 2b       	or	r20, r18
    6de4:	01 c0       	rjmp	.+2      	; 0x6de8 <_ZN14SoftwareSerial5writeEh+0x52>
    6de6:	43 23       	and	r20, r19
    6de8:	40 83       	st	Z, r20
    6dea:	ec 01       	movw	r28, r24
    6dec:	21 97       	sbiw	r28, 0x01	; 1
    6dee:	f1 f7       	brne	.-4      	; 0x6dec <_ZN14SoftwareSerial5writeEh+0x56>
    6df0:	48 e0       	ldi	r20, 0x08	; 8
    6df2:	50 81       	ld	r21, Z
    6df4:	60 ff       	sbrs	r22, 0
    6df6:	02 c0       	rjmp	.+4      	; 0x6dfc <_ZN14SoftwareSerial5writeEh+0x66>
    6df8:	52 2b       	or	r21, r18
    6dfa:	01 c0       	rjmp	.+2      	; 0x6dfe <_ZN14SoftwareSerial5writeEh+0x68>
    6dfc:	53 23       	and	r21, r19
    6dfe:	50 83       	st	Z, r21
    6e00:	ec 01       	movw	r28, r24
    6e02:	21 97       	sbiw	r28, 0x01	; 1
    6e04:	f1 f7       	brne	.-4      	; 0x6e02 <_ZN14SoftwareSerial5writeEh+0x6c>
    6e06:	66 95       	lsr	r22
    6e08:	41 50       	subi	r20, 0x01	; 1
    6e0a:	99 f7       	brne	.-26     	; 0x6df2 <_ZN14SoftwareSerial5writeEh+0x5c>
    6e0c:	80 81       	ld	r24, Z
    6e0e:	77 23       	and	r23, r23
    6e10:	19 f0       	breq	.+6      	; 0x6e18 <_ZN14SoftwareSerial5writeEh+0x82>
    6e12:	83 23       	and	r24, r19
    6e14:	80 83       	st	Z, r24
    6e16:	02 c0       	rjmp	.+4      	; 0x6e1c <_ZN14SoftwareSerial5writeEh+0x86>
    6e18:	28 2b       	or	r18, r24
    6e1a:	20 83       	st	Z, r18
    6e1c:	1f bf       	out	0x3f, r17	; 63
    6e1e:	5c 96       	adiw	r26, 0x1c	; 28
    6e20:	8d 91       	ld	r24, X+
    6e22:	9c 91       	ld	r25, X
    6e24:	5d 97       	sbiw	r26, 0x1d	; 29
    6e26:	01 97       	sbiw	r24, 0x01	; 1
    6e28:	f1 f7       	brne	.-4      	; 0x6e26 <_ZN14SoftwareSerial5writeEh+0x90>
    6e2a:	81 e0       	ldi	r24, 0x01	; 1
    6e2c:	90 e0       	ldi	r25, 0x00	; 0
    6e2e:	df 91       	pop	r29
    6e30:	cf 91       	pop	r28
    6e32:	1f 91       	pop	r17
    6e34:	08 95       	ret

00006e36 <_ZN14SoftwareSerial5flushEv>:
    6e36:	08 95       	ret

00006e38 <_ZN14SoftwareSerial4peekEv>:
    6e38:	20 91 4d 08 	lds	r18, 0x084D	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6e3c:	30 91 4e 08 	lds	r19, 0x084E	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6e40:	28 17       	cp	r18, r24
    6e42:	39 07       	cpc	r19, r25
    6e44:	71 f4       	brne	.+28     	; 0x6e62 <_ZN14SoftwareSerial4peekEv+0x2a>
    6e46:	90 91 0b 08 	lds	r25, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6e4a:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6e4e:	98 17       	cp	r25, r24
    6e50:	41 f0       	breq	.+16     	; 0x6e62 <_ZN14SoftwareSerial4peekEv+0x2a>
    6e52:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6e56:	f0 e0       	ldi	r31, 0x00	; 0
    6e58:	e3 5f       	subi	r30, 0xF3	; 243
    6e5a:	f7 4f       	sbci	r31, 0xF7	; 247
    6e5c:	80 81       	ld	r24, Z
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	08 95       	ret
    6e62:	8f ef       	ldi	r24, 0xFF	; 255
    6e64:	9f ef       	ldi	r25, 0xFF	; 255
    6e66:	08 95       	ret

00006e68 <_ZN14SoftwareSerial9availableEv>:
    6e68:	20 91 4d 08 	lds	r18, 0x084D	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6e6c:	30 91 4e 08 	lds	r19, 0x084E	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6e70:	28 17       	cp	r18, r24
    6e72:	39 07       	cpc	r19, r25
    6e74:	71 f4       	brne	.+28     	; 0x6e92 <_ZN14SoftwareSerial9availableEv+0x2a>
    6e76:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6e7a:	20 91 0b 08 	lds	r18, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	80 5c       	subi	r24, 0xC0	; 192
    6e82:	9f 4f       	sbci	r25, 0xFF	; 255
    6e84:	82 1b       	sub	r24, r18
    6e86:	91 09       	sbc	r25, r1
    6e88:	60 e4       	ldi	r22, 0x40	; 64
    6e8a:	70 e0       	ldi	r23, 0x00	; 0
    6e8c:	0e 94 7a 39 	call	0x72f4	; 0x72f4 <__divmodhi4>
    6e90:	08 95       	ret
    6e92:	80 e0       	ldi	r24, 0x00	; 0
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	08 95       	ret

00006e98 <_ZN14SoftwareSerial13stopListeningEv>:
    6e98:	e0 91 4d 08 	lds	r30, 0x084D	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6e9c:	f0 91 4e 08 	lds	r31, 0x084E	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6ea0:	e8 17       	cp	r30, r24
    6ea2:	f9 07       	cpc	r31, r25
    6ea4:	69 f4       	brne	.+26     	; 0x6ec0 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    6ea6:	a3 89       	ldd	r26, Z+19	; 0x13
    6ea8:	b4 89       	ldd	r27, Z+20	; 0x14
    6eaa:	9c 91       	ld	r25, X
    6eac:	85 89       	ldd	r24, Z+21	; 0x15
    6eae:	80 95       	com	r24
    6eb0:	89 23       	and	r24, r25
    6eb2:	8c 93       	st	X, r24
    6eb4:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6eb8:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6ebc:	81 e0       	ldi	r24, 0x01	; 1
    6ebe:	08 95       	ret
    6ec0:	80 e0       	ldi	r24, 0x00	; 0
    6ec2:	08 95       	ret

00006ec4 <_ZN14SoftwareSerial6listenEv>:
    6ec4:	cf 93       	push	r28
    6ec6:	df 93       	push	r29
    6ec8:	ec 01       	movw	r28, r24
    6eca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6ecc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6ece:	89 2b       	or	r24, r25
    6ed0:	f1 f0       	breq	.+60     	; 0x6f0e <_ZN14SoftwareSerial6listenEv+0x4a>
    6ed2:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6ed6:	90 91 4e 08 	lds	r25, 0x084E	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6eda:	c8 17       	cp	r28, r24
    6edc:	d9 07       	cpc	r29, r25
    6ede:	b9 f0       	breq	.+46     	; 0x6f0e <_ZN14SoftwareSerial6listenEv+0x4a>
    6ee0:	00 97       	sbiw	r24, 0x00	; 0
    6ee2:	11 f0       	breq	.+4      	; 0x6ee8 <_ZN14SoftwareSerial6listenEv+0x24>
    6ee4:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <_ZN14SoftwareSerial13stopListeningEv>
    6ee8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6eea:	8e 7f       	andi	r24, 0xFE	; 254
    6eec:	8e 8f       	std	Y+30, r24	; 0x1e
    6eee:	10 92 0c 08 	sts	0x080C, r1	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6ef2:	10 92 0b 08 	sts	0x080B, r1	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6ef6:	d0 93 4e 08 	sts	0x084E, r29	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6efa:	c0 93 4d 08 	sts	0x084D, r28	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6efe:	eb 89       	ldd	r30, Y+19	; 0x13
    6f00:	fc 89       	ldd	r31, Y+20	; 0x14
    6f02:	90 81       	ld	r25, Z
    6f04:	8d 89       	ldd	r24, Y+21	; 0x15
    6f06:	89 2b       	or	r24, r25
    6f08:	80 83       	st	Z, r24
    6f0a:	81 e0       	ldi	r24, 0x01	; 1
    6f0c:	01 c0       	rjmp	.+2      	; 0x6f10 <_ZN14SoftwareSerial6listenEv+0x4c>
    6f0e:	80 e0       	ldi	r24, 0x00	; 0
    6f10:	df 91       	pop	r29
    6f12:	cf 91       	pop	r28
    6f14:	08 95       	ret

00006f16 <__vector_3>:
    6f16:	1f 92       	push	r1
    6f18:	0f 92       	push	r0
    6f1a:	0f b6       	in	r0, 0x3f	; 63
    6f1c:	0f 92       	push	r0
    6f1e:	11 24       	eor	r1, r1
    6f20:	2f 93       	push	r18
    6f22:	3f 93       	push	r19
    6f24:	4f 93       	push	r20
    6f26:	5f 93       	push	r21
    6f28:	6f 93       	push	r22
    6f2a:	7f 93       	push	r23
    6f2c:	8f 93       	push	r24
    6f2e:	9f 93       	push	r25
    6f30:	af 93       	push	r26
    6f32:	bf 93       	push	r27
    6f34:	ef 93       	push	r30
    6f36:	ff 93       	push	r31
    6f38:	e0 91 4d 08 	lds	r30, 0x084D	; 0x80084d <_ZN14SoftwareSerial13active_objectE>
    6f3c:	f0 91 4e 08 	lds	r31, 0x084E	; 0x80084e <_ZN14SoftwareSerial13active_objectE+0x1>
    6f40:	30 97       	sbiw	r30, 0x00	; 0
    6f42:	09 f4       	brne	.+2      	; 0x6f46 <__vector_3+0x30>
    6f44:	51 c0       	rjmp	.+162    	; 0x6fe8 <__vector_3+0xd2>
    6f46:	96 8d       	ldd	r25, Z+30	; 0x1e
    6f48:	a6 85       	ldd	r26, Z+14	; 0x0e
    6f4a:	b7 85       	ldd	r27, Z+15	; 0x0f
    6f4c:	85 85       	ldd	r24, Z+13	; 0x0d
    6f4e:	91 ff       	sbrs	r25, 1
    6f50:	04 c0       	rjmp	.+8      	; 0x6f5a <__vector_3+0x44>
    6f52:	9c 91       	ld	r25, X
    6f54:	89 23       	and	r24, r25
    6f56:	29 f4       	brne	.+10     	; 0x6f62 <__vector_3+0x4c>
    6f58:	47 c0       	rjmp	.+142    	; 0x6fe8 <__vector_3+0xd2>
    6f5a:	9c 91       	ld	r25, X
    6f5c:	89 23       	and	r24, r25
    6f5e:	09 f0       	breq	.+2      	; 0x6f62 <__vector_3+0x4c>
    6f60:	43 c0       	rjmp	.+134    	; 0x6fe8 <__vector_3+0xd2>
    6f62:	a3 89       	ldd	r26, Z+19	; 0x13
    6f64:	b4 89       	ldd	r27, Z+20	; 0x14
    6f66:	9c 91       	ld	r25, X
    6f68:	85 89       	ldd	r24, Z+21	; 0x15
    6f6a:	80 95       	com	r24
    6f6c:	89 23       	and	r24, r25
    6f6e:	8c 93       	st	X, r24
    6f70:	86 89       	ldd	r24, Z+22	; 0x16
    6f72:	97 89       	ldd	r25, Z+23	; 0x17
    6f74:	01 97       	sbiw	r24, 0x01	; 1
    6f76:	f1 f7       	brne	.-4      	; 0x6f74 <__vector_3+0x5e>
    6f78:	60 8d       	ldd	r22, Z+24	; 0x18
    6f7a:	71 8d       	ldd	r23, Z+25	; 0x19
    6f7c:	a6 85       	ldd	r26, Z+14	; 0x0e
    6f7e:	b7 85       	ldd	r27, Z+15	; 0x0f
    6f80:	55 85       	ldd	r21, Z+13	; 0x0d
    6f82:	38 e0       	ldi	r19, 0x08	; 8
    6f84:	20 e0       	ldi	r18, 0x00	; 0
    6f86:	cb 01       	movw	r24, r22
    6f88:	01 97       	sbiw	r24, 0x01	; 1
    6f8a:	f1 f7       	brne	.-4      	; 0x6f88 <__vector_3+0x72>
    6f8c:	82 2f       	mov	r24, r18
    6f8e:	90 e0       	ldi	r25, 0x00	; 0
    6f90:	95 95       	asr	r25
    6f92:	87 95       	ror	r24
    6f94:	28 2f       	mov	r18, r24
    6f96:	4c 91       	ld	r20, X
    6f98:	45 23       	and	r20, r21
    6f9a:	09 f0       	breq	.+2      	; 0x6f9e <__vector_3+0x88>
    6f9c:	20 68       	ori	r18, 0x80	; 128
    6f9e:	31 50       	subi	r19, 0x01	; 1
    6fa0:	91 f7       	brne	.-28     	; 0x6f86 <__vector_3+0x70>
    6fa2:	86 8d       	ldd	r24, Z+30	; 0x1e
    6fa4:	81 fd       	sbrc	r24, 1
    6fa6:	20 95       	com	r18
    6fa8:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6fac:	90 e0       	ldi	r25, 0x00	; 0
    6fae:	01 96       	adiw	r24, 0x01	; 1
    6fb0:	8f 73       	andi	r24, 0x3F	; 63
    6fb2:	99 27       	eor	r25, r25
    6fb4:	30 91 0b 08 	lds	r19, 0x080B	; 0x80080b <_ZN14SoftwareSerial20_receive_buffer_headE>
    6fb8:	38 17       	cp	r19, r24
    6fba:	49 f0       	breq	.+18     	; 0x6fce <__vector_3+0xb8>
    6fbc:	a0 91 0c 08 	lds	r26, 0x080C	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6fc0:	b0 e0       	ldi	r27, 0x00	; 0
    6fc2:	a3 5f       	subi	r26, 0xF3	; 243
    6fc4:	b7 4f       	sbci	r27, 0xF7	; 247
    6fc6:	2c 93       	st	X, r18
    6fc8:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    6fcc:	03 c0       	rjmp	.+6      	; 0x6fd4 <__vector_3+0xbe>
    6fce:	86 8d       	ldd	r24, Z+30	; 0x1e
    6fd0:	81 60       	ori	r24, 0x01	; 1
    6fd2:	86 8f       	std	Z+30, r24	; 0x1e
    6fd4:	82 8d       	ldd	r24, Z+26	; 0x1a
    6fd6:	93 8d       	ldd	r25, Z+27	; 0x1b
    6fd8:	01 97       	sbiw	r24, 0x01	; 1
    6fda:	f1 f7       	brne	.-4      	; 0x6fd8 <__vector_3+0xc2>
    6fdc:	a3 89       	ldd	r26, Z+19	; 0x13
    6fde:	b4 89       	ldd	r27, Z+20	; 0x14
    6fe0:	9c 91       	ld	r25, X
    6fe2:	85 89       	ldd	r24, Z+21	; 0x15
    6fe4:	89 2b       	or	r24, r25
    6fe6:	8c 93       	st	X, r24
    6fe8:	ff 91       	pop	r31
    6fea:	ef 91       	pop	r30
    6fec:	bf 91       	pop	r27
    6fee:	af 91       	pop	r26
    6ff0:	9f 91       	pop	r25
    6ff2:	8f 91       	pop	r24
    6ff4:	7f 91       	pop	r23
    6ff6:	6f 91       	pop	r22
    6ff8:	5f 91       	pop	r21
    6ffa:	4f 91       	pop	r20
    6ffc:	3f 91       	pop	r19
    6ffe:	2f 91       	pop	r18
    7000:	0f 90       	pop	r0
    7002:	0f be       	out	0x3f, r0	; 63
    7004:	0f 90       	pop	r0
    7006:	1f 90       	pop	r1
    7008:	18 95       	reti

0000700a <_ZN14SoftwareSerial5setTXEh>:
    700a:	1f 93       	push	r17
    700c:	cf 93       	push	r28
    700e:	df 93       	push	r29
    7010:	ec 01       	movw	r28, r24
    7012:	16 2f       	mov	r17, r22
    7014:	6e 8d       	ldd	r22, Y+30	; 0x1e
    7016:	66 95       	lsr	r22
    7018:	61 70       	andi	r22, 0x01	; 1
    701a:	81 e0       	ldi	r24, 0x01	; 1
    701c:	68 27       	eor	r22, r24
    701e:	81 2f       	mov	r24, r17
    7020:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
    7024:	61 e0       	ldi	r22, 0x01	; 1
    7026:	81 2f       	mov	r24, r17
    7028:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
    702c:	81 2f       	mov	r24, r17
    702e:	90 e0       	ldi	r25, 0x00	; 0
    7030:	fc 01       	movw	r30, r24
    7032:	e8 54       	subi	r30, 0x48	; 72
    7034:	fc 4f       	sbci	r31, 0xFC	; 252
    7036:	e4 91       	lpm	r30, Z
    7038:	e8 8b       	std	Y+16, r30	; 0x10
    703a:	fc 01       	movw	r30, r24
    703c:	e4 53       	subi	r30, 0x34	; 52
    703e:	fc 4f       	sbci	r31, 0xFC	; 252
    7040:	e4 91       	lpm	r30, Z
    7042:	f0 e0       	ldi	r31, 0x00	; 0
    7044:	ee 0f       	add	r30, r30
    7046:	ff 1f       	adc	r31, r31
    7048:	e6 51       	subi	r30, 0x16	; 22
    704a:	fc 4f       	sbci	r31, 0xFC	; 252
    704c:	85 91       	lpm	r24, Z+
    704e:	94 91       	lpm	r25, Z
    7050:	9a 8b       	std	Y+18, r25	; 0x12
    7052:	89 8b       	std	Y+17, r24	; 0x11
    7054:	df 91       	pop	r29
    7056:	cf 91       	pop	r28
    7058:	1f 91       	pop	r17
    705a:	08 95       	ret

0000705c <_ZN14SoftwareSerial5setRXEh>:
    705c:	1f 93       	push	r17
    705e:	cf 93       	push	r28
    7060:	df 93       	push	r29
    7062:	ec 01       	movw	r28, r24
    7064:	16 2f       	mov	r17, r22
    7066:	60 e0       	ldi	r22, 0x00	; 0
    7068:	81 2f       	mov	r24, r17
    706a:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <pinMode>
    706e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7070:	81 fd       	sbrc	r24, 1
    7072:	04 c0       	rjmp	.+8      	; 0x707c <_ZN14SoftwareSerial5setRXEh+0x20>
    7074:	61 e0       	ldi	r22, 0x01	; 1
    7076:	81 2f       	mov	r24, r17
    7078:	0e 94 28 2c 	call	0x5850	; 0x5850 <digitalWrite>
    707c:	1c 87       	std	Y+12, r17	; 0x0c
    707e:	81 2f       	mov	r24, r17
    7080:	90 e0       	ldi	r25, 0x00	; 0
    7082:	fc 01       	movw	r30, r24
    7084:	e8 54       	subi	r30, 0x48	; 72
    7086:	fc 4f       	sbci	r31, 0xFC	; 252
    7088:	e4 91       	lpm	r30, Z
    708a:	ed 87       	std	Y+13, r30	; 0x0d
    708c:	fc 01       	movw	r30, r24
    708e:	e4 53       	subi	r30, 0x34	; 52
    7090:	fc 4f       	sbci	r31, 0xFC	; 252
    7092:	e4 91       	lpm	r30, Z
    7094:	f0 e0       	ldi	r31, 0x00	; 0
    7096:	ee 0f       	add	r30, r30
    7098:	ff 1f       	adc	r31, r31
    709a:	e0 52       	subi	r30, 0x20	; 32
    709c:	fc 4f       	sbci	r31, 0xFC	; 252
    709e:	85 91       	lpm	r24, Z+
    70a0:	94 91       	lpm	r25, Z
    70a2:	9f 87       	std	Y+15, r25	; 0x0f
    70a4:	8e 87       	std	Y+14, r24	; 0x0e
    70a6:	df 91       	pop	r29
    70a8:	cf 91       	pop	r28
    70aa:	1f 91       	pop	r17
    70ac:	08 95       	ret

000070ae <_ZN14SoftwareSerialC1Ehhb>:
    70ae:	1f 93       	push	r17
    70b0:	cf 93       	push	r28
    70b2:	df 93       	push	r29
    70b4:	ec 01       	movw	r28, r24
    70b6:	16 2f       	mov	r17, r22
    70b8:	1b 82       	std	Y+3, r1	; 0x03
    70ba:	1a 82       	std	Y+2, r1	; 0x02
    70bc:	88 ee       	ldi	r24, 0xE8	; 232
    70be:	93 e0       	ldi	r25, 0x03	; 3
    70c0:	a0 e0       	ldi	r26, 0x00	; 0
    70c2:	b0 e0       	ldi	r27, 0x00	; 0
    70c4:	8c 83       	std	Y+4, r24	; 0x04
    70c6:	9d 83       	std	Y+5, r25	; 0x05
    70c8:	ae 83       	std	Y+6, r26	; 0x06
    70ca:	bf 83       	std	Y+7, r27	; 0x07
    70cc:	88 e2       	ldi	r24, 0x28	; 40
    70ce:	94 e0       	ldi	r25, 0x04	; 4
    70d0:	99 83       	std	Y+1, r25	; 0x01
    70d2:	88 83       	st	Y, r24
    70d4:	1f 8a       	std	Y+23, r1	; 0x17
    70d6:	1e 8a       	std	Y+22, r1	; 0x16
    70d8:	19 8e       	std	Y+25, r1	; 0x19
    70da:	18 8e       	std	Y+24, r1	; 0x18
    70dc:	1b 8e       	std	Y+27, r1	; 0x1b
    70de:	1a 8e       	std	Y+26, r1	; 0x1a
    70e0:	1d 8e       	std	Y+29, r1	; 0x1d
    70e2:	1c 8e       	std	Y+28, r1	; 0x1c
    70e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    70e6:	8e 7f       	andi	r24, 0xFE	; 254
    70e8:	20 fb       	bst	r18, 0
    70ea:	81 f9       	bld	r24, 1
    70ec:	8e 8f       	std	Y+30, r24	; 0x1e
    70ee:	64 2f       	mov	r22, r20
    70f0:	ce 01       	movw	r24, r28
    70f2:	0e 94 05 38 	call	0x700a	; 0x700a <_ZN14SoftwareSerial5setTXEh>
    70f6:	61 2f       	mov	r22, r17
    70f8:	ce 01       	movw	r24, r28
    70fa:	df 91       	pop	r29
    70fc:	cf 91       	pop	r28
    70fe:	1f 91       	pop	r17
    7100:	0c 94 2e 38 	jmp	0x705c	; 0x705c <_ZN14SoftwareSerial5setRXEh>

00007104 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    7104:	cf 93       	push	r28
    7106:	df 93       	push	r29
    7108:	ec 01       	movw	r28, r24
    710a:	9a 01       	movw	r18, r20
    710c:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    710e:	1b 8e       	std	Y+27, r1	; 0x1b
    7110:	1a 8e       	std	Y+26, r1	; 0x1a
    7112:	19 8e       	std	Y+25, r1	; 0x19
    7114:	18 8e       	std	Y+24, r1	; 0x18
    7116:	1f 8a       	std	Y+23, r1	; 0x17
    7118:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    711a:	60 e0       	ldi	r22, 0x00	; 0
    711c:	79 e0       	ldi	r23, 0x09	; 9
    711e:	8d e3       	ldi	r24, 0x3D	; 61
    7120:	90 e0       	ldi	r25, 0x00	; 0
    7122:	0e 94 b0 39 	call	0x7360	; 0x7360 <__divmodsi4>
    7126:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    7128:	24 30       	cpi	r18, 0x04	; 4
    712a:	31 05       	cpc	r19, r1
    712c:	18 f0       	brcs	.+6      	; 0x7134 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    712e:	c9 01       	movw	r24, r18
    7130:	03 97       	sbiw	r24, 0x03	; 3
    7132:	02 c0       	rjmp	.+4      	; 0x7138 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    7134:	81 e0       	ldi	r24, 0x01	; 1
    7136:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    7138:	9d 8f       	std	Y+29, r25	; 0x1d
    713a:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    713c:	6c 85       	ldd	r22, Y+12	; 0x0c
    713e:	66 31       	cpi	r22, 0x16	; 22
    7140:	08 f0       	brcs	.+2      	; 0x7144 <_ZN14SoftwareSerial5beginEl+0x40>
    7142:	69 c0       	rjmp	.+210    	; 0x7216 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    7144:	c9 01       	movw	r24, r18
    7146:	96 95       	lsr	r25
    7148:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    714a:	84 31       	cpi	r24, 0x14	; 20
    714c:	91 05       	cpc	r25, r1
    714e:	10 f0       	brcs	.+4      	; 0x7154 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    7150:	43 97       	sbiw	r24, 0x13	; 19
    7152:	02 c0       	rjmp	.+4      	; 0x7158 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    7154:	81 e0       	ldi	r24, 0x01	; 1
    7156:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    7158:	9f 8b       	std	Y+23, r25	; 0x17
    715a:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    715c:	36 97       	sbiw	r30, 0x06	; 6
    715e:	18 f0       	brcs	.+6      	; 0x7166 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    7160:	c9 01       	movw	r24, r18
    7162:	05 97       	sbiw	r24, 0x05	; 5
    7164:	02 c0       	rjmp	.+4      	; 0x716a <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    7166:	81 e0       	ldi	r24, 0x01	; 1
    7168:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    716a:	99 8f       	std	Y+25, r25	; 0x19
    716c:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    716e:	c9 01       	movw	r24, r18
    7170:	88 0f       	add	r24, r24
    7172:	99 1f       	adc	r25, r25
    7174:	28 0f       	add	r18, r24
    7176:	39 1f       	adc	r19, r25
    7178:	36 95       	lsr	r19
    717a:	27 95       	ror	r18
    717c:	36 95       	lsr	r19
    717e:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    7180:	2d 30       	cpi	r18, 0x0D	; 13
    7182:	31 05       	cpc	r19, r1
    7184:	18 f0       	brcs	.+6      	; 0x718c <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    7186:	2c 50       	subi	r18, 0x0C	; 12
    7188:	31 09       	sbc	r19, r1
    718a:	02 c0       	rjmp	.+4      	; 0x7190 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    718c:	21 e0       	ldi	r18, 0x01	; 1
    718e:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    7190:	3b 8f       	std	Y+27, r19	; 0x1b
    7192:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    7194:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    7198:	68 30       	cpi	r22, 0x08	; 8
    719a:	50 f0       	brcs	.+20     	; 0x71b0 <_ZN14SoftwareSerial5beginEl+0xac>
    719c:	21 e0       	ldi	r18, 0x01	; 1
    719e:	6e 30       	cpi	r22, 0x0E	; 14
    71a0:	08 f4       	brcc	.+2      	; 0x71a4 <_ZN14SoftwareSerial5beginEl+0xa0>
    71a2:	20 e0       	ldi	r18, 0x00	; 0
    71a4:	81 e0       	ldi	r24, 0x01	; 1
    71a6:	01 c0       	rjmp	.+2      	; 0x71aa <_ZN14SoftwareSerial5beginEl+0xa6>
    71a8:	88 0f       	add	r24, r24
    71aa:	2a 95       	dec	r18
    71ac:	ea f7       	brpl	.-6      	; 0x71a8 <_ZN14SoftwareSerial5beginEl+0xa4>
    71ae:	01 c0       	rjmp	.+2      	; 0x71b2 <_ZN14SoftwareSerial5beginEl+0xae>
    71b0:	84 e0       	ldi	r24, 0x04	; 4
    71b2:	89 2b       	or	r24, r25
    71b4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    71b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    71ba:	98 30       	cpi	r25, 0x08	; 8
    71bc:	38 f0       	brcs	.+14     	; 0x71cc <_ZN14SoftwareSerial5beginEl+0xc8>
    71be:	9e 30       	cpi	r25, 0x0E	; 14
    71c0:	40 f0       	brcs	.+16     	; 0x71d2 <_ZN14SoftwareSerial5beginEl+0xce>
    71c2:	96 31       	cpi	r25, 0x16	; 22
    71c4:	48 f0       	brcs	.+18     	; 0x71d8 <_ZN14SoftwareSerial5beginEl+0xd4>
    71c6:	20 e0       	ldi	r18, 0x00	; 0
    71c8:	30 e0       	ldi	r19, 0x00	; 0
    71ca:	08 c0       	rjmp	.+16     	; 0x71dc <_ZN14SoftwareSerial5beginEl+0xd8>
    71cc:	2d e6       	ldi	r18, 0x6D	; 109
    71ce:	30 e0       	ldi	r19, 0x00	; 0
    71d0:	05 c0       	rjmp	.+10     	; 0x71dc <_ZN14SoftwareSerial5beginEl+0xd8>
    71d2:	2b e6       	ldi	r18, 0x6B	; 107
    71d4:	30 e0       	ldi	r19, 0x00	; 0
    71d6:	02 c0       	rjmp	.+4      	; 0x71dc <_ZN14SoftwareSerial5beginEl+0xd8>
    71d8:	2c e6       	ldi	r18, 0x6C	; 108
    71da:	30 e0       	ldi	r19, 0x00	; 0
    71dc:	3c 8b       	std	Y+20, r19	; 0x14
    71de:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    71e0:	98 30       	cpi	r25, 0x08	; 8
    71e2:	30 f4       	brcc	.+12     	; 0x71f0 <_ZN14SoftwareSerial5beginEl+0xec>
    71e4:	81 e0       	ldi	r24, 0x01	; 1
    71e6:	01 c0       	rjmp	.+2      	; 0x71ea <_ZN14SoftwareSerial5beginEl+0xe6>
    71e8:	88 0f       	add	r24, r24
    71ea:	9a 95       	dec	r25
    71ec:	ea f7       	brpl	.-6      	; 0x71e8 <_ZN14SoftwareSerial5beginEl+0xe4>
    71ee:	0e c0       	rjmp	.+28     	; 0x720c <_ZN14SoftwareSerial5beginEl+0x108>
    71f0:	29 2f       	mov	r18, r25
    71f2:	30 e0       	ldi	r19, 0x00	; 0
    71f4:	9e 30       	cpi	r25, 0x0E	; 14
    71f6:	18 f4       	brcc	.+6      	; 0x71fe <_ZN14SoftwareSerial5beginEl+0xfa>
    71f8:	28 50       	subi	r18, 0x08	; 8
    71fa:	31 09       	sbc	r19, r1
    71fc:	02 c0       	rjmp	.+4      	; 0x7202 <_ZN14SoftwareSerial5beginEl+0xfe>
    71fe:	2e 50       	subi	r18, 0x0E	; 14
    7200:	31 09       	sbc	r19, r1
    7202:	81 e0       	ldi	r24, 0x01	; 1
    7204:	01 c0       	rjmp	.+2      	; 0x7208 <_ZN14SoftwareSerial5beginEl+0x104>
    7206:	88 0f       	add	r24, r24
    7208:	2a 95       	dec	r18
    720a:	ea f7       	brpl	.-6      	; 0x7206 <_ZN14SoftwareSerial5beginEl+0x102>
    720c:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    720e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7210:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7212:	01 97       	sbiw	r24, 0x01	; 1
    7214:	f1 f7       	brne	.-4      	; 0x7212 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    7216:	ce 01       	movw	r24, r28
}
    7218:	df 91       	pop	r29
    721a:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    721c:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <_ZN14SoftwareSerial6listenEv>

00007220 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    7220:	08 95       	ret

00007222 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    7222:	08 95       	ret

00007224 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    7224:	1f 92       	push	r1
    7226:	0f 92       	push	r0
    7228:	0f b6       	in	r0, 0x3f	; 63
    722a:	0f 92       	push	r0
    722c:	11 24       	eor	r1, r1
    722e:	2f 93       	push	r18
    7230:	3f 93       	push	r19
    7232:	4f 93       	push	r20
    7234:	5f 93       	push	r21
    7236:	6f 93       	push	r22
    7238:	7f 93       	push	r23
    723a:	8f 93       	push	r24
    723c:	9f 93       	push	r25
    723e:	af 93       	push	r26
    7240:	bf 93       	push	r27
    7242:	ef 93       	push	r30
    7244:	ff 93       	push	r31
    7246:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <intFunc>
    724a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <intFunc+0x1>
    724e:	09 95       	icall
    7250:	ff 91       	pop	r31
    7252:	ef 91       	pop	r30
    7254:	bf 91       	pop	r27
    7256:	af 91       	pop	r26
    7258:	9f 91       	pop	r25
    725a:	8f 91       	pop	r24
    725c:	7f 91       	pop	r23
    725e:	6f 91       	pop	r22
    7260:	5f 91       	pop	r21
    7262:	4f 91       	pop	r20
    7264:	3f 91       	pop	r19
    7266:	2f 91       	pop	r18
    7268:	0f 90       	pop	r0
    726a:	0f be       	out	0x3f, r0	; 63
    726c:	0f 90       	pop	r0
    726e:	1f 90       	pop	r1
    7270:	18 95       	reti

00007272 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    7272:	1f 92       	push	r1
    7274:	0f 92       	push	r0
    7276:	0f b6       	in	r0, 0x3f	; 63
    7278:	0f 92       	push	r0
    727a:	11 24       	eor	r1, r1
    727c:	2f 93       	push	r18
    727e:	3f 93       	push	r19
    7280:	4f 93       	push	r20
    7282:	5f 93       	push	r21
    7284:	6f 93       	push	r22
    7286:	7f 93       	push	r23
    7288:	8f 93       	push	r24
    728a:	9f 93       	push	r25
    728c:	af 93       	push	r26
    728e:	bf 93       	push	r27
    7290:	ef 93       	push	r30
    7292:	ff 93       	push	r31
    7294:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc+0x2>
    7298:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x3>
    729c:	09 95       	icall
    729e:	ff 91       	pop	r31
    72a0:	ef 91       	pop	r30
    72a2:	bf 91       	pop	r27
    72a4:	af 91       	pop	r26
    72a6:	9f 91       	pop	r25
    72a8:	8f 91       	pop	r24
    72aa:	7f 91       	pop	r23
    72ac:	6f 91       	pop	r22
    72ae:	5f 91       	pop	r21
    72b0:	4f 91       	pop	r20
    72b2:	3f 91       	pop	r19
    72b4:	2f 91       	pop	r18
    72b6:	0f 90       	pop	r0
    72b8:	0f be       	out	0x3f, r0	; 63
    72ba:	0f 90       	pop	r0
    72bc:	1f 90       	pop	r1
    72be:	18 95       	reti

000072c0 <__cmpsf2>:
    72c0:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__fp_cmp>
    72c4:	08 f4       	brcc	.+2      	; 0x72c8 <__cmpsf2+0x8>
    72c6:	81 e0       	ldi	r24, 0x01	; 1
    72c8:	08 95       	ret

000072ca <__unordsf2>:
    72ca:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__fp_cmp>
    72ce:	88 0b       	sbc	r24, r24
    72d0:	99 0b       	sbc	r25, r25
    72d2:	08 95       	ret

000072d4 <__mulsi3>:
    72d4:	db 01       	movw	r26, r22
    72d6:	8f 93       	push	r24
    72d8:	9f 93       	push	r25
    72da:	0e 94 d5 39 	call	0x73aa	; 0x73aa <__muluhisi3>
    72de:	bf 91       	pop	r27
    72e0:	af 91       	pop	r26
    72e2:	a2 9f       	mul	r26, r18
    72e4:	80 0d       	add	r24, r0
    72e6:	91 1d       	adc	r25, r1
    72e8:	a3 9f       	mul	r26, r19
    72ea:	90 0d       	add	r25, r0
    72ec:	b2 9f       	mul	r27, r18
    72ee:	90 0d       	add	r25, r0
    72f0:	11 24       	eor	r1, r1
    72f2:	08 95       	ret

000072f4 <__divmodhi4>:
    72f4:	97 fb       	bst	r25, 7
    72f6:	07 2e       	mov	r0, r23
    72f8:	16 f4       	brtc	.+4      	; 0x72fe <__divmodhi4+0xa>
    72fa:	00 94       	com	r0
    72fc:	07 d0       	rcall	.+14     	; 0x730c <__divmodhi4_neg1>
    72fe:	77 fd       	sbrc	r23, 7
    7300:	09 d0       	rcall	.+18     	; 0x7314 <__divmodhi4_neg2>
    7302:	0e 94 29 3a 	call	0x7452	; 0x7452 <__udivmodhi4>
    7306:	07 fc       	sbrc	r0, 7
    7308:	05 d0       	rcall	.+10     	; 0x7314 <__divmodhi4_neg2>
    730a:	3e f4       	brtc	.+14     	; 0x731a <__divmodhi4_exit>

0000730c <__divmodhi4_neg1>:
    730c:	90 95       	com	r25
    730e:	81 95       	neg	r24
    7310:	9f 4f       	sbci	r25, 0xFF	; 255
    7312:	08 95       	ret

00007314 <__divmodhi4_neg2>:
    7314:	70 95       	com	r23
    7316:	61 95       	neg	r22
    7318:	7f 4f       	sbci	r23, 0xFF	; 255

0000731a <__divmodhi4_exit>:
    731a:	08 95       	ret

0000731c <__udivmodsi4>:
    731c:	a1 e2       	ldi	r26, 0x21	; 33
    731e:	1a 2e       	mov	r1, r26
    7320:	aa 1b       	sub	r26, r26
    7322:	bb 1b       	sub	r27, r27
    7324:	fd 01       	movw	r30, r26
    7326:	0d c0       	rjmp	.+26     	; 0x7342 <__udivmodsi4_ep>

00007328 <__udivmodsi4_loop>:
    7328:	aa 1f       	adc	r26, r26
    732a:	bb 1f       	adc	r27, r27
    732c:	ee 1f       	adc	r30, r30
    732e:	ff 1f       	adc	r31, r31
    7330:	a2 17       	cp	r26, r18
    7332:	b3 07       	cpc	r27, r19
    7334:	e4 07       	cpc	r30, r20
    7336:	f5 07       	cpc	r31, r21
    7338:	20 f0       	brcs	.+8      	; 0x7342 <__udivmodsi4_ep>
    733a:	a2 1b       	sub	r26, r18
    733c:	b3 0b       	sbc	r27, r19
    733e:	e4 0b       	sbc	r30, r20
    7340:	f5 0b       	sbc	r31, r21

00007342 <__udivmodsi4_ep>:
    7342:	66 1f       	adc	r22, r22
    7344:	77 1f       	adc	r23, r23
    7346:	88 1f       	adc	r24, r24
    7348:	99 1f       	adc	r25, r25
    734a:	1a 94       	dec	r1
    734c:	69 f7       	brne	.-38     	; 0x7328 <__udivmodsi4_loop>
    734e:	60 95       	com	r22
    7350:	70 95       	com	r23
    7352:	80 95       	com	r24
    7354:	90 95       	com	r25
    7356:	9b 01       	movw	r18, r22
    7358:	ac 01       	movw	r20, r24
    735a:	bd 01       	movw	r22, r26
    735c:	cf 01       	movw	r24, r30
    735e:	08 95       	ret

00007360 <__divmodsi4>:
    7360:	05 2e       	mov	r0, r21
    7362:	97 fb       	bst	r25, 7
    7364:	1e f4       	brtc	.+6      	; 0x736c <__divmodsi4+0xc>
    7366:	00 94       	com	r0
    7368:	0e 94 c7 39 	call	0x738e	; 0x738e <__negsi2>
    736c:	57 fd       	sbrc	r21, 7
    736e:	07 d0       	rcall	.+14     	; 0x737e <__divmodsi4_neg2>
    7370:	0e 94 8e 39 	call	0x731c	; 0x731c <__udivmodsi4>
    7374:	07 fc       	sbrc	r0, 7
    7376:	03 d0       	rcall	.+6      	; 0x737e <__divmodsi4_neg2>
    7378:	4e f4       	brtc	.+18     	; 0x738c <__divmodsi4_exit>
    737a:	0c 94 c7 39 	jmp	0x738e	; 0x738e <__negsi2>

0000737e <__divmodsi4_neg2>:
    737e:	50 95       	com	r21
    7380:	40 95       	com	r20
    7382:	30 95       	com	r19
    7384:	21 95       	neg	r18
    7386:	3f 4f       	sbci	r19, 0xFF	; 255
    7388:	4f 4f       	sbci	r20, 0xFF	; 255
    738a:	5f 4f       	sbci	r21, 0xFF	; 255

0000738c <__divmodsi4_exit>:
    738c:	08 95       	ret

0000738e <__negsi2>:
    738e:	90 95       	com	r25
    7390:	80 95       	com	r24
    7392:	70 95       	com	r23
    7394:	61 95       	neg	r22
    7396:	7f 4f       	sbci	r23, 0xFF	; 255
    7398:	8f 4f       	sbci	r24, 0xFF	; 255
    739a:	9f 4f       	sbci	r25, 0xFF	; 255
    739c:	08 95       	ret

0000739e <__tablejump2__>:
    739e:	ee 0f       	add	r30, r30
    73a0:	ff 1f       	adc	r31, r31
    73a2:	05 90       	lpm	r0, Z+
    73a4:	f4 91       	lpm	r31, Z
    73a6:	e0 2d       	mov	r30, r0
    73a8:	09 94       	ijmp

000073aa <__muluhisi3>:
    73aa:	0e 94 3d 3a 	call	0x747a	; 0x747a <__umulhisi3>
    73ae:	a5 9f       	mul	r26, r21
    73b0:	90 0d       	add	r25, r0
    73b2:	b4 9f       	mul	r27, r20
    73b4:	90 0d       	add	r25, r0
    73b6:	a4 9f       	mul	r26, r20
    73b8:	80 0d       	add	r24, r0
    73ba:	91 1d       	adc	r25, r1
    73bc:	11 24       	eor	r1, r1
    73be:	08 95       	ret

000073c0 <__umulsidi3>:
    73c0:	e8 94       	clt

000073c2 <__umulsidi3_helper>:
    73c2:	df 93       	push	r29
    73c4:	cf 93       	push	r28
    73c6:	fc 01       	movw	r30, r24
    73c8:	db 01       	movw	r26, r22
    73ca:	0e 94 3d 3a 	call	0x747a	; 0x747a <__umulhisi3>
    73ce:	7f 93       	push	r23
    73d0:	6f 93       	push	r22
    73d2:	e9 01       	movw	r28, r18
    73d4:	9a 01       	movw	r18, r20
    73d6:	ac 01       	movw	r20, r24
    73d8:	bf 93       	push	r27
    73da:	af 93       	push	r26
    73dc:	3f 93       	push	r19
    73de:	2f 93       	push	r18
    73e0:	df 01       	movw	r26, r30
    73e2:	0e 94 3d 3a 	call	0x747a	; 0x747a <__umulhisi3>
    73e6:	26 f4       	brtc	.+8      	; 0x73f0 <__umulsidi3_helper+0x2e>
    73e8:	6c 1b       	sub	r22, r28
    73ea:	7d 0b       	sbc	r23, r29
    73ec:	82 0b       	sbc	r24, r18
    73ee:	93 0b       	sbc	r25, r19
    73f0:	9e 01       	movw	r18, r28
    73f2:	eb 01       	movw	r28, r22
    73f4:	fc 01       	movw	r30, r24
    73f6:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__muldi3_6>
    73fa:	af 91       	pop	r26
    73fc:	bf 91       	pop	r27
    73fe:	2f 91       	pop	r18
    7400:	3f 91       	pop	r19
    7402:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__muldi3_6>
    7406:	be 01       	movw	r22, r28
    7408:	cf 01       	movw	r24, r30
    740a:	f9 01       	movw	r30, r18
    740c:	2f 91       	pop	r18
    740e:	3f 91       	pop	r19
    7410:	cf 91       	pop	r28
    7412:	df 91       	pop	r29
    7414:	08 95       	ret

00007416 <__ashrdi3>:
    7416:	97 fb       	bst	r25, 7
    7418:	10 f8       	bld	r1, 0

0000741a <__lshrdi3>:
    741a:	16 94       	lsr	r1
    741c:	00 08       	sbc	r0, r0
    741e:	0f 93       	push	r16
    7420:	08 30       	cpi	r16, 0x08	; 8
    7422:	98 f0       	brcs	.+38     	; 0x744a <__lshrdi3+0x30>
    7424:	08 50       	subi	r16, 0x08	; 8
    7426:	23 2f       	mov	r18, r19
    7428:	34 2f       	mov	r19, r20
    742a:	45 2f       	mov	r20, r21
    742c:	56 2f       	mov	r21, r22
    742e:	67 2f       	mov	r22, r23
    7430:	78 2f       	mov	r23, r24
    7432:	89 2f       	mov	r24, r25
    7434:	90 2d       	mov	r25, r0
    7436:	f4 cf       	rjmp	.-24     	; 0x7420 <__lshrdi3+0x6>
    7438:	05 94       	asr	r0
    743a:	97 95       	ror	r25
    743c:	87 95       	ror	r24
    743e:	77 95       	ror	r23
    7440:	67 95       	ror	r22
    7442:	57 95       	ror	r21
    7444:	47 95       	ror	r20
    7446:	37 95       	ror	r19
    7448:	27 95       	ror	r18
    744a:	0a 95       	dec	r16
    744c:	aa f7       	brpl	.-22     	; 0x7438 <__lshrdi3+0x1e>
    744e:	0f 91       	pop	r16
    7450:	08 95       	ret

00007452 <__udivmodhi4>:
    7452:	aa 1b       	sub	r26, r26
    7454:	bb 1b       	sub	r27, r27
    7456:	51 e1       	ldi	r21, 0x11	; 17
    7458:	07 c0       	rjmp	.+14     	; 0x7468 <__udivmodhi4_ep>

0000745a <__udivmodhi4_loop>:
    745a:	aa 1f       	adc	r26, r26
    745c:	bb 1f       	adc	r27, r27
    745e:	a6 17       	cp	r26, r22
    7460:	b7 07       	cpc	r27, r23
    7462:	10 f0       	brcs	.+4      	; 0x7468 <__udivmodhi4_ep>
    7464:	a6 1b       	sub	r26, r22
    7466:	b7 0b       	sbc	r27, r23

00007468 <__udivmodhi4_ep>:
    7468:	88 1f       	adc	r24, r24
    746a:	99 1f       	adc	r25, r25
    746c:	5a 95       	dec	r21
    746e:	a9 f7       	brne	.-22     	; 0x745a <__udivmodhi4_loop>
    7470:	80 95       	com	r24
    7472:	90 95       	com	r25
    7474:	bc 01       	movw	r22, r24
    7476:	cd 01       	movw	r24, r26
    7478:	08 95       	ret

0000747a <__umulhisi3>:
    747a:	a2 9f       	mul	r26, r18
    747c:	b0 01       	movw	r22, r0
    747e:	b3 9f       	mul	r27, r19
    7480:	c0 01       	movw	r24, r0
    7482:	a3 9f       	mul	r26, r19
    7484:	70 0d       	add	r23, r0
    7486:	81 1d       	adc	r24, r1
    7488:	11 24       	eor	r1, r1
    748a:	91 1d       	adc	r25, r1
    748c:	b2 9f       	mul	r27, r18
    748e:	70 0d       	add	r23, r0
    7490:	81 1d       	adc	r24, r1
    7492:	11 24       	eor	r1, r1
    7494:	91 1d       	adc	r25, r1
    7496:	08 95       	ret

00007498 <__muldi3_6>:
    7498:	0e 94 3d 3a 	call	0x747a	; 0x747a <__umulhisi3>
    749c:	46 0f       	add	r20, r22
    749e:	57 1f       	adc	r21, r23
    74a0:	c8 1f       	adc	r28, r24
    74a2:	d9 1f       	adc	r29, r25
    74a4:	08 f4       	brcc	.+2      	; 0x74a8 <__muldi3_6+0x10>
    74a6:	31 96       	adiw	r30, 0x01	; 1
    74a8:	08 95       	ret

000074aa <malloc>:
    74aa:	0f 93       	push	r16
    74ac:	1f 93       	push	r17
    74ae:	cf 93       	push	r28
    74b0:	df 93       	push	r29
    74b2:	82 30       	cpi	r24, 0x02	; 2
    74b4:	91 05       	cpc	r25, r1
    74b6:	10 f4       	brcc	.+4      	; 0x74bc <malloc+0x12>
    74b8:	82 e0       	ldi	r24, 0x02	; 2
    74ba:	90 e0       	ldi	r25, 0x00	; 0
    74bc:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <__flp>
    74c0:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <__flp+0x1>
    74c4:	20 e0       	ldi	r18, 0x00	; 0
    74c6:	30 e0       	ldi	r19, 0x00	; 0
    74c8:	a0 e0       	ldi	r26, 0x00	; 0
    74ca:	b0 e0       	ldi	r27, 0x00	; 0
    74cc:	30 97       	sbiw	r30, 0x00	; 0
    74ce:	19 f1       	breq	.+70     	; 0x7516 <malloc+0x6c>
    74d0:	40 81       	ld	r20, Z
    74d2:	51 81       	ldd	r21, Z+1	; 0x01
    74d4:	02 81       	ldd	r16, Z+2	; 0x02
    74d6:	13 81       	ldd	r17, Z+3	; 0x03
    74d8:	48 17       	cp	r20, r24
    74da:	59 07       	cpc	r21, r25
    74dc:	c8 f0       	brcs	.+50     	; 0x7510 <malloc+0x66>
    74de:	84 17       	cp	r24, r20
    74e0:	95 07       	cpc	r25, r21
    74e2:	69 f4       	brne	.+26     	; 0x74fe <malloc+0x54>
    74e4:	10 97       	sbiw	r26, 0x00	; 0
    74e6:	31 f0       	breq	.+12     	; 0x74f4 <malloc+0x4a>
    74e8:	12 96       	adiw	r26, 0x02	; 2
    74ea:	0c 93       	st	X, r16
    74ec:	12 97       	sbiw	r26, 0x02	; 2
    74ee:	13 96       	adiw	r26, 0x03	; 3
    74f0:	1c 93       	st	X, r17
    74f2:	27 c0       	rjmp	.+78     	; 0x7542 <malloc+0x98>
    74f4:	00 93 51 08 	sts	0x0851, r16	; 0x800851 <__flp>
    74f8:	10 93 52 08 	sts	0x0852, r17	; 0x800852 <__flp+0x1>
    74fc:	22 c0       	rjmp	.+68     	; 0x7542 <malloc+0x98>
    74fe:	21 15       	cp	r18, r1
    7500:	31 05       	cpc	r19, r1
    7502:	19 f0       	breq	.+6      	; 0x750a <malloc+0x60>
    7504:	42 17       	cp	r20, r18
    7506:	53 07       	cpc	r21, r19
    7508:	18 f4       	brcc	.+6      	; 0x7510 <malloc+0x66>
    750a:	9a 01       	movw	r18, r20
    750c:	bd 01       	movw	r22, r26
    750e:	ef 01       	movw	r28, r30
    7510:	df 01       	movw	r26, r30
    7512:	f8 01       	movw	r30, r16
    7514:	db cf       	rjmp	.-74     	; 0x74cc <malloc+0x22>
    7516:	21 15       	cp	r18, r1
    7518:	31 05       	cpc	r19, r1
    751a:	f9 f0       	breq	.+62     	; 0x755a <malloc+0xb0>
    751c:	28 1b       	sub	r18, r24
    751e:	39 0b       	sbc	r19, r25
    7520:	24 30       	cpi	r18, 0x04	; 4
    7522:	31 05       	cpc	r19, r1
    7524:	80 f4       	brcc	.+32     	; 0x7546 <malloc+0x9c>
    7526:	8a 81       	ldd	r24, Y+2	; 0x02
    7528:	9b 81       	ldd	r25, Y+3	; 0x03
    752a:	61 15       	cp	r22, r1
    752c:	71 05       	cpc	r23, r1
    752e:	21 f0       	breq	.+8      	; 0x7538 <malloc+0x8e>
    7530:	fb 01       	movw	r30, r22
    7532:	93 83       	std	Z+3, r25	; 0x03
    7534:	82 83       	std	Z+2, r24	; 0x02
    7536:	04 c0       	rjmp	.+8      	; 0x7540 <malloc+0x96>
    7538:	90 93 52 08 	sts	0x0852, r25	; 0x800852 <__flp+0x1>
    753c:	80 93 51 08 	sts	0x0851, r24	; 0x800851 <__flp>
    7540:	fe 01       	movw	r30, r28
    7542:	32 96       	adiw	r30, 0x02	; 2
    7544:	44 c0       	rjmp	.+136    	; 0x75ce <malloc+0x124>
    7546:	fe 01       	movw	r30, r28
    7548:	e2 0f       	add	r30, r18
    754a:	f3 1f       	adc	r31, r19
    754c:	81 93       	st	Z+, r24
    754e:	91 93       	st	Z+, r25
    7550:	22 50       	subi	r18, 0x02	; 2
    7552:	31 09       	sbc	r19, r1
    7554:	39 83       	std	Y+1, r19	; 0x01
    7556:	28 83       	st	Y, r18
    7558:	3a c0       	rjmp	.+116    	; 0x75ce <malloc+0x124>
    755a:	20 91 4f 08 	lds	r18, 0x084F	; 0x80084f <__brkval>
    755e:	30 91 50 08 	lds	r19, 0x0850	; 0x800850 <__brkval+0x1>
    7562:	23 2b       	or	r18, r19
    7564:	41 f4       	brne	.+16     	; 0x7576 <malloc+0xcc>
    7566:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <__malloc_heap_start>
    756a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <__malloc_heap_start+0x1>
    756e:	30 93 50 08 	sts	0x0850, r19	; 0x800850 <__brkval+0x1>
    7572:	20 93 4f 08 	sts	0x084F, r18	; 0x80084f <__brkval>
    7576:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <__malloc_heap_end>
    757a:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    757e:	21 15       	cp	r18, r1
    7580:	31 05       	cpc	r19, r1
    7582:	41 f4       	brne	.+16     	; 0x7594 <malloc+0xea>
    7584:	2d b7       	in	r18, 0x3d	; 61
    7586:	3e b7       	in	r19, 0x3e	; 62
    7588:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    758c:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    7590:	24 1b       	sub	r18, r20
    7592:	35 0b       	sbc	r19, r21
    7594:	e0 91 4f 08 	lds	r30, 0x084F	; 0x80084f <__brkval>
    7598:	f0 91 50 08 	lds	r31, 0x0850	; 0x800850 <__brkval+0x1>
    759c:	e2 17       	cp	r30, r18
    759e:	f3 07       	cpc	r31, r19
    75a0:	a0 f4       	brcc	.+40     	; 0x75ca <malloc+0x120>
    75a2:	2e 1b       	sub	r18, r30
    75a4:	3f 0b       	sbc	r19, r31
    75a6:	28 17       	cp	r18, r24
    75a8:	39 07       	cpc	r19, r25
    75aa:	78 f0       	brcs	.+30     	; 0x75ca <malloc+0x120>
    75ac:	ac 01       	movw	r20, r24
    75ae:	4e 5f       	subi	r20, 0xFE	; 254
    75b0:	5f 4f       	sbci	r21, 0xFF	; 255
    75b2:	24 17       	cp	r18, r20
    75b4:	35 07       	cpc	r19, r21
    75b6:	48 f0       	brcs	.+18     	; 0x75ca <malloc+0x120>
    75b8:	4e 0f       	add	r20, r30
    75ba:	5f 1f       	adc	r21, r31
    75bc:	50 93 50 08 	sts	0x0850, r21	; 0x800850 <__brkval+0x1>
    75c0:	40 93 4f 08 	sts	0x084F, r20	; 0x80084f <__brkval>
    75c4:	81 93       	st	Z+, r24
    75c6:	91 93       	st	Z+, r25
    75c8:	02 c0       	rjmp	.+4      	; 0x75ce <malloc+0x124>
    75ca:	e0 e0       	ldi	r30, 0x00	; 0
    75cc:	f0 e0       	ldi	r31, 0x00	; 0
    75ce:	cf 01       	movw	r24, r30
    75d0:	df 91       	pop	r29
    75d2:	cf 91       	pop	r28
    75d4:	1f 91       	pop	r17
    75d6:	0f 91       	pop	r16
    75d8:	08 95       	ret

000075da <free>:
    75da:	cf 93       	push	r28
    75dc:	df 93       	push	r29
    75de:	00 97       	sbiw	r24, 0x00	; 0
    75e0:	09 f4       	brne	.+2      	; 0x75e4 <free+0xa>
    75e2:	81 c0       	rjmp	.+258    	; 0x76e6 <free+0x10c>
    75e4:	fc 01       	movw	r30, r24
    75e6:	32 97       	sbiw	r30, 0x02	; 2
    75e8:	13 82       	std	Z+3, r1	; 0x03
    75ea:	12 82       	std	Z+2, r1	; 0x02
    75ec:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <__flp>
    75f0:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <__flp+0x1>
    75f4:	10 97       	sbiw	r26, 0x00	; 0
    75f6:	81 f4       	brne	.+32     	; 0x7618 <free+0x3e>
    75f8:	20 81       	ld	r18, Z
    75fa:	31 81       	ldd	r19, Z+1	; 0x01
    75fc:	82 0f       	add	r24, r18
    75fe:	93 1f       	adc	r25, r19
    7600:	20 91 4f 08 	lds	r18, 0x084F	; 0x80084f <__brkval>
    7604:	30 91 50 08 	lds	r19, 0x0850	; 0x800850 <__brkval+0x1>
    7608:	28 17       	cp	r18, r24
    760a:	39 07       	cpc	r19, r25
    760c:	51 f5       	brne	.+84     	; 0x7662 <free+0x88>
    760e:	f0 93 50 08 	sts	0x0850, r31	; 0x800850 <__brkval+0x1>
    7612:	e0 93 4f 08 	sts	0x084F, r30	; 0x80084f <__brkval>
    7616:	67 c0       	rjmp	.+206    	; 0x76e6 <free+0x10c>
    7618:	ed 01       	movw	r28, r26
    761a:	20 e0       	ldi	r18, 0x00	; 0
    761c:	30 e0       	ldi	r19, 0x00	; 0
    761e:	ce 17       	cp	r28, r30
    7620:	df 07       	cpc	r29, r31
    7622:	40 f4       	brcc	.+16     	; 0x7634 <free+0x5a>
    7624:	4a 81       	ldd	r20, Y+2	; 0x02
    7626:	5b 81       	ldd	r21, Y+3	; 0x03
    7628:	9e 01       	movw	r18, r28
    762a:	41 15       	cp	r20, r1
    762c:	51 05       	cpc	r21, r1
    762e:	f1 f0       	breq	.+60     	; 0x766c <free+0x92>
    7630:	ea 01       	movw	r28, r20
    7632:	f5 cf       	rjmp	.-22     	; 0x761e <free+0x44>
    7634:	d3 83       	std	Z+3, r29	; 0x03
    7636:	c2 83       	std	Z+2, r28	; 0x02
    7638:	40 81       	ld	r20, Z
    763a:	51 81       	ldd	r21, Z+1	; 0x01
    763c:	84 0f       	add	r24, r20
    763e:	95 1f       	adc	r25, r21
    7640:	c8 17       	cp	r28, r24
    7642:	d9 07       	cpc	r29, r25
    7644:	59 f4       	brne	.+22     	; 0x765c <free+0x82>
    7646:	88 81       	ld	r24, Y
    7648:	99 81       	ldd	r25, Y+1	; 0x01
    764a:	84 0f       	add	r24, r20
    764c:	95 1f       	adc	r25, r21
    764e:	02 96       	adiw	r24, 0x02	; 2
    7650:	91 83       	std	Z+1, r25	; 0x01
    7652:	80 83       	st	Z, r24
    7654:	8a 81       	ldd	r24, Y+2	; 0x02
    7656:	9b 81       	ldd	r25, Y+3	; 0x03
    7658:	93 83       	std	Z+3, r25	; 0x03
    765a:	82 83       	std	Z+2, r24	; 0x02
    765c:	21 15       	cp	r18, r1
    765e:	31 05       	cpc	r19, r1
    7660:	29 f4       	brne	.+10     	; 0x766c <free+0x92>
    7662:	f0 93 52 08 	sts	0x0852, r31	; 0x800852 <__flp+0x1>
    7666:	e0 93 51 08 	sts	0x0851, r30	; 0x800851 <__flp>
    766a:	3d c0       	rjmp	.+122    	; 0x76e6 <free+0x10c>
    766c:	e9 01       	movw	r28, r18
    766e:	fb 83       	std	Y+3, r31	; 0x03
    7670:	ea 83       	std	Y+2, r30	; 0x02
    7672:	49 91       	ld	r20, Y+
    7674:	59 91       	ld	r21, Y+
    7676:	c4 0f       	add	r28, r20
    7678:	d5 1f       	adc	r29, r21
    767a:	ec 17       	cp	r30, r28
    767c:	fd 07       	cpc	r31, r29
    767e:	61 f4       	brne	.+24     	; 0x7698 <free+0xbe>
    7680:	80 81       	ld	r24, Z
    7682:	91 81       	ldd	r25, Z+1	; 0x01
    7684:	84 0f       	add	r24, r20
    7686:	95 1f       	adc	r25, r21
    7688:	02 96       	adiw	r24, 0x02	; 2
    768a:	e9 01       	movw	r28, r18
    768c:	99 83       	std	Y+1, r25	; 0x01
    768e:	88 83       	st	Y, r24
    7690:	82 81       	ldd	r24, Z+2	; 0x02
    7692:	93 81       	ldd	r25, Z+3	; 0x03
    7694:	9b 83       	std	Y+3, r25	; 0x03
    7696:	8a 83       	std	Y+2, r24	; 0x02
    7698:	e0 e0       	ldi	r30, 0x00	; 0
    769a:	f0 e0       	ldi	r31, 0x00	; 0
    769c:	12 96       	adiw	r26, 0x02	; 2
    769e:	8d 91       	ld	r24, X+
    76a0:	9c 91       	ld	r25, X
    76a2:	13 97       	sbiw	r26, 0x03	; 3
    76a4:	00 97       	sbiw	r24, 0x00	; 0
    76a6:	19 f0       	breq	.+6      	; 0x76ae <free+0xd4>
    76a8:	fd 01       	movw	r30, r26
    76aa:	dc 01       	movw	r26, r24
    76ac:	f7 cf       	rjmp	.-18     	; 0x769c <free+0xc2>
    76ae:	8d 91       	ld	r24, X+
    76b0:	9c 91       	ld	r25, X
    76b2:	11 97       	sbiw	r26, 0x01	; 1
    76b4:	9d 01       	movw	r18, r26
    76b6:	2e 5f       	subi	r18, 0xFE	; 254
    76b8:	3f 4f       	sbci	r19, 0xFF	; 255
    76ba:	82 0f       	add	r24, r18
    76bc:	93 1f       	adc	r25, r19
    76be:	20 91 4f 08 	lds	r18, 0x084F	; 0x80084f <__brkval>
    76c2:	30 91 50 08 	lds	r19, 0x0850	; 0x800850 <__brkval+0x1>
    76c6:	28 17       	cp	r18, r24
    76c8:	39 07       	cpc	r19, r25
    76ca:	69 f4       	brne	.+26     	; 0x76e6 <free+0x10c>
    76cc:	30 97       	sbiw	r30, 0x00	; 0
    76ce:	29 f4       	brne	.+10     	; 0x76da <free+0x100>
    76d0:	10 92 52 08 	sts	0x0852, r1	; 0x800852 <__flp+0x1>
    76d4:	10 92 51 08 	sts	0x0851, r1	; 0x800851 <__flp>
    76d8:	02 c0       	rjmp	.+4      	; 0x76de <free+0x104>
    76da:	13 82       	std	Z+3, r1	; 0x03
    76dc:	12 82       	std	Z+2, r1	; 0x02
    76de:	b0 93 50 08 	sts	0x0850, r27	; 0x800850 <__brkval+0x1>
    76e2:	a0 93 4f 08 	sts	0x084F, r26	; 0x80084f <__brkval>
    76e6:	df 91       	pop	r29
    76e8:	cf 91       	pop	r28
    76ea:	08 95       	ret

000076ec <realloc>:
    76ec:	a0 e0       	ldi	r26, 0x00	; 0
    76ee:	b0 e0       	ldi	r27, 0x00	; 0
    76f0:	ec e7       	ldi	r30, 0x7C	; 124
    76f2:	fb e3       	ldi	r31, 0x3B	; 59
    76f4:	0c 94 1f 3d 	jmp	0x7a3e	; 0x7a3e <__prologue_saves__+0x8>
    76f8:	ec 01       	movw	r28, r24
    76fa:	00 97       	sbiw	r24, 0x00	; 0
    76fc:	21 f4       	brne	.+8      	; 0x7706 <realloc+0x1a>
    76fe:	cb 01       	movw	r24, r22
    7700:	0e 94 55 3a 	call	0x74aa	; 0x74aa <malloc>
    7704:	b4 c0       	rjmp	.+360    	; 0x786e <realloc+0x182>
    7706:	fc 01       	movw	r30, r24
    7708:	e6 0f       	add	r30, r22
    770a:	f7 1f       	adc	r31, r23
    770c:	9c 01       	movw	r18, r24
    770e:	22 50       	subi	r18, 0x02	; 2
    7710:	31 09       	sbc	r19, r1
    7712:	e2 17       	cp	r30, r18
    7714:	f3 07       	cpc	r31, r19
    7716:	08 f4       	brcc	.+2      	; 0x771a <realloc+0x2e>
    7718:	a8 c0       	rjmp	.+336    	; 0x786a <realloc+0x17e>
    771a:	d9 01       	movw	r26, r18
    771c:	0d 91       	ld	r16, X+
    771e:	1c 91       	ld	r17, X
    7720:	11 97       	sbiw	r26, 0x01	; 1
    7722:	06 17       	cp	r16, r22
    7724:	17 07       	cpc	r17, r23
    7726:	b0 f0       	brcs	.+44     	; 0x7754 <realloc+0x68>
    7728:	05 30       	cpi	r16, 0x05	; 5
    772a:	11 05       	cpc	r17, r1
    772c:	08 f4       	brcc	.+2      	; 0x7730 <realloc+0x44>
    772e:	9b c0       	rjmp	.+310    	; 0x7866 <realloc+0x17a>
    7730:	c8 01       	movw	r24, r16
    7732:	04 97       	sbiw	r24, 0x04	; 4
    7734:	86 17       	cp	r24, r22
    7736:	97 07       	cpc	r25, r23
    7738:	08 f4       	brcc	.+2      	; 0x773c <realloc+0x50>
    773a:	95 c0       	rjmp	.+298    	; 0x7866 <realloc+0x17a>
    773c:	02 50       	subi	r16, 0x02	; 2
    773e:	11 09       	sbc	r17, r1
    7740:	06 1b       	sub	r16, r22
    7742:	17 0b       	sbc	r17, r23
    7744:	01 93       	st	Z+, r16
    7746:	11 93       	st	Z+, r17
    7748:	6d 93       	st	X+, r22
    774a:	7c 93       	st	X, r23
    774c:	cf 01       	movw	r24, r30
    774e:	0e 94 ed 3a 	call	0x75da	; 0x75da <free>
    7752:	89 c0       	rjmp	.+274    	; 0x7866 <realloc+0x17a>
    7754:	5b 01       	movw	r10, r22
    7756:	a0 1a       	sub	r10, r16
    7758:	b1 0a       	sbc	r11, r17
    775a:	4c 01       	movw	r8, r24
    775c:	80 0e       	add	r8, r16
    775e:	91 1e       	adc	r9, r17
    7760:	a0 91 51 08 	lds	r26, 0x0851	; 0x800851 <__flp>
    7764:	b0 91 52 08 	lds	r27, 0x0852	; 0x800852 <__flp+0x1>
    7768:	61 2c       	mov	r6, r1
    776a:	71 2c       	mov	r7, r1
    776c:	e1 2c       	mov	r14, r1
    776e:	f1 2c       	mov	r15, r1
    7770:	10 97       	sbiw	r26, 0x00	; 0
    7772:	09 f4       	brne	.+2      	; 0x7776 <realloc+0x8a>
    7774:	46 c0       	rjmp	.+140    	; 0x7802 <realloc+0x116>
    7776:	8d 91       	ld	r24, X+
    7778:	9c 91       	ld	r25, X
    777a:	11 97       	sbiw	r26, 0x01	; 1
    777c:	a8 15       	cp	r26, r8
    777e:	b9 05       	cpc	r27, r9
    7780:	b1 f5       	brne	.+108    	; 0x77ee <realloc+0x102>
    7782:	6c 01       	movw	r12, r24
    7784:	42 e0       	ldi	r20, 0x02	; 2
    7786:	c4 0e       	add	r12, r20
    7788:	d1 1c       	adc	r13, r1
    778a:	ca 14       	cp	r12, r10
    778c:	db 04       	cpc	r13, r11
    778e:	78 f1       	brcs	.+94     	; 0x77ee <realloc+0x102>
    7790:	4c 01       	movw	r8, r24
    7792:	8a 18       	sub	r8, r10
    7794:	9b 08       	sbc	r9, r11
    7796:	64 01       	movw	r12, r8
    7798:	42 e0       	ldi	r20, 0x02	; 2
    779a:	c4 0e       	add	r12, r20
    779c:	d1 1c       	adc	r13, r1
    779e:	12 96       	adiw	r26, 0x02	; 2
    77a0:	bc 90       	ld	r11, X
    77a2:	12 97       	sbiw	r26, 0x02	; 2
    77a4:	13 96       	adiw	r26, 0x03	; 3
    77a6:	ac 91       	ld	r26, X
    77a8:	b5 e0       	ldi	r27, 0x05	; 5
    77aa:	cb 16       	cp	r12, r27
    77ac:	d1 04       	cpc	r13, r1
    77ae:	40 f0       	brcs	.+16     	; 0x77c0 <realloc+0xd4>
    77b0:	b2 82       	std	Z+2, r11	; 0x02
    77b2:	a3 83       	std	Z+3, r26	; 0x03
    77b4:	91 82       	std	Z+1, r9	; 0x01
    77b6:	80 82       	st	Z, r8
    77b8:	d9 01       	movw	r26, r18
    77ba:	6d 93       	st	X+, r22
    77bc:	7c 93       	st	X, r23
    77be:	09 c0       	rjmp	.+18     	; 0x77d2 <realloc+0xe6>
    77c0:	0e 5f       	subi	r16, 0xFE	; 254
    77c2:	1f 4f       	sbci	r17, 0xFF	; 255
    77c4:	80 0f       	add	r24, r16
    77c6:	91 1f       	adc	r25, r17
    77c8:	f9 01       	movw	r30, r18
    77ca:	91 83       	std	Z+1, r25	; 0x01
    77cc:	80 83       	st	Z, r24
    77ce:	eb 2d       	mov	r30, r11
    77d0:	fa 2f       	mov	r31, r26
    77d2:	e1 14       	cp	r14, r1
    77d4:	f1 04       	cpc	r15, r1
    77d6:	31 f0       	breq	.+12     	; 0x77e4 <realloc+0xf8>
    77d8:	d7 01       	movw	r26, r14
    77da:	13 96       	adiw	r26, 0x03	; 3
    77dc:	fc 93       	st	X, r31
    77de:	ee 93       	st	-X, r30
    77e0:	12 97       	sbiw	r26, 0x02	; 2
    77e2:	41 c0       	rjmp	.+130    	; 0x7866 <realloc+0x17a>
    77e4:	f0 93 52 08 	sts	0x0852, r31	; 0x800852 <__flp+0x1>
    77e8:	e0 93 51 08 	sts	0x0851, r30	; 0x800851 <__flp>
    77ec:	3c c0       	rjmp	.+120    	; 0x7866 <realloc+0x17a>
    77ee:	68 16       	cp	r6, r24
    77f0:	79 06       	cpc	r7, r25
    77f2:	08 f4       	brcc	.+2      	; 0x77f6 <realloc+0x10a>
    77f4:	3c 01       	movw	r6, r24
    77f6:	7d 01       	movw	r14, r26
    77f8:	12 96       	adiw	r26, 0x02	; 2
    77fa:	0d 90       	ld	r0, X+
    77fc:	bc 91       	ld	r27, X
    77fe:	a0 2d       	mov	r26, r0
    7800:	b7 cf       	rjmp	.-146    	; 0x7770 <realloc+0x84>
    7802:	80 91 4f 08 	lds	r24, 0x084F	; 0x80084f <__brkval>
    7806:	90 91 50 08 	lds	r25, 0x0850	; 0x800850 <__brkval+0x1>
    780a:	88 16       	cp	r8, r24
    780c:	99 06       	cpc	r9, r25
    780e:	e1 f4       	brne	.+56     	; 0x7848 <realloc+0x15c>
    7810:	66 16       	cp	r6, r22
    7812:	77 06       	cpc	r7, r23
    7814:	c8 f4       	brcc	.+50     	; 0x7848 <realloc+0x15c>
    7816:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__malloc_heap_end>
    781a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__malloc_heap_end+0x1>
    781e:	00 97       	sbiw	r24, 0x00	; 0
    7820:	41 f4       	brne	.+16     	; 0x7832 <realloc+0x146>
    7822:	8d b7       	in	r24, 0x3d	; 61
    7824:	9e b7       	in	r25, 0x3e	; 62
    7826:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <__malloc_margin>
    782a:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <__malloc_margin+0x1>
    782e:	84 1b       	sub	r24, r20
    7830:	95 0b       	sbc	r25, r21
    7832:	e8 17       	cp	r30, r24
    7834:	f9 07       	cpc	r31, r25
    7836:	c8 f4       	brcc	.+50     	; 0x786a <realloc+0x17e>
    7838:	f0 93 50 08 	sts	0x0850, r31	; 0x800850 <__brkval+0x1>
    783c:	e0 93 4f 08 	sts	0x084F, r30	; 0x80084f <__brkval>
    7840:	f9 01       	movw	r30, r18
    7842:	71 83       	std	Z+1, r23	; 0x01
    7844:	60 83       	st	Z, r22
    7846:	0f c0       	rjmp	.+30     	; 0x7866 <realloc+0x17a>
    7848:	cb 01       	movw	r24, r22
    784a:	0e 94 55 3a 	call	0x74aa	; 0x74aa <malloc>
    784e:	7c 01       	movw	r14, r24
    7850:	00 97       	sbiw	r24, 0x00	; 0
    7852:	59 f0       	breq	.+22     	; 0x786a <realloc+0x17e>
    7854:	a8 01       	movw	r20, r16
    7856:	be 01       	movw	r22, r28
    7858:	0e 94 86 3c 	call	0x790c	; 0x790c <memcpy>
    785c:	ce 01       	movw	r24, r28
    785e:	0e 94 ed 3a 	call	0x75da	; 0x75da <free>
    7862:	c7 01       	movw	r24, r14
    7864:	04 c0       	rjmp	.+8      	; 0x786e <realloc+0x182>
    7866:	ce 01       	movw	r24, r28
    7868:	02 c0       	rjmp	.+4      	; 0x786e <realloc+0x182>
    786a:	80 e0       	ldi	r24, 0x00	; 0
    786c:	90 e0       	ldi	r25, 0x00	; 0
    786e:	cd b7       	in	r28, 0x3d	; 61
    7870:	de b7       	in	r29, 0x3e	; 62
    7872:	ee e0       	ldi	r30, 0x0E	; 14
    7874:	0c 94 3b 3d 	jmp	0x7a76	; 0x7a76 <__epilogue_restores__+0x8>

00007878 <atoi>:
    7878:	fc 01       	movw	r30, r24
    787a:	88 27       	eor	r24, r24
    787c:	99 27       	eor	r25, r25
    787e:	e8 94       	clt
    7880:	21 91       	ld	r18, Z+
    7882:	20 32       	cpi	r18, 0x20	; 32
    7884:	e9 f3       	breq	.-6      	; 0x7880 <atoi+0x8>
    7886:	29 30       	cpi	r18, 0x09	; 9
    7888:	10 f0       	brcs	.+4      	; 0x788e <atoi+0x16>
    788a:	2e 30       	cpi	r18, 0x0E	; 14
    788c:	c8 f3       	brcs	.-14     	; 0x7880 <atoi+0x8>
    788e:	2b 32       	cpi	r18, 0x2B	; 43
    7890:	41 f0       	breq	.+16     	; 0x78a2 <atoi+0x2a>
    7892:	2d 32       	cpi	r18, 0x2D	; 45
    7894:	39 f4       	brne	.+14     	; 0x78a4 <atoi+0x2c>
    7896:	68 94       	set
    7898:	04 c0       	rjmp	.+8      	; 0x78a2 <atoi+0x2a>
    789a:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__mulhi_const_10>
    789e:	82 0f       	add	r24, r18
    78a0:	91 1d       	adc	r25, r1
    78a2:	21 91       	ld	r18, Z+
    78a4:	20 53       	subi	r18, 0x30	; 48
    78a6:	2a 30       	cpi	r18, 0x0A	; 10
    78a8:	c0 f3       	brcs	.-16     	; 0x789a <atoi+0x22>
    78aa:	1e f4       	brtc	.+6      	; 0x78b2 <atoi+0x3a>
    78ac:	90 95       	com	r25
    78ae:	81 95       	neg	r24
    78b0:	9f 4f       	sbci	r25, 0xFF	; 255
    78b2:	08 95       	ret

000078b4 <strcmp_P>:
    78b4:	fb 01       	movw	r30, r22
    78b6:	dc 01       	movw	r26, r24
    78b8:	8d 91       	ld	r24, X+
    78ba:	05 90       	lpm	r0, Z+
    78bc:	80 19       	sub	r24, r0
    78be:	01 10       	cpse	r0, r1
    78c0:	d9 f3       	breq	.-10     	; 0x78b8 <strcmp_P+0x4>
    78c2:	99 0b       	sbc	r25, r25
    78c4:	08 95       	ret

000078c6 <__strlen_P>:
    78c6:	fc 01       	movw	r30, r24
    78c8:	05 90       	lpm	r0, Z+
    78ca:	00 20       	and	r0, r0
    78cc:	e9 f7       	brne	.-6      	; 0x78c8 <__strlen_P+0x2>
    78ce:	80 95       	com	r24
    78d0:	90 95       	com	r25
    78d2:	8e 0f       	add	r24, r30
    78d4:	9f 1f       	adc	r25, r31
    78d6:	08 95       	ret

000078d8 <strstr_P>:
    78d8:	fb 01       	movw	r30, r22
    78da:	55 91       	lpm	r21, Z+
    78dc:	55 23       	and	r21, r21
    78de:	a9 f0       	breq	.+42     	; 0x790a <strstr_P+0x32>
    78e0:	bf 01       	movw	r22, r30
    78e2:	dc 01       	movw	r26, r24
    78e4:	4d 91       	ld	r20, X+
    78e6:	45 17       	cp	r20, r21
    78e8:	41 11       	cpse	r20, r1
    78ea:	e1 f7       	brne	.-8      	; 0x78e4 <strstr_P+0xc>
    78ec:	59 f4       	brne	.+22     	; 0x7904 <strstr_P+0x2c>
    78ee:	cd 01       	movw	r24, r26
    78f0:	05 90       	lpm	r0, Z+
    78f2:	00 20       	and	r0, r0
    78f4:	49 f0       	breq	.+18     	; 0x7908 <strstr_P+0x30>
    78f6:	4d 91       	ld	r20, X+
    78f8:	40 15       	cp	r20, r0
    78fa:	41 11       	cpse	r20, r1
    78fc:	c9 f3       	breq	.-14     	; 0x78f0 <strstr_P+0x18>
    78fe:	fb 01       	movw	r30, r22
    7900:	41 11       	cpse	r20, r1
    7902:	ef cf       	rjmp	.-34     	; 0x78e2 <strstr_P+0xa>
    7904:	81 e0       	ldi	r24, 0x01	; 1
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	01 97       	sbiw	r24, 0x01	; 1
    790a:	08 95       	ret

0000790c <memcpy>:
    790c:	fb 01       	movw	r30, r22
    790e:	dc 01       	movw	r26, r24
    7910:	02 c0       	rjmp	.+4      	; 0x7916 <memcpy+0xa>
    7912:	01 90       	ld	r0, Z+
    7914:	0d 92       	st	X+, r0
    7916:	41 50       	subi	r20, 0x01	; 1
    7918:	50 40       	sbci	r21, 0x00	; 0
    791a:	d8 f7       	brcc	.-10     	; 0x7912 <memcpy+0x6>
    791c:	08 95       	ret

0000791e <strchr>:
    791e:	fc 01       	movw	r30, r24
    7920:	81 91       	ld	r24, Z+
    7922:	86 17       	cp	r24, r22
    7924:	21 f0       	breq	.+8      	; 0x792e <strchr+0x10>
    7926:	88 23       	and	r24, r24
    7928:	d9 f7       	brne	.-10     	; 0x7920 <strchr+0x2>
    792a:	99 27       	eor	r25, r25
    792c:	08 95       	ret
    792e:	31 97       	sbiw	r30, 0x01	; 1
    7930:	cf 01       	movw	r24, r30
    7932:	08 95       	ret

00007934 <strcmp>:
    7934:	fb 01       	movw	r30, r22
    7936:	dc 01       	movw	r26, r24
    7938:	8d 91       	ld	r24, X+
    793a:	01 90       	ld	r0, Z+
    793c:	80 19       	sub	r24, r0
    793e:	01 10       	cpse	r0, r1
    7940:	d9 f3       	breq	.-10     	; 0x7938 <strcmp+0x4>
    7942:	99 0b       	sbc	r25, r25
    7944:	08 95       	ret

00007946 <strcpy>:
    7946:	fb 01       	movw	r30, r22
    7948:	dc 01       	movw	r26, r24
    794a:	01 90       	ld	r0, Z+
    794c:	0d 92       	st	X+, r0
    794e:	00 20       	and	r0, r0
    7950:	e1 f7       	brne	.-8      	; 0x794a <strcpy+0x4>
    7952:	08 95       	ret

00007954 <strncpy>:
    7954:	fb 01       	movw	r30, r22
    7956:	dc 01       	movw	r26, r24
    7958:	41 50       	subi	r20, 0x01	; 1
    795a:	50 40       	sbci	r21, 0x00	; 0
    795c:	48 f0       	brcs	.+18     	; 0x7970 <strncpy+0x1c>
    795e:	01 90       	ld	r0, Z+
    7960:	0d 92       	st	X+, r0
    7962:	00 20       	and	r0, r0
    7964:	c9 f7       	brne	.-14     	; 0x7958 <strncpy+0x4>
    7966:	01 c0       	rjmp	.+2      	; 0x796a <strncpy+0x16>
    7968:	1d 92       	st	X+, r1
    796a:	41 50       	subi	r20, 0x01	; 1
    796c:	50 40       	sbci	r21, 0x00	; 0
    796e:	e0 f7       	brcc	.-8      	; 0x7968 <strncpy+0x14>
    7970:	08 95       	ret

00007972 <strstr>:
    7972:	fb 01       	movw	r30, r22
    7974:	51 91       	ld	r21, Z+
    7976:	55 23       	and	r21, r21
    7978:	a9 f0       	breq	.+42     	; 0x79a4 <strstr+0x32>
    797a:	bf 01       	movw	r22, r30
    797c:	dc 01       	movw	r26, r24
    797e:	4d 91       	ld	r20, X+
    7980:	45 17       	cp	r20, r21
    7982:	41 11       	cpse	r20, r1
    7984:	e1 f7       	brne	.-8      	; 0x797e <strstr+0xc>
    7986:	59 f4       	brne	.+22     	; 0x799e <strstr+0x2c>
    7988:	cd 01       	movw	r24, r26
    798a:	01 90       	ld	r0, Z+
    798c:	00 20       	and	r0, r0
    798e:	49 f0       	breq	.+18     	; 0x79a2 <strstr+0x30>
    7990:	4d 91       	ld	r20, X+
    7992:	40 15       	cp	r20, r0
    7994:	41 11       	cpse	r20, r1
    7996:	c9 f3       	breq	.-14     	; 0x798a <strstr+0x18>
    7998:	fb 01       	movw	r30, r22
    799a:	41 11       	cpse	r20, r1
    799c:	ef cf       	rjmp	.-34     	; 0x797c <strstr+0xa>
    799e:	81 e0       	ldi	r24, 0x01	; 1
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	01 97       	sbiw	r24, 0x01	; 1
    79a4:	08 95       	ret

000079a6 <__mulhi_const_10>:
    79a6:	7a e0       	ldi	r23, 0x0A	; 10
    79a8:	97 9f       	mul	r25, r23
    79aa:	90 2d       	mov	r25, r0
    79ac:	87 9f       	mul	r24, r23
    79ae:	80 2d       	mov	r24, r0
    79b0:	91 0d       	add	r25, r1
    79b2:	11 24       	eor	r1, r1
    79b4:	08 95       	ret

000079b6 <__utoa_ncheck>:
    79b6:	bb 27       	eor	r27, r27

000079b8 <__utoa_common>:
    79b8:	fb 01       	movw	r30, r22
    79ba:	55 27       	eor	r21, r21
    79bc:	aa 27       	eor	r26, r26
    79be:	88 0f       	add	r24, r24
    79c0:	99 1f       	adc	r25, r25
    79c2:	aa 1f       	adc	r26, r26
    79c4:	a4 17       	cp	r26, r20
    79c6:	10 f0       	brcs	.+4      	; 0x79cc <__utoa_common+0x14>
    79c8:	a4 1b       	sub	r26, r20
    79ca:	83 95       	inc	r24
    79cc:	50 51       	subi	r21, 0x10	; 16
    79ce:	b9 f7       	brne	.-18     	; 0x79be <__utoa_common+0x6>
    79d0:	a0 5d       	subi	r26, 0xD0	; 208
    79d2:	aa 33       	cpi	r26, 0x3A	; 58
    79d4:	08 f0       	brcs	.+2      	; 0x79d8 <__utoa_common+0x20>
    79d6:	a9 5d       	subi	r26, 0xD9	; 217
    79d8:	a1 93       	st	Z+, r26
    79da:	00 97       	sbiw	r24, 0x00	; 0
    79dc:	79 f7       	brne	.-34     	; 0x79bc <__utoa_common+0x4>
    79de:	b1 11       	cpse	r27, r1
    79e0:	b1 93       	st	Z+, r27
    79e2:	11 92       	st	Z+, r1
    79e4:	cb 01       	movw	r24, r22
    79e6:	0c 94 f5 3c 	jmp	0x79ea	; 0x79ea <strrev>

000079ea <strrev>:
    79ea:	dc 01       	movw	r26, r24
    79ec:	fc 01       	movw	r30, r24
    79ee:	67 2f       	mov	r22, r23
    79f0:	71 91       	ld	r23, Z+
    79f2:	77 23       	and	r23, r23
    79f4:	e1 f7       	brne	.-8      	; 0x79ee <strrev+0x4>
    79f6:	32 97       	sbiw	r30, 0x02	; 2
    79f8:	04 c0       	rjmp	.+8      	; 0x7a02 <strrev+0x18>
    79fa:	7c 91       	ld	r23, X
    79fc:	6d 93       	st	X+, r22
    79fe:	70 83       	st	Z, r23
    7a00:	62 91       	ld	r22, -Z
    7a02:	ae 17       	cp	r26, r30
    7a04:	bf 07       	cpc	r27, r31
    7a06:	c8 f3       	brcs	.-14     	; 0x79fa <strrev+0x10>
    7a08:	08 95       	ret

00007a0a <eeprom_read_byte>:
    7a0a:	f9 99       	sbic	0x1f, 1	; 31
    7a0c:	fe cf       	rjmp	.-4      	; 0x7a0a <eeprom_read_byte>
    7a0e:	92 bd       	out	0x22, r25	; 34
    7a10:	81 bd       	out	0x21, r24	; 33
    7a12:	f8 9a       	sbi	0x1f, 0	; 31
    7a14:	99 27       	eor	r25, r25
    7a16:	80 b5       	in	r24, 0x20	; 32
    7a18:	08 95       	ret

00007a1a <eeprom_write_byte>:
    7a1a:	26 2f       	mov	r18, r22

00007a1c <eeprom_write_r18>:
    7a1c:	f9 99       	sbic	0x1f, 1	; 31
    7a1e:	fe cf       	rjmp	.-4      	; 0x7a1c <eeprom_write_r18>
    7a20:	1f ba       	out	0x1f, r1	; 31
    7a22:	92 bd       	out	0x22, r25	; 34
    7a24:	81 bd       	out	0x21, r24	; 33
    7a26:	20 bd       	out	0x20, r18	; 32
    7a28:	0f b6       	in	r0, 0x3f	; 63
    7a2a:	f8 94       	cli
    7a2c:	fa 9a       	sbi	0x1f, 2	; 31
    7a2e:	f9 9a       	sbi	0x1f, 1	; 31
    7a30:	0f be       	out	0x3f, r0	; 63
    7a32:	01 96       	adiw	r24, 0x01	; 1
    7a34:	08 95       	ret

00007a36 <__prologue_saves__>:
    7a36:	2f 92       	push	r2
    7a38:	3f 92       	push	r3
    7a3a:	4f 92       	push	r4
    7a3c:	5f 92       	push	r5
    7a3e:	6f 92       	push	r6
    7a40:	7f 92       	push	r7
    7a42:	8f 92       	push	r8
    7a44:	9f 92       	push	r9
    7a46:	af 92       	push	r10
    7a48:	bf 92       	push	r11
    7a4a:	cf 92       	push	r12
    7a4c:	df 92       	push	r13
    7a4e:	ef 92       	push	r14
    7a50:	ff 92       	push	r15
    7a52:	0f 93       	push	r16
    7a54:	1f 93       	push	r17
    7a56:	cf 93       	push	r28
    7a58:	df 93       	push	r29
    7a5a:	cd b7       	in	r28, 0x3d	; 61
    7a5c:	de b7       	in	r29, 0x3e	; 62
    7a5e:	ca 1b       	sub	r28, r26
    7a60:	db 0b       	sbc	r29, r27
    7a62:	0f b6       	in	r0, 0x3f	; 63
    7a64:	f8 94       	cli
    7a66:	de bf       	out	0x3e, r29	; 62
    7a68:	0f be       	out	0x3f, r0	; 63
    7a6a:	cd bf       	out	0x3d, r28	; 61
    7a6c:	09 94       	ijmp

00007a6e <__epilogue_restores__>:
    7a6e:	2a 88       	ldd	r2, Y+18	; 0x12
    7a70:	39 88       	ldd	r3, Y+17	; 0x11
    7a72:	48 88       	ldd	r4, Y+16	; 0x10
    7a74:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a76:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a78:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a80:	b9 84       	ldd	r11, Y+9	; 0x09
    7a82:	c8 84       	ldd	r12, Y+8	; 0x08
    7a84:	df 80       	ldd	r13, Y+7	; 0x07
    7a86:	ee 80       	ldd	r14, Y+6	; 0x06
    7a88:	fd 80       	ldd	r15, Y+5	; 0x05
    7a8a:	0c 81       	ldd	r16, Y+4	; 0x04
    7a8c:	1b 81       	ldd	r17, Y+3	; 0x03
    7a8e:	aa 81       	ldd	r26, Y+2	; 0x02
    7a90:	b9 81       	ldd	r27, Y+1	; 0x01
    7a92:	ce 0f       	add	r28, r30
    7a94:	d1 1d       	adc	r29, r1
    7a96:	0f b6       	in	r0, 0x3f	; 63
    7a98:	f8 94       	cli
    7a9a:	de bf       	out	0x3e, r29	; 62
    7a9c:	0f be       	out	0x3f, r0	; 63
    7a9e:	cd bf       	out	0x3d, r28	; 61
    7aa0:	ed 01       	movw	r28, r26
    7aa2:	08 95       	ret

00007aa4 <__do_global_dtors>:
    7aa4:	13 e0       	ldi	r17, 0x03	; 3
    7aa6:	c3 ea       	ldi	r28, 0xA3	; 163
    7aa8:	d3 e0       	ldi	r29, 0x03	; 3
    7aaa:	04 c0       	rjmp	.+8      	; 0x7ab4 <__do_global_dtors+0x10>
    7aac:	fe 01       	movw	r30, r28
    7aae:	0e 94 cf 39 	call	0x739e	; 0x739e <__tablejump2__>
    7ab2:	21 96       	adiw	r28, 0x01	; 1
    7ab4:	c4 3a       	cpi	r28, 0xA4	; 164
    7ab6:	d1 07       	cpc	r29, r17
    7ab8:	c9 f7       	brne	.-14     	; 0x7aac <__do_global_dtors+0x8>
    7aba:	f8 94       	cli

00007abc <__stop_program>:
    7abc:	ff cf       	rjmp	.-2      	; 0x7abc <__stop_program>
