
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000272  00800100  00006080  00006114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000516  00800372  00800372  00006386  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000868  00000000  00000000  00006424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001bdd8  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039f8  00000000  00000000  00022a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071d2  00000000  00000000  0002645c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002e68  00000000  00000000  0002d630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011a83  00000000  00000000  00030498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d227  00000000  00000000  00041f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  0004f142  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005bf5  00000000  00000000  0004f94a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__dtors_end>
       4:	0c 94 77 2b 	jmp	0x56ee	; 0x56ee <__vector_1>
       8:	0c 94 9e 2b 	jmp	0x573c	; 0x573c <__vector_2>
       c:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__vector_3>
      10:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__vector_3>
      14:	0c 94 f0 29 	jmp	0x53e0	; 0x53e0 <__vector_3>
      18:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      1c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      20:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      24:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      28:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      2c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      30:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      34:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      38:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      3c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      40:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__vector_16>
      44:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      48:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__vector_18>
      4c:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__vector_19>
      50:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      54:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      58:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      5c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      60:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__vector_24>
      64:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
      68:	70 12       	cpse	r7, r16
      6a:	76 12       	cpse	r7, r22
      6c:	76 12       	cpse	r7, r22
      6e:	76 12       	cpse	r7, r22
      70:	76 12       	cpse	r7, r22
      72:	76 12       	cpse	r7, r22
      74:	76 12       	cpse	r7, r22
      76:	76 12       	cpse	r7, r22
      78:	64 11       	cpse	r22, r4
      7a:	76 12       	cpse	r7, r22
      7c:	76 12       	cpse	r7, r22
      7e:	76 12       	cpse	r7, r22
      80:	76 12       	cpse	r7, r22
      82:	76 12       	cpse	r7, r22
      84:	76 12       	cpse	r7, r22
      86:	76 12       	cpse	r7, r22
      88:	64 11       	cpse	r22, r4
      8a:	76 12       	cpse	r7, r22
      8c:	76 12       	cpse	r7, r22
      8e:	76 12       	cpse	r7, r22
      90:	76 12       	cpse	r7, r22
      92:	76 12       	cpse	r7, r22
      94:	76 12       	cpse	r7, r22
      96:	76 12       	cpse	r7, r22
      98:	6e 11       	cpse	r22, r14
      9a:	76 12       	cpse	r7, r22
      9c:	76 12       	cpse	r7, r22
      9e:	76 12       	cpse	r7, r22
      a0:	76 12       	cpse	r7, r22
      a2:	76 12       	cpse	r7, r22
      a4:	76 12       	cpse	r7, r22
      a6:	76 12       	cpse	r7, r22
      a8:	9a 11       	cpse	r25, r10
      aa:	76 12       	cpse	r7, r22
      ac:	76 12       	cpse	r7, r22
      ae:	76 12       	cpse	r7, r22
      b0:	76 12       	cpse	r7, r22
      b2:	76 12       	cpse	r7, r22
      b4:	76 12       	cpse	r7, r22
      b6:	76 12       	cpse	r7, r22
      b8:	6e 11       	cpse	r22, r14
      ba:	76 12       	cpse	r7, r22
      bc:	76 12       	cpse	r7, r22
      be:	76 12       	cpse	r7, r22
      c0:	76 12       	cpse	r7, r22
      c2:	76 12       	cpse	r7, r22
      c4:	76 12       	cpse	r7, r22
      c6:	76 12       	cpse	r7, r22
      c8:	a0 11       	cpse	r26, r0
      ca:	76 12       	cpse	r7, r22
      cc:	76 12       	cpse	r7, r22
      ce:	76 12       	cpse	r7, r22
      d0:	76 12       	cpse	r7, r22
      d2:	76 12       	cpse	r7, r22
      d4:	76 12       	cpse	r7, r22
      d6:	76 12       	cpse	r7, r22
      d8:	a6 11       	cpse	r26, r6
      da:	76 12       	cpse	r7, r22
      dc:	76 12       	cpse	r7, r22
      de:	76 12       	cpse	r7, r22
      e0:	76 12       	cpse	r7, r22
      e2:	76 12       	cpse	r7, r22
      e4:	76 12       	cpse	r7, r22
      e6:	76 12       	cpse	r7, r22
      e8:	bc 11       	cpse	r27, r12
      ea:	76 12       	cpse	r7, r22
      ec:	76 12       	cpse	r7, r22
      ee:	76 12       	cpse	r7, r22
      f0:	76 12       	cpse	r7, r22
      f2:	76 12       	cpse	r7, r22
      f4:	76 12       	cpse	r7, r22
      f6:	76 12       	cpse	r7, r22
      f8:	ec 11       	cpse	r30, r12
      fa:	76 12       	cpse	r7, r22
      fc:	76 12       	cpse	r7, r22
      fe:	76 12       	cpse	r7, r22
     100:	76 12       	cpse	r7, r22
     102:	76 12       	cpse	r7, r22
     104:	76 12       	cpse	r7, r22
     106:	76 12       	cpse	r7, r22
     108:	ac 11       	cpse	r26, r12
     10a:	76 12       	cpse	r7, r22
     10c:	76 12       	cpse	r7, r22
     10e:	76 12       	cpse	r7, r22
     110:	76 12       	cpse	r7, r22
     112:	76 12       	cpse	r7, r22
     114:	76 12       	cpse	r7, r22
     116:	76 12       	cpse	r7, r22
     118:	ca 11       	cpse	r28, r10
     11a:	76 12       	cpse	r7, r22
     11c:	76 12       	cpse	r7, r22
     11e:	76 12       	cpse	r7, r22
     120:	76 12       	cpse	r7, r22
     122:	76 12       	cpse	r7, r22
     124:	76 12       	cpse	r7, r22
     126:	76 12       	cpse	r7, r22
     128:	ef 11       	cpse	r30, r15
     12a:	76 12       	cpse	r7, r22
     12c:	76 12       	cpse	r7, r22
     12e:	76 12       	cpse	r7, r22
     130:	76 12       	cpse	r7, r22
     132:	76 12       	cpse	r7, r22
     134:	76 12       	cpse	r7, r22
     136:	76 12       	cpse	r7, r22
     138:	ef 11       	cpse	r30, r15
     13a:	76 12       	cpse	r7, r22
     13c:	76 12       	cpse	r7, r22
     13e:	76 12       	cpse	r7, r22
     140:	76 12       	cpse	r7, r22
     142:	76 12       	cpse	r7, r22
     144:	76 12       	cpse	r7, r22
     146:	76 12       	cpse	r7, r22
     148:	ef 11       	cpse	r30, r15
     14a:	76 12       	cpse	r7, r22
     14c:	76 12       	cpse	r7, r22
     14e:	76 12       	cpse	r7, r22
     150:	76 12       	cpse	r7, r22
     152:	76 12       	cpse	r7, r22
     154:	76 12       	cpse	r7, r22
     156:	76 12       	cpse	r7, r22
     158:	ef 11       	cpse	r30, r15
     15a:	76 12       	cpse	r7, r22
     15c:	76 12       	cpse	r7, r22
     15e:	76 12       	cpse	r7, r22
     160:	76 12       	cpse	r7, r22
     162:	76 12       	cpse	r7, r22
     164:	76 12       	cpse	r7, r22
     166:	76 12       	cpse	r7, r22
     168:	f8 11       	cpse	r31, r8
     16a:	76 12       	cpse	r7, r22
     16c:	76 12       	cpse	r7, r22
     16e:	76 12       	cpse	r7, r22
     170:	76 12       	cpse	r7, r22
     172:	76 12       	cpse	r7, r22
     174:	76 12       	cpse	r7, r22
     176:	76 12       	cpse	r7, r22
     178:	32 12       	cpse	r3, r18
     17a:	76 12       	cpse	r7, r22
     17c:	76 12       	cpse	r7, r22
     17e:	76 12       	cpse	r7, r22
     180:	76 12       	cpse	r7, r22
     182:	76 12       	cpse	r7, r22
     184:	76 12       	cpse	r7, r22
     186:	76 12       	cpse	r7, r22
     188:	f8 11       	cpse	r31, r8
     18a:	76 12       	cpse	r7, r22
     18c:	76 12       	cpse	r7, r22
     18e:	76 12       	cpse	r7, r22
     190:	76 12       	cpse	r7, r22
     192:	76 12       	cpse	r7, r22
     194:	76 12       	cpse	r7, r22
     196:	76 12       	cpse	r7, r22
     198:	32 12       	cpse	r3, r18
     19a:	76 12       	cpse	r7, r22
     19c:	76 12       	cpse	r7, r22
     19e:	76 12       	cpse	r7, r22
     1a0:	76 12       	cpse	r7, r22
     1a2:	76 12       	cpse	r7, r22
     1a4:	76 12       	cpse	r7, r22
     1a6:	76 12       	cpse	r7, r22
     1a8:	14 12       	cpse	r1, r20
     1aa:	76 12       	cpse	r7, r22
     1ac:	76 12       	cpse	r7, r22
     1ae:	76 12       	cpse	r7, r22
     1b0:	76 12       	cpse	r7, r22
     1b2:	76 12       	cpse	r7, r22
     1b4:	76 12       	cpse	r7, r22
     1b6:	76 12       	cpse	r7, r22
     1b8:	36 12       	cpse	r3, r22
     1ba:	76 12       	cpse	r7, r22
     1bc:	76 12       	cpse	r7, r22
     1be:	76 12       	cpse	r7, r22
     1c0:	76 12       	cpse	r7, r22
     1c2:	76 12       	cpse	r7, r22
     1c4:	76 12       	cpse	r7, r22
     1c6:	76 12       	cpse	r7, r22
     1c8:	36 12       	cpse	r3, r22
     1ca:	76 12       	cpse	r7, r22
     1cc:	76 12       	cpse	r7, r22
     1ce:	76 12       	cpse	r7, r22
     1d0:	76 12       	cpse	r7, r22
     1d2:	76 12       	cpse	r7, r22
     1d4:	76 12       	cpse	r7, r22
     1d6:	76 12       	cpse	r7, r22
     1d8:	4c 12       	cpse	r4, r28
     1da:	76 12       	cpse	r7, r22
     1dc:	76 12       	cpse	r7, r22
     1de:	76 12       	cpse	r7, r22
     1e0:	76 12       	cpse	r7, r22
     1e2:	76 12       	cpse	r7, r22
     1e4:	76 12       	cpse	r7, r22
     1e6:	76 12       	cpse	r7, r22
     1e8:	6a 12       	cpse	r6, r26
     1ea:	76 12       	cpse	r7, r22
     1ec:	76 12       	cpse	r7, r22
     1ee:	76 12       	cpse	r7, r22
     1f0:	76 12       	cpse	r7, r22
     1f2:	76 12       	cpse	r7, r22
     1f4:	76 12       	cpse	r7, r22
     1f6:	76 12       	cpse	r7, r22
     1f8:	6a 12       	cpse	r6, r26
     1fa:	76 12       	cpse	r7, r22
     1fc:	76 12       	cpse	r7, r22
     1fe:	76 12       	cpse	r7, r22
     200:	76 12       	cpse	r7, r22
     202:	76 12       	cpse	r7, r22
     204:	76 12       	cpse	r7, r22
     206:	76 12       	cpse	r7, r22
     208:	76 12       	cpse	r7, r22
     20a:	76 12       	cpse	r7, r22
     20c:	76 12       	cpse	r7, r22
     20e:	76 12       	cpse	r7, r22
     210:	76 12       	cpse	r7, r22
     212:	76 12       	cpse	r7, r22
     214:	76 12       	cpse	r7, r22
     216:	76 12       	cpse	r7, r22
     218:	76 12       	cpse	r7, r22
     21a:	76 12       	cpse	r7, r22
     21c:	76 12       	cpse	r7, r22
     21e:	76 12       	cpse	r7, r22
     220:	76 12       	cpse	r7, r22
     222:	76 12       	cpse	r7, r22
     224:	76 12       	cpse	r7, r22
     226:	76 12       	cpse	r7, r22
     228:	76 12       	cpse	r7, r22
     22a:	76 12       	cpse	r7, r22
     22c:	76 12       	cpse	r7, r22
     22e:	76 12       	cpse	r7, r22
     230:	76 12       	cpse	r7, r22
     232:	76 12       	cpse	r7, r22
     234:	76 12       	cpse	r7, r22
     236:	76 12       	cpse	r7, r22
     238:	76 12       	cpse	r7, r22
     23a:	76 12       	cpse	r7, r22
     23c:	76 12       	cpse	r7, r22
     23e:	76 12       	cpse	r7, r22
     240:	76 12       	cpse	r7, r22
     242:	76 12       	cpse	r7, r22
     244:	76 12       	cpse	r7, r22
     246:	76 12       	cpse	r7, r22
     248:	76 12       	cpse	r7, r22
     24a:	76 12       	cpse	r7, r22
     24c:	76 12       	cpse	r7, r22
     24e:	76 12       	cpse	r7, r22
     250:	76 12       	cpse	r7, r22
     252:	76 12       	cpse	r7, r22
     254:	76 12       	cpse	r7, r22
     256:	76 12       	cpse	r7, r22
     258:	75 12       	cpse	r7, r21

0000025a <__trampolines_end>:
     25a:	4e 41       	sbci	r20, 0x1E	; 30
     25c:	4e 49       	Address 0x0000025c is out of bounds.
.word	0xffff	; ????

0000025d <pstr_inity>:
     25d:	49 4e 49 54 59                                      INITY

00000262 <pstr_inf>:
     262:	49 4e 46                                            INF

00000265 <pwr_m10>:
     265:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     275:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000027d <pwr_p10>:
     27d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     28d:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000295 <_ZZN10GsmManager11sendViaGprsEPKcE3__c>:
     295:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002a0 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_2>:
	...

000002a1 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_1>:
	...

000002a2 <_ZZN10GsmManager11sendViaGprsEPKcE3__c_0>:
     2a2:	77 65 62 2e 6d 74 6e 2e 63 69 00                    web.mtn.ci.

000002ad <_ZZN10GsmManager11sendViaGprsEPKcE3__c_3>:
     2ad:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

000002b8 <_ZZ5setupE3__c>:
     2b8:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000002c4 <_ZZN12RmMemManager12verifyEepRomEvE3__c>:
     2c4:	45 45 50 52 4f 4d 20 54 65 73 74 3a 20 4c 6f 6e     EEPROM Test: Lon
     2d4:	67 3d 00                                            g=.

000002d7 <_ZZN12RmMemManager12verifyEepRomEvE3__c_0>:
     2d7:	2c 20 49 6e 74 3d 00                                , Int=.

000002de <_ZZN12RmMemManager12verifyEepRomEvE3__c_1>:
     2de:	2c 20 53 68 6f 72 74 3d 00                          , Short=.

000002e7 <_ZZN12RmMemManager12verifyEepRomEvE3__c_2>:
     2e7:	2c 20 43 68 61 72 3d 00                             , Char=.

000002ef <_ZZN12RmMemManager9printDataEvE3__c>:
     2ef:	4d 6f 64 75 6c 65 20 23 00                          Module #.

000002f8 <_ZZN12RmMemManager9printDataEvE3__c_0>:
     2f8:	23 20 42 6f 6f 74 73 00                             # Boots.

00000300 <_ZZN12RmMemManager9printDataEvE3__c_1>:
     300:	4e 65 78 74 20 41 64 64 72 00                       Next Addr.

0000030a <digital_pin_to_timer_PGM>:
     30a:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     31a:	00 00 00 00                                         ....

0000031e <digital_pin_to_bit_mask_PGM>:
     31e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     32e:	04 08 10 20                                         ... 

00000332 <digital_pin_to_port_PGM>:
     332:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     342:	03 03 03 03                                         ....

00000346 <port_to_input_PGM>:
     346:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000350 <port_to_output_PGM>:
     350:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000035a <port_to_mode_PGM>:
     35a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000364 <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c_0>:
     364:	09 3c 2d 2d 2d 20 00                                .<--- .

0000036b <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
     36b:	09 2d 2d 2d 3e 20 00                                .---> .

00000372 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
     372:	09 3c 2d 2d 2d 20 00                                .<--- .

00000379 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
     379:	09 2d 2d 2d 3e 20 00                                .---> .

00000380 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
     380:	09 3c 2d 2d 2d 20 00                                .<--- .

00000387 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
     387:	09 2d 2d 2d 3e 20 00                                .---> .

0000038e <_ZZN13Adafruit_FONA8getReplyEPcjE3__c_0>:
     38e:	09 3c 2d 2d 2d 20 00                                .<--- .

00000395 <_ZZN13Adafruit_FONA8getReplyEPcjE3__c>:
     395:	09 2d 2d 2d 3e 20 00                                .---> .

0000039c <_ZZN13Adafruit_FONA8readlineEjbE3__c_0>:
     39c:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

000003a4 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
     3a4:	53 50 41 43 45 00                                   SPACE.

000003aa <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
     3aa:	09 3c 2d 2d 2d 20 00                                .<--- .

000003b1 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
     3b1:	52 45 44 49 52 00                                   REDIR.

000003b7 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
     3b7:	55 52 4c 00                                         URL.

000003bb <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
     3bb:	55 41 00                                            UA.

000003be <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
     3be:	43 49 44 00                                         CID.

000003c2 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
     3c2:	4c 65 6e 3a 20 00                                   Len: .

000003c8 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
     3c8:	53 74 61 74 75 73 3a 20 00                          Status: .

000003d1 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
     3d1:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000003d9 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
     3d9:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

000003e5 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
     3e5:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000003f0 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
     3f0:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

000003fc <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
     3fc:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000409 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
     409:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000416 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     416:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000425 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     425:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000042e <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     42e:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

0000043b <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     43b:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000448 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     448:	09 2d 2d 2d 3e 20 00                                .---> .

0000044f <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     44f:	22 2c 00                                            ",.

00000452 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     452:	22 2c 22 00                                         ",".

00000456 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     456:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000464 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     464:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000472 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     472:	09 2d 2d 2d 3e 20 00                                .---> .

00000479 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     479:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000485 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     485:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

00000491 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     491:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000049c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     49c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000004a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     4a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000004b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     4b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000004bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     4bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000004c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     4c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000004d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     4d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     4e2:	44 22 2c 00                                         D",.

000004e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     4e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     4f6:	45 52 22 2c 00                                      ER",.

000004fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     4fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000505 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     505:	09 2d 2d 2d 3e 20 00                                .---> .

0000050c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     50c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000516 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     516:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     526:	4e 22 2c 00                                         N",.

0000052a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     52a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     53a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000548 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     548:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000553 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     553:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000055e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     55e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000566 <_ZZN13Adafruit_FONA6getGPSEhPchE3__c_0>:
     566:	53 49 4e 46 00                                      SINF.

0000056b <_ZZN13Adafruit_FONA6getGPSEhPchE3__c>:
     56b:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

00000576 <_ZZN13Adafruit_FONA9GPSstatusEvE3__c_0>:
     576:	2b 43 47 4e 53 49 4e 46 3a 20 00                    +CGNSINF: .

00000581 <_ZZN13Adafruit_FONA9GPSstatusEvE3__c>:
     581:	41 54 2b 43 47 4e 53 49 4e 46 00                    AT+CGNSINF.

0000058c <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_1>:
     58c:	3e 20 00                                            > .

0000058f <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c_0>:
     58f:	3e 20 00                                            > .

00000592 <_ZZN13Adafruit_FONA7sendSMSEPcS0_E3__c>:
     592:	41 54 2b 43 4d 47 46 3d 31 00                       AT+CMGF=1.

0000059c <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     59c:	41 54 2b 43 53 51 00                                AT+CSQ.

000005a3 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     5a3:	2b 43 53 51 3a 20 00                                +CSQ: .

000005aa <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c>:
     5aa:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

000005b3 <_ZZN13Adafruit_FONA16getNetworkStatusEvE3__c_0>:
     5b3:	2b 43 52 45 47 3a 20 00                             +CREG: .

000005bb <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     5bb:	41 54 2b 43 42 43 00                                AT+CBC.

000005c2 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     5c2:	2b 43 42 43 3a 20 00                                +CBC: .

000005c9 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_20>:
     5c9:	53 49 4d 38 30 30 48 00                             SIM800H.

000005d1 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_19>:
     5d1:	09 3c 2d 2d 2d 20 00                                .<--- .

000005d8 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_18>:
     5d8:	09 2d 2d 2d 3e 20 00                                .---> .

000005df <_ZZN13Adafruit_FONA5beginER6StreamE3__c_17>:
     5df:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 45 00     SIMCOM_SIM5320E.

000005ef <_ZZN13Adafruit_FONA5beginER6StreamE3__c_16>:
     5ef:	53 49 4d 43 4f 4d 5f 53 49 4d 35 33 32 30 41 00     SIMCOM_SIM5320A.

000005ff <_ZZN13Adafruit_FONA5beginER6StreamE3__c_15>:
     5ff:	53 49 4d 38 30 30 20 52 31 33 00                    SIM800 R13.

0000060a <_ZZN13Adafruit_FONA5beginER6StreamE3__c_14>:
     60a:	53 49 4d 38 30 38 20 52 31 33 00                    SIM808 R13.

00000615 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_13>:
     615:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

00000620 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_12>:
     620:	09 3c 2d 2d 2d 20 00                                .<--- .

00000627 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_11>:
     627:	09 2d 2d 2d 3e 20 00                                .---> .

0000062e <_ZZN13Adafruit_FONA5beginER6StreamE3__c_10>:
     62e:	41 54 2b 43 56 48 55 3d 30 00                       AT+CVHU=0.

00000638 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_9>:
     638:	41 54 45 30 00                                      ATE0.

0000063d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_8>:
     63d:	41 54 45 30 00                                      ATE0.

00000642 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_7>:
     642:	41 54 00                                            AT.

00000645 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_6>:
     645:	41 54 00                                            AT.

00000648 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_5>:
     648:	41 54 00                                            AT.

0000064b <_ZZN13Adafruit_FONA5beginER6StreamE3__c_4>:
     64b:	54 69 6d 65 6f 75 74 3a 20 4e 6f 20 72 65 73 70     Timeout: No resp
     65b:	6f 6e 73 65 20 74 6f 20 41 54 2e 2e 2e 20 6c 61     onse to AT... la
     66b:	73 74 20 64 69 74 63 68 20 61 74 74 65 6d 70 74     st ditch attempt
     67b:	2e 00                                               ..

0000067d <_ZZN13Adafruit_FONA5beginER6StreamE3__c_2>:
     67d:	41 54 00                                            AT.

00000680 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_3>:
     680:	41 54 00                                            AT.

00000683 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_1>:
     683:	41 54 00                                            AT.

00000686 <_ZZN13Adafruit_FONA5beginER6StreamE3__c_0>:
     686:	53 65 72 69 61 6c 20 77 61 73 20 61 76 61 69 6c     Serial was avail
     696:	61 62 6c 65 00                                      able.

0000069b <_ZZN13Adafruit_FONA5beginER6StreamE3__c>:
     69b:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     6ab:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000006bc <_ZZN13Adafruit_FONAC4EaE3__c_1>:
     6bc:	4f 4b 00                                            OK.

000006bf <_ZZN13Adafruit_FONAC4EaE3__c_0>:
     6bf:	46 4f 4e 41 00                                      FONA.

000006c4 <_ZZN13Adafruit_FONAC4EaE3__c>:
     6c4:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000006cc <__ctors_start>:
     6cc:	12 08       	sbc	r1, r2
     6ce:	2e 16       	cp	r2, r30
     6d0:	88 1a       	sub	r8, r24

000006d2 <__ctors_end>:
     6d2:	1f 08       	sbc	r1, r15

000006d4 <__dtors_end>:
     6d4:	11 24       	eor	r1, r1
     6d6:	1f be       	out	0x3f, r1	; 63
     6d8:	cf ef       	ldi	r28, 0xFF	; 255
     6da:	d8 e0       	ldi	r29, 0x08	; 8
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	cd bf       	out	0x3d, r28	; 61

000006e0 <__do_copy_data>:
     6e0:	13 e0       	ldi	r17, 0x03	; 3
     6e2:	a0 e0       	ldi	r26, 0x00	; 0
     6e4:	b1 e0       	ldi	r27, 0x01	; 1
     6e6:	e0 e8       	ldi	r30, 0x80	; 128
     6e8:	f0 e6       	ldi	r31, 0x60	; 96
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__do_copy_data+0x10>
     6ec:	05 90       	lpm	r0, Z+
     6ee:	0d 92       	st	X+, r0
     6f0:	a2 37       	cpi	r26, 0x72	; 114
     6f2:	b1 07       	cpc	r27, r17
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <__do_copy_data+0xc>

000006f6 <__do_clear_bss>:
     6f6:	28 e0       	ldi	r18, 0x08	; 8
     6f8:	a2 e7       	ldi	r26, 0x72	; 114
     6fa:	b3 e0       	ldi	r27, 0x03	; 3
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <.do_clear_bss_start>

000006fe <.do_clear_bss_loop>:
     6fe:	1d 92       	st	X+, r1

00000700 <.do_clear_bss_start>:
     700:	a8 38       	cpi	r26, 0x88	; 136
     702:	b2 07       	cpc	r27, r18
     704:	e1 f7       	brne	.-8      	; 0x6fe <.do_clear_bss_loop>

00000706 <__do_global_ctors>:
     706:	13 e0       	ldi	r17, 0x03	; 3
     708:	c9 e6       	ldi	r28, 0x69	; 105
     70a:	d3 e0       	ldi	r29, 0x03	; 3
     70c:	04 c0       	rjmp	.+8      	; 0x716 <__do_global_ctors+0x10>
     70e:	21 97       	sbiw	r28, 0x01	; 1
     710:	fe 01       	movw	r30, r28
     712:	0e 94 43 2c 	call	0x5886	; 0x5886 <__tablejump2__>
     716:	c6 36       	cpi	r28, 0x66	; 102
     718:	d1 07       	cpc	r29, r17
     71a:	c9 f7       	brne	.-14     	; 0x70e <__do_global_ctors+0x8>
     71c:	0e 94 b6 1a 	call	0x356c	; 0x356c <main>
     720:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__do_global_dtors>

00000724 <__bad_interrupt>:
     724:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000728 <_ZN10GpsManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GpsManager.h"

GpsManager::GpsManager(uint8_t isMock)
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	00 d0       	rcall	.+0      	; 0x72e <_ZN10GpsManagerC1Eh+0x6>
     72e:	1f 92       	push	r1
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	6b 83       	std	Y+3, r22	; 0x03
					  :_isMock(isMock)
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <_ZN13Adafruit_FONAC1Ea>
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	9a 81       	ldd	r25, Y+2	; 0x02
     748:	86 5e       	subi	r24, 0xE6	; 230
     74a:	9e 4f       	sbci	r25, 0xFE	; 254
     74c:	2b 81       	ldd	r18, Y+3	; 0x03
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
{
}
     752:	00 00       	nop
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <_ZN10GpsManagerD1Ev>:

GpsManager::~GpsManager(){}
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	00 d0       	rcall	.+0      	; 0x766 <_ZN10GpsManagerD1Ev+0x6>
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	9a 83       	std	Y+2, r25	; 0x02
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	00 00       	nop
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <_ZN10GpsManager7setFonaER13Adafruit_FONA>:
	
void GpsManager::setFona(Adafruit_FONA& fonaInstance){
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	00 d0       	rcall	.+0      	; 0x780 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x6>
     780:	00 d0       	rcall	.+0      	; 0x782 <_ZN10GpsManager7setFonaER13Adafruit_FONA+0x8>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	7c 83       	std	Y+4, r23	; 0x04
     78c:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	2b 81       	ldd	r18, Y+3	; 0x03
     794:	3c 81       	ldd	r19, Y+4	; 0x04
     796:	b9 01       	movw	r22, r18
     798:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN13Adafruit_FONAaSERKS_>
}
     79c:	00 00       	nop
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <_ZN10GpsManager9toggleGpsEb>:

boolean GpsManager::toggleGps(boolean onOff){
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <_ZN10GpsManager9toggleGpsEb+0x6>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <_ZN10GpsManager9toggleGpsEb+0x8>
     7b4:	1f 92       	push	r1
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9c 83       	std	Y+4, r25	; 0x04
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	6d 83       	std	Y+5, r22	; 0x05
	
	if (_isMock)
     7c0:	8b 81       	ldd	r24, Y+3	; 0x03
     7c2:	9c 81       	ldd	r25, Y+4	; 0x04
     7c4:	86 5e       	subi	r24, 0xE6	; 230
     7c6:	9e 4f       	sbci	r25, 0xFE	; 254
     7c8:	fc 01       	movw	r30, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	88 23       	and	r24, r24
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <_ZN10GpsManager9toggleGpsEb+0x28>
		return true;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <_ZN10GpsManager9toggleGpsEb+0x30>
	
	int var = 99999;
     7d4:	8f e9       	ldi	r24, 0x9F	; 159
     7d6:	96 e8       	ldi	r25, 0x86	; 134
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	//This does what?
	//if (onOff)
		//return fona.enableGPSNMEA(var);
	//
	//return fona.enableGPS(onOff);
}
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <_ZN10GpsManager9gpsStatusEv>:

int8_t GpsManager::gpsStatus(){
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <_ZN10GpsManager9gpsStatusEv+0x6>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	9a 83       	std	Y+2, r25	; 0x02
     7f8:	89 83       	std	Y+1, r24	; 0x01
	
	//if (_isMock)
		//return 3; //Magic
	//
	//return fona.GPSstatus();
}
     7fa:	00 00       	nop
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <_ZN10GpsManager10getGpsInfoER7GpsInfo>:

void GpsManager::getGpsInfo(GpsInfo& info){
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x12>
     818:	00 d0       	rcall	.+0      	; 0x81a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x14>
     81a:	00 d0       	rcall	.+0      	; 0x81c <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x16>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	7e 83       	std	Y+6, r23	; 0x06
     826:	6d 83       	std	Y+5, r22	; 0x05

	if (_isMock)
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	86 5e       	subi	r24, 0xE6	; 230
     82e:	9e 4f       	sbci	r25, 0xFE	; 254
     830:	fc 01       	movw	r30, r24
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	09 f4       	brne	.+2      	; 0x83a <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x34>
     838:	48 c0       	rjmp	.+144    	; 0x8ca <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xc4>
	{
		info.altitude = 10;
     83a:	2d 81       	ldd	r18, Y+5	; 0x05
     83c:	3e 81       	ldd	r19, Y+6	; 0x06
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	a0 e2       	ldi	r26, 0x20	; 32
     844:	b1 e4       	ldi	r27, 0x41	; 65
     846:	f9 01       	movw	r30, r18
     848:	82 8b       	std	Z+18, r24	; 0x12
     84a:	93 8b       	std	Z+19, r25	; 0x13
     84c:	a4 8b       	std	Z+20, r26	; 0x14
     84e:	b5 8b       	std	Z+21, r27	; 0x15
		
		strcpy(info.date, "20180301181716");
     850:	8d 81       	ldd	r24, Y+5	; 0x05
     852:	9e 81       	ldd	r25, Y+6	; 0x06
     854:	46 96       	adiw	r24, 0x16	; 22
     856:	2f e0       	ldi	r18, 0x0F	; 15
     858:	ef e1       	ldi	r30, 0x1F	; 31
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	dc 01       	movw	r26, r24
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	2a 95       	dec	r18
     864:	e1 f7       	brne	.-8      	; 0x85e <_ZN10GpsManager10getGpsInfoER7GpsInfo+0x58>
		//info.date[14]='\0';
		
		info.gpsStatus = 30;
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	9e 81       	ldd	r25, Y+6	; 0x06
     86a:	2e e1       	ldi	r18, 0x1E	; 30
     86c:	fc 01       	movw	r30, r24
     86e:	21 83       	std	Z+1, r18	; 0x01
		info.heading = 40;
     870:	2d 81       	ldd	r18, Y+5	; 0x05
     872:	3e 81       	ldd	r19, Y+6	; 0x06
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e2       	ldi	r26, 0x20	; 32
     87a:	b2 e4       	ldi	r27, 0x42	; 66
     87c:	f9 01       	movw	r30, r18
     87e:	86 87       	std	Z+14, r24	; 0x0e
     880:	97 87       	std	Z+15, r25	; 0x0f
     882:	a0 8b       	std	Z+16, r26	; 0x10
     884:	b1 8b       	std	Z+17, r27	; 0x11
		info.lat = 50;
     886:	2d 81       	ldd	r18, Y+5	; 0x05
     888:	3e 81       	ldd	r19, Y+6	; 0x06
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	a8 e4       	ldi	r26, 0x48	; 72
     890:	b2 e4       	ldi	r27, 0x42	; 66
     892:	f9 01       	movw	r30, r18
     894:	82 83       	std	Z+2, r24	; 0x02
     896:	93 83       	std	Z+3, r25	; 0x03
     898:	a4 83       	std	Z+4, r26	; 0x04
     89a:	b5 83       	std	Z+5, r27	; 0x05
		info.lon = 60;
     89c:	2d 81       	ldd	r18, Y+5	; 0x05
     89e:	3e 81       	ldd	r19, Y+6	; 0x06
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e7       	ldi	r26, 0x70	; 112
     8a6:	b2 e4       	ldi	r27, 0x42	; 66
     8a8:	f9 01       	movw	r30, r18
     8aa:	86 83       	std	Z+6, r24	; 0x06
     8ac:	97 83       	std	Z+7, r25	; 0x07
     8ae:	a0 87       	std	Z+8, r26	; 0x08
     8b0:	b1 87       	std	Z+9, r27	; 0x09
		info.speed_kph = 70;
     8b2:	2d 81       	ldd	r18, Y+5	; 0x05
     8b4:	3e 81       	ldd	r19, Y+6	; 0x06
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	ac e8       	ldi	r26, 0x8C	; 140
     8bc:	b2 e4       	ldi	r27, 0x42	; 66
     8be:	f9 01       	movw	r30, r18
     8c0:	82 87       	std	Z+10, r24	; 0x0a
     8c2:	93 87       	std	Z+11, r25	; 0x0b
     8c4:	a4 87       	std	Z+12, r26	; 0x0c
     8c6:	b5 87       	std	Z+13, r27	; 0x0d
		return;
     8c8:	42 c0       	rjmp	.+132    	; 0x94e <__stack+0x4f>
	}

	int8_t gpsStatus = fona.GPSstatus();
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <_ZN13Adafruit_FONA9GPSstatusEv>
     8d2:	89 83       	std	Y+1, r24	; 0x01
	
	//Store the status regardless
	info.gpsStatus = gpsStatus;
     8d4:	8d 81       	ldd	r24, Y+5	; 0x05
     8d6:	9e 81       	ldd	r25, Y+6	; 0x06
     8d8:	29 81       	ldd	r18, Y+1	; 0x01
     8da:	fc 01       	movw	r30, r24
     8dc:	21 83       	std	Z+1, r18	; 0x01
	
	// we need at least a 2D fix
	if (gpsStatus < 2) {
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	34 f4       	brge	.+12     	; 0x8f0 <_ZN10GpsManager10getGpsInfoER7GpsInfo+0xea>
		info.errorCode = ERR_GPS_NO_FIX;
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	9e 81       	ldd	r25, Y+6	; 0x06
     8e8:	2a e0       	ldi	r18, 0x0A	; 10
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
		return;
     8ee:	2f c0       	rjmp	.+94     	; 0x94e <__stack+0x4f>
	}

	//We know the date won't be >20 from it's format
	boolean success = fona.getGPS(&info.lat, &info.lon, 
     8f0:	8d 81       	ldd	r24, Y+5	; 0x05
     8f2:	9e 81       	ldd	r25, Y+6	; 0x06
     8f4:	8c 01       	movw	r16, r24
     8f6:	0a 5e       	subi	r16, 0xEA	; 234
     8f8:	1f 4f       	sbci	r17, 0xFF	; 255
     8fa:	8d 81       	ldd	r24, Y+5	; 0x05
     8fc:	9e 81       	ldd	r25, Y+6	; 0x06
     8fe:	dc 01       	movw	r26, r24
     900:	52 96       	adiw	r26, 0x12	; 18
     902:	8d 81       	ldd	r24, Y+5	; 0x05
     904:	9e 81       	ldd	r25, Y+6	; 0x06
     906:	fc 01       	movw	r30, r24
     908:	3e 96       	adiw	r30, 0x0e	; 14
     90a:	8d 81       	ldd	r24, Y+5	; 0x05
     90c:	9e 81       	ldd	r25, Y+6	; 0x06
     90e:	9c 01       	movw	r18, r24
     910:	26 5f       	subi	r18, 0xF6	; 246
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	8d 81       	ldd	r24, Y+5	; 0x05
     916:	9e 81       	ldd	r25, Y+6	; 0x06
     918:	ac 01       	movw	r20, r24
     91a:	4a 5f       	subi	r20, 0xFA	; 250
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	bc 01       	movw	r22, r24
     924:	6e 5f       	subi	r22, 0xFE	; 254
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	8b 81       	ldd	r24, Y+3	; 0x03
     92a:	9c 81       	ldd	r25, Y+4	; 0x04
		&info.speed_kph, &info.heading, &info.altitude, (char*)info.date);
     92c:	68 01       	movw	r12, r16
     92e:	7d 01       	movw	r14, r26
     930:	8f 01       	movw	r16, r30
     932:	0e 94 44 21 	call	0x4288	; 0x4288 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>
     936:	8a 83       	std	Y+2, r24	; 0x02

	// make sure we have a response
	if (!success){
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	89 27       	eor	r24, r25
     93e:	88 23       	and	r24, r24
     940:	31 f0       	breq	.+12     	; 0x94e <__stack+0x4f>
		info.errorCode = ERR_GPS_BAD_FIELD;
     942:	8d 81       	ldd	r24, Y+5	; 0x05
     944:	9e 81       	ldd	r25, Y+6	; 0x06
     946:	2c e0       	ldi	r18, 0x0C	; 12
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
		return;
     94c:	00 00       	nop
	}
}
     94e:	26 96       	adiw	r28, 0x06	; 6
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	08 95       	ret

0000096c <_ZN10GsmManagerC1Eh>:
#include <Arduino.h>
#include "Helpers.h"
#include "Adafruit_FONA.h"
#include "GsmManager.h"

GsmManager::GsmManager(/*const Adafruit_FONA fonaInstance, */uint8_t isMock)
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	00 d0       	rcall	.+0      	; 0x972 <_ZN10GsmManagerC1Eh+0x6>
     972:	1f 92       	push	r1
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	9a 83       	std	Y+2, r25	; 0x02
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	6b 83       	std	Y+3, r22	; 0x03
					 :/*fona(fonaInstance),*/ _isMock(isMock)
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	2b 81       	ldd	r18, Y+3	; 0x03
     984:	fc 01       	movw	r30, r24
     986:	24 83       	std	Z+4, r18	; 0x04
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	05 96       	adiw	r24, 0x05	; 5
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <_ZN13Adafruit_FONAC1Ea>
{
}
     994:	00 00       	nop
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <_ZN10GsmManagerD1Ev>:

GsmManager::~GsmManager(){}
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <_ZN10GsmManagerD1Ev+0x6>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	00 00       	nop
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <_ZN10GsmManager7setFonaER13Adafruit_FONA>:

void GsmManager::setFona(Adafruit_FONA& fonaInstance){
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x6>
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <_ZN10GsmManager7setFonaER13Adafruit_FONA+0x8>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	7c 83       	std	Y+4, r23	; 0x04
     9ce:	6b 83       	std	Y+3, r22	; 0x03
	fona = fonaInstance;
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	05 96       	adiw	r24, 0x05	; 5
     9d6:	2b 81       	ldd	r18, Y+3	; 0x03
     9d8:	3c 81       	ldd	r19, Y+4	; 0x04
     9da:	b9 01       	movw	r22, r18
     9dc:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <_ZN13Adafruit_FONAaSERKS_>
}
     9e0:	00 00       	nop
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <_ZN10GsmManager5resetEv>:

void GsmManager::reset(){
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_ZN10GsmManager5resetEv+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef UNIT_TESTS
	MOCK_DATA_SENT_GPRS = NULL;
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	fc 01       	movw	r30, r24
     a04:	11 82       	std	Z+1, r1	; 0x01
     a06:	10 82       	st	Z, r1
	MOCK_DATA_SENT_SMS  = NULL;
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	fc 01       	movw	r30, r24
     a0e:	13 82       	std	Z+3, r1	; 0x03
     a10:	12 82       	std	Z+2, r1	; 0x02
	#endif
}
     a12:	00 00       	nop
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <_ZN10GsmManager5beginEv>:

bool GsmManager::begin(){
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <_ZN10GsmManager5beginEv+0xa>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	9a 83       	std	Y+2, r25	; 0x02
     a2e:	89 83       	std	Y+1, r24	; 0x01

	if (_isMock)
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	fc 01       	movw	r30, r24
     a36:	94 81       	ldd	r25, Z+4	; 0x04
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	99 23       	and	r25, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <_ZN10GsmManager5beginEv+0x22>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	88 23       	and	r24, r24
     a42:	11 f0       	breq	.+4      	; 0xa48 <_ZN10GsmManager5beginEv+0x2a>
		return true;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	2d c0       	rjmp	.+90     	; 0xaa2 <_ZN10GsmManager5beginEv+0x84>

	fonaSerial = new SoftwareSerial(FONA_TX, FONA_RX);
     a48:	8f e1       	ldi	r24, 0x1F	; 31
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 c5 1a 	call	0x358a	; 0x358a <_Znwj>
     a50:	8c 01       	movw	r16, r24
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	42 e0       	ldi	r20, 0x02	; 2
     a56:	63 e0       	ldi	r22, 0x03	; 3
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 bc 2a 	call	0x5578	; 0x5578 <_ZN14SoftwareSerialC1Ehhb>
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	81 5e       	subi	r24, 0xE1	; 225
     a64:	9e 4f       	sbci	r25, 0xFE	; 254
     a66:	fc 01       	movw	r30, r24
     a68:	11 83       	std	Z+1, r17	; 0x01
     a6a:	00 83       	st	Z, r16
	fonaSerial->begin(4800);
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	81 5e       	subi	r24, 0xE1	; 225
     a72:	9e 4f       	sbci	r25, 0xFE	; 254
     a74:	fc 01       	movw	r30, r24
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	40 ec       	ldi	r20, 0xC0	; 192
     a7c:	52 e1       	ldi	r21, 0x12	; 18
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <_ZN14SoftwareSerial5beginEl>
	return fona.begin(*fonaSerial);
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	81 5e       	subi	r24, 0xE1	; 225
     a8c:	9e 4f       	sbci	r25, 0xFE	; 254
     a8e:	fc 01       	movw	r30, r24
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	9c 01       	movw	r18, r24
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	05 96       	adiw	r24, 0x05	; 5
     a9c:	b9 01       	movw	r22, r18
     a9e:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <_ZN13Adafruit_FONA5beginER6Stream>
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <_ZN10GsmManager14getBattPercentEPj>:

bool GsmManager::getBattPercent(uint16_t* vbat){
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <_ZN10GsmManager14getBattPercentEPj+0x6>
     ab6:	00 d0       	rcall	.+0      	; 0xab8 <_ZN10GsmManager14getBattPercentEPj+0x8>
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	9a 83       	std	Y+2, r25	; 0x02
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	7c 83       	std	Y+4, r23	; 0x04
     ac2:	6b 83       	std	Y+3, r22	; 0x03
	
	if (_isMock)
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	fc 01       	movw	r30, r24
     aca:	94 81       	ldd	r25, Z+4	; 0x04
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	99 23       	and	r25, r25
     ad0:	09 f4       	brne	.+2      	; 0xad4 <_ZN10GsmManager14getBattPercentEPj+0x24>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	88 23       	and	r24, r24
     ad6:	49 f0       	breq	.+18     	; 0xaea <_ZN10GsmManager14getBattPercentEPj+0x3a>
	{
		*vbat = 99;
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	23 e6       	ldi	r18, 0x63	; 99
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	fc 01       	movw	r30, r24
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
		return true;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	08 c0       	rjmp	.+16     	; 0xafa <_ZN10GsmManager14getBattPercentEPj+0x4a>
	}
	
	return fona.getBattPercent(vbat);
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	05 96       	adiw	r24, 0x05	; 5
     af0:	2b 81       	ldd	r18, Y+3	; 0x03
     af2:	3c 81       	ldd	r19, Y+4	; 0x04
     af4:	b9 01       	movw	r22, r18
     af6:	0e 94 c3 28 	call	0x5186	; 0x5186 <_ZN13Adafruit_FONA14getBattPercentEPj>
}
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <_ZN10GsmManager10sendViaSmsEPKc>:

/* Must return 0 ONLY on success */
uint8_t GsmManager::sendViaSms(const char* data) {
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	69 97       	sbiw	r28, 0x19	; 25
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	9f 8b       	std	Y+23, r25	; 0x17
     b1e:	8e 8b       	std	Y+22, r24	; 0x16
     b20:	79 8f       	std	Y+25, r23	; 0x19
     b22:	68 8f       	std	Y+24, r22	; 0x18

	if (_isMock)
     b24:	8e 89       	ldd	r24, Y+22	; 0x16
     b26:	9f 89       	ldd	r25, Y+23	; 0x17
     b28:	fc 01       	movw	r30, r24
     b2a:	94 81       	ldd	r25, Z+4	; 0x04
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	99 23       	and	r25, r25
     b30:	09 f4       	brne	.+2      	; 0xb34 <_ZN10GsmManager10sendViaSmsEPKc+0x2c>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	88 23       	and	r24, r24
     b36:	11 f0       	breq	.+4      	; 0xb3c <_ZN10GsmManager10sendViaSmsEPKc+0x34>
	{
///		MOCK_DATA_SENT_SMS = data;
		return 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	26 c0       	rjmp	.+76     	; 0xb88 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	}

	char sendto[21]="+447968988149";
     b3c:	2e e0       	ldi	r18, 0x0E	; 14
     b3e:	ec e3       	ldi	r30, 0x3C	; 60
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	dc 01       	movw	r26, r24
     b48:	01 90       	ld	r0, Z+
     b4a:	0d 92       	st	X+, r0
     b4c:	2a 95       	dec	r18
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <_ZN10GsmManager10sendViaSmsEPKc+0x40>
     b50:	27 e0       	ldi	r18, 0x07	; 7
     b52:	ce 01       	movw	r24, r28
     b54:	0f 96       	adiw	r24, 0x0f	; 15
     b56:	fc 01       	movw	r30, r24
     b58:	32 2f       	mov	r19, r18
     b5a:	11 92       	st	Z+, r1
     b5c:	3a 95       	dec	r19
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <_ZN10GsmManager10sendViaSmsEPKc+0x52>
	if (!fona.sendSMS(sendto, (char*)data)) {
     b60:	8e 89       	ldd	r24, Y+22	; 0x16
     b62:	9f 89       	ldd	r25, Y+23	; 0x17
     b64:	05 96       	adiw	r24, 0x05	; 5
     b66:	28 8d       	ldd	r18, Y+24	; 0x18
     b68:	39 8d       	ldd	r19, Y+25	; 0x19
     b6a:	a9 01       	movw	r20, r18
     b6c:	9e 01       	movw	r18, r28
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	b9 01       	movw	r22, r18
     b74:	0e 94 9f 24 	call	0x493e	; 0x493e <_ZN13Adafruit_FONA7sendSMSEPcS0_>
     b78:	98 2f       	mov	r25, r24
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	89 27       	eor	r24, r25
     b7e:	88 23       	and	r24, r24
     b80:	11 f0       	breq	.+4      	; 0xb86 <_ZN10GsmManager10sendViaSmsEPKc+0x7e>
		return 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <_ZN10GsmManager10sendViaSmsEPKc+0x80>
	} else {
		return 0;
     b86:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     b88:	69 96       	adiw	r28, 0x19	; 25
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <_ZN10GsmManager10getGsmInfoER7GsmInfo>:

void GsmManager::getGsmInfo(GsmInfo& info){
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x6>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <_ZN10GsmManager10getGsmInfoER7GsmInfo+0x8>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	9a 83       	std	Y+2, r25	; 0x02
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	7c 83       	std	Y+4, r23	; 0x04
     bac:	6b 83       	std	Y+3, r22	; 0x03
	
	info.networkStatus = getNetworkStatus();
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_ZN10GsmManager16getNetworkStatusEv>
     bb6:	28 2f       	mov	r18, r24
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	fc 01       	movw	r30, r24
     bbe:	22 83       	std	Z+2, r18	; 0x02
	info.rssi = getRSSI();
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	9a 81       	ldd	r25, Y+2	; 0x02
     bc4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN10GsmManager7getRSSIEv>
     bc8:	28 2f       	mov	r18, r24
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	fc 01       	movw	r30, r24
     bd0:	21 83       	std	Z+1, r18	; 0x01
}
     bd2:	00 00       	nop
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <_ZN10GsmManager16getNetworkStatusEv>:

uint8_t GsmManager::getNetworkStatus()
{
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <_ZN10GsmManager16getNetworkStatusEv+0x6>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	fc 01       	movw	r30, r24
     bf6:	94 81       	ldd	r25, Z+4	; 0x04
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	99 23       	and	r25, r25
     bfc:	09 f4       	brne	.+2      	; 0xc00 <_ZN10GsmManager16getNetworkStatusEv+0x1e>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	88 23       	and	r24, r24
     c02:	11 f0       	breq	.+4      	; 0xc08 <_ZN10GsmManager16getNetworkStatusEv+0x26>
		return 7; //magic
     c04:	87 e0       	ldi	r24, 0x07	; 7
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <_ZN10GsmManager16getNetworkStatusEv+0x30>
	else
		return fona.getNetworkStatus();
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	05 96       	adiw	r24, 0x05	; 5
     c0e:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <_ZN13Adafruit_FONA16getNetworkStatusEv>
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <_ZN10GsmManager7getRSSIEv>:

uint8_t GsmManager::getRSSI()
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <_ZN10GsmManager7getRSSIEv+0x6>
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01
	if (_isMock)
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	fc 01       	movw	r30, r24
     c30:	94 81       	ldd	r25, Z+4	; 0x04
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	99 23       	and	r25, r25
     c36:	09 f4       	brne	.+2      	; 0xc3a <_ZN10GsmManager7getRSSIEv+0x1e>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	88 23       	and	r24, r24
     c3c:	11 f0       	breq	.+4      	; 0xc42 <_ZN10GsmManager7getRSSIEv+0x26>
		return 21; //magic
     c3e:	85 e1       	ldi	r24, 0x15	; 21
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <_ZN10GsmManager7getRSSIEv+0x30>
	else
		return fona.getRSSI();
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	05 96       	adiw	r24, 0x05	; 5
     c48:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <_ZN13Adafruit_FONA7getRSSIEv>
}
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <_ZN10GsmManager10enableGPRSEb>:


/* GPRS should be enabled, then wait for connection, then transmit */
bool GsmManager::enableGPRS(boolean switchOn)
{
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <_ZN10GsmManager10enableGPRSEb+0x6>
     c5c:	1f 92       	push	r1
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	6b 83       	std	Y+3, r22	; 0x03
	return fona.enableGPRS(switchOn);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	05 96       	adiw	r24, 0x05	; 5
     c6e:	6b 81       	ldd	r22, Y+3	; 0x03
     c70:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_ZN13Adafruit_FONA10enableGPRSEb>
}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <_ZN10GsmManager11sendViaGprsEPKc>:

/* Can return any HTTP status code. Must return 0 ONLY  on success. */
uint16_t GsmManager::sendViaGprs(const char* data)
{
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	2e 97       	sbiw	r28, 0x0e	; 14
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	9c 87       	std	Y+12, r25	; 0x0c
     ca2:	8b 87       	std	Y+11, r24	; 0x0b
     ca4:	7e 87       	std	Y+14, r23	; 0x0e
     ca6:	6d 87       	std	Y+13, r22	; 0x0d
	if (_isMock)
     ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
     caa:	9c 85       	ldd	r25, Y+12	; 0x0c
     cac:	fc 01       	movw	r30, r24
     cae:	94 81       	ldd	r25, Z+4	; 0x04
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	99 23       	and	r25, r25
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <_ZN10GsmManager11sendViaGprsEPKc+0x38>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	88 23       	and	r24, r24
     cba:	19 f0       	breq	.+6      	; 0xcc2 <_ZN10GsmManager11sendViaGprsEPKc+0x42>
	{
		RM_LOG2(F("Mocking GPRS-Send"),data);
		//MOCK_DATA_SENT_GPRS = data;
		return 0;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	99 c0       	rjmp	.+306    	; 0xdf4 <_ZN10GsmManager11sendViaGprsEPKc+0x174>
	}
	
	RM_LOG2(F("Sending Actual data via GPRS"),data);

	uint16_t ret = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
	
	// Post data to website
	uint16_t statuscode;
	int16_t length;
	char* url="http://cars.khuddam.org.uk/r.php"; //TODO: check should not require https!
     cca:	81 e5       	ldi	r24, 0x51	; 81
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	9d 83       	std	Y+5, r25	; 0x05
     cd0:	8c 83       	std	Y+4, r24	; 0x04

	boolean succ =
		fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <strlen>
     cda:	8c 01       	movw	r16, r24
     cdc:	45 e9       	ldi	r20, 0x95	; 149
     cde:	52 e0       	ldi	r21, 0x02	; 2
     ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce4:	05 96       	adiw	r24, 0x05	; 5
     ce6:	de 01       	movw	r26, r28
     ce8:	19 96       	adiw	r26, 0x09	; 9
     cea:	fe 01       	movw	r30, r28
     cec:	37 96       	adiw	r30, 0x07	; 7
     cee:	2d 85       	ldd	r18, Y+13	; 0x0d
     cf0:	3e 85       	ldd	r19, Y+14	; 0x0e
     cf2:	6c 81       	ldd	r22, Y+4	; 0x04
     cf4:	7d 81       	ldd	r23, Y+5	; 0x05
     cf6:	6d 01       	movw	r12, r26
     cf8:	7f 01       	movw	r14, r30
     cfa:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     cfe:	8b 83       	std	Y+3, r24	; 0x03
		
	//Try alternative APN settings - TODO: store these elsewhere for easy testing/configuration on-site
	if (!succ) {
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 27       	eor	r24, r25
     d06:	88 23       	and	r24, r24
     d08:	11 f1       	breq	.+68     	; 0xd4e <_ZN10GsmManager11sendViaGprsEPKc+0xce>
		fona.setGPRSNetworkSettings(F("web.mtn.ci"), F(""), F(""));
     d0a:	20 ea       	ldi	r18, 0xA0	; 160
     d0c:	32 e0       	ldi	r19, 0x02	; 2
     d0e:	41 ea       	ldi	r20, 0xA1	; 161
     d10:	52 e0       	ldi	r21, 0x02	; 2
     d12:	62 ea       	ldi	r22, 0xA2	; 162
     d14:	72 e0       	ldi	r23, 0x02	; 2
     d16:	8b 85       	ldd	r24, Y+11	; 0x0b
     d18:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1a:	05 96       	adiw	r24, 0x05	; 5
     d1c:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>
		succ = fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length);
     d20:	8d 85       	ldd	r24, Y+13	; 0x0d
     d22:	9e 85       	ldd	r25, Y+14	; 0x0e
     d24:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <strlen>
     d28:	8c 01       	movw	r16, r24
     d2a:	4d ea       	ldi	r20, 0xAD	; 173
     d2c:	52 e0       	ldi	r21, 0x02	; 2
     d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d30:	9c 85       	ldd	r25, Y+12	; 0x0c
     d32:	05 96       	adiw	r24, 0x05	; 5
     d34:	de 01       	movw	r26, r28
     d36:	19 96       	adiw	r26, 0x09	; 9
     d38:	fe 01       	movw	r30, r28
     d3a:	37 96       	adiw	r30, 0x07	; 7
     d3c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d40:	6c 81       	ldd	r22, Y+4	; 0x04
     d42:	7d 81       	ldd	r23, Y+5	; 0x05
     d44:	6d 01       	movw	r12, r26
     d46:	7f 01       	movw	r14, r30
     d48:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
     d4c:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (!succ)
     d4e:	9b 81       	ldd	r25, Y+3	; 0x03
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	89 27       	eor	r24, r25
     d54:	88 23       	and	r24, r24
     d56:	29 f0       	breq	.+10     	; 0xd62 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
	{
		ret = 999;
     d58:	87 ee       	ldi	r24, 0xE7	; 231
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	47 c0       	rjmp	.+142    	; 0xdf0 <_ZN10GsmManager11sendViaGprsEPKc+0x170>
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     d62:	89 85       	ldd	r24, Y+9	; 0x09
     d64:	9a 85       	ldd	r25, Y+10	; 0x0a
     d66:	18 16       	cp	r1, r24
     d68:	19 06       	cpc	r1, r25
     d6a:	8c f5       	brge	.+98     	; 0xdce <_ZN10GsmManager11sendViaGprsEPKc+0x14e>
			while (fona.available()) {
     d6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d70:	05 96       	adiw	r24, 0x05	; 5
     d72:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN13Adafruit_FONA9availableEv>
     d76:	21 e0       	ldi	r18, 0x01	; 1
     d78:	89 2b       	or	r24, r25
     d7a:	09 f4       	brne	.+2      	; 0xd7e <_ZN10GsmManager11sendViaGprsEPKc+0xfe>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	22 23       	and	r18, r18
     d80:	81 f3       	breq	.-32     	; 0xd62 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
				char c = fona.read();
     d82:	8b 85       	ldd	r24, Y+11	; 0x0b
     d84:	9c 85       	ldd	r25, Y+12	; 0x0c
     d86:	05 96       	adiw	r24, 0x05	; 5
     d88:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <_ZN13Adafruit_FONA4readEv>
     d8c:	8e 83       	std	Y+6, r24	; 0x06
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
     d8e:	80 ec       	ldi	r24, 0xC0	; 192
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	80 72       	andi	r24, 0x20	; 32
     d9c:	99 27       	eor	r25, r25
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	89 2b       	or	r24, r25
     da2:	09 f0       	breq	.+2      	; 0xda6 <_ZN10GsmManager11sendViaGprsEPKc+0x126>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	22 23       	and	r18, r18
     da8:	09 f0       	breq	.+2      	; 0xdac <_ZN10GsmManager11sendViaGprsEPKc+0x12c>
     daa:	f1 cf       	rjmp	.-30     	; 0xd8e <_ZN10GsmManager11sendViaGprsEPKc+0x10e>
				UDR0 = c;
     dac:	86 ec       	ldi	r24, 0xC6	; 198
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	2e 81       	ldd	r18, Y+6	; 0x06
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
					                                                      
				length--;
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	9a 87       	std	Y+10, r25	; 0x0a
     dbe:	89 87       	std	Y+9, r24	; 0x09
				if (! length) break;
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	89 2b       	or	r24, r25
     dc6:	09 f0       	breq	.+2      	; 0xdca <_ZN10GsmManager11sendViaGprsEPKc+0x14a>
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
			while (fona.available()) {
     dc8:	d1 cf       	rjmp	.-94     	; 0xd6c <_ZN10GsmManager11sendViaGprsEPKc+0xec>
					                                                      
				loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
				UDR0 = c;
					                                                      
				length--;
				if (! length) break;
     dca:	00 00       	nop
	}
	else
	{
		RM_LOG2(F("GPRS Status:"), statuscode);
			                                                      
		while (length > 0) {
     dcc:	ca cf       	rjmp	.-108    	; 0xd62 <_ZN10GsmManager11sendViaGprsEPKc+0xe2>
					                                                      
				length--;
				if (! length) break;
			}
		}
		fona.HTTP_POST_end();
     dce:	8b 85       	ldd	r24, Y+11	; 0x0b
     dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     dd2:	05 96       	adiw	r24, 0x05	; 5
     dd4:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN13Adafruit_FONA13HTTP_POST_endEv>
			                                                      
		//200 => Success
		ret = (statuscode == 200) ? 0 : statuscode;
     dd8:	8f 81       	ldd	r24, Y+7	; 0x07
     dda:	98 85       	ldd	r25, Y+8	; 0x08
     ddc:	88 3c       	cpi	r24, 0xC8	; 200
     dde:	91 05       	cpc	r25, r1
     de0:	19 f0       	breq	.+6      	; 0xde8 <_ZN10GsmManager11sendViaGprsEPKc+0x168>
     de2:	8f 81       	ldd	r24, Y+7	; 0x07
     de4:	98 85       	ldd	r25, Y+8	; 0x08
     de6:	02 c0       	rjmp	.+4      	; 0xdec <_ZN10GsmManager11sendViaGprsEPKc+0x16c>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
	}
	                                                      
	return ret;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     df4:	2e 96       	adiw	r28, 0x0e	; 14
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	08 95       	ret

00000e12 <setup>:
void on3MinutesElapsed(bool doWrite);
void printData();
void initSubsystems();


void setup() {
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	// Optionally configure HTTP gets to follow redirects over SSL.
	// Default is not to follow SSL redirects, however if you uncomment
	// the following line then redirects over SSL will be followed.
	//fona.setHTTPSRedirect(true);

	delay(3000); //time for hardware peripherals to warm up + for user's serial monitor to connect
     e1a:	68 eb       	ldi	r22, 0xB8	; 184
     e1c:	7b e0       	ldi	r23, 0x0B	; 11
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
	
	//Turn off redundant notification LED controlled by pin 13
	pinMode(13, OUTPUT);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	8d e0       	ldi	r24, 0x0D	; 13
     e2a:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <pinMode>
	
	#ifdef OUTPUT_DEBUG
		Serial.begin(9600); //Writes to Serial output
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	55 e2       	ldi	r21, 0x25	; 37
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	88 e9       	ldi	r24, 0x98	; 152
     e38:	97 e0       	ldi	r25, 0x07	; 7
     e3a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_ZN14HardwareSerial5beginEm>
	#endif
	
	RM_LOGLN(F("Starting..."));
     e3e:	88 eb       	ldi	r24, 0xB8	; 184
     e40:	92 e0       	ldi	r25, 0x02	; 2
     e42:	bc 01       	movw	r22, r24
     e44:	88 e9       	ldi	r24, 0x98	; 152
     e46:	97 e0       	ldi	r25, 0x07	; 7
     e48:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>

	initSubsystems();
     e4c:	0e 94 49 07 	call	0xe92	; 0xe92 <_Z14initSubsystemsv>

	if (INITIALISE_MODULE)
     e50:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
     e54:	88 23       	and	r24, r24
     e56:	29 f0       	breq	.+10     	; 0xe62 <setup+0x50>
	{
		initModule(INIT_MODULE_ID);
     e58:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <INIT_MODULE_ID>
     e5c:	0e 94 6c 07 	call	0xed8	; 0xed8 <_Z10initModuleh>
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <setup+0x58>
	}
	else
	{
		mem.incrementBootCount();
     e62:	8e e8       	ldi	r24, 0x8E	; 142
     e64:	94 e0       	ldi	r25, 0x04	; 4
     e66:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN12RmMemManager18incrementBootCountEv>
	}
	
	if (IS_MEM_TEST)
     e6a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <IS_MEM_TEST>
     e6e:	88 23       	and	r24, r24
     e70:	21 f0       	breq	.+8      	; 0xe7a <setup+0x68>
	{
		mem.verifyEepRom();
     e72:	8e e8       	ldi	r24, 0x8E	; 142
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZN12RmMemManager12verifyEepRomEv>
	}
	
	if (ONLY_PRINT_DATA)
     e7a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ONLY_PRINT_DATA>
     e7e:	88 23       	and	r24, r24
     e80:	21 f0       	breq	.+8      	; 0xe8a <setup+0x78>
	{
		mem.printData();
     e82:	8e e8       	ldi	r24, 0x8E	; 142
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN12RmMemManager9printDataEv>
	}
}
     e8a:	00 00       	nop
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <_Z14initSubsystemsv>:

void initSubsystems(){
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62

	gps.setFona(fona);
     e9a:	64 e7       	ldi	r22, 0x74	; 116
     e9c:	73 e0       	ldi	r23, 0x03	; 3
     e9e:	8f e8       	ldi	r24, 0x8F	; 143
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN10GpsManager7setFonaER13Adafruit_FONA>
	gsm.setFona(fona);
     ea6:	64 e7       	ldi	r22, 0x74	; 116
     ea8:	73 e0       	ldi	r23, 0x03	; 3
     eaa:	8a ea       	ldi	r24, 0xAA	; 170
     eac:	95 e0       	ldi	r25, 0x05	; 5
     eae:	0e 94 de 04 	call	0x9bc	; 0x9bc <_ZN10GsmManager7setFonaER13Adafruit_FONA>

	if (!gsm.begin()) {
     eb2:	8a ea       	ldi	r24, 0xAA	; 170
     eb4:	95 e0       	ldi	r25, 0x05	; 5
     eb6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN10GsmManager5beginEv>
     eba:	98 2f       	mov	r25, r24
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	89 27       	eor	r24, r25
     ec0:	88 23       	and	r24, r24
     ec2:	31 f4       	brne	.+12     	; 0xed0 <_Z14initSubsystemsv+0x3e>
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
	}
	
	if (!gps.toggleGps(true)){
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	8f e8       	ldi	r24, 0x8F	; 143
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN10GpsManager9toggleGpsEb>
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <_Z14initSubsystemsv+0x40>

	if (!gsm.begin()) {
	
		//FONA library did not begin - store in ROM, terminate and don't consume power
		//(TODO + Why would this ever happen?)
		return;
     ed0:	00 00       	nop
	if (!gps.toggleGps(true)){
	
		//TODO: store in ROM
		return;
	}
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	08 95       	ret

00000ed8 <_Z10initModuleh>:

void initModule(uint8_t moduleId){
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	1f 92       	push	r1
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
	
	mem.initialiseModule(moduleId);
     ee4:	69 81       	ldd	r22, Y+1	; 0x01
     ee6:	8e e8       	ldi	r24, 0x8E	; 142
     ee8:	94 e0       	ldi	r25, 0x04	; 4
     eea:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN12RmMemManager16initialiseModuleEh>

	RM_LOG2("Initialised with id ", moduleId);
     eee:	60 e8       	ldi	r22, 0x80	; 128
     ef0:	71 e0       	ldi	r23, 0x01	; 1
     ef2:	88 e9       	ldi	r24, 0x98	; 152
     ef4:	97 e0       	ldi	r25, 0x07	; 7
     ef6:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
     efa:	65 e9       	ldi	r22, 0x95	; 149
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	88 e9       	ldi	r24, 0x98	; 152
     f00:	97 e0       	ldi	r25, 0x07	; 7
     f02:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
     f06:	4a e0       	ldi	r20, 0x0A	; 10
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	69 81       	ldd	r22, Y+1	; 0x01
     f0c:	88 e9       	ldi	r24, 0x98	; 152
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	0e 94 ca 1b 	call	0x3794	; 0x3794 <_ZN5Print7printlnEhi>
}
     f14:	00 00       	nop
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <_Z17on3MinutesElapsedb>:

void on3MinutesElapsed(bool doWrite){
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	1f 92       	push	r1
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
	//
	////gsm.sendViaSms(sm.c_str()); //TO: local number !
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}
     f2a:	00 00       	nop
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <loop>:

volatile int _timerCounter = 0;
void loop() {
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62

	++_timerCounter;
     f3c:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_timerCounter>
     f40:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_timerCounter+0x1>
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 cc 06 	sts	0x06CC, r25	; 0x8006cc <_timerCounter+0x1>
     f4a:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <_timerCounter>
		
	delay(1000);
     f4e:	68 ee       	ldi	r22, 0xE8	; 232
     f50:	73 e0       	ldi	r23, 0x03	; 3
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
	
	if (ONLY_PRINT_DATA) {
     f5a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ONLY_PRINT_DATA>
     f5e:	88 23       	and	r24, r24
     f60:	c9 f4       	brne	.+50     	; 0xf94 <loop+0x60>
		//if (_timerCounter==1)
			//printData();
		return; //No writes, informational only
	}
	
	if (INITIALISE_MODULE){
     f62:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
     f66:	88 23       	and	r24, r24
     f68:	b9 f4       	brne	.+46     	; 0xf98 <loop+0x64>
		
		return; //Should be initialising the module once and writing to it with amended firmware
	}

	RM_LOGLN("Looping");
     f6a:	67 e9       	ldi	r22, 0x97	; 151
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	88 e9       	ldi	r24, 0x98	; 152
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
		//on3MinutesElapsed(true);
		//printData();
		//return;
	//}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins when subsystems toggled&ready
     f76:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <_timerCounter>
     f7a:	90 91 cc 06 	lds	r25, 0x06CC	; 0x8006cc <_timerCounter+0x1>
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	84 3b       	cpi	r24, 0xB4	; 180
     f82:	91 05       	cpc	r25, r1
     f84:	09 f0       	breq	.+2      	; 0xf88 <loop+0x54>
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	22 23       	and	r18, r18
     f8a:	39 f0       	breq	.+14     	; 0xf9a <loop+0x66>
		on3MinutesElapsed(true);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z17on3MinutesElapsedb>
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <loop+0x66>
	
	if (ONLY_PRINT_DATA) {
		
		//if (_timerCounter==1)
			//printData();
		return; //No writes, informational only
     f94:	00 00       	nop
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <loop+0x66>
	}
	
	if (INITIALISE_MODULE){
		
		return; //Should be initialising the module once and writing to it with amended firmware
     f98:	00 00       	nop
		//return;
	//}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins when subsystems toggled&ready
		on3MinutesElapsed(true);
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <_Z41__static_initialization_and_destruction_0ii>:
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <_Z41__static_initialization_and_destruction_0ii+0x6>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <_Z41__static_initialization_and_destruction_0ii+0x8>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	7c 83       	std	Y+4, r23	; 0x04
     fb2:	6b 83       	std	Y+3, r22	; 0x03
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	e1 f4       	brne	.+56     	; 0xff4 <_Z41__static_initialization_and_destruction_0ii+0x54>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	c1 f4       	brne	.+48     	; 0xff4 <_Z41__static_initialization_and_destruction_0ii+0x54>
#include "GpsManager.h"
#include "RmMemManager.h"


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
     fc4:	64 e0       	ldi	r22, 0x04	; 4
     fc6:	84 e7       	ldi	r24, 0x74	; 116
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <_ZN13Adafruit_FONAC1Ea>
RmMemManager mem(false);
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	8e e8       	ldi	r24, 0x8E	; 142
     fd2:	94 e0       	ldi	r25, 0x04	; 4
     fd4:	0e 94 2c 08 	call	0x1058	; 0x1058 <_ZN12RmMemManagerC1Eb>
GpsManager gps(IS_GPS_MOCK);
     fd8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <IS_GPS_MOCK>
     fdc:	68 2f       	mov	r22, r24
     fde:	8f e8       	ldi	r24, 0x8F	; 143
     fe0:	94 e0       	ldi	r25, 0x04	; 4
     fe2:	0e 94 94 03 	call	0x728	; 0x728 <_ZN10GpsManagerC1Eh>
GsmManager gsm(IS_GSM_MOCK);
     fe6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <IS_GSM_MOCK>
     fea:	68 2f       	mov	r22, r24
     fec:	8a ea       	ldi	r24, 0xAA	; 170
     fee:	95 e0       	ldi	r25, 0x05	; 5
     ff0:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN10GsmManagerC1Eh>
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	89 2b       	or	r24, r25
     ffa:	61 f4       	brne	.+24     	; 0x1014 <_Z41__static_initialization_and_destruction_0ii+0x74>
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	41 f4       	brne	.+16     	; 0x1014 <_Z41__static_initialization_and_destruction_0ii+0x74>
    1004:	8a ea       	ldi	r24, 0xAA	; 170
    1006:	95 e0       	ldi	r25, 0x05	; 5
    1008:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN10GsmManagerD1Ev>


//C++ instances
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
RmMemManager mem(false);
GpsManager gps(IS_GPS_MOCK);
    100c:	8f e8       	ldi	r24, 0x8F	; 143
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN10GpsManagerD1Ev>
		//return;
	//}

	if (_timerCounter == 3*60)//Run once per startup, at after 3 mins when subsystems toggled&ready
		on3MinutesElapsed(true);
}
    1014:	00 00       	nop
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <_GLOBAL__sub_I_IS_GSM_MOCK>:
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	6f ef       	ldi	r22, 0xFF	; 255
    102e:	7f ef       	ldi	r23, 0xFF	; 255
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_Z41__static_initialization_and_destruction_0ii>
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <_GLOBAL__sub_D_IS_GSM_MOCK>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	6f ef       	ldi	r22, 0xFF	; 255
    1048:	7f ef       	ldi	r23, 0xFF	; 255
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_Z41__static_initialization_and_destruction_0ii>
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <_ZN12RmMemManagerC1Eb>:
boolean _ledTopPinGreen=false;
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock){
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	00 d0       	rcall	.+0      	; 0x105e <_ZN12RmMemManagerC1Eb+0x6>
    105e:	1f 92       	push	r1
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6b 83       	std	Y+3, r22	; 0x03
	_isMock = isMock;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
	
	if (!_isMock)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	fc 01       	movw	r30, r24
    107a:	90 81       	ld	r25, Z
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	89 27       	eor	r24, r25
    1080:	88 23       	and	r24, r24
    1082:	21 f0       	breq	.+8      	; 0x108c <_ZN12RmMemManagerC1Eb+0x34>
		Wire.begin();
    1084:	8a e8       	ldi	r24, 0x8A	; 138
    1086:	97 e0       	ldi	r25, 0x07	; 7
    1088:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN7TwoWire5beginEv>
}
    108c:	00 00       	nop
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <_Z13internalWriteiPhh>:

void internalWrite(int16_t address, uint8_t* data, uint8_t numBytes){
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	28 97       	sbiw	r28, 0x08	; 8
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	9d 83       	std	Y+5, r25	; 0x05
    10b0:	8c 83       	std	Y+4, r24	; 0x04
    10b2:	7f 83       	std	Y+7, r23	; 0x07
    10b4:	6e 83       	std	Y+6, r22	; 0x06
    10b6:	48 87       	std	Y+8, r20	; 0x08
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    10b8:	19 82       	std	Y+1, r1	; 0x01
    10ba:	99 81       	ldd	r25, Y+1	; 0x01
    10bc:	88 85       	ldd	r24, Y+8	; 0x08
    10be:	98 17       	cp	r25, r24
    10c0:	e0 f5       	brcc	.+120    	; 0x113a <_Z13internalWriteiPhh+0xa0>
	
		uint16_t thisByteAddr = address+i;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	9b 83       	std	Y+3, r25	; 0x03
    10d2:	8a 83       	std	Y+2, r24	; 0x02
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		RM_LOGMEMLN(*(data+i));
	
		Wire.beginTransmission(0x50);
    10d4:	60 e5       	ldi	r22, 0x50	; 80
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	8a e8       	ldi	r24, 0x8A	; 138
    10da:	97 e0       	ldi	r25, 0x07	; 7
    10dc:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	89 2f       	mov	r24, r25
    10e6:	99 27       	eor	r25, r25
    10e8:	bc 01       	movw	r22, r24
    10ea:	8a e8       	ldi	r24, 0x8A	; 138
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    10ee:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	99 27       	eor	r25, r25
    10f8:	bc 01       	movw	r22, r24
    10fa:	8a e8       	ldi	r24, 0x8A	; 138
    10fc:	97 e0       	ldi	r25, 0x07	; 7
    10fe:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7TwoWire5writeEi>
		Wire.write(*(data+i)); //go byte by byte
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	2e 81       	ldd	r18, Y+6	; 0x06
    110a:	3f 81       	ldd	r19, Y+7	; 0x07
    110c:	82 0f       	add	r24, r18
    110e:	93 1f       	adc	r25, r19
    1110:	fc 01       	movw	r30, r24
    1112:	80 81       	ld	r24, Z
    1114:	68 2f       	mov	r22, r24
    1116:	8a e8       	ldi	r24, 0x8A	; 138
    1118:	97 e0       	ldi	r25, 0x07	; 7
    111a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    111e:	8a e8       	ldi	r24, 0x8A	; 138
    1120:	97 e0       	ldi	r25, 0x07	; 7
    1122:	0e 94 6e 14 	call	0x28dc	; 0x28dc <_ZN7TwoWire15endTransmissionEv>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
    1126:	6f e0       	ldi	r22, 0x0F	; 15
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
	//RM_LOGMEM(F(" from address "));
	//RM_LOGMEMnt((uint8_t)data); //TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	c0 cf       	rjmp	.-128    	; 0x10ba <_Z13internalWriteiPhh+0x20>
	
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}
    113a:	00 00       	nop
    113c:	28 96       	adiw	r28, 0x08	; 8
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <_Z12internalReadiPhh>:

void internalRead(int16_t address, uint8_t* data, uint8_t numBytes){
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	29 97       	sbiw	r28, 0x09	; 9
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	78 87       	std	Y+8, r23	; 0x08
    1168:	6f 83       	std	Y+7, r22	; 0x07
    116a:	49 87       	std	Y+9, r20	; 0x09
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	98 17       	cp	r25, r24
    1174:	08 f0       	brcs	.+2      	; 0x1178 <_Z12internalReadiPhh+0x2a>
    1176:	4b c0       	rjmp	.+150    	; 0x120e <_Z12internalReadiPhh+0xc0>
		
		uint16_t thisByteAddr = address+i;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    118a:	60 e5       	ldi	r22, 0x50	; 80
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	8a e8       	ldi	r24, 0x8A	; 138
    1190:	97 e0       	ldi	r25, 0x07	; 7
    1192:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	89 2f       	mov	r24, r25
    119c:	99 27       	eor	r25, r25
    119e:	bc 01       	movw	r22, r24
    11a0:	8a e8       	ldi	r24, 0x8A	; 138
    11a2:	97 e0       	ldi	r25, 0x07	; 7
    11a4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	99 27       	eor	r25, r25
    11ae:	bc 01       	movw	r22, r24
    11b0:	8a e8       	ldi	r24, 0x8A	; 138
    11b2:	97 e0       	ldi	r25, 0x07	; 7
    11b4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    11b8:	8a e8       	ldi	r24, 0x8A	; 138
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	60 e5       	ldi	r22, 0x50	; 80
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	8a e8       	ldi	r24, 0x8A	; 138
    11ca:	97 e0       	ldi	r25, 0x07	; 7
    11cc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	8a 83       	std	Y+2, r24	; 0x02
		if (Wire.available())
    11d4:	8a e8       	ldi	r24, 0x8A	; 138
    11d6:	97 e0       	ldi	r25, 0x07	; 7
    11d8:	0e 94 02 15 	call	0x2a04	; 0x2a04 <_ZN7TwoWire9availableEv>
    11dc:	21 e0       	ldi	r18, 0x01	; 1
    11de:	89 2b       	or	r24, r25
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <_Z12internalReadiPhh+0x96>
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	22 23       	and	r18, r18
    11e6:	29 f0       	breq	.+10     	; 0x11f2 <_Z12internalReadiPhh+0xa4>
			readByte = Wire.read();
    11e8:	8a e8       	ldi	r24, 0x8A	; 138
    11ea:	97 e0       	ldi	r25, 0x07	; 7
    11ec:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_ZN7TwoWire4readEv>
    11f0:	8a 83       	std	Y+2, r24	; 0x02
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	2f 81       	ldd	r18, Y+7	; 0x07
    11fa:	38 85       	ldd	r19, Y+8	; 0x08
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	2a 81       	ldd	r18, Y+2	; 0x02
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	b0 cf       	rjmp	.-160    	; 0x116e <_Z12internalReadiPhh+0x20>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    120e:	00 00       	nop
    1210:	29 96       	adiw	r28, 0x09	; 9
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address)
{
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	00 d0       	rcall	.+0      	; 0x1228 <_ZN12RmMemManager18getUCharFromMemoryEj+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <_ZN12RmMemManager18getUCharFromMemoryEj+0x8>
    122a:	1f 92       	push	r1
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	9b 83       	std	Y+3, r25	; 0x03
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	7d 83       	std	Y+5, r23	; 0x05
    1236:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1238:	21 e0       	ldi	r18, 0x01	; 1
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	42 2f       	mov	r20, r18
    1240:	9e 01       	movw	r18, r28
    1242:	2f 5f       	subi	r18, 0xFF	; 255
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z12internalReadiPhh>
	return value;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <_ZN12RmMemManager19getUShortFromMemoryEj>:

uint16_t RmMemManager::getUShortFromMemory(uint16_t address)
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <_ZN12RmMemManager19getUShortFromMemoryEj+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <_ZN12RmMemManager19getUShortFromMemoryEj+0x8>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <_ZN12RmMemManager19getUShortFromMemoryEj+0xa>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	8b 83       	std	Y+3, r24	; 0x03
    1270:	7e 83       	std	Y+6, r23	; 0x06
    1272:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1274:	22 e0       	ldi	r18, 0x02	; 2
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	42 2f       	mov	r20, r18
    127c:	9e 01       	movw	r18, r28
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	b9 01       	movw	r22, r18
    1284:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z12internalReadiPhh>
	return value;
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    128c:	26 96       	adiw	r28, 0x06	; 6
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <_ZN12RmMemManager17getUIntFromMemoryEj>:

uint32_t RmMemManager::getUIntFromMemory(uint16_t address)
{
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	28 97       	sbiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	78 87       	std	Y+8, r23	; 0x08
    12b8:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    12ba:	24 e0       	ldi	r18, 0x04	; 4
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	42 2f       	mov	r20, r18
    12c2:	9e 01       	movw	r18, r28
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	b9 01       	movw	r22, r18
    12ca:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z12internalReadiPhh>
	return value;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	ab 81       	ldd	r26, Y+3	; 0x03
    12d4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	28 96       	adiw	r28, 0x08	; 8
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <_ZN12RmMemManager18getULongFromMemoryEj>:

uint64_t RmMemManager::getULongFromMemory(uint16_t address)
{
    12ec:	af 92       	push	r10
    12ee:	bf 92       	push	r11
    12f0:	cf 92       	push	r12
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	2c 97       	sbiw	r28, 0x0c	; 12
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	9a 87       	std	Y+10, r25	; 0x0a
    1312:	89 87       	std	Y+9, r24	; 0x09
    1314:	7c 87       	std	Y+12, r23	; 0x0c
    1316:	6b 87       	std	Y+11, r22	; 0x0b
	uint64_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1318:	28 e0       	ldi	r18, 0x08	; 8
    131a:	8b 85       	ldd	r24, Y+11	; 0x0b
    131c:	9c 85       	ldd	r25, Y+12	; 0x0c
    131e:	42 2f       	mov	r20, r18
    1320:	9e 01       	movw	r18, r28
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z12internalReadiPhh>
	return value;
    132c:	29 81       	ldd	r18, Y+1	; 0x01
    132e:	3a 81       	ldd	r19, Y+2	; 0x02
    1330:	4b 81       	ldd	r20, Y+3	; 0x03
    1332:	5c 81       	ldd	r21, Y+4	; 0x04
    1334:	6d 81       	ldd	r22, Y+5	; 0x05
    1336:	7e 81       	ldd	r23, Y+6	; 0x06
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	a2 2e       	mov	r10, r18
    133e:	b3 2e       	mov	r11, r19
    1340:	c4 2e       	mov	r12, r20
    1342:	d5 2e       	mov	r13, r21
    1344:	e6 2e       	mov	r14, r22
    1346:	f7 2e       	mov	r15, r23
    1348:	08 2f       	mov	r16, r24
    134a:	19 2f       	mov	r17, r25
}
    134c:	2a 2d       	mov	r18, r10
    134e:	3b 2d       	mov	r19, r11
    1350:	4c 2d       	mov	r20, r12
    1352:	5d 2d       	mov	r21, r13
    1354:	6e 2d       	mov	r22, r14
    1356:	7f 2d       	mov	r23, r15
    1358:	80 2f       	mov	r24, r16
    135a:	91 2f       	mov	r25, r17
    135c:	2c 96       	adiw	r28, 0x0c	; 12
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	bf 90       	pop	r11
    137a:	af 90       	pop	r10
    137c:	08 95       	ret

0000137e <_ZN12RmMemManager16setUCharToMemoryEjh>:

void RmMemManager::setUCharToMemory(uint16_t address, uint8_t value)
{
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	00 d0       	rcall	.+0      	; 0x1384 <_ZN12RmMemManager16setUCharToMemoryEjh+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <_ZN12RmMemManager16setUCharToMemoryEjh+0x8>
    1386:	1f 92       	push	r1
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	7c 83       	std	Y+4, r23	; 0x04
    1392:	6b 83       	std	Y+3, r22	; 0x03
    1394:	4d 83       	std	Y+5, r20	; 0x05
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	9e 01       	movw	r18, r28
    139e:	2b 5f       	subi	r18, 0xFB	; 251
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	b9 01       	movw	r22, r18
    13a4:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z13internalWriteiPhh>
}
    13a8:	00 00       	nop
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <_ZN12RmMemManager17setUShortToMemoryEjj>:

void RmMemManager::setUShortToMemory(uint16_t address, uint16_t value)
{
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <_ZN12RmMemManager17setUShortToMemoryEjj+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <_ZN12RmMemManager17setUShortToMemoryEjj+0x8>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <_ZN12RmMemManager17setUShortToMemoryEjj+0xa>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	7c 83       	std	Y+4, r23	; 0x04
    13ce:	6b 83       	std	Y+3, r22	; 0x03
    13d0:	5e 83       	std	Y+6, r21	; 0x06
    13d2:	4d 83       	std	Y+5, r20	; 0x05
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    13d4:	42 e0       	ldi	r20, 0x02	; 2
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	9e 01       	movw	r18, r28
    13dc:	2b 5f       	subi	r18, 0xFB	; 251
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	b9 01       	movw	r22, r18
    13e2:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z13internalWriteiPhh>
}
    13e6:	00 00       	nop
    13e8:	26 96       	adiw	r28, 0x06	; 6
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <_ZN12RmMemManager15setUIntToMemoryEjm>:

void RmMemManager::setUIntToMemory(uint16_t address, uint32_t value)
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	28 97       	sbiw	r28, 0x08	; 8
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	9a 83       	std	Y+2, r25	; 0x02
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	7c 83       	std	Y+4, r23	; 0x04
    1414:	6b 83       	std	Y+3, r22	; 0x03
    1416:	2d 83       	std	Y+5, r18	; 0x05
    1418:	3e 83       	std	Y+6, r19	; 0x06
    141a:	4f 83       	std	Y+7, r20	; 0x07
    141c:	58 87       	std	Y+8, r21	; 0x08
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    141e:	44 e0       	ldi	r20, 0x04	; 4
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	9e 01       	movw	r18, r28
    1426:	2b 5f       	subi	r18, 0xFB	; 251
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	b9 01       	movw	r22, r18
    142c:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z13internalWriteiPhh>
}
    1430:	00 00       	nop
    1432:	28 96       	adiw	r28, 0x08	; 8
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <_ZN12RmMemManager16setULongToMemoryEjy>:

void RmMemManager::setULongToMemory(uint16_t address, uint64_t value)
{
    1444:	ef 92       	push	r14
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	2c 97       	sbiw	r28, 0x0c	; 12
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	7c 83       	std	Y+4, r23	; 0x04
    1466:	6b 83       	std	Y+3, r22	; 0x03
    1468:	ed 82       	std	Y+5, r14	; 0x05
    146a:	fe 82       	std	Y+6, r15	; 0x06
    146c:	0f 83       	std	Y+7, r16	; 0x07
    146e:	18 87       	std	Y+8, r17	; 0x08
    1470:	29 87       	std	Y+9, r18	; 0x09
    1472:	3a 87       	std	Y+10, r19	; 0x0a
    1474:	4b 87       	std	Y+11, r20	; 0x0b
    1476:	5c 87       	std	Y+12, r21	; 0x0c
	internalWrite(address, (uint8_t*)&value, sizeof(value));
    1478:	48 e0       	ldi	r20, 0x08	; 8
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	9e 01       	movw	r18, r28
    1480:	2b 5f       	subi	r18, 0xFB	; 251
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	b9 01       	movw	r22, r18
    1486:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z13internalWriteiPhh>
}
    148a:	00 00       	nop
    148c:	2c 96       	adiw	r28, 0x0c	; 12
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	08 95       	ret

000014a6 <_ZN12RmMemManager16initialiseModuleEh>:

void RmMemManager::initialiseModule(uint8_t moduleId){
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	a0 97       	sbiw	r28, 0x20	; 32
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	9f 8f       	std	Y+31, r25	; 0x1f
    14bc:	8e 8f       	std	Y+30, r24	; 0x1e
    14be:	68 a3       	std	Y+32, r22	; 0x20

	ModuleMeta meta;
	meta.moduleId = moduleId;
    14c0:	88 a1       	ldd	r24, Y+32	; 0x20
    14c2:	89 83       	std	Y+1, r24	; 0x01
	meta.bootCount = 0;
    14c4:	1b 82       	std	Y+3, r1	; 0x03
    14c6:	1a 82       	std	Y+2, r1	; 0x02
	meta.eepromTestArea = 0;
    14c8:	1e 82       	std	Y+6, r1	; 0x06
    14ca:	1f 82       	std	Y+7, r1	; 0x07
    14cc:	18 86       	std	Y+8, r1	; 0x08
    14ce:	19 86       	std	Y+9, r1	; 0x09
    14d0:	1a 86       	std	Y+10, r1	; 0x0a
    14d2:	1b 86       	std	Y+11, r1	; 0x0b
    14d4:	1c 86       	std	Y+12, r1	; 0x0c
    14d6:	1d 86       	std	Y+13, r1	; 0x0d
	meta.nextFreeWriteAddr = MEMLOC_START + sizeof(ModuleMeta);
    14d8:	8d e1       	ldi	r24, 0x1D	; 29
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9d 83       	std	Y+5, r25	; 0x05
    14de:	8c 83       	std	Y+4, r24	; 0x04
	memset(meta.spareBuffer, 0, sizeof(meta.spareBuffer));
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 96       	adiw	r24, 0x0e	; 14
    14e4:	40 e1       	ldi	r20, 0x10	; 16
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <memset>
	
	//TODO: Blank out rest of eeprom too?
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    14f0:	8d e1       	ldi	r24, 0x1D	; 29
    14f2:	48 2f       	mov	r20, r24
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	bc 01       	movw	r22, r24
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 4d 08 	call	0x109a	; 0x109a <_Z13internalWriteiPhh>
}
    1502:	00 00       	nop
    1504:	a0 96       	adiw	r28, 0x20	; 32
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <_ZN12RmMemManager18incrementBootCountEv>:

void RmMemManager::incrementBootCount(){
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	00 d0       	rcall	.+0      	; 0x151c <_ZN12RmMemManager18incrementBootCountEv+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <_ZN12RmMemManager18incrementBootCountEv+0x8>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <_ZN12RmMemManager18incrementBootCountEv+0xa>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
	
	//TODO: Somehow verify Wire is working?
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, bootCount);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	89 83       	std	Y+1, r24	; 0x01
	uint16_t currVal = getUShortFromMemory(addr);
    1530:	29 81       	ldd	r18, Y+1	; 0x01
    1532:	3a 81       	ldd	r19, Y+2	; 0x02
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	b9 01       	movw	r22, r18
    153a:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN12RmMemManager19getUShortFromMemoryEj>
    153e:	9c 83       	std	Y+4, r25	; 0x04
    1540:	8b 83       	std	Y+3, r24	; 0x03
	++currVal;
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
	setUShortToMemory(addr, currVal);
    154c:	4b 81       	ldd	r20, Y+3	; 0x03
    154e:	5c 81       	ldd	r21, Y+4	; 0x04
    1550:	29 81       	ldd	r18, Y+1	; 0x01
    1552:	3a 81       	ldd	r19, Y+2	; 0x02
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	b9 01       	movw	r22, r18
    155a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN12RmMemManager17setUShortToMemoryEjj>
}
    155e:	00 00       	nop
    1560:	26 96       	adiw	r28, 0x06	; 6
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <_ZN12RmMemManager12verifyEepRomEv>:

uint16_t RmMemManager::verifyEepRom(){
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	6e 97       	sbiw	r28, 0x1e	; 30
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	9e 8f       	std	Y+30, r25	; 0x1e
    1598:	8d 8f       	std	Y+29, r24	; 0x1d
	
	//TODO: Verify of spill over 64-bit boundary what to do
	//TODO: Roll-over verification
	//TODO: Don't have strings of messages, return code which translate in a #if NOT_ENCODED_ON_DEVICE block
	
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
    159a:	85 e0       	ldi	r24, 0x05	; 5
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9d 83       	std	Y+5, r25	; 0x05
    15a0:	8c 83       	std	Y+4, r24	; 0x04
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++)
    15a2:	1b 82       	std	Y+3, r1	; 0x03
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	8e 31       	cpi	r24, 0x1E	; 30
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <_ZN12RmMemManager12verifyEepRomEv+0x3a>
    15aa:	29 c1       	rjmp	.+594    	; 0x17fe <_ZN12RmMemManager12verifyEepRomEv+0x28c>
	{
		//No intersection of values so we'll know straight away if wrong bits picked
		this->setULongToMemory(MEM_TEST_LOC, 0xA946F7D8C941F9A8);
    15ac:	6c 81       	ldd	r22, Y+4	; 0x04
    15ae:	7d 81       	ldd	r23, Y+5	; 0x05
    15b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15b4:	0f 2e       	mov	r0, r31
    15b6:	f8 ea       	ldi	r31, 0xA8	; 168
    15b8:	ef 2e       	mov	r14, r31
    15ba:	f0 2d       	mov	r31, r0
    15bc:	0f 2e       	mov	r0, r31
    15be:	f9 ef       	ldi	r31, 0xF9	; 249
    15c0:	ff 2e       	mov	r15, r31
    15c2:	f0 2d       	mov	r31, r0
    15c4:	01 e4       	ldi	r16, 0x41	; 65
    15c6:	19 ec       	ldi	r17, 0xC9	; 201
    15c8:	28 ed       	ldi	r18, 0xD8	; 216
    15ca:	37 ef       	ldi	r19, 0xF7	; 247
    15cc:	46 e4       	ldi	r20, 0x46	; 70
    15ce:	59 ea       	ldi	r21, 0xA9	; 169
    15d0:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN12RmMemManager16setULongToMemoryEjy>
		uint64_t val8 = this->getULongFromMemory(MEM_TEST_LOC);
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15dc:	b9 01       	movw	r22, r18
    15de:	0e 94 76 09 	call	0x12ec	; 0x12ec <_ZN12RmMemManager18getULongFromMemoryEj>
    15e2:	a2 2e       	mov	r10, r18
    15e4:	b3 2e       	mov	r11, r19
    15e6:	c4 2e       	mov	r12, r20
    15e8:	d5 2e       	mov	r13, r21
    15ea:	e6 2e       	mov	r14, r22
    15ec:	f7 2e       	mov	r15, r23
    15ee:	08 2f       	mov	r16, r24
    15f0:	19 2f       	mov	r17, r25
    15f2:	ae 82       	std	Y+6, r10	; 0x06
    15f4:	bf 82       	std	Y+7, r11	; 0x07
    15f6:	c8 86       	std	Y+8, r12	; 0x08
    15f8:	d9 86       	std	Y+9, r13	; 0x09
    15fa:	ea 86       	std	Y+10, r14	; 0x0a
    15fc:	fb 86       	std	Y+11, r15	; 0x0b
    15fe:	0c 87       	std	Y+12, r16	; 0x0c
    1600:	1d 87       	std	Y+13, r17	; 0x0d
		if (val8 != 0xA946F7D8C941F9A8)
    1602:	ae 80       	ldd	r10, Y+6	; 0x06
    1604:	bf 80       	ldd	r11, Y+7	; 0x07
    1606:	c8 84       	ldd	r12, Y+8	; 0x08
    1608:	d9 84       	ldd	r13, Y+9	; 0x09
    160a:	ea 84       	ldd	r14, Y+10	; 0x0a
    160c:	fb 84       	ldd	r15, Y+11	; 0x0b
    160e:	0c 85       	ldd	r16, Y+12	; 0x0c
    1610:	1d 85       	ldd	r17, Y+13	; 0x0d
    1612:	2a 2d       	mov	r18, r10
    1614:	3b 2d       	mov	r19, r11
    1616:	4c 2d       	mov	r20, r12
    1618:	5d 2d       	mov	r21, r13
    161a:	6e 2d       	mov	r22, r14
    161c:	7f 2d       	mov	r23, r15
    161e:	80 2f       	mov	r24, r16
    1620:	91 2f       	mov	r25, r17
    1622:	28 3a       	cpi	r18, 0xA8	; 168
    1624:	39 4f       	sbci	r19, 0xF9	; 249
    1626:	41 44       	sbci	r20, 0x41	; 65
    1628:	59 4c       	sbci	r21, 0xC9	; 201
    162a:	68 4d       	sbci	r22, 0xD8	; 216
    162c:	77 4f       	sbci	r23, 0xF7	; 247
    162e:	86 44       	sbci	r24, 0x46	; 70
    1630:	99 4a       	sbci	r25, 0xA9	; 169
    1632:	59 f0       	breq	.+22     	; 0x164a <_ZN12RmMemManager12verifyEepRomEv+0xd8>
		{
			RM_LOGLN("FAILED LONG");
    1634:	6d ea       	ldi	r22, 0xAD	; 173
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	88 e9       	ldi	r24, 0x98	; 152
    163a:	97 e0       	ldi	r25, 0x07	; 7
    163c:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
			++numFailures;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUIntToMemory(MEM_TEST_LOC, 0xC911F948);
    164a:	6c 81       	ldd	r22, Y+4	; 0x04
    164c:	7d 81       	ldd	r23, Y+5	; 0x05
    164e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1650:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1652:	28 e4       	ldi	r18, 0x48	; 72
    1654:	39 ef       	ldi	r19, 0xF9	; 249
    1656:	41 e1       	ldi	r20, 0x11	; 17
    1658:	59 ec       	ldi	r21, 0xC9	; 201
    165a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN12RmMemManager15setUIntToMemoryEjm>
		uint32_t val4 = this->getUIntFromMemory(MEM_TEST_LOC);
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1664:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1666:	b9 01       	movw	r22, r18
    1668:	0e 94 4f 09 	call	0x129e	; 0x129e <_ZN12RmMemManager17getUIntFromMemoryEj>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8e 87       	std	Y+14, r24	; 0x0e
    1672:	9f 87       	std	Y+15, r25	; 0x0f
    1674:	a8 8b       	std	Y+16, r26	; 0x10
    1676:	b9 8b       	std	Y+17, r27	; 0x11
		if (val4 != 0xC911F948)
    1678:	8e 85       	ldd	r24, Y+14	; 0x0e
    167a:	9f 85       	ldd	r25, Y+15	; 0x0f
    167c:	a8 89       	ldd	r26, Y+16	; 0x10
    167e:	b9 89       	ldd	r27, Y+17	; 0x11
    1680:	88 34       	cpi	r24, 0x48	; 72
    1682:	99 4f       	sbci	r25, 0xF9	; 249
    1684:	a1 41       	sbci	r26, 0x11	; 17
    1686:	b9 4c       	sbci	r27, 0xC9	; 201
    1688:	59 f0       	breq	.+22     	; 0x16a0 <_ZN12RmMemManager12verifyEepRomEv+0x12e>
		{
			RM_LOGLN("FAILED INT");
    168a:	69 eb       	ldi	r22, 0xB9	; 185
    168c:	71 e0       	ldi	r23, 0x01	; 1
    168e:	88 e9       	ldi	r24, 0x98	; 152
    1690:	97 e0       	ldi	r25, 0x07	; 7
    1692:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
			++numFailures;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUShortToMemory(MEM_TEST_LOC, 0x5C3A);
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a8:	4a e3       	ldi	r20, 0x3A	; 58
    16aa:	5c e5       	ldi	r21, 0x5C	; 92
    16ac:	b9 01       	movw	r22, r18
    16ae:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN12RmMemManager17setUShortToMemoryEjj>
		uint16_t val2 = this->getUShortFromMemory(MEM_TEST_LOC);
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ba:	b9 01       	movw	r22, r18
    16bc:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN12RmMemManager19getUShortFromMemoryEj>
    16c0:	9b 8b       	std	Y+19, r25	; 0x13
    16c2:	8a 8b       	std	Y+18, r24	; 0x12
		if (val2 != 0x5C3A)
    16c4:	8a 89       	ldd	r24, Y+18	; 0x12
    16c6:	9b 89       	ldd	r25, Y+19	; 0x13
    16c8:	8a 33       	cpi	r24, 0x3A	; 58
    16ca:	9c 45       	sbci	r25, 0x5C	; 92
    16cc:	59 f0       	breq	.+22     	; 0x16e4 <_ZN12RmMemManager12verifyEepRomEv+0x172>
		{
			RM_LOGLN("FAILED SHORT");
    16ce:	64 ec       	ldi	r22, 0xC4	; 196
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	88 e9       	ldi	r24, 0x98	; 152
    16d4:	97 e0       	ldi	r25, 0x07	; 7
    16d6:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
			++numFailures;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
		}
		
		this->setUCharToMemory(MEM_TEST_LOC, 0xE1);
    16e4:	2c 81       	ldd	r18, Y+4	; 0x04
    16e6:	3d 81       	ldd	r19, Y+5	; 0x05
    16e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ec:	41 ee       	ldi	r20, 0xE1	; 225
    16ee:	b9 01       	movw	r22, r18
    16f0:	0e 94 bf 09 	call	0x137e	; 0x137e <_ZN12RmMemManager16setUCharToMemoryEjh>
		uint8_t val1 = this->getUCharFromMemory(MEM_TEST_LOC);
    16f4:	2c 81       	ldd	r18, Y+4	; 0x04
    16f6:	3d 81       	ldd	r19, Y+5	; 0x05
    16f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16fc:	b9 01       	movw	r22, r18
    16fe:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN12RmMemManager18getUCharFromMemoryEj>
    1702:	8c 8b       	std	Y+20, r24	; 0x14
		if (val1 != 0xE1)
    1704:	8c 89       	ldd	r24, Y+20	; 0x14
    1706:	81 3e       	cpi	r24, 0xE1	; 225
    1708:	59 f0       	breq	.+22     	; 0x1720 <_ZN12RmMemManager12verifyEepRomEv+0x1ae>
		{
			RM_LOGLN("FAILED CHAR");
    170a:	61 ed       	ldi	r22, 0xD1	; 209
    170c:	71 e0       	ldi	r23, 0x01	; 1
    170e:	88 e9       	ldi	r24, 0x98	; 152
    1710:	97 e0       	ldi	r25, 0x07	; 7
    1712:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
			++numFailures;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		RM_LOG(F("EEPROM Test: Long="));
    1720:	84 ec       	ldi	r24, 0xC4	; 196
    1722:	92 e0       	ldi	r25, 0x02	; 2
    1724:	bc 01       	movw	r22, r24
    1726:	88 e9       	ldi	r24, 0x98	; 152
    1728:	97 e0       	ldi	r25, 0x07	; 7
    172a:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLONG(val8, HEX);
    172e:	2e 81       	ldd	r18, Y+6	; 0x06
    1730:	3f 81       	ldd	r19, Y+7	; 0x07
    1732:	48 85       	ldd	r20, Y+8	; 0x08
    1734:	59 85       	ldd	r21, Y+9	; 0x09
    1736:	6a 85       	ldd	r22, Y+10	; 0x0a
    1738:	7b 85       	ldd	r23, Y+11	; 0x0b
    173a:	8c 85       	ldd	r24, Y+12	; 0x0c
    173c:	9d 85       	ldd	r25, Y+13	; 0x0d
    173e:	00 e2       	ldi	r16, 0x20	; 32
    1740:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__lshrdi3>
    1744:	a2 2e       	mov	r10, r18
    1746:	b3 2e       	mov	r11, r19
    1748:	c4 2e       	mov	r12, r20
    174a:	d5 2e       	mov	r13, r21
    174c:	e6 2e       	mov	r14, r22
    174e:	f7 2e       	mov	r15, r23
    1750:	08 2f       	mov	r16, r24
    1752:	19 2f       	mov	r17, r25
    1754:	ad 8a       	std	Y+21, r10	; 0x15
    1756:	be 8a       	std	Y+22, r11	; 0x16
    1758:	cf 8a       	std	Y+23, r12	; 0x17
    175a:	d8 8e       	std	Y+24, r13	; 0x18
    175c:	e9 8e       	std	Y+25, r14	; 0x19
    175e:	fa 8e       	std	Y+26, r15	; 0x1a
    1760:	0b 8f       	std	Y+27, r16	; 0x1b
    1762:	1c 8f       	std	Y+28, r17	; 0x1c
    1764:	8d 89       	ldd	r24, Y+21	; 0x15
    1766:	9e 89       	ldd	r25, Y+22	; 0x16
    1768:	af 89       	ldd	r26, Y+23	; 0x17
    176a:	b8 8d       	ldd	r27, Y+24	; 0x18
    176c:	20 e1       	ldi	r18, 0x10	; 16
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	ac 01       	movw	r20, r24
    1772:	bd 01       	movw	r22, r26
    1774:	88 e9       	ldi	r24, 0x98	; 152
    1776:	97 e0       	ldi	r25, 0x07	; 7
    1778:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN5Print5printEmi>
    177c:	8e 81       	ldd	r24, Y+6	; 0x06
    177e:	9f 81       	ldd	r25, Y+7	; 0x07
    1780:	a8 85       	ldd	r26, Y+8	; 0x08
    1782:	b9 85       	ldd	r27, Y+9	; 0x09
    1784:	20 e1       	ldi	r18, 0x10	; 16
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	ac 01       	movw	r20, r24
    178a:	bd 01       	movw	r22, r26
    178c:	88 e9       	ldi	r24, 0x98	; 152
    178e:	97 e0       	ldi	r25, 0x07	; 7
    1790:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN5Print5printEmi>
		RM_LOG(F(", Int="));
    1794:	87 ed       	ldi	r24, 0xD7	; 215
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	bc 01       	movw	r22, r24
    179a:	88 e9       	ldi	r24, 0x98	; 152
    179c:	97 e0       	ldi	r25, 0x07	; 7
    179e:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val4, HEX);
    17a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a6:	a8 89       	ldd	r26, Y+16	; 0x10
    17a8:	b9 89       	ldd	r27, Y+17	; 0x11
    17aa:	20 e1       	ldi	r18, 0x10	; 16
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	ac 01       	movw	r20, r24
    17b0:	bd 01       	movw	r22, r26
    17b2:	88 e9       	ldi	r24, 0x98	; 152
    17b4:	97 e0       	ldi	r25, 0x07	; 7
    17b6:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN5Print5printEmi>
		RM_LOG(F(", Short="));
    17ba:	8e ed       	ldi	r24, 0xDE	; 222
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	bc 01       	movw	r22, r24
    17c0:	88 e9       	ldi	r24, 0x98	; 152
    17c2:	97 e0       	ldi	r25, 0x07	; 7
    17c4:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGFMT(val2, HEX);
    17c8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ca:	9b 89       	ldd	r25, Y+19	; 0x13
    17cc:	40 e1       	ldi	r20, 0x10	; 16
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	bc 01       	movw	r22, r24
    17d2:	88 e9       	ldi	r24, 0x98	; 152
    17d4:	97 e0       	ldi	r25, 0x07	; 7
    17d6:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN5Print5printEji>
		RM_LOG(F(", Char="));
    17da:	87 ee       	ldi	r24, 0xE7	; 231
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	bc 01       	movw	r22, r24
    17e0:	88 e9       	ldi	r24, 0x98	; 152
    17e2:	97 e0       	ldi	r25, 0x07	; 7
    17e4:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
		RM_LOGLNFMT(val1, HEX);
    17e8:	40 e1       	ldi	r20, 0x10	; 16
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	6c 89       	ldd	r22, Y+20	; 0x14
    17ee:	88 e9       	ldi	r24, 0x98	; 152
    17f0:	97 e0       	ldi	r25, 0x07	; 7
    17f2:	0e 94 ca 1b 	call	0x3794	; 0x3794 <_ZN5Print7printlnEhi>
	uint16_t MEM_TEST_LOC = offsetof(ModuleMeta, eepromTestArea);
	
	//Repeat test multiple times to check for intermittent possible errors
	uint16_t numFailures;
	
	for(uint8_t i=0;i<30;i++)
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	d3 ce       	rjmp	.-602    	; 0x15a4 <_ZN12RmMemManager12verifyEepRomEv+0x32>
		RM_LOGFMT(val2, HEX);
		RM_LOG(F(", Char="));
		RM_LOGLNFMT(val1, HEX);
	}
	
	return numFailures;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1802:	6e 96       	adiw	r28, 0x1e	; 30
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	08 95       	ret

00001824 <_ZN12RmMemManager9printDataEv>:

//TODO: Only in PC_BEHAVIOUR 
void RmMemManager::printData(){
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	6f 97       	sbiw	r28, 0x1f	; 31
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	9f 8f       	std	Y+31, r25	; 0x1f
    183a:	8e 8f       	std	Y+30, r24	; 0x1e

	//Get last reading
	ModuleMeta meta;
	internalRead(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
    183c:	8d e1       	ldi	r24, 0x1D	; 29
    183e:	48 2f       	mov	r20, r24
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	bc 01       	movw	r22, r24
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 a7 08 	call	0x114e	; 0x114e <_Z12internalReadiPhh>
	
	RM_LOG2(F("Module #"), meta.moduleId);
    184e:	8f ee       	ldi	r24, 0xEF	; 239
    1850:	92 e0       	ldi	r25, 0x02	; 2
    1852:	bc 01       	movw	r22, r24
    1854:	88 e9       	ldi	r24, 0x98	; 152
    1856:	97 e0       	ldi	r25, 0x07	; 7
    1858:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    185c:	6d ed       	ldi	r22, 0xDD	; 221
    185e:	71 e0       	ldi	r23, 0x01	; 1
    1860:	88 e9       	ldi	r24, 0x98	; 152
    1862:	97 e0       	ldi	r25, 0x07	; 7
    1864:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	4a e0       	ldi	r20, 0x0A	; 10
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	68 2f       	mov	r22, r24
    1870:	88 e9       	ldi	r24, 0x98	; 152
    1872:	97 e0       	ldi	r25, 0x07	; 7
    1874:	0e 94 ca 1b 	call	0x3794	; 0x3794 <_ZN5Print7printlnEhi>
	RM_LOG2(F("# Boots"), meta.bootCount);
    1878:	88 ef       	ldi	r24, 0xF8	; 248
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	bc 01       	movw	r22, r24
    187e:	88 e9       	ldi	r24, 0x98	; 152
    1880:	97 e0       	ldi	r25, 0x07	; 7
    1882:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    1886:	6d ed       	ldi	r22, 0xDD	; 221
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	88 e9       	ldi	r24, 0x98	; 152
    188c:	97 e0       	ldi	r25, 0x07	; 7
    188e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	4a e0       	ldi	r20, 0x0A	; 10
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	bc 01       	movw	r22, r24
    189c:	88 e9       	ldi	r24, 0x98	; 152
    189e:	97 e0       	ldi	r25, 0x07	; 7
    18a0:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <_ZN5Print7printlnEji>
	RM_LOG2(F("Next Addr"), meta.nextFreeWriteAddr);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	bc 01       	movw	r22, r24
    18aa:	88 e9       	ldi	r24, 0x98	; 152
    18ac:	97 e0       	ldi	r25, 0x07	; 7
    18ae:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    18b2:	6d ed       	ldi	r22, 0xDD	; 221
    18b4:	71 e0       	ldi	r23, 0x01	; 1
    18b6:	88 e9       	ldi	r24, 0x98	; 152
    18b8:	97 e0       	ldi	r25, 0x07	; 7
    18ba:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
    18c2:	4a e0       	ldi	r20, 0x0A	; 10
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	bc 01       	movw	r22, r24
    18c8:	88 e9       	ldi	r24, 0x98	; 152
    18ca:	97 e0       	ldi	r25, 0x07	; 7
    18cc:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <_ZN5Print7printlnEji>
	//RM_LOG(F(", Gps-Heading: "));
	//RM_LOG(session.gpsInfo.heading);
	//RM_LOG(F(", Gps-Speed: "));
	//RM_LOGLN(session.gpsInfo.speed_kph);
	//}
}
    18d0:	00 00       	nop
    18d2:	6f 96       	adiw	r28, 0x1f	; 31
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	08 95       	ret

000018e4 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:

/* Returns the number of readings read */
unsigned long RmMemManager::loadSensorData(SensorData* buffer, unsigned int maxNoOfReadings,
										  unsigned long* loadedUpTo)
{
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	28 97       	sbiw	r28, 0x08	; 8
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	7c 83       	std	Y+4, r23	; 0x04
    18fe:	6b 83       	std	Y+3, r22	; 0x03
    1900:	5e 83       	std	Y+6, r21	; 0x06
    1902:	4d 83       	std	Y+5, r20	; 0x05
    1904:	38 87       	std	Y+8, r19	; 0x08
    1906:	2f 83       	std	Y+7, r18	; 0x07
	return 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e0       	ldi	r26, 0x00	; 0
    190e:	b0 e0       	ldi	r27, 0x00	; 0
		//}
	//
	//
	//*loadedUpTo = entryCount; //Gets passed to markDataSent() if sent successfully
	//return numOfLastReadings;
}
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	28 96       	adiw	r28, 0x08	; 8
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <_ZN12RmMemManager12markDataSentEy>:

void RmMemManager::markDataSent(uint64_t sentUpTo)
{
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	2a 97       	sbiw	r28, 0x0a	; 10
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	0b 83       	std	Y+3, r16	; 0x03
    1944:	1c 83       	std	Y+4, r17	; 0x04
    1946:	2d 83       	std	Y+5, r18	; 0x05
    1948:	3e 83       	std	Y+6, r19	; 0x06
    194a:	4f 83       	std	Y+7, r20	; 0x07
    194c:	58 87       	std	Y+8, r21	; 0x08
    194e:	69 87       	std	Y+9, r22	; 0x09
    1950:	7a 87       	std	Y+10, r23	; 0x0a
	//this->setULongToMemory(MEMLOC_SENT_UPTO, sentUpTo);
}
    1952:	00 00       	nop
    1954:	2a 96       	adiw	r28, 0x0a	; 10
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	08 95       	ret

0000196a <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:

void RmMemManager::appendDailyEntry(DailyCycleData* r)
{
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	00 d0       	rcall	.+0      	; 0x1970 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData+0x8>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	7c 83       	std	Y+4, r23	; 0x04
    197c:	6b 83       	std	Y+3, r22	; 0x03
	//TODO
}
    197e:	00 00       	nop
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <_Z27internalWriteEntryAtAddressP10SensorDatam>:

void internalWriteEntryAtAddress(SensorData* r, unsigned long address){
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	00 d0       	rcall	.+0      	; 0x1994 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <_Z27internalWriteEntryAtAddressP10SensorDatam+0x8>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <_Z27internalWriteEntryAtAddressP10SensorDatam+0xa>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	4b 83       	std	Y+3, r20	; 0x03
    19a2:	5c 83       	std	Y+4, r21	; 0x04
    19a4:	6d 83       	std	Y+5, r22	; 0x05
    19a6:	7e 83       	std	Y+6, r23	; 0x06
	
	//byte* rPtr = (byte*)r;
//
	//for(int i=0;i<sizeof(SensorData);i++)
		//EEPROM.write(address+i, *(rPtr+i));
}
    19a8:	00 00       	nop
    19aa:	26 96       	adiw	r28, 0x06	; 6
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData>:

void RmMemManager::replaceLastSensorEntry(SensorData* r)
{
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <_ZN12RmMemManager22replaceLastSensorEntryEP10SensorData+0x8>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	7c 83       	std	Y+4, r23	; 0x04
    19ce:	6b 83       	std	Y+3, r22	; 0x03
	//volatile unsigned long entryCount = this->getULongFromMemory(MEMLOC_READING_ENTRY_COUNT);
	//volatile unsigned long lastEntryOffset = max(0,entryCount-1) * sizeof(SensorData);
	//volatile unsigned long lastEntryAddress = MEMADDR_READING_DATA_START + lastEntryOffset;
	//
	//internalWriteEntryAtAddress(r, lastEntryAddress);
}
    19d0:	00 00       	nop
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	08 95       	ret

000019e0 <_ZN12RmMemManager17appendSensorEntryEP10SensorData>:

void RmMemManager::appendSensorEntry(SensorData* r)
{
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <_ZN12RmMemManager17appendSensorEntryEP10SensorData+0x8>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	7c 83       	std	Y+4, r23	; 0x04
    19f2:	6b 83       	std	Y+3, r22	; 0x03
	
	//unsigned int nextFreeAddr = writeEEPROM(nextFreeMemAddr, (byte*)&r, sizeof(Reading));
	
	//IF success, update the location at which to write the next Reading
	//writeEEPROM(MEMLOC_READING_DATA_START, (byte*)&nextFreeAddr, 2);
}
    19f4:	00 00       	nop
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <_ZN12RmMemManager5resetEv>:



/* LED mgmt - Not strictly memory related */

void RmMemManager::reset(){
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <_ZN12RmMemManager5resetEv+0x6>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
	_flashCallCount=0;
    1a12:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <_flashCallCount>
	toggleLED(Bottom, All_Clear);
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
	toggleLED(Top, All_Clear);
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>
}
    1a2e:	00 00       	nop
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <_Z13internalFlashRbS_9LED_STATEb>:
/* Flashes for a single LED */
void internalFlash(
	boolean& greenPinVal, boolean& redPinVal,
	LED_STATE currLedState, boolean atSlowInterval
	)
{
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <_Z13internalFlashRbS_9LED_STATEb+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <_Z13internalFlashRbS_9LED_STATEb+0x8>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <_Z13internalFlashRbS_9LED_STATEb+0xa>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	7c 83       	std	Y+4, r23	; 0x04
    1a4e:	6b 83       	std	Y+3, r22	; 0x03
    1a50:	4d 83       	std	Y+5, r20	; 0x05
    1a52:	2e 83       	std	Y+6, r18	; 0x06
	//Do green LED first
	//boolean nextState = greenPinVal;//-1=no action, 0=false, 1=true
	
	if (currLedState == Green_Fast) {
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	80 32       	cpi	r24, 0x20	; 32
    1a58:	61 f4       	brne	.+24     	; 0x1a72 <_Z13internalFlashRbS_9LED_STATEb+0x38>
		greenPinVal = !greenPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	fc 01       	movw	r30, r24
    1a60:	90 81       	ld	r25, Z
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	29 2f       	mov	r18, r25
    1a66:	28 27       	eor	r18, r24
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	20 83       	st	Z, r18
    1a70:	19 c0       	rjmp	.+50     	; 0x1aa4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Slow) {
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	80 34       	cpi	r24, 0x40	; 64
    1a76:	31 f4       	brne	.+12     	; 0x1a84 <_Z13internalFlashRbS_9LED_STATEb+0x4a>
		greenPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
    1a82:	10 c0       	rjmp	.+32     	; 0x1aa4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == Green_Solid) {
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	80 31       	cpi	r24, 0x10	; 16
    1a88:	31 f4       	brne	.+12     	; 0x1a96 <_Z13internalFlashRbS_9LED_STATEb+0x5c>
		greenPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	21 e0       	ldi	r18, 0x01	; 1
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 83       	st	Z, r18
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
	}
	else if (currLedState == All_Clear) {
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	80 38       	cpi	r24, 0x80	; 128
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <_Z13internalFlashRbS_9LED_STATEb+0x6a>
		greenPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	10 82       	st	Z, r1
	//	digitalWrite(greenPinNo, nextState);	
		
	//Do red LED next
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	61 f4       	brne	.+24     	; 0x1ac2 <_Z13internalFlashRbS_9LED_STATEb+0x88>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	fc 01       	movw	r30, r24
    1ab0:	90 81       	ld	r25, Z
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	29 2f       	mov	r18, r25
    1ab6:	28 27       	eor	r18, r24
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1ac0:	19 c0       	rjmp	.+50     	; 0x1af4 <_Z13internalFlashRbS_9LED_STATEb+0xba>
	//nextState = redPinVal;// -1;//-1=no action, 0=false, 1=true
	
	if (currLedState == Red_Fast) {
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <_Z13internalFlashRbS_9LED_STATEb+0x9a>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ace:	fc 01       	movw	r30, r24
    1ad0:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = !redPinVal;// currPinValue==-1?1:!currLedState; //toggle
	}
	else if (currLedState == Red_Slow) {
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	31 f4       	brne	.+12     	; 0x1ae6 <_Z13internalFlashRbS_9LED_STATEb+0xac>
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	20 83       	st	Z, r18
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1ae4:	07 c0       	rjmp	.+14     	; 0x1af4 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = atSlowInterval;//!greenPinVal;// currPinValue==-1?1:!currPinValue; //toggle
	}
	else if (currLedState == Red_Solid) {
		redPinVal = true;// currPinValue==1?-1:1; //Must be solid if not already
	}
	else if (currLedState == All_Clear) {
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	80 38       	cpi	r24, 0x80	; 128
    1aea:	21 f4       	brne	.+8      	; 0x1af4 <_Z13internalFlashRbS_9LED_STATEb+0xba>
		redPinVal = false;//currPinValue==0?-1:0; //Must be clear if not already
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	fc 01       	movw	r30, r24
    1af2:	10 82       	st	Z, r1
	}
	
	//newRedPinVal &= redPinVal;
	//if (nextState != -1 && nextState != redPinVal)
	//	digitalWrite(redPinNo, nextState);
}
    1af4:	00 00       	nop
    1af6:	26 96       	adiw	r28, 0x06	; 6
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <_ZN12RmMemManager8flashLEDEv>:


//Called at regular intervals at a fast-rate to toggle LEDs between off-on
void RmMemManager::flashLED()
{
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <_ZN12RmMemManager8flashLEDEv+0x6>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
	//Every 3 flashes, do a slow blink
	_flashCallCount = ++_flashCallCount%3;
    1b16:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <_flashCallCount>
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <_flashCallCount>
    1b20:	20 91 d1 06 	lds	r18, 0x06D1	; 0x8006d1 <_flashCallCount>
    1b24:	8b ea       	ldi	r24, 0xAB	; 171
    1b26:	28 9f       	mul	r18, r24
    1b28:	81 2d       	mov	r24, r1
    1b2a:	11 24       	eor	r1, r1
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	96 95       	lsr	r25
    1b30:	89 2f       	mov	r24, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	89 0f       	add	r24, r25
    1b36:	92 2f       	mov	r25, r18
    1b38:	98 1b       	sub	r25, r24
    1b3a:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <_flashCallCount>

	//Flash Bottom LED	
	internalFlash(
    1b3e:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <_flashCallCount>
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	99 23       	and	r25, r25
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <_ZN12RmMemManager8flashLEDEv+0x42>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
				_ledBottomPinRed,_ledBottomPinGreen, _ledBottomState,
				_flashCallCount==0
				);
    1b4a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ledBottomState>
    1b4e:	28 2f       	mov	r18, r24
    1b50:	49 2f       	mov	r20, r25
    1b52:	6e ec       	ldi	r22, 0xCE	; 206
    1b54:	76 e0       	ldi	r23, 0x06	; 6
    1b56:	8d ec       	ldi	r24, 0xCD	; 205
    1b58:	96 e0       	ldi	r25, 0x06	; 6
    1b5a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_BOTTOM_GREEN, _ledBottomPinGreen);
    1b5e:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <_ledBottomPinGreen>
    1b62:	68 2f       	mov	r22, r24
    1b64:	89 e0       	ldi	r24, 0x09	; 9
    1b66:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
	digitalWrite(PIN_LED_BOTTOM_RED, _ledBottomPinRed);
    1b6a:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <_ledBottomPinRed>
    1b6e:	68 2f       	mov	r22, r24
    1b70:	88 e0       	ldi	r24, 0x08	; 8
    1b72:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
				
	//Flash Top LED
	internalFlash(
    1b76:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <_flashCallCount>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	99 23       	and	r25, r25
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <_ZN12RmMemManager8flashLEDEv+0x7a>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
				_ledTopPinGreen, _ledTopPinRed, _ledTopState,
				_flashCallCount==0
				);
    1b82:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_ledTopState>
    1b86:	28 2f       	mov	r18, r24
    1b88:	49 2f       	mov	r20, r25
    1b8a:	6f ec       	ldi	r22, 0xCF	; 207
    1b8c:	76 e0       	ldi	r23, 0x06	; 6
    1b8e:	80 ed       	ldi	r24, 0xD0	; 208
    1b90:	96 e0       	ldi	r25, 0x06	; 6
    1b92:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z13internalFlashRbS_9LED_STATEb>
	digitalWrite(PIN_LED_TOP_GREEN, _ledTopPinGreen);
    1b96:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <_ledTopPinGreen>
    1b9a:	68 2f       	mov	r22, r24
    1b9c:	8b e0       	ldi	r24, 0x0B	; 11
    1b9e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
	digitalWrite(PIN_LED_TOP_RED, _ledTopPinRed);
    1ba2:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <_ledTopPinRed>
    1ba6:	68 2f       	mov	r22, r24
    1ba8:	8a e0       	ldi	r24, 0x0A	; 10
    1baa:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
}
    1bae:	00 00       	nop
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE>:

//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x6>
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x8>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	6b 83       	std	Y+3, r22	; 0x03
    1bcc:	4c 83       	std	Y+4, r20	; 0x04
	if (led_num == Bottom)
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	21 f4       	brne	.+8      	; 0x1bdc <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x22>
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ledBottomState>
		_ledTopState = state;

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
//Request to change the state of an LED
void RmMemManager::toggleLED(LED_SEL led_num, LED_STATE state)
{
	if (led_num == Bottom)
		_ledBottomState = state; //(?) / Clearing? / (state&=IsTemporary)==1?
	else if (led_num == Top)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 23       	and	r24, r24
    1be0:	19 f4       	brne	.+6      	; 0x1be8 <_ZN12RmMemManager9toggleLEDE7LED_SEL9LED_STATE+0x2e>
		_ledTopState = state;
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_ledTopState>

	//TODO: prioritise instead?
	//TODO: Could have a hierarchy where if solid is cleared, maybe slow-flashing
	//still required?
}
    1be8:	00 00       	nop
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <_ZN12RmMemManager16takeSampleAnalogEi>:

//Returns (analog_reading * vcc)
//TODO: Doesn't really belong in memory manager class :|
float RmMemManager::takeSampleAnalog(int pinNo)	{
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	2a 97       	sbiw	r28, 0x0a	; 10
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	98 87       	std	Y+8, r25	; 0x08
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	7a 87       	std	Y+10, r23	; 0x0a
    1c12:	69 87       	std	Y+9, r22	; 0x09
	if (_isMock)
    1c14:	8f 81       	ldd	r24, Y+7	; 0x07
    1c16:	98 85       	ldd	r25, Y+8	; 0x08
    1c18:	fc 01       	movw	r30, r24
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 23       	and	r24, r24
    1c1e:	29 f0       	breq	.+10     	; 0x1c2a <_ZN12RmMemManager16takeSampleAnalogEi+0x32>
		return 5;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 ea       	ldi	r26, 0xA0	; 160
    1c26:	b0 e4       	ldi	r27, 0x40	; 64
    1c28:	39 c0       	rjmp	.+114    	; 0x1c9c <_ZN12RmMemManager16takeSampleAnalogEi+0xa4>
		
	int batt = analogRead(pinNo); 
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <analogRead>
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
	float vcc = readVcc();
    1c34:	8f 81       	ldd	r24, Y+7	; 0x07
    1c36:	98 85       	ldd	r25, Y+8	; 0x08
    1c38:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN12RmMemManager7readVccEv>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	ad 83       	std	Y+5, r26	; 0x05
    1c46:	be 83       	std	Y+6, r27	; 0x06
	batt *= vcc;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	09 2e       	mov	r0, r25
    1c4e:	00 0c       	add	r0, r0
    1c50:	aa 0b       	sbc	r26, r26
    1c52:	bb 0b       	sbc	r27, r27
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 00 18 	call	0x3000	; 0x3000 <__floatsisf>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	3c 81       	ldd	r19, Y+4	; 0x04
    1c64:	4d 81       	ldd	r20, Y+5	; 0x05
    1c66:	5e 81       	ldd	r21, Y+6	; 0x06
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__fixsfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	return batt;
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	09 2e       	mov	r0, r25
    1c8a:	00 0c       	add	r0, r0
    1c8c:	aa 0b       	sbc	r26, r26
    1c8e:	bb 0b       	sbc	r27, r27
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 00 18 	call	0x3000	; 0x3000 <__floatsisf>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
}
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	2a 96       	adiw	r28, 0x0a	; 10
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <_ZN12RmMemManager7readVccEv>:

float RmMemManager::readVcc() {
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <_ZN12RmMemManager7readVccEv+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <_ZN12RmMemManager7readVccEv+0x8>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <_ZN12RmMemManager7readVccEv+0xa>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
  long result;
  // Read 1.1V reference against AVcc - TODO: does this even work ?!
  ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
    1cc4:	8c e7       	ldi	r24, 0x7C	; 124
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	2e e4       	ldi	r18, 0x4E	; 78
    1cca:	fc 01       	movw	r30, r24
    1ccc:	20 83       	st	Z, r18
  delay(2); // Wait for Vref to settle
    1cce:	62 e0       	ldi	r22, 0x02	; 2
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
  ADCSRA |= _BV(ADSC); // Convert
    1cda:	8a e7       	ldi	r24, 0x7A	; 122
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	2a e7       	ldi	r18, 0x7A	; 122
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	20 81       	ld	r18, Z
    1ce6:	20 64       	ori	r18, 0x40	; 64
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 83       	st	Z, r18
  while (bit_is_set(ADCSRA,ADSC));
    1cec:	8a e7       	ldi	r24, 0x7A	; 122
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	80 74       	andi	r24, 0x40	; 64
    1cfa:	99 27       	eor	r25, r25
    1cfc:	21 e0       	ldi	r18, 0x01	; 1
    1cfe:	89 2b       	or	r24, r25
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <_ZN12RmMemManager7readVccEv+0x52>
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	22 23       	and	r18, r18
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <_ZN12RmMemManager7readVccEv+0x58>
    1d08:	f1 cf       	rjmp	.-30     	; 0x1cec <_ZN12RmMemManager7readVccEv+0x3a>
  result = ADCL;
    1d0a:	88 e7       	ldi	r24, 0x78	; 120
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	fc 01       	movw	r30, r24
    1d10:	80 81       	ld	r24, Z
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	ab 83       	std	Y+3, r26	; 0x03
    1d20:	bc 83       	std	Y+4, r27	; 0x04
  result |= ADCH<<8;
    1d22:	89 e7       	ldi	r24, 0x79	; 121
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	fc 01       	movw	r30, r24
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	98 2f       	mov	r25, r24
    1d30:	88 27       	eor	r24, r24
    1d32:	09 2e       	mov	r0, r25
    1d34:	00 0c       	add	r0, r0
    1d36:	aa 0b       	sbc	r26, r26
    1d38:	bb 0b       	sbc	r27, r27
    1d3a:	29 81       	ldd	r18, Y+1	; 0x01
    1d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d40:	5c 81       	ldd	r21, Y+4	; 0x04
    1d42:	82 2b       	or	r24, r18
    1d44:	93 2b       	or	r25, r19
    1d46:	a4 2b       	or	r26, r20
    1d48:	b5 2b       	or	r27, r21
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	ab 83       	std	Y+3, r26	; 0x03
    1d50:	bc 83       	std	Y+4, r27	; 0x04
  result = 1125300L / result; // Back-calculate AVcc in mV
    1d52:	84 eb       	ldi	r24, 0xB4	; 180
    1d54:	9b e2       	ldi	r25, 0x2B	; 43
    1d56:	a1 e1       	ldi	r26, 0x11	; 17
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	29 81       	ldd	r18, Y+1	; 0x01
    1d5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d5e:	4b 81       	ldd	r20, Y+3	; 0x03
    1d60:	5c 81       	ldd	r21, Y+4	; 0x04
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 24 2c 	call	0x5848	; 0x5848 <__divmodsi4>
    1d6a:	da 01       	movw	r26, r20
    1d6c:	c9 01       	movw	r24, r18
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	ab 83       	std	Y+3, r26	; 0x03
    1d74:	bc 83       	std	Y+4, r27	; 0x04
  return result / 1000;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d7e:	28 ee       	ldi	r18, 0xE8	; 232
    1d80:	33 e0       	ldi	r19, 0x03	; 3
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 24 2c 	call	0x5848	; 0x5848 <__divmodsi4>
    1d8e:	da 01       	movw	r26, r20
    1d90:	c9 01       	movw	r24, r18
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 00 18 	call	0x3000	; 0x3000 <__floatsisf>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
}
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	26 96       	adiw	r28, 0x06	; 6
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <twi_init>:
 * Desc     readys twi pins and sets twi bitrate
 * Input    none
 * Output   none
 */
void twi_init(void)
{
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
  // initialize state
  twi_state = TWI_READY;
    1dbc:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <twi_state>
  twi_sendStop = true;		// default value
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_sendStop>
  twi_inRepStart = false;
    1dc6:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <twi_inRepStart>
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    1dca:	82 e1       	ldi	r24, 0x12	; 18
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
  digitalWrite(SCL, 1);
    1dd2:	83 e1       	ldi	r24, 0x13	; 19
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    1dda:	89 eb       	ldi	r24, 0xB9	; 185
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	29 eb       	ldi	r18, 0xB9	; 185
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	f9 01       	movw	r30, r18
    1de4:	20 81       	ld	r18, Z
    1de6:	2e 7f       	andi	r18, 0xFE	; 254
    1de8:	fc 01       	movw	r30, r24
    1dea:	20 83       	st	Z, r18
  cbi(TWSR, TWPS1);
    1dec:	89 eb       	ldi	r24, 0xB9	; 185
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	29 eb       	ldi	r18, 0xB9	; 185
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	f9 01       	movw	r30, r18
    1df6:	20 81       	ld	r18, Z
    1df8:	2d 7f       	andi	r18, 0xFD	; 253
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 83       	st	Z, r18
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    1dfe:	88 eb       	ldi	r24, 0xB8	; 184
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	28 e4       	ldi	r18, 0x48	; 72
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    1e08:	8c eb       	ldi	r24, 0xBC	; 188
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	25 e4       	ldi	r18, 0x45	; 69
    1e0e:	fc 01       	movw	r30, r24
    1e10:	20 83       	st	Z, r18
}
    1e12:	00 00       	nop
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <twi_disable>:
 * Desc     disables twi pins
 * Input    none
 * Output   none
 */
void twi_disable(void)
{
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    1e22:	8c eb       	ldi	r24, 0xBC	; 188
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	2c eb       	ldi	r18, 0xBC	; 188
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	f9 01       	movw	r30, r18
    1e2c:	20 81       	ld	r18, Z
    1e2e:	2a 7b       	andi	r18, 0xBA	; 186
    1e30:	fc 01       	movw	r30, r24
    1e32:	20 83       	st	Z, r18

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    1e34:	82 e1       	ldi	r24, 0x12	; 18
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
  digitalWrite(SCL, 0);
    1e3c:	83 e1       	ldi	r24, 0x13	; 19
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
}
    1e44:	00 00       	nop
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	08 95       	ret

00001e4c <twi_setAddress>:
 * Desc     sets slave address and enables interrupt
 * Input    none
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	1f 92       	push	r1
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	89 83       	std	Y+1, r24	; 0x01
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    1e58:	8a eb       	ldi	r24, 0xBA	; 186
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	29 81       	ldd	r18, Y+1	; 0x01
    1e5e:	22 0f       	add	r18, r18
    1e60:	fc 01       	movw	r30, r24
    1e62:	20 83       	st	Z, r18
}
    1e64:	00 00       	nop
    1e66:	0f 90       	pop	r0
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <twi_setFrequency>:
 * Desc     sets twi bit rate
 * Input    Clock Frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <twi_setFrequency+0xa>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <twi_setFrequency+0xc>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	69 83       	std	Y+1, r22	; 0x01
    1e80:	7a 83       	std	Y+2, r23	; 0x02
    1e82:	8b 83       	std	Y+3, r24	; 0x03
    1e84:	9c 83       	std	Y+4, r25	; 0x04
  TWBR = ((F_CPU / frequency) - 16) / 2;
    1e86:	08 eb       	ldi	r16, 0xB8	; 184
    1e88:	10 e0       	ldi	r17, 0x00	; 0
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	94 e2       	ldi	r25, 0x24	; 36
    1e8e:	a4 ef       	ldi	r26, 0xF4	; 244
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	29 81       	ldd	r18, Y+1	; 0x01
    1e94:	3a 81       	ldd	r19, Y+2	; 0x02
    1e96:	4b 81       	ldd	r20, Y+3	; 0x03
    1e98:	5c 81       	ldd	r21, Y+4	; 0x04
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodsi4>
    1ea2:	da 01       	movw	r26, r20
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	40 97       	sbiw	r24, 0x10	; 16
    1ea8:	a1 09       	sbc	r26, r1
    1eaa:	b1 09       	sbc	r27, r1
    1eac:	b6 95       	lsr	r27
    1eae:	a7 95       	ror	r26
    1eb0:	97 95       	ror	r25
    1eb2:	87 95       	ror	r24
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
  
  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    1eb8:	00 00       	nop
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret

00001ecc <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <twi_readFrom+0x6>
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <twi_readFrom+0x8>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <twi_readFrom+0xa>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	7c 83       	std	Y+4, r23	; 0x04
    1ede:	6b 83       	std	Y+3, r22	; 0x03
    1ee0:	4d 83       	std	Y+5, r20	; 0x05
    1ee2:	2e 83       	std	Y+6, r18	; 0x06
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	81 32       	cpi	r24, 0x21	; 33
    1ee8:	18 f0       	brcs	.+6      	; 0x1ef0 <twi_readFrom+0x24>
    return 0;
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	6b c0       	rjmp	.+214    	; 0x1fc4 <twi_readFrom+0xf8>
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    continue;
    1eee:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    1ef0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <twi_state>
    1ef4:	88 23       	and	r24, r24
    1ef6:	d9 f7       	brne	.-10     	; 0x1eee <twi_readFrom+0x22>
    continue;
  }
  twi_state = TWI_MRX;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <twi_state>
  twi_sendStop = sendStop;
    1efe:	8e 81       	ldd	r24, Y+6	; 0x06
    1f00:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    1f0a:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <twi_masterBufferIndex>
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	81 50       	subi	r24, 0x01	; 1
    1f12:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <twi_masterBufferLength>
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <twi_slarw>
  twi_slarw |= address << 1;
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	98 2f       	mov	r25, r24
    1f28:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_slarw>
    1f2c:	89 2b       	or	r24, r25
    1f2e:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <twi_slarw>

  if (true == twi_inRepStart) {
    1f32:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <twi_inRepStart>
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	c1 f4       	brne	.+48     	; 0x1f6a <twi_readFrom+0x9e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    1f3a:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <twi_inRepStart>
    do {
      TWDR = twi_slarw;
    1f3e:	8b eb       	ldi	r24, 0xBB	; 187
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <twi_slarw>
    1f46:	fc 01       	movw	r30, r24
    1f48:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    1f4a:	8c eb       	ldi	r24, 0xBC	; 188
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	88 70       	andi	r24, 0x08	; 8
    1f58:	99 27       	eor	r25, r25
    1f5a:	89 2b       	or	r24, r25
    1f5c:	81 f7       	brne	.-32     	; 0x1f3e <twi_readFrom+0x72>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    1f5e:	8c eb       	ldi	r24, 0xBC	; 188
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	25 ec       	ldi	r18, 0xC5	; 197
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 83       	st	Z, r18
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <twi_readFrom+0xac>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1f6a:	8c eb       	ldi	r24, 0xBC	; 188
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	25 ee       	ldi	r18, 0xE5	; 229
    1f70:	fc 01       	movw	r30, r24
    1f72:	20 83       	st	Z, r18

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <twi_readFrom+0xac>
    continue;
    1f76:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    1f78:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <twi_state>
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	d9 f3       	breq	.-10     	; 0x1f76 <twi_readFrom+0xaa>
    continue;
  }

  if (twi_masterBufferIndex < length)
    1f80:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	98 17       	cp	r25, r24
    1f88:	18 f4       	brcc	.+6      	; 0x1f90 <twi_readFrom+0xc4>
    length = twi_masterBufferIndex;
    1f8a:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    1f8e:	8d 83       	std	Y+5, r24	; 0x05

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1f90:	19 82       	std	Y+1, r1	; 0x01
    1f92:	13 c0       	rjmp	.+38     	; 0x1fba <twi_readFrom+0xee>
    data[i] = twi_masterBuffer[i];
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9e:	82 0f       	add	r24, r18
    1fa0:	93 1f       	adc	r25, r19
    1fa2:	29 81       	ldd	r18, Y+1	; 0x01
    1fa4:	22 2f       	mov	r18, r18
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	26 52       	subi	r18, 0x26	; 38
    1faa:	39 4f       	sbci	r19, 0xF9	; 249
    1fac:	f9 01       	movw	r30, r18
    1fae:	20 81       	ld	r18, Z
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	20 83       	st	Z, r18

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	99 81       	ldd	r25, Y+1	; 0x01
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	98 17       	cp	r25, r24
    1fc0:	48 f3       	brcs	.-46     	; 0x1f94 <twi_readFrom+0xc8>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fc4:	26 96       	adiw	r28, 0x06	; 6
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    1fd6:	0f 93       	push	r16
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	27 97       	sbiw	r28, 0x07	; 7
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	8a 83       	std	Y+2, r24	; 0x02
    1fee:	7c 83       	std	Y+4, r23	; 0x04
    1ff0:	6b 83       	std	Y+3, r22	; 0x03
    1ff2:	4d 83       	std	Y+5, r20	; 0x05
    1ff4:	2e 83       	std	Y+6, r18	; 0x06
    1ff6:	0f 83       	std	Y+7, r16	; 0x07
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	81 32       	cpi	r24, 0x21	; 33
    1ffc:	18 f0       	brcs	.+6      	; 0x2004 <twi_writeTo+0x2e>
    return 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	76 c0       	rjmp	.+236    	; 0x20ee <twi_writeTo+0x118>
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    continue;
    2002:	00 00       	nop
  if(TWI_BUFFER_LENGTH < length){
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    2004:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <twi_state>
    2008:	88 23       	and	r24, r24
    200a:	d9 f7       	brne	.-10     	; 0x2002 <twi_writeTo+0x2c>
    continue;
  }
  twi_state = TWI_MTX;
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <twi_state>
  twi_sendStop = sendStop;
    2012:	8f 81       	ldd	r24, Y+7	; 0x07
    2014:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_sendStop>
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    2018:	8f ef       	ldi	r24, 0xFF	; 255
    201a:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_error>

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    201e:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <twi_masterBufferIndex>
  twi_masterBufferLength = length;
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <twi_masterBufferLength>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    2028:	19 82       	std	Y+1, r1	; 0x01
    202a:	13 c0       	rjmp	.+38     	; 0x2052 <twi_writeTo+0x7c>
    twi_masterBuffer[i] = data[i];
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	29 81       	ldd	r18, Y+1	; 0x01
    2034:	22 2f       	mov	r18, r18
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4b 81       	ldd	r20, Y+3	; 0x03
    203a:	5c 81       	ldd	r21, Y+4	; 0x04
    203c:	24 0f       	add	r18, r20
    203e:	35 1f       	adc	r19, r21
    2040:	f9 01       	movw	r30, r18
    2042:	20 81       	ld	r18, Z
    2044:	86 52       	subi	r24, 0x26	; 38
    2046:	99 4f       	sbci	r25, 0xF9	; 249
    2048:	fc 01       	movw	r30, r24
    204a:	20 83       	st	Z, r18
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	99 81       	ldd	r25, Y+1	; 0x01
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	98 17       	cp	r25, r24
    2058:	48 f3       	brcs	.-46     	; 0x202c <twi_writeTo+0x56>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    205a:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <twi_slarw>
  twi_slarw |= address << 1;
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	98 2f       	mov	r25, r24
    206a:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_slarw>
    206e:	89 2b       	or	r24, r25
    2070:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <twi_slarw>
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    2074:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <twi_inRepStart>
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	c1 f4       	brne	.+48     	; 0x20ac <twi_writeTo+0xd6>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    207c:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <twi_inRepStart>
    do {
      TWDR = twi_slarw;				
    2080:	8b eb       	ldi	r24, 0xBB	; 187
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <twi_slarw>
    2088:	fc 01       	movw	r30, r24
    208a:	20 83       	st	Z, r18
    } while(TWCR & _BV(TWWC));
    208c:	8c eb       	ldi	r24, 0xBC	; 188
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	fc 01       	movw	r30, r24
    2092:	80 81       	ld	r24, Z
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	88 70       	andi	r24, 0x08	; 8
    209a:	99 27       	eor	r25, r25
    209c:	89 2b       	or	r24, r25
    209e:	81 f7       	brne	.-32     	; 0x2080 <twi_writeTo+0xaa>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    20a0:	8c eb       	ldi	r24, 0xBC	; 188
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	25 ec       	ldi	r18, 0xC5	; 197
    20a6:	fc 01       	movw	r30, r24
    20a8:	20 83       	st	Z, r18
    20aa:	07 c0       	rjmp	.+14     	; 0x20ba <twi_writeTo+0xe4>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    20ac:	8c eb       	ldi	r24, 0xBC	; 188
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	25 ee       	ldi	r18, 0xE5	; 229
    20b2:	fc 01       	movw	r30, r24
    20b4:	20 83       	st	Z, r18

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <twi_writeTo+0xe4>
    continue;
    20b8:	00 00       	nop
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    20ba:	8e 81       	ldd	r24, Y+6	; 0x06
    20bc:	88 23       	and	r24, r24
    20be:	21 f0       	breq	.+8      	; 0x20c8 <twi_writeTo+0xf2>
    20c0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <twi_state>
    20c4:	82 30       	cpi	r24, 0x02	; 2
    20c6:	c1 f3       	breq	.-16     	; 0x20b8 <twi_writeTo+0xe2>
    continue;
  }
  
  if (twi_error == 0xFF)
    20c8:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <twi_error>
    20cc:	8f 3f       	cpi	r24, 0xFF	; 255
    20ce:	11 f4       	brne	.+4      	; 0x20d4 <twi_writeTo+0xfe>
    return 0;	// success
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	0d c0       	rjmp	.+26     	; 0x20ee <twi_writeTo+0x118>
  else if (twi_error == TW_MT_SLA_NACK)
    20d4:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <twi_error>
    20d8:	80 32       	cpi	r24, 0x20	; 32
    20da:	11 f4       	brne	.+4      	; 0x20e0 <twi_writeTo+0x10a>
    return 2;	// error: address send, nack received
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <twi_writeTo+0x118>
  else if (twi_error == TW_MT_DATA_NACK)
    20e0:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <twi_error>
    20e4:	80 33       	cpi	r24, 0x30	; 48
    20e6:	11 f4       	brne	.+4      	; 0x20ec <twi_writeTo+0x116>
    return 3;	// error: data send, nack received
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <twi_writeTo+0x118>
  else
    return 4;	// other twi error
    20ec:	84 e0       	ldi	r24, 0x04	; 4
}
    20ee:	27 96       	adiw	r28, 0x07	; 7
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	00 d0       	rcall	.+0      	; 0x2108 <twi_transmit+0x6>
    2108:	00 d0       	rcall	.+0      	; 0x210a <twi_transmit+0x8>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	9b 83       	std	Y+3, r25	; 0x03
    2110:	8a 83       	std	Y+2, r24	; 0x02
    2112:	6c 83       	std	Y+4, r22	; 0x04
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){
    2114:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_txBufferLength>
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	82 0f       	add	r24, r18
    2124:	93 1f       	adc	r25, r19
    2126:	81 97       	sbiw	r24, 0x21	; 33
    2128:	14 f0       	brlt	.+4      	; 0x212e <twi_transmit+0x2c>
    return 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	2c c0       	rjmp	.+88     	; 0x2186 <twi_transmit+0x84>
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    212e:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <twi_state>
    2132:	84 30       	cpi	r24, 0x04	; 4
    2134:	11 f0       	breq	.+4      	; 0x213a <twi_transmit+0x38>
    return 2;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	26 c0       	rjmp	.+76     	; 0x2186 <twi_transmit+0x84>
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    213a:	19 82       	std	Y+1, r1	; 0x01
    213c:	19 c0       	rjmp	.+50     	; 0x2170 <twi_transmit+0x6e>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    213e:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_txBufferLength>
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	82 0f       	add	r24, r18
    214e:	93 1f       	adc	r25, r19
    2150:	29 81       	ldd	r18, Y+1	; 0x01
    2152:	22 2f       	mov	r18, r18
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a 81       	ldd	r20, Y+2	; 0x02
    2158:	5b 81       	ldd	r21, Y+3	; 0x03
    215a:	24 0f       	add	r18, r20
    215c:	35 1f       	adc	r19, r21
    215e:	f9 01       	movw	r30, r18
    2160:	20 81       	ld	r18, Z
    2162:	84 50       	subi	r24, 0x04	; 4
    2164:	99 4f       	sbci	r25, 0xF9	; 249
    2166:	fc 01       	movw	r30, r24
    2168:	20 83       	st	Z, r18
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	99 81       	ldd	r25, Y+1	; 0x01
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	98 17       	cp	r25, r24
    2176:	18 f3       	brcs	.-58     	; 0x213e <twi_transmit+0x3c>
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    2178:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <twi_txBufferLength>
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	89 0f       	add	r24, r25
    2180:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_txBufferLength>
  
  return 0;
    2184:	80 e0       	ldi	r24, 0x00	; 0
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <twi_attachSlaveRxEvent>:
 * Desc     sets function called before a slave read operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	00 d0       	rcall	.+0      	; 0x219a <twi_attachSlaveRxEvent+0x6>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveReceive = function;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	9a 81       	ldd	r25, Y+2	; 0x02
    21a6:	90 93 d9 06 	sts	0x06D9, r25	; 0x8006d9 <twi_onSlaveReceive+0x1>
    21aa:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <twi_onSlaveReceive>
}
    21ae:	00 00       	nop
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <twi_attachSlaveTxEvent>:
 * Desc     sets function called before a slave write operation
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <twi_attachSlaveTxEvent+0x6>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
  twi_onSlaveTransmit = function;
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <twi_onSlaveTransmit+0x1>
    21d0:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <twi_onSlaveTransmit>
}
    21d4:	00 00       	nop
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <twi_reply>:
 * Desc     sends byte or readys receive line
 * Input    ack: byte indicating to ack or to nack
 * Output   none
 */
void twi_reply(uint8_t ack)
{
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	1f 92       	push	r1
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	89 83       	std	Y+1, r24	; 0x01
  // transmit master read ready signal, with or without ack
  if(ack){
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	88 23       	and	r24, r24
    21f0:	31 f0       	breq	.+12     	; 0x21fe <twi_reply+0x1e>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21f2:	8c eb       	ldi	r24, 0xBC	; 188
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	25 ec       	ldi	r18, 0xC5	; 197
    21f8:	fc 01       	movw	r30, r24
    21fa:	20 83       	st	Z, r18
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  }
}
    21fc:	05 c0       	rjmp	.+10     	; 0x2208 <twi_reply+0x28>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21fe:	8c eb       	ldi	r24, 0xBC	; 188
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	25 e8       	ldi	r18, 0x85	; 133
    2204:	fc 01       	movw	r30, r24
    2206:	20 83       	st	Z, r18
  }
}
    2208:	00 00       	nop
    220a:	0f 90       	pop	r0
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <twi_stop>:
 * Desc     relinquishes bus master status
 * Input    none
 * Output   none
 */
void twi_stop(void)
{
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    221a:	8c eb       	ldi	r24, 0xBC	; 188
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	25 ed       	ldi	r18, 0xD5	; 213
    2220:	fc 01       	movw	r30, r24
    2222:	20 83       	st	Z, r18

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <twi_stop+0x16>
    continue;
    2226:	00 00       	nop
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2228:	8c eb       	ldi	r24, 0xBC	; 188
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	fc 01       	movw	r30, r24
    222e:	80 81       	ld	r24, Z
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	80 71       	andi	r24, 0x10	; 16
    2236:	99 27       	eor	r25, r25
    2238:	89 2b       	or	r24, r25
    223a:	a9 f7       	brne	.-22     	; 0x2226 <twi_stop+0x14>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    223c:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <twi_state>
}
    2240:	00 00       	nop
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	08 95       	ret

00002248 <twi_releaseBus>:
 * Desc     releases bus control
 * Input    none
 * Output   none
 */
void twi_releaseBus(void)
{
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2250:	8c eb       	ldi	r24, 0xBC	; 188
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	25 ec       	ldi	r18, 0xC5	; 197
    2256:	fc 01       	movw	r30, r24
    2258:	20 83       	st	Z, r18

  // update twi state
  twi_state = TWI_READY;
    225a:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <twi_state>
}
    225e:	00 00       	nop
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	08 95       	ret

00002266 <__vector_24>:

ISR(TWI_vect)
{
    2266:	1f 92       	push	r1
    2268:	0f 92       	push	r0
    226a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    226e:	0f 92       	push	r0
    2270:	11 24       	eor	r1, r1
    2272:	2f 93       	push	r18
    2274:	3f 93       	push	r19
    2276:	4f 93       	push	r20
    2278:	5f 93       	push	r21
    227a:	6f 93       	push	r22
    227c:	7f 93       	push	r23
    227e:	8f 93       	push	r24
    2280:	9f 93       	push	r25
    2282:	af 93       	push	r26
    2284:	bf 93       	push	r27
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
  switch(TW_STATUS){
    2292:	89 eb       	ldi	r24, 0xB9	; 185
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	fc 01       	movw	r30, r24
    2298:	80 81       	ld	r24, Z
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	88 7f       	andi	r24, 0xF8	; 248
    22a0:	99 27       	eor	r25, r25
    22a2:	09 2e       	mov	r0, r25
    22a4:	00 0c       	add	r0, r0
    22a6:	aa 0b       	sbc	r26, r26
    22a8:	bb 0b       	sbc	r27, r27
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	28 ef       	ldi	r18, 0xF8	; 248
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	84 1b       	sub	r24, r20
    22b4:	95 0b       	sbc	r25, r21
    22b6:	28 17       	cp	r18, r24
    22b8:	39 07       	cpc	r19, r25
    22ba:	08 f4       	brcc	.+2      	; 0x22be <__vector_24+0x58>
    22bc:	17 c1       	rjmp	.+558    	; 0x24ec <__vector_24+0x286>
    22be:	8c 5c       	subi	r24, 0xCC	; 204
    22c0:	9f 4f       	sbci	r25, 0xFF	; 255
    22c2:	fc 01       	movw	r30, r24
    22c4:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    22c8:	8b eb       	ldi	r24, 0xBB	; 187
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <twi_slarw>
    22d0:	fc 01       	movw	r30, r24
    22d2:	20 83       	st	Z, r18
      twi_reply(1);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      break;
    22da:	08 c1       	rjmp	.+528    	; 0x24ec <__vector_24+0x286>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22dc:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    22e0:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_masterBufferLength>
    22e4:	98 17       	cp	r25, r24
    22e6:	a0 f4       	brcc	.+40     	; 0x2310 <__vector_24+0xaa>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22e8:	8b eb       	ldi	r24, 0xBB	; 187
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    22f0:	31 e0       	ldi	r19, 0x01	; 1
    22f2:	32 0f       	add	r19, r18
    22f4:	30 93 fa 06 	sts	0x06FA, r19	; 0x8006fa <twi_masterBufferIndex>
    22f8:	22 2f       	mov	r18, r18
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	26 52       	subi	r18, 0x26	; 38
    22fe:	39 4f       	sbci	r19, 0xF9	; 249
    2300:	f9 01       	movw	r30, r18
    2302:	20 81       	ld	r18, Z
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
        twi_reply(1);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    230e:	ee c0       	rjmp	.+476    	; 0x24ec <__vector_24+0x286>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2310:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <twi_sendStop>
    2314:	88 23       	and	r24, r24
    2316:	19 f0       	breq	.+6      	; 0x231e <__vector_24+0xb8>
          twi_stop();
    2318:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_stop>
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}
      }
      break;
    231c:	e7 c0       	rjmp	.+462    	; 0x24ec <__vector_24+0x286>
        twi_reply(1);
      }else{
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2324:	8c eb       	ldi	r24, 0xBC	; 188
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	24 ea       	ldi	r18, 0xA4	; 164
    232a:	fc 01       	movw	r30, r24
    232c:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    232e:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <twi_state>
	}
      }
      break;
    2332:	dc c0       	rjmp	.+440    	; 0x24ec <__vector_24+0x286>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2334:	80 e2       	ldi	r24, 0x20	; 32
    2336:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_error>
      twi_stop();
    233a:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_stop>
      break;
    233e:	d6 c0       	rjmp	.+428    	; 0x24ec <__vector_24+0x286>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2340:	80 e3       	ldi	r24, 0x30	; 48
    2342:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_error>
      twi_stop();
    2346:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_stop>
      break;
    234a:	d0 c0       	rjmp	.+416    	; 0x24ec <__vector_24+0x286>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    234c:	88 e3       	ldi	r24, 0x38	; 56
    234e:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <twi_error>
      twi_releaseBus();
    2352:	0e 94 24 11 	call	0x2248	; 0x2248 <twi_releaseBus>
      break;
    2356:	ca c0       	rjmp	.+404    	; 0x24ec <__vector_24+0x286>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2358:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	98 0f       	add	r25, r24
    2360:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <twi_masterBufferIndex>
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	2b eb       	ldi	r18, 0xBB	; 187
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f9 01       	movw	r30, r18
    236e:	20 81       	ld	r18, Z
    2370:	86 52       	subi	r24, 0x26	; 38
    2372:	99 4f       	sbci	r25, 0xF9	; 249
    2374:	fc 01       	movw	r30, r24
    2376:	20 83       	st	Z, r18
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2378:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    237c:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <twi_masterBufferLength>
    2380:	98 17       	cp	r25, r24
    2382:	20 f4       	brcc	.+8      	; 0x238c <__vector_24+0x126>
        twi_reply(1);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    238a:	b0 c0       	rjmp	.+352    	; 0x24ec <__vector_24+0x286>
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      }
      break;
    2392:	ac c0       	rjmp	.+344    	; 0x24ec <__vector_24+0x286>
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2394:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <twi_masterBufferIndex>
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	98 0f       	add	r25, r24
    239c:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <twi_masterBufferIndex>
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	2b eb       	ldi	r18, 0xBB	; 187
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	f9 01       	movw	r30, r18
    23aa:	20 81       	ld	r18, Z
    23ac:	86 52       	subi	r24, 0x26	; 38
    23ae:	99 4f       	sbci	r25, 0xF9	; 249
    23b0:	fc 01       	movw	r30, r24
    23b2:	20 83       	st	Z, r18
	if (twi_sendStop)
    23b4:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <twi_sendStop>
    23b8:	88 23       	and	r24, r24
    23ba:	19 f0       	breq	.+6      	; 0x23c2 <__vector_24+0x15c>
          twi_stop();
    23bc:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_stop>
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
	  twi_state = TWI_READY;
	}    
	break;
    23c0:	95 c0       	rjmp	.+298    	; 0x24ec <__vector_24+0x286>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    23c8:	8c eb       	ldi	r24, 0xBC	; 188
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	24 ea       	ldi	r18, 0xA4	; 164
    23ce:	fc 01       	movw	r30, r24
    23d0:	20 83       	st	Z, r18
	  twi_state = TWI_READY;
    23d2:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <twi_state>
	}    
	break;
    23d6:	8a c0       	rjmp	.+276    	; 0x24ec <__vector_24+0x286>
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    23d8:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_stop>
      break;
    23dc:	87 c0       	rjmp	.+270    	; 0x24ec <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    23e4:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <twi_rxBufferIndex>
      twi_reply(1);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      break;
    23ee:	7e c0       	rjmp	.+252    	; 0x24ec <__vector_24+0x286>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    23f0:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_rxBufferIndex>
    23f4:	80 32       	cpi	r24, 0x20	; 32
    23f6:	a0 f4       	brcc	.+40     	; 0x2420 <__vector_24+0x1ba>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    23f8:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_rxBufferIndex>
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    23fe:	98 0f       	add	r25, r24
    2400:	90 93 3e 07 	sts	0x073E, r25	; 0x80073e <twi_rxBufferIndex>
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	2b eb       	ldi	r18, 0xBB	; 187
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	f9 01       	movw	r30, r18
    240e:	20 81       	ld	r18, Z
    2410:	82 5e       	subi	r24, 0xE2	; 226
    2412:	98 4f       	sbci	r25, 0xF8	; 248
    2414:	fc 01       	movw	r30, r24
    2416:	20 83       	st	Z, r18
        twi_reply(1);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      }else{
        // otherwise nack
        twi_reply(0);
      }
      break;
    241e:	66 c0       	rjmp	.+204    	; 0x24ec <__vector_24+0x286>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
        twi_reply(1);
      }else{
        // otherwise nack
        twi_reply(0);
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      }
      break;
    2426:	62 c0       	rjmp	.+196    	; 0x24ec <__vector_24+0x286>
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2428:	0e 94 24 11 	call	0x2248	; 0x2248 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    242c:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_rxBufferIndex>
    2430:	80 32       	cpi	r24, 0x20	; 32
    2432:	40 f4       	brcc	.+16     	; 0x2444 <__vector_24+0x1de>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2434:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_rxBufferIndex>
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	82 5e       	subi	r24, 0xE2	; 226
    243e:	98 4f       	sbci	r25, 0xF8	; 248
    2440:	fc 01       	movw	r30, r24
    2442:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2444:	20 91 d8 06 	lds	r18, 0x06D8	; 0x8006d8 <twi_onSlaveReceive>
    2448:	30 91 d9 06 	lds	r19, 0x06D9	; 0x8006d9 <twi_onSlaveReceive+0x1>
    244c:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <twi_rxBufferIndex>
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	bc 01       	movw	r22, r24
    2456:	8e e1       	ldi	r24, 0x1E	; 30
    2458:	97 e0       	ldi	r25, 0x07	; 7
    245a:	f9 01       	movw	r30, r18
    245c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    245e:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <twi_rxBufferIndex>
      break;
    2462:	44 c0       	rjmp	.+136    	; 0x24ec <__vector_24+0x286>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      break;
    246a:	40 c0       	rjmp	.+128    	; 0x24ec <__vector_24+0x286>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2472:	10 92 1c 07 	sts	0x071C, r1	; 0x80071c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2476:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    247a:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <twi_onSlaveTransmit>
    247e:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <twi_onSlaveTransmit+0x1>
    2482:	fc 01       	movw	r30, r24
    2484:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2486:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_txBufferLength>
    248a:	88 23       	and	r24, r24
    248c:	29 f4       	brne	.+10     	; 0x2498 <__vector_24+0x232>
        twi_txBufferLength = 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2494:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2498:	8b eb       	ldi	r24, 0xBB	; 187
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	20 91 1c 07 	lds	r18, 0x071C	; 0x80071c <twi_txBufferIndex>
    24a0:	31 e0       	ldi	r19, 0x01	; 1
    24a2:	32 0f       	add	r19, r18
    24a4:	30 93 1c 07 	sts	0x071C, r19	; 0x80071c <twi_txBufferIndex>
    24a8:	22 2f       	mov	r18, r18
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	24 50       	subi	r18, 0x04	; 4
    24ae:	39 4f       	sbci	r19, 0xF9	; 249
    24b0:	f9 01       	movw	r30, r18
    24b2:	20 81       	ld	r18, Z
    24b4:	fc 01       	movw	r30, r24
    24b6:	20 83       	st	Z, r18
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    24b8:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <twi_txBufferIndex>
    24bc:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_txBufferLength>
    24c0:	98 17       	cp	r25, r24
    24c2:	20 f4       	brcc	.+8      	; 0x24cc <__vector_24+0x266>
        twi_reply(1);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      }else{
        twi_reply(0);
      }
      break;
    24ca:	10 c0       	rjmp	.+32     	; 0x24ec <__vector_24+0x286>
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
        twi_reply(1);
      }else{
        twi_reply(0);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      }
      break;
    24d2:	0c c0       	rjmp	.+24     	; 0x24ec <__vector_24+0x286>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    24da:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <twi_state>
      break;
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <__vector_24+0x286>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    24e0:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <twi_error>
      twi_stop();
    24e4:	0e 94 09 11 	call	0x2212	; 0x2212 <twi_stop>
      break;
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <__vector_24+0x286>
      twi_state = TWI_READY;
      break;

    // All
    case TW_NO_INFO:   // no state information
      break;
    24ea:	00 00       	nop
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    24ec:	00 00       	nop
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	ff 91       	pop	r31
    24f4:	ef 91       	pop	r30
    24f6:	bf 91       	pop	r27
    24f8:	af 91       	pop	r26
    24fa:	9f 91       	pop	r25
    24fc:	8f 91       	pop	r24
    24fe:	7f 91       	pop	r23
    2500:	6f 91       	pop	r22
    2502:	5f 91       	pop	r21
    2504:	4f 91       	pop	r20
    2506:	3f 91       	pop	r19
    2508:	2f 91       	pop	r18
    250a:	0f 90       	pop	r0
    250c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2510:	0f 90       	pop	r0
    2512:	1f 90       	pop	r1
    2514:	18 95       	reti

00002516 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	00 d0       	rcall	.+0      	; 0x251c <_ZN7TwoWireC1Ev+0x6>
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	9a 83       	std	Y+2, r25	; 0x02
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	9a 81       	ldd	r25, Y+2	; 0x02
    2528:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_ZN6StreamC1Ev>
    252c:	24 eb       	ldi	r18, 0xB4	; 180
    252e:	32 e0       	ldi	r19, 0x02	; 2
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	fc 01       	movw	r30, r24
    2536:	31 83       	std	Z+1, r19	; 0x01
    2538:	20 83       	st	Z, r18
{
}
    253a:	00 00       	nop
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	00 d0       	rcall	.+0      	; 0x254c <_ZN7TwoWire5beginEv+0x6>
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
  rxBufferIndex = 0;
    2554:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = 0;
    2558:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>

  txBufferIndex = 0;
    255c:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2560:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <_ZN7TwoWire14txBufferLengthE>

  twi_init();
    2564:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <twi_init>
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
    2568:	87 ec       	ldi	r24, 0xC7	; 199
    256a:	95 e1       	ldi	r25, 0x15	; 21
    256c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
    2570:	8a e7       	ldi	r24, 0x7A	; 122
    2572:	95 e1       	ldi	r25, 0x15	; 21
    2574:	0e 94 ca 10 	call	0x2194	; 0x2194 <twi_attachSlaveRxEvent>
}
    2578:	00 00       	nop
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	00 d0       	rcall	.+0      	; 0x258a <_ZN7TwoWire5beginEh+0x6>
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	6b 83       	std	Y+3, r22	; 0x03
  begin();
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN7TwoWire5beginEv>
  twi_setAddress(address);
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <twi_setAddress>
}
    25a4:	00 00       	nop
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <_ZN7TwoWire5beginEi+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <_ZN7TwoWire5beginEi+0x8>
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	7c 83       	std	Y+4, r23	; 0x04
    25c4:	6b 83       	std	Y+3, r22	; 0x03
  begin((uint8_t)address);
    25c6:	2b 81       	ldd	r18, Y+3	; 0x03
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	62 2f       	mov	r22, r18
    25ce:	0e 94 c2 12 	call	0x2584	; 0x2584 <_ZN7TwoWire5beginEh>
}
    25d2:	00 00       	nop
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <_ZN7TwoWire3endEv>:

void TwoWire::end(void)
{
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <_ZN7TwoWire3endEv+0x6>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
  twi_disable();
    25f0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <twi_disable>
}
    25f4:	00 00       	nop
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	08 95       	ret

00002600 <_ZN7TwoWire8setClockEm>:

void TwoWire::setClock(uint32_t clock)
{
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	00 d0       	rcall	.+0      	; 0x2606 <_ZN7TwoWire8setClockEm+0x6>
    2606:	00 d0       	rcall	.+0      	; 0x2608 <_ZN7TwoWire8setClockEm+0x8>
    2608:	00 d0       	rcall	.+0      	; 0x260a <_ZN7TwoWire8setClockEm+0xa>
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9a 83       	std	Y+2, r25	; 0x02
    2610:	89 83       	std	Y+1, r24	; 0x01
    2612:	4b 83       	std	Y+3, r20	; 0x03
    2614:	5c 83       	std	Y+4, r21	; 0x04
    2616:	6d 83       	std	Y+5, r22	; 0x05
    2618:	7e 83       	std	Y+6, r23	; 0x06
  twi_setFrequency(clock);
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	ad 81       	ldd	r26, Y+5	; 0x05
    2620:	be 81       	ldd	r27, Y+6	; 0x06
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <twi_setFrequency>
}
    262a:	00 00       	nop
    262c:	26 96       	adiw	r28, 0x06	; 6
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	08 95       	ret

0000263e <_ZN7TwoWire11requestFromEhhmhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)
{
    263e:	cf 92       	push	r12
    2640:	ef 92       	push	r14
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	2b 97       	sbiw	r28, 0x0b	; 11
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	9b 83       	std	Y+3, r25	; 0x03
    265c:	8a 83       	std	Y+2, r24	; 0x02
    265e:	6c 83       	std	Y+4, r22	; 0x04
    2660:	4d 83       	std	Y+5, r20	; 0x05
    2662:	0e 83       	std	Y+6, r16	; 0x06
    2664:	1f 83       	std	Y+7, r17	; 0x07
    2666:	28 87       	std	Y+8, r18	; 0x08
    2668:	39 87       	std	Y+9, r19	; 0x09
    266a:	ea 86       	std	Y+10, r14	; 0x0a
    266c:	cb 86       	std	Y+11, r12	; 0x0b
  if (isize > 0) {
    266e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2670:	88 23       	and	r24, r24
    2672:	e9 f1       	breq	.+122    	; 0x26ee <_ZN7TwoWire11requestFromEhhmhh+0xb0>
  // send internal address; this mode allows sending a repeated start to access
  // some devices' internal registers. This function is executed by the hardware
  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)

  beginTransmission(address);
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	9b 81       	ldd	r25, Y+3	; 0x03
    2678:	6c 81       	ldd	r22, Y+4	; 0x04
    267a:	0e 94 17 14 	call	0x282e	; 0x282e <_ZN7TwoWire17beginTransmissionEh>

  // the maximum size of internal address is 3 bytes
  if (isize > 3){
    267e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2680:	84 30       	cpi	r24, 0x04	; 4
    2682:	10 f0       	brcs	.+4      	; 0x2688 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    isize = 3;
    2684:	83 e0       	ldi	r24, 0x03	; 3
    2686:	8a 87       	std	Y+10, r24	; 0x0a
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    2688:	8a 85       	ldd	r24, Y+10	; 0x0a
    268a:	9f ef       	ldi	r25, 0xFF	; 255
    268c:	98 0f       	add	r25, r24
    268e:	9a 87       	std	Y+10, r25	; 0x0a
    2690:	91 e0       	ldi	r25, 0x01	; 1
    2692:	88 23       	and	r24, r24
    2694:	09 f4       	brne	.+2      	; 0x2698 <_ZN7TwoWire11requestFromEhhmhh+0x5a>
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	99 23       	and	r25, r25
    269a:	21 f1       	breq	.+72     	; 0x26e4 <_ZN7TwoWire11requestFromEhhmhh+0xa6>
    write((uint8_t)(iaddress >> (isize*8)));
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	fc 01       	movw	r30, r24
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	fc 01       	movw	r30, r24
    26a8:	20 81       	ld	r18, Z
    26aa:	31 81       	ldd	r19, Z+1	; 0x01
    26ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	ac 01       	movw	r20, r24
    26b4:	44 0f       	add	r20, r20
    26b6:	55 1f       	adc	r21, r21
    26b8:	44 0f       	add	r20, r20
    26ba:	55 1f       	adc	r21, r21
    26bc:	44 0f       	add	r20, r20
    26be:	55 1f       	adc	r21, r21
    26c0:	8e 81       	ldd	r24, Y+6	; 0x06
    26c2:	9f 81       	ldd	r25, Y+7	; 0x07
    26c4:	a8 85       	ldd	r26, Y+8	; 0x08
    26c6:	b9 85       	ldd	r27, Y+9	; 0x09
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <_ZN7TwoWire11requestFromEhhmhh+0x94>
    26ca:	b6 95       	lsr	r27
    26cc:	a7 95       	ror	r26
    26ce:	97 95       	ror	r25
    26d0:	87 95       	ror	r24
    26d2:	4a 95       	dec	r20
    26d4:	d2 f7       	brpl	.-12     	; 0x26ca <_ZN7TwoWire11requestFromEhhmhh+0x8c>
    26d6:	48 2f       	mov	r20, r24
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	64 2f       	mov	r22, r20
    26de:	f9 01       	movw	r30, r18
    26e0:	09 95       	icall
  if (isize > 3){
    isize = 3;
  }

  // write internal register address - most significant byte first
  while (isize-- > 0)
    26e2:	d2 cf       	rjmp	.-92     	; 0x2688 <_ZN7TwoWire11requestFromEhhmhh+0x4a>
    write((uint8_t)(iaddress >> (isize*8)));
  endTransmission(false);
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	60 e0       	ldi	r22, 0x00	; 0
    26ea:	0e 94 49 14 	call	0x2892	; 0x2892 <_ZN7TwoWire15endTransmissionEh>
  }

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	81 32       	cpi	r24, 0x21	; 33
    26f2:	10 f0       	brcs	.+4      	; 0x26f8 <_ZN7TwoWire11requestFromEhhmhh+0xba>
    quantity = BUFFER_LENGTH;
    26f4:	80 e2       	ldi	r24, 0x20	; 32
    26f6:	8d 83       	std	Y+5, r24	; 0x05
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
    26f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    26fa:	4d 81       	ldd	r20, Y+5	; 0x05
    26fc:	60 e4       	ldi	r22, 0x40	; 64
    26fe:	77 e0       	ldi	r23, 0x07	; 7
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <twi_readFrom>
    2706:	89 83       	std	Y+1, r24	; 0x01
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2708:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = read;
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>

  return read;
    2712:	89 81       	ldd	r24, Y+1	; 0x01
}
    2714:	2b 96       	adiw	r28, 0x0b	; 11
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ef 90       	pop	r14
    272a:	cf 90       	pop	r12
    272c:	08 95       	ret

0000272e <_ZN7TwoWire11requestFromEhhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
    272e:	cf 92       	push	r12
    2730:	ef 92       	push	r14
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	00 d0       	rcall	.+0      	; 0x273c <_ZN7TwoWire11requestFromEhhh+0xe>
    273c:	00 d0       	rcall	.+0      	; 0x273e <_ZN7TwoWire11requestFromEhhh+0x10>
    273e:	1f 92       	push	r1
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	6b 83       	std	Y+3, r22	; 0x03
    274a:	4c 83       	std	Y+4, r20	; 0x04
    274c:	2d 83       	std	Y+5, r18	; 0x05
	return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	cd 80       	ldd	r12, Y+5	; 0x05
    2754:	e1 2c       	mov	r14, r1
    2756:	00 e0       	ldi	r16, 0x00	; 0
    2758:	10 e0       	ldi	r17, 0x00	; 0
    275a:	98 01       	movw	r18, r16
    275c:	4c 81       	ldd	r20, Y+4	; 0x04
    275e:	6b 81       	ldd	r22, Y+3	; 0x03
    2760:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN7TwoWire11requestFromEhhmhh>
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	ef 90       	pop	r14
    2778:	cf 90       	pop	r12
    277a:	08 95       	ret

0000277c <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	00 d0       	rcall	.+0      	; 0x2782 <_ZN7TwoWire11requestFromEhh+0x6>
    2782:	00 d0       	rcall	.+0      	; 0x2784 <_ZN7TwoWire11requestFromEhh+0x8>
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	6b 83       	std	Y+3, r22	; 0x03
    278e:	4c 83       	std	Y+4, r20	; 0x04
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	21 e0       	ldi	r18, 0x01	; 1
    2796:	4c 81       	ldd	r20, Y+4	; 0x04
    2798:	6b 81       	ldd	r22, Y+3	; 0x03
    279a:	0e 94 97 13 	call	0x272e	; 0x272e <_ZN7TwoWire11requestFromEhhh>
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <_ZN7TwoWire11requestFromEii+0x6>
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <_ZN7TwoWire11requestFromEii+0x8>
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <_ZN7TwoWire11requestFromEii+0xa>
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	9a 83       	std	Y+2, r25	; 0x02
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	7c 83       	std	Y+4, r23	; 0x04
    27c0:	6b 83       	std	Y+3, r22	; 0x03
    27c2:	5e 83       	std	Y+6, r21	; 0x06
    27c4:	4d 83       	std	Y+5, r20	; 0x05
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
    27c6:	4d 81       	ldd	r20, Y+5	; 0x05
    27c8:	3b 81       	ldd	r19, Y+3	; 0x03
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	9a 81       	ldd	r25, Y+2	; 0x02
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	63 2f       	mov	r22, r19
    27d2:	0e 94 97 13 	call	0x272e	; 0x272e <_ZN7TwoWire11requestFromEhhh>
}
    27d6:	26 96       	adiw	r28, 0x06	; 6
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	08 95       	ret

000027e8 <_ZN7TwoWire11requestFromEiii>:

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	28 97       	sbiw	r28, 0x08	; 8
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	7c 83       	std	Y+4, r23	; 0x04
    2802:	6b 83       	std	Y+3, r22	; 0x03
    2804:	5e 83       	std	Y+6, r21	; 0x06
    2806:	4d 83       	std	Y+5, r20	; 0x05
    2808:	38 87       	std	Y+8, r19	; 0x08
    280a:	2f 83       	std	Y+7, r18	; 0x07
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
    280c:	2f 81       	ldd	r18, Y+7	; 0x07
    280e:	4d 81       	ldd	r20, Y+5	; 0x05
    2810:	3b 81       	ldd	r19, Y+3	; 0x03
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	63 2f       	mov	r22, r19
    2818:	0e 94 97 13 	call	0x272e	; 0x272e <_ZN7TwoWire11requestFromEhhh>
}
    281c:	28 96       	adiw	r28, 0x08	; 8
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	00 d0       	rcall	.+0      	; 0x2834 <_ZN7TwoWire17beginTransmissionEh+0x6>
    2834:	1f 92       	push	r1
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	6b 83       	std	Y+3, r22	; 0x03
  // indicate that we are transmitting
  transmitting = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <_ZN7TwoWire12transmittingE>
  // set address of targeted slave
  txAddress = address;
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <_ZN7TwoWire9txAddressE>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    284c:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2850:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <_ZN7TwoWire14txBufferLengthE>
}
    2854:	00 00       	nop
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	08 95       	ret

00002862 <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	00 d0       	rcall	.+0      	; 0x2868 <_ZN7TwoWire17beginTransmissionEi+0x6>
    2868:	00 d0       	rcall	.+0      	; 0x286a <_ZN7TwoWire17beginTransmissionEi+0x8>
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
    2872:	7c 83       	std	Y+4, r23	; 0x04
    2874:	6b 83       	std	Y+3, r22	; 0x03
  beginTransmission((uint8_t)address);
    2876:	2b 81       	ldd	r18, Y+3	; 0x03
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	62 2f       	mov	r22, r18
    287e:	0e 94 17 14 	call	0x282e	; 0x282e <_ZN7TwoWire17beginTransmissionEh>
}
    2882:	00 00       	nop
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2892:	0f 93       	push	r16
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	00 d0       	rcall	.+0      	; 0x289a <_ZN7TwoWire15endTransmissionEh+0x8>
    289a:	00 d0       	rcall	.+0      	; 0x289c <_ZN7TwoWire15endTransmissionEh+0xa>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9b 83       	std	Y+3, r25	; 0x03
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	6c 83       	std	Y+4, r22	; 0x04
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    28a6:	90 91 84 07 	lds	r25, 0x0784	; 0x800784 <_ZN7TwoWire14txBufferLengthE>
    28aa:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ZN7TwoWire9txAddressE>
    28ae:	0c 81       	ldd	r16, Y+4	; 0x04
    28b0:	21 e0       	ldi	r18, 0x01	; 1
    28b2:	49 2f       	mov	r20, r25
    28b4:	63 e6       	ldi	r22, 0x63	; 99
    28b6:	77 e0       	ldi	r23, 0x07	; 7
    28b8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <twi_writeTo>
    28bc:	89 83       	std	Y+1, r24	; 0x01
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    28be:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    28c2:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <_ZN7TwoWire14txBufferLengthE>
  // indicate that we are done transmitting
  transmitting = 0;
    28c6:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <_ZN7TwoWire12transmittingE>
  return ret;
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	0f 91       	pop	r16
    28da:	08 95       	ret

000028dc <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <_ZN7TwoWire15endTransmissionEv+0x6>
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	89 83       	std	Y+1, r24	; 0x01
  return endTransmission(true);
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	0e 94 49 14 	call	0x2892	; 0x2892 <_ZN7TwoWire15endTransmissionEh>
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	08 95       	ret

000028fe <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	00 d0       	rcall	.+0      	; 0x2904 <_ZN7TwoWire5writeEh+0x6>
    2904:	1f 92       	push	r1
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	6b 83       	std	Y+3, r22	; 0x03
  if(transmitting){
    2910:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <_ZN7TwoWire12transmittingE>
    2914:	88 23       	and	r24, r24
    2916:	01 f1       	breq	.+64     	; 0x2958 <_ZN7TwoWire5writeEh+0x5a>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2918:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <_ZN7TwoWire14txBufferLengthE>
    291c:	80 32       	cpi	r24, 0x20	; 32
    291e:	48 f0       	brcs	.+18     	; 0x2932 <_ZN7TwoWire5writeEh+0x34>
      setWriteError();
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	61 e0       	ldi	r22, 0x01	; 1
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_ZN5Print13setWriteErrorEi>
      return 0;
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	1a c0       	rjmp	.+52     	; 0x2966 <_ZN7TwoWire5writeEh+0x68>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2932:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
    2936:	88 2f       	mov	r24, r24
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	2b 81       	ldd	r18, Y+3	; 0x03
    293c:	8d 59       	subi	r24, 0x9D	; 157
    293e:	98 4f       	sbci	r25, 0xF8	; 248
    2940:	fc 01       	movw	r30, r24
    2942:	20 83       	st	Z, r18
    ++txBufferIndex;
    2944:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    294e:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
    2952:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <_ZN7TwoWire14txBufferLengthE>
    2956:	05 c0       	rjmp	.+10     	; 0x2962 <_ZN7TwoWire5writeEh+0x64>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2958:	ce 01       	movw	r24, r28
    295a:	03 96       	adiw	r24, 0x03	; 3
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	0e 94 81 10 	call	0x2102	; 0x2102 <twi_transmit>
  }
  return 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	28 97       	sbiw	r28, 0x08	; 8
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	7e 83       	std	Y+6, r23	; 0x06
    298c:	6d 83       	std	Y+5, r22	; 0x05
    298e:	58 87       	std	Y+8, r21	; 0x08
    2990:	4f 83       	std	Y+7, r20	; 0x07
  if(transmitting){
    2992:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <_ZN7TwoWire12transmittingE>
    2996:	88 23       	and	r24, r24
    2998:	21 f1       	breq	.+72     	; 0x29e2 <_ZN7TwoWire5writeEPKhj+0x70>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    299a:	1a 82       	std	Y+2, r1	; 0x02
    299c:	19 82       	std	Y+1, r1	; 0x01
    299e:	29 81       	ldd	r18, Y+1	; 0x01
    29a0:	3a 81       	ldd	r19, Y+2	; 0x02
    29a2:	8f 81       	ldd	r24, Y+7	; 0x07
    29a4:	98 85       	ldd	r25, Y+8	; 0x08
    29a6:	28 17       	cp	r18, r24
    29a8:	39 07       	cpc	r19, r25
    29aa:	08 f5       	brcc	.+66     	; 0x29ee <_ZN7TwoWire5writeEPKhj+0x7c>
      write(data[i]);
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	fc 01       	movw	r30, r24
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	fc 01       	movw	r30, r24
    29b8:	20 81       	ld	r18, Z
    29ba:	31 81       	ldd	r19, Z+1	; 0x01
    29bc:	4d 81       	ldd	r20, Y+5	; 0x05
    29be:	5e 81       	ldd	r21, Y+6	; 0x06
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	84 0f       	add	r24, r20
    29c6:	95 1f       	adc	r25, r21
    29c8:	fc 01       	movw	r30, r24
    29ca:	40 81       	ld	r20, Z
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	64 2f       	mov	r22, r20
    29d2:	f9 01       	movw	r30, r18
    29d4:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	01 96       	adiw	r24, 0x01	; 1
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	de cf       	rjmp	.-68     	; 0x299e <_ZN7TwoWire5writeEPKhj+0x2c>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    29e2:	2f 81       	ldd	r18, Y+7	; 0x07
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	62 2f       	mov	r22, r18
    29ea:	0e 94 81 10 	call	0x2102	; 0x2102 <twi_transmit>
  }
  return quantity;
    29ee:	8f 81       	ldd	r24, Y+7	; 0x07
    29f0:	98 85       	ldd	r25, Y+8	; 0x08
}
    29f2:	28 96       	adiw	r28, 0x08	; 8
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <_ZN7TwoWire9availableEv+0x6>
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
  return rxBufferLength - rxBufferIndex;
    2a12:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	a9 01       	movw	r20, r18
    2a24:	48 1b       	sub	r20, r24
    2a26:	59 0b       	sbc	r21, r25
    2a28:	ca 01       	movw	r24, r20
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	08 95       	ret

00002a34 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <_ZN7TwoWire4readEv+0x6>
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <_ZN7TwoWire4readEv+0x8>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2a44:	8f ef       	ldi	r24, 0xFF	; 255
    2a46:	9f ef       	ldi	r25, 0xFF	; 255
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2a4c:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2a50:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>
    2a54:	98 17       	cp	r25, r24
    2a56:	88 f4       	brcc	.+34     	; 0x2a7a <_ZN7TwoWire4readEv+0x46>
    value = rxBuffer[rxBufferIndex];
    2a58:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	80 5c       	subi	r24, 0xC0	; 192
    2a62:	98 4f       	sbci	r25, 0xF8	; 248
    2a64:	fc 01       	movw	r30, r24
    2a66:	80 81       	ld	r24, Z
    2a68:	88 2f       	mov	r24, r24
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    ++rxBufferIndex;
    2a70:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2a74:	8f 5f       	subi	r24, 0xFF	; 255
    2a76:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
  }

  return value;
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	08 95       	ret

00002a8c <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <_ZN7TwoWire4peekEv+0x6>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <_ZN7TwoWire4peekEv+0x8>
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	9c 83       	std	Y+4, r25	; 0x04
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
  int value = -1;
    2a9c:	8f ef       	ldi	r24, 0xFF	; 255
    2a9e:	9f ef       	ldi	r25, 0xFF	; 255
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01
  
  if(rxBufferIndex < rxBufferLength){
    2aa4:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2aa8:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>
    2aac:	98 17       	cp	r25, r24
    2aae:	60 f4       	brcc	.+24     	; 0x2ac8 <_ZN7TwoWire4peekEv+0x3c>
    value = rxBuffer[rxBufferIndex];
    2ab0:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	80 5c       	subi	r24, 0xC0	; 192
    2aba:	98 4f       	sbci	r25, 0xF8	; 248
    2abc:	fc 01       	movw	r30, r24
    2abe:	80 81       	ld	r24, Z
    2ac0:	88 2f       	mov	r24, r24
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
  }

  return value;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	08 95       	ret

00002ada <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <_ZN7TwoWire5flushEv+0x6>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	9a 83       	std	Y+2, r25	; 0x02
    2ae6:	89 83       	std	Y+1, r24	; 0x01
  // XXX: to be implemented.
}
    2ae8:	00 00       	nop
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <_ZN7TwoWire16onReceiveServiceEPhi+0x6>
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <_ZN7TwoWire16onReceiveServiceEPhi+0x8>
    2afc:	1f 92       	push	r1
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9b 83       	std	Y+3, r25	; 0x03
    2b04:	8a 83       	std	Y+2, r24	; 0x02
    2b06:	7d 83       	std	Y+5, r23	; 0x05
    2b08:	6c 83       	std	Y+4, r22	; 0x04
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2b0a:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <_ZN7TwoWire14user_onReceiveE>
    2b0e:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <_ZN7TwoWire14user_onReceiveE+0x1>
    2b12:	89 2b       	or	r24, r25
    2b14:	89 f1       	breq	.+98     	; 0x2b78 <_ZN7TwoWire16onReceiveServiceEPhi+0x84>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2b16:	90 91 60 07 	lds	r25, 0x0760	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
    2b1a:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>
    2b1e:	98 17       	cp	r25, r24
    2b20:	68 f1       	brcs	.+90     	; 0x2b7c <_ZN7TwoWire16onReceiveServiceEPhi+0x88>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2b22:	19 82       	std	Y+1, r1	; 0x01
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2e:	28 17       	cp	r18, r24
    2b30:	39 07       	cpc	r19, r25
    2b32:	a4 f4       	brge	.+40     	; 0x2b5c <_ZN7TwoWire16onReceiveServiceEPhi+0x68>
    rxBuffer[i] = inBytes[i];    
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	29 81       	ldd	r18, Y+1	; 0x01
    2b3c:	22 2f       	mov	r18, r18
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a 81       	ldd	r20, Y+2	; 0x02
    2b42:	5b 81       	ldd	r21, Y+3	; 0x03
    2b44:	24 0f       	add	r18, r20
    2b46:	35 1f       	adc	r19, r21
    2b48:	f9 01       	movw	r30, r18
    2b4a:	20 81       	ld	r18, Z
    2b4c:	80 5c       	subi	r24, 0xC0	; 192
    2b4e:	98 4f       	sbci	r25, 0xF8	; 248
    2b50:	fc 01       	movw	r30, r24
    2b52:	20 83       	st	Z, r18
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	89 83       	std	Y+1, r24	; 0x01
    2b5a:	e4 cf       	rjmp	.-56     	; 0x2b24 <_ZN7TwoWire16onReceiveServiceEPhi+0x30>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2b5c:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <_ZN7TwoWire13rxBufferIndexE>
  rxBufferLength = numBytes;
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <_ZN7TwoWire14rxBufferLengthE>
  // alert user program
  user_onReceive(numBytes);
    2b66:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <_ZN7TwoWire14user_onReceiveE>
    2b6a:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <_ZN7TwoWire14user_onReceiveE+0x1>
    2b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b70:	9d 81       	ldd	r25, Y+5	; 0x05
    2b72:	f9 01       	movw	r30, r18
    2b74:	09 95       	icall
    2b76:	03 c0       	rjmp	.+6      	; 0x2b7e <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    return;
    2b78:	00 00       	nop
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <_ZN7TwoWire16onReceiveServiceEPhi+0x8a>
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    return;
    2b7c:	00 00       	nop
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	08 95       	ret

00002b8e <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    2b96:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire14user_onRequestE>
    2b9a:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <_ZN7TwoWire14user_onRequestE+0x1>
    2b9e:	89 2b       	or	r24, r25
    2ba0:	59 f0       	breq	.+22     	; 0x2bb8 <_ZN7TwoWire16onRequestServiceEv+0x2a>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2ba2:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <_ZN7TwoWire13txBufferIndexE>
  txBufferLength = 0;
    2ba6:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <_ZN7TwoWire14txBufferLengthE>
  // alert user program
  user_onRequest();
    2baa:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire14user_onRequestE>
    2bae:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <_ZN7TwoWire14user_onRequestE+0x1>
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	09 95       	icall
    2bb6:	01 c0       	rjmp	.+2      	; 0x2bba <_ZN7TwoWire16onRequestServiceEv+0x2c>
// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    return;
    2bb8:	00 00       	nop
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	08 95       	ret

00002bc0 <_ZN7TwoWire9onReceiveEPFviE>:

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <_ZN7TwoWire9onReceiveEPFviE+0x6>
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <_ZN7TwoWire9onReceiveEPFviE+0x8>
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	7c 83       	std	Y+4, r23	; 0x04
    2bd2:	6b 83       	std	Y+3, r22	; 0x03
  user_onReceive = function;
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd8:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <_ZN7TwoWire14user_onReceiveE+0x1>
    2bdc:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <_ZN7TwoWire14user_onReceiveE>
}
    2be0:	00 00       	nop
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	08 95       	ret

00002bf0 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <_ZN7TwoWire9onRequestEPFvvE+0x6>
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <_ZN7TwoWire9onRequestEPFvvE+0x8>
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	7c 83       	std	Y+4, r23	; 0x04
    2c02:	6b 83       	std	Y+3, r22	; 0x03
  user_onRequest = function;
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <_ZN7TwoWire14user_onRequestE+0x1>
    2c0c:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <_ZN7TwoWire14user_onRequestE>
}
    2c10:	00 00       	nop
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	08 95       	ret

00002c20 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <_Z41__static_initialization_and_destruction_0ii+0x6>
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	7c 83       	std	Y+4, r23	; 0x04
    2c32:	6b 83       	std	Y+3, r22	; 0x03
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	41 f4       	brne	.+16     	; 0x2c4c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	01 96       	adiw	r24, 0x01	; 1
    2c42:	21 f4       	brne	.+8      	; 0x2c4c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    2c44:	8a e8       	ldi	r24, 0x8A	; 138
    2c46:	97 e0       	ldi	r25, 0x07	; 7
    2c48:	0e 94 8b 12 	call	0x2516	; 0x2516 <_ZN7TwoWireC1Ev>
    2c4c:	00 00       	nop
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	6f ef       	ldi	r22, 0xFF	; 255
    2c66:	7f ef       	ldi	r23, 0xFF	; 255
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_Z41__static_initialization_and_destruction_0ii>
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	08 95       	ret

00002c76 <_ZN5PrintaSERKS_>:
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <_ZN5PrintaSERKS_+0x6>
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <_ZN5PrintaSERKS_+0x8>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	89 83       	std	Y+1, r24	; 0x01
    2c86:	7c 83       	std	Y+4, r23	; 0x04
    2c88:	6b 83       	std	Y+3, r22	; 0x03
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	fc 01       	movw	r30, r24
    2c90:	22 81       	ldd	r18, Z+2	; 0x02
    2c92:	33 81       	ldd	r19, Z+3	; 0x03
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	fc 01       	movw	r30, r24
    2c9a:	33 83       	std	Z+3, r19	; 0x03
    2c9c:	22 83       	std	Z+2, r18	; 0x02
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <_ZN6StreamaSERKS_>:
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <_ZN6StreamaSERKS_+0x6>
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <_ZN6StreamaSERKS_+0x8>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	9a 83       	std	Y+2, r25	; 0x02
    2cbe:	89 83       	std	Y+1, r24	; 0x01
    2cc0:	7c 83       	std	Y+4, r23	; 0x04
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
    2cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	b9 01       	movw	r22, r18
    2cce:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <_ZN5PrintaSERKS_>
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	84 81       	ldd	r24, Z+4	; 0x04
    2cda:	95 81       	ldd	r25, Z+5	; 0x05
    2cdc:	a6 81       	ldd	r26, Z+6	; 0x06
    2cde:	b7 81       	ldd	r27, Z+7	; 0x07
    2ce0:	29 81       	ldd	r18, Y+1	; 0x01
    2ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce4:	f9 01       	movw	r30, r18
    2ce6:	84 83       	std	Z+4, r24	; 0x04
    2ce8:	95 83       	std	Z+5, r25	; 0x05
    2cea:	a6 83       	std	Z+6, r26	; 0x06
    2cec:	b7 83       	std	Z+7, r27	; 0x07
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	80 85       	ldd	r24, Z+8	; 0x08
    2cf6:	91 85       	ldd	r25, Z+9	; 0x09
    2cf8:	a2 85       	ldd	r26, Z+10	; 0x0a
    2cfa:	b3 85       	ldd	r27, Z+11	; 0x0b
    2cfc:	29 81       	ldd	r18, Y+1	; 0x01
    2cfe:	3a 81       	ldd	r19, Y+2	; 0x02
    2d00:	f9 01       	movw	r30, r18
    2d02:	80 87       	std	Z+8, r24	; 0x08
    2d04:	91 87       	std	Z+9, r25	; 0x09
    2d06:	a2 87       	std	Z+10, r26	; 0x0a
    2d08:	b3 87       	std	Z+11, r27	; 0x0b
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <_ZN13Adafruit_FONAaSERKS_>:
#define FONA_CALL_FAILED 1
#define FONA_CALL_UNKNOWN 2
#define FONA_CALL_RINGING 3
#define FONA_CALL_INPROGRESS 4

class Adafruit_FONA : public FONAStreamType {
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <_ZN13Adafruit_FONAaSERKS_+0x6>
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <_ZN13Adafruit_FONAaSERKS_+0x8>
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	7c 83       	std	Y+4, r23	; 0x04
    2d2e:	6b 83       	std	Y+3, r22	; 0x03
    2d30:	2b 81       	ldd	r18, Y+3	; 0x03
    2d32:	3c 81       	ldd	r19, Y+4	; 0x04
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	b9 01       	movw	r22, r18
    2d3a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN6StreamaSERKS_>
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	9c 81       	ldd	r25, Y+4	; 0x04
    2d42:	fc 01       	movw	r30, r24
    2d44:	24 85       	ldd	r18, Z+12	; 0x0c
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	24 87       	std	Z+12, r18	; 0x0c
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	fc 01       	movw	r30, r24
    2d54:	25 85       	ldd	r18, Z+13	; 0x0d
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	25 87       	std	Z+13, r18	; 0x0d
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
    2d62:	ac 01       	movw	r20, r24
    2d64:	42 5f       	subi	r20, 0xF2	; 242
    2d66:	5f 4f       	sbci	r21, 0xFF	; 255
    2d68:	8e ef       	ldi	r24, 0xFE	; 254
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d70:	22 5f       	subi	r18, 0xF2	; 242
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	8f 3f       	cpi	r24, 0xFF	; 255
    2d76:	ff ef       	ldi	r31, 0xFF	; 255
    2d78:	9f 07       	cpc	r25, r31
    2d7a:	51 f0       	breq	.+20     	; 0x2d90 <_ZN13Adafruit_FONAaSERKS_+0x74>
    2d7c:	f9 01       	movw	r30, r18
    2d7e:	60 81       	ld	r22, Z
    2d80:	fa 01       	movw	r30, r20
    2d82:	60 83       	st	Z, r22
    2d84:	4f 5f       	subi	r20, 0xFF	; 255
    2d86:	5f 4f       	sbci	r21, 0xFF	; 255
    2d88:	2f 5f       	subi	r18, 0xFF	; 255
    2d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f2 cf       	rjmp	.-28     	; 0x2d74 <_ZN13Adafruit_FONAaSERKS_+0x58>
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	9c 81       	ldd	r25, Y+4	; 0x04
    2d94:	83 5f       	subi	r24, 0xF3	; 243
    2d96:	9e 4f       	sbci	r25, 0xFE	; 254
    2d98:	fc 01       	movw	r30, r24
    2d9a:	20 81       	ld	r18, Z
    2d9c:	31 81       	ldd	r19, Z+1	; 0x01
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	83 5f       	subi	r24, 0xF3	; 243
    2da4:	9e 4f       	sbci	r25, 0xFE	; 254
    2da6:	fc 01       	movw	r30, r24
    2da8:	31 83       	std	Z+1, r19	; 0x01
    2daa:	20 83       	st	Z, r18
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	81 5f       	subi	r24, 0xF1	; 241
    2db2:	9e 4f       	sbci	r25, 0xFE	; 254
    2db4:	fc 01       	movw	r30, r24
    2db6:	20 81       	ld	r18, Z
    2db8:	31 81       	ldd	r19, Z+1	; 0x01
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	81 5f       	subi	r24, 0xF1	; 241
    2dc0:	9e 4f       	sbci	r25, 0xFE	; 254
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	31 83       	std	Z+1, r19	; 0x01
    2dc6:	20 83       	st	Z, r18
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	8f 5e       	subi	r24, 0xEF	; 239
    2dce:	9e 4f       	sbci	r25, 0xFE	; 254
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	20 81       	ld	r18, Z
    2dd4:	31 81       	ldd	r19, Z+1	; 0x01
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	8f 5e       	subi	r24, 0xEF	; 239
    2ddc:	9e 4f       	sbci	r25, 0xFE	; 254
    2dde:	fc 01       	movw	r30, r24
    2de0:	31 83       	std	Z+1, r19	; 0x01
    2de2:	20 83       	st	Z, r18
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	8d 5e       	subi	r24, 0xED	; 237
    2dea:	9e 4f       	sbci	r25, 0xFE	; 254
    2dec:	fc 01       	movw	r30, r24
    2dee:	20 81       	ld	r18, Z
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	8d 5e       	subi	r24, 0xED	; 237
    2df6:	9e 4f       	sbci	r25, 0xFE	; 254
    2df8:	fc 01       	movw	r30, r24
    2dfa:	20 83       	st	Z, r18
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	8c 5e       	subi	r24, 0xEC	; 236
    2e02:	9e 4f       	sbci	r25, 0xFE	; 254
    2e04:	fc 01       	movw	r30, r24
    2e06:	20 81       	ld	r18, Z
    2e08:	31 81       	ldd	r19, Z+1	; 0x01
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	8c 5e       	subi	r24, 0xEC	; 236
    2e10:	9e 4f       	sbci	r25, 0xFE	; 254
    2e12:	fc 01       	movw	r30, r24
    2e14:	31 83       	std	Z+1, r19	; 0x01
    2e16:	20 83       	st	Z, r18
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1c:	8a 5e       	subi	r24, 0xEA	; 234
    2e1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e20:	fc 01       	movw	r30, r24
    2e22:	20 81       	ld	r18, Z
    2e24:	31 81       	ldd	r19, Z+1	; 0x01
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	8a 5e       	subi	r24, 0xEA	; 234
    2e2c:	9e 4f       	sbci	r25, 0xFE	; 254
    2e2e:	fc 01       	movw	r30, r24
    2e30:	31 83       	std	Z+1, r19	; 0x01
    2e32:	20 83       	st	Z, r18
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	88 5e       	subi	r24, 0xE8	; 232
    2e3a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	20 81       	ld	r18, Z
    2e40:	31 81       	ldd	r19, Z+1	; 0x01
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	9a 81       	ldd	r25, Y+2	; 0x02
    2e46:	88 5e       	subi	r24, 0xE8	; 232
    2e48:	9e 4f       	sbci	r25, 0xFE	; 254
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	31 83       	std	Z+1, r19	; 0x01
    2e4e:	20 83       	st	Z, r18
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <_ZN14HardwareSerial5beginEm+0x6>
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <_ZN14HardwareSerial5beginEm+0x8>
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <_ZN14HardwareSerial5beginEm+0xa>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	4b 83       	std	Y+3, r20	; 0x03
    2e76:	5c 83       	std	Y+4, r21	; 0x04
    2e78:	6d 83       	std	Y+5, r22	; 0x05
    2e7a:	7e 83       	std	Y+6, r23	; 0x06
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	ad 81       	ldd	r26, Y+5	; 0x05
    2e82:	be 81       	ldd	r27, Y+6	; 0x06
    2e84:	e9 81       	ldd	r30, Y+1	; 0x01
    2e86:	fa 81       	ldd	r31, Y+2	; 0x02
    2e88:	26 e0       	ldi	r18, 0x06	; 6
    2e8a:	ac 01       	movw	r20, r24
    2e8c:	bd 01       	movw	r22, r26
    2e8e:	cf 01       	movw	r24, r30
    2e90:	0e 94 c1 19 	call	0x3382	; 0x3382 <_ZN14HardwareSerial5beginEmh>
    2e94:	00 00       	nop
    2e96:	26 96       	adiw	r28, 0x06	; 6
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	08 95       	ret

00002ea8 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <_ZN7TwoWire5writeEi+0x6>
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <_ZN7TwoWire5writeEi+0x8>
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	9a 83       	std	Y+2, r25	; 0x02
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	7c 83       	std	Y+4, r23	; 0x04
    2eba:	6b 83       	std	Y+3, r22	; 0x03
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	20 81       	ld	r18, Z
    2eca:	31 81       	ldd	r19, Z+1	; 0x01
    2ecc:	4b 81       	ldd	r20, Y+3	; 0x03
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed2:	64 2f       	mov	r22, r20
    2ed4:	f9 01       	movw	r30, r18
    2ed6:	09 95       	icall
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	08 95       	ret

00002ee6 <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <_ZN5Print13setWriteErrorEi+0x6>
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <_ZN5Print13setWriteErrorEi+0x8>
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	9a 83       	std	Y+2, r25	; 0x02
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	7c 83       	std	Y+4, r23	; 0x04
    2ef8:	6b 83       	std	Y+3, r22	; 0x03
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	2b 81       	ldd	r18, Y+3	; 0x03
    2f00:	3c 81       	ldd	r19, Y+4	; 0x04
    2f02:	fc 01       	movw	r30, r24
    2f04:	33 83       	std	Z+3, r19	; 0x03
    2f06:	22 83       	std	Z+2, r18	; 0x02
    2f08:	00 00       	nop
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	08 95       	ret

00002f18 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <_ZN5PrintC1Ev+0x6>
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	9a 83       	std	Y+2, r25	; 0x02
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	25 ef       	ldi	r18, 0xF5	; 245
    2f28:	32 e0       	ldi	r19, 0x02	; 2
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2e:	fc 01       	movw	r30, r24
    2f30:	31 83       	std	Z+1, r19	; 0x01
    2f32:	20 83       	st	Z, r18
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	9a 81       	ldd	r25, Y+2	; 0x02
    2f38:	fc 01       	movw	r30, r24
    2f3a:	13 82       	std	Z+3, r1	; 0x03
    2f3c:	12 82       	std	Z+2, r1	; 0x02
    2f3e:	00 00       	nop
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	08 95       	ret

00002f4a <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <_ZN6StreamC1Ev+0x6>
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	9a 83       	std	Y+2, r25	; 0x02
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5c:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <_ZN5PrintC1Ev>
    2f60:	24 ec       	ldi	r18, 0xC4	; 196
    2f62:	32 e0       	ldi	r19, 0x02	; 2
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	9a 81       	ldd	r25, Y+2	; 0x02
    2f68:	fc 01       	movw	r30, r24
    2f6a:	31 83       	std	Z+1, r19	; 0x01
    2f6c:	20 83       	st	Z, r18
    2f6e:	29 81       	ldd	r18, Y+1	; 0x01
    2f70:	3a 81       	ldd	r19, Y+2	; 0x02
    2f72:	88 ee       	ldi	r24, 0xE8	; 232
    2f74:	93 e0       	ldi	r25, 0x03	; 3
    2f76:	a0 e0       	ldi	r26, 0x00	; 0
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	f9 01       	movw	r30, r18
    2f7c:	84 83       	std	Z+4, r24	; 0x04
    2f7e:	95 83       	std	Z+5, r25	; 0x05
    2f80:	a6 83       	std	Z+6, r26	; 0x06
    2f82:	b7 83       	std	Z+7, r27	; 0x07
    2f84:	00 00       	nop
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	08 95       	ret

00002f90 <__fixsfsi>:
    2f90:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__fixunssfsi>
    2f94:	68 94       	set
    2f96:	b1 11       	cpse	r27, r1
    2f98:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__fp_szero>
    2f9c:	08 95       	ret

00002f9e <__fixunssfsi>:
    2f9e:	0e 94 43 18 	call	0x3086	; 0x3086 <__fp_splitA>
    2fa2:	88 f0       	brcs	.+34     	; 0x2fc6 <__fixunssfsi+0x28>
    2fa4:	9f 57       	subi	r25, 0x7F	; 127
    2fa6:	98 f0       	brcs	.+38     	; 0x2fce <__fixunssfsi+0x30>
    2fa8:	b9 2f       	mov	r27, r25
    2faa:	99 27       	eor	r25, r25
    2fac:	b7 51       	subi	r27, 0x17	; 23
    2fae:	b0 f0       	brcs	.+44     	; 0x2fdc <__fixunssfsi+0x3e>
    2fb0:	e1 f0       	breq	.+56     	; 0x2fea <__fixunssfsi+0x4c>
    2fb2:	66 0f       	add	r22, r22
    2fb4:	77 1f       	adc	r23, r23
    2fb6:	88 1f       	adc	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	1a f0       	brmi	.+6      	; 0x2fc2 <__fixunssfsi+0x24>
    2fbc:	ba 95       	dec	r27
    2fbe:	c9 f7       	brne	.-14     	; 0x2fb2 <__fixunssfsi+0x14>
    2fc0:	14 c0       	rjmp	.+40     	; 0x2fea <__fixunssfsi+0x4c>
    2fc2:	b1 30       	cpi	r27, 0x01	; 1
    2fc4:	91 f0       	breq	.+36     	; 0x2fea <__fixunssfsi+0x4c>
    2fc6:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__fp_zero>
    2fca:	b1 e0       	ldi	r27, 0x01	; 1
    2fcc:	08 95       	ret
    2fce:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__fp_zero>
    2fd2:	67 2f       	mov	r22, r23
    2fd4:	78 2f       	mov	r23, r24
    2fd6:	88 27       	eor	r24, r24
    2fd8:	b8 5f       	subi	r27, 0xF8	; 248
    2fda:	39 f0       	breq	.+14     	; 0x2fea <__fixunssfsi+0x4c>
    2fdc:	b9 3f       	cpi	r27, 0xF9	; 249
    2fde:	cc f3       	brlt	.-14     	; 0x2fd2 <__fixunssfsi+0x34>
    2fe0:	86 95       	lsr	r24
    2fe2:	77 95       	ror	r23
    2fe4:	67 95       	ror	r22
    2fe6:	b3 95       	inc	r27
    2fe8:	d9 f7       	brne	.-10     	; 0x2fe0 <__fixunssfsi+0x42>
    2fea:	3e f4       	brtc	.+14     	; 0x2ffa <__fixunssfsi+0x5c>
    2fec:	90 95       	com	r25
    2fee:	80 95       	com	r24
    2ff0:	70 95       	com	r23
    2ff2:	61 95       	neg	r22
    2ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	08 95       	ret

00002ffc <__floatunsisf>:
    2ffc:	e8 94       	clt
    2ffe:	09 c0       	rjmp	.+18     	; 0x3012 <__floatsisf+0x12>

00003000 <__floatsisf>:
    3000:	97 fb       	bst	r25, 7
    3002:	3e f4       	brtc	.+14     	; 0x3012 <__floatsisf+0x12>
    3004:	90 95       	com	r25
    3006:	80 95       	com	r24
    3008:	70 95       	com	r23
    300a:	61 95       	neg	r22
    300c:	7f 4f       	sbci	r23, 0xFF	; 255
    300e:	8f 4f       	sbci	r24, 0xFF	; 255
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	99 23       	and	r25, r25
    3014:	a9 f0       	breq	.+42     	; 0x3040 <__floatsisf+0x40>
    3016:	f9 2f       	mov	r31, r25
    3018:	96 e9       	ldi	r25, 0x96	; 150
    301a:	bb 27       	eor	r27, r27
    301c:	93 95       	inc	r25
    301e:	f6 95       	lsr	r31
    3020:	87 95       	ror	r24
    3022:	77 95       	ror	r23
    3024:	67 95       	ror	r22
    3026:	b7 95       	ror	r27
    3028:	f1 11       	cpse	r31, r1
    302a:	f8 cf       	rjmp	.-16     	; 0x301c <__floatsisf+0x1c>
    302c:	fa f4       	brpl	.+62     	; 0x306c <__floatsisf+0x6c>
    302e:	bb 0f       	add	r27, r27
    3030:	11 f4       	brne	.+4      	; 0x3036 <__floatsisf+0x36>
    3032:	60 ff       	sbrs	r22, 0
    3034:	1b c0       	rjmp	.+54     	; 0x306c <__floatsisf+0x6c>
    3036:	6f 5f       	subi	r22, 0xFF	; 255
    3038:	7f 4f       	sbci	r23, 0xFF	; 255
    303a:	8f 4f       	sbci	r24, 0xFF	; 255
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	16 c0       	rjmp	.+44     	; 0x306c <__floatsisf+0x6c>
    3040:	88 23       	and	r24, r24
    3042:	11 f0       	breq	.+4      	; 0x3048 <__floatsisf+0x48>
    3044:	96 e9       	ldi	r25, 0x96	; 150
    3046:	11 c0       	rjmp	.+34     	; 0x306a <__floatsisf+0x6a>
    3048:	77 23       	and	r23, r23
    304a:	21 f0       	breq	.+8      	; 0x3054 <__floatsisf+0x54>
    304c:	9e e8       	ldi	r25, 0x8E	; 142
    304e:	87 2f       	mov	r24, r23
    3050:	76 2f       	mov	r23, r22
    3052:	05 c0       	rjmp	.+10     	; 0x305e <__floatsisf+0x5e>
    3054:	66 23       	and	r22, r22
    3056:	71 f0       	breq	.+28     	; 0x3074 <__floatsisf+0x74>
    3058:	96 e8       	ldi	r25, 0x86	; 134
    305a:	86 2f       	mov	r24, r22
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	2a f0       	brmi	.+10     	; 0x306c <__floatsisf+0x6c>
    3062:	9a 95       	dec	r25
    3064:	66 0f       	add	r22, r22
    3066:	77 1f       	adc	r23, r23
    3068:	88 1f       	adc	r24, r24
    306a:	da f7       	brpl	.-10     	; 0x3062 <__floatsisf+0x62>
    306c:	88 0f       	add	r24, r24
    306e:	96 95       	lsr	r25
    3070:	87 95       	ror	r24
    3072:	97 f9       	bld	r25, 7
    3074:	08 95       	ret

00003076 <__fp_split3>:
    3076:	57 fd       	sbrc	r21, 7
    3078:	90 58       	subi	r25, 0x80	; 128
    307a:	44 0f       	add	r20, r20
    307c:	55 1f       	adc	r21, r21
    307e:	59 f0       	breq	.+22     	; 0x3096 <__fp_splitA+0x10>
    3080:	5f 3f       	cpi	r21, 0xFF	; 255
    3082:	71 f0       	breq	.+28     	; 0x30a0 <__fp_splitA+0x1a>
    3084:	47 95       	ror	r20

00003086 <__fp_splitA>:
    3086:	88 0f       	add	r24, r24
    3088:	97 fb       	bst	r25, 7
    308a:	99 1f       	adc	r25, r25
    308c:	61 f0       	breq	.+24     	; 0x30a6 <__fp_splitA+0x20>
    308e:	9f 3f       	cpi	r25, 0xFF	; 255
    3090:	79 f0       	breq	.+30     	; 0x30b0 <__fp_splitA+0x2a>
    3092:	87 95       	ror	r24
    3094:	08 95       	ret
    3096:	12 16       	cp	r1, r18
    3098:	13 06       	cpc	r1, r19
    309a:	14 06       	cpc	r1, r20
    309c:	55 1f       	adc	r21, r21
    309e:	f2 cf       	rjmp	.-28     	; 0x3084 <__fp_split3+0xe>
    30a0:	46 95       	lsr	r20
    30a2:	f1 df       	rcall	.-30     	; 0x3086 <__fp_splitA>
    30a4:	08 c0       	rjmp	.+16     	; 0x30b6 <__fp_splitA+0x30>
    30a6:	16 16       	cp	r1, r22
    30a8:	17 06       	cpc	r1, r23
    30aa:	18 06       	cpc	r1, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	f1 cf       	rjmp	.-30     	; 0x3092 <__fp_splitA+0xc>
    30b0:	86 95       	lsr	r24
    30b2:	71 05       	cpc	r23, r1
    30b4:	61 05       	cpc	r22, r1
    30b6:	08 94       	sec
    30b8:	08 95       	ret

000030ba <__fp_zero>:
    30ba:	e8 94       	clt

000030bc <__fp_szero>:
    30bc:	bb 27       	eor	r27, r27
    30be:	66 27       	eor	r22, r22
    30c0:	77 27       	eor	r23, r23
    30c2:	cb 01       	movw	r24, r22
    30c4:	97 f9       	bld	r25, 7
    30c6:	08 95       	ret

000030c8 <__mulsf3>:
    30c8:	0e 94 77 18 	call	0x30ee	; 0x30ee <__mulsf3x>
    30cc:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__fp_round>
    30d0:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__fp_pscA>
    30d4:	38 f0       	brcs	.+14     	; 0x30e4 <__mulsf3+0x1c>
    30d6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__fp_pscB>
    30da:	20 f0       	brcs	.+8      	; 0x30e4 <__mulsf3+0x1c>
    30dc:	95 23       	and	r25, r21
    30de:	11 f0       	breq	.+4      	; 0x30e4 <__mulsf3+0x1c>
    30e0:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__fp_inf>
    30e4:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__fp_nan>
    30e8:	11 24       	eor	r1, r1
    30ea:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__fp_szero>

000030ee <__mulsf3x>:
    30ee:	0e 94 3b 18 	call	0x3076	; 0x3076 <__fp_split3>
    30f2:	70 f3       	brcs	.-36     	; 0x30d0 <__mulsf3+0x8>

000030f4 <__mulsf3_pse>:
    30f4:	95 9f       	mul	r25, r21
    30f6:	c1 f3       	breq	.-16     	; 0x30e8 <__mulsf3+0x20>
    30f8:	95 0f       	add	r25, r21
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	55 1f       	adc	r21, r21
    30fe:	62 9f       	mul	r22, r18
    3100:	f0 01       	movw	r30, r0
    3102:	72 9f       	mul	r23, r18
    3104:	bb 27       	eor	r27, r27
    3106:	f0 0d       	add	r31, r0
    3108:	b1 1d       	adc	r27, r1
    310a:	63 9f       	mul	r22, r19
    310c:	aa 27       	eor	r26, r26
    310e:	f0 0d       	add	r31, r0
    3110:	b1 1d       	adc	r27, r1
    3112:	aa 1f       	adc	r26, r26
    3114:	64 9f       	mul	r22, r20
    3116:	66 27       	eor	r22, r22
    3118:	b0 0d       	add	r27, r0
    311a:	a1 1d       	adc	r26, r1
    311c:	66 1f       	adc	r22, r22
    311e:	82 9f       	mul	r24, r18
    3120:	22 27       	eor	r18, r18
    3122:	b0 0d       	add	r27, r0
    3124:	a1 1d       	adc	r26, r1
    3126:	62 1f       	adc	r22, r18
    3128:	73 9f       	mul	r23, r19
    312a:	b0 0d       	add	r27, r0
    312c:	a1 1d       	adc	r26, r1
    312e:	62 1f       	adc	r22, r18
    3130:	83 9f       	mul	r24, r19
    3132:	a0 0d       	add	r26, r0
    3134:	61 1d       	adc	r22, r1
    3136:	22 1f       	adc	r18, r18
    3138:	74 9f       	mul	r23, r20
    313a:	33 27       	eor	r19, r19
    313c:	a0 0d       	add	r26, r0
    313e:	61 1d       	adc	r22, r1
    3140:	23 1f       	adc	r18, r19
    3142:	84 9f       	mul	r24, r20
    3144:	60 0d       	add	r22, r0
    3146:	21 1d       	adc	r18, r1
    3148:	82 2f       	mov	r24, r18
    314a:	76 2f       	mov	r23, r22
    314c:	6a 2f       	mov	r22, r26
    314e:	11 24       	eor	r1, r1
    3150:	9f 57       	subi	r25, 0x7F	; 127
    3152:	50 40       	sbci	r21, 0x00	; 0
    3154:	9a f0       	brmi	.+38     	; 0x317c <__mulsf3_pse+0x88>
    3156:	f1 f0       	breq	.+60     	; 0x3194 <__mulsf3_pse+0xa0>
    3158:	88 23       	and	r24, r24
    315a:	4a f0       	brmi	.+18     	; 0x316e <__mulsf3_pse+0x7a>
    315c:	ee 0f       	add	r30, r30
    315e:	ff 1f       	adc	r31, r31
    3160:	bb 1f       	adc	r27, r27
    3162:	66 1f       	adc	r22, r22
    3164:	77 1f       	adc	r23, r23
    3166:	88 1f       	adc	r24, r24
    3168:	91 50       	subi	r25, 0x01	; 1
    316a:	50 40       	sbci	r21, 0x00	; 0
    316c:	a9 f7       	brne	.-22     	; 0x3158 <__mulsf3_pse+0x64>
    316e:	9e 3f       	cpi	r25, 0xFE	; 254
    3170:	51 05       	cpc	r21, r1
    3172:	80 f0       	brcs	.+32     	; 0x3194 <__mulsf3_pse+0xa0>
    3174:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__fp_inf>
    3178:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__fp_szero>
    317c:	5f 3f       	cpi	r21, 0xFF	; 255
    317e:	e4 f3       	brlt	.-8      	; 0x3178 <__mulsf3_pse+0x84>
    3180:	98 3e       	cpi	r25, 0xE8	; 232
    3182:	d4 f3       	brlt	.-12     	; 0x3178 <__mulsf3_pse+0x84>
    3184:	86 95       	lsr	r24
    3186:	77 95       	ror	r23
    3188:	67 95       	ror	r22
    318a:	b7 95       	ror	r27
    318c:	f7 95       	ror	r31
    318e:	e7 95       	ror	r30
    3190:	9f 5f       	subi	r25, 0xFF	; 255
    3192:	c1 f7       	brne	.-16     	; 0x3184 <__mulsf3_pse+0x90>
    3194:	fe 2b       	or	r31, r30
    3196:	88 0f       	add	r24, r24
    3198:	91 1d       	adc	r25, r1
    319a:	96 95       	lsr	r25
    319c:	87 95       	ror	r24
    319e:	97 f9       	bld	r25, 7
    31a0:	08 95       	ret

000031a2 <__fp_inf>:
    31a2:	97 f9       	bld	r25, 7
    31a4:	9f 67       	ori	r25, 0x7F	; 127
    31a6:	80 e8       	ldi	r24, 0x80	; 128
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	08 95       	ret

000031ae <__fp_nan>:
    31ae:	9f ef       	ldi	r25, 0xFF	; 255
    31b0:	80 ec       	ldi	r24, 0xC0	; 192
    31b2:	08 95       	ret

000031b4 <__fp_pscA>:
    31b4:	00 24       	eor	r0, r0
    31b6:	0a 94       	dec	r0
    31b8:	16 16       	cp	r1, r22
    31ba:	17 06       	cpc	r1, r23
    31bc:	18 06       	cpc	r1, r24
    31be:	09 06       	cpc	r0, r25
    31c0:	08 95       	ret

000031c2 <__fp_pscB>:
    31c2:	00 24       	eor	r0, r0
    31c4:	0a 94       	dec	r0
    31c6:	12 16       	cp	r1, r18
    31c8:	13 06       	cpc	r1, r19
    31ca:	14 06       	cpc	r1, r20
    31cc:	05 06       	cpc	r0, r21
    31ce:	08 95       	ret

000031d0 <__fp_round>:
    31d0:	09 2e       	mov	r0, r25
    31d2:	03 94       	inc	r0
    31d4:	00 0c       	add	r0, r0
    31d6:	11 f4       	brne	.+4      	; 0x31dc <__fp_round+0xc>
    31d8:	88 23       	and	r24, r24
    31da:	52 f0       	brmi	.+20     	; 0x31f0 <__fp_round+0x20>
    31dc:	bb 0f       	add	r27, r27
    31de:	40 f4       	brcc	.+16     	; 0x31f0 <__fp_round+0x20>
    31e0:	bf 2b       	or	r27, r31
    31e2:	11 f4       	brne	.+4      	; 0x31e8 <__fp_round+0x18>
    31e4:	60 ff       	sbrs	r22, 0
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <__fp_round+0x20>
    31e8:	6f 5f       	subi	r22, 0xFF	; 255
    31ea:	7f 4f       	sbci	r23, 0xFF	; 255
    31ec:	8f 4f       	sbci	r24, 0xFF	; 255
    31ee:	9f 4f       	sbci	r25, 0xFF	; 255
    31f0:	08 95       	ret

000031f2 <__cxa_pure_virtual>:
    31f2:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <abort>

000031f6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    31f6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    31f8:	91 8d       	ldd	r25, Z+25	; 0x19
    31fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    31fc:	89 2f       	mov	r24, r25
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	80 5c       	subi	r24, 0xC0	; 192
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	82 1b       	sub	r24, r18
    3206:	91 09       	sbc	r25, r1
}
    3208:	8f 73       	andi	r24, 0x3F	; 63
    320a:	99 27       	eor	r25, r25
    320c:	08 95       	ret

0000320e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    320e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3210:	91 8d       	ldd	r25, Z+25	; 0x19
    3212:	82 8d       	ldd	r24, Z+26	; 0x1a
    3214:	98 17       	cp	r25, r24
    3216:	31 f0       	breq	.+12     	; 0x3224 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3218:	82 8d       	ldd	r24, Z+26	; 0x1a
    321a:	e8 0f       	add	r30, r24
    321c:	f1 1d       	adc	r31, r1
    321e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3224:	8f ef       	ldi	r24, 0xFF	; 255
    3226:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3228:	08 95       	ret

0000322a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    322a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    322c:	91 8d       	ldd	r25, Z+25	; 0x19
    322e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3230:	98 17       	cp	r25, r24
    3232:	61 f0       	breq	.+24     	; 0x324c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3234:	82 8d       	ldd	r24, Z+26	; 0x1a
    3236:	df 01       	movw	r26, r30
    3238:	a8 0f       	add	r26, r24
    323a:	b1 1d       	adc	r27, r1
    323c:	5d 96       	adiw	r26, 0x1d	; 29
    323e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3240:	92 8d       	ldd	r25, Z+26	; 0x1a
    3242:	9f 5f       	subi	r25, 0xFF	; 255
    3244:	9f 73       	andi	r25, 0x3F	; 63
    3246:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    324c:	8f ef       	ldi	r24, 0xFF	; 255
    324e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3250:	08 95       	ret

00003252 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3252:	8e e7       	ldi	r24, 0x7E	; 126
    3254:	9a e1       	ldi	r25, 0x1A	; 26
    3256:	89 2b       	or	r24, r25
    3258:	49 f0       	breq	.+18     	; 0x326c <_Z14serialEventRunv+0x1a>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	89 2b       	or	r24, r25
    3260:	29 f0       	breq	.+10     	; 0x326c <_Z14serialEventRunv+0x1a>
    3262:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <_Z17Serial0_availablev>
    3266:	81 11       	cpse	r24, r1
    3268:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    326c:	08 95       	ret

0000326e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    326e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3270:	84 8d       	ldd	r24, Z+28	; 0x1c
    3272:	df 01       	movw	r26, r30
    3274:	a8 0f       	add	r26, r24
    3276:	b1 1d       	adc	r27, r1
    3278:	a3 5a       	subi	r26, 0xA3	; 163
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    327e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	8f 73       	andi	r24, 0x3F	; 63
    3286:	99 27       	eor	r25, r25
    3288:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    328a:	a6 89       	ldd	r26, Z+22	; 0x16
    328c:	b7 89       	ldd	r27, Z+23	; 0x17
    328e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3290:	a0 89       	ldd	r26, Z+16	; 0x10
    3292:	b1 89       	ldd	r27, Z+17	; 0x11
    3294:	8c 91       	ld	r24, X
    3296:	80 64       	ori	r24, 0x40	; 64
    3298:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    329a:	93 8d       	ldd	r25, Z+27	; 0x1b
    329c:	84 8d       	ldd	r24, Z+28	; 0x1c
    329e:	98 13       	cpse	r25, r24
    32a0:	06 c0       	rjmp	.+12     	; 0x32ae <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    32a2:	02 88       	ldd	r0, Z+18	; 0x12
    32a4:	f3 89       	ldd	r31, Z+19	; 0x13
    32a6:	e0 2d       	mov	r30, r0
    32a8:	80 81       	ld	r24, Z
    32aa:	8f 7d       	andi	r24, 0xDF	; 223
    32ac:	80 83       	st	Z, r24
    32ae:	08 95       	ret

000032b0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    32b0:	ef 92       	push	r14
    32b2:	ff 92       	push	r15
    32b4:	0f 93       	push	r16
    32b6:	1f 93       	push	r17
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	ec 01       	movw	r28, r24
  _written = true;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    32c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32c6:	98 13       	cpse	r25, r24
    32c8:	05 c0       	rjmp	.+10     	; 0x32d4 <_ZN14HardwareSerial5writeEh+0x24>
    32ca:	e8 89       	ldd	r30, Y+16	; 0x10
    32cc:	f9 89       	ldd	r31, Y+17	; 0x11
    32ce:	80 81       	ld	r24, Z
    32d0:	85 fd       	sbrc	r24, 5
    32d2:	24 c0       	rjmp	.+72     	; 0x331c <_ZN14HardwareSerial5writeEh+0x6c>
    32d4:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    32d6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    32d8:	10 e0       	ldi	r17, 0x00	; 0
    32da:	0f 5f       	subi	r16, 0xFF	; 255
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	0f 73       	andi	r16, 0x3F	; 63
    32e0:	11 27       	eor	r17, r17
    32e2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    32e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32e6:	e8 12       	cpse	r14, r24
    32e8:	0c c0       	rjmp	.+24     	; 0x3302 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	07 fc       	sbrc	r0, 7
    32ee:	fa cf       	rjmp	.-12     	; 0x32e4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    32f0:	e8 89       	ldd	r30, Y+16	; 0x10
    32f2:	f9 89       	ldd	r31, Y+17	; 0x11
    32f4:	80 81       	ld	r24, Z
    32f6:	85 ff       	sbrs	r24, 5
    32f8:	f5 cf       	rjmp	.-22     	; 0x32e4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    32fa:	ce 01       	movw	r24, r28
    32fc:	0e 94 37 19 	call	0x326e	; 0x326e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3300:	f1 cf       	rjmp	.-30     	; 0x32e4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3304:	fe 01       	movw	r30, r28
    3306:	e8 0f       	add	r30, r24
    3308:	f1 1d       	adc	r31, r1
    330a:	e3 5a       	subi	r30, 0xA3	; 163
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3310:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3312:	ea 89       	ldd	r30, Y+18	; 0x12
    3314:	fb 89       	ldd	r31, Y+19	; 0x13
    3316:	80 81       	ld	r24, Z
    3318:	80 62       	ori	r24, 0x20	; 32
    331a:	07 c0       	rjmp	.+14     	; 0x332a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    331c:	ee 89       	ldd	r30, Y+22	; 0x16
    331e:	ff 89       	ldd	r31, Y+23	; 0x17
    3320:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3322:	e8 89       	ldd	r30, Y+16	; 0x10
    3324:	f9 89       	ldd	r31, Y+17	; 0x11
    3326:	80 81       	ld	r24, Z
    3328:	80 64       	ori	r24, 0x40	; 64
    332a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	08 95       	ret

0000333e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3344:	88 8d       	ldd	r24, Y+24	; 0x18
    3346:	88 23       	and	r24, r24
    3348:	c9 f0       	breq	.+50     	; 0x337c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    334a:	ea 89       	ldd	r30, Y+18	; 0x12
    334c:	fb 89       	ldd	r31, Y+19	; 0x13
    334e:	80 81       	ld	r24, Z
    3350:	85 fd       	sbrc	r24, 5
    3352:	05 c0       	rjmp	.+10     	; 0x335e <_ZN14HardwareSerial5flushEv+0x20>
    3354:	a8 89       	ldd	r26, Y+16	; 0x10
    3356:	b9 89       	ldd	r27, Y+17	; 0x11
    3358:	8c 91       	ld	r24, X
    335a:	86 fd       	sbrc	r24, 6
    335c:	0f c0       	rjmp	.+30     	; 0x337c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	07 fc       	sbrc	r0, 7
    3362:	f5 cf       	rjmp	.-22     	; 0x334e <_ZN14HardwareSerial5flushEv+0x10>
    3364:	80 81       	ld	r24, Z
    3366:	85 ff       	sbrs	r24, 5
    3368:	f2 cf       	rjmp	.-28     	; 0x334e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    336a:	a8 89       	ldd	r26, Y+16	; 0x10
    336c:	b9 89       	ldd	r27, Y+17	; 0x11
    336e:	8c 91       	ld	r24, X
    3370:	85 ff       	sbrs	r24, 5
    3372:	ed cf       	rjmp	.-38     	; 0x334e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3374:	ce 01       	movw	r24, r28
    3376:	0e 94 37 19 	call	0x326e	; 0x326e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    337a:	e7 cf       	rjmp	.-50     	; 0x334a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	08 95       	ret

00003382 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3382:	cf 92       	push	r12
    3384:	df 92       	push	r13
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	ec 01       	movw	r28, r24
    3392:	6a 01       	movw	r12, r20
    3394:	7b 01       	movw	r14, r22
    3396:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3398:	e8 89       	ldd	r30, Y+16	; 0x10
    339a:	f9 89       	ldd	r31, Y+17	; 0x11
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    33a0:	41 15       	cp	r20, r1
    33a2:	51 4e       	sbci	r21, 0xE1	; 225
    33a4:	61 05       	cpc	r22, r1
    33a6:	71 05       	cpc	r23, r1
    33a8:	b1 f0       	breq	.+44     	; 0x33d6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	79 e0       	ldi	r23, 0x09	; 9
    33ae:	8d e3       	ldi	r24, 0x3D	; 61
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	a7 01       	movw	r20, r14
    33b4:	96 01       	movw	r18, r12
    33b6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodsi4>
    33ba:	da 01       	movw	r26, r20
    33bc:	c9 01       	movw	r24, r18
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	a1 09       	sbc	r26, r1
    33c2:	b1 09       	sbc	r27, r1
    33c4:	b6 95       	lsr	r27
    33c6:	a7 95       	ror	r26
    33c8:	97 95       	ror	r25
    33ca:	87 95       	ror	r24
    33cc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    33ce:	21 15       	cp	r18, r1
    33d0:	80 e1       	ldi	r24, 0x10	; 16
    33d2:	38 07       	cpc	r19, r24
    33d4:	a8 f0       	brcs	.+42     	; 0x3400 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    33d6:	e8 89       	ldd	r30, Y+16	; 0x10
    33d8:	f9 89       	ldd	r31, Y+17	; 0x11
    33da:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    33dc:	60 e8       	ldi	r22, 0x80	; 128
    33de:	74 e8       	ldi	r23, 0x84	; 132
    33e0:	8e e1       	ldi	r24, 0x1E	; 30
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a7 01       	movw	r20, r14
    33e6:	96 01       	movw	r18, r12
    33e8:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodsi4>
    33ec:	da 01       	movw	r26, r20
    33ee:	c9 01       	movw	r24, r18
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	a1 09       	sbc	r26, r1
    33f4:	b1 09       	sbc	r27, r1
    33f6:	b6 95       	lsr	r27
    33f8:	a7 95       	ror	r26
    33fa:	97 95       	ror	r25
    33fc:	87 95       	ror	r24
    33fe:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3400:	ec 85       	ldd	r30, Y+12	; 0x0c
    3402:	fd 85       	ldd	r31, Y+13	; 0x0d
    3404:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3406:	ee 85       	ldd	r30, Y+14	; 0x0e
    3408:	ff 85       	ldd	r31, Y+15	; 0x0f
    340a:	20 83       	st	Z, r18

  _written = false;
    340c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    340e:	ec 89       	ldd	r30, Y+20	; 0x14
    3410:	fd 89       	ldd	r31, Y+21	; 0x15
    3412:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3414:	ea 89       	ldd	r30, Y+18	; 0x12
    3416:	fb 89       	ldd	r31, Y+19	; 0x13
    3418:	80 81       	ld	r24, Z
    341a:	80 61       	ori	r24, 0x10	; 16
    341c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    341e:	ea 89       	ldd	r30, Y+18	; 0x12
    3420:	fb 89       	ldd	r31, Y+19	; 0x13
    3422:	80 81       	ld	r24, Z
    3424:	88 60       	ori	r24, 0x08	; 8
    3426:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3428:	ea 89       	ldd	r30, Y+18	; 0x12
    342a:	fb 89       	ldd	r31, Y+19	; 0x13
    342c:	80 81       	ld	r24, Z
    342e:	80 68       	ori	r24, 0x80	; 128
    3430:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3432:	ea 89       	ldd	r30, Y+18	; 0x12
    3434:	fb 89       	ldd	r31, Y+19	; 0x13
    3436:	80 81       	ld	r24, Z
    3438:	8f 7d       	andi	r24, 0xDF	; 223
    343a:	80 83       	st	Z, r24
}
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	ff 90       	pop	r15
    3444:	ef 90       	pop	r14
    3446:	df 90       	pop	r13
    3448:	cf 90       	pop	r12
    344a:	08 95       	ret

0000344c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    344c:	1f 92       	push	r1
    344e:	0f 92       	push	r0
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	0f 92       	push	r0
    3454:	11 24       	eor	r1, r1
    3456:	2f 93       	push	r18
    3458:	8f 93       	push	r24
    345a:	9f 93       	push	r25
    345c:	ef 93       	push	r30
    345e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3460:	e0 91 a8 07 	lds	r30, 0x07A8	; 0x8007a8 <Serial+0x10>
    3464:	f0 91 a9 07 	lds	r31, 0x07A9	; 0x8007a9 <Serial+0x11>
    3468:	80 81       	ld	r24, Z
    346a:	e0 91 ae 07 	lds	r30, 0x07AE	; 0x8007ae <Serial+0x16>
    346e:	f0 91 af 07 	lds	r31, 0x07AF	; 0x8007af <Serial+0x17>
    3472:	82 fd       	sbrc	r24, 2
    3474:	12 c0       	rjmp	.+36     	; 0x349a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3476:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3478:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <Serial+0x19>
    347c:	8f 5f       	subi	r24, 0xFF	; 255
    347e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3480:	20 91 b2 07 	lds	r18, 0x07B2	; 0x8007b2 <Serial+0x1a>
    3484:	82 17       	cp	r24, r18
    3486:	51 f0       	breq	.+20     	; 0x349c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3488:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <Serial+0x19>
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	e8 56       	subi	r30, 0x68	; 104
    3490:	f8 4f       	sbci	r31, 0xF8	; 248
    3492:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3494:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <Serial+0x19>
    3498:	01 c0       	rjmp	.+2      	; 0x349c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    349a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	9f 91       	pop	r25
    34a2:	8f 91       	pop	r24
    34a4:	2f 91       	pop	r18
    34a6:	0f 90       	pop	r0
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	0f 90       	pop	r0
    34ac:	1f 90       	pop	r1
    34ae:	18 95       	reti

000034b0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    34b0:	1f 92       	push	r1
    34b2:	0f 92       	push	r0
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	0f 92       	push	r0
    34b8:	11 24       	eor	r1, r1
    34ba:	2f 93       	push	r18
    34bc:	3f 93       	push	r19
    34be:	4f 93       	push	r20
    34c0:	5f 93       	push	r21
    34c2:	6f 93       	push	r22
    34c4:	7f 93       	push	r23
    34c6:	8f 93       	push	r24
    34c8:	9f 93       	push	r25
    34ca:	af 93       	push	r26
    34cc:	bf 93       	push	r27
    34ce:	ef 93       	push	r30
    34d0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    34d2:	88 e9       	ldi	r24, 0x98	; 152
    34d4:	97 e0       	ldi	r25, 0x07	; 7
    34d6:	0e 94 37 19 	call	0x326e	; 0x326e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    34da:	ff 91       	pop	r31
    34dc:	ef 91       	pop	r30
    34de:	bf 91       	pop	r27
    34e0:	af 91       	pop	r26
    34e2:	9f 91       	pop	r25
    34e4:	8f 91       	pop	r24
    34e6:	7f 91       	pop	r23
    34e8:	6f 91       	pop	r22
    34ea:	5f 91       	pop	r21
    34ec:	4f 91       	pop	r20
    34ee:	3f 91       	pop	r19
    34f0:	2f 91       	pop	r18
    34f2:	0f 90       	pop	r0
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	0f 90       	pop	r0
    34f8:	1f 90       	pop	r1
    34fa:	18 95       	reti

000034fc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    34fc:	88 e9       	ldi	r24, 0x98	; 152
    34fe:	97 e0       	ldi	r25, 0x07	; 7
    3500:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <_ZN14HardwareSerial9availableEv>
    3504:	21 e0       	ldi	r18, 0x01	; 1
    3506:	89 2b       	or	r24, r25
    3508:	09 f4       	brne	.+2      	; 0x350c <_Z17Serial0_availablev+0x10>
    350a:	20 e0       	ldi	r18, 0x00	; 0
}
    350c:	82 2f       	mov	r24, r18
    350e:	08 95       	ret

00003510 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3510:	e8 e9       	ldi	r30, 0x98	; 152
    3512:	f7 e0       	ldi	r31, 0x07	; 7
    3514:	13 82       	std	Z+3, r1	; 0x03
    3516:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3518:	88 ee       	ldi	r24, 0xE8	; 232
    351a:	93 e0       	ldi	r25, 0x03	; 3
    351c:	a0 e0       	ldi	r26, 0x00	; 0
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	84 83       	std	Z+4, r24	; 0x04
    3522:	95 83       	std	Z+5, r25	; 0x05
    3524:	a6 83       	std	Z+6, r26	; 0x06
    3526:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3528:	84 ed       	ldi	r24, 0xD4	; 212
    352a:	92 e0       	ldi	r25, 0x02	; 2
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	80 83       	st	Z, r24
    3530:	85 ec       	ldi	r24, 0xC5	; 197
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	95 87       	std	Z+13, r25	; 0x0d
    3536:	84 87       	std	Z+12, r24	; 0x0c
    3538:	84 ec       	ldi	r24, 0xC4	; 196
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	97 87       	std	Z+15, r25	; 0x0f
    353e:	86 87       	std	Z+14, r24	; 0x0e
    3540:	80 ec       	ldi	r24, 0xC0	; 192
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	91 8b       	std	Z+17, r25	; 0x11
    3546:	80 8b       	std	Z+16, r24	; 0x10
    3548:	81 ec       	ldi	r24, 0xC1	; 193
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	93 8b       	std	Z+19, r25	; 0x13
    354e:	82 8b       	std	Z+18, r24	; 0x12
    3550:	82 ec       	ldi	r24, 0xC2	; 194
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	95 8b       	std	Z+21, r25	; 0x15
    3556:	84 8b       	std	Z+20, r24	; 0x14
    3558:	86 ec       	ldi	r24, 0xC6	; 198
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	97 8b       	std	Z+23, r25	; 0x17
    355e:	86 8b       	std	Z+22, r24	; 0x16
    3560:	11 8e       	std	Z+25, r1	; 0x19
    3562:	12 8e       	std	Z+26, r1	; 0x1a
    3564:	13 8e       	std	Z+27, r1	; 0x1b
    3566:	14 8e       	std	Z+28, r1	; 0x1c
    3568:	08 95       	ret

0000356a <initVariant>:
    356a:	08 95       	ret

0000356c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    356c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <init>

	initVariant();
    3570:	0e 94 b5 1a 	call	0x356a	; 0x356a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3574:	0e 94 09 07 	call	0xe12	; 0xe12 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3578:	c9 e2       	ldi	r28, 0x29	; 41
    357a:	d9 e1       	ldi	r29, 0x19	; 25
#endif
	
	setup();
    
	for (;;) {
		loop();
    357c:	0e 94 9a 07 	call	0xf34	; 0xf34 <loop>
		if (serialEventRun) serialEventRun();
    3580:	20 97       	sbiw	r28, 0x00	; 0
    3582:	e1 f3       	breq	.-8      	; 0x357c <main+0x10>
    3584:	0e 94 29 19 	call	0x3252	; 0x3252 <_Z14serialEventRunv>
    3588:	f9 cf       	rjmp	.-14     	; 0x357c <main+0x10>

0000358a <_Znwj>:
    358a:	0c 94 95 2c 	jmp	0x592a	; 0x592a <malloc>

0000358e <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    358e:	cf 92       	push	r12
    3590:	df 92       	push	r13
    3592:	ef 92       	push	r14
    3594:	ff 92       	push	r15
    3596:	0f 93       	push	r16
    3598:	1f 93       	push	r17
    359a:	cf 93       	push	r28
    359c:	df 93       	push	r29
    359e:	6c 01       	movw	r12, r24
    35a0:	7a 01       	movw	r14, r20
    35a2:	8b 01       	movw	r16, r22
    35a4:	c0 e0       	ldi	r28, 0x00	; 0
    35a6:	d0 e0       	ldi	r29, 0x00	; 0
    35a8:	ce 15       	cp	r28, r14
    35aa:	df 05       	cpc	r29, r15
    35ac:	81 f0       	breq	.+32     	; 0x35ce <_ZN5Print5writeEPKhj+0x40>
    35ae:	d8 01       	movw	r26, r16
    35b0:	6d 91       	ld	r22, X+
    35b2:	8d 01       	movw	r16, r26
    35b4:	d6 01       	movw	r26, r12
    35b6:	ed 91       	ld	r30, X+
    35b8:	fc 91       	ld	r31, X
    35ba:	01 90       	ld	r0, Z+
    35bc:	f0 81       	ld	r31, Z
    35be:	e0 2d       	mov	r30, r0
    35c0:	c6 01       	movw	r24, r12
    35c2:	09 95       	icall
    35c4:	89 2b       	or	r24, r25
    35c6:	11 f0       	breq	.+4      	; 0x35cc <_ZN5Print5writeEPKhj+0x3e>
    35c8:	21 96       	adiw	r28, 0x01	; 1
    35ca:	ee cf       	rjmp	.-36     	; 0x35a8 <_ZN5Print5writeEPKhj+0x1a>
    35cc:	7e 01       	movw	r14, r28
    35ce:	c7 01       	movw	r24, r14
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	1f 91       	pop	r17
    35d6:	0f 91       	pop	r16
    35d8:	ff 90       	pop	r15
    35da:	ef 90       	pop	r14
    35dc:	df 90       	pop	r13
    35de:	cf 90       	pop	r12
    35e0:	08 95       	ret

000035e2 <_ZN5Print5writeEPKc>:
    35e2:	61 15       	cp	r22, r1
    35e4:	71 05       	cpc	r23, r1
    35e6:	79 f0       	breq	.+30     	; 0x3606 <_ZN5Print5writeEPKc+0x24>
    35e8:	fb 01       	movw	r30, r22
    35ea:	01 90       	ld	r0, Z+
    35ec:	00 20       	and	r0, r0
    35ee:	e9 f7       	brne	.-6      	; 0x35ea <_ZN5Print5writeEPKc+0x8>
    35f0:	31 97       	sbiw	r30, 0x01	; 1
    35f2:	af 01       	movw	r20, r30
    35f4:	46 1b       	sub	r20, r22
    35f6:	57 0b       	sbc	r21, r23
    35f8:	dc 01       	movw	r26, r24
    35fa:	ed 91       	ld	r30, X+
    35fc:	fc 91       	ld	r31, X
    35fe:	02 80       	ldd	r0, Z+2	; 0x02
    3600:	f3 81       	ldd	r31, Z+3	; 0x03
    3602:	e0 2d       	mov	r30, r0
    3604:	09 94       	ijmp
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	08 95       	ret

0000360c <_ZN5Print5printEPK19__FlashStringHelper>:
    360c:	ef 92       	push	r14
    360e:	ff 92       	push	r15
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	8c 01       	movw	r16, r24
    361a:	7b 01       	movw	r14, r22
    361c:	c0 e0       	ldi	r28, 0x00	; 0
    361e:	d0 e0       	ldi	r29, 0x00	; 0
    3620:	f7 01       	movw	r30, r14
    3622:	ec 0f       	add	r30, r28
    3624:	fd 1f       	adc	r31, r29
    3626:	64 91       	lpm	r22, Z
    3628:	66 23       	and	r22, r22
    362a:	61 f0       	breq	.+24     	; 0x3644 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    362c:	d8 01       	movw	r26, r16
    362e:	ed 91       	ld	r30, X+
    3630:	fc 91       	ld	r31, X
    3632:	01 90       	ld	r0, Z+
    3634:	f0 81       	ld	r31, Z
    3636:	e0 2d       	mov	r30, r0
    3638:	c8 01       	movw	r24, r16
    363a:	09 95       	icall
    363c:	89 2b       	or	r24, r25
    363e:	11 f0       	breq	.+4      	; 0x3644 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3640:	21 96       	adiw	r28, 0x01	; 1
    3642:	ee cf       	rjmp	.-36     	; 0x3620 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3644:	ce 01       	movw	r24, r28
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	ff 90       	pop	r15
    3650:	ef 90       	pop	r14
    3652:	08 95       	ret

00003654 <_ZN5Print5printEPKc>:
    3654:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_ZN5Print5writeEPKc>

00003658 <_ZN5Print5printEc>:
    3658:	dc 01       	movw	r26, r24
    365a:	ed 91       	ld	r30, X+
    365c:	fc 91       	ld	r31, X
    365e:	01 90       	ld	r0, Z+
    3660:	f0 81       	ld	r31, Z
    3662:	e0 2d       	mov	r30, r0
    3664:	09 94       	ijmp

00003666 <_ZN5Print7printlnEv>:
    3666:	60 ee       	ldi	r22, 0xE0	; 224
    3668:	72 e0       	ldi	r23, 0x02	; 2
    366a:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <_ZN5Print5writeEPKc>

0000366e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    366e:	0f 93       	push	r16
    3670:	1f 93       	push	r17
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	ec 01       	movw	r28, r24
    3678:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    367c:	8c 01       	movw	r16, r24
    367e:	ce 01       	movw	r24, r28
    3680:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    3684:	80 0f       	add	r24, r16
    3686:	91 1f       	adc	r25, r17
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <_ZN5Print7printlnEPKc>:
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	ec 01       	movw	r28, r24
    369c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN5Print5writeEPKc>
    36a0:	8c 01       	movw	r16, r24
    36a2:	ce 01       	movw	r24, r28
    36a4:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    36a8:	80 0f       	add	r24, r16
    36aa:	91 1f       	adc	r25, r17
    36ac:	df 91       	pop	r29
    36ae:	cf 91       	pop	r28
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	08 95       	ret

000036b6 <_ZN5Print7printlnEc>:
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	ec 01       	movw	r28, r24
    36c0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEc>
    36c4:	8c 01       	movw	r16, r24
    36c6:	ce 01       	movw	r24, r28
    36c8:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    36cc:	80 0f       	add	r24, r16
    36ce:	91 1f       	adc	r25, r17
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	08 95       	ret

000036da <_ZN5Print11printNumberEmh>:
    36da:	8f 92       	push	r8
    36dc:	9f 92       	push	r9
    36de:	af 92       	push	r10
    36e0:	bf 92       	push	r11
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	a1 97       	sbiw	r28, 0x21	; 33
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	7c 01       	movw	r14, r24
    3700:	fa 01       	movw	r30, r20
    3702:	cb 01       	movw	r24, r22
    3704:	19 a2       	std	Y+33, r1	; 0x21
    3706:	22 30       	cpi	r18, 0x02	; 2
    3708:	08 f4       	brcc	.+2      	; 0x370c <_ZN5Print11printNumberEmh+0x32>
    370a:	2a e0       	ldi	r18, 0x0A	; 10
    370c:	8e 01       	movw	r16, r28
    370e:	0f 5d       	subi	r16, 0xDF	; 223
    3710:	1f 4f       	sbci	r17, 0xFF	; 255
    3712:	82 2e       	mov	r8, r18
    3714:	91 2c       	mov	r9, r1
    3716:	a1 2c       	mov	r10, r1
    3718:	b1 2c       	mov	r11, r1
    371a:	bf 01       	movw	r22, r30
    371c:	a5 01       	movw	r20, r10
    371e:	94 01       	movw	r18, r8
    3720:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodsi4>
    3724:	f9 01       	movw	r30, r18
    3726:	ca 01       	movw	r24, r20
    3728:	01 50       	subi	r16, 0x01	; 1
    372a:	11 09       	sbc	r17, r1
    372c:	6a 30       	cpi	r22, 0x0A	; 10
    372e:	10 f4       	brcc	.+4      	; 0x3734 <_ZN5Print11printNumberEmh+0x5a>
    3730:	60 5d       	subi	r22, 0xD0	; 208
    3732:	01 c0       	rjmp	.+2      	; 0x3736 <_ZN5Print11printNumberEmh+0x5c>
    3734:	69 5c       	subi	r22, 0xC9	; 201
    3736:	d8 01       	movw	r26, r16
    3738:	6c 93       	st	X, r22
    373a:	23 2b       	or	r18, r19
    373c:	24 2b       	or	r18, r20
    373e:	25 2b       	or	r18, r21
    3740:	61 f7       	brne	.-40     	; 0x371a <_ZN5Print11printNumberEmh+0x40>
    3742:	b8 01       	movw	r22, r16
    3744:	c7 01       	movw	r24, r14
    3746:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <_ZN5Print5writeEPKc>
    374a:	a1 96       	adiw	r28, 0x21	; 33
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	df 91       	pop	r29
    3758:	cf 91       	pop	r28
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    375e:	ff 90       	pop	r15
    3760:	ef 90       	pop	r14
    3762:	bf 90       	pop	r11
    3764:	af 90       	pop	r10
    3766:	9f 90       	pop	r9
    3768:	8f 90       	pop	r8
    376a:	08 95       	ret

0000376c <_ZN5Print5printEmi>:
    376c:	21 15       	cp	r18, r1
    376e:	31 05       	cpc	r19, r1
    3770:	41 f4       	brne	.+16     	; 0x3782 <_ZN5Print5printEmi+0x16>
    3772:	dc 01       	movw	r26, r24
    3774:	ed 91       	ld	r30, X+
    3776:	fc 91       	ld	r31, X
    3778:	01 90       	ld	r0, Z+
    377a:	f0 81       	ld	r31, Z
    377c:	e0 2d       	mov	r30, r0
    377e:	64 2f       	mov	r22, r20
    3780:	09 94       	ijmp
    3782:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <_ZN5Print11printNumberEmh>

00003786 <_ZN5Print5printEhi>:
    3786:	9a 01       	movw	r18, r20
    3788:	46 2f       	mov	r20, r22
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <_ZN5Print5printEmi>

00003794 <_ZN5Print7printlnEhi>:
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	cf 93       	push	r28
    379a:	df 93       	push	r29
    379c:	ec 01       	movw	r28, r24
    379e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN5Print5printEhi>
    37a2:	8c 01       	movw	r16, r24
    37a4:	ce 01       	movw	r24, r28
    37a6:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    37aa:	80 0f       	add	r24, r16
    37ac:	91 1f       	adc	r25, r17
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <_ZN5Print5printEji>:
    37b8:	9a 01       	movw	r18, r20
    37ba:	ab 01       	movw	r20, r22
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	70 e0       	ldi	r23, 0x00	; 0
    37c0:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <_ZN5Print5printEmi>

000037c4 <_ZN5Print7printlnEji>:
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	ec 01       	movw	r28, r24
    37ce:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN5Print5printEji>
    37d2:	8c 01       	movw	r16, r24
    37d4:	ce 01       	movw	r24, r28
    37d6:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    37da:	80 0f       	add	r24, r16
    37dc:	91 1f       	adc	r25, r17
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	08 95       	ret

000037e8 <_ZN5Print7printlnEmi>:
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	ec 01       	movw	r28, r24
    37f2:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN5Print5printEmi>
    37f6:	8c 01       	movw	r16, r24
    37f8:	ce 01       	movw	r24, r28
    37fa:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    37fe:	80 0f       	add	r24, r16
    3800:	91 1f       	adc	r25, r17
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	0f 91       	pop	r16
    380a:	08 95       	ret

0000380c <_ZN5Print5printEli>:
    380c:	cf 92       	push	r12
    380e:	df 92       	push	r13
    3810:	ef 92       	push	r14
    3812:	ff 92       	push	r15
    3814:	0f 93       	push	r16
    3816:	1f 93       	push	r17
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29
    381c:	21 15       	cp	r18, r1
    381e:	31 05       	cpc	r19, r1
    3820:	81 f4       	brne	.+32     	; 0x3842 <_ZN5Print5printEli+0x36>
    3822:	dc 01       	movw	r26, r24
    3824:	ed 91       	ld	r30, X+
    3826:	fc 91       	ld	r31, X
    3828:	01 90       	ld	r0, Z+
    382a:	f0 81       	ld	r31, Z
    382c:	e0 2d       	mov	r30, r0
    382e:	64 2f       	mov	r22, r20
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	09 94       	ijmp
    3842:	2a 30       	cpi	r18, 0x0A	; 10
    3844:	31 05       	cpc	r19, r1
    3846:	01 f5       	brne	.+64     	; 0x3888 <_ZN5Print5printEli+0x7c>
    3848:	77 ff       	sbrs	r23, 7
    384a:	1d c0       	rjmp	.+58     	; 0x3886 <_ZN5Print5printEli+0x7a>
    384c:	6a 01       	movw	r12, r20
    384e:	7b 01       	movw	r14, r22
    3850:	ec 01       	movw	r28, r24
    3852:	6d e2       	ldi	r22, 0x2D	; 45
    3854:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEc>
    3858:	8c 01       	movw	r16, r24
    385a:	44 27       	eor	r20, r20
    385c:	55 27       	eor	r21, r21
    385e:	ba 01       	movw	r22, r20
    3860:	4c 19       	sub	r20, r12
    3862:	5d 09       	sbc	r21, r13
    3864:	6e 09       	sbc	r22, r14
    3866:	7f 09       	sbc	r23, r15
    3868:	2a e0       	ldi	r18, 0x0A	; 10
    386a:	ce 01       	movw	r24, r28
    386c:	0e 94 6d 1b 	call	0x36da	; 0x36da <_ZN5Print11printNumberEmh>
    3870:	80 0f       	add	r24, r16
    3872:	91 1f       	adc	r25, r17
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	1f 91       	pop	r17
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	df 90       	pop	r13
    3882:	cf 90       	pop	r12
    3884:	08 95       	ret
    3886:	2a e0       	ldi	r18, 0x0A	; 10
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	ff 90       	pop	r15
    3892:	ef 90       	pop	r14
    3894:	df 90       	pop	r13
    3896:	cf 90       	pop	r12
    3898:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <_ZN5Print11printNumberEmh>

0000389c <_ZN5Print5printEii>:
    389c:	9a 01       	movw	r18, r20
    389e:	ab 01       	movw	r20, r22
    38a0:	77 0f       	add	r23, r23
    38a2:	66 0b       	sbc	r22, r22
    38a4:	77 0b       	sbc	r23, r23
    38a6:	0c 94 06 1c 	jmp	0x380c	; 0x380c <_ZN5Print5printEli>

000038aa <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    38b4:	0e 94 06 1c 	call	0x380c	; 0x380c <_ZN5Print5printEli>
    38b8:	8c 01       	movw	r16, r24
  n += println();
    38ba:	ce 01       	movw	r24, r28
    38bc:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
  return n;
}
    38c0:	80 0f       	add	r24, r16
    38c2:	91 1f       	adc	r25, r17
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret

000038ce <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    38ce:	1f 92       	push	r1
    38d0:	0f 92       	push	r0
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	0f 92       	push	r0
    38d6:	11 24       	eor	r1, r1
    38d8:	2f 93       	push	r18
    38da:	3f 93       	push	r19
    38dc:	8f 93       	push	r24
    38de:	9f 93       	push	r25
    38e0:	af 93       	push	r26
    38e2:	bf 93       	push	r27
    38e4:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <timer0_millis>
    38e8:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <timer0_millis+0x1>
    38ec:	a0 91 38 08 	lds	r26, 0x0838	; 0x800838 <timer0_millis+0x2>
    38f0:	b0 91 39 08 	lds	r27, 0x0839	; 0x800839 <timer0_millis+0x3>
    38f4:	30 91 35 08 	lds	r19, 0x0835	; 0x800835 <timer0_fract>
    38f8:	23 e0       	ldi	r18, 0x03	; 3
    38fa:	23 0f       	add	r18, r19
    38fc:	2d 37       	cpi	r18, 0x7D	; 125
    38fe:	20 f4       	brcc	.+8      	; 0x3908 <__vector_16+0x3a>
    3900:	01 96       	adiw	r24, 0x01	; 1
    3902:	a1 1d       	adc	r26, r1
    3904:	b1 1d       	adc	r27, r1
    3906:	05 c0       	rjmp	.+10     	; 0x3912 <__vector_16+0x44>
    3908:	26 e8       	ldi	r18, 0x86	; 134
    390a:	23 0f       	add	r18, r19
    390c:	02 96       	adiw	r24, 0x02	; 2
    390e:	a1 1d       	adc	r26, r1
    3910:	b1 1d       	adc	r27, r1
    3912:	20 93 35 08 	sts	0x0835, r18	; 0x800835 <timer0_fract>
    3916:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <timer0_millis>
    391a:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <timer0_millis+0x1>
    391e:	a0 93 38 08 	sts	0x0838, r26	; 0x800838 <timer0_millis+0x2>
    3922:	b0 93 39 08 	sts	0x0839, r27	; 0x800839 <timer0_millis+0x3>
    3926:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <timer0_overflow_count>
    392a:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <timer0_overflow_count+0x1>
    392e:	a0 91 3c 08 	lds	r26, 0x083C	; 0x80083c <timer0_overflow_count+0x2>
    3932:	b0 91 3d 08 	lds	r27, 0x083D	; 0x80083d <timer0_overflow_count+0x3>
    3936:	01 96       	adiw	r24, 0x01	; 1
    3938:	a1 1d       	adc	r26, r1
    393a:	b1 1d       	adc	r27, r1
    393c:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <timer0_overflow_count>
    3940:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <timer0_overflow_count+0x1>
    3944:	a0 93 3c 08 	sts	0x083C, r26	; 0x80083c <timer0_overflow_count+0x2>
    3948:	b0 93 3d 08 	sts	0x083D, r27	; 0x80083d <timer0_overflow_count+0x3>
    394c:	bf 91       	pop	r27
    394e:	af 91       	pop	r26
    3950:	9f 91       	pop	r25
    3952:	8f 91       	pop	r24
    3954:	3f 91       	pop	r19
    3956:	2f 91       	pop	r18
    3958:	0f 90       	pop	r0
    395a:	0f be       	out	0x3f, r0	; 63
    395c:	0f 90       	pop	r0
    395e:	1f 90       	pop	r1
    3960:	18 95       	reti

00003962 <micros>:
    3962:	3f b7       	in	r19, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <timer0_overflow_count>
    396a:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <timer0_overflow_count+0x1>
    396e:	a0 91 3c 08 	lds	r26, 0x083C	; 0x80083c <timer0_overflow_count+0x2>
    3972:	b0 91 3d 08 	lds	r27, 0x083D	; 0x80083d <timer0_overflow_count+0x3>
    3976:	26 b5       	in	r18, 0x26	; 38
    3978:	a8 9b       	sbis	0x15, 0	; 21
    397a:	05 c0       	rjmp	.+10     	; 0x3986 <micros+0x24>
    397c:	2f 3f       	cpi	r18, 0xFF	; 255
    397e:	19 f0       	breq	.+6      	; 0x3986 <micros+0x24>
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	a1 1d       	adc	r26, r1
    3984:	b1 1d       	adc	r27, r1
    3986:	3f bf       	out	0x3f, r19	; 63
    3988:	ba 2f       	mov	r27, r26
    398a:	a9 2f       	mov	r26, r25
    398c:	98 2f       	mov	r25, r24
    398e:	88 27       	eor	r24, r24
    3990:	82 0f       	add	r24, r18
    3992:	91 1d       	adc	r25, r1
    3994:	a1 1d       	adc	r26, r1
    3996:	b1 1d       	adc	r27, r1
    3998:	bc 01       	movw	r22, r24
    399a:	cd 01       	movw	r24, r26
    399c:	42 e0       	ldi	r20, 0x02	; 2
    399e:	66 0f       	add	r22, r22
    39a0:	77 1f       	adc	r23, r23
    39a2:	88 1f       	adc	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	4a 95       	dec	r20
    39a8:	d1 f7       	brne	.-12     	; 0x399e <micros+0x3c>
    39aa:	08 95       	ret

000039ac <delay>:
    39ac:	8f 92       	push	r8
    39ae:	9f 92       	push	r9
    39b0:	af 92       	push	r10
    39b2:	bf 92       	push	r11
    39b4:	cf 92       	push	r12
    39b6:	df 92       	push	r13
    39b8:	ef 92       	push	r14
    39ba:	ff 92       	push	r15
    39bc:	6b 01       	movw	r12, r22
    39be:	7c 01       	movw	r14, r24
    39c0:	0e 94 b1 1c 	call	0x3962	; 0x3962 <micros>
    39c4:	4b 01       	movw	r8, r22
    39c6:	5c 01       	movw	r10, r24
    39c8:	c1 14       	cp	r12, r1
    39ca:	d1 04       	cpc	r13, r1
    39cc:	e1 04       	cpc	r14, r1
    39ce:	f1 04       	cpc	r15, r1
    39d0:	01 f1       	breq	.+64     	; 0x3a12 <delay+0x66>
    39d2:	0e 94 75 2b 	call	0x56ea	; 0x56ea <yield>
    39d6:	0e 94 b1 1c 	call	0x3962	; 0x3962 <micros>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	88 19       	sub	r24, r8
    39e0:	99 09       	sbc	r25, r9
    39e2:	aa 09       	sbc	r26, r10
    39e4:	bb 09       	sbc	r27, r11
    39e6:	88 3e       	cpi	r24, 0xE8	; 232
    39e8:	93 40       	sbci	r25, 0x03	; 3
    39ea:	a1 05       	cpc	r26, r1
    39ec:	b1 05       	cpc	r27, r1
    39ee:	60 f3       	brcs	.-40     	; 0x39c8 <delay+0x1c>
    39f0:	21 e0       	ldi	r18, 0x01	; 1
    39f2:	c2 1a       	sub	r12, r18
    39f4:	d1 08       	sbc	r13, r1
    39f6:	e1 08       	sbc	r14, r1
    39f8:	f1 08       	sbc	r15, r1
    39fa:	88 ee       	ldi	r24, 0xE8	; 232
    39fc:	88 0e       	add	r8, r24
    39fe:	83 e0       	ldi	r24, 0x03	; 3
    3a00:	98 1e       	adc	r9, r24
    3a02:	a1 1c       	adc	r10, r1
    3a04:	b1 1c       	adc	r11, r1
    3a06:	c1 14       	cp	r12, r1
    3a08:	d1 04       	cpc	r13, r1
    3a0a:	e1 04       	cpc	r14, r1
    3a0c:	f1 04       	cpc	r15, r1
    3a0e:	19 f7       	brne	.-58     	; 0x39d6 <delay+0x2a>
    3a10:	db cf       	rjmp	.-74     	; 0x39c8 <delay+0x1c>
    3a12:	ff 90       	pop	r15
    3a14:	ef 90       	pop	r14
    3a16:	df 90       	pop	r13
    3a18:	cf 90       	pop	r12
    3a1a:	bf 90       	pop	r11
    3a1c:	af 90       	pop	r10
    3a1e:	9f 90       	pop	r9
    3a20:	8f 90       	pop	r8
    3a22:	08 95       	ret

00003a24 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3a24:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3a26:	84 b5       	in	r24, 0x24	; 36
    3a28:	82 60       	ori	r24, 0x02	; 2
    3a2a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3a2c:	84 b5       	in	r24, 0x24	; 36
    3a2e:	81 60       	ori	r24, 0x01	; 1
    3a30:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3a32:	85 b5       	in	r24, 0x25	; 37
    3a34:	82 60       	ori	r24, 0x02	; 2
    3a36:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3a38:	85 b5       	in	r24, 0x25	; 37
    3a3a:	81 60       	ori	r24, 0x01	; 1
    3a3c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3a3e:	ee e6       	ldi	r30, 0x6E	; 110
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	81 60       	ori	r24, 0x01	; 1
    3a46:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3a48:	e1 e8       	ldi	r30, 0x81	; 129
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3a4e:	80 81       	ld	r24, Z
    3a50:	82 60       	ori	r24, 0x02	; 2
    3a52:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3a54:	80 81       	ld	r24, Z
    3a56:	81 60       	ori	r24, 0x01	; 1
    3a58:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3a5a:	e0 e8       	ldi	r30, 0x80	; 128
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	80 81       	ld	r24, Z
    3a60:	81 60       	ori	r24, 0x01	; 1
    3a62:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3a64:	e1 eb       	ldi	r30, 0xB1	; 177
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	80 81       	ld	r24, Z
    3a6a:	84 60       	ori	r24, 0x04	; 4
    3a6c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3a6e:	e0 eb       	ldi	r30, 0xB0	; 176
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	81 60       	ori	r24, 0x01	; 1
    3a76:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3a78:	ea e7       	ldi	r30, 0x7A	; 122
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	84 60       	ori	r24, 0x04	; 4
    3a80:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3a82:	80 81       	ld	r24, Z
    3a84:	82 60       	ori	r24, 0x02	; 2
    3a86:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3a88:	80 81       	ld	r24, Z
    3a8a:	81 60       	ori	r24, 0x01	; 1
    3a8c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3a8e:	80 81       	ld	r24, Z
    3a90:	80 68       	ori	r24, 0x80	; 128
    3a92:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3a94:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3a98:	08 95       	ret

00003a9a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3a9a:	8e 30       	cpi	r24, 0x0E	; 14
    3a9c:	08 f0       	brcs	.+2      	; 0x3aa0 <analogRead+0x6>
    3a9e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3aa0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <analog_reference>
    3aa4:	90 e4       	ldi	r25, 0x40	; 64
    3aa6:	29 9f       	mul	r18, r25
    3aa8:	90 01       	movw	r18, r0
    3aaa:	11 24       	eor	r1, r1
    3aac:	87 70       	andi	r24, 0x07	; 7
    3aae:	82 2b       	or	r24, r18
    3ab0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3ab4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3ab8:	80 64       	ori	r24, 0x40	; 64
    3aba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3abe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3ac2:	86 fd       	sbrc	r24, 6
    3ac4:	fc cf       	rjmp	.-8      	; 0x3abe <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3ac6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    3aca:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3ace:	90 e0       	ldi	r25, 0x00	; 0
}
    3ad0:	92 2b       	or	r25, r18
    3ad2:	08 95       	ret

00003ad4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3ad4:	83 30       	cpi	r24, 0x03	; 3
    3ad6:	81 f0       	breq	.+32     	; 0x3af8 <turnOffPWM+0x24>
    3ad8:	28 f4       	brcc	.+10     	; 0x3ae4 <turnOffPWM+0x10>
    3ada:	81 30       	cpi	r24, 0x01	; 1
    3adc:	99 f0       	breq	.+38     	; 0x3b04 <turnOffPWM+0x30>
    3ade:	82 30       	cpi	r24, 0x02	; 2
    3ae0:	a1 f0       	breq	.+40     	; 0x3b0a <turnOffPWM+0x36>
    3ae2:	08 95       	ret
    3ae4:	87 30       	cpi	r24, 0x07	; 7
    3ae6:	a9 f0       	breq	.+42     	; 0x3b12 <turnOffPWM+0x3e>
    3ae8:	88 30       	cpi	r24, 0x08	; 8
    3aea:	b9 f0       	breq	.+46     	; 0x3b1a <turnOffPWM+0x46>
    3aec:	84 30       	cpi	r24, 0x04	; 4
    3aee:	d1 f4       	brne	.+52     	; 0x3b24 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3af0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3af4:	8f 7d       	andi	r24, 0xDF	; 223
    3af6:	03 c0       	rjmp	.+6      	; 0x3afe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3af8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3afc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3afe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3b02:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3b04:	84 b5       	in	r24, 0x24	; 36
    3b06:	8f 77       	andi	r24, 0x7F	; 127
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3b0a:	84 b5       	in	r24, 0x24	; 36
    3b0c:	8f 7d       	andi	r24, 0xDF	; 223
    3b0e:	84 bd       	out	0x24, r24	; 36
    3b10:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3b12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3b16:	8f 77       	andi	r24, 0x7F	; 127
    3b18:	03 c0       	rjmp	.+6      	; 0x3b20 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3b1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3b1e:	8f 7d       	andi	r24, 0xDF	; 223
    3b20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3b24:	08 95       	ret

00003b26 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	e2 5e       	subi	r30, 0xE2	; 226
    3b30:	fc 4f       	sbci	r31, 0xFC	; 252
    3b32:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3b34:	fc 01       	movw	r30, r24
    3b36:	ee 5c       	subi	r30, 0xCE	; 206
    3b38:	fc 4f       	sbci	r31, 0xFC	; 252
    3b3a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3b3c:	88 23       	and	r24, r24
    3b3e:	61 f1       	breq	.+88     	; 0x3b98 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	fc 01       	movw	r30, r24
    3b48:	e6 5a       	subi	r30, 0xA6	; 166
    3b4a:	fc 4f       	sbci	r31, 0xFC	; 252
    3b4c:	c5 91       	lpm	r28, Z+
    3b4e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3b50:	fc 01       	movw	r30, r24
    3b52:	e0 5b       	subi	r30, 0xB0	; 176
    3b54:	fc 4f       	sbci	r31, 0xFC	; 252
    3b56:	a5 91       	lpm	r26, Z+
    3b58:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3b5a:	61 11       	cpse	r22, r1
    3b5c:	09 c0       	rjmp	.+18     	; 0x3b70 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3b5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b60:	f8 94       	cli
		*reg &= ~bit;
    3b62:	88 81       	ld	r24, Y
    3b64:	20 95       	com	r18
    3b66:	82 23       	and	r24, r18
    3b68:	88 83       	st	Y, r24
		*out &= ~bit;
    3b6a:	ec 91       	ld	r30, X
    3b6c:	2e 23       	and	r18, r30
    3b6e:	0b c0       	rjmp	.+22     	; 0x3b86 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3b70:	62 30       	cpi	r22, 0x02	; 2
    3b72:	61 f4       	brne	.+24     	; 0x3b8c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3b74:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3b76:	f8 94       	cli
		*reg &= ~bit;
    3b78:	88 81       	ld	r24, Y
    3b7a:	32 2f       	mov	r19, r18
    3b7c:	30 95       	com	r19
    3b7e:	83 23       	and	r24, r19
    3b80:	88 83       	st	Y, r24
		*out |= bit;
    3b82:	ec 91       	ld	r30, X
    3b84:	2e 2b       	or	r18, r30
    3b86:	2c 93       	st	X, r18
		SREG = oldSREG;
    3b88:	9f bf       	out	0x3f, r25	; 63
    3b8a:	06 c0       	rjmp	.+12     	; 0x3b98 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3b8c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3b8e:	f8 94       	cli
		*reg |= bit;
    3b90:	e8 81       	ld	r30, Y
    3b92:	2e 2b       	or	r18, r30
    3b94:	28 83       	st	Y, r18
		SREG = oldSREG;
    3b96:	8f bf       	out	0x3f, r24	; 63
	}
}
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	08 95       	ret

00003b9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3b9e:	1f 93       	push	r17
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3ba4:	28 2f       	mov	r18, r24
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	f9 01       	movw	r30, r18
    3baa:	e6 5f       	subi	r30, 0xF6	; 246
    3bac:	fc 4f       	sbci	r31, 0xFC	; 252
    3bae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3bb0:	f9 01       	movw	r30, r18
    3bb2:	e2 5e       	subi	r30, 0xE2	; 226
    3bb4:	fc 4f       	sbci	r31, 0xFC	; 252
    3bb6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3bb8:	f9 01       	movw	r30, r18
    3bba:	ee 5c       	subi	r30, 0xCE	; 206
    3bbc:	fc 4f       	sbci	r31, 0xFC	; 252
    3bbe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3bc0:	cc 23       	and	r28, r28
    3bc2:	c1 f0       	breq	.+48     	; 0x3bf4 <digitalWrite+0x56>
    3bc4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3bc6:	81 11       	cpse	r24, r1
    3bc8:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <turnOffPWM>

	out = portOutputRegister(port);
    3bcc:	ec 2f       	mov	r30, r28
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	ee 0f       	add	r30, r30
    3bd2:	ff 1f       	adc	r31, r31
    3bd4:	e0 5b       	subi	r30, 0xB0	; 176
    3bd6:	fc 4f       	sbci	r31, 0xFC	; 252
    3bd8:	a5 91       	lpm	r26, Z+
    3bda:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3bdc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3bde:	f8 94       	cli

	if (val == LOW) {
    3be0:	11 11       	cpse	r17, r1
    3be2:	04 c0       	rjmp	.+8      	; 0x3bec <digitalWrite+0x4e>
		*out &= ~bit;
    3be4:	8c 91       	ld	r24, X
    3be6:	d0 95       	com	r29
    3be8:	d8 23       	and	r29, r24
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3bec:	ec 91       	ld	r30, X
    3bee:	de 2b       	or	r29, r30
    3bf0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3bf2:	9f bf       	out	0x3f, r25	; 63
}
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    3bf8:	1f 91       	pop	r17
    3bfa:	08 95       	ret

00003bfc <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
    3bfc:	88 5e       	subi	r24, 0xE8	; 232
    3bfe:	9e 4f       	sbci	r25, 0xFE	; 254
    3c00:	dc 01       	movw	r26, r24
    3c02:	8d 91       	ld	r24, X+
    3c04:	9c 91       	ld	r25, X
    3c06:	dc 01       	movw	r26, r24
    3c08:	ed 91       	ld	r30, X+
    3c0a:	fc 91       	ld	r31, X
    3c0c:	04 80       	ldd	r0, Z+4	; 0x04
    3c0e:	f5 81       	ldd	r31, Z+5	; 0x05
    3c10:	e0 2d       	mov	r30, r0
    3c12:	09 94       	ijmp

00003c14 <_ZN13Adafruit_FONA5writeEh>:
    3c14:	88 5e       	subi	r24, 0xE8	; 232
    3c16:	9e 4f       	sbci	r25, 0xFE	; 254
    3c18:	dc 01       	movw	r26, r24
    3c1a:	8d 91       	ld	r24, X+
    3c1c:	9c 91       	ld	r25, X
    3c1e:	dc 01       	movw	r26, r24
    3c20:	ed 91       	ld	r30, X+
    3c22:	fc 91       	ld	r31, X
    3c24:	01 90       	ld	r0, Z+
    3c26:	f0 81       	ld	r31, Z
    3c28:	e0 2d       	mov	r30, r0
    3c2a:	09 94       	ijmp

00003c2c <_ZN13Adafruit_FONA4readEv>:
    3c2c:	88 5e       	subi	r24, 0xE8	; 232
    3c2e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c30:	dc 01       	movw	r26, r24
    3c32:	8d 91       	ld	r24, X+
    3c34:	9c 91       	ld	r25, X
    3c36:	dc 01       	movw	r26, r24
    3c38:	ed 91       	ld	r30, X+
    3c3a:	fc 91       	ld	r31, X
    3c3c:	06 80       	ldd	r0, Z+6	; 0x06
    3c3e:	f7 81       	ldd	r31, Z+7	; 0x07
    3c40:	e0 2d       	mov	r30, r0
    3c42:	09 94       	ijmp

00003c44 <_ZN13Adafruit_FONA4peekEv>:
    3c44:	88 5e       	subi	r24, 0xE8	; 232
    3c46:	9e 4f       	sbci	r25, 0xFE	; 254
    3c48:	dc 01       	movw	r26, r24
    3c4a:	8d 91       	ld	r24, X+
    3c4c:	9c 91       	ld	r25, X
    3c4e:	dc 01       	movw	r26, r24
    3c50:	ed 91       	ld	r30, X+
    3c52:	fc 91       	ld	r31, X
    3c54:	00 84       	ldd	r0, Z+8	; 0x08
    3c56:	f1 85       	ldd	r31, Z+9	; 0x09
    3c58:	e0 2d       	mov	r30, r0
    3c5a:	09 94       	ijmp

00003c5c <_ZN13Adafruit_FONA5flushEv>:
    3c5c:	88 5e       	subi	r24, 0xE8	; 232
    3c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c60:	dc 01       	movw	r26, r24
    3c62:	8d 91       	ld	r24, X+
    3c64:	9c 91       	ld	r25, X
    3c66:	dc 01       	movw	r26, r24
    3c68:	ed 91       	ld	r30, X+
    3c6a:	fc 91       	ld	r31, X
    3c6c:	02 84       	ldd	r0, Z+10	; 0x0a
    3c6e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c70:	e0 2d       	mov	r30, r0
    3c72:	09 94       	ijmp

00003c74 <_ZN13Adafruit_FONAC1Ea>:
    3c74:	fc 01       	movw	r30, r24
    3c76:	13 82       	std	Z+3, r1	; 0x03
    3c78:	12 82       	std	Z+2, r1	; 0x02
    3c7a:	88 ee       	ldi	r24, 0xE8	; 232
    3c7c:	93 e0       	ldi	r25, 0x03	; 3
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	84 83       	std	Z+4, r24	; 0x04
    3c84:	95 83       	std	Z+5, r25	; 0x05
    3c86:	a6 83       	std	Z+6, r26	; 0x06
    3c88:	b7 83       	std	Z+7, r27	; 0x07
    3c8a:	86 e5       	ldi	r24, 0x56	; 86
    3c8c:	93 e0       	ldi	r25, 0x03	; 3
    3c8e:	91 83       	std	Z+1, r25	; 0x01
    3c90:	80 83       	st	Z, r24
    3c92:	64 87       	std	Z+12, r22	; 0x0c
    3c94:	df 01       	movw	r26, r30
    3c96:	a3 5f       	subi	r26, 0xF3	; 243
    3c98:	be 4f       	sbci	r27, 0xFE	; 254
    3c9a:	84 ec       	ldi	r24, 0xC4	; 196
    3c9c:	96 e0       	ldi	r25, 0x06	; 6
    3c9e:	11 96       	adiw	r26, 0x01	; 1
    3ca0:	9c 93       	st	X, r25
    3ca2:	8e 93       	st	-X, r24
    3ca4:	12 96       	adiw	r26, 0x02	; 2
    3ca6:	11 96       	adiw	r26, 0x01	; 1
    3ca8:	1c 92       	st	X, r1
    3caa:	1e 92       	st	-X, r1
    3cac:	12 96       	adiw	r26, 0x02	; 2
    3cae:	11 96       	adiw	r26, 0x01	; 1
    3cb0:	1c 92       	st	X, r1
    3cb2:	1e 92       	st	-X, r1
    3cb4:	17 96       	adiw	r26, 0x07	; 7
    3cb6:	11 96       	adiw	r26, 0x01	; 1
    3cb8:	1c 92       	st	X, r1
    3cba:	1e 92       	st	-X, r1
    3cbc:	15 97       	sbiw	r26, 0x05	; 5
    3cbe:	1c 92       	st	X, r1
    3cc0:	11 96       	adiw	r26, 0x01	; 1
    3cc2:	8f eb       	ldi	r24, 0xBF	; 191
    3cc4:	96 e0       	ldi	r25, 0x06	; 6
    3cc6:	8d 93       	st	X+, r24
    3cc8:	9c 93       	st	X, r25
    3cca:	ea 5e       	subi	r30, 0xEA	; 234
    3ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cce:	8c eb       	ldi	r24, 0xBC	; 188
    3cd0:	96 e0       	ldi	r25, 0x06	; 6
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
    3cd6:	08 95       	ret

00003cd8 <_ZN13Adafruit_FONA22setGPRSNetworkSettingsEPK19__FlashStringHelperS2_S2_>:
    3cd8:	fc 01       	movw	r30, r24
    3cda:	e3 5f       	subi	r30, 0xF3	; 243
    3cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cde:	71 83       	std	Z+1, r23	; 0x01
    3ce0:	60 83       	st	Z, r22
    3ce2:	32 96       	adiw	r30, 0x02	; 2
    3ce4:	51 83       	std	Z+1, r21	; 0x01
    3ce6:	40 83       	st	Z, r20
    3ce8:	32 96       	adiw	r30, 0x02	; 2
    3cea:	31 83       	std	Z+1, r19	; 0x01
    3cec:	20 83       	st	Z, r18
    3cee:	08 95       	ret

00003cf0 <_ZN13Adafruit_FONA10flushInputEv>:
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	ec 01       	movw	r28, r24
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	8c 01       	movw	r16, r24
    3d00:	0f 5f       	subi	r16, 0xFF	; 255
    3d02:	1f 4f       	sbci	r17, 0xFF	; 255
    3d04:	88 97       	sbiw	r24, 0x28	; 40
    3d06:	d8 f4       	brcc	.+54     	; 0x3d3e <_ZN13Adafruit_FONA10flushInputEv+0x4e>
    3d08:	e8 81       	ld	r30, Y
    3d0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d0c:	04 80       	ldd	r0, Z+4	; 0x04
    3d0e:	f5 81       	ldd	r31, Z+5	; 0x05
    3d10:	e0 2d       	mov	r30, r0
    3d12:	ce 01       	movw	r24, r28
    3d14:	09 95       	icall
    3d16:	89 2b       	or	r24, r25
    3d18:	51 f0       	breq	.+20     	; 0x3d2e <_ZN13Adafruit_FONA10flushInputEv+0x3e>
    3d1a:	e8 81       	ld	r30, Y
    3d1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d1e:	06 80       	ldd	r0, Z+6	; 0x06
    3d20:	f7 81       	ldd	r31, Z+7	; 0x07
    3d22:	e0 2d       	mov	r30, r0
    3d24:	ce 01       	movw	r24, r28
    3d26:	09 95       	icall
    3d28:	00 e0       	ldi	r16, 0x00	; 0
    3d2a:	10 e0       	ldi	r17, 0x00	; 0
    3d2c:	ed cf       	rjmp	.-38     	; 0x3d08 <_ZN13Adafruit_FONA10flushInputEv+0x18>
    3d2e:	61 e0       	ldi	r22, 0x01	; 1
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    3d3a:	c8 01       	movw	r24, r16
    3d3c:	e0 cf       	rjmp	.-64     	; 0x3cfe <_ZN13Adafruit_FONA10flushInputEv+0xe>
    3d3e:	df 91       	pop	r29
    3d40:	cf 91       	pop	r28
    3d42:	1f 91       	pop	r17
    3d44:	0f 91       	pop	r16
    3d46:	08 95       	ret

00003d48 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
    3d48:	ff 92       	push	r15
    3d4a:	0f 93       	push	r16
    3d4c:	1f 93       	push	r17
    3d4e:	cf 93       	push	r28
    3d50:	df 93       	push	r29
    3d52:	ec 01       	movw	r28, r24
    3d54:	8b 01       	movw	r16, r22
    3d56:	f4 2e       	mov	r15, r20
    3d58:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    3d5c:	62 e7       	ldi	r22, 0x72	; 114
    3d5e:	74 e0       	ldi	r23, 0x04	; 4
    3d60:	88 e9       	ldi	r24, 0x98	; 152
    3d62:	97 e0       	ldi	r25, 0x07	; 7
    3d64:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3d68:	64 e6       	ldi	r22, 0x64	; 100
    3d6a:	74 e0       	ldi	r23, 0x04	; 4
    3d6c:	88 e9       	ldi	r24, 0x98	; 152
    3d6e:	97 e0       	ldi	r25, 0x07	; 7
    3d70:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3d74:	b8 01       	movw	r22, r16
    3d76:	88 e9       	ldi	r24, 0x98	; 152
    3d78:	97 e0       	ldi	r25, 0x07	; 7
    3d7a:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3d7e:	62 e2       	ldi	r22, 0x22	; 34
    3d80:	88 e9       	ldi	r24, 0x98	; 152
    3d82:	97 e0       	ldi	r25, 0x07	; 7
    3d84:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print7printlnEc>
    3d88:	c8 5e       	subi	r28, 0xE8	; 232
    3d8a:	de 4f       	sbci	r29, 0xFE	; 254
    3d8c:	66 e5       	ldi	r22, 0x56	; 86
    3d8e:	74 e0       	ldi	r23, 0x04	; 4
    3d90:	88 81       	ld	r24, Y
    3d92:	99 81       	ldd	r25, Y+1	; 0x01
    3d94:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3d98:	b8 01       	movw	r22, r16
    3d9a:	88 81       	ld	r24, Y
    3d9c:	99 81       	ldd	r25, Y+1	; 0x01
    3d9e:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3da2:	88 81       	ld	r24, Y
    3da4:	99 81       	ldd	r25, Y+1	; 0x01
    3da6:	ff 20       	and	r15, r15
    3da8:	19 f0       	breq	.+6      	; 0x3db0 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
    3daa:	62 e5       	ldi	r22, 0x52	; 82
    3dac:	74 e0       	ldi	r23, 0x04	; 4
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
    3db0:	6f e4       	ldi	r22, 0x4F	; 79
    3db2:	74 e0       	ldi	r23, 0x04	; 4
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	ff 90       	pop	r15
    3dbe:	0c 94 06 1b 	jmp	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>

00003dc2 <_ZN13Adafruit_FONA8readlineEjb>:
    3dc2:	9f 92       	push	r9
    3dc4:	af 92       	push	r10
    3dc6:	bf 92       	push	r11
    3dc8:	cf 92       	push	r12
    3dca:	df 92       	push	r13
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	7c 01       	movw	r14, r24
    3dda:	94 2e       	mov	r9, r20
    3ddc:	8b 01       	movw	r16, r22
    3dde:	00 0f       	add	r16, r16
    3de0:	11 1f       	adc	r17, r17
    3de2:	00 0f       	add	r16, r16
    3de4:	11 1f       	adc	r17, r17
    3de6:	c0 e0       	ldi	r28, 0x00	; 0
    3de8:	d0 e0       	ldi	r29, 0x00	; 0
    3dea:	57 01       	movw	r10, r14
    3dec:	88 ee       	ldi	r24, 0xE8	; 232
    3dee:	a8 1a       	sub	r10, r24
    3df0:	8e ef       	ldi	r24, 0xFE	; 254
    3df2:	b8 0a       	sbc	r11, r24
    3df4:	01 15       	cp	r16, r1
    3df6:	11 05       	cpc	r17, r1
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <_ZN13Adafruit_FONA8readlineEjb+0x3a>
    3dfa:	50 c0       	rjmp	.+160    	; 0x3e9c <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3dfc:	ce 3f       	cpi	r28, 0xFE	; 254
    3dfe:	d1 05       	cpc	r29, r1
    3e00:	80 f0       	brcs	.+32     	; 0x3e22 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3e02:	64 ea       	ldi	r22, 0xA4	; 164
    3e04:	73 e0       	ldi	r23, 0x03	; 3
    3e06:	22 c0       	rjmp	.+68     	; 0x3e4c <_ZN13Adafruit_FONA8readlineEjb+0x8a>
    3e08:	f5 01       	movw	r30, r10
    3e0a:	80 81       	ld	r24, Z
    3e0c:	91 81       	ldd	r25, Z+1	; 0x01
    3e0e:	dc 01       	movw	r26, r24
    3e10:	ed 91       	ld	r30, X+
    3e12:	fc 91       	ld	r31, X
    3e14:	06 80       	ldd	r0, Z+6	; 0x06
    3e16:	f7 81       	ldd	r31, Z+7	; 0x07
    3e18:	e0 2d       	mov	r30, r0
    3e1a:	09 95       	icall
    3e1c:	6c 01       	movw	r12, r24
    3e1e:	8d 30       	cpi	r24, 0x0D	; 13
    3e20:	69 f4       	brne	.+26     	; 0x3e3c <_ZN13Adafruit_FONA8readlineEjb+0x7a>
    3e22:	d5 01       	movw	r26, r10
    3e24:	8d 91       	ld	r24, X+
    3e26:	9c 91       	ld	r25, X
    3e28:	dc 01       	movw	r26, r24
    3e2a:	ed 91       	ld	r30, X+
    3e2c:	fc 91       	ld	r31, X
    3e2e:	04 80       	ldd	r0, Z+4	; 0x04
    3e30:	f5 81       	ldd	r31, Z+5	; 0x05
    3e32:	e0 2d       	mov	r30, r0
    3e34:	09 95       	icall
    3e36:	89 2b       	or	r24, r25
    3e38:	39 f7       	brne	.-50     	; 0x3e08 <_ZN13Adafruit_FONA8readlineEjb+0x46>
    3e3a:	26 c0       	rjmp	.+76     	; 0x3e88 <_ZN13Adafruit_FONA8readlineEjb+0xc6>
    3e3c:	8a 30       	cpi	r24, 0x0A	; 10
    3e3e:	59 f4       	brne	.+22     	; 0x3e56 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3e40:	20 97       	sbiw	r28, 0x00	; 0
    3e42:	79 f3       	breq	.-34     	; 0x3e22 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3e44:	91 10       	cpse	r9, r1
    3e46:	07 c0       	rjmp	.+14     	; 0x3e56 <_ZN13Adafruit_FONA8readlineEjb+0x94>
    3e48:	6c e9       	ldi	r22, 0x9C	; 156
    3e4a:	73 e0       	ldi	r23, 0x03	; 3
    3e4c:	88 e9       	ldi	r24, 0x98	; 152
    3e4e:	97 e0       	ldi	r25, 0x07	; 7
    3e50:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>
    3e54:	23 c0       	rjmp	.+70     	; 0x3e9c <_ZN13Adafruit_FONA8readlineEjb+0xda>
    3e56:	f7 01       	movw	r30, r14
    3e58:	ec 0f       	add	r30, r28
    3e5a:	fd 1f       	adc	r31, r29
    3e5c:	c6 86       	std	Z+14, r12	; 0x0e
    3e5e:	b6 01       	movw	r22, r12
    3e60:	77 27       	eor	r23, r23
    3e62:	40 e1       	ldi	r20, 0x10	; 16
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	88 e9       	ldi	r24, 0x98	; 152
    3e68:	97 e0       	ldi	r25, 0x07	; 7
    3e6a:	0e 94 4e 1c 	call	0x389c	; 0x389c <_ZN5Print5printEii>
    3e6e:	69 ef       	ldi	r22, 0xF9	; 249
    3e70:	72 e0       	ldi	r23, 0x02	; 2
    3e72:	88 e9       	ldi	r24, 0x98	; 152
    3e74:	97 e0       	ldi	r25, 0x07	; 7
    3e76:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    3e7a:	6c 2d       	mov	r22, r12
    3e7c:	88 e9       	ldi	r24, 0x98	; 152
    3e7e:	97 e0       	ldi	r25, 0x07	; 7
    3e80:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print7printlnEc>
    3e84:	21 96       	adiw	r28, 0x01	; 1
    3e86:	cd cf       	rjmp	.-102    	; 0x3e22 <_ZN13Adafruit_FONA8readlineEjb+0x60>
    3e88:	01 50       	subi	r16, 0x01	; 1
    3e8a:	11 09       	sbc	r17, r1
    3e8c:	e9 f2       	breq	.-70     	; 0x3e48 <_ZN13Adafruit_FONA8readlineEjb+0x86>
    3e8e:	61 e0       	ldi	r22, 0x01	; 1
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    3e9a:	ac cf       	rjmp	.-168    	; 0x3df4 <_ZN13Adafruit_FONA8readlineEjb+0x32>
    3e9c:	f7 01       	movw	r30, r14
    3e9e:	ec 0f       	add	r30, r28
    3ea0:	fd 1f       	adc	r31, r29
    3ea2:	16 86       	std	Z+14, r1	; 0x0e
    3ea4:	8c 2f       	mov	r24, r28
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	1f 91       	pop	r17
    3eac:	0f 91       	pop	r16
    3eae:	ff 90       	pop	r15
    3eb0:	ef 90       	pop	r14
    3eb2:	df 90       	pop	r13
    3eb4:	cf 90       	pop	r12
    3eb6:	bf 90       	pop	r11
    3eb8:	af 90       	pop	r10
    3eba:	9f 90       	pop	r9
    3ebc:	08 95       	ret

00003ebe <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
    3ebe:	0f 93       	push	r16
    3ec0:	1f 93       	push	r17
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	ec 01       	movw	r28, r24
    3ec8:	8b 01       	movw	r16, r22
    3eca:	ba 01       	movw	r22, r20
    3ecc:	40 e0       	ldi	r20, 0x00	; 0
    3ece:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    3ed2:	6a ea       	ldi	r22, 0xAA	; 170
    3ed4:	73 e0       	ldi	r23, 0x03	; 3
    3ed6:	88 e9       	ldi	r24, 0x98	; 152
    3ed8:	97 e0       	ldi	r25, 0x07	; 7
    3eda:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3ede:	2e 96       	adiw	r28, 0x0e	; 14
    3ee0:	be 01       	movw	r22, r28
    3ee2:	88 e9       	ldi	r24, 0x98	; 152
    3ee4:	97 e0       	ldi	r25, 0x07	; 7
    3ee6:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    3eea:	b8 01       	movw	r22, r16
    3eec:	ce 01       	movw	r24, r28
    3eee:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <strcmp_P>
    3ef2:	21 e0       	ldi	r18, 0x01	; 1
    3ef4:	89 2b       	or	r24, r25
    3ef6:	09 f0       	breq	.+2      	; 0x3efa <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	82 2f       	mov	r24, r18
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	1f 91       	pop	r17
    3f02:	0f 91       	pop	r16
    3f04:	08 95       	ret

00003f06 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
    3f06:	cf 93       	push	r28
    3f08:	df 93       	push	r29
    3f0a:	ec 01       	movw	r28, r24
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e8 5e       	subi	r30, 0xE8	; 232
    3f10:	fe 4f       	sbci	r31, 0xFE	; 254
    3f12:	66 23       	and	r22, r22
    3f14:	31 f0       	breq	.+12     	; 0x3f22 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
    3f16:	62 e2       	ldi	r22, 0x22	; 34
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print7printlnEc>
    3f20:	04 c0       	rjmp	.+8      	; 0x3f2a <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
    3f22:	80 81       	ld	r24, Z
    3f24:	91 81       	ldd	r25, Z+1	; 0x01
    3f26:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	ea 5e       	subi	r30, 0xEA	; 234
    3f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f30:	60 81       	ld	r22, Z
    3f32:	71 81       	ldd	r23, Z+1	; 0x01
    3f34:	40 e1       	ldi	r20, 0x10	; 16
    3f36:	57 e2       	ldi	r21, 0x27	; 39
    3f38:	ce 01       	movw	r24, r28
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00003f42 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
    3f42:	0f 93       	push	r16
    3f44:	1f 93       	push	r17
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	ec 01       	movw	r28, r24
    3f4c:	8a 01       	movw	r16, r20
    3f4e:	41 e0       	ldi	r20, 0x01	; 1
    3f50:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3f54:	fe 01       	movw	r30, r28
    3f56:	e8 5e       	subi	r30, 0xE8	; 232
    3f58:	fe 4f       	sbci	r31, 0xFE	; 254
    3f5a:	b8 01       	movw	r22, r16
    3f5c:	80 81       	ld	r24, Z
    3f5e:	91 81       	ldd	r25, Z+1	; 0x01
    3f60:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    3f64:	61 e0       	ldi	r22, 0x01	; 1
    3f66:	ce 01       	movw	r24, r28
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003f74 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	ec 01       	movw	r28, r24
    3f7e:	8a 01       	movw	r16, r20
    3f80:	41 e0       	ldi	r20, 0x01	; 1
    3f82:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3f86:	fe 01       	movw	r30, r28
    3f88:	e8 5e       	subi	r30, 0xE8	; 232
    3f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8c:	b8 01       	movw	r22, r16
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    3f96:	61 e0       	ldi	r22, 0x01	; 1
    3f98:	ce 01       	movw	r24, r28
    3f9a:	df 91       	pop	r29
    3f9c:	cf 91       	pop	r28
    3f9e:	1f 91       	pop	r17
    3fa0:	0f 91       	pop	r16
    3fa2:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003fa6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
    3fa6:	cf 92       	push	r12
    3fa8:	df 92       	push	r13
    3faa:	ef 92       	push	r14
    3fac:	ff 92       	push	r15
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	ec 01       	movw	r28, r24
    3fb4:	69 01       	movw	r12, r18
    3fb6:	7a 01       	movw	r14, r20
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e8 5e       	subi	r30, 0xE8	; 232
    3fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc4:	2a e0       	ldi	r18, 0x0A	; 10
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	b7 01       	movw	r22, r14
    3fca:	a6 01       	movw	r20, r12
    3fcc:	80 81       	ld	r24, Z
    3fce:	91 81       	ldd	r25, Z+1	; 0x01
    3fd0:	0e 94 06 1c 	call	0x380c	; 0x380c <_ZN5Print5printEli>
    3fd4:	60 e0       	ldi	r22, 0x00	; 0
    3fd6:	ce 01       	movw	r24, r28
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	ff 90       	pop	r15
    3fde:	ef 90       	pop	r14
    3fe0:	df 90       	pop	r13
    3fe2:	cf 90       	pop	r12
    3fe4:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00003fe8 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
    3fe8:	4f 92       	push	r4
    3fea:	5f 92       	push	r5
    3fec:	6f 92       	push	r6
    3fee:	7f 92       	push	r7
    3ff0:	8f 92       	push	r8
    3ff2:	9f 92       	push	r9
    3ff4:	af 92       	push	r10
    3ff6:	bf 92       	push	r11
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	7c 01       	movw	r14, r24
    4006:	2a 01       	movw	r4, r20
    4008:	3b 01       	movw	r6, r22
    400a:	48 01       	movw	r8, r16
    400c:	59 01       	movw	r10, r18
    400e:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    4012:	68 e4       	ldi	r22, 0x48	; 72
    4014:	74 e0       	ldi	r23, 0x04	; 4
    4016:	88 e9       	ldi	r24, 0x98	; 152
    4018:	97 e0       	ldi	r25, 0x07	; 7
    401a:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    401e:	6b e3       	ldi	r22, 0x3B	; 59
    4020:	74 e0       	ldi	r23, 0x04	; 4
    4022:	88 e9       	ldi	r24, 0x98	; 152
    4024:	97 e0       	ldi	r25, 0x07	; 7
    4026:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    402a:	2a e0       	ldi	r18, 0x0A	; 10
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	b3 01       	movw	r22, r6
    4030:	a2 01       	movw	r20, r4
    4032:	88 e9       	ldi	r24, 0x98	; 152
    4034:	97 e0       	ldi	r25, 0x07	; 7
    4036:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN5Print5printEmi>
    403a:	6c e2       	ldi	r22, 0x2C	; 44
    403c:	88 e9       	ldi	r24, 0x98	; 152
    403e:	97 e0       	ldi	r25, 0x07	; 7
    4040:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEc>
    4044:	2a e0       	ldi	r18, 0x0A	; 10
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	b5 01       	movw	r22, r10
    404a:	a4 01       	movw	r20, r8
    404c:	88 e9       	ldi	r24, 0x98	; 152
    404e:	97 e0       	ldi	r25, 0x07	; 7
    4050:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <_ZN5Print7printlnEmi>
    4054:	e7 01       	movw	r28, r14
    4056:	c8 5e       	subi	r28, 0xE8	; 232
    4058:	de 4f       	sbci	r29, 0xFE	; 254
    405a:	6e e2       	ldi	r22, 0x2E	; 46
    405c:	74 e0       	ldi	r23, 0x04	; 4
    405e:	88 81       	ld	r24, Y
    4060:	99 81       	ldd	r25, Y+1	; 0x01
    4062:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4066:	2a e0       	ldi	r18, 0x0A	; 10
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	b3 01       	movw	r22, r6
    406c:	a2 01       	movw	r20, r4
    406e:	88 81       	ld	r24, Y
    4070:	99 81       	ldd	r25, Y+1	; 0x01
    4072:	0e 94 b6 1b 	call	0x376c	; 0x376c <_ZN5Print5printEmi>
    4076:	63 e0       	ldi	r22, 0x03	; 3
    4078:	73 e0       	ldi	r23, 0x03	; 3
    407a:	88 81       	ld	r24, Y
    407c:	99 81       	ldd	r25, Y+1	; 0x01
    407e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    4082:	2a e0       	ldi	r18, 0x0A	; 10
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	b5 01       	movw	r22, r10
    4088:	a4 01       	movw	r20, r8
    408a:	88 81       	ld	r24, Y
    408c:	99 81       	ldd	r25, Y+1	; 0x01
    408e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <_ZN5Print7printlnEmi>
    4092:	40 e1       	ldi	r20, 0x10	; 16
    4094:	57 e2       	ldi	r21, 0x27	; 39
    4096:	65 e2       	ldi	r22, 0x25	; 37
    4098:	74 e0       	ldi	r23, 0x04	; 4
    409a:	c7 01       	movw	r24, r14
    409c:	df 91       	pop	r29
    409e:	cf 91       	pop	r28
    40a0:	1f 91       	pop	r17
    40a2:	0f 91       	pop	r16
    40a4:	ff 90       	pop	r15
    40a6:	ef 90       	pop	r14
    40a8:	bf 90       	pop	r11
    40aa:	af 90       	pop	r10
    40ac:	9f 90       	pop	r9
    40ae:	8f 90       	pop	r8
    40b0:	7f 90       	pop	r7
    40b2:	6f 90       	pop	r6
    40b4:	5f 90       	pop	r5
    40b6:	4f 90       	pop	r4
    40b8:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

000040bc <_ZN13Adafruit_FONA8getReplyEPcj>:
    40bc:	ef 92       	push	r14
    40be:	ff 92       	push	r15
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	ec 01       	movw	r28, r24
    40ca:	8b 01       	movw	r16, r22
    40cc:	7a 01       	movw	r14, r20
    40ce:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    40d2:	65 e9       	ldi	r22, 0x95	; 149
    40d4:	73 e0       	ldi	r23, 0x03	; 3
    40d6:	88 e9       	ldi	r24, 0x98	; 152
    40d8:	97 e0       	ldi	r25, 0x07	; 7
    40da:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    40de:	b8 01       	movw	r22, r16
    40e0:	88 e9       	ldi	r24, 0x98	; 152
    40e2:	97 e0       	ldi	r25, 0x07	; 7
    40e4:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    40e8:	fe 01       	movw	r30, r28
    40ea:	e8 5e       	subi	r30, 0xE8	; 232
    40ec:	fe 4f       	sbci	r31, 0xFE	; 254
    40ee:	b8 01       	movw	r22, r16
    40f0:	80 81       	ld	r24, Z
    40f2:	91 81       	ldd	r25, Z+1	; 0x01
    40f4:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	b7 01       	movw	r22, r14
    40fc:	ce 01       	movw	r24, r28
    40fe:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4102:	18 2f       	mov	r17, r24
    4104:	6e e8       	ldi	r22, 0x8E	; 142
    4106:	73 e0       	ldi	r23, 0x03	; 3
    4108:	88 e9       	ldi	r24, 0x98	; 152
    410a:	97 e0       	ldi	r25, 0x07	; 7
    410c:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4110:	be 01       	movw	r22, r28
    4112:	62 5f       	subi	r22, 0xF2	; 242
    4114:	7f 4f       	sbci	r23, 0xFF	; 255
    4116:	88 e9       	ldi	r24, 0x98	; 152
    4118:	97 e0       	ldi	r25, 0x07	; 7
    411a:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    411e:	81 2f       	mov	r24, r17
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	1f 91       	pop	r17
    4126:	0f 91       	pop	r16
    4128:	ff 90       	pop	r15
    412a:	ef 90       	pop	r14
    412c:	08 95       	ret

0000412e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	ec 01       	movw	r28, r24
    413c:	8b 01       	movw	r16, r22
    413e:	7a 01       	movw	r14, r20
    4140:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    4144:	67 e8       	ldi	r22, 0x87	; 135
    4146:	73 e0       	ldi	r23, 0x03	; 3
    4148:	88 e9       	ldi	r24, 0x98	; 152
    414a:	97 e0       	ldi	r25, 0x07	; 7
    414c:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4150:	b8 01       	movw	r22, r16
    4152:	88 e9       	ldi	r24, 0x98	; 152
    4154:	97 e0       	ldi	r25, 0x07	; 7
    4156:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>
    415a:	fe 01       	movw	r30, r28
    415c:	e8 5e       	subi	r30, 0xE8	; 232
    415e:	fe 4f       	sbci	r31, 0xFE	; 254
    4160:	b8 01       	movw	r22, r16
    4162:	80 81       	ld	r24, Z
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	b7 01       	movw	r22, r14
    416e:	ce 01       	movw	r24, r28
    4170:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4174:	18 2f       	mov	r17, r24
    4176:	60 e8       	ldi	r22, 0x80	; 128
    4178:	73 e0       	ldi	r23, 0x03	; 3
    417a:	88 e9       	ldi	r24, 0x98	; 152
    417c:	97 e0       	ldi	r25, 0x07	; 7
    417e:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4182:	be 01       	movw	r22, r28
    4184:	62 5f       	subi	r22, 0xF2	; 242
    4186:	7f 4f       	sbci	r23, 0xFF	; 255
    4188:	88 e9       	ldi	r24, 0x98	; 152
    418a:	97 e0       	ldi	r25, 0x07	; 7
    418c:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4190:	81 2f       	mov	r24, r17
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	1f 91       	pop	r17
    4198:	0f 91       	pop	r16
    419a:	ff 90       	pop	r15
    419c:	ef 90       	pop	r14
    419e:	08 95       	ret

000041a0 <_ZN13Adafruit_FONA9GPSstatusEv>:
    41a0:	0f 93       	push	r16
    41a2:	1f 93       	push	r17
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	8c 01       	movw	r16, r24
    41aa:	44 ef       	ldi	r20, 0xF4	; 244
    41ac:	51 e0       	ldi	r21, 0x01	; 1
    41ae:	61 e8       	ldi	r22, 0x81	; 129
    41b0:	75 e0       	ldi	r23, 0x05	; 5
    41b2:	0e 94 97 20 	call	0x412e	; 0x412e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    41b6:	66 e7       	ldi	r22, 0x76	; 118
    41b8:	75 e0       	ldi	r23, 0x05	; 5
    41ba:	c8 01       	movw	r24, r16
    41bc:	0e 96       	adiw	r24, 0x0e	; 14
    41be:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    41c2:	ec 01       	movw	r28, r24
    41c4:	89 2b       	or	r24, r25
    41c6:	71 f0       	breq	.+28     	; 0x41e4 <_ZN13Adafruit_FONA9GPSstatusEv+0x44>
    41c8:	40 e0       	ldi	r20, 0x00	; 0
    41ca:	64 ef       	ldi	r22, 0xF4	; 244
    41cc:	71 e0       	ldi	r23, 0x01	; 1
    41ce:	c8 01       	movw	r24, r16
    41d0:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    41d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    41d6:	80 33       	cpi	r24, 0x30	; 48
    41d8:	39 f0       	breq	.+14     	; 0x41e8 <_ZN13Adafruit_FONA9GPSstatusEv+0x48>
    41da:	8c 85       	ldd	r24, Y+12	; 0x0c
    41dc:	81 33       	cpi	r24, 0x31	; 49
    41de:	31 f0       	breq	.+12     	; 0x41ec <_ZN13Adafruit_FONA9GPSstatusEv+0x4c>
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	05 c0       	rjmp	.+10     	; 0x41ee <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    41e4:	8f ef       	ldi	r24, 0xFF	; 255
    41e6:	03 c0       	rjmp	.+6      	; 0x41ee <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	01 c0       	rjmp	.+2      	; 0x41ee <_ZN13Adafruit_FONA9GPSstatusEv+0x4e>
    41ec:	83 e0       	ldi	r24, 0x03	; 3
    41ee:	df 91       	pop	r29
    41f0:	cf 91       	pop	r28
    41f2:	1f 91       	pop	r17
    41f4:	0f 91       	pop	r16
    41f6:	08 95       	ret

000041f8 <_ZN13Adafruit_FONA6getGPSEhPch>:
    41f8:	cf 92       	push	r12
    41fa:	df 92       	push	r13
    41fc:	ef 92       	push	r14
    41fe:	ff 92       	push	r15
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	8c 01       	movw	r16, r24
    4208:	7a 01       	movw	r14, r20
    420a:	c2 2f       	mov	r28, r18
    420c:	44 ef       	ldi	r20, 0xF4	; 244
    420e:	51 e0       	ldi	r21, 0x01	; 1
    4210:	6b e6       	ldi	r22, 0x6B	; 107
    4212:	75 e0       	ldi	r23, 0x05	; 5
    4214:	0e 94 97 20 	call	0x412e	; 0x412e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4218:	66 e6       	ldi	r22, 0x66	; 102
    421a:	75 e0       	ldi	r23, 0x05	; 5
    421c:	c8 01       	movw	r24, r16
    421e:	0e 96       	adiw	r24, 0x0e	; 14
    4220:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    4224:	00 97       	sbiw	r24, 0x00	; 0
    4226:	21 f4       	brne	.+8      	; 0x4230 <_ZN13Adafruit_FONA6getGPSEhPch+0x38>
    4228:	f7 01       	movw	r30, r14
    422a:	10 82       	st	Z, r1
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	24 c0       	rjmp	.+72     	; 0x4278 <_ZN13Adafruit_FONA6getGPSEhPch+0x80>
    4230:	bc 01       	movw	r22, r24
    4232:	6a 5f       	subi	r22, 0xFA	; 250
    4234:	7f 4f       	sbci	r23, 0xFF	; 255
    4236:	fb 01       	movw	r30, r22
    4238:	01 90       	ld	r0, Z+
    423a:	00 20       	and	r0, r0
    423c:	e9 f7       	brne	.-6      	; 0x4238 <_ZN13Adafruit_FONA6getGPSEhPch+0x40>
    423e:	31 97       	sbiw	r30, 0x01	; 1
    4240:	e6 1b       	sub	r30, r22
    4242:	f7 0b       	sbc	r31, r23
    4244:	8c 2f       	mov	r24, r28
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	e8 17       	cp	r30, r24
    424c:	f9 07       	cpc	r31, r25
    424e:	10 f4       	brcc	.+4      	; 0x4254 <_ZN13Adafruit_FONA6getGPSEhPch+0x5c>
    4250:	c1 50       	subi	r28, 0x01	; 1
    4252:	01 c0       	rjmp	.+2      	; 0x4256 <_ZN13Adafruit_FONA6getGPSEhPch+0x5e>
    4254:	ce 2f       	mov	r28, r30
    4256:	cc 2e       	mov	r12, r28
    4258:	d1 2c       	mov	r13, r1
    425a:	a6 01       	movw	r20, r12
    425c:	c7 01       	movw	r24, r14
    425e:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <strncpy>
    4262:	f7 01       	movw	r30, r14
    4264:	ec 0d       	add	r30, r12
    4266:	fd 1d       	adc	r31, r13
    4268:	10 82       	st	Z, r1
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	64 ef       	ldi	r22, 0xF4	; 244
    426e:	71 e0       	ldi	r23, 0x01	; 1
    4270:	c8 01       	movw	r24, r16
    4272:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4276:	8c 2f       	mov	r24, r28
    4278:	cf 91       	pop	r28
    427a:	1f 91       	pop	r17
    427c:	0f 91       	pop	r16
    427e:	ff 90       	pop	r15
    4280:	ef 90       	pop	r14
    4282:	df 90       	pop	r13
    4284:	cf 90       	pop	r12
    4286:	08 95       	ret

00004288 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc>:
    4288:	2f 92       	push	r2
    428a:	3f 92       	push	r3
    428c:	4f 92       	push	r4
    428e:	5f 92       	push	r5
    4290:	6f 92       	push	r6
    4292:	7f 92       	push	r7
    4294:	8f 92       	push	r8
    4296:	9f 92       	push	r9
    4298:	af 92       	push	r10
    429a:	bf 92       	push	r11
    429c:	cf 92       	push	r12
    429e:	df 92       	push	r13
    42a0:	ef 92       	push	r14
    42a2:	ff 92       	push	r15
    42a4:	0f 93       	push	r16
    42a6:	1f 93       	push	r17
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    42b0:	ca 57       	subi	r28, 0x7A	; 122
    42b2:	d1 09       	sbc	r29, r1
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	5c 01       	movw	r10, r24
    42c0:	1b 01       	movw	r2, r22
    42c2:	eb 96       	adiw	r28, 0x3b	; 59
    42c4:	5f af       	std	Y+63, r21	; 0x3f
    42c6:	4e af       	std	Y+62, r20	; 0x3e
    42c8:	eb 97       	sbiw	r28, 0x3b	; 59
    42ca:	39 01       	movw	r6, r18
    42cc:	28 01       	movw	r4, r16
    42ce:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <_ZN13Adafruit_FONA9GPSstatusEv>
    42d2:	82 30       	cpi	r24, 0x02	; 2
    42d4:	14 f4       	brge	.+4      	; 0x42da <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x52>
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	8a c0       	rjmp	.+276    	; 0x43ee <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x166>
    42da:	28 e7       	ldi	r18, 0x78	; 120
    42dc:	ae 01       	movw	r20, r28
    42de:	4f 5f       	subi	r20, 0xFF	; 255
    42e0:	5f 4f       	sbci	r21, 0xFF	; 255
    42e2:	60 e2       	ldi	r22, 0x20	; 32
    42e4:	c5 01       	movw	r24, r10
    42e6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <_ZN13Adafruit_FONA6getGPSEhPch>
    42ea:	88 23       	and	r24, r24
    42ec:	a1 f3       	breq	.-24     	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    42ee:	63 e0       	ldi	r22, 0x03	; 3
    42f0:	73 e0       	ldi	r23, 0x03	; 3
    42f2:	ce 01       	movw	r24, r28
    42f4:	01 96       	adiw	r24, 0x01	; 1
    42f6:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    42fa:	89 2b       	or	r24, r25
    42fc:	61 f3       	breq	.-40     	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    42fe:	63 e0       	ldi	r22, 0x03	; 3
    4300:	73 e0       	ldi	r23, 0x03	; 3
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    430a:	89 2b       	or	r24, r25
    430c:	21 f3       	breq	.-56     	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    430e:	63 e0       	ldi	r22, 0x03	; 3
    4310:	73 e0       	ldi	r23, 0x03	; 3
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    431a:	4c 01       	movw	r8, r24
    431c:	89 2b       	or	r24, r25
    431e:	d9 f2       	breq	.-74     	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4320:	63 e0       	ldi	r22, 0x03	; 3
    4322:	73 e0       	ldi	r23, 0x03	; 3
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    432c:	5c 01       	movw	r10, r24
    432e:	89 2b       	or	r24, r25
    4330:	91 f2       	breq	.-92     	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4332:	63 e0       	ldi	r22, 0x03	; 3
    4334:	73 e0       	ldi	r23, 0x03	; 3
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    433e:	8c 01       	movw	r16, r24
    4340:	89 2b       	or	r24, r25
    4342:	49 f2       	breq	.-110    	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4344:	4e e0       	ldi	r20, 0x0E	; 14
    4346:	50 e0       	ldi	r21, 0x00	; 0
    4348:	b4 01       	movw	r22, r8
    434a:	c6 01       	movw	r24, r12
    434c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <strncpy>
    4350:	f6 01       	movw	r30, r12
    4352:	16 86       	std	Z+14, r1	; 0x0e
    4354:	c5 01       	movw	r24, r10
    4356:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atof>
    435a:	f1 01       	movw	r30, r2
    435c:	60 83       	st	Z, r22
    435e:	71 83       	std	Z+1, r23	; 0x01
    4360:	82 83       	std	Z+2, r24	; 0x02
    4362:	93 83       	std	Z+3, r25	; 0x03
    4364:	c8 01       	movw	r24, r16
    4366:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atof>
    436a:	eb 96       	adiw	r28, 0x3b	; 59
    436c:	ee ad       	ldd	r30, Y+62	; 0x3e
    436e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4370:	eb 97       	sbiw	r28, 0x3b	; 59
    4372:	60 83       	st	Z, r22
    4374:	71 83       	std	Z+1, r23	; 0x01
    4376:	82 83       	std	Z+2, r24	; 0x02
    4378:	93 83       	std	Z+3, r25	; 0x03
    437a:	e1 14       	cp	r14, r1
    437c:	f1 04       	cpc	r15, r1
    437e:	81 f0       	breq	.+32     	; 0x43a0 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x118>
    4380:	63 e0       	ldi	r22, 0x03	; 3
    4382:	73 e0       	ldi	r23, 0x03	; 3
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	09 f4       	brne	.+2      	; 0x4392 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x10a>
    4390:	a2 cf       	rjmp	.-188    	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    4392:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atof>
    4396:	f7 01       	movw	r30, r14
    4398:	60 83       	st	Z, r22
    439a:	71 83       	std	Z+1, r23	; 0x01
    439c:	82 83       	std	Z+2, r24	; 0x02
    439e:	93 83       	std	Z+3, r25	; 0x03
    43a0:	61 14       	cp	r6, r1
    43a2:	71 04       	cpc	r7, r1
    43a4:	81 f0       	breq	.+32     	; 0x43c6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x13e>
    43a6:	63 e0       	ldi	r22, 0x03	; 3
    43a8:	73 e0       	ldi	r23, 0x03	; 3
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x130>
    43b6:	8f cf       	rjmp	.-226    	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    43b8:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atof>
    43bc:	f3 01       	movw	r30, r6
    43be:	60 83       	st	Z, r22
    43c0:	71 83       	std	Z+1, r23	; 0x01
    43c2:	82 83       	std	Z+2, r24	; 0x02
    43c4:	93 83       	std	Z+3, r25	; 0x03
    43c6:	41 14       	cp	r4, r1
    43c8:	51 04       	cpc	r5, r1
    43ca:	81 f0       	breq	.+32     	; 0x43ec <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x164>
    43cc:	63 e0       	ldi	r22, 0x03	; 3
    43ce:	73 e0       	ldi	r23, 0x03	; 3
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <strtok>
    43d8:	00 97       	sbiw	r24, 0x00	; 0
    43da:	09 f4       	brne	.+2      	; 0x43de <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x156>
    43dc:	7c cf       	rjmp	.-264    	; 0x42d6 <_ZN13Adafruit_FONA6getGPSEPfS0_S0_S0_S0_Pc+0x4e>
    43de:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <atof>
    43e2:	f2 01       	movw	r30, r4
    43e4:	60 83       	st	Z, r22
    43e6:	71 83       	std	Z+1, r23	; 0x01
    43e8:	82 83       	std	Z+2, r24	; 0x02
    43ea:	93 83       	std	Z+3, r25	; 0x03
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	c6 58       	subi	r28, 0x86	; 134
    43f0:	df 4f       	sbci	r29, 0xFF	; 255
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	f8 94       	cli
    43f6:	de bf       	out	0x3e, r29	; 62
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	cd bf       	out	0x3d, r28	; 61
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	ef 90       	pop	r14
    4408:	df 90       	pop	r13
    440a:	cf 90       	pop	r12
    440c:	bf 90       	pop	r11
    440e:	af 90       	pop	r10
    4410:	9f 90       	pop	r9
    4412:	8f 90       	pop	r8
    4414:	7f 90       	pop	r7
    4416:	6f 90       	pop	r6
    4418:	5f 90       	pop	r5
    441a:	4f 90       	pop	r4
    441c:	3f 90       	pop	r3
    441e:	2f 90       	pop	r2
    4420:	08 95       	ret

00004422 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
    4422:	8f 92       	push	r8
    4424:	9f 92       	push	r9
    4426:	af 92       	push	r10
    4428:	bf 92       	push	r11
    442a:	cf 92       	push	r12
    442c:	df 92       	push	r13
    442e:	ef 92       	push	r14
    4430:	ff 92       	push	r15
    4432:	0f 93       	push	r16
    4434:	1f 93       	push	r17
    4436:	cf 93       	push	r28
    4438:	df 93       	push	r29
    443a:	ec 01       	movw	r28, r24
    443c:	6b 01       	movw	r12, r22
    443e:	49 01       	movw	r8, r18
    4440:	5a 01       	movw	r10, r20
    4442:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    4446:	69 e7       	ldi	r22, 0x79	; 121
    4448:	73 e0       	ldi	r23, 0x03	; 3
    444a:	88 e9       	ldi	r24, 0x98	; 152
    444c:	97 e0       	ldi	r25, 0x07	; 7
    444e:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4452:	b6 01       	movw	r22, r12
    4454:	88 e9       	ldi	r24, 0x98	; 152
    4456:	97 e0       	ldi	r25, 0x07	; 7
    4458:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    445c:	2a e0       	ldi	r18, 0x0A	; 10
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	b5 01       	movw	r22, r10
    4462:	a4 01       	movw	r20, r8
    4464:	88 e9       	ldi	r24, 0x98	; 152
    4466:	97 e0       	ldi	r25, 0x07	; 7
    4468:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_ZN5Print7printlnEli>
    446c:	7e 01       	movw	r14, r28
    446e:	88 ee       	ldi	r24, 0xE8	; 232
    4470:	e8 1a       	sub	r14, r24
    4472:	8e ef       	ldi	r24, 0xFE	; 254
    4474:	f8 0a       	sbc	r15, r24
    4476:	b6 01       	movw	r22, r12
    4478:	f7 01       	movw	r30, r14
    447a:	80 81       	ld	r24, Z
    447c:	91 81       	ldd	r25, Z+1	; 0x01
    447e:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4482:	2a e0       	ldi	r18, 0x0A	; 10
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	b5 01       	movw	r22, r10
    4488:	a4 01       	movw	r20, r8
    448a:	f7 01       	movw	r30, r14
    448c:	80 81       	ld	r24, Z
    448e:	91 81       	ldd	r25, Z+1	; 0x01
    4490:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_ZN5Print7printlnEli>
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	b8 01       	movw	r22, r16
    4498:	ce 01       	movw	r24, r28
    449a:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    449e:	18 2f       	mov	r17, r24
    44a0:	62 e7       	ldi	r22, 0x72	; 114
    44a2:	73 e0       	ldi	r23, 0x03	; 3
    44a4:	88 e9       	ldi	r24, 0x98	; 152
    44a6:	97 e0       	ldi	r25, 0x07	; 7
    44a8:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    44ac:	be 01       	movw	r22, r28
    44ae:	62 5f       	subi	r22, 0xF2	; 242
    44b0:	7f 4f       	sbci	r23, 0xFF	; 255
    44b2:	88 e9       	ldi	r24, 0x98	; 152
    44b4:	97 e0       	ldi	r25, 0x07	; 7
    44b6:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    44ba:	81 2f       	mov	r24, r17
    44bc:	df 91       	pop	r29
    44be:	cf 91       	pop	r28
    44c0:	1f 91       	pop	r17
    44c2:	0f 91       	pop	r16
    44c4:	ff 90       	pop	r15
    44c6:	ef 90       	pop	r14
    44c8:	df 90       	pop	r13
    44ca:	cf 90       	pop	r12
    44cc:	bf 90       	pop	r11
    44ce:	af 90       	pop	r10
    44d0:	9f 90       	pop	r9
    44d2:	8f 90       	pop	r8
    44d4:	08 95       	ret

000044d6 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
    44d6:	af 92       	push	r10
    44d8:	bf 92       	push	r11
    44da:	cf 92       	push	r12
    44dc:	df 92       	push	r13
    44de:	ef 92       	push	r14
    44e0:	ff 92       	push	r15
    44e2:	0f 93       	push	r16
    44e4:	1f 93       	push	r17
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	ec 01       	movw	r28, r24
    44ec:	6b 01       	movw	r12, r22
    44ee:	7a 01       	movw	r14, r20
    44f0:	59 01       	movw	r10, r18
    44f2:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    44f6:	6b e6       	ldi	r22, 0x6B	; 107
    44f8:	73 e0       	ldi	r23, 0x03	; 3
    44fa:	88 e9       	ldi	r24, 0x98	; 152
    44fc:	97 e0       	ldi	r25, 0x07	; 7
    44fe:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4502:	b6 01       	movw	r22, r12
    4504:	88 e9       	ldi	r24, 0x98	; 152
    4506:	97 e0       	ldi	r25, 0x07	; 7
    4508:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    450c:	62 e2       	ldi	r22, 0x22	; 34
    450e:	88 e9       	ldi	r24, 0x98	; 152
    4510:	97 e0       	ldi	r25, 0x07	; 7
    4512:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEc>
    4516:	b7 01       	movw	r22, r14
    4518:	88 e9       	ldi	r24, 0x98	; 152
    451a:	97 e0       	ldi	r25, 0x07	; 7
    451c:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4520:	62 e2       	ldi	r22, 0x22	; 34
    4522:	88 e9       	ldi	r24, 0x98	; 152
    4524:	97 e0       	ldi	r25, 0x07	; 7
    4526:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print7printlnEc>
    452a:	8e 01       	movw	r16, r28
    452c:	08 5e       	subi	r16, 0xE8	; 232
    452e:	1e 4f       	sbci	r17, 0xFE	; 254
    4530:	b6 01       	movw	r22, r12
    4532:	f8 01       	movw	r30, r16
    4534:	80 81       	ld	r24, Z
    4536:	91 81       	ldd	r25, Z+1	; 0x01
    4538:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    453c:	62 e2       	ldi	r22, 0x22	; 34
    453e:	f8 01       	movw	r30, r16
    4540:	80 81       	ld	r24, Z
    4542:	91 81       	ldd	r25, Z+1	; 0x01
    4544:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN5Print5printEc>
    4548:	b7 01       	movw	r22, r14
    454a:	f8 01       	movw	r30, r16
    454c:	80 81       	ld	r24, Z
    454e:	91 81       	ldd	r25, Z+1	; 0x01
    4550:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4554:	62 e2       	ldi	r22, 0x22	; 34
    4556:	f8 01       	movw	r30, r16
    4558:	80 81       	ld	r24, Z
    455a:	91 81       	ldd	r25, Z+1	; 0x01
    455c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN5Print7printlnEc>
    4560:	40 e0       	ldi	r20, 0x00	; 0
    4562:	b5 01       	movw	r22, r10
    4564:	ce 01       	movw	r24, r28
    4566:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    456a:	18 2f       	mov	r17, r24
    456c:	64 e6       	ldi	r22, 0x64	; 100
    456e:	73 e0       	ldi	r23, 0x03	; 3
    4570:	88 e9       	ldi	r24, 0x98	; 152
    4572:	97 e0       	ldi	r25, 0x07	; 7
    4574:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4578:	be 01       	movw	r22, r28
    457a:	62 5f       	subi	r22, 0xF2	; 242
    457c:	7f 4f       	sbci	r23, 0xFF	; 255
    457e:	88 e9       	ldi	r24, 0x98	; 152
    4580:	97 e0       	ldi	r25, 0x07	; 7
    4582:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4586:	81 2f       	mov	r24, r17
    4588:	df 91       	pop	r29
    458a:	cf 91       	pop	r28
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	08 95       	ret

0000459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
    459e:	0f 93       	push	r16
    45a0:	1f 93       	push	r17
    45a2:	cf 93       	push	r28
    45a4:	df 93       	push	r29
    45a6:	ec 01       	movw	r28, r24
    45a8:	8a 01       	movw	r16, r20
    45aa:	a9 01       	movw	r20, r18
    45ac:	0e 94 97 20 	call	0x412e	; 0x412e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    45b0:	88 23       	and	r24, r24
    45b2:	41 f0       	breq	.+16     	; 0x45c4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
    45b4:	b8 01       	movw	r22, r16
    45b6:	ce 01       	movw	r24, r28
    45b8:	0e 96       	adiw	r24, 0x0e	; 14
    45ba:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <strcmp_P>
    45be:	21 e0       	ldi	r18, 0x01	; 1
    45c0:	89 2b       	or	r24, r25
    45c2:	09 f0       	breq	.+2      	; 0x45c6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	82 2f       	mov	r24, r18
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	0f 91       	pop	r16
    45d0:	08 95       	ret

000045d2 <_ZN13Adafruit_FONA5beginER6Stream>:
    45d2:	cf 92       	push	r12
    45d4:	df 92       	push	r13
    45d6:	ef 92       	push	r14
    45d8:	ff 92       	push	r15
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	ec 01       	movw	r28, r24
    45e4:	7c 01       	movw	r14, r24
    45e6:	88 ee       	ldi	r24, 0xE8	; 232
    45e8:	e8 1a       	sub	r14, r24
    45ea:	8e ef       	ldi	r24, 0xFE	; 254
    45ec:	f8 0a       	sbc	r15, r24
    45ee:	d7 01       	movw	r26, r14
    45f0:	6d 93       	st	X+, r22
    45f2:	7c 93       	st	X, r23
    45f4:	61 e0       	ldi	r22, 0x01	; 1
    45f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    45f8:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <pinMode>
    45fc:	61 e0       	ldi	r22, 0x01	; 1
    45fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4600:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
    4604:	6a e0       	ldi	r22, 0x0A	; 10
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    4610:	60 e0       	ldi	r22, 0x00	; 0
    4612:	8c 85       	ldd	r24, Y+12	; 0x0c
    4614:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
    4618:	64 e6       	ldi	r22, 0x64	; 100
    461a:	70 e0       	ldi	r23, 0x00	; 0
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    4624:	61 e0       	ldi	r22, 0x01	; 1
    4626:	8c 85       	ldd	r24, Y+12	; 0x0c
    4628:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
    462c:	6b e9       	ldi	r22, 0x9B	; 155
    462e:	76 e0       	ldi	r23, 0x06	; 6
    4630:	88 e9       	ldi	r24, 0x98	; 152
    4632:	97 e0       	ldi	r25, 0x07	; 7
    4634:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4638:	8e e0       	ldi	r24, 0x0E	; 14
    463a:	c8 2e       	mov	r12, r24
    463c:	d1 2c       	mov	r13, r1
    463e:	8e 01       	movw	r16, r28
    4640:	0a 5e       	subi	r16, 0xEA	; 234
    4642:	1e 4f       	sbci	r17, 0xFE	; 254
    4644:	f7 01       	movw	r30, r14
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	dc 01       	movw	r26, r24
    464c:	ed 91       	ld	r30, X+
    464e:	fc 91       	ld	r31, X
    4650:	04 80       	ldd	r0, Z+4	; 0x04
    4652:	f5 81       	ldd	r31, Z+5	; 0x05
    4654:	e0 2d       	mov	r30, r0
    4656:	09 95       	icall
    4658:	89 2b       	or	r24, r25
    465a:	89 f0       	breq	.+34     	; 0x467e <_ZN13Adafruit_FONA5beginER6Stream+0xac>
    465c:	66 e8       	ldi	r22, 0x86	; 134
    465e:	76 e0       	ldi	r23, 0x06	; 6
    4660:	88 e9       	ldi	r24, 0x98	; 152
    4662:	97 e0       	ldi	r25, 0x07	; 7
    4664:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>
    4668:	f7 01       	movw	r30, r14
    466a:	80 81       	ld	r24, Z
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	dc 01       	movw	r26, r24
    4670:	ed 91       	ld	r30, X+
    4672:	fc 91       	ld	r31, X
    4674:	06 80       	ldd	r0, Z+6	; 0x06
    4676:	f7 81       	ldd	r31, Z+7	; 0x07
    4678:	e0 2d       	mov	r30, r0
    467a:	09 95       	icall
    467c:	e3 cf       	rjmp	.-58     	; 0x4644 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    467e:	f8 01       	movw	r30, r16
    4680:	40 81       	ld	r20, Z
    4682:	51 81       	ldd	r21, Z+1	; 0x01
    4684:	24 ef       	ldi	r18, 0xF4	; 244
    4686:	31 e0       	ldi	r19, 0x01	; 1
    4688:	63 e8       	ldi	r22, 0x83	; 131
    468a:	76 e0       	ldi	r23, 0x06	; 6
    468c:	ce 01       	movw	r24, r28
    468e:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4692:	81 11       	cpse	r24, r1
    4694:	63 c0       	rjmp	.+198    	; 0x475c <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    4696:	d7 01       	movw	r26, r14
    4698:	8d 91       	ld	r24, X+
    469a:	9c 91       	ld	r25, X
    469c:	dc 01       	movw	r26, r24
    469e:	ed 91       	ld	r30, X+
    46a0:	fc 91       	ld	r31, X
    46a2:	04 80       	ldd	r0, Z+4	; 0x04
    46a4:	f5 81       	ldd	r31, Z+5	; 0x05
    46a6:	e0 2d       	mov	r30, r0
    46a8:	09 95       	icall
    46aa:	89 2b       	or	r24, r25
    46ac:	59 f0       	breq	.+22     	; 0x46c4 <_ZN13Adafruit_FONA5beginER6Stream+0xf2>
    46ae:	f7 01       	movw	r30, r14
    46b0:	80 81       	ld	r24, Z
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	dc 01       	movw	r26, r24
    46b6:	ed 91       	ld	r30, X+
    46b8:	fc 91       	ld	r31, X
    46ba:	06 80       	ldd	r0, Z+6	; 0x06
    46bc:	f7 81       	ldd	r31, Z+7	; 0x07
    46be:	e0 2d       	mov	r30, r0
    46c0:	09 95       	icall
    46c2:	e9 cf       	rjmp	.-46     	; 0x4696 <_ZN13Adafruit_FONA5beginER6Stream+0xc4>
    46c4:	24 ef       	ldi	r18, 0xF4	; 244
    46c6:	31 e0       	ldi	r19, 0x01	; 1
    46c8:	40 e8       	ldi	r20, 0x80	; 128
    46ca:	56 e0       	ldi	r21, 0x06	; 6
    46cc:	6d e7       	ldi	r22, 0x7D	; 125
    46ce:	76 e0       	ldi	r23, 0x06	; 6
    46d0:	ce 01       	movw	r24, r28
    46d2:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    46d6:	81 11       	cpse	r24, r1
    46d8:	41 c0       	rjmp	.+130    	; 0x475c <_ZN13Adafruit_FONA5beginER6Stream+0x18a>
    46da:	64 ef       	ldi	r22, 0xF4	; 244
    46dc:	71 e0       	ldi	r23, 0x01	; 1
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    46e6:	b1 e0       	ldi	r27, 0x01	; 1
    46e8:	cb 1a       	sub	r12, r27
    46ea:	d1 08       	sbc	r13, r1
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <_ZN13Adafruit_FONA5beginER6Stream+0x11e>
    46ee:	aa cf       	rjmp	.-172    	; 0x4644 <_ZN13Adafruit_FONA5beginER6Stream+0x72>
    46f0:	6b e4       	ldi	r22, 0x4B	; 75
    46f2:	76 e0       	ldi	r23, 0x06	; 6
    46f4:	88 e9       	ldi	r24, 0x98	; 152
    46f6:	97 e0       	ldi	r25, 0x07	; 7
    46f8:	0e 94 37 1b 	call	0x366e	; 0x366e <_ZN5Print7printlnEPK19__FlashStringHelper>
    46fc:	d8 01       	movw	r26, r16
    46fe:	4d 91       	ld	r20, X+
    4700:	5c 91       	ld	r21, X
    4702:	24 ef       	ldi	r18, 0xF4	; 244
    4704:	31 e0       	ldi	r19, 0x01	; 1
    4706:	68 e4       	ldi	r22, 0x48	; 72
    4708:	76 e0       	ldi	r23, 0x06	; 6
    470a:	ce 01       	movw	r24, r28
    470c:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4710:	64 e6       	ldi	r22, 0x64	; 100
    4712:	70 e0       	ldi	r23, 0x00	; 0
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    471c:	f8 01       	movw	r30, r16
    471e:	40 81       	ld	r20, Z
    4720:	51 81       	ldd	r21, Z+1	; 0x01
    4722:	24 ef       	ldi	r18, 0xF4	; 244
    4724:	31 e0       	ldi	r19, 0x01	; 1
    4726:	65 e4       	ldi	r22, 0x45	; 69
    4728:	76 e0       	ldi	r23, 0x06	; 6
    472a:	ce 01       	movw	r24, r28
    472c:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4730:	64 e6       	ldi	r22, 0x64	; 100
    4732:	70 e0       	ldi	r23, 0x00	; 0
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    473c:	d8 01       	movw	r26, r16
    473e:	4d 91       	ld	r20, X+
    4740:	5c 91       	ld	r21, X
    4742:	24 ef       	ldi	r18, 0xF4	; 244
    4744:	31 e0       	ldi	r19, 0x01	; 1
    4746:	62 e4       	ldi	r22, 0x42	; 66
    4748:	76 e0       	ldi	r23, 0x06	; 6
    474a:	ce 01       	movw	r24, r28
    474c:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4750:	64 e6       	ldi	r22, 0x64	; 100
    4752:	70 e0       	ldi	r23, 0x00	; 0
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    475c:	f8 01       	movw	r30, r16
    475e:	40 81       	ld	r20, Z
    4760:	51 81       	ldd	r21, Z+1	; 0x01
    4762:	24 ef       	ldi	r18, 0xF4	; 244
    4764:	31 e0       	ldi	r19, 0x01	; 1
    4766:	6d e3       	ldi	r22, 0x3D	; 61
    4768:	76 e0       	ldi	r23, 0x06	; 6
    476a:	ce 01       	movw	r24, r28
    476c:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4770:	64 e6       	ldi	r22, 0x64	; 100
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    477c:	d8 01       	movw	r26, r16
    477e:	4d 91       	ld	r20, X+
    4780:	5c 91       	ld	r21, X
    4782:	24 ef       	ldi	r18, 0xF4	; 244
    4784:	31 e0       	ldi	r19, 0x01	; 1
    4786:	68 e3       	ldi	r22, 0x38	; 56
    4788:	76 e0       	ldi	r23, 0x06	; 6
    478a:	ce 01       	movw	r24, r28
    478c:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4790:	d8 2e       	mov	r13, r24
    4792:	88 23       	and	r24, r24
    4794:	09 f4       	brne	.+2      	; 0x4798 <_ZN13Adafruit_FONA5beginER6Stream+0x1c6>
    4796:	97 c0       	rjmp	.+302    	; 0x48c6 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    4798:	f8 01       	movw	r30, r16
    479a:	40 81       	ld	r20, Z
    479c:	51 81       	ldd	r21, Z+1	; 0x01
    479e:	24 ef       	ldi	r18, 0xF4	; 244
    47a0:	31 e0       	ldi	r19, 0x01	; 1
    47a2:	6e e2       	ldi	r22, 0x2E	; 46
    47a4:	76 e0       	ldi	r23, 0x06	; 6
    47a6:	ce 01       	movw	r24, r28
    47a8:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    47ac:	64 e6       	ldi	r22, 0x64	; 100
    47ae:	70 e0       	ldi	r23, 0x00	; 0
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <delay>
    47b8:	ce 01       	movw	r24, r28
    47ba:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    47be:	67 e2       	ldi	r22, 0x27	; 39
    47c0:	76 e0       	ldi	r23, 0x06	; 6
    47c2:	88 e9       	ldi	r24, 0x98	; 152
    47c4:	97 e0       	ldi	r25, 0x07	; 7
    47c6:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    47ca:	6d e0       	ldi	r22, 0x0D	; 13
    47cc:	73 e0       	ldi	r23, 0x03	; 3
    47ce:	88 e9       	ldi	r24, 0x98	; 152
    47d0:	97 e0       	ldi	r25, 0x07	; 7
    47d2:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    47d6:	6d e0       	ldi	r22, 0x0D	; 13
    47d8:	73 e0       	ldi	r23, 0x03	; 3
    47da:	d7 01       	movw	r26, r14
    47dc:	8d 91       	ld	r24, X+
    47de:	9c 91       	ld	r25, X
    47e0:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    47e4:	41 e0       	ldi	r20, 0x01	; 1
    47e6:	64 ef       	ldi	r22, 0xF4	; 244
    47e8:	71 e0       	ldi	r23, 0x01	; 1
    47ea:	ce 01       	movw	r24, r28
    47ec:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    47f0:	60 e2       	ldi	r22, 0x20	; 32
    47f2:	76 e0       	ldi	r23, 0x06	; 6
    47f4:	88 e9       	ldi	r24, 0x98	; 152
    47f6:	97 e0       	ldi	r25, 0x07	; 7
    47f8:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    47fc:	8e 01       	movw	r16, r28
    47fe:	02 5f       	subi	r16, 0xF2	; 242
    4800:	1f 4f       	sbci	r17, 0xFF	; 255
    4802:	b8 01       	movw	r22, r16
    4804:	88 e9       	ldi	r24, 0x98	; 152
    4806:	97 e0       	ldi	r25, 0x07	; 7
    4808:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    480c:	65 e1       	ldi	r22, 0x15	; 21
    480e:	76 e0       	ldi	r23, 0x06	; 6
    4810:	c8 01       	movw	r24, r16
    4812:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    4816:	89 2b       	or	r24, r25
    4818:	11 f0       	breq	.+4      	; 0x481e <_ZN13Adafruit_FONA5beginER6Stream+0x24c>
    481a:	83 e0       	ldi	r24, 0x03	; 3
    481c:	23 c0       	rjmp	.+70     	; 0x4864 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    481e:	6a e0       	ldi	r22, 0x0A	; 10
    4820:	76 e0       	ldi	r23, 0x06	; 6
    4822:	c8 01       	movw	r24, r16
    4824:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    4828:	89 2b       	or	r24, r25
    482a:	11 f0       	breq	.+4      	; 0x4830 <_ZN13Adafruit_FONA5beginER6Stream+0x25e>
    482c:	82 e0       	ldi	r24, 0x02	; 2
    482e:	1a c0       	rjmp	.+52     	; 0x4864 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4830:	6f ef       	ldi	r22, 0xFF	; 255
    4832:	75 e0       	ldi	r23, 0x05	; 5
    4834:	c8 01       	movw	r24, r16
    4836:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    483a:	89 2b       	or	r24, r25
    483c:	11 f0       	breq	.+4      	; 0x4842 <_ZN13Adafruit_FONA5beginER6Stream+0x270>
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	11 c0       	rjmp	.+34     	; 0x4864 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4842:	6f ee       	ldi	r22, 0xEF	; 239
    4844:	75 e0       	ldi	r23, 0x05	; 5
    4846:	c8 01       	movw	r24, r16
    4848:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    484c:	89 2b       	or	r24, r25
    484e:	11 f0       	breq	.+4      	; 0x4854 <_ZN13Adafruit_FONA5beginER6Stream+0x282>
    4850:	84 e0       	ldi	r24, 0x04	; 4
    4852:	08 c0       	rjmp	.+16     	; 0x4864 <_ZN13Adafruit_FONA5beginER6Stream+0x292>
    4854:	6f ed       	ldi	r22, 0xDF	; 223
    4856:	75 e0       	ldi	r23, 0x05	; 5
    4858:	c8 01       	movw	r24, r16
    485a:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    485e:	89 2b       	or	r24, r25
    4860:	11 f0       	breq	.+4      	; 0x4866 <_ZN13Adafruit_FONA5beginER6Stream+0x294>
    4862:	85 e0       	ldi	r24, 0x05	; 5
    4864:	8d 87       	std	Y+13, r24	; 0x0d
    4866:	8d 85       	ldd	r24, Y+13	; 0x0d
    4868:	81 30       	cpi	r24, 0x01	; 1
    486a:	69 f5       	brne	.+90     	; 0x48c6 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    486c:	68 ed       	ldi	r22, 0xD8	; 216
    486e:	75 e0       	ldi	r23, 0x05	; 5
    4870:	88 e9       	ldi	r24, 0x98	; 152
    4872:	97 e0       	ldi	r25, 0x07	; 7
    4874:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4878:	61 e1       	ldi	r22, 0x11	; 17
    487a:	73 e0       	ldi	r23, 0x03	; 3
    487c:	88 e9       	ldi	r24, 0x98	; 152
    487e:	97 e0       	ldi	r25, 0x07	; 7
    4880:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4884:	61 e1       	ldi	r22, 0x11	; 17
    4886:	73 e0       	ldi	r23, 0x03	; 3
    4888:	f7 01       	movw	r30, r14
    488a:	80 81       	ld	r24, Z
    488c:	91 81       	ldd	r25, Z+1	; 0x01
    488e:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4892:	41 e0       	ldi	r20, 0x01	; 1
    4894:	64 ef       	ldi	r22, 0xF4	; 244
    4896:	71 e0       	ldi	r23, 0x01	; 1
    4898:	ce 01       	movw	r24, r28
    489a:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    489e:	61 ed       	ldi	r22, 0xD1	; 209
    48a0:	75 e0       	ldi	r23, 0x05	; 5
    48a2:	88 e9       	ldi	r24, 0x98	; 152
    48a4:	97 e0       	ldi	r25, 0x07	; 7
    48a6:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    48aa:	b8 01       	movw	r22, r16
    48ac:	88 e9       	ldi	r24, 0x98	; 152
    48ae:	97 e0       	ldi	r25, 0x07	; 7
    48b0:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    48b4:	69 ec       	ldi	r22, 0xC9	; 201
    48b6:	75 e0       	ldi	r23, 0x05	; 5
    48b8:	c8 01       	movw	r24, r16
    48ba:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    48be:	89 2b       	or	r24, r25
    48c0:	11 f0       	breq	.+4      	; 0x48c6 <_ZN13Adafruit_FONA5beginER6Stream+0x2f4>
    48c2:	86 e0       	ldi	r24, 0x06	; 6
    48c4:	8d 87       	std	Y+13, r24	; 0x0d
    48c6:	8d 2d       	mov	r24, r13
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	ff 90       	pop	r15
    48d2:	ef 90       	pop	r14
    48d4:	df 90       	pop	r13
    48d6:	cf 90       	pop	r12
    48d8:	08 95       	ret

000048da <_ZN13Adafruit_FONA9HTTP_initEv>:
    48da:	fc 01       	movw	r30, r24
    48dc:	ea 5e       	subi	r30, 0xEA	; 234
    48de:	fe 4f       	sbci	r31, 0xFE	; 254
    48e0:	40 81       	ld	r20, Z
    48e2:	51 81       	ldd	r21, Z+1	; 0x01
    48e4:	24 ef       	ldi	r18, 0xF4	; 244
    48e6:	31 e0       	ldi	r19, 0x01	; 1
    48e8:	65 e8       	ldi	r22, 0x85	; 133
    48ea:	74 e0       	ldi	r23, 0x04	; 4
    48ec:	0c 94 cf 22 	jmp	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000048f0 <_ZN13Adafruit_FONA9HTTP_termEv>:
    48f0:	fc 01       	movw	r30, r24
    48f2:	ea 5e       	subi	r30, 0xEA	; 234
    48f4:	fe 4f       	sbci	r31, 0xFE	; 254
    48f6:	40 81       	ld	r20, Z
    48f8:	51 81       	ldd	r21, Z+1	; 0x01
    48fa:	24 ef       	ldi	r18, 0xF4	; 244
    48fc:	31 e0       	ldi	r19, 0x01	; 1
    48fe:	69 e7       	ldi	r22, 0x79	; 121
    4900:	74 e0       	ldi	r23, 0x04	; 4
    4902:	0c 94 cf 22 	jmp	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00004906 <_ZN13Adafruit_FONA13HTTP_POST_endEv>:
    4906:	0c 94 78 24 	jmp	0x48f0	; 0x48f0 <_ZN13Adafruit_FONA9HTTP_termEv>

0000490a <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>:
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	ec 01       	movw	r28, r24
    4914:	8a 01       	movw	r16, r20
    4916:	a9 01       	movw	r20, r18
    4918:	0e 94 5e 20 	call	0x40bc	; 0x40bc <_ZN13Adafruit_FONA8getReplyEPcj>
    491c:	88 23       	and	r24, r24
    491e:	41 f0       	breq	.+16     	; 0x4930 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x26>
    4920:	b8 01       	movw	r22, r16
    4922:	ce 01       	movw	r24, r28
    4924:	0e 96       	adiw	r24, 0x0e	; 14
    4926:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <strcmp_P>
    492a:	21 e0       	ldi	r18, 0x01	; 1
    492c:	89 2b       	or	r24, r25
    492e:	09 f0       	breq	.+2      	; 0x4932 <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj+0x28>
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	82 2f       	mov	r24, r18
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	1f 91       	pop	r17
    493a:	0f 91       	pop	r16
    493c:	08 95       	ret

0000493e <_ZN13Adafruit_FONA7sendSMSEPcS0_>:
    493e:	af 92       	push	r10
    4940:	bf 92       	push	r11
    4942:	cf 92       	push	r12
    4944:	df 92       	push	r13
    4946:	ef 92       	push	r14
    4948:	ff 92       	push	r15
    494a:	0f 93       	push	r16
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	cd b7       	in	r28, 0x3d	; 61
    4954:	de b7       	in	r29, 0x3e	; 62
    4956:	6e 97       	sbiw	r28, 0x1e	; 30
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	f8 94       	cli
    495c:	de bf       	out	0x3e, r29	; 62
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	8c 01       	movw	r16, r24
    4964:	5b 01       	movw	r10, r22
    4966:	6a 01       	movw	r12, r20
    4968:	fc 01       	movw	r30, r24
    496a:	ea 5e       	subi	r30, 0xEA	; 234
    496c:	fe 4f       	sbci	r31, 0xFE	; 254
    496e:	40 81       	ld	r20, Z
    4970:	51 81       	ldd	r21, Z+1	; 0x01
    4972:	24 ef       	ldi	r18, 0xF4	; 244
    4974:	31 e0       	ldi	r19, 0x01	; 1
    4976:	62 e9       	ldi	r22, 0x92	; 146
    4978:	75 e0       	ldi	r23, 0x05	; 5
    497a:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    497e:	88 23       	and	r24, r24
    4980:	09 f4       	brne	.+2      	; 0x4984 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x46>
    4982:	88 c0       	rjmp	.+272    	; 0x4a94 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4984:	8a e0       	ldi	r24, 0x0A	; 10
    4986:	e0 e1       	ldi	r30, 0x10	; 16
    4988:	f2 e0       	ldi	r31, 0x02	; 2
    498a:	9e 01       	movw	r18, r28
    498c:	2f 5f       	subi	r18, 0xFF	; 255
    498e:	3f 4f       	sbci	r19, 0xFF	; 255
    4990:	79 01       	movw	r14, r18
    4992:	d9 01       	movw	r26, r18
    4994:	01 90       	ld	r0, Z+
    4996:	0d 92       	st	X+, r0
    4998:	8a 95       	dec	r24
    499a:	e1 f7       	brne	.-8      	; 0x4994 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x56>
    499c:	fe 01       	movw	r30, r28
    499e:	3b 96       	adiw	r30, 0x0b	; 11
    49a0:	84 e1       	ldi	r24, 0x14	; 20
    49a2:	df 01       	movw	r26, r30
    49a4:	1d 92       	st	X+, r1
    49a6:	8a 95       	dec	r24
    49a8:	e9 f7       	brne	.-6      	; 0x49a4 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x66>
    49aa:	43 e1       	ldi	r20, 0x13	; 19
    49ac:	50 e0       	ldi	r21, 0x00	; 0
    49ae:	b5 01       	movw	r22, r10
    49b0:	ce 01       	movw	r24, r28
    49b2:	0a 96       	adiw	r24, 0x0a	; 10
    49b4:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <strncpy>
    49b8:	f7 01       	movw	r30, r14
    49ba:	01 90       	ld	r0, Z+
    49bc:	00 20       	and	r0, r0
    49be:	e9 f7       	brne	.-6      	; 0x49ba <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x7c>
    49c0:	31 97       	sbiw	r30, 0x01	; 1
    49c2:	82 e2       	ldi	r24, 0x22	; 34
    49c4:	80 83       	st	Z, r24
    49c6:	24 ef       	ldi	r18, 0xF4	; 244
    49c8:	31 e0       	ldi	r19, 0x01	; 1
    49ca:	4f e8       	ldi	r20, 0x8F	; 143
    49cc:	55 e0       	ldi	r21, 0x05	; 5
    49ce:	b7 01       	movw	r22, r14
    49d0:	c8 01       	movw	r24, r16
    49d2:	0e 94 85 24 	call	0x490a	; 0x490a <_ZN13Adafruit_FONA14sendCheckReplyEPcPK19__FlashStringHelperj>
    49d6:	88 23       	and	r24, r24
    49d8:	09 f4       	brne	.+2      	; 0x49dc <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x9e>
    49da:	5c c0       	rjmp	.+184    	; 0x4a94 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    49dc:	6c e8       	ldi	r22, 0x8C	; 140
    49de:	75 e0       	ldi	r23, 0x05	; 5
    49e0:	88 e9       	ldi	r24, 0x98	; 152
    49e2:	97 e0       	ldi	r25, 0x07	; 7
    49e4:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    49e8:	b6 01       	movw	r22, r12
    49ea:	88 e9       	ldi	r24, 0x98	; 152
    49ec:	97 e0       	ldi	r25, 0x07	; 7
    49ee:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    49f2:	b6 01       	movw	r22, r12
    49f4:	78 01       	movw	r14, r16
    49f6:	b8 ee       	ldi	r27, 0xE8	; 232
    49f8:	eb 1a       	sub	r14, r27
    49fa:	be ef       	ldi	r27, 0xFE	; 254
    49fc:	fb 0a       	sbc	r15, r27
    49fe:	f7 01       	movw	r30, r14
    4a00:	80 81       	ld	r24, Z
    4a02:	91 81       	ldd	r25, Z+1	; 0x01
    4a04:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4a08:	d7 01       	movw	r26, r14
    4a0a:	8d 91       	ld	r24, X+
    4a0c:	9c 91       	ld	r25, X
    4a0e:	0e 94 33 1b 	call	0x3666	; 0x3666 <_ZN5Print7printlnEv>
    4a12:	f7 01       	movw	r30, r14
    4a14:	80 81       	ld	r24, Z
    4a16:	91 81       	ldd	r25, Z+1	; 0x01
    4a18:	dc 01       	movw	r26, r24
    4a1a:	ed 91       	ld	r30, X+
    4a1c:	fc 91       	ld	r31, X
    4a1e:	01 90       	ld	r0, Z+
    4a20:	f0 81       	ld	r31, Z
    4a22:	e0 2d       	mov	r30, r0
    4a24:	6a e1       	ldi	r22, 0x1A	; 26
    4a26:	09 95       	icall
    4a28:	6a e2       	ldi	r22, 0x2A	; 42
    4a2a:	73 e0       	ldi	r23, 0x03	; 3
    4a2c:	88 e9       	ldi	r24, 0x98	; 152
    4a2e:	97 e0       	ldi	r25, 0x07	; 7
    4a30:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4a34:	f8 01       	movw	r30, r16
    4a36:	85 85       	ldd	r24, Z+13	; 0x0d
    4a38:	84 50       	subi	r24, 0x04	; 4
    4a3a:	82 30       	cpi	r24, 0x02	; 2
    4a3c:	60 f4       	brcc	.+24     	; 0x4a56 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x118>
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	68 ec       	ldi	r22, 0xC8	; 200
    4a42:	70 e0       	ldi	r23, 0x00	; 0
    4a44:	c8 01       	movw	r24, r16
    4a46:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4a4a:	40 e0       	ldi	r20, 0x00	; 0
    4a4c:	68 ec       	ldi	r22, 0xC8	; 200
    4a4e:	70 e0       	ldi	r23, 0x00	; 0
    4a50:	c8 01       	movw	r24, r16
    4a52:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	60 e1       	ldi	r22, 0x10	; 16
    4a5a:	77 e2       	ldi	r23, 0x27	; 39
    4a5c:	c8 01       	movw	r24, r16
    4a5e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4a62:	78 01       	movw	r14, r16
    4a64:	fe e0       	ldi	r31, 0x0E	; 14
    4a66:	ef 0e       	add	r14, r31
    4a68:	f1 1c       	adc	r15, r1
    4a6a:	6d e2       	ldi	r22, 0x2D	; 45
    4a6c:	73 e0       	ldi	r23, 0x03	; 3
    4a6e:	c7 01       	movw	r24, r14
    4a70:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <strstr>
    4a74:	89 2b       	or	r24, r25
    4a76:	71 f0       	breq	.+28     	; 0x4a94 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x156>
    4a78:	40 e0       	ldi	r20, 0x00	; 0
    4a7a:	68 ee       	ldi	r22, 0xE8	; 232
    4a7c:	73 e0       	ldi	r23, 0x03	; 3
    4a7e:	c8 01       	movw	r24, r16
    4a80:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	73 e0       	ldi	r23, 0x03	; 3
    4a88:	c7 01       	movw	r24, r14
    4a8a:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <strcmp>
    4a8e:	21 e0       	ldi	r18, 0x01	; 1
    4a90:	89 2b       	or	r24, r25
    4a92:	09 f0       	breq	.+2      	; 0x4a96 <_ZN13Adafruit_FONA7sendSMSEPcS0_+0x158>
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	82 2f       	mov	r24, r18
    4a98:	6e 96       	adiw	r28, 0x1e	; 30
    4a9a:	0f b6       	in	r0, 0x3f	; 63
    4a9c:	f8 94       	cli
    4a9e:	de bf       	out	0x3e, r29	; 62
    4aa0:	0f be       	out	0x3f, r0	; 63
    4aa2:	cd bf       	out	0x3d, r28	; 61
    4aa4:	df 91       	pop	r29
    4aa6:	cf 91       	pop	r28
    4aa8:	1f 91       	pop	r17
    4aaa:	0f 91       	pop	r16
    4aac:	ff 90       	pop	r15
    4aae:	ef 90       	pop	r14
    4ab0:	df 90       	pop	r13
    4ab2:	cf 90       	pop	r12
    4ab4:	bf 90       	pop	r11
    4ab6:	af 90       	pop	r10
    4ab8:	08 95       	ret

00004aba <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    4aba:	cf 92       	push	r12
    4abc:	df 92       	push	r13
    4abe:	ef 92       	push	r14
    4ac0:	ff 92       	push	r15
    4ac2:	0f 93       	push	r16
    4ac4:	1f 93       	push	r17
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	ec 01       	movw	r28, r24
    4acc:	68 01       	movw	r12, r16
    4ace:	87 01       	movw	r16, r14
    4ad0:	0e 94 11 22 	call	0x4422	; 0x4422 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    4ad4:	b6 01       	movw	r22, r12
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	0e 96       	adiw	r24, 0x0e	; 14
    4ada:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <strcmp_P>
    4ade:	21 e0       	ldi	r18, 0x01	; 1
    4ae0:	89 2b       	or	r24, r25
    4ae2:	09 f0       	breq	.+2      	; 0x4ae6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	82 2f       	mov	r24, r18
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	1f 91       	pop	r17
    4aee:	0f 91       	pop	r16
    4af0:	ff 90       	pop	r15
    4af2:	ef 90       	pop	r14
    4af4:	df 90       	pop	r13
    4af6:	cf 90       	pop	r12
    4af8:	08 95       	ret

00004afa <_ZN13Adafruit_FONA8HTTP_sslEb>:
    4afa:	ef 92       	push	r14
    4afc:	ff 92       	push	r15
    4afe:	0f 93       	push	r16
    4b00:	1f 93       	push	r17
    4b02:	fc 01       	movw	r30, r24
    4b04:	ea 5e       	subi	r30, 0xEA	; 234
    4b06:	fe 4f       	sbci	r31, 0xFE	; 254
    4b08:	00 81       	ld	r16, Z
    4b0a:	11 81       	ldd	r17, Z+1	; 0x01
    4b0c:	26 2f       	mov	r18, r22
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	40 e0       	ldi	r20, 0x00	; 0
    4b12:	50 e0       	ldi	r21, 0x00	; 0
    4b14:	64 ef       	ldi	r22, 0xF4	; 244
    4b16:	e6 2e       	mov	r14, r22
    4b18:	ff 24       	eor	r15, r15
    4b1a:	f3 94       	inc	r15
    4b1c:	69 ed       	ldi	r22, 0xD9	; 217
    4b1e:	73 e0       	ldi	r23, 0x03	; 3
    4b20:	0e 94 5d 25 	call	0x4aba	; 0x4aba <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4b24:	1f 91       	pop	r17
    4b26:	0f 91       	pop	r16
    4b28:	ff 90       	pop	r15
    4b2a:	ef 90       	pop	r14
    4b2c:	08 95       	ret

00004b2e <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    4b2e:	0f 93       	push	r16
    4b30:	1f 93       	push	r17
    4b32:	cf 93       	push	r28
    4b34:	df 93       	push	r29
    4b36:	ec 01       	movw	r28, r24
    4b38:	8b 01       	movw	r16, r22
    4b3a:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_ZN13Adafruit_FONA9HTTP_termEv>
    4b3e:	ce 01       	movw	r24, r28
    4b40:	0e 94 6d 24 	call	0x48da	; 0x48da <_ZN13Adafruit_FONA9HTTP_initEv>
    4b44:	81 11       	cpse	r24, r1
    4b46:	02 c0       	rjmp	.+4      	; 0x4b4c <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1e>
    4b48:	80 e0       	ldi	r24, 0x00	; 0
    4b4a:	38 c0       	rjmp	.+112    	; 0x4bbc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4b4c:	21 e0       	ldi	r18, 0x01	; 1
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e0       	ldi	r20, 0x00	; 0
    4b52:	50 e0       	ldi	r21, 0x00	; 0
    4b54:	6e eb       	ldi	r22, 0xBE	; 190
    4b56:	73 e0       	ldi	r23, 0x03	; 3
    4b58:	ce 01       	movw	r24, r28
    4b5a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4b5e:	88 23       	and	r24, r24
    4b60:	99 f3       	breq	.-26     	; 0x4b48 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4b62:	fe 01       	movw	r30, r28
    4b64:	ec 5e       	subi	r30, 0xEC	; 236
    4b66:	fe 4f       	sbci	r31, 0xFE	; 254
    4b68:	40 81       	ld	r20, Z
    4b6a:	51 81       	ldd	r21, Z+1	; 0x01
    4b6c:	6b eb       	ldi	r22, 0xBB	; 187
    4b6e:	73 e0       	ldi	r23, 0x03	; 3
    4b70:	ce 01       	movw	r24, r28
    4b72:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    4b76:	88 23       	and	r24, r24
    4b78:	39 f3       	breq	.-50     	; 0x4b48 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4b7a:	a8 01       	movw	r20, r16
    4b7c:	67 eb       	ldi	r22, 0xB7	; 183
    4b7e:	73 e0       	ldi	r23, 0x03	; 3
    4b80:	ce 01       	movw	r24, r28
    4b82:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    4b86:	88 23       	and	r24, r24
    4b88:	f9 f2       	breq	.-66     	; 0x4b48 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	ed 5e       	subi	r30, 0xED	; 237
    4b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b90:	90 81       	ld	r25, Z
    4b92:	99 23       	and	r25, r25
    4b94:	99 f0       	breq	.+38     	; 0x4bbc <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8e>
    4b96:	21 e0       	ldi	r18, 0x01	; 1
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	40 e0       	ldi	r20, 0x00	; 0
    4b9c:	50 e0       	ldi	r21, 0x00	; 0
    4b9e:	61 eb       	ldi	r22, 0xB1	; 177
    4ba0:	73 e0       	ldi	r23, 0x03	; 3
    4ba2:	ce 01       	movw	r24, r28
    4ba4:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    4ba8:	88 23       	and	r24, r24
    4baa:	71 f2       	breq	.-100    	; 0x4b48 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x1a>
    4bac:	61 e0       	ldi	r22, 0x01	; 1
    4bae:	ce 01       	movw	r24, r28
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	0f 91       	pop	r16
    4bb8:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <_ZN13Adafruit_FONA8HTTP_sslEb>
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	1f 91       	pop	r17
    4bc2:	0f 91       	pop	r16
    4bc4:	08 95       	ret

00004bc6 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    4bc6:	ef 92       	push	r14
    4bc8:	ff 92       	push	r15
    4bca:	0f 93       	push	r16
    4bcc:	1f 93       	push	r17
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	ec 01       	movw	r28, r24
    4bd4:	79 01       	movw	r14, r18
    4bd6:	98 01       	movw	r18, r16
    4bd8:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    4bdc:	b7 01       	movw	r22, r14
    4bde:	ce 01       	movw	r24, r28
    4be0:	0e 96       	adiw	r24, 0x0e	; 14
    4be2:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <strcmp_P>
    4be6:	21 e0       	ldi	r18, 0x01	; 1
    4be8:	89 2b       	or	r24, r25
    4bea:	09 f0       	breq	.+2      	; 0x4bee <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	82 2f       	mov	r24, r18
    4bf0:	df 91       	pop	r29
    4bf2:	cf 91       	pop	r28
    4bf4:	1f 91       	pop	r17
    4bf6:	0f 91       	pop	r16
    4bf8:	ff 90       	pop	r15
    4bfa:	ef 90       	pop	r14
    4bfc:	08 95       	ret

00004bfe <_ZN13Adafruit_FONA10enableGPRSEb>:
    4bfe:	8f 92       	push	r8
    4c00:	9f 92       	push	r9
    4c02:	af 92       	push	r10
    4c04:	bf 92       	push	r11
    4c06:	cf 92       	push	r12
    4c08:	df 92       	push	r13
    4c0a:	ef 92       	push	r14
    4c0c:	ff 92       	push	r15
    4c0e:	0f 93       	push	r16
    4c10:	1f 93       	push	r17
    4c12:	cf 93       	push	r28
    4c14:	df 93       	push	r29
    4c16:	ec 01       	movw	r28, r24
    4c18:	20 e2       	ldi	r18, 0x20	; 32
    4c1a:	3e e4       	ldi	r19, 0x4E	; 78
    4c1c:	66 23       	and	r22, r22
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <_ZN13Adafruit_FONA10enableGPRSEb+0x24>
    4c20:	0f c1       	rjmp	.+542    	; 0x4e40 <_ZN13Adafruit_FONA10enableGPRSEb+0x242>
    4c22:	4e e5       	ldi	r20, 0x5E	; 94
    4c24:	55 e0       	ldi	r21, 0x05	; 5
    4c26:	63 e5       	ldi	r22, 0x53	; 83
    4c28:	75 e0       	ldi	r23, 0x05	; 5
    4c2a:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4c2e:	7e 01       	movw	r14, r28
    4c30:	8a ee       	ldi	r24, 0xEA	; 234
    4c32:	e8 1a       	sub	r14, r24
    4c34:	8e ef       	ldi	r24, 0xFE	; 254
    4c36:	f8 0a       	sbc	r15, r24
    4c38:	f7 01       	movw	r30, r14
    4c3a:	40 81       	ld	r20, Z
    4c3c:	51 81       	ldd	r21, Z+1	; 0x01
    4c3e:	20 e1       	ldi	r18, 0x10	; 16
    4c40:	37 e2       	ldi	r19, 0x27	; 39
    4c42:	68 e4       	ldi	r22, 0x48	; 72
    4c44:	75 e0       	ldi	r23, 0x05	; 5
    4c46:	ce 01       	movw	r24, r28
    4c48:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4c4c:	88 23       	and	r24, r24
    4c4e:	09 f4       	brne	.+2      	; 0x4c52 <_ZN13Adafruit_FONA10enableGPRSEb+0x54>
    4c50:	24 c1       	rjmp	.+584    	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4c52:	f7 01       	movw	r30, r14
    4c54:	40 81       	ld	r20, Z
    4c56:	51 81       	ldd	r21, Z+1	; 0x01
    4c58:	20 e1       	ldi	r18, 0x10	; 16
    4c5a:	37 e2       	ldi	r19, 0x27	; 39
    4c5c:	6a e2       	ldi	r22, 0x2A	; 42
    4c5e:	75 e0       	ldi	r23, 0x05	; 5
    4c60:	ce 01       	movw	r24, r28
    4c62:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4c66:	88 23       	and	r24, r24
    4c68:	09 f4       	brne	.+2      	; 0x4c6c <_ZN13Adafruit_FONA10enableGPRSEb+0x6e>
    4c6a:	17 c1       	rjmp	.+558    	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4c6c:	4e 01       	movw	r8, r28
    4c6e:	f3 ef       	ldi	r31, 0xF3	; 243
    4c70:	8f 1a       	sub	r8, r31
    4c72:	fe ef       	ldi	r31, 0xFE	; 254
    4c74:	9f 0a       	sbc	r9, r31
    4c76:	f4 01       	movw	r30, r8
    4c78:	40 81       	ld	r20, Z
    4c7a:	51 81       	ldd	r21, Z+1	; 0x01
    4c7c:	41 15       	cp	r20, r1
    4c7e:	51 05       	cpc	r21, r1
    4c80:	a9 f4       	brne	.+42     	; 0x4cac <_ZN13Adafruit_FONA10enableGPRSEb+0xae>
    4c82:	f7 01       	movw	r30, r14
    4c84:	40 81       	ld	r20, Z
    4c86:	51 81       	ldd	r21, Z+1	; 0x01
    4c88:	20 e3       	ldi	r18, 0x30	; 48
    4c8a:	35 e7       	ldi	r19, 0x75	; 117
    4c8c:	65 ec       	ldi	r22, 0xC5	; 197
    4c8e:	74 e0       	ldi	r23, 0x04	; 4
    4c90:	ce 01       	movw	r24, r28
    4c92:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4c96:	88 23       	and	r24, r24
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <_ZN13Adafruit_FONA10enableGPRSEb+0x9e>
    4c9a:	ff c0       	rjmp	.+510    	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4c9c:	f7 01       	movw	r30, r14
    4c9e:	40 81       	ld	r20, Z
    4ca0:	51 81       	ldd	r21, Z+1	; 0x01
    4ca2:	20 e1       	ldi	r18, 0x10	; 16
    4ca4:	37 e2       	ldi	r19, 0x27	; 39
    4ca6:	6c eb       	ldi	r22, 0xBC	; 188
    4ca8:	74 e0       	ldi	r23, 0x04	; 4
    4caa:	e8 c0       	rjmp	.+464    	; 0x4e7c <_ZN13Adafruit_FONA10enableGPRSEb+0x27e>
    4cac:	f7 01       	movw	r30, r14
    4cae:	20 81       	ld	r18, Z
    4cb0:	31 81       	ldd	r19, Z+1	; 0x01
    4cb2:	00 e1       	ldi	r16, 0x10	; 16
    4cb4:	17 e2       	ldi	r17, 0x27	; 39
    4cb6:	66 e1       	ldi	r22, 0x16	; 22
    4cb8:	75 e0       	ldi	r23, 0x05	; 5
    4cba:	ce 01       	movw	r24, r28
    4cbc:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4cc0:	88 23       	and	r24, r24
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <_ZN13Adafruit_FONA10enableGPRSEb+0xc8>
    4cc4:	ea c0       	rjmp	.+468    	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_ZN13Adafruit_FONA10flushInputEv>
    4ccc:	8e 01       	movw	r16, r28
    4cce:	08 5e       	subi	r16, 0xE8	; 232
    4cd0:	1e 4f       	sbci	r17, 0xFE	; 254
    4cd2:	6c e0       	ldi	r22, 0x0C	; 12
    4cd4:	75 e0       	ldi	r23, 0x05	; 5
    4cd6:	f8 01       	movw	r30, r16
    4cd8:	80 81       	ld	r24, Z
    4cda:	91 81       	ldd	r25, Z+1	; 0x01
    4cdc:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4ce0:	f4 01       	movw	r30, r8
    4ce2:	60 81       	ld	r22, Z
    4ce4:	71 81       	ldd	r23, Z+1	; 0x01
    4ce6:	f8 01       	movw	r30, r16
    4ce8:	80 81       	ld	r24, Z
    4cea:	91 81       	ldd	r25, Z+1	; 0x01
    4cec:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4cf0:	5e 01       	movw	r10, r28
    4cf2:	f1 ef       	ldi	r31, 0xF1	; 241
    4cf4:	af 1a       	sub	r10, r31
    4cf6:	fe ef       	ldi	r31, 0xFE	; 254
    4cf8:	bf 0a       	sbc	r11, r31
    4cfa:	f5 01       	movw	r30, r10
    4cfc:	80 81       	ld	r24, Z
    4cfe:	91 81       	ldd	r25, Z+1	; 0x01
    4d00:	89 2b       	or	r24, r25
    4d02:	79 f0       	breq	.+30     	; 0x4d22 <_ZN13Adafruit_FONA10enableGPRSEb+0x124>
    4d04:	6e e4       	ldi	r22, 0x4E	; 78
    4d06:	73 e0       	ldi	r23, 0x03	; 3
    4d08:	f8 01       	movw	r30, r16
    4d0a:	80 81       	ld	r24, Z
    4d0c:	91 81       	ldd	r25, Z+1	; 0x01
    4d0e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    4d12:	f5 01       	movw	r30, r10
    4d14:	60 81       	ld	r22, Z
    4d16:	71 81       	ldd	r23, Z+1	; 0x01
    4d18:	f8 01       	movw	r30, r16
    4d1a:	80 81       	ld	r24, Z
    4d1c:	91 81       	ldd	r25, Z+1	; 0x01
    4d1e:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4d22:	6e 01       	movw	r12, r28
    4d24:	ff ee       	ldi	r31, 0xEF	; 239
    4d26:	cf 1a       	sub	r12, r31
    4d28:	fe ef       	ldi	r31, 0xFE	; 254
    4d2a:	df 0a       	sbc	r13, r31
    4d2c:	f6 01       	movw	r30, r12
    4d2e:	80 81       	ld	r24, Z
    4d30:	91 81       	ldd	r25, Z+1	; 0x01
    4d32:	89 2b       	or	r24, r25
    4d34:	79 f0       	breq	.+30     	; 0x4d54 <_ZN13Adafruit_FONA10enableGPRSEb+0x156>
    4d36:	6e e4       	ldi	r22, 0x4E	; 78
    4d38:	73 e0       	ldi	r23, 0x03	; 3
    4d3a:	f8 01       	movw	r30, r16
    4d3c:	80 81       	ld	r24, Z
    4d3e:	91 81       	ldd	r25, Z+1	; 0x01
    4d40:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    4d44:	f6 01       	movw	r30, r12
    4d46:	60 81       	ld	r22, Z
    4d48:	71 81       	ldd	r23, Z+1	; 0x01
    4d4a:	f8 01       	movw	r30, r16
    4d4c:	80 81       	ld	r24, Z
    4d4e:	91 81       	ldd	r25, Z+1	; 0x01
    4d50:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4d54:	60 e5       	ldi	r22, 0x50	; 80
    4d56:	73 e0       	ldi	r23, 0x03	; 3
    4d58:	f8 01       	movw	r30, r16
    4d5a:	80 81       	ld	r24, Z
    4d5c:	91 81       	ldd	r25, Z+1	; 0x01
    4d5e:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4d62:	65 e0       	ldi	r22, 0x05	; 5
    4d64:	75 e0       	ldi	r23, 0x05	; 5
    4d66:	88 e9       	ldi	r24, 0x98	; 152
    4d68:	97 e0       	ldi	r25, 0x07	; 7
    4d6a:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4d6e:	6b ef       	ldi	r22, 0xFB	; 251
    4d70:	74 e0       	ldi	r23, 0x04	; 4
    4d72:	88 e9       	ldi	r24, 0x98	; 152
    4d74:	97 e0       	ldi	r25, 0x07	; 7
    4d76:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4d7a:	f4 01       	movw	r30, r8
    4d7c:	60 81       	ld	r22, Z
    4d7e:	71 81       	ldd	r23, Z+1	; 0x01
    4d80:	88 e9       	ldi	r24, 0x98	; 152
    4d82:	97 e0       	ldi	r25, 0x07	; 7
    4d84:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4d88:	f5 01       	movw	r30, r10
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	89 2b       	or	r24, r25
    4d90:	69 f0       	breq	.+26     	; 0x4dac <_ZN13Adafruit_FONA10enableGPRSEb+0x1ae>
    4d92:	6e e4       	ldi	r22, 0x4E	; 78
    4d94:	73 e0       	ldi	r23, 0x03	; 3
    4d96:	88 e9       	ldi	r24, 0x98	; 152
    4d98:	97 e0       	ldi	r25, 0x07	; 7
    4d9a:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    4d9e:	f5 01       	movw	r30, r10
    4da0:	60 81       	ld	r22, Z
    4da2:	71 81       	ldd	r23, Z+1	; 0x01
    4da4:	88 e9       	ldi	r24, 0x98	; 152
    4da6:	97 e0       	ldi	r25, 0x07	; 7
    4da8:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4dac:	f6 01       	movw	r30, r12
    4dae:	80 81       	ld	r24, Z
    4db0:	91 81       	ldd	r25, Z+1	; 0x01
    4db2:	89 2b       	or	r24, r25
    4db4:	69 f0       	breq	.+26     	; 0x4dd0 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d2>
    4db6:	6e e4       	ldi	r22, 0x4E	; 78
    4db8:	73 e0       	ldi	r23, 0x03	; 3
    4dba:	88 e9       	ldi	r24, 0x98	; 152
    4dbc:	97 e0       	ldi	r25, 0x07	; 7
    4dbe:	0e 94 2a 1b 	call	0x3654	; 0x3654 <_ZN5Print5printEPKc>
    4dc2:	f6 01       	movw	r30, r12
    4dc4:	60 81       	ld	r22, Z
    4dc6:	71 81       	ldd	r23, Z+1	; 0x01
    4dc8:	88 e9       	ldi	r24, 0x98	; 152
    4dca:	97 e0       	ldi	r25, 0x07	; 7
    4dcc:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    4dd0:	60 e5       	ldi	r22, 0x50	; 80
    4dd2:	73 e0       	ldi	r23, 0x03	; 3
    4dd4:	88 e9       	ldi	r24, 0x98	; 152
    4dd6:	97 e0       	ldi	r25, 0x07	; 7
    4dd8:	0e 94 49 1b 	call	0x3692	; 0x3692 <_ZN5Print7printlnEPKc>
    4ddc:	f7 01       	movw	r30, r14
    4dde:	60 81       	ld	r22, Z
    4de0:	71 81       	ldd	r23, Z+1	; 0x01
    4de2:	40 e1       	ldi	r20, 0x10	; 16
    4de4:	57 e2       	ldi	r21, 0x27	; 39
    4de6:	ce 01       	movw	r24, r28
    4de8:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    4dec:	88 23       	and	r24, r24
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f4>
    4df0:	54 c0       	rjmp	.+168    	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4df2:	f5 01       	movw	r30, r10
    4df4:	40 81       	ld	r20, Z
    4df6:	51 81       	ldd	r21, Z+1	; 0x01
    4df8:	41 15       	cp	r20, r1
    4dfa:	51 05       	cpc	r21, r1
    4dfc:	39 f4       	brne	.+14     	; 0x4e0c <_ZN13Adafruit_FONA10enableGPRSEb+0x20e>
    4dfe:	f6 01       	movw	r30, r12
    4e00:	40 81       	ld	r20, Z
    4e02:	51 81       	ldd	r21, Z+1	; 0x01
    4e04:	41 15       	cp	r20, r1
    4e06:	51 05       	cpc	r21, r1
    4e08:	71 f4       	brne	.+28     	; 0x4e26 <_ZN13Adafruit_FONA10enableGPRSEb+0x228>
    4e0a:	3b cf       	rjmp	.-394    	; 0x4c82 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    4e0c:	f7 01       	movw	r30, r14
    4e0e:	20 81       	ld	r18, Z
    4e10:	31 81       	ldd	r19, Z+1	; 0x01
    4e12:	00 e1       	ldi	r16, 0x10	; 16
    4e14:	17 e2       	ldi	r17, 0x27	; 39
    4e16:	66 ee       	ldi	r22, 0xE6	; 230
    4e18:	74 e0       	ldi	r23, 0x04	; 4
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4e20:	81 11       	cpse	r24, r1
    4e22:	ed cf       	rjmp	.-38     	; 0x4dfe <_ZN13Adafruit_FONA10enableGPRSEb+0x200>
    4e24:	3a c0       	rjmp	.+116    	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e26:	f7 01       	movw	r30, r14
    4e28:	20 81       	ld	r18, Z
    4e2a:	31 81       	ldd	r19, Z+1	; 0x01
    4e2c:	00 e1       	ldi	r16, 0x10	; 16
    4e2e:	17 e2       	ldi	r17, 0x27	; 39
    4e30:	62 ed       	ldi	r22, 0xD2	; 210
    4e32:	74 e0       	ldi	r23, 0x04	; 4
    4e34:	ce 01       	movw	r24, r28
    4e36:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    4e3a:	81 11       	cpse	r24, r1
    4e3c:	22 cf       	rjmp	.-444    	; 0x4c82 <_ZN13Adafruit_FONA10enableGPRSEb+0x84>
    4e3e:	2d c0       	rjmp	.+90     	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e40:	44 eb       	ldi	r20, 0xB4	; 180
    4e42:	54 e0       	ldi	r21, 0x04	; 4
    4e44:	69 ea       	ldi	r22, 0xA9	; 169
    4e46:	74 e0       	ldi	r23, 0x04	; 4
    4e48:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e4c:	88 23       	and	r24, r24
    4e4e:	29 f1       	breq	.+74     	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e50:	8e 01       	movw	r16, r28
    4e52:	0a 5e       	subi	r16, 0xEA	; 234
    4e54:	1e 4f       	sbci	r17, 0xFE	; 254
    4e56:	f8 01       	movw	r30, r16
    4e58:	40 81       	ld	r20, Z
    4e5a:	51 81       	ldd	r21, Z+1	; 0x01
    4e5c:	20 e1       	ldi	r18, 0x10	; 16
    4e5e:	37 e2       	ldi	r19, 0x27	; 39
    4e60:	6c e9       	ldi	r22, 0x9C	; 156
    4e62:	74 e0       	ldi	r23, 0x04	; 4
    4e64:	ce 01       	movw	r24, r28
    4e66:	0e 94 cf 22 	call	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e6a:	88 23       	and	r24, r24
    4e6c:	b1 f0       	breq	.+44     	; 0x4e9a <_ZN13Adafruit_FONA10enableGPRSEb+0x29c>
    4e6e:	f8 01       	movw	r30, r16
    4e70:	40 81       	ld	r20, Z
    4e72:	51 81       	ldd	r21, Z+1	; 0x01
    4e74:	20 e1       	ldi	r18, 0x10	; 16
    4e76:	37 e2       	ldi	r19, 0x27	; 39
    4e78:	61 e9       	ldi	r22, 0x91	; 145
    4e7a:	74 e0       	ldi	r23, 0x04	; 4
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	df 90       	pop	r13
    4e8c:	cf 90       	pop	r12
    4e8e:	bf 90       	pop	r11
    4e90:	af 90       	pop	r10
    4e92:	9f 90       	pop	r9
    4e94:	8f 90       	pop	r8
    4e96:	0c 94 cf 22 	jmp	0x459e	; 0x459e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	ff 90       	pop	r15
    4ea6:	ef 90       	pop	r14
    4ea8:	df 90       	pop	r13
    4eaa:	cf 90       	pop	r12
    4eac:	bf 90       	pop	r11
    4eae:	af 90       	pop	r10
    4eb0:	9f 90       	pop	r9
    4eb2:	8f 90       	pop	r8
    4eb4:	08 95       	ret

00004eb6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    4eb6:	af 92       	push	r10
    4eb8:	bf 92       	push	r11
    4eba:	cf 92       	push	r12
    4ebc:	df 92       	push	r13
    4ebe:	ef 92       	push	r14
    4ec0:	ff 92       	push	r15
    4ec2:	0f 93       	push	r16
    4ec4:	cf 93       	push	r28
    4ec6:	df 93       	push	r29
    4ec8:	5b 01       	movw	r10, r22
    4eca:	6a 01       	movw	r12, r20
    4ecc:	e2 2e       	mov	r14, r18
    4ece:	0e 96       	adiw	r24, 0x0e	; 14
    4ed0:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <strstr_P>
    4ed4:	ec 01       	movw	r28, r24
    4ed6:	89 2b       	or	r24, r25
    4ed8:	c1 f0       	breq	.+48     	; 0x4f0a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    4eda:	c5 01       	movw	r24, r10
    4edc:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__strlen_P>
    4ee0:	8c 0f       	add	r24, r28
    4ee2:	9d 1f       	adc	r25, r29
    4ee4:	c0 e0       	ldi	r28, 0x00	; 0
    4ee6:	f1 2c       	mov	r15, r1
    4ee8:	c0 17       	cp	r28, r16
    4eea:	41 f0       	breq	.+16     	; 0x4efc <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    4eec:	b7 01       	movw	r22, r14
    4eee:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <strchr>
    4ef2:	00 97       	sbiw	r24, 0x00	; 0
    4ef4:	51 f0       	breq	.+20     	; 0x4f0a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    4ef6:	01 96       	adiw	r24, 0x01	; 1
    4ef8:	cf 5f       	subi	r28, 0xFF	; 255
    4efa:	f6 cf       	rjmp	.-20     	; 0x4ee8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    4efc:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <atoi>
    4f00:	f6 01       	movw	r30, r12
    4f02:	91 83       	std	Z+1, r25	; 0x01
    4f04:	80 83       	st	Z, r24
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	01 c0       	rjmp	.+2      	; 0x4f0c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	df 91       	pop	r29
    4f0e:	cf 91       	pop	r28
    4f10:	0f 91       	pop	r16
    4f12:	ff 90       	pop	r15
    4f14:	ef 90       	pop	r14
    4f16:	df 90       	pop	r13
    4f18:	cf 90       	pop	r12
    4f1a:	bf 90       	pop	r11
    4f1c:	af 90       	pop	r10
    4f1e:	08 95       	ret

00004f20 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    4f20:	ef 92       	push	r14
    4f22:	ff 92       	push	r15
    4f24:	0f 93       	push	r16
    4f26:	cf 93       	push	r28
    4f28:	df 93       	push	r29
    4f2a:	ec 01       	movw	r28, r24
    4f2c:	7b 01       	movw	r14, r22
    4f2e:	44 ef       	ldi	r20, 0xF4	; 244
    4f30:	51 e0       	ldi	r21, 0x01	; 1
    4f32:	60 ef       	ldi	r22, 0xF0	; 240
    4f34:	73 e0       	ldi	r23, 0x03	; 3
    4f36:	0e 94 97 20 	call	0x412e	; 0x412e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    4f3a:	00 e0       	ldi	r16, 0x00	; 0
    4f3c:	2c e2       	ldi	r18, 0x2C	; 44
    4f3e:	a7 01       	movw	r20, r14
    4f40:	65 ee       	ldi	r22, 0xE5	; 229
    4f42:	73 e0       	ldi	r23, 0x03	; 3
    4f44:	ce 01       	movw	r24, r28
    4f46:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4f4a:	df 91       	pop	r29
    4f4c:	cf 91       	pop	r28
    4f4e:	0f 91       	pop	r16
    4f50:	ff 90       	pop	r15
    4f52:	ef 90       	pop	r14
    4f54:	08 95       	ret

00004f56 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    4f56:	4f 92       	push	r4
    4f58:	5f 92       	push	r5
    4f5a:	6f 92       	push	r6
    4f5c:	7f 92       	push	r7
    4f5e:	af 92       	push	r10
    4f60:	bf 92       	push	r11
    4f62:	cf 92       	push	r12
    4f64:	df 92       	push	r13
    4f66:	ef 92       	push	r14
    4f68:	ff 92       	push	r15
    4f6a:	0f 93       	push	r16
    4f6c:	1f 93       	push	r17
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	ec 01       	movw	r28, r24
    4f74:	5a 01       	movw	r10, r20
    4f76:	69 01       	movw	r12, r18
    4f78:	27 01       	movw	r4, r14
    4f7a:	38 01       	movw	r6, r16
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	ea 5e       	subi	r30, 0xEA	; 234
    4f80:	fe 4f       	sbci	r31, 0xFE	; 254
    4f82:	00 81       	ld	r16, Z
    4f84:	11 81       	ldd	r17, Z+1	; 0x01
    4f86:	26 2f       	mov	r18, r22
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	40 e0       	ldi	r20, 0x00	; 0
    4f8c:	50 e0       	ldi	r21, 0x00	; 0
    4f8e:	84 ef       	ldi	r24, 0xF4	; 244
    4f90:	e8 2e       	mov	r14, r24
    4f92:	ff 24       	eor	r15, r15
    4f94:	f3 94       	inc	r15
    4f96:	66 e1       	ldi	r22, 0x16	; 22
    4f98:	74 e0       	ldi	r23, 0x04	; 4
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	0e 94 5d 25 	call	0x4aba	; 0x4aba <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    4fa0:	81 11       	cpse	r24, r1
    4fa2:	02 c0       	rjmp	.+4      	; 0x4fa8 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
    4fa6:	17 c0       	rjmp	.+46     	; 0x4fd6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    4fa8:	40 e0       	ldi	r20, 0x00	; 0
    4faa:	b2 01       	movw	r22, r4
    4fac:	ce 01       	movw	r24, r28
    4fae:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    4fb2:	01 e0       	ldi	r16, 0x01	; 1
    4fb4:	2c e2       	ldi	r18, 0x2C	; 44
    4fb6:	a5 01       	movw	r20, r10
    4fb8:	69 e0       	ldi	r22, 0x09	; 9
    4fba:	74 e0       	ldi	r23, 0x04	; 4
    4fbc:	ce 01       	movw	r24, r28
    4fbe:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4fc2:	88 23       	and	r24, r24
    4fc4:	79 f3       	breq	.-34     	; 0x4fa4 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    4fc6:	02 e0       	ldi	r16, 0x02	; 2
    4fc8:	2c e2       	ldi	r18, 0x2C	; 44
    4fca:	a6 01       	movw	r20, r12
    4fcc:	6c ef       	ldi	r22, 0xFC	; 252
    4fce:	73 e0       	ldi	r23, 0x03	; 3
    4fd0:	ce 01       	movw	r24, r28
    4fd2:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	1f 91       	pop	r17
    4fdc:	0f 91       	pop	r16
    4fde:	ff 90       	pop	r15
    4fe0:	ef 90       	pop	r14
    4fe2:	df 90       	pop	r13
    4fe4:	cf 90       	pop	r12
    4fe6:	bf 90       	pop	r11
    4fe8:	af 90       	pop	r10
    4fea:	7f 90       	pop	r7
    4fec:	6f 90       	pop	r6
    4fee:	5f 90       	pop	r5
    4ff0:	4f 90       	pop	r4
    4ff2:	08 95       	ret

00004ff4 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    4ff4:	4f 92       	push	r4
    4ff6:	5f 92       	push	r5
    4ff8:	6f 92       	push	r6
    4ffa:	7f 92       	push	r7
    4ffc:	8f 92       	push	r8
    4ffe:	9f 92       	push	r9
    5000:	af 92       	push	r10
    5002:	bf 92       	push	r11
    5004:	cf 92       	push	r12
    5006:	df 92       	push	r13
    5008:	ef 92       	push	r14
    500a:	ff 92       	push	r15
    500c:	0f 93       	push	r16
    500e:	1f 93       	push	r17
    5010:	cf 93       	push	r28
    5012:	df 93       	push	r29
    5014:	ec 01       	movw	r28, r24
    5016:	2a 01       	movw	r4, r20
    5018:	39 01       	movw	r6, r18
    501a:	48 01       	movw	r8, r16
    501c:	57 01       	movw	r10, r14
    501e:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <_ZN13Adafruit_FONA10HTTP_setupEPc>
    5022:	88 23       	and	r24, r24
    5024:	09 f4       	brne	.+2      	; 0x5028 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    5026:	71 c0       	rjmp	.+226    	; 0x510a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5028:	a2 01       	movw	r20, r4
    502a:	61 ed       	ldi	r22, 0xD1	; 209
    502c:	73 e0       	ldi	r23, 0x03	; 3
    502e:	ce 01       	movw	r24, r28
    5030:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    5034:	88 23       	and	r24, r24
    5036:	09 f4       	brne	.+2      	; 0x503a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    5038:	68 c0       	rjmp	.+208    	; 0x510a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    503a:	a8 01       	movw	r20, r16
    503c:	60 e0       	ldi	r22, 0x00	; 0
    503e:	70 e0       	ldi	r23, 0x00	; 0
    5040:	00 e1       	ldi	r16, 0x10	; 16
    5042:	17 e2       	ldi	r17, 0x27	; 39
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	ce 01       	movw	r24, r28
    504a:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    504e:	88 23       	and	r24, r24
    5050:	09 f4       	brne	.+2      	; 0x5054 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    5052:	5b c0       	rjmp	.+182    	; 0x510a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    5054:	fe 01       	movw	r30, r28
    5056:	e8 5e       	subi	r30, 0xE8	; 232
    5058:	fe 4f       	sbci	r31, 0xFE	; 254
    505a:	80 81       	ld	r24, Z
    505c:	91 81       	ldd	r25, Z+1	; 0x01
    505e:	dc 01       	movw	r26, r24
    5060:	ed 91       	ld	r30, X+
    5062:	fc 91       	ld	r31, X
    5064:	02 80       	ldd	r0, Z+2	; 0x02
    5066:	f3 81       	ldd	r31, Z+3	; 0x03
    5068:	e0 2d       	mov	r30, r0
    506a:	a4 01       	movw	r20, r8
    506c:	b3 01       	movw	r22, r6
    506e:	09 95       	icall
    5070:	fe 01       	movw	r30, r28
    5072:	ea 5e       	subi	r30, 0xEA	; 234
    5074:	fe 4f       	sbci	r31, 0xFE	; 254
    5076:	60 81       	ld	r22, Z
    5078:	71 81       	ldd	r23, Z+1	; 0x01
    507a:	40 e1       	ldi	r20, 0x10	; 16
    507c:	57 e2       	ldi	r21, 0x27	; 39
    507e:	ce 01       	movw	r24, r28
    5080:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    5084:	88 23       	and	r24, r24
    5086:	09 f4       	brne	.+2      	; 0x508a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    5088:	40 c0       	rjmp	.+128    	; 0x510a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    508a:	10 e1       	ldi	r17, 0x10	; 16
    508c:	e1 2e       	mov	r14, r17
    508e:	17 e2       	ldi	r17, 0x27	; 39
    5090:	f1 2e       	mov	r15, r17
    5092:	00 e0       	ldi	r16, 0x00	; 0
    5094:	10 e0       	ldi	r17, 0x00	; 0
    5096:	96 01       	movw	r18, r12
    5098:	a5 01       	movw	r20, r10
    509a:	61 e0       	ldi	r22, 0x01	; 1
    509c:	ce 01       	movw	r24, r28
    509e:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    50a2:	88 23       	and	r24, r24
    50a4:	91 f1       	breq	.+100    	; 0x510a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    50a6:	68 ec       	ldi	r22, 0xC8	; 200
    50a8:	73 e0       	ldi	r23, 0x03	; 3
    50aa:	88 e9       	ldi	r24, 0x98	; 152
    50ac:	97 e0       	ldi	r25, 0x07	; 7
    50ae:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    50b2:	f5 01       	movw	r30, r10
    50b4:	60 81       	ld	r22, Z
    50b6:	71 81       	ldd	r23, Z+1	; 0x01
    50b8:	4a e0       	ldi	r20, 0x0A	; 10
    50ba:	50 e0       	ldi	r21, 0x00	; 0
    50bc:	88 e9       	ldi	r24, 0x98	; 152
    50be:	97 e0       	ldi	r25, 0x07	; 7
    50c0:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <_ZN5Print7printlnEji>
    50c4:	62 ec       	ldi	r22, 0xC2	; 194
    50c6:	73 e0       	ldi	r23, 0x03	; 3
    50c8:	88 e9       	ldi	r24, 0x98	; 152
    50ca:	97 e0       	ldi	r25, 0x07	; 7
    50cc:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN5Print5printEPK19__FlashStringHelper>
    50d0:	d6 01       	movw	r26, r12
    50d2:	6d 91       	ld	r22, X+
    50d4:	7c 91       	ld	r23, X
    50d6:	4a e0       	ldi	r20, 0x0A	; 10
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	88 e9       	ldi	r24, 0x98	; 152
    50dc:	97 e0       	ldi	r25, 0x07	; 7
    50de:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <_ZN5Print7printlnEji>
    50e2:	b6 01       	movw	r22, r12
    50e4:	ce 01       	movw	r24, r28
    50e6:	df 91       	pop	r29
    50e8:	cf 91       	pop	r28
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ff 90       	pop	r15
    50f0:	ef 90       	pop	r14
    50f2:	df 90       	pop	r13
    50f4:	cf 90       	pop	r12
    50f6:	bf 90       	pop	r11
    50f8:	af 90       	pop	r10
    50fa:	9f 90       	pop	r9
    50fc:	8f 90       	pop	r8
    50fe:	7f 90       	pop	r7
    5100:	6f 90       	pop	r6
    5102:	5f 90       	pop	r5
    5104:	4f 90       	pop	r4
    5106:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	df 91       	pop	r29
    510e:	cf 91       	pop	r28
    5110:	1f 91       	pop	r17
    5112:	0f 91       	pop	r16
    5114:	ff 90       	pop	r15
    5116:	ef 90       	pop	r14
    5118:	df 90       	pop	r13
    511a:	cf 90       	pop	r12
    511c:	bf 90       	pop	r11
    511e:	af 90       	pop	r10
    5120:	9f 90       	pop	r9
    5122:	8f 90       	pop	r8
    5124:	7f 90       	pop	r7
    5126:	6f 90       	pop	r6
    5128:	5f 90       	pop	r5
    512a:	4f 90       	pop	r4
    512c:	08 95       	ret

0000512e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    512e:	af 92       	push	r10
    5130:	bf 92       	push	r11
    5132:	cf 92       	push	r12
    5134:	df 92       	push	r13
    5136:	ef 92       	push	r14
    5138:	0f 93       	push	r16
    513a:	1f 93       	push	r17
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	ec 01       	movw	r28, r24
    5142:	6a 01       	movw	r12, r20
    5144:	59 01       	movw	r10, r18
    5146:	10 2f       	mov	r17, r16
    5148:	0e 2d       	mov	r16, r14
    514a:	44 ef       	ldi	r20, 0xF4	; 244
    514c:	51 e0       	ldi	r21, 0x01	; 1
    514e:	0e 94 97 20 	call	0x412e	; 0x412e <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    5152:	21 2f       	mov	r18, r17
    5154:	a5 01       	movw	r20, r10
    5156:	b6 01       	movw	r22, r12
    5158:	ce 01       	movw	r24, r28
    515a:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    515e:	18 2f       	mov	r17, r24
    5160:	88 23       	and	r24, r24
    5162:	31 f0       	breq	.+12     	; 0x5170 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    5164:	40 e0       	ldi	r20, 0x00	; 0
    5166:	64 ef       	ldi	r22, 0xF4	; 244
    5168:	71 e0       	ldi	r23, 0x01	; 1
    516a:	ce 01       	movw	r24, r28
    516c:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZN13Adafruit_FONA8readlineEjb>
    5170:	81 2f       	mov	r24, r17
    5172:	df 91       	pop	r29
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ef 90       	pop	r14
    517c:	df 90       	pop	r13
    517e:	cf 90       	pop	r12
    5180:	bf 90       	pop	r11
    5182:	af 90       	pop	r10
    5184:	08 95       	ret

00005186 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    5186:	ef 92       	push	r14
    5188:	0f 93       	push	r16
    518a:	9b 01       	movw	r18, r22
    518c:	ee 24       	eor	r14, r14
    518e:	e3 94       	inc	r14
    5190:	0c e2       	ldi	r16, 0x2C	; 44
    5192:	42 ec       	ldi	r20, 0xC2	; 194
    5194:	55 e0       	ldi	r21, 0x05	; 5
    5196:	6b eb       	ldi	r22, 0xBB	; 187
    5198:	75 e0       	ldi	r23, 0x05	; 5
    519a:	0e 94 97 28 	call	0x512e	; 0x512e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    519e:	0f 91       	pop	r16
    51a0:	ef 90       	pop	r14
    51a2:	08 95       	ret

000051a4 <_ZN13Adafruit_FONA16getNetworkStatusEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
    51a4:	ef 92       	push	r14
    51a6:	0f 93       	push	r16
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	00 d0       	rcall	.+0      	; 0x51ae <_ZN13Adafruit_FONA16getNetworkStatusEv+0xa>
    51ae:	cd b7       	in	r28, 0x3d	; 61
    51b0:	de b7       	in	r29, 0x3e	; 62
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    51b2:	ee 24       	eor	r14, r14
    51b4:	e3 94       	inc	r14
    51b6:	0c e2       	ldi	r16, 0x2C	; 44
    51b8:	9e 01       	movw	r18, r28
    51ba:	2f 5f       	subi	r18, 0xFF	; 255
    51bc:	3f 4f       	sbci	r19, 0xFF	; 255
    51be:	43 eb       	ldi	r20, 0xB3	; 179
    51c0:	55 e0       	ldi	r21, 0x05	; 5
    51c2:	6a ea       	ldi	r22, 0xAA	; 170
    51c4:	75 e0       	ldi	r23, 0x05	; 5
    51c6:	0e 94 97 28 	call	0x512e	; 0x512e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    51ca:	88 23       	and	r24, r24
    51cc:	11 f0       	breq	.+4      	; 0x51d2 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x2e>

  return status;
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	01 c0       	rjmp	.+2      	; 0x51d4 <_ZN13Adafruit_FONA16getNetworkStatusEv+0x30>
/********* NETWORK *******************************************************/

uint8_t Adafruit_FONA::getNetworkStatus(void) {
  uint16_t status;

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1)) return 0;
    51d2:	80 e0       	ldi	r24, 0x00	; 0

  return status;
}
    51d4:	0f 90       	pop	r0
    51d6:	0f 90       	pop	r0
    51d8:	df 91       	pop	r29
    51da:	cf 91       	pop	r28
    51dc:	0f 91       	pop	r16
    51de:	ef 90       	pop	r14
    51e0:	08 95       	ret

000051e2 <_ZN13Adafruit_FONA7getRSSIEv>:


uint8_t Adafruit_FONA::getRSSI(void) {
    51e2:	ef 92       	push	r14
    51e4:	0f 93       	push	r16
    51e6:	cf 93       	push	r28
    51e8:	df 93       	push	r29
    51ea:	00 d0       	rcall	.+0      	; 0x51ec <_ZN13Adafruit_FONA7getRSSIEv+0xa>
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    51f0:	e1 2c       	mov	r14, r1
    51f2:	0c e2       	ldi	r16, 0x2C	; 44
    51f4:	9e 01       	movw	r18, r28
    51f6:	2f 5f       	subi	r18, 0xFF	; 255
    51f8:	3f 4f       	sbci	r19, 0xFF	; 255
    51fa:	43 ea       	ldi	r20, 0xA3	; 163
    51fc:	55 e0       	ldi	r21, 0x05	; 5
    51fe:	6c e9       	ldi	r22, 0x9C	; 156
    5200:	75 e0       	ldi	r23, 0x05	; 5
    5202:	0e 94 97 28 	call	0x512e	; 0x512e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    5206:	88 23       	and	r24, r24
    5208:	11 f0       	breq	.+4      	; 0x520e <_ZN13Adafruit_FONA7getRSSIEv+0x2c>

  return reply;
    520a:	89 81       	ldd	r24, Y+1	; 0x01
    520c:	01 c0       	rjmp	.+2      	; 0x5210 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>


uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) ) return 0;
    520e:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
    5210:	0f 90       	pop	r0
    5212:	0f 90       	pop	r0
    5214:	df 91       	pop	r29
    5216:	cf 91       	pop	r28
    5218:	0f 91       	pop	r16
    521a:	ef 90       	pop	r14
    521c:	08 95       	ret

0000521e <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    521e:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    5222:	30 91 81 08 	lds	r19, 0x0881	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    5226:	28 17       	cp	r18, r24
    5228:	39 07       	cpc	r19, r25
    522a:	b9 f4       	brne	.+46     	; 0x525a <_ZN14SoftwareSerial4readEv+0x3c>
    522c:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5230:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5234:	98 17       	cp	r25, r24
    5236:	89 f0       	breq	.+34     	; 0x525a <_ZN14SoftwareSerial4readEv+0x3c>
    5238:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    523c:	f0 e0       	ldi	r31, 0x00	; 0
    523e:	e0 5c       	subi	r30, 0xC0	; 192
    5240:	f7 4f       	sbci	r31, 0xF7	; 247
    5242:	80 81       	ld	r24, Z
    5244:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	2f 5f       	subi	r18, 0xFF	; 255
    524c:	3f 4f       	sbci	r19, 0xFF	; 255
    524e:	2f 73       	andi	r18, 0x3F	; 63
    5250:	33 27       	eor	r19, r19
    5252:	20 93 3e 08 	sts	0x083E, r18	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	08 95       	ret
    525a:	8f ef       	ldi	r24, 0xFF	; 255
    525c:	9f ef       	ldi	r25, 0xFF	; 255
    525e:	08 95       	ret

00005260 <_ZN14SoftwareSerial5writeEh>:
    5260:	1f 93       	push	r17
    5262:	cf 93       	push	r28
    5264:	df 93       	push	r29
    5266:	dc 01       	movw	r26, r24
    5268:	5c 96       	adiw	r26, 0x1c	; 28
    526a:	8d 91       	ld	r24, X+
    526c:	9c 91       	ld	r25, X
    526e:	5d 97       	sbiw	r26, 0x1d	; 29
    5270:	00 97       	sbiw	r24, 0x00	; 0
    5272:	39 f4       	brne	.+14     	; 0x5282 <_ZN14SoftwareSerial5writeEh+0x22>
    5274:	21 e0       	ldi	r18, 0x01	; 1
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	13 96       	adiw	r26, 0x03	; 3
    527a:	3c 93       	st	X, r19
    527c:	2e 93       	st	-X, r18
    527e:	12 97       	sbiw	r26, 0x02	; 2
    5280:	3b c0       	rjmp	.+118    	; 0x52f8 <_ZN14SoftwareSerial5writeEh+0x98>
    5282:	51 96       	adiw	r26, 0x11	; 17
    5284:	ed 91       	ld	r30, X+
    5286:	fc 91       	ld	r31, X
    5288:	52 97       	sbiw	r26, 0x12	; 18
    528a:	50 96       	adiw	r26, 0x10	; 16
    528c:	2c 91       	ld	r18, X
    528e:	50 97       	sbiw	r26, 0x10	; 16
    5290:	32 2f       	mov	r19, r18
    5292:	30 95       	com	r19
    5294:	1f b7       	in	r17, 0x3f	; 63
    5296:	5e 96       	adiw	r26, 0x1e	; 30
    5298:	4c 91       	ld	r20, X
    529a:	5e 97       	sbiw	r26, 0x1e	; 30
    529c:	74 2f       	mov	r23, r20
    529e:	72 70       	andi	r23, 0x02	; 2
    52a0:	41 fd       	sbrc	r20, 1
    52a2:	60 95       	com	r22
    52a4:	f8 94       	cli
    52a6:	40 81       	ld	r20, Z
    52a8:	77 23       	and	r23, r23
    52aa:	11 f0       	breq	.+4      	; 0x52b0 <_ZN14SoftwareSerial5writeEh+0x50>
    52ac:	42 2b       	or	r20, r18
    52ae:	01 c0       	rjmp	.+2      	; 0x52b2 <_ZN14SoftwareSerial5writeEh+0x52>
    52b0:	43 23       	and	r20, r19
    52b2:	40 83       	st	Z, r20
    52b4:	ec 01       	movw	r28, r24
    52b6:	21 97       	sbiw	r28, 0x01	; 1
    52b8:	f1 f7       	brne	.-4      	; 0x52b6 <_ZN14SoftwareSerial5writeEh+0x56>
    52ba:	48 e0       	ldi	r20, 0x08	; 8
    52bc:	50 81       	ld	r21, Z
    52be:	60 ff       	sbrs	r22, 0
    52c0:	02 c0       	rjmp	.+4      	; 0x52c6 <_ZN14SoftwareSerial5writeEh+0x66>
    52c2:	52 2b       	or	r21, r18
    52c4:	01 c0       	rjmp	.+2      	; 0x52c8 <_ZN14SoftwareSerial5writeEh+0x68>
    52c6:	53 23       	and	r21, r19
    52c8:	50 83       	st	Z, r21
    52ca:	ec 01       	movw	r28, r24
    52cc:	21 97       	sbiw	r28, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <_ZN14SoftwareSerial5writeEh+0x6c>
    52d0:	66 95       	lsr	r22
    52d2:	41 50       	subi	r20, 0x01	; 1
    52d4:	99 f7       	brne	.-26     	; 0x52bc <_ZN14SoftwareSerial5writeEh+0x5c>
    52d6:	80 81       	ld	r24, Z
    52d8:	77 23       	and	r23, r23
    52da:	19 f0       	breq	.+6      	; 0x52e2 <_ZN14SoftwareSerial5writeEh+0x82>
    52dc:	83 23       	and	r24, r19
    52de:	80 83       	st	Z, r24
    52e0:	02 c0       	rjmp	.+4      	; 0x52e6 <_ZN14SoftwareSerial5writeEh+0x86>
    52e2:	28 2b       	or	r18, r24
    52e4:	20 83       	st	Z, r18
    52e6:	1f bf       	out	0x3f, r17	; 63
    52e8:	5c 96       	adiw	r26, 0x1c	; 28
    52ea:	8d 91       	ld	r24, X+
    52ec:	9c 91       	ld	r25, X
    52ee:	5d 97       	sbiw	r26, 0x1d	; 29
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	f1 f7       	brne	.-4      	; 0x52f0 <_ZN14SoftwareSerial5writeEh+0x90>
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	df 91       	pop	r29
    52fa:	cf 91       	pop	r28
    52fc:	1f 91       	pop	r17
    52fe:	08 95       	ret

00005300 <_ZN14SoftwareSerial5flushEv>:
    5300:	08 95       	ret

00005302 <_ZN14SoftwareSerial4peekEv>:
    5302:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    5306:	30 91 81 08 	lds	r19, 0x0881	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    530a:	28 17       	cp	r18, r24
    530c:	39 07       	cpc	r19, r25
    530e:	71 f4       	brne	.+28     	; 0x532c <_ZN14SoftwareSerial4peekEv+0x2a>
    5310:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5314:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5318:	98 17       	cp	r25, r24
    531a:	41 f0       	breq	.+16     	; 0x532c <_ZN14SoftwareSerial4peekEv+0x2a>
    531c:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5320:	f0 e0       	ldi	r31, 0x00	; 0
    5322:	e0 5c       	subi	r30, 0xC0	; 192
    5324:	f7 4f       	sbci	r31, 0xF7	; 247
    5326:	80 81       	ld	r24, Z
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	08 95       	ret
    532c:	8f ef       	ldi	r24, 0xFF	; 255
    532e:	9f ef       	ldi	r25, 0xFF	; 255
    5330:	08 95       	ret

00005332 <_ZN14SoftwareSerial9availableEv>:
    5332:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    5336:	30 91 81 08 	lds	r19, 0x0881	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    533a:	28 17       	cp	r18, r24
    533c:	39 07       	cpc	r19, r25
    533e:	71 f4       	brne	.+28     	; 0x535c <_ZN14SoftwareSerial9availableEv+0x2a>
    5340:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5344:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	80 5c       	subi	r24, 0xC0	; 192
    534c:	9f 4f       	sbci	r25, 0xFF	; 255
    534e:	82 1b       	sub	r24, r18
    5350:	91 09       	sbc	r25, r1
    5352:	60 e4       	ldi	r22, 0x40	; 64
    5354:	70 e0       	ldi	r23, 0x00	; 0
    5356:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__divmodhi4>
    535a:	08 95       	ret
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	08 95       	ret

00005362 <_ZN14SoftwareSerial13stopListeningEv>:
    5362:	e0 91 80 08 	lds	r30, 0x0880	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    5366:	f0 91 81 08 	lds	r31, 0x0881	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    536a:	e8 17       	cp	r30, r24
    536c:	f9 07       	cpc	r31, r25
    536e:	69 f4       	brne	.+26     	; 0x538a <_ZN14SoftwareSerial13stopListeningEv+0x28>
    5370:	a3 89       	ldd	r26, Z+19	; 0x13
    5372:	b4 89       	ldd	r27, Z+20	; 0x14
    5374:	9c 91       	ld	r25, X
    5376:	85 89       	ldd	r24, Z+21	; 0x15
    5378:	80 95       	com	r24
    537a:	89 23       	and	r24, r25
    537c:	8c 93       	st	X, r24
    537e:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    5382:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	08 95       	ret
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	08 95       	ret

0000538e <_ZN14SoftwareSerial6listenEv>:
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
    5392:	ec 01       	movw	r28, r24
    5394:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5396:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5398:	89 2b       	or	r24, r25
    539a:	f1 f0       	breq	.+60     	; 0x53d8 <_ZN14SoftwareSerial6listenEv+0x4a>
    539c:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    53a0:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    53a4:	c8 17       	cp	r28, r24
    53a6:	d9 07       	cpc	r29, r25
    53a8:	b9 f0       	breq	.+46     	; 0x53d8 <_ZN14SoftwareSerial6listenEv+0x4a>
    53aa:	00 97       	sbiw	r24, 0x00	; 0
    53ac:	11 f0       	breq	.+4      	; 0x53b2 <_ZN14SoftwareSerial6listenEv+0x24>
    53ae:	0e 94 b1 29 	call	0x5362	; 0x5362 <_ZN14SoftwareSerial13stopListeningEv>
    53b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    53b4:	8e 7f       	andi	r24, 0xFE	; 254
    53b6:	8e 8f       	std	Y+30, r24	; 0x1e
    53b8:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    53bc:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    53c0:	d0 93 81 08 	sts	0x0881, r29	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    53c4:	c0 93 80 08 	sts	0x0880, r28	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    53c8:	eb 89       	ldd	r30, Y+19	; 0x13
    53ca:	fc 89       	ldd	r31, Y+20	; 0x14
    53cc:	90 81       	ld	r25, Z
    53ce:	8d 89       	ldd	r24, Y+21	; 0x15
    53d0:	89 2b       	or	r24, r25
    53d2:	80 83       	st	Z, r24
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	01 c0       	rjmp	.+2      	; 0x53da <_ZN14SoftwareSerial6listenEv+0x4c>
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	08 95       	ret

000053e0 <__vector_3>:
    53e0:	1f 92       	push	r1
    53e2:	0f 92       	push	r0
    53e4:	0f b6       	in	r0, 0x3f	; 63
    53e6:	0f 92       	push	r0
    53e8:	11 24       	eor	r1, r1
    53ea:	2f 93       	push	r18
    53ec:	3f 93       	push	r19
    53ee:	4f 93       	push	r20
    53f0:	5f 93       	push	r21
    53f2:	6f 93       	push	r22
    53f4:	7f 93       	push	r23
    53f6:	8f 93       	push	r24
    53f8:	9f 93       	push	r25
    53fa:	af 93       	push	r26
    53fc:	bf 93       	push	r27
    53fe:	ef 93       	push	r30
    5400:	ff 93       	push	r31
    5402:	e0 91 80 08 	lds	r30, 0x0880	; 0x800880 <_ZN14SoftwareSerial13active_objectE>
    5406:	f0 91 81 08 	lds	r31, 0x0881	; 0x800881 <_ZN14SoftwareSerial13active_objectE+0x1>
    540a:	30 97       	sbiw	r30, 0x00	; 0
    540c:	09 f4       	brne	.+2      	; 0x5410 <__vector_3+0x30>
    540e:	51 c0       	rjmp	.+162    	; 0x54b2 <__vector_3+0xd2>
    5410:	96 8d       	ldd	r25, Z+30	; 0x1e
    5412:	a6 85       	ldd	r26, Z+14	; 0x0e
    5414:	b7 85       	ldd	r27, Z+15	; 0x0f
    5416:	85 85       	ldd	r24, Z+13	; 0x0d
    5418:	91 ff       	sbrs	r25, 1
    541a:	04 c0       	rjmp	.+8      	; 0x5424 <__vector_3+0x44>
    541c:	9c 91       	ld	r25, X
    541e:	89 23       	and	r24, r25
    5420:	29 f4       	brne	.+10     	; 0x542c <__vector_3+0x4c>
    5422:	47 c0       	rjmp	.+142    	; 0x54b2 <__vector_3+0xd2>
    5424:	9c 91       	ld	r25, X
    5426:	89 23       	and	r24, r25
    5428:	09 f0       	breq	.+2      	; 0x542c <__vector_3+0x4c>
    542a:	43 c0       	rjmp	.+134    	; 0x54b2 <__vector_3+0xd2>
    542c:	a3 89       	ldd	r26, Z+19	; 0x13
    542e:	b4 89       	ldd	r27, Z+20	; 0x14
    5430:	9c 91       	ld	r25, X
    5432:	85 89       	ldd	r24, Z+21	; 0x15
    5434:	80 95       	com	r24
    5436:	89 23       	and	r24, r25
    5438:	8c 93       	st	X, r24
    543a:	86 89       	ldd	r24, Z+22	; 0x16
    543c:	97 89       	ldd	r25, Z+23	; 0x17
    543e:	01 97       	sbiw	r24, 0x01	; 1
    5440:	f1 f7       	brne	.-4      	; 0x543e <__vector_3+0x5e>
    5442:	60 8d       	ldd	r22, Z+24	; 0x18
    5444:	71 8d       	ldd	r23, Z+25	; 0x19
    5446:	a6 85       	ldd	r26, Z+14	; 0x0e
    5448:	b7 85       	ldd	r27, Z+15	; 0x0f
    544a:	55 85       	ldd	r21, Z+13	; 0x0d
    544c:	38 e0       	ldi	r19, 0x08	; 8
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	cb 01       	movw	r24, r22
    5452:	01 97       	sbiw	r24, 0x01	; 1
    5454:	f1 f7       	brne	.-4      	; 0x5452 <__vector_3+0x72>
    5456:	82 2f       	mov	r24, r18
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	95 95       	asr	r25
    545c:	87 95       	ror	r24
    545e:	28 2f       	mov	r18, r24
    5460:	4c 91       	ld	r20, X
    5462:	45 23       	and	r20, r21
    5464:	09 f0       	breq	.+2      	; 0x5468 <__vector_3+0x88>
    5466:	20 68       	ori	r18, 0x80	; 128
    5468:	31 50       	subi	r19, 0x01	; 1
    546a:	91 f7       	brne	.-28     	; 0x5450 <__vector_3+0x70>
    546c:	86 8d       	ldd	r24, Z+30	; 0x1e
    546e:	81 fd       	sbrc	r24, 1
    5470:	20 95       	com	r18
    5472:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	01 96       	adiw	r24, 0x01	; 1
    547a:	8f 73       	andi	r24, 0x3F	; 63
    547c:	99 27       	eor	r25, r25
    547e:	30 91 3e 08 	lds	r19, 0x083E	; 0x80083e <_ZN14SoftwareSerial20_receive_buffer_headE>
    5482:	38 17       	cp	r19, r24
    5484:	49 f0       	breq	.+18     	; 0x5498 <__vector_3+0xb8>
    5486:	a0 91 3f 08 	lds	r26, 0x083F	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    548a:	b0 e0       	ldi	r27, 0x00	; 0
    548c:	a0 5c       	subi	r26, 0xC0	; 192
    548e:	b7 4f       	sbci	r27, 0xF7	; 247
    5490:	2c 93       	st	X, r18
    5492:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <_ZN14SoftwareSerial20_receive_buffer_tailE>
    5496:	03 c0       	rjmp	.+6      	; 0x549e <__vector_3+0xbe>
    5498:	86 8d       	ldd	r24, Z+30	; 0x1e
    549a:	81 60       	ori	r24, 0x01	; 1
    549c:	86 8f       	std	Z+30, r24	; 0x1e
    549e:	82 8d       	ldd	r24, Z+26	; 0x1a
    54a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    54a2:	01 97       	sbiw	r24, 0x01	; 1
    54a4:	f1 f7       	brne	.-4      	; 0x54a2 <__vector_3+0xc2>
    54a6:	a3 89       	ldd	r26, Z+19	; 0x13
    54a8:	b4 89       	ldd	r27, Z+20	; 0x14
    54aa:	9c 91       	ld	r25, X
    54ac:	85 89       	ldd	r24, Z+21	; 0x15
    54ae:	89 2b       	or	r24, r25
    54b0:	8c 93       	st	X, r24
    54b2:	ff 91       	pop	r31
    54b4:	ef 91       	pop	r30
    54b6:	bf 91       	pop	r27
    54b8:	af 91       	pop	r26
    54ba:	9f 91       	pop	r25
    54bc:	8f 91       	pop	r24
    54be:	7f 91       	pop	r23
    54c0:	6f 91       	pop	r22
    54c2:	5f 91       	pop	r21
    54c4:	4f 91       	pop	r20
    54c6:	3f 91       	pop	r19
    54c8:	2f 91       	pop	r18
    54ca:	0f 90       	pop	r0
    54cc:	0f be       	out	0x3f, r0	; 63
    54ce:	0f 90       	pop	r0
    54d0:	1f 90       	pop	r1
    54d2:	18 95       	reti

000054d4 <_ZN14SoftwareSerial5setTXEh>:
    54d4:	1f 93       	push	r17
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	ec 01       	movw	r28, r24
    54dc:	16 2f       	mov	r17, r22
    54de:	6e 8d       	ldd	r22, Y+30	; 0x1e
    54e0:	66 95       	lsr	r22
    54e2:	61 70       	andi	r22, 0x01	; 1
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	68 27       	eor	r22, r24
    54e8:	81 2f       	mov	r24, r17
    54ea:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
    54ee:	61 e0       	ldi	r22, 0x01	; 1
    54f0:	81 2f       	mov	r24, r17
    54f2:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <pinMode>
    54f6:	81 2f       	mov	r24, r17
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	fc 01       	movw	r30, r24
    54fc:	e2 5e       	subi	r30, 0xE2	; 226
    54fe:	fc 4f       	sbci	r31, 0xFC	; 252
    5500:	e4 91       	lpm	r30, Z
    5502:	e8 8b       	std	Y+16, r30	; 0x10
    5504:	fc 01       	movw	r30, r24
    5506:	ee 5c       	subi	r30, 0xCE	; 206
    5508:	fc 4f       	sbci	r31, 0xFC	; 252
    550a:	e4 91       	lpm	r30, Z
    550c:	f0 e0       	ldi	r31, 0x00	; 0
    550e:	ee 0f       	add	r30, r30
    5510:	ff 1f       	adc	r31, r31
    5512:	e0 5b       	subi	r30, 0xB0	; 176
    5514:	fc 4f       	sbci	r31, 0xFC	; 252
    5516:	85 91       	lpm	r24, Z+
    5518:	94 91       	lpm	r25, Z
    551a:	9a 8b       	std	Y+18, r25	; 0x12
    551c:	89 8b       	std	Y+17, r24	; 0x11
    551e:	df 91       	pop	r29
    5520:	cf 91       	pop	r28
    5522:	1f 91       	pop	r17
    5524:	08 95       	ret

00005526 <_ZN14SoftwareSerial5setRXEh>:
    5526:	1f 93       	push	r17
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	ec 01       	movw	r28, r24
    552e:	16 2f       	mov	r17, r22
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	81 2f       	mov	r24, r17
    5534:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <pinMode>
    5538:	8e 8d       	ldd	r24, Y+30	; 0x1e
    553a:	81 fd       	sbrc	r24, 1
    553c:	04 c0       	rjmp	.+8      	; 0x5546 <_ZN14SoftwareSerial5setRXEh+0x20>
    553e:	61 e0       	ldi	r22, 0x01	; 1
    5540:	81 2f       	mov	r24, r17
    5542:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <digitalWrite>
    5546:	1c 87       	std	Y+12, r17	; 0x0c
    5548:	81 2f       	mov	r24, r17
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	fc 01       	movw	r30, r24
    554e:	e2 5e       	subi	r30, 0xE2	; 226
    5550:	fc 4f       	sbci	r31, 0xFC	; 252
    5552:	e4 91       	lpm	r30, Z
    5554:	ed 87       	std	Y+13, r30	; 0x0d
    5556:	fc 01       	movw	r30, r24
    5558:	ee 5c       	subi	r30, 0xCE	; 206
    555a:	fc 4f       	sbci	r31, 0xFC	; 252
    555c:	e4 91       	lpm	r30, Z
    555e:	f0 e0       	ldi	r31, 0x00	; 0
    5560:	ee 0f       	add	r30, r30
    5562:	ff 1f       	adc	r31, r31
    5564:	ea 5b       	subi	r30, 0xBA	; 186
    5566:	fc 4f       	sbci	r31, 0xFC	; 252
    5568:	85 91       	lpm	r24, Z+
    556a:	94 91       	lpm	r25, Z
    556c:	9f 87       	std	Y+15, r25	; 0x0f
    556e:	8e 87       	std	Y+14, r24	; 0x0e
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	1f 91       	pop	r17
    5576:	08 95       	ret

00005578 <_ZN14SoftwareSerialC1Ehhb>:
    5578:	1f 93       	push	r17
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	ec 01       	movw	r28, r24
    5580:	16 2f       	mov	r17, r22
    5582:	1b 82       	std	Y+3, r1	; 0x03
    5584:	1a 82       	std	Y+2, r1	; 0x02
    5586:	88 ee       	ldi	r24, 0xE8	; 232
    5588:	93 e0       	ldi	r25, 0x03	; 3
    558a:	a0 e0       	ldi	r26, 0x00	; 0
    558c:	b0 e0       	ldi	r27, 0x00	; 0
    558e:	8c 83       	std	Y+4, r24	; 0x04
    5590:	9d 83       	std	Y+5, r25	; 0x05
    5592:	ae 83       	std	Y+6, r26	; 0x06
    5594:	bf 83       	std	Y+7, r27	; 0x07
    5596:	86 e6       	ldi	r24, 0x66	; 102
    5598:	93 e0       	ldi	r25, 0x03	; 3
    559a:	99 83       	std	Y+1, r25	; 0x01
    559c:	88 83       	st	Y, r24
    559e:	1f 8a       	std	Y+23, r1	; 0x17
    55a0:	1e 8a       	std	Y+22, r1	; 0x16
    55a2:	19 8e       	std	Y+25, r1	; 0x19
    55a4:	18 8e       	std	Y+24, r1	; 0x18
    55a6:	1b 8e       	std	Y+27, r1	; 0x1b
    55a8:	1a 8e       	std	Y+26, r1	; 0x1a
    55aa:	1d 8e       	std	Y+29, r1	; 0x1d
    55ac:	1c 8e       	std	Y+28, r1	; 0x1c
    55ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    55b0:	8e 7f       	andi	r24, 0xFE	; 254
    55b2:	20 fb       	bst	r18, 0
    55b4:	81 f9       	bld	r24, 1
    55b6:	8e 8f       	std	Y+30, r24	; 0x1e
    55b8:	64 2f       	mov	r22, r20
    55ba:	ce 01       	movw	r24, r28
    55bc:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <_ZN14SoftwareSerial5setTXEh>
    55c0:	61 2f       	mov	r22, r17
    55c2:	ce 01       	movw	r24, r28
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	1f 91       	pop	r17
    55ca:	0c 94 93 2a 	jmp	0x5526	; 0x5526 <_ZN14SoftwareSerial5setRXEh>

000055ce <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    55ce:	cf 93       	push	r28
    55d0:	df 93       	push	r29
    55d2:	ec 01       	movw	r28, r24
    55d4:	9a 01       	movw	r18, r20
    55d6:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    55d8:	1b 8e       	std	Y+27, r1	; 0x1b
    55da:	1a 8e       	std	Y+26, r1	; 0x1a
    55dc:	19 8e       	std	Y+25, r1	; 0x19
    55de:	18 8e       	std	Y+24, r1	; 0x18
    55e0:	1f 8a       	std	Y+23, r1	; 0x17
    55e2:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    55e4:	60 e0       	ldi	r22, 0x00	; 0
    55e6:	79 e0       	ldi	r23, 0x09	; 9
    55e8:	8d e3       	ldi	r24, 0x3D	; 61
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	0e 94 24 2c 	call	0x5848	; 0x5848 <__divmodsi4>
    55f0:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    55f2:	24 30       	cpi	r18, 0x04	; 4
    55f4:	31 05       	cpc	r19, r1
    55f6:	18 f0       	brcs	.+6      	; 0x55fe <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    55f8:	c9 01       	movw	r24, r18
    55fa:	03 97       	sbiw	r24, 0x03	; 3
    55fc:	02 c0       	rjmp	.+4      	; 0x5602 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    5602:	9d 8f       	std	Y+29, r25	; 0x1d
    5604:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    5606:	6c 85       	ldd	r22, Y+12	; 0x0c
    5608:	66 31       	cpi	r22, 0x16	; 22
    560a:	08 f0       	brcs	.+2      	; 0x560e <_ZN14SoftwareSerial5beginEl+0x40>
    560c:	69 c0       	rjmp	.+210    	; 0x56e0 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    560e:	c9 01       	movw	r24, r18
    5610:	96 95       	lsr	r25
    5612:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5614:	84 31       	cpi	r24, 0x14	; 20
    5616:	91 05       	cpc	r25, r1
    5618:	10 f0       	brcs	.+4      	; 0x561e <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    561a:	43 97       	sbiw	r24, 0x13	; 19
    561c:	02 c0       	rjmp	.+4      	; 0x5622 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    561e:	81 e0       	ldi	r24, 0x01	; 1
    5620:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    5622:	9f 8b       	std	Y+23, r25	; 0x17
    5624:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    5626:	36 97       	sbiw	r30, 0x06	; 6
    5628:	18 f0       	brcs	.+6      	; 0x5630 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    562a:	c9 01       	movw	r24, r18
    562c:	05 97       	sbiw	r24, 0x05	; 5
    562e:	02 c0       	rjmp	.+4      	; 0x5634 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    5634:	99 8f       	std	Y+25, r25	; 0x19
    5636:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    5638:	c9 01       	movw	r24, r18
    563a:	88 0f       	add	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	28 0f       	add	r18, r24
    5640:	39 1f       	adc	r19, r25
    5642:	36 95       	lsr	r19
    5644:	27 95       	ror	r18
    5646:	36 95       	lsr	r19
    5648:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    564a:	2d 30       	cpi	r18, 0x0D	; 13
    564c:	31 05       	cpc	r19, r1
    564e:	18 f0       	brcs	.+6      	; 0x5656 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    5650:	2c 50       	subi	r18, 0x0C	; 12
    5652:	31 09       	sbc	r19, r1
    5654:	02 c0       	rjmp	.+4      	; 0x565a <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    5656:	21 e0       	ldi	r18, 0x01	; 1
    5658:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    565a:	3b 8f       	std	Y+27, r19	; 0x1b
    565c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    565e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    5662:	68 30       	cpi	r22, 0x08	; 8
    5664:	50 f0       	brcs	.+20     	; 0x567a <_ZN14SoftwareSerial5beginEl+0xac>
    5666:	21 e0       	ldi	r18, 0x01	; 1
    5668:	6e 30       	cpi	r22, 0x0E	; 14
    566a:	08 f4       	brcc	.+2      	; 0x566e <_ZN14SoftwareSerial5beginEl+0xa0>
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	01 c0       	rjmp	.+2      	; 0x5674 <_ZN14SoftwareSerial5beginEl+0xa6>
    5672:	88 0f       	add	r24, r24
    5674:	2a 95       	dec	r18
    5676:	ea f7       	brpl	.-6      	; 0x5672 <_ZN14SoftwareSerial5beginEl+0xa4>
    5678:	01 c0       	rjmp	.+2      	; 0x567c <_ZN14SoftwareSerial5beginEl+0xae>
    567a:	84 e0       	ldi	r24, 0x04	; 4
    567c:	89 2b       	or	r24, r25
    567e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    5682:	9c 85       	ldd	r25, Y+12	; 0x0c
    5684:	98 30       	cpi	r25, 0x08	; 8
    5686:	38 f0       	brcs	.+14     	; 0x5696 <_ZN14SoftwareSerial5beginEl+0xc8>
    5688:	9e 30       	cpi	r25, 0x0E	; 14
    568a:	40 f0       	brcs	.+16     	; 0x569c <_ZN14SoftwareSerial5beginEl+0xce>
    568c:	96 31       	cpi	r25, 0x16	; 22
    568e:	48 f0       	brcs	.+18     	; 0x56a2 <_ZN14SoftwareSerial5beginEl+0xd4>
    5690:	20 e0       	ldi	r18, 0x00	; 0
    5692:	30 e0       	ldi	r19, 0x00	; 0
    5694:	08 c0       	rjmp	.+16     	; 0x56a6 <_ZN14SoftwareSerial5beginEl+0xd8>
    5696:	2d e6       	ldi	r18, 0x6D	; 109
    5698:	30 e0       	ldi	r19, 0x00	; 0
    569a:	05 c0       	rjmp	.+10     	; 0x56a6 <_ZN14SoftwareSerial5beginEl+0xd8>
    569c:	2b e6       	ldi	r18, 0x6B	; 107
    569e:	30 e0       	ldi	r19, 0x00	; 0
    56a0:	02 c0       	rjmp	.+4      	; 0x56a6 <_ZN14SoftwareSerial5beginEl+0xd8>
    56a2:	2c e6       	ldi	r18, 0x6C	; 108
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	3c 8b       	std	Y+20, r19	; 0x14
    56a8:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    56aa:	98 30       	cpi	r25, 0x08	; 8
    56ac:	30 f4       	brcc	.+12     	; 0x56ba <_ZN14SoftwareSerial5beginEl+0xec>
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	01 c0       	rjmp	.+2      	; 0x56b4 <_ZN14SoftwareSerial5beginEl+0xe6>
    56b2:	88 0f       	add	r24, r24
    56b4:	9a 95       	dec	r25
    56b6:	ea f7       	brpl	.-6      	; 0x56b2 <_ZN14SoftwareSerial5beginEl+0xe4>
    56b8:	0e c0       	rjmp	.+28     	; 0x56d6 <_ZN14SoftwareSerial5beginEl+0x108>
    56ba:	29 2f       	mov	r18, r25
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	9e 30       	cpi	r25, 0x0E	; 14
    56c0:	18 f4       	brcc	.+6      	; 0x56c8 <_ZN14SoftwareSerial5beginEl+0xfa>
    56c2:	28 50       	subi	r18, 0x08	; 8
    56c4:	31 09       	sbc	r19, r1
    56c6:	02 c0       	rjmp	.+4      	; 0x56cc <_ZN14SoftwareSerial5beginEl+0xfe>
    56c8:	2e 50       	subi	r18, 0x0E	; 14
    56ca:	31 09       	sbc	r19, r1
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	01 c0       	rjmp	.+2      	; 0x56d2 <_ZN14SoftwareSerial5beginEl+0x104>
    56d0:	88 0f       	add	r24, r24
    56d2:	2a 95       	dec	r18
    56d4:	ea f7       	brpl	.-6      	; 0x56d0 <_ZN14SoftwareSerial5beginEl+0x102>
    56d6:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    56d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    56da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    56dc:	01 97       	sbiw	r24, 0x01	; 1
    56de:	f1 f7       	brne	.-4      	; 0x56dc <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    56e0:	ce 01       	movw	r24, r28
}
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    56e6:	0c 94 c7 29 	jmp	0x538e	; 0x538e <_ZN14SoftwareSerial6listenEv>

000056ea <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    56ea:	08 95       	ret

000056ec <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    56ec:	08 95       	ret

000056ee <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    56ee:	1f 92       	push	r1
    56f0:	0f 92       	push	r0
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	0f 92       	push	r0
    56f6:	11 24       	eor	r1, r1
    56f8:	2f 93       	push	r18
    56fa:	3f 93       	push	r19
    56fc:	4f 93       	push	r20
    56fe:	5f 93       	push	r21
    5700:	6f 93       	push	r22
    5702:	7f 93       	push	r23
    5704:	8f 93       	push	r24
    5706:	9f 93       	push	r25
    5708:	af 93       	push	r26
    570a:	bf 93       	push	r27
    570c:	ef 93       	push	r30
    570e:	ff 93       	push	r31
    5710:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <intFunc>
    5714:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <intFunc+0x1>
    5718:	09 95       	icall
    571a:	ff 91       	pop	r31
    571c:	ef 91       	pop	r30
    571e:	bf 91       	pop	r27
    5720:	af 91       	pop	r26
    5722:	9f 91       	pop	r25
    5724:	8f 91       	pop	r24
    5726:	7f 91       	pop	r23
    5728:	6f 91       	pop	r22
    572a:	5f 91       	pop	r21
    572c:	4f 91       	pop	r20
    572e:	3f 91       	pop	r19
    5730:	2f 91       	pop	r18
    5732:	0f 90       	pop	r0
    5734:	0f be       	out	0x3f, r0	; 63
    5736:	0f 90       	pop	r0
    5738:	1f 90       	pop	r1
    573a:	18 95       	reti

0000573c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    573c:	1f 92       	push	r1
    573e:	0f 92       	push	r0
    5740:	0f b6       	in	r0, 0x3f	; 63
    5742:	0f 92       	push	r0
    5744:	11 24       	eor	r1, r1
    5746:	2f 93       	push	r18
    5748:	3f 93       	push	r19
    574a:	4f 93       	push	r20
    574c:	5f 93       	push	r21
    574e:	6f 93       	push	r22
    5750:	7f 93       	push	r23
    5752:	8f 93       	push	r24
    5754:	9f 93       	push	r25
    5756:	af 93       	push	r26
    5758:	bf 93       	push	r27
    575a:	ef 93       	push	r30
    575c:	ff 93       	push	r31
    575e:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <intFunc+0x2>
    5762:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <intFunc+0x3>
    5766:	09 95       	icall
    5768:	ff 91       	pop	r31
    576a:	ef 91       	pop	r30
    576c:	bf 91       	pop	r27
    576e:	af 91       	pop	r26
    5770:	9f 91       	pop	r25
    5772:	8f 91       	pop	r24
    5774:	7f 91       	pop	r23
    5776:	6f 91       	pop	r22
    5778:	5f 91       	pop	r21
    577a:	4f 91       	pop	r20
    577c:	3f 91       	pop	r19
    577e:	2f 91       	pop	r18
    5780:	0f 90       	pop	r0
    5782:	0f be       	out	0x3f, r0	; 63
    5784:	0f 90       	pop	r0
    5786:	1f 90       	pop	r1
    5788:	18 95       	reti

0000578a <__cmpsf2>:
    578a:	0e 94 ca 2b 	call	0x5794	; 0x5794 <__fp_cmp>
    578e:	08 f4       	brcc	.+2      	; 0x5792 <__cmpsf2+0x8>
    5790:	81 e0       	ldi	r24, 0x01	; 1
    5792:	08 95       	ret

00005794 <__fp_cmp>:
    5794:	99 0f       	add	r25, r25
    5796:	00 08       	sbc	r0, r0
    5798:	55 0f       	add	r21, r21
    579a:	aa 0b       	sbc	r26, r26
    579c:	e0 e8       	ldi	r30, 0x80	; 128
    579e:	fe ef       	ldi	r31, 0xFE	; 254
    57a0:	16 16       	cp	r1, r22
    57a2:	17 06       	cpc	r1, r23
    57a4:	e8 07       	cpc	r30, r24
    57a6:	f9 07       	cpc	r31, r25
    57a8:	c0 f0       	brcs	.+48     	; 0x57da <__fp_cmp+0x46>
    57aa:	12 16       	cp	r1, r18
    57ac:	13 06       	cpc	r1, r19
    57ae:	e4 07       	cpc	r30, r20
    57b0:	f5 07       	cpc	r31, r21
    57b2:	98 f0       	brcs	.+38     	; 0x57da <__fp_cmp+0x46>
    57b4:	62 1b       	sub	r22, r18
    57b6:	73 0b       	sbc	r23, r19
    57b8:	84 0b       	sbc	r24, r20
    57ba:	95 0b       	sbc	r25, r21
    57bc:	39 f4       	brne	.+14     	; 0x57cc <__fp_cmp+0x38>
    57be:	0a 26       	eor	r0, r26
    57c0:	61 f0       	breq	.+24     	; 0x57da <__fp_cmp+0x46>
    57c2:	23 2b       	or	r18, r19
    57c4:	24 2b       	or	r18, r20
    57c6:	25 2b       	or	r18, r21
    57c8:	21 f4       	brne	.+8      	; 0x57d2 <__fp_cmp+0x3e>
    57ca:	08 95       	ret
    57cc:	0a 26       	eor	r0, r26
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <__fp_cmp+0x3e>
    57d0:	a1 40       	sbci	r26, 0x01	; 1
    57d2:	a6 95       	lsr	r26
    57d4:	8f ef       	ldi	r24, 0xFF	; 255
    57d6:	81 1d       	adc	r24, r1
    57d8:	81 1d       	adc	r24, r1
    57da:	08 95       	ret

000057dc <__divmodhi4>:
    57dc:	97 fb       	bst	r25, 7
    57de:	07 2e       	mov	r0, r23
    57e0:	16 f4       	brtc	.+4      	; 0x57e6 <__divmodhi4+0xa>
    57e2:	00 94       	com	r0
    57e4:	07 d0       	rcall	.+14     	; 0x57f4 <__divmodhi4_neg1>
    57e6:	77 fd       	sbrc	r23, 7
    57e8:	09 d0       	rcall	.+18     	; 0x57fc <__divmodhi4_neg2>
    57ea:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__udivmodhi4>
    57ee:	07 fc       	sbrc	r0, 7
    57f0:	05 d0       	rcall	.+10     	; 0x57fc <__divmodhi4_neg2>
    57f2:	3e f4       	brtc	.+14     	; 0x5802 <__divmodhi4_exit>

000057f4 <__divmodhi4_neg1>:
    57f4:	90 95       	com	r25
    57f6:	81 95       	neg	r24
    57f8:	9f 4f       	sbci	r25, 0xFF	; 255
    57fa:	08 95       	ret

000057fc <__divmodhi4_neg2>:
    57fc:	70 95       	com	r23
    57fe:	61 95       	neg	r22
    5800:	7f 4f       	sbci	r23, 0xFF	; 255

00005802 <__divmodhi4_exit>:
    5802:	08 95       	ret

00005804 <__udivmodsi4>:
    5804:	a1 e2       	ldi	r26, 0x21	; 33
    5806:	1a 2e       	mov	r1, r26
    5808:	aa 1b       	sub	r26, r26
    580a:	bb 1b       	sub	r27, r27
    580c:	fd 01       	movw	r30, r26
    580e:	0d c0       	rjmp	.+26     	; 0x582a <__udivmodsi4_ep>

00005810 <__udivmodsi4_loop>:
    5810:	aa 1f       	adc	r26, r26
    5812:	bb 1f       	adc	r27, r27
    5814:	ee 1f       	adc	r30, r30
    5816:	ff 1f       	adc	r31, r31
    5818:	a2 17       	cp	r26, r18
    581a:	b3 07       	cpc	r27, r19
    581c:	e4 07       	cpc	r30, r20
    581e:	f5 07       	cpc	r31, r21
    5820:	20 f0       	brcs	.+8      	; 0x582a <__udivmodsi4_ep>
    5822:	a2 1b       	sub	r26, r18
    5824:	b3 0b       	sbc	r27, r19
    5826:	e4 0b       	sbc	r30, r20
    5828:	f5 0b       	sbc	r31, r21

0000582a <__udivmodsi4_ep>:
    582a:	66 1f       	adc	r22, r22
    582c:	77 1f       	adc	r23, r23
    582e:	88 1f       	adc	r24, r24
    5830:	99 1f       	adc	r25, r25
    5832:	1a 94       	dec	r1
    5834:	69 f7       	brne	.-38     	; 0x5810 <__udivmodsi4_loop>
    5836:	60 95       	com	r22
    5838:	70 95       	com	r23
    583a:	80 95       	com	r24
    583c:	90 95       	com	r25
    583e:	9b 01       	movw	r18, r22
    5840:	ac 01       	movw	r20, r24
    5842:	bd 01       	movw	r22, r26
    5844:	cf 01       	movw	r24, r30
    5846:	08 95       	ret

00005848 <__divmodsi4>:
    5848:	05 2e       	mov	r0, r21
    584a:	97 fb       	bst	r25, 7
    584c:	1e f4       	brtc	.+6      	; 0x5854 <__divmodsi4+0xc>
    584e:	00 94       	com	r0
    5850:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__negsi2>
    5854:	57 fd       	sbrc	r21, 7
    5856:	07 d0       	rcall	.+14     	; 0x5866 <__divmodsi4_neg2>
    5858:	0e 94 02 2c 	call	0x5804	; 0x5804 <__udivmodsi4>
    585c:	07 fc       	sbrc	r0, 7
    585e:	03 d0       	rcall	.+6      	; 0x5866 <__divmodsi4_neg2>
    5860:	4e f4       	brtc	.+18     	; 0x5874 <__divmodsi4_exit>
    5862:	0c 94 3b 2c 	jmp	0x5876	; 0x5876 <__negsi2>

00005866 <__divmodsi4_neg2>:
    5866:	50 95       	com	r21
    5868:	40 95       	com	r20
    586a:	30 95       	com	r19
    586c:	21 95       	neg	r18
    586e:	3f 4f       	sbci	r19, 0xFF	; 255
    5870:	4f 4f       	sbci	r20, 0xFF	; 255
    5872:	5f 4f       	sbci	r21, 0xFF	; 255

00005874 <__divmodsi4_exit>:
    5874:	08 95       	ret

00005876 <__negsi2>:
    5876:	90 95       	com	r25
    5878:	80 95       	com	r24
    587a:	70 95       	com	r23
    587c:	61 95       	neg	r22
    587e:	7f 4f       	sbci	r23, 0xFF	; 255
    5880:	8f 4f       	sbci	r24, 0xFF	; 255
    5882:	9f 4f       	sbci	r25, 0xFF	; 255
    5884:	08 95       	ret

00005886 <__tablejump2__>:
    5886:	ee 0f       	add	r30, r30
    5888:	ff 1f       	adc	r31, r31
    588a:	05 90       	lpm	r0, Z+
    588c:	f4 91       	lpm	r31, Z
    588e:	e0 2d       	mov	r30, r0
    5890:	09 94       	ijmp

00005892 <__muluhisi3>:
    5892:	0e 94 86 2c 	call	0x590c	; 0x590c <__umulhisi3>
    5896:	a5 9f       	mul	r26, r21
    5898:	90 0d       	add	r25, r0
    589a:	b4 9f       	mul	r27, r20
    589c:	90 0d       	add	r25, r0
    589e:	a4 9f       	mul	r26, r20
    58a0:	80 0d       	add	r24, r0
    58a2:	91 1d       	adc	r25, r1
    58a4:	11 24       	eor	r1, r1
    58a6:	08 95       	ret

000058a8 <__ashrdi3>:
    58a8:	97 fb       	bst	r25, 7
    58aa:	10 f8       	bld	r1, 0

000058ac <__lshrdi3>:
    58ac:	16 94       	lsr	r1
    58ae:	00 08       	sbc	r0, r0
    58b0:	0f 93       	push	r16
    58b2:	08 30       	cpi	r16, 0x08	; 8
    58b4:	98 f0       	brcs	.+38     	; 0x58dc <__lshrdi3+0x30>
    58b6:	08 50       	subi	r16, 0x08	; 8
    58b8:	23 2f       	mov	r18, r19
    58ba:	34 2f       	mov	r19, r20
    58bc:	45 2f       	mov	r20, r21
    58be:	56 2f       	mov	r21, r22
    58c0:	67 2f       	mov	r22, r23
    58c2:	78 2f       	mov	r23, r24
    58c4:	89 2f       	mov	r24, r25
    58c6:	90 2d       	mov	r25, r0
    58c8:	f4 cf       	rjmp	.-24     	; 0x58b2 <__lshrdi3+0x6>
    58ca:	05 94       	asr	r0
    58cc:	97 95       	ror	r25
    58ce:	87 95       	ror	r24
    58d0:	77 95       	ror	r23
    58d2:	67 95       	ror	r22
    58d4:	57 95       	ror	r21
    58d6:	47 95       	ror	r20
    58d8:	37 95       	ror	r19
    58da:	27 95       	ror	r18
    58dc:	0a 95       	dec	r16
    58de:	aa f7       	brpl	.-22     	; 0x58ca <__lshrdi3+0x1e>
    58e0:	0f 91       	pop	r16
    58e2:	08 95       	ret

000058e4 <__udivmodhi4>:
    58e4:	aa 1b       	sub	r26, r26
    58e6:	bb 1b       	sub	r27, r27
    58e8:	51 e1       	ldi	r21, 0x11	; 17
    58ea:	07 c0       	rjmp	.+14     	; 0x58fa <__udivmodhi4_ep>

000058ec <__udivmodhi4_loop>:
    58ec:	aa 1f       	adc	r26, r26
    58ee:	bb 1f       	adc	r27, r27
    58f0:	a6 17       	cp	r26, r22
    58f2:	b7 07       	cpc	r27, r23
    58f4:	10 f0       	brcs	.+4      	; 0x58fa <__udivmodhi4_ep>
    58f6:	a6 1b       	sub	r26, r22
    58f8:	b7 0b       	sbc	r27, r23

000058fa <__udivmodhi4_ep>:
    58fa:	88 1f       	adc	r24, r24
    58fc:	99 1f       	adc	r25, r25
    58fe:	5a 95       	dec	r21
    5900:	a9 f7       	brne	.-22     	; 0x58ec <__udivmodhi4_loop>
    5902:	80 95       	com	r24
    5904:	90 95       	com	r25
    5906:	bc 01       	movw	r22, r24
    5908:	cd 01       	movw	r24, r26
    590a:	08 95       	ret

0000590c <__umulhisi3>:
    590c:	a2 9f       	mul	r26, r18
    590e:	b0 01       	movw	r22, r0
    5910:	b3 9f       	mul	r27, r19
    5912:	c0 01       	movw	r24, r0
    5914:	a3 9f       	mul	r26, r19
    5916:	70 0d       	add	r23, r0
    5918:	81 1d       	adc	r24, r1
    591a:	11 24       	eor	r1, r1
    591c:	91 1d       	adc	r25, r1
    591e:	b2 9f       	mul	r27, r18
    5920:	70 0d       	add	r23, r0
    5922:	81 1d       	adc	r24, r1
    5924:	11 24       	eor	r1, r1
    5926:	91 1d       	adc	r25, r1
    5928:	08 95       	ret

0000592a <malloc>:
    592a:	0f 93       	push	r16
    592c:	1f 93       	push	r17
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	82 30       	cpi	r24, 0x02	; 2
    5934:	91 05       	cpc	r25, r1
    5936:	10 f4       	brcc	.+4      	; 0x593c <malloc+0x12>
    5938:	82 e0       	ldi	r24, 0x02	; 2
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <__flp>
    5940:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <__flp+0x1>
    5944:	20 e0       	ldi	r18, 0x00	; 0
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	a0 e0       	ldi	r26, 0x00	; 0
    594a:	b0 e0       	ldi	r27, 0x00	; 0
    594c:	30 97       	sbiw	r30, 0x00	; 0
    594e:	19 f1       	breq	.+70     	; 0x5996 <malloc+0x6c>
    5950:	40 81       	ld	r20, Z
    5952:	51 81       	ldd	r21, Z+1	; 0x01
    5954:	02 81       	ldd	r16, Z+2	; 0x02
    5956:	13 81       	ldd	r17, Z+3	; 0x03
    5958:	48 17       	cp	r20, r24
    595a:	59 07       	cpc	r21, r25
    595c:	c8 f0       	brcs	.+50     	; 0x5990 <malloc+0x66>
    595e:	84 17       	cp	r24, r20
    5960:	95 07       	cpc	r25, r21
    5962:	69 f4       	brne	.+26     	; 0x597e <malloc+0x54>
    5964:	10 97       	sbiw	r26, 0x00	; 0
    5966:	31 f0       	breq	.+12     	; 0x5974 <malloc+0x4a>
    5968:	12 96       	adiw	r26, 0x02	; 2
    596a:	0c 93       	st	X, r16
    596c:	12 97       	sbiw	r26, 0x02	; 2
    596e:	13 96       	adiw	r26, 0x03	; 3
    5970:	1c 93       	st	X, r17
    5972:	27 c0       	rjmp	.+78     	; 0x59c2 <malloc+0x98>
    5974:	00 93 84 08 	sts	0x0884, r16	; 0x800884 <__flp>
    5978:	10 93 85 08 	sts	0x0885, r17	; 0x800885 <__flp+0x1>
    597c:	22 c0       	rjmp	.+68     	; 0x59c2 <malloc+0x98>
    597e:	21 15       	cp	r18, r1
    5980:	31 05       	cpc	r19, r1
    5982:	19 f0       	breq	.+6      	; 0x598a <malloc+0x60>
    5984:	42 17       	cp	r20, r18
    5986:	53 07       	cpc	r21, r19
    5988:	18 f4       	brcc	.+6      	; 0x5990 <malloc+0x66>
    598a:	9a 01       	movw	r18, r20
    598c:	bd 01       	movw	r22, r26
    598e:	ef 01       	movw	r28, r30
    5990:	df 01       	movw	r26, r30
    5992:	f8 01       	movw	r30, r16
    5994:	db cf       	rjmp	.-74     	; 0x594c <malloc+0x22>
    5996:	21 15       	cp	r18, r1
    5998:	31 05       	cpc	r19, r1
    599a:	f9 f0       	breq	.+62     	; 0x59da <malloc+0xb0>
    599c:	28 1b       	sub	r18, r24
    599e:	39 0b       	sbc	r19, r25
    59a0:	24 30       	cpi	r18, 0x04	; 4
    59a2:	31 05       	cpc	r19, r1
    59a4:	80 f4       	brcc	.+32     	; 0x59c6 <malloc+0x9c>
    59a6:	8a 81       	ldd	r24, Y+2	; 0x02
    59a8:	9b 81       	ldd	r25, Y+3	; 0x03
    59aa:	61 15       	cp	r22, r1
    59ac:	71 05       	cpc	r23, r1
    59ae:	21 f0       	breq	.+8      	; 0x59b8 <malloc+0x8e>
    59b0:	fb 01       	movw	r30, r22
    59b2:	93 83       	std	Z+3, r25	; 0x03
    59b4:	82 83       	std	Z+2, r24	; 0x02
    59b6:	04 c0       	rjmp	.+8      	; 0x59c0 <malloc+0x96>
    59b8:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <__flp+0x1>
    59bc:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <__flp>
    59c0:	fe 01       	movw	r30, r28
    59c2:	32 96       	adiw	r30, 0x02	; 2
    59c4:	44 c0       	rjmp	.+136    	; 0x5a4e <malloc+0x124>
    59c6:	fe 01       	movw	r30, r28
    59c8:	e2 0f       	add	r30, r18
    59ca:	f3 1f       	adc	r31, r19
    59cc:	81 93       	st	Z+, r24
    59ce:	91 93       	st	Z+, r25
    59d0:	22 50       	subi	r18, 0x02	; 2
    59d2:	31 09       	sbc	r19, r1
    59d4:	39 83       	std	Y+1, r19	; 0x01
    59d6:	28 83       	st	Y, r18
    59d8:	3a c0       	rjmp	.+116    	; 0x5a4e <malloc+0x124>
    59da:	20 91 82 08 	lds	r18, 0x0882	; 0x800882 <__brkval>
    59de:	30 91 83 08 	lds	r19, 0x0883	; 0x800883 <__brkval+0x1>
    59e2:	23 2b       	or	r18, r19
    59e4:	41 f4       	brne	.+16     	; 0x59f6 <malloc+0xcc>
    59e6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_start>
    59ea:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    59ee:	30 93 83 08 	sts	0x0883, r19	; 0x800883 <__brkval+0x1>
    59f2:	20 93 82 08 	sts	0x0882, r18	; 0x800882 <__brkval>
    59f6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_end>
    59fa:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    59fe:	21 15       	cp	r18, r1
    5a00:	31 05       	cpc	r19, r1
    5a02:	41 f4       	brne	.+16     	; 0x5a14 <malloc+0xea>
    5a04:	2d b7       	in	r18, 0x3d	; 61
    5a06:	3e b7       	in	r19, 0x3e	; 62
    5a08:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    5a0c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    5a10:	24 1b       	sub	r18, r20
    5a12:	35 0b       	sbc	r19, r21
    5a14:	e0 91 82 08 	lds	r30, 0x0882	; 0x800882 <__brkval>
    5a18:	f0 91 83 08 	lds	r31, 0x0883	; 0x800883 <__brkval+0x1>
    5a1c:	e2 17       	cp	r30, r18
    5a1e:	f3 07       	cpc	r31, r19
    5a20:	a0 f4       	brcc	.+40     	; 0x5a4a <malloc+0x120>
    5a22:	2e 1b       	sub	r18, r30
    5a24:	3f 0b       	sbc	r19, r31
    5a26:	28 17       	cp	r18, r24
    5a28:	39 07       	cpc	r19, r25
    5a2a:	78 f0       	brcs	.+30     	; 0x5a4a <malloc+0x120>
    5a2c:	ac 01       	movw	r20, r24
    5a2e:	4e 5f       	subi	r20, 0xFE	; 254
    5a30:	5f 4f       	sbci	r21, 0xFF	; 255
    5a32:	24 17       	cp	r18, r20
    5a34:	35 07       	cpc	r19, r21
    5a36:	48 f0       	brcs	.+18     	; 0x5a4a <malloc+0x120>
    5a38:	4e 0f       	add	r20, r30
    5a3a:	5f 1f       	adc	r21, r31
    5a3c:	50 93 83 08 	sts	0x0883, r21	; 0x800883 <__brkval+0x1>
    5a40:	40 93 82 08 	sts	0x0882, r20	; 0x800882 <__brkval>
    5a44:	81 93       	st	Z+, r24
    5a46:	91 93       	st	Z+, r25
    5a48:	02 c0       	rjmp	.+4      	; 0x5a4e <malloc+0x124>
    5a4a:	e0 e0       	ldi	r30, 0x00	; 0
    5a4c:	f0 e0       	ldi	r31, 0x00	; 0
    5a4e:	cf 01       	movw	r24, r30
    5a50:	df 91       	pop	r29
    5a52:	cf 91       	pop	r28
    5a54:	1f 91       	pop	r17
    5a56:	0f 91       	pop	r16
    5a58:	08 95       	ret

00005a5a <free>:
    5a5a:	cf 93       	push	r28
    5a5c:	df 93       	push	r29
    5a5e:	00 97       	sbiw	r24, 0x00	; 0
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <free+0xa>
    5a62:	81 c0       	rjmp	.+258    	; 0x5b66 <free+0x10c>
    5a64:	fc 01       	movw	r30, r24
    5a66:	32 97       	sbiw	r30, 0x02	; 2
    5a68:	13 82       	std	Z+3, r1	; 0x03
    5a6a:	12 82       	std	Z+2, r1	; 0x02
    5a6c:	a0 91 84 08 	lds	r26, 0x0884	; 0x800884 <__flp>
    5a70:	b0 91 85 08 	lds	r27, 0x0885	; 0x800885 <__flp+0x1>
    5a74:	10 97       	sbiw	r26, 0x00	; 0
    5a76:	81 f4       	brne	.+32     	; 0x5a98 <free+0x3e>
    5a78:	20 81       	ld	r18, Z
    5a7a:	31 81       	ldd	r19, Z+1	; 0x01
    5a7c:	82 0f       	add	r24, r18
    5a7e:	93 1f       	adc	r25, r19
    5a80:	20 91 82 08 	lds	r18, 0x0882	; 0x800882 <__brkval>
    5a84:	30 91 83 08 	lds	r19, 0x0883	; 0x800883 <__brkval+0x1>
    5a88:	28 17       	cp	r18, r24
    5a8a:	39 07       	cpc	r19, r25
    5a8c:	51 f5       	brne	.+84     	; 0x5ae2 <free+0x88>
    5a8e:	f0 93 83 08 	sts	0x0883, r31	; 0x800883 <__brkval+0x1>
    5a92:	e0 93 82 08 	sts	0x0882, r30	; 0x800882 <__brkval>
    5a96:	67 c0       	rjmp	.+206    	; 0x5b66 <free+0x10c>
    5a98:	ed 01       	movw	r28, r26
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	30 e0       	ldi	r19, 0x00	; 0
    5a9e:	ce 17       	cp	r28, r30
    5aa0:	df 07       	cpc	r29, r31
    5aa2:	40 f4       	brcc	.+16     	; 0x5ab4 <free+0x5a>
    5aa4:	4a 81       	ldd	r20, Y+2	; 0x02
    5aa6:	5b 81       	ldd	r21, Y+3	; 0x03
    5aa8:	9e 01       	movw	r18, r28
    5aaa:	41 15       	cp	r20, r1
    5aac:	51 05       	cpc	r21, r1
    5aae:	f1 f0       	breq	.+60     	; 0x5aec <free+0x92>
    5ab0:	ea 01       	movw	r28, r20
    5ab2:	f5 cf       	rjmp	.-22     	; 0x5a9e <free+0x44>
    5ab4:	d3 83       	std	Z+3, r29	; 0x03
    5ab6:	c2 83       	std	Z+2, r28	; 0x02
    5ab8:	40 81       	ld	r20, Z
    5aba:	51 81       	ldd	r21, Z+1	; 0x01
    5abc:	84 0f       	add	r24, r20
    5abe:	95 1f       	adc	r25, r21
    5ac0:	c8 17       	cp	r28, r24
    5ac2:	d9 07       	cpc	r29, r25
    5ac4:	59 f4       	brne	.+22     	; 0x5adc <free+0x82>
    5ac6:	88 81       	ld	r24, Y
    5ac8:	99 81       	ldd	r25, Y+1	; 0x01
    5aca:	84 0f       	add	r24, r20
    5acc:	95 1f       	adc	r25, r21
    5ace:	02 96       	adiw	r24, 0x02	; 2
    5ad0:	91 83       	std	Z+1, r25	; 0x01
    5ad2:	80 83       	st	Z, r24
    5ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ad8:	93 83       	std	Z+3, r25	; 0x03
    5ada:	82 83       	std	Z+2, r24	; 0x02
    5adc:	21 15       	cp	r18, r1
    5ade:	31 05       	cpc	r19, r1
    5ae0:	29 f4       	brne	.+10     	; 0x5aec <free+0x92>
    5ae2:	f0 93 85 08 	sts	0x0885, r31	; 0x800885 <__flp+0x1>
    5ae6:	e0 93 84 08 	sts	0x0884, r30	; 0x800884 <__flp>
    5aea:	3d c0       	rjmp	.+122    	; 0x5b66 <free+0x10c>
    5aec:	e9 01       	movw	r28, r18
    5aee:	fb 83       	std	Y+3, r31	; 0x03
    5af0:	ea 83       	std	Y+2, r30	; 0x02
    5af2:	49 91       	ld	r20, Y+
    5af4:	59 91       	ld	r21, Y+
    5af6:	c4 0f       	add	r28, r20
    5af8:	d5 1f       	adc	r29, r21
    5afa:	ec 17       	cp	r30, r28
    5afc:	fd 07       	cpc	r31, r29
    5afe:	61 f4       	brne	.+24     	; 0x5b18 <free+0xbe>
    5b00:	80 81       	ld	r24, Z
    5b02:	91 81       	ldd	r25, Z+1	; 0x01
    5b04:	84 0f       	add	r24, r20
    5b06:	95 1f       	adc	r25, r21
    5b08:	02 96       	adiw	r24, 0x02	; 2
    5b0a:	e9 01       	movw	r28, r18
    5b0c:	99 83       	std	Y+1, r25	; 0x01
    5b0e:	88 83       	st	Y, r24
    5b10:	82 81       	ldd	r24, Z+2	; 0x02
    5b12:	93 81       	ldd	r25, Z+3	; 0x03
    5b14:	9b 83       	std	Y+3, r25	; 0x03
    5b16:	8a 83       	std	Y+2, r24	; 0x02
    5b18:	e0 e0       	ldi	r30, 0x00	; 0
    5b1a:	f0 e0       	ldi	r31, 0x00	; 0
    5b1c:	12 96       	adiw	r26, 0x02	; 2
    5b1e:	8d 91       	ld	r24, X+
    5b20:	9c 91       	ld	r25, X
    5b22:	13 97       	sbiw	r26, 0x03	; 3
    5b24:	00 97       	sbiw	r24, 0x00	; 0
    5b26:	19 f0       	breq	.+6      	; 0x5b2e <free+0xd4>
    5b28:	fd 01       	movw	r30, r26
    5b2a:	dc 01       	movw	r26, r24
    5b2c:	f7 cf       	rjmp	.-18     	; 0x5b1c <free+0xc2>
    5b2e:	8d 91       	ld	r24, X+
    5b30:	9c 91       	ld	r25, X
    5b32:	11 97       	sbiw	r26, 0x01	; 1
    5b34:	9d 01       	movw	r18, r26
    5b36:	2e 5f       	subi	r18, 0xFE	; 254
    5b38:	3f 4f       	sbci	r19, 0xFF	; 255
    5b3a:	82 0f       	add	r24, r18
    5b3c:	93 1f       	adc	r25, r19
    5b3e:	20 91 82 08 	lds	r18, 0x0882	; 0x800882 <__brkval>
    5b42:	30 91 83 08 	lds	r19, 0x0883	; 0x800883 <__brkval+0x1>
    5b46:	28 17       	cp	r18, r24
    5b48:	39 07       	cpc	r19, r25
    5b4a:	69 f4       	brne	.+26     	; 0x5b66 <free+0x10c>
    5b4c:	30 97       	sbiw	r30, 0x00	; 0
    5b4e:	29 f4       	brne	.+10     	; 0x5b5a <free+0x100>
    5b50:	10 92 85 08 	sts	0x0885, r1	; 0x800885 <__flp+0x1>
    5b54:	10 92 84 08 	sts	0x0884, r1	; 0x800884 <__flp>
    5b58:	02 c0       	rjmp	.+4      	; 0x5b5e <free+0x104>
    5b5a:	13 82       	std	Z+3, r1	; 0x03
    5b5c:	12 82       	std	Z+2, r1	; 0x02
    5b5e:	b0 93 83 08 	sts	0x0883, r27	; 0x800883 <__brkval+0x1>
    5b62:	a0 93 82 08 	sts	0x0882, r26	; 0x800882 <__brkval>
    5b66:	df 91       	pop	r29
    5b68:	cf 91       	pop	r28
    5b6a:	08 95       	ret

00005b6c <abort>:
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	f8 94       	cli
    5b72:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__do_global_dtors>

00005b76 <atof>:
    5b76:	66 27       	eor	r22, r22
    5b78:	77 27       	eor	r23, r23
    5b7a:	0c 94 8a 2e 	jmp	0x5d14	; 0x5d14 <strtod>

00005b7e <atoi>:
    5b7e:	fc 01       	movw	r30, r24
    5b80:	88 27       	eor	r24, r24
    5b82:	99 27       	eor	r25, r25
    5b84:	e8 94       	clt
    5b86:	21 91       	ld	r18, Z+
    5b88:	20 32       	cpi	r18, 0x20	; 32
    5b8a:	e9 f3       	breq	.-6      	; 0x5b86 <atoi+0x8>
    5b8c:	29 30       	cpi	r18, 0x09	; 9
    5b8e:	10 f0       	brcs	.+4      	; 0x5b94 <atoi+0x16>
    5b90:	2e 30       	cpi	r18, 0x0E	; 14
    5b92:	c8 f3       	brcs	.-14     	; 0x5b86 <atoi+0x8>
    5b94:	2b 32       	cpi	r18, 0x2B	; 43
    5b96:	41 f0       	breq	.+16     	; 0x5ba8 <atoi+0x2a>
    5b98:	2d 32       	cpi	r18, 0x2D	; 45
    5b9a:	39 f4       	brne	.+14     	; 0x5baa <atoi+0x2c>
    5b9c:	68 94       	set
    5b9e:	04 c0       	rjmp	.+8      	; 0x5ba8 <atoi+0x2a>
    5ba0:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <__mulhi_const_10>
    5ba4:	82 0f       	add	r24, r18
    5ba6:	91 1d       	adc	r25, r1
    5ba8:	21 91       	ld	r18, Z+
    5baa:	20 53       	subi	r18, 0x30	; 48
    5bac:	2a 30       	cpi	r18, 0x0A	; 10
    5bae:	c0 f3       	brcs	.-16     	; 0x5ba0 <atoi+0x22>
    5bb0:	1e f4       	brtc	.+6      	; 0x5bb8 <atoi+0x3a>
    5bb2:	90 95       	com	r25
    5bb4:	81 95       	neg	r24
    5bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb8:	08 95       	ret

00005bba <strcmp_P>:
    5bba:	fb 01       	movw	r30, r22
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	8d 91       	ld	r24, X+
    5bc0:	05 90       	lpm	r0, Z+
    5bc2:	80 19       	sub	r24, r0
    5bc4:	01 10       	cpse	r0, r1
    5bc6:	d9 f3       	breq	.-10     	; 0x5bbe <strcmp_P+0x4>
    5bc8:	99 0b       	sbc	r25, r25
    5bca:	08 95       	ret

00005bcc <__strlen_P>:
    5bcc:	fc 01       	movw	r30, r24
    5bce:	05 90       	lpm	r0, Z+
    5bd0:	00 20       	and	r0, r0
    5bd2:	e9 f7       	brne	.-6      	; 0x5bce <__strlen_P+0x2>
    5bd4:	80 95       	com	r24
    5bd6:	90 95       	com	r25
    5bd8:	8e 0f       	add	r24, r30
    5bda:	9f 1f       	adc	r25, r31
    5bdc:	08 95       	ret

00005bde <strstr_P>:
    5bde:	fb 01       	movw	r30, r22
    5be0:	55 91       	lpm	r21, Z+
    5be2:	55 23       	and	r21, r21
    5be4:	a9 f0       	breq	.+42     	; 0x5c10 <strstr_P+0x32>
    5be6:	bf 01       	movw	r22, r30
    5be8:	dc 01       	movw	r26, r24
    5bea:	4d 91       	ld	r20, X+
    5bec:	45 17       	cp	r20, r21
    5bee:	41 11       	cpse	r20, r1
    5bf0:	e1 f7       	brne	.-8      	; 0x5bea <strstr_P+0xc>
    5bf2:	59 f4       	brne	.+22     	; 0x5c0a <strstr_P+0x2c>
    5bf4:	cd 01       	movw	r24, r26
    5bf6:	05 90       	lpm	r0, Z+
    5bf8:	00 20       	and	r0, r0
    5bfa:	49 f0       	breq	.+18     	; 0x5c0e <strstr_P+0x30>
    5bfc:	4d 91       	ld	r20, X+
    5bfe:	40 15       	cp	r20, r0
    5c00:	41 11       	cpse	r20, r1
    5c02:	c9 f3       	breq	.-14     	; 0x5bf6 <strstr_P+0x18>
    5c04:	fb 01       	movw	r30, r22
    5c06:	41 11       	cpse	r20, r1
    5c08:	ef cf       	rjmp	.-34     	; 0x5be8 <strstr_P+0xa>
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	90 e0       	ldi	r25, 0x00	; 0
    5c0e:	01 97       	sbiw	r24, 0x01	; 1
    5c10:	08 95       	ret

00005c12 <strtok>:
    5c12:	46 e9       	ldi	r20, 0x96	; 150
    5c14:	57 e0       	ldi	r21, 0x07	; 7
    5c16:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <strtok_r>
    5c1a:	08 95       	ret

00005c1c <memset>:
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	01 c0       	rjmp	.+2      	; 0x5c22 <memset+0x6>
    5c20:	6d 93       	st	X+, r22
    5c22:	41 50       	subi	r20, 0x01	; 1
    5c24:	50 40       	sbci	r21, 0x00	; 0
    5c26:	e0 f7       	brcc	.-8      	; 0x5c20 <memset+0x4>
    5c28:	08 95       	ret

00005c2a <strchr>:
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	81 91       	ld	r24, Z+
    5c2e:	86 17       	cp	r24, r22
    5c30:	21 f0       	breq	.+8      	; 0x5c3a <strchr+0x10>
    5c32:	88 23       	and	r24, r24
    5c34:	d9 f7       	brne	.-10     	; 0x5c2c <strchr+0x2>
    5c36:	99 27       	eor	r25, r25
    5c38:	08 95       	ret
    5c3a:	31 97       	sbiw	r30, 0x01	; 1
    5c3c:	cf 01       	movw	r24, r30
    5c3e:	08 95       	ret

00005c40 <strcmp>:
    5c40:	fb 01       	movw	r30, r22
    5c42:	dc 01       	movw	r26, r24
    5c44:	8d 91       	ld	r24, X+
    5c46:	01 90       	ld	r0, Z+
    5c48:	80 19       	sub	r24, r0
    5c4a:	01 10       	cpse	r0, r1
    5c4c:	d9 f3       	breq	.-10     	; 0x5c44 <strcmp+0x4>
    5c4e:	99 0b       	sbc	r25, r25
    5c50:	08 95       	ret

00005c52 <strlen>:
    5c52:	fc 01       	movw	r30, r24
    5c54:	01 90       	ld	r0, Z+
    5c56:	00 20       	and	r0, r0
    5c58:	e9 f7       	brne	.-6      	; 0x5c54 <strlen+0x2>
    5c5a:	80 95       	com	r24
    5c5c:	90 95       	com	r25
    5c5e:	8e 0f       	add	r24, r30
    5c60:	9f 1f       	adc	r25, r31
    5c62:	08 95       	ret

00005c64 <strncpy>:
    5c64:	fb 01       	movw	r30, r22
    5c66:	dc 01       	movw	r26, r24
    5c68:	41 50       	subi	r20, 0x01	; 1
    5c6a:	50 40       	sbci	r21, 0x00	; 0
    5c6c:	48 f0       	brcs	.+18     	; 0x5c80 <strncpy+0x1c>
    5c6e:	01 90       	ld	r0, Z+
    5c70:	0d 92       	st	X+, r0
    5c72:	00 20       	and	r0, r0
    5c74:	c9 f7       	brne	.-14     	; 0x5c68 <strncpy+0x4>
    5c76:	01 c0       	rjmp	.+2      	; 0x5c7a <strncpy+0x16>
    5c78:	1d 92       	st	X+, r1
    5c7a:	41 50       	subi	r20, 0x01	; 1
    5c7c:	50 40       	sbci	r21, 0x00	; 0
    5c7e:	e0 f7       	brcc	.-8      	; 0x5c78 <strncpy+0x14>
    5c80:	08 95       	ret

00005c82 <strstr>:
    5c82:	fb 01       	movw	r30, r22
    5c84:	51 91       	ld	r21, Z+
    5c86:	55 23       	and	r21, r21
    5c88:	a9 f0       	breq	.+42     	; 0x5cb4 <strstr+0x32>
    5c8a:	bf 01       	movw	r22, r30
    5c8c:	dc 01       	movw	r26, r24
    5c8e:	4d 91       	ld	r20, X+
    5c90:	45 17       	cp	r20, r21
    5c92:	41 11       	cpse	r20, r1
    5c94:	e1 f7       	brne	.-8      	; 0x5c8e <strstr+0xc>
    5c96:	59 f4       	brne	.+22     	; 0x5cae <strstr+0x2c>
    5c98:	cd 01       	movw	r24, r26
    5c9a:	01 90       	ld	r0, Z+
    5c9c:	00 20       	and	r0, r0
    5c9e:	49 f0       	breq	.+18     	; 0x5cb2 <strstr+0x30>
    5ca0:	4d 91       	ld	r20, X+
    5ca2:	40 15       	cp	r20, r0
    5ca4:	41 11       	cpse	r20, r1
    5ca6:	c9 f3       	breq	.-14     	; 0x5c9a <strstr+0x18>
    5ca8:	fb 01       	movw	r30, r22
    5caa:	41 11       	cpse	r20, r1
    5cac:	ef cf       	rjmp	.-34     	; 0x5c8c <strstr+0xa>
    5cae:	81 e0       	ldi	r24, 0x01	; 1
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	01 97       	sbiw	r24, 0x01	; 1
    5cb4:	08 95       	ret

00005cb6 <strtok_r>:
    5cb6:	fa 01       	movw	r30, r20
    5cb8:	a1 91       	ld	r26, Z+
    5cba:	b0 81       	ld	r27, Z
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	19 f4       	brne	.+6      	; 0x5cc6 <strtok_r+0x10>
    5cc0:	10 97       	sbiw	r26, 0x00	; 0
    5cc2:	e1 f0       	breq	.+56     	; 0x5cfc <strtok_r+0x46>
    5cc4:	cd 01       	movw	r24, r26
    5cc6:	dc 01       	movw	r26, r24
    5cc8:	cd 01       	movw	r24, r26
    5cca:	0d 90       	ld	r0, X+
    5ccc:	00 20       	and	r0, r0
    5cce:	11 f4       	brne	.+4      	; 0x5cd4 <strtok_r+0x1e>
    5cd0:	c0 01       	movw	r24, r0
    5cd2:	13 c0       	rjmp	.+38     	; 0x5cfa <strtok_r+0x44>
    5cd4:	fb 01       	movw	r30, r22
    5cd6:	21 91       	ld	r18, Z+
    5cd8:	22 23       	and	r18, r18
    5cda:	19 f0       	breq	.+6      	; 0x5ce2 <strtok_r+0x2c>
    5cdc:	20 15       	cp	r18, r0
    5cde:	d9 f7       	brne	.-10     	; 0x5cd6 <strtok_r+0x20>
    5ce0:	f3 cf       	rjmp	.-26     	; 0x5cc8 <strtok_r+0x12>
    5ce2:	fb 01       	movw	r30, r22
    5ce4:	21 91       	ld	r18, Z+
    5ce6:	20 15       	cp	r18, r0
    5ce8:	19 f4       	brne	.+6      	; 0x5cf0 <strtok_r+0x3a>
    5cea:	1e 92       	st	-X, r1
    5cec:	11 96       	adiw	r26, 0x01	; 1
    5cee:	06 c0       	rjmp	.+12     	; 0x5cfc <strtok_r+0x46>
    5cf0:	22 23       	and	r18, r18
    5cf2:	c1 f7       	brne	.-16     	; 0x5ce4 <strtok_r+0x2e>
    5cf4:	0d 90       	ld	r0, X+
    5cf6:	00 20       	and	r0, r0
    5cf8:	a1 f7       	brne	.-24     	; 0x5ce2 <strtok_r+0x2c>
    5cfa:	d0 01       	movw	r26, r0
    5cfc:	fa 01       	movw	r30, r20
    5cfe:	a1 93       	st	Z+, r26
    5d00:	b0 83       	st	Z, r27
    5d02:	08 95       	ret

00005d04 <__mulhi_const_10>:
    5d04:	7a e0       	ldi	r23, 0x0A	; 10
    5d06:	97 9f       	mul	r25, r23
    5d08:	90 2d       	mov	r25, r0
    5d0a:	87 9f       	mul	r24, r23
    5d0c:	80 2d       	mov	r24, r0
    5d0e:	91 0d       	add	r25, r1
    5d10:	11 24       	eor	r1, r1
    5d12:	08 95       	ret

00005d14 <strtod>:
    5d14:	a0 e0       	ldi	r26, 0x00	; 0
    5d16:	b0 e0       	ldi	r27, 0x00	; 0
    5d18:	e0 e9       	ldi	r30, 0x90	; 144
    5d1a:	fe e2       	ldi	r31, 0x2E	; 46
    5d1c:	0c 94 02 30 	jmp	0x6004	; 0x6004 <__prologue_saves__+0xc>
    5d20:	ec 01       	movw	r28, r24
    5d22:	6b 01       	movw	r12, r22
    5d24:	61 15       	cp	r22, r1
    5d26:	71 05       	cpc	r23, r1
    5d28:	19 f0       	breq	.+6      	; 0x5d30 <strtod+0x1c>
    5d2a:	fb 01       	movw	r30, r22
    5d2c:	91 83       	std	Z+1, r25	; 0x01
    5d2e:	80 83       	st	Z, r24
    5d30:	7e 01       	movw	r14, r28
    5d32:	ff ef       	ldi	r31, 0xFF	; 255
    5d34:	ef 1a       	sub	r14, r31
    5d36:	ff 0a       	sbc	r15, r31
    5d38:	08 81       	ld	r16, Y
    5d3a:	80 2f       	mov	r24, r16
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <isspace>
    5d42:	89 2b       	or	r24, r25
    5d44:	11 f0       	breq	.+4      	; 0x5d4a <strtod+0x36>
    5d46:	e7 01       	movw	r28, r14
    5d48:	f3 cf       	rjmp	.-26     	; 0x5d30 <strtod+0x1c>
    5d4a:	0d 32       	cpi	r16, 0x2D	; 45
    5d4c:	39 f4       	brne	.+14     	; 0x5d5c <strtod+0x48>
    5d4e:	7e 01       	movw	r14, r28
    5d50:	82 e0       	ldi	r24, 0x02	; 2
    5d52:	e8 0e       	add	r14, r24
    5d54:	f1 1c       	adc	r15, r1
    5d56:	09 81       	ldd	r16, Y+1	; 0x01
    5d58:	11 e0       	ldi	r17, 0x01	; 1
    5d5a:	08 c0       	rjmp	.+16     	; 0x5d6c <strtod+0x58>
    5d5c:	0b 32       	cpi	r16, 0x2B	; 43
    5d5e:	29 f4       	brne	.+10     	; 0x5d6a <strtod+0x56>
    5d60:	7e 01       	movw	r14, r28
    5d62:	92 e0       	ldi	r25, 0x02	; 2
    5d64:	e9 0e       	add	r14, r25
    5d66:	f1 1c       	adc	r15, r1
    5d68:	09 81       	ldd	r16, Y+1	; 0x01
    5d6a:	10 e0       	ldi	r17, 0x00	; 0
    5d6c:	e7 01       	movw	r28, r14
    5d6e:	21 97       	sbiw	r28, 0x01	; 1
    5d70:	43 e0       	ldi	r20, 0x03	; 3
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	62 e6       	ldi	r22, 0x62	; 98
    5d76:	72 e0       	ldi	r23, 0x02	; 2
    5d78:	ce 01       	movw	r24, r28
    5d7a:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <strncasecmp_P>
    5d7e:	89 2b       	or	r24, r25
    5d80:	c1 f4       	brne	.+48     	; 0x5db2 <strtod+0x9e>
    5d82:	23 96       	adiw	r28, 0x03	; 3
    5d84:	45 e0       	ldi	r20, 0x05	; 5
    5d86:	50 e0       	ldi	r21, 0x00	; 0
    5d88:	6d e5       	ldi	r22, 0x5D	; 93
    5d8a:	72 e0       	ldi	r23, 0x02	; 2
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <strncasecmp_P>
    5d92:	89 2b       	or	r24, r25
    5d94:	09 f4       	brne	.+2      	; 0x5d98 <strtod+0x84>
    5d96:	25 96       	adiw	r28, 0x05	; 5
    5d98:	c1 14       	cp	r12, r1
    5d9a:	d1 04       	cpc	r13, r1
    5d9c:	19 f0       	breq	.+6      	; 0x5da4 <strtod+0x90>
    5d9e:	f6 01       	movw	r30, r12
    5da0:	d1 83       	std	Z+1, r29	; 0x01
    5da2:	c0 83       	st	Z, r28
    5da4:	11 11       	cpse	r17, r1
    5da6:	f6 c0       	rjmp	.+492    	; 0x5f94 <strtod+0x280>
    5da8:	60 e0       	ldi	r22, 0x00	; 0
    5daa:	70 e0       	ldi	r23, 0x00	; 0
    5dac:	80 e8       	ldi	r24, 0x80	; 128
    5dae:	9f e7       	ldi	r25, 0x7F	; 127
    5db0:	fa c0       	rjmp	.+500    	; 0x5fa6 <strtod+0x292>
    5db2:	43 e0       	ldi	r20, 0x03	; 3
    5db4:	50 e0       	ldi	r21, 0x00	; 0
    5db6:	6a e5       	ldi	r22, 0x5A	; 90
    5db8:	72 e0       	ldi	r23, 0x02	; 2
    5dba:	ce 01       	movw	r24, r28
    5dbc:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <strncasecmp_P>
    5dc0:	89 2b       	or	r24, r25
    5dc2:	59 f4       	brne	.+22     	; 0x5dda <strtod+0xc6>
    5dc4:	c1 14       	cp	r12, r1
    5dc6:	d1 04       	cpc	r13, r1
    5dc8:	09 f4       	brne	.+2      	; 0x5dcc <strtod+0xb8>
    5dca:	e9 c0       	rjmp	.+466    	; 0x5f9e <strtod+0x28a>
    5dcc:	f2 e0       	ldi	r31, 0x02	; 2
    5dce:	ef 0e       	add	r14, r31
    5dd0:	f1 1c       	adc	r15, r1
    5dd2:	f6 01       	movw	r30, r12
    5dd4:	f1 82       	std	Z+1, r15	; 0x01
    5dd6:	e0 82       	st	Z, r14
    5dd8:	e2 c0       	rjmp	.+452    	; 0x5f9e <strtod+0x28a>
    5dda:	20 e0       	ldi	r18, 0x00	; 0
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	a9 01       	movw	r20, r18
    5de0:	c0 e0       	ldi	r28, 0x00	; 0
    5de2:	d0 e0       	ldi	r29, 0x00	; 0
    5de4:	f7 01       	movw	r30, r14
    5de6:	80 ed       	ldi	r24, 0xD0	; 208
    5de8:	a8 2e       	mov	r10, r24
    5dea:	a0 0e       	add	r10, r16
    5dec:	89 e0       	ldi	r24, 0x09	; 9
    5dee:	8a 15       	cp	r24, r10
    5df0:	30 f1       	brcs	.+76     	; 0x5e3e <strtod+0x12a>
    5df2:	91 2f       	mov	r25, r17
    5df4:	92 60       	ori	r25, 0x02	; 2
    5df6:	b9 2e       	mov	r11, r25
    5df8:	81 2f       	mov	r24, r17
    5dfa:	88 70       	andi	r24, 0x08	; 8
    5dfc:	12 ff       	sbrs	r17, 2
    5dfe:	04 c0       	rjmp	.+8      	; 0x5e08 <strtod+0xf4>
    5e00:	81 11       	cpse	r24, r1
    5e02:	24 c0       	rjmp	.+72     	; 0x5e4c <strtod+0x138>
    5e04:	21 96       	adiw	r28, 0x01	; 1
    5e06:	22 c0       	rjmp	.+68     	; 0x5e4c <strtod+0x138>
    5e08:	81 11       	cpse	r24, r1
    5e0a:	21 97       	sbiw	r28, 0x01	; 1
    5e0c:	a5 e0       	ldi	r26, 0x05	; 5
    5e0e:	b0 e0       	ldi	r27, 0x00	; 0
    5e10:	0e 94 49 2c 	call	0x5892	; 0x5892 <__muluhisi3>
    5e14:	dc 01       	movw	r26, r24
    5e16:	cb 01       	movw	r24, r22
    5e18:	88 0f       	add	r24, r24
    5e1a:	99 1f       	adc	r25, r25
    5e1c:	aa 1f       	adc	r26, r26
    5e1e:	bb 1f       	adc	r27, r27
    5e20:	9c 01       	movw	r18, r24
    5e22:	ad 01       	movw	r20, r26
    5e24:	2a 0d       	add	r18, r10
    5e26:	31 1d       	adc	r19, r1
    5e28:	41 1d       	adc	r20, r1
    5e2a:	51 1d       	adc	r21, r1
    5e2c:	28 39       	cpi	r18, 0x98	; 152
    5e2e:	89 e9       	ldi	r24, 0x99	; 153
    5e30:	38 07       	cpc	r19, r24
    5e32:	48 07       	cpc	r20, r24
    5e34:	89 e1       	ldi	r24, 0x19	; 25
    5e36:	58 07       	cpc	r21, r24
    5e38:	48 f0       	brcs	.+18     	; 0x5e4c <strtod+0x138>
    5e3a:	16 60       	ori	r17, 0x06	; 6
    5e3c:	06 c0       	rjmp	.+12     	; 0x5e4a <strtod+0x136>
    5e3e:	9e ef       	ldi	r25, 0xFE	; 254
    5e40:	a9 12       	cpse	r10, r25
    5e42:	0a c0       	rjmp	.+20     	; 0x5e58 <strtod+0x144>
    5e44:	13 fd       	sbrc	r17, 3
    5e46:	40 c0       	rjmp	.+128    	; 0x5ec8 <strtod+0x1b4>
    5e48:	18 60       	ori	r17, 0x08	; 8
    5e4a:	b1 2e       	mov	r11, r17
    5e4c:	8f ef       	ldi	r24, 0xFF	; 255
    5e4e:	e8 1a       	sub	r14, r24
    5e50:	f8 0a       	sbc	r15, r24
    5e52:	00 81       	ld	r16, Z
    5e54:	1b 2d       	mov	r17, r11
    5e56:	c6 cf       	rjmp	.-116    	; 0x5de4 <strtod+0xd0>
    5e58:	80 2f       	mov	r24, r16
    5e5a:	8f 7d       	andi	r24, 0xDF	; 223
    5e5c:	85 34       	cpi	r24, 0x45	; 69
    5e5e:	a1 f5       	brne	.+104    	; 0x5ec8 <strtod+0x1b4>
    5e60:	80 81       	ld	r24, Z
    5e62:	8d 32       	cpi	r24, 0x2D	; 45
    5e64:	11 f4       	brne	.+4      	; 0x5e6a <strtod+0x156>
    5e66:	10 61       	ori	r17, 0x10	; 16
    5e68:	06 c0       	rjmp	.+12     	; 0x5e76 <strtod+0x162>
    5e6a:	8b 32       	cpi	r24, 0x2B	; 43
    5e6c:	21 f0       	breq	.+8      	; 0x5e76 <strtod+0x162>
    5e6e:	31 96       	adiw	r30, 0x01	; 1
    5e70:	61 e0       	ldi	r22, 0x01	; 1
    5e72:	70 e0       	ldi	r23, 0x00	; 0
    5e74:	04 c0       	rjmp	.+8      	; 0x5e7e <strtod+0x16a>
    5e76:	81 81       	ldd	r24, Z+1	; 0x01
    5e78:	32 96       	adiw	r30, 0x02	; 2
    5e7a:	62 e0       	ldi	r22, 0x02	; 2
    5e7c:	70 e0       	ldi	r23, 0x00	; 0
    5e7e:	80 53       	subi	r24, 0x30	; 48
    5e80:	8a 30       	cpi	r24, 0x0A	; 10
    5e82:	18 f0       	brcs	.+6      	; 0x5e8a <strtod+0x176>
    5e84:	e6 1b       	sub	r30, r22
    5e86:	f7 0b       	sbc	r31, r23
    5e88:	1f c0       	rjmp	.+62     	; 0x5ec8 <strtod+0x1b4>
    5e8a:	60 e0       	ldi	r22, 0x00	; 0
    5e8c:	70 e0       	ldi	r23, 0x00	; 0
    5e8e:	60 38       	cpi	r22, 0x80	; 128
    5e90:	9c e0       	ldi	r25, 0x0C	; 12
    5e92:	79 07       	cpc	r23, r25
    5e94:	5c f4       	brge	.+22     	; 0x5eac <strtod+0x198>
    5e96:	db 01       	movw	r26, r22
    5e98:	aa 0f       	add	r26, r26
    5e9a:	bb 1f       	adc	r27, r27
    5e9c:	aa 0f       	add	r26, r26
    5e9e:	bb 1f       	adc	r27, r27
    5ea0:	6a 0f       	add	r22, r26
    5ea2:	7b 1f       	adc	r23, r27
    5ea4:	66 0f       	add	r22, r22
    5ea6:	77 1f       	adc	r23, r23
    5ea8:	68 0f       	add	r22, r24
    5eaa:	71 1d       	adc	r23, r1
    5eac:	31 96       	adiw	r30, 0x01	; 1
    5eae:	df 01       	movw	r26, r30
    5eb0:	11 97       	sbiw	r26, 0x01	; 1
    5eb2:	8c 91       	ld	r24, X
    5eb4:	80 53       	subi	r24, 0x30	; 48
    5eb6:	8a 30       	cpi	r24, 0x0A	; 10
    5eb8:	50 f3       	brcs	.-44     	; 0x5e8e <strtod+0x17a>
    5eba:	14 ff       	sbrs	r17, 4
    5ebc:	03 c0       	rjmp	.+6      	; 0x5ec4 <strtod+0x1b0>
    5ebe:	71 95       	neg	r23
    5ec0:	61 95       	neg	r22
    5ec2:	71 09       	sbc	r23, r1
    5ec4:	c6 0f       	add	r28, r22
    5ec6:	d7 1f       	adc	r29, r23
    5ec8:	11 ff       	sbrs	r17, 1
    5eca:	08 c0       	rjmp	.+16     	; 0x5edc <strtod+0x1c8>
    5ecc:	c1 14       	cp	r12, r1
    5ece:	d1 04       	cpc	r13, r1
    5ed0:	29 f0       	breq	.+10     	; 0x5edc <strtod+0x1c8>
    5ed2:	cf 01       	movw	r24, r30
    5ed4:	01 97       	sbiw	r24, 0x01	; 1
    5ed6:	f6 01       	movw	r30, r12
    5ed8:	91 83       	std	Z+1, r25	; 0x01
    5eda:	80 83       	st	Z, r24
    5edc:	ca 01       	movw	r24, r20
    5ede:	b9 01       	movw	r22, r18
    5ee0:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <__floatunsisf>
    5ee4:	21 2f       	mov	r18, r17
    5ee6:	23 70       	andi	r18, 0x03	; 3
    5ee8:	23 30       	cpi	r18, 0x03	; 3
    5eea:	19 f0       	breq	.+6      	; 0x5ef2 <strtod+0x1de>
    5eec:	4b 01       	movw	r8, r22
    5eee:	5c 01       	movw	r10, r24
    5ef0:	06 c0       	rjmp	.+12     	; 0x5efe <strtod+0x1ea>
    5ef2:	4b 01       	movw	r8, r22
    5ef4:	5c 01       	movw	r10, r24
    5ef6:	b7 fa       	bst	r11, 7
    5ef8:	b0 94       	com	r11
    5efa:	b7 f8       	bld	r11, 7
    5efc:	b0 94       	com	r11
    5efe:	20 e0       	ldi	r18, 0x00	; 0
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	a9 01       	movw	r20, r18
    5f04:	c5 01       	movw	r24, r10
    5f06:	b4 01       	movw	r22, r8
    5f08:	0e 94 c5 2b 	call	0x578a	; 0x578a <__cmpsf2>
    5f0c:	88 23       	and	r24, r24
    5f0e:	09 f4       	brne	.+2      	; 0x5f12 <strtod+0x1fe>
    5f10:	3e c0       	rjmp	.+124    	; 0x5f8e <strtod+0x27a>
    5f12:	d7 ff       	sbrs	r29, 7
    5f14:	06 c0       	rjmp	.+12     	; 0x5f22 <strtod+0x20e>
    5f16:	d1 95       	neg	r29
    5f18:	c1 95       	neg	r28
    5f1a:	d1 09       	sbc	r29, r1
    5f1c:	09 e7       	ldi	r16, 0x79	; 121
    5f1e:	12 e0       	ldi	r17, 0x02	; 2
    5f20:	02 c0       	rjmp	.+4      	; 0x5f26 <strtod+0x212>
    5f22:	01 e9       	ldi	r16, 0x91	; 145
    5f24:	12 e0       	ldi	r17, 0x02	; 2
    5f26:	68 01       	movw	r12, r16
    5f28:	f8 e1       	ldi	r31, 0x18	; 24
    5f2a:	cf 1a       	sub	r12, r31
    5f2c:	d1 08       	sbc	r13, r1
    5f2e:	90 e2       	ldi	r25, 0x20	; 32
    5f30:	e9 2e       	mov	r14, r25
    5f32:	f1 2c       	mov	r15, r1
    5f34:	ce 15       	cp	r28, r14
    5f36:	df 05       	cpc	r29, r15
    5f38:	74 f0       	brlt	.+28     	; 0x5f56 <strtod+0x242>
    5f3a:	f8 01       	movw	r30, r16
    5f3c:	25 91       	lpm	r18, Z+
    5f3e:	35 91       	lpm	r19, Z+
    5f40:	45 91       	lpm	r20, Z+
    5f42:	54 91       	lpm	r21, Z
    5f44:	c5 01       	movw	r24, r10
    5f46:	b4 01       	movw	r22, r8
    5f48:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__mulsf3>
    5f4c:	4b 01       	movw	r8, r22
    5f4e:	5c 01       	movw	r10, r24
    5f50:	ce 19       	sub	r28, r14
    5f52:	df 09       	sbc	r29, r15
    5f54:	ef cf       	rjmp	.-34     	; 0x5f34 <strtod+0x220>
    5f56:	04 50       	subi	r16, 0x04	; 4
    5f58:	11 09       	sbc	r17, r1
    5f5a:	f5 94       	asr	r15
    5f5c:	e7 94       	ror	r14
    5f5e:	0c 15       	cp	r16, r12
    5f60:	1d 05       	cpc	r17, r13
    5f62:	41 f7       	brne	.-48     	; 0x5f34 <strtod+0x220>
    5f64:	8a 2d       	mov	r24, r10
    5f66:	88 0f       	add	r24, r24
    5f68:	8b 2d       	mov	r24, r11
    5f6a:	88 1f       	adc	r24, r24
    5f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f6e:	49 f0       	breq	.+18     	; 0x5f82 <strtod+0x26e>
    5f70:	20 e0       	ldi	r18, 0x00	; 0
    5f72:	30 e0       	ldi	r19, 0x00	; 0
    5f74:	a9 01       	movw	r20, r18
    5f76:	c5 01       	movw	r24, r10
    5f78:	b4 01       	movw	r22, r8
    5f7a:	0e 94 c5 2b 	call	0x578a	; 0x578a <__cmpsf2>
    5f7e:	81 11       	cpse	r24, r1
    5f80:	06 c0       	rjmp	.+12     	; 0x5f8e <strtod+0x27a>
    5f82:	82 e2       	ldi	r24, 0x22	; 34
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	90 93 87 08 	sts	0x0887, r25	; 0x800887 <errno+0x1>
    5f8a:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <errno>
    5f8e:	c5 01       	movw	r24, r10
    5f90:	b4 01       	movw	r22, r8
    5f92:	09 c0       	rjmp	.+18     	; 0x5fa6 <strtod+0x292>
    5f94:	60 e0       	ldi	r22, 0x00	; 0
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	80 e8       	ldi	r24, 0x80	; 128
    5f9a:	9f ef       	ldi	r25, 0xFF	; 255
    5f9c:	04 c0       	rjmp	.+8      	; 0x5fa6 <strtod+0x292>
    5f9e:	60 e0       	ldi	r22, 0x00	; 0
    5fa0:	70 e0       	ldi	r23, 0x00	; 0
    5fa2:	80 ec       	ldi	r24, 0xC0	; 192
    5fa4:	9f e7       	ldi	r25, 0x7F	; 127
    5fa6:	cd b7       	in	r28, 0x3d	; 61
    5fa8:	de b7       	in	r29, 0x3e	; 62
    5faa:	ec e0       	ldi	r30, 0x0C	; 12
    5fac:	0c 94 1e 30 	jmp	0x603c	; 0x603c <__epilogue_restores__+0xc>

00005fb0 <isspace>:
    5fb0:	91 11       	cpse	r25, r1
    5fb2:	0c 94 f9 2f 	jmp	0x5ff2	; 0x5ff2 <__ctype_isfalse>
    5fb6:	80 32       	cpi	r24, 0x20	; 32
    5fb8:	19 f0       	breq	.+6      	; 0x5fc0 <isspace+0x10>
    5fba:	89 50       	subi	r24, 0x09	; 9
    5fbc:	85 50       	subi	r24, 0x05	; 5
    5fbe:	c8 f7       	brcc	.-14     	; 0x5fb2 <isspace+0x2>
    5fc0:	08 95       	ret

00005fc2 <strncasecmp_P>:
    5fc2:	fb 01       	movw	r30, r22
    5fc4:	dc 01       	movw	r26, r24
    5fc6:	41 50       	subi	r20, 0x01	; 1
    5fc8:	50 40       	sbci	r21, 0x00	; 0
    5fca:	88 f0       	brcs	.+34     	; 0x5fee <strncasecmp_P+0x2c>
    5fcc:	8d 91       	ld	r24, X+
    5fce:	81 34       	cpi	r24, 0x41	; 65
    5fd0:	1c f0       	brlt	.+6      	; 0x5fd8 <strncasecmp_P+0x16>
    5fd2:	8b 35       	cpi	r24, 0x5B	; 91
    5fd4:	0c f4       	brge	.+2      	; 0x5fd8 <strncasecmp_P+0x16>
    5fd6:	80 5e       	subi	r24, 0xE0	; 224
    5fd8:	65 91       	lpm	r22, Z+
    5fda:	61 34       	cpi	r22, 0x41	; 65
    5fdc:	1c f0       	brlt	.+6      	; 0x5fe4 <strncasecmp_P+0x22>
    5fde:	6b 35       	cpi	r22, 0x5B	; 91
    5fe0:	0c f4       	brge	.+2      	; 0x5fe4 <strncasecmp_P+0x22>
    5fe2:	60 5e       	subi	r22, 0xE0	; 224
    5fe4:	86 1b       	sub	r24, r22
    5fe6:	61 11       	cpse	r22, r1
    5fe8:	71 f3       	breq	.-36     	; 0x5fc6 <strncasecmp_P+0x4>
    5fea:	99 0b       	sbc	r25, r25
    5fec:	08 95       	ret
    5fee:	88 1b       	sub	r24, r24
    5ff0:	fc cf       	rjmp	.-8      	; 0x5fea <strncasecmp_P+0x28>

00005ff2 <__ctype_isfalse>:
    5ff2:	99 27       	eor	r25, r25
    5ff4:	88 27       	eor	r24, r24

00005ff6 <__ctype_istrue>:
    5ff6:	08 95       	ret

00005ff8 <__prologue_saves__>:
    5ff8:	2f 92       	push	r2
    5ffa:	3f 92       	push	r3
    5ffc:	4f 92       	push	r4
    5ffe:	5f 92       	push	r5
    6000:	6f 92       	push	r6
    6002:	7f 92       	push	r7
    6004:	8f 92       	push	r8
    6006:	9f 92       	push	r9
    6008:	af 92       	push	r10
    600a:	bf 92       	push	r11
    600c:	cf 92       	push	r12
    600e:	df 92       	push	r13
    6010:	ef 92       	push	r14
    6012:	ff 92       	push	r15
    6014:	0f 93       	push	r16
    6016:	1f 93       	push	r17
    6018:	cf 93       	push	r28
    601a:	df 93       	push	r29
    601c:	cd b7       	in	r28, 0x3d	; 61
    601e:	de b7       	in	r29, 0x3e	; 62
    6020:	ca 1b       	sub	r28, r26
    6022:	db 0b       	sbc	r29, r27
    6024:	0f b6       	in	r0, 0x3f	; 63
    6026:	f8 94       	cli
    6028:	de bf       	out	0x3e, r29	; 62
    602a:	0f be       	out	0x3f, r0	; 63
    602c:	cd bf       	out	0x3d, r28	; 61
    602e:	09 94       	ijmp

00006030 <__epilogue_restores__>:
    6030:	2a 88       	ldd	r2, Y+18	; 0x12
    6032:	39 88       	ldd	r3, Y+17	; 0x11
    6034:	48 88       	ldd	r4, Y+16	; 0x10
    6036:	5f 84       	ldd	r5, Y+15	; 0x0f
    6038:	6e 84       	ldd	r6, Y+14	; 0x0e
    603a:	7d 84       	ldd	r7, Y+13	; 0x0d
    603c:	8c 84       	ldd	r8, Y+12	; 0x0c
    603e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6040:	aa 84       	ldd	r10, Y+10	; 0x0a
    6042:	b9 84       	ldd	r11, Y+9	; 0x09
    6044:	c8 84       	ldd	r12, Y+8	; 0x08
    6046:	df 80       	ldd	r13, Y+7	; 0x07
    6048:	ee 80       	ldd	r14, Y+6	; 0x06
    604a:	fd 80       	ldd	r15, Y+5	; 0x05
    604c:	0c 81       	ldd	r16, Y+4	; 0x04
    604e:	1b 81       	ldd	r17, Y+3	; 0x03
    6050:	aa 81       	ldd	r26, Y+2	; 0x02
    6052:	b9 81       	ldd	r27, Y+1	; 0x01
    6054:	ce 0f       	add	r28, r30
    6056:	d1 1d       	adc	r29, r1
    6058:	0f b6       	in	r0, 0x3f	; 63
    605a:	f8 94       	cli
    605c:	de bf       	out	0x3e, r29	; 62
    605e:	0f be       	out	0x3f, r0	; 63
    6060:	cd bf       	out	0x3d, r28	; 61
    6062:	ed 01       	movw	r28, r26
    6064:	08 95       	ret

00006066 <__do_global_dtors>:
    6066:	13 e0       	ldi	r17, 0x03	; 3
    6068:	c9 e6       	ldi	r28, 0x69	; 105
    606a:	d3 e0       	ldi	r29, 0x03	; 3
    606c:	04 c0       	rjmp	.+8      	; 0x6076 <__do_global_dtors+0x10>
    606e:	fe 01       	movw	r30, r28
    6070:	0e 94 43 2c 	call	0x5886	; 0x5886 <__tablejump2__>
    6074:	21 96       	adiw	r28, 0x01	; 1
    6076:	ca 36       	cpi	r28, 0x6A	; 106
    6078:	d1 07       	cpc	r29, r17
    607a:	c9 f7       	brne	.-14     	; 0x606e <__do_global_dtors+0x8>
    607c:	f8 94       	cli

0000607e <__stop_program>:
    607e:	ff cf       	rjmp	.-2      	; 0x607e <__stop_program>
