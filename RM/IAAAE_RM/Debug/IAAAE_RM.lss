
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  000041b8  0000424c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002e1  00800294  00800294  000043e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c48  00000000  00000000  00004450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f8e0  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048d4  00000000  00000000  00024978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006eac  00000000  00000000  0002924c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002d64  00000000  00000000  000300f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000057a0  00000000  00000000  00032e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010640  00000000  00000000  000385fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  00048c3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__dtors_end>
       4:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
       8:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
       c:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__vector_3>
      10:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__vector_3>
      14:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__vector_3>
      18:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      1c:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      20:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      24:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      28:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      2c:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      30:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      34:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      38:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      3c:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      40:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <__vector_16>
      44:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      48:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__vector_18>
      4c:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__vector_19>
      50:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      54:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      58:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      5c:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>
      60:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_24>
      64:	0c 94 82 03 	jmp	0x704	; 0x704 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c>:
     21c:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000224 <_ZZN10GsmPayload11readPayloadEPhE3__c_1>:
     224:	44 61 74 61 20 41 72 72 20 53 7a 20 77 61 73 20     Data Arr Sz was 
	...

00000235 <_ZZN10GsmPayload11readPayloadEPhE3__c_0>:
     235:	42 6f 6f 74 20 23 20 77 61 73 20 00                 Boot # was .

00000241 <_ZZN10GsmPayload11readPayloadEPhE3__c>:
     241:	4d 6f 64 75 6c 65 20 49 44 20 77 61 73 20 00        Module ID was .

00000250 <_ZZN10GsmPayload13createPayloadEPhjE3__c_2>:
     250:	54 65 6d 70 65 72 61 74 75 72 65 20 57 41 53 20     Temperature WAS 
	...

00000261 <_ZZN10GsmPayload13createPayloadEPhjE3__c_1>:
     261:	50 56 20 57 41 53 20 00                             PV WAS .

00000269 <_ZZN10GsmPayload13createPayloadEPhjE3__c_0>:
     269:	43 75 72 72 65 6e 74 20 57 41 53 20 00              Current WAS .

00000276 <_ZZN10GsmPayload13createPayloadEPhjE3__c>:
     276:	42 61 74 74 20 57 41 53 20 00                       Batt WAS .

00000280 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     280:	45 72 72 6f 72 3d 00                                Error=.

00000287 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     287:	20 7c 20 00                                          | .

0000028b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     28b:	54 65 6d 70 3d 00                                   Temp=.

00000291 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     291:	20 7c 20 00                                          | .

00000295 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     295:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000029e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     29e:	20 7c 20 00                                          | .

000002a2 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     2a2:	50 56 2d 56 3d 00                                   PV-V=.

000002a8 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     2a8:	20 7c 20 00                                          | .

000002ac <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     2ac:	42 61 74 74 2d 56 3d 00                             Batt-V=.

000002b4 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     2b4:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

000002c1 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     2c1:	20 7c 20 00                                          | .

000002c5 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     2c5:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

000002ce <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     2ce:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

000002d8 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     2d8:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     2e8:	6f 64 65 3d 00                                      ode=.

000002ed <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     2ed:	20 7c 20 00                                          | .

000002f1 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     2f1:	42 45 52 3d 00                                      BER=.

000002f6 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     2f6:	20 7c 20 00                                          | .

000002fa <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     2fa:	52 53 53 49 3d 00                                   RSSI=.

00000300 <_ZL12b64_alphabet>:
     300:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     310:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     320:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     330:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000341 <_ZZ4loopE3__c>:
     341:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000034b <_ZZ8sendDatavE3__c_0>:
     34b:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     35b:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     36b:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

0000037a <_ZZ8sendDatavE3__c>:
     37a:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     38a:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

0000039b <_ZZ12takeReadingsvE3__c>:
     39b:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     3ab:	2e 2e 00                                            ...

000003ae <_ZZ21ensureFonaInitialisedbE3__c_2>:
     3ae:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     3be:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

000003c9 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     3c9:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     3d9:	73 2e 2e 2e 00                                      s....

000003de <_ZZ21ensureFonaInitialisedbE3__c_0>:
     3de:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     3ee:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000003f9 <_ZZ21ensureFonaInitialisedbE3__c>:
     3f9:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     409:	61 2e 2e 2e 00                                      a....

0000040e <_ZZ5setupE3__c>:
     40e:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

0000041a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_21>:
     41a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     42a:	2d 2d 2d 2d 2d 2d 2d 2d 00                          --------.

00000433 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_20>:
     433:	47 53 4d 20 50 61 79 6c 6f 61 64 20 54 6f 20 42     GSM Payload To B
     443:	65 20 53 65 6e 74 20 4f 76 65 72 20 57 65 62 3a     e Sent Over Web:
	...

00000454 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_19>:
     454:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     464:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

0000046f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_18>:
     46f:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     47f:	4c 20 40 35 20 2a 2a 2a 00                          L @5 ***.

00000488 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_17>:
     488:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     498:	4c 20 40 34 20 2a 2a 2a 00                          L @4 ***.

000004a1 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_16>:
     4a1:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     4b1:	4c 20 40 33 20 2a 2a 2a 00                          L @3 ***.

000004ba <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_15>:
     4ba:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     4ca:	4c 20 40 32 20 2a 2a 2a 00                          L @2 ***.

000004d3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_14>:
     4d3:	2a 2a 2a 20 45 4e 43 20 54 45 53 54 20 46 41 49     *** ENC TEST FAI
     4e3:	4c 20 40 31 20 2a 2a 2a 00                          L @1 ***.

000004ec <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_13>:
     4ec:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 45     *** TEST FAIL @E
     4fc:	4e 43 4f 44 49 4e 47 20 2a 2a 2a 00                 NCODING ***.

00000508 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_12>:
     508:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     518:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00                    ----------.

00000523 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_11>:
     523:	54 65 73 74 20 46 6f 72 20 50 72 69 6e 74 20 4f     Test For Print O
     533:	75 74 70 75 74 3a 00                                utput:.

0000053a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_10>:
     53a:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     54a:	30 20 2a 2a 2a 00                                   0 ***.

00000550 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_9>:
     550:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 39     *** TEST FAIL @9
     560:	20 2a 2a 2a 00                                       ***.

00000565 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_8>:
     565:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 38     *** TEST FAIL @8
     575:	20 2a 2a 2a 00                                       ***.

0000057a <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_7>:
     57a:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 37     *** TEST FAIL @7
     58a:	20 2a 2a 2a 00                                       ***.

0000058f <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_6>:
     58f:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 36     *** TEST FAIL @6
     59f:	20 2a 2a 2a 00                                       ***.

000005a4 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_5>:
     5a4:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 35     *** TEST FAIL @5
     5b4:	20 2a 2a 2a 00                                       ***.

000005b9 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_4>:
     5b9:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 34     *** TEST FAIL @4
     5c9:	20 2a 2a 2a 00                                       ***.

000005ce <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_3>:
     5ce:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 33     *** TEST FAIL @3
     5de:	20 2a 2a 2a 00                                       ***.

000005e3 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_2>:
     5e3:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 32     *** TEST FAIL @2
     5f3:	20 2a 2a 2a 00                                       ***.

000005f8 <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_1>:
     5f8:	2a 2a 2a 20 54 45 53 54 20 46 41 49 4c 20 40 31     *** TEST FAIL @1
     608:	20 2a 2a 2a 00                                       ***.

0000060d <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c_0>:
     60d:	43 61 73 74 20 62 61 63 6b 20 61 66 74 65 72 20     Cast back after 
     61d:	69 6e 74 20 73 74 6f 72 61 67 65 20 76 61 6c 3a     int storage val:
	...

0000062e <_ZZN13ExtendedTests20runExtendedTypesTestEvE3__c>:
     62e:	4e 65 74 73 74 61 74 20 35 20 2b 20 52 65 73 75     Netstat 5 + Resu
     63e:	6c 74 43 6f 64 65 20 31 20 2b 20 45 72 72 6f 72     ltCode 1 + Error
     64e:	20 31 3d 00                                          1=.

00000652 <digital_pin_to_timer_PGM>:
     652:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     662:	00 00 00 00                                         ....

00000666 <digital_pin_to_bit_mask_PGM>:
     666:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     676:	04 08 10 20                                         ... 

0000067a <digital_pin_to_port_PGM>:
     67a:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     68a:	03 03 03 03                                         ....

0000068e <port_to_input_PGM>:
     68e:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000698 <port_to_output_PGM>:
     698:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006a2 <port_to_mode_PGM>:
     6a2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000006ac <__ctors_start>:
     6ac:	6b 0e       	add	r6, r27
     6ae:	f9 12       	cpse	r15, r25
     6b0:	19 17       	cp	r17, r25

000006b2 <__ctors_end>:
     6b2:	7b 0e       	add	r7, r27

000006b4 <__dtors_end>:
     6b4:	11 24       	eor	r1, r1
     6b6:	1f be       	out	0x3f, r1	; 63
     6b8:	cf ef       	ldi	r28, 0xFF	; 255
     6ba:	d8 e0       	ldi	r29, 0x08	; 8
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	cd bf       	out	0x3d, r28	; 61

000006c0 <__do_copy_data>:
     6c0:	12 e0       	ldi	r17, 0x02	; 2
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b1 e0       	ldi	r27, 0x01	; 1
     6c6:	e8 eb       	ldi	r30, 0xB8	; 184
     6c8:	f1 e4       	ldi	r31, 0x41	; 65
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__do_copy_data+0x10>
     6cc:	05 90       	lpm	r0, Z+
     6ce:	0d 92       	st	X+, r0
     6d0:	a4 39       	cpi	r26, 0x94	; 148
     6d2:	b1 07       	cpc	r27, r17
     6d4:	d9 f7       	brne	.-10     	; 0x6cc <__do_copy_data+0xc>

000006d6 <__do_clear_bss>:
     6d6:	25 e0       	ldi	r18, 0x05	; 5
     6d8:	a4 e9       	ldi	r26, 0x94	; 148
     6da:	b2 e0       	ldi	r27, 0x02	; 2
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <.do_clear_bss_start>

000006de <.do_clear_bss_loop>:
     6de:	1d 92       	st	X+, r1

000006e0 <.do_clear_bss_start>:
     6e0:	a5 37       	cpi	r26, 0x75	; 117
     6e2:	b2 07       	cpc	r27, r18
     6e4:	e1 f7       	brne	.-8      	; 0x6de <.do_clear_bss_loop>

000006e6 <__do_global_ctors>:
     6e6:	13 e0       	ldi	r17, 0x03	; 3
     6e8:	c9 e5       	ldi	r28, 0x59	; 89
     6ea:	d3 e0       	ldi	r29, 0x03	; 3
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__do_global_ctors+0x10>
     6ee:	21 97       	sbiw	r28, 0x01	; 1
     6f0:	fe 01       	movw	r30, r28
     6f2:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__tablejump2__>
     6f6:	c6 35       	cpi	r28, 0x56	; 86
     6f8:	d1 07       	cpc	r29, r17
     6fa:	c9 f7       	brne	.-14     	; 0x6ee <__do_global_ctors+0x8>
     6fc:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <main>
     700:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__do_global_dtors>

00000704 <__bad_interrupt>:
     704:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000708 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     708:	83 5e       	subi	r24, 0xE3	; 227
     70a:	9e 4f       	sbci	r25, 0xFE	; 254
     70c:	dc 01       	movw	r26, r24
     70e:	8d 91       	ld	r24, X+
     710:	9c 91       	ld	r25, X
     712:	dc 01       	movw	r26, r24
     714:	ed 91       	ld	r30, X+
     716:	fc 91       	ld	r31, X
     718:	04 80       	ldd	r0, Z+4	; 0x04
     71a:	f5 81       	ldd	r31, Z+5	; 0x05
     71c:	e0 2d       	mov	r30, r0
     71e:	09 94       	ijmp

00000720 <_ZN13Adafruit_FONA5writeEh>:
     720:	83 5e       	subi	r24, 0xE3	; 227
     722:	9e 4f       	sbci	r25, 0xFE	; 254
     724:	dc 01       	movw	r26, r24
     726:	8d 91       	ld	r24, X+
     728:	9c 91       	ld	r25, X
     72a:	dc 01       	movw	r26, r24
     72c:	ed 91       	ld	r30, X+
     72e:	fc 91       	ld	r31, X
     730:	01 90       	ld	r0, Z+
     732:	f0 81       	ld	r31, Z
     734:	e0 2d       	mov	r30, r0
     736:	09 94       	ijmp

00000738 <_ZN13Adafruit_FONA4readEv>:
     738:	83 5e       	subi	r24, 0xE3	; 227
     73a:	9e 4f       	sbci	r25, 0xFE	; 254
     73c:	dc 01       	movw	r26, r24
     73e:	8d 91       	ld	r24, X+
     740:	9c 91       	ld	r25, X
     742:	dc 01       	movw	r26, r24
     744:	ed 91       	ld	r30, X+
     746:	fc 91       	ld	r31, X
     748:	06 80       	ldd	r0, Z+6	; 0x06
     74a:	f7 81       	ldd	r31, Z+7	; 0x07
     74c:	e0 2d       	mov	r30, r0
     74e:	09 94       	ijmp

00000750 <_ZN13Adafruit_FONA4peekEv>:
     750:	83 5e       	subi	r24, 0xE3	; 227
     752:	9e 4f       	sbci	r25, 0xFE	; 254
     754:	dc 01       	movw	r26, r24
     756:	8d 91       	ld	r24, X+
     758:	9c 91       	ld	r25, X
     75a:	dc 01       	movw	r26, r24
     75c:	ed 91       	ld	r30, X+
     75e:	fc 91       	ld	r31, X
     760:	00 84       	ldd	r0, Z+8	; 0x08
     762:	f1 85       	ldd	r31, Z+9	; 0x09
     764:	e0 2d       	mov	r30, r0
     766:	09 94       	ijmp

00000768 <_ZN13Adafruit_FONA5flushEv>:
     768:	83 5e       	subi	r24, 0xE3	; 227
     76a:	9e 4f       	sbci	r25, 0xFE	; 254
     76c:	dc 01       	movw	r26, r24
     76e:	8d 91       	ld	r24, X+
     770:	9c 91       	ld	r25, X
     772:	dc 01       	movw	r26, r24
     774:	ed 91       	ld	r30, X+
     776:	fc 91       	ld	r31, X
     778:	02 84       	ldd	r0, Z+10	; 0x0a
     77a:	f3 85       	ldd	r31, Z+11	; 0x0b
     77c:	e0 2d       	mov	r30, r0
     77e:	09 94       	ijmp

00000780 <_ZN13Adafruit_FONAC1Eab>:
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	00 d0       	rcall	.+0      	; 0x792 <_ZN13Adafruit_FONAC1Eab+0x12>
     792:	00 d0       	rcall	.+0      	; 0x794 <_ZN13Adafruit_FONAC1Eab+0x14>
     794:	00 d0       	rcall	.+0      	; 0x796 <_ZN13Adafruit_FONAC1Eab+0x16>
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	8c 01       	movw	r16, r24
     79c:	c6 2e       	mov	r12, r22
     79e:	d4 2e       	mov	r13, r20
     7a0:	fc 01       	movw	r30, r24
     7a2:	13 82       	std	Z+3, r1	; 0x03
     7a4:	12 82       	std	Z+2, r1	; 0x02
     7a6:	88 ee       	ldi	r24, 0xE8	; 232
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	a0 e0       	ldi	r26, 0x00	; 0
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	84 83       	std	Z+4, r24	; 0x04
     7b0:	95 83       	std	Z+5, r25	; 0x05
     7b2:	a6 83       	std	Z+6, r26	; 0x06
     7b4:	b7 83       	std	Z+7, r27	; 0x07
     7b6:	8a e3       	ldi	r24, 0x3A	; 58
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	86 87       	std	Z+14, r24	; 0x0e
     7c2:	78 01       	movw	r14, r16
     7c4:	fb ee       	ldi	r31, 0xEB	; 235
     7c6:	ef 1a       	sub	r14, r31
     7c8:	fe ef       	ldi	r31, 0xFE	; 254
     7ca:	ff 0a       	sbc	r15, r31
     7cc:	66 e7       	ldi	r22, 0x76	; 118
     7ce:	72 e0       	ldi	r23, 0x02	; 2
     7d0:	c7 01       	movw	r24, r14
     7d2:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN6StringC1EPKc>
     7d6:	f8 01       	movw	r30, r16
     7d8:	c4 86       	std	Z+12, r12	; 0x0c
     7da:	d5 86       	std	Z+13, r13	; 0x0d
     7dc:	e2 5f       	subi	r30, 0xF2	; 242
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	8c e1       	ldi	r24, 0x1C	; 28
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	80 83       	st	Z, r24
     7e8:	32 96       	adiw	r30, 0x02	; 2
     7ea:	11 82       	std	Z+1, r1	; 0x01
     7ec:	10 82       	st	Z, r1
     7ee:	32 96       	adiw	r30, 0x02	; 2
     7f0:	11 82       	std	Z+1, r1	; 0x01
     7f2:	10 82       	st	Z, r1
     7f4:	3b 96       	adiw	r30, 0x0b	; 11
     7f6:	11 82       	std	Z+1, r1	; 0x01
     7f8:	10 82       	st	Z, r1
     7fa:	39 97       	sbiw	r30, 0x09	; 9
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 83       	st	Z, r24
     800:	67 e0       	ldi	r22, 0x07	; 7
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN6StringC1EPKc>
     80c:	be 01       	movw	r22, r28
     80e:	6f 5f       	subi	r22, 0xFF	; 255
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	c7 01       	movw	r24, r14
     814:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN6StringaSEOS_>
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN6StringD1Ev>
     820:	f8 01       	movw	r30, r16
     822:	e5 5e       	subi	r30, 0xE5	; 229
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	89 e1       	ldi	r24, 0x19	; 25
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	91 83       	std	Z+1, r25	; 0x01
     82c:	80 83       	st	Z, r24
     82e:	26 96       	adiw	r28, 0x06	; 6
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	08 95       	ret

0000084c <_ZN13Adafruit_FONA12setUserAgentE6String>:
     84c:	8b 5e       	subi	r24, 0xEB	; 235
     84e:	9e 4f       	sbci	r25, 0xFE	; 254
     850:	0c 94 36 1b 	jmp	0x366c	; 0x366c <_ZN6StringaSERKS_>

00000854 <_ZN13Adafruit_FONA10flushInputEv>:
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	8c 01       	movw	r16, r24
     864:	0f 5f       	subi	r16, 0xFF	; 255
     866:	1f 4f       	sbci	r17, 0xFF	; 255
     868:	88 97       	sbiw	r24, 0x28	; 40
     86a:	d8 f4       	brcc	.+54     	; 0x8a2 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     86c:	e8 81       	ld	r30, Y
     86e:	f9 81       	ldd	r31, Y+1	; 0x01
     870:	04 80       	ldd	r0, Z+4	; 0x04
     872:	f5 81       	ldd	r31, Z+5	; 0x05
     874:	e0 2d       	mov	r30, r0
     876:	ce 01       	movw	r24, r28
     878:	09 95       	icall
     87a:	89 2b       	or	r24, r25
     87c:	51 f0       	breq	.+20     	; 0x892 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     87e:	e8 81       	ld	r30, Y
     880:	f9 81       	ldd	r31, Y+1	; 0x01
     882:	06 80       	ldd	r0, Z+6	; 0x06
     884:	f7 81       	ldd	r31, Z+7	; 0x07
     886:	e0 2d       	mov	r30, r0
     888:	ce 01       	movw	r24, r28
     88a:	09 95       	icall
     88c:	00 e0       	ldi	r16, 0x00	; 0
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	ed cf       	rjmp	.-38     	; 0x86c <_ZN13Adafruit_FONA10flushInputEv+0x18>
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     89e:	c8 01       	movw	r24, r16
     8a0:	e0 cf       	rjmp	.-64     	; 0x862 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <_ZN13Adafruit_FONA8readlineEjb>:
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	7c 01       	movw	r14, r24
     8c0:	b4 2e       	mov	r11, r20
     8c2:	8b 01       	movw	r16, r22
     8c4:	00 0f       	add	r16, r16
     8c6:	11 1f       	adc	r17, r17
     8c8:	00 0f       	add	r16, r16
     8ca:	11 1f       	adc	r17, r17
     8cc:	c0 e0       	ldi	r28, 0x00	; 0
     8ce:	d0 e0       	ldi	r29, 0x00	; 0
     8d0:	67 01       	movw	r12, r14
     8d2:	83 ee       	ldi	r24, 0xE3	; 227
     8d4:	c8 1a       	sub	r12, r24
     8d6:	8e ef       	ldi	r24, 0xFE	; 254
     8d8:	d8 0a       	sbc	r13, r24
     8da:	01 15       	cp	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	c9 f1       	breq	.+114    	; 0x952 <__stack+0x53>
     8e0:	ce 3f       	cpi	r28, 0xFE	; 254
     8e2:	d1 05       	cpc	r29, r1
     8e4:	98 f0       	brcs	.+38     	; 0x90c <__stack+0xd>
     8e6:	64 e8       	ldi	r22, 0x84	; 132
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	87 e8       	ldi	r24, 0x87	; 135
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
     8f2:	2f c0       	rjmp	.+94     	; 0x952 <__stack+0x53>
     8f4:	f6 01       	movw	r30, r12
     8f6:	80 81       	ld	r24, Z
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	dc 01       	movw	r26, r24
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	06 80       	ldd	r0, Z+6	; 0x06
     902:	f7 81       	ldd	r31, Z+7	; 0x07
     904:	e0 2d       	mov	r30, r0
     906:	09 95       	icall
     908:	8d 30       	cpi	r24, 0x0D	; 13
     90a:	69 f4       	brne	.+26     	; 0x926 <__stack+0x27>
     90c:	d6 01       	movw	r26, r12
     90e:	8d 91       	ld	r24, X+
     910:	9c 91       	ld	r25, X
     912:	dc 01       	movw	r26, r24
     914:	ed 91       	ld	r30, X+
     916:	fc 91       	ld	r31, X
     918:	04 80       	ldd	r0, Z+4	; 0x04
     91a:	f5 81       	ldd	r31, Z+5	; 0x05
     91c:	e0 2d       	mov	r30, r0
     91e:	09 95       	icall
     920:	89 2b       	or	r24, r25
     922:	41 f7       	brne	.-48     	; 0x8f4 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     924:	0c c0       	rjmp	.+24     	; 0x93e <__stack+0x3f>
     926:	8a 30       	cpi	r24, 0x0A	; 10
     928:	21 f4       	brne	.+8      	; 0x932 <__stack+0x33>
     92a:	20 97       	sbiw	r28, 0x00	; 0
     92c:	79 f3       	breq	.-34     	; 0x90c <__stack+0xd>
     92e:	bb 20       	and	r11, r11
     930:	81 f0       	breq	.+32     	; 0x952 <__stack+0x53>
     932:	f7 01       	movw	r30, r14
     934:	ec 0f       	add	r30, r28
     936:	fd 1f       	adc	r31, r29
     938:	87 87       	std	Z+15, r24	; 0x0f
     93a:	21 96       	adiw	r28, 0x01	; 1
     93c:	e7 cf       	rjmp	.-50     	; 0x90c <__stack+0xd>
     93e:	01 50       	subi	r16, 0x01	; 1
     940:	11 09       	sbc	r17, r1
     942:	39 f0       	breq	.+14     	; 0x952 <__stack+0x53>
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     950:	c4 cf       	rjmp	.-120    	; 0x8da <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     952:	f7 01       	movw	r30, r14
     954:	ec 0f       	add	r30, r28
     956:	fd 1f       	adc	r31, r29
     958:	17 86       	std	Z+15, r1	; 0x0f
     95a:	8c 2f       	mov	r24, r28
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	df 90       	pop	r13
     96a:	cf 90       	pop	r12
     96c:	bf 90       	pop	r11
     96e:	08 95       	ret

00000970 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
     97a:	8b 01       	movw	r16, r22
     97c:	ba 01       	movw	r22, r20
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN13Adafruit_FONA8readlineEjb>
     984:	6a e8       	ldi	r22, 0x8A	; 138
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	87 e8       	ldi	r24, 0x87	; 135
     98a:	94 e0       	ldi	r25, 0x04	; 4
     98c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     990:	2f 96       	adiw	r28, 0x0f	; 15
     992:	be 01       	movw	r22, r28
     994:	87 e8       	ldi	r24, 0x87	; 135
     996:	94 e0       	ldi	r25, 0x04	; 4
     998:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     99c:	b8 01       	movw	r22, r16
     99e:	ce 01       	movw	r24, r28
     9a0:	0e 94 49 20 	call	0x4092	; 0x4092 <strcmp_P>
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	89 2b       	or	r24, r25
     9a8:	09 f0       	breq	.+2      	; 0x9ac <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	82 2f       	mov	r24, r18
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
     9c6:	8b 01       	movw	r16, r22
     9c8:	7a 01       	movw	r14, r20
     9ca:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN13Adafruit_FONA10flushInputEv>
     9ce:	6d e7       	ldi	r22, 0x7D	; 125
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	87 e8       	ldi	r24, 0x87	; 135
     9d4:	94 e0       	ldi	r25, 0x04	; 4
     9d6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     9da:	b8 01       	movw	r22, r16
     9dc:	87 e8       	ldi	r24, 0x87	; 135
     9de:	94 e0       	ldi	r25, 0x04	; 4
     9e0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
     9e4:	fe 01       	movw	r30, r28
     9e6:	e3 5e       	subi	r30, 0xE3	; 227
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	b8 01       	movw	r22, r16
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	b7 01       	movw	r22, r14
     9f8:	ce 01       	movw	r24, r28
     9fa:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN13Adafruit_FONA8readlineEjb>
     9fe:	18 2f       	mov	r17, r24
     a00:	66 e7       	ldi	r22, 0x76	; 118
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	87 e8       	ldi	r24, 0x87	; 135
     a06:	94 e0       	ldi	r25, 0x04	; 4
     a08:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     a0c:	be 01       	movw	r22, r28
     a0e:	61 5f       	subi	r22, 0xF1	; 241
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	87 e8       	ldi	r24, 0x87	; 135
     a14:	94 e0       	ldi	r25, 0x04	; 4
     a16:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     a1a:	81 2f       	mov	r24, r17
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	08 95       	ret

00000a2a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
     a40:	6b 01       	movw	r12, r22
     a42:	7a 01       	movw	r14, r20
     a44:	59 01       	movw	r10, r18
     a46:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN13Adafruit_FONA10flushInputEv>
     a4a:	6f e6       	ldi	r22, 0x6F	; 111
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	87 e8       	ldi	r24, 0x87	; 135
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     a56:	b6 01       	movw	r22, r12
     a58:	87 e8       	ldi	r24, 0x87	; 135
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     a60:	62 e2       	ldi	r22, 0x22	; 34
     a62:	87 e8       	ldi	r24, 0x87	; 135
     a64:	94 e0       	ldi	r25, 0x04	; 4
     a66:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN5Print5printEc>
     a6a:	b7 01       	movw	r22, r14
     a6c:	87 e8       	ldi	r24, 0x87	; 135
     a6e:	94 e0       	ldi	r25, 0x04	; 4
     a70:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     a74:	62 e2       	ldi	r22, 0x22	; 34
     a76:	87 e8       	ldi	r24, 0x87	; 135
     a78:	94 e0       	ldi	r25, 0x04	; 4
     a7a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <_ZN5Print7printlnEc>
     a7e:	8e 01       	movw	r16, r28
     a80:	03 5e       	subi	r16, 0xE3	; 227
     a82:	1e 4f       	sbci	r17, 0xFE	; 254
     a84:	b6 01       	movw	r22, r12
     a86:	f8 01       	movw	r30, r16
     a88:	80 81       	ld	r24, Z
     a8a:	91 81       	ldd	r25, Z+1	; 0x01
     a8c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     a90:	62 e2       	ldi	r22, 0x22	; 34
     a92:	f8 01       	movw	r30, r16
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN5Print5printEc>
     a9c:	b7 01       	movw	r22, r14
     a9e:	f8 01       	movw	r30, r16
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     aa8:	62 e2       	ldi	r22, 0x22	; 34
     aaa:	f8 01       	movw	r30, r16
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <_ZN5Print7printlnEc>
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	b5 01       	movw	r22, r10
     ab8:	ce 01       	movw	r24, r28
     aba:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN13Adafruit_FONA8readlineEjb>
     abe:	18 2f       	mov	r17, r24
     ac0:	68 e6       	ldi	r22, 0x68	; 104
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	87 e8       	ldi	r24, 0x87	; 135
     ac6:	94 e0       	ldi	r25, 0x04	; 4
     ac8:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     acc:	be 01       	movw	r22, r28
     ace:	61 5f       	subi	r22, 0xF1	; 241
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	87 e8       	ldi	r24, 0x87	; 135
     ad4:	94 e0       	ldi	r25, 0x04	; 4
     ad6:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     ada:	81 2f       	mov	r24, r17
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	08 95       	ret

00000af2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	8a 01       	movw	r16, r20
     afe:	a9 01       	movw	r20, r18
     b00:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     b04:	88 23       	and	r24, r24
     b06:	41 f0       	breq	.+16     	; 0xb18 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     b08:	b8 01       	movw	r22, r16
     b0a:	ce 01       	movw	r24, r28
     b0c:	0f 96       	adiw	r24, 0x0f	; 15
     b0e:	0e 94 49 20 	call	0x4092	; 0x4092 <strcmp_P>
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	89 2b       	or	r24, r25
     b16:	09 f0       	breq	.+2      	; 0xb1a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	82 2f       	mov	r24, r18
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <_ZN13Adafruit_FONA5beginEhh>:
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ec 01       	movw	r28, r24
     b38:	f6 2e       	mov	r15, r22
     b3a:	e4 2e       	mov	r14, r20
     b3c:	8f e1       	ldi	r24, 0x1F	; 31
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 56 17 	call	0x2eac	; 0x2eac <_Znwj>
     b44:	8c 01       	movw	r16, r24
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	4e 2d       	mov	r20, r14
     b4a:	6f 2d       	mov	r22, r15
     b4c:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <_ZN14SoftwareSerialC1Ehhb>
     b50:	7e 01       	movw	r14, r28
     b52:	83 ee       	ldi	r24, 0xE3	; 227
     b54:	e8 1a       	sub	r14, r24
     b56:	8e ef       	ldi	r24, 0xFE	; 254
     b58:	f8 0a       	sbc	r15, r24
     b5a:	d7 01       	movw	r26, r14
     b5c:	0d 93       	st	X+, r16
     b5e:	1c 93       	st	X, r17
     b60:	40 ec       	ldi	r20, 0xC0	; 192
     b62:	52 e1       	ldi	r21, 0x12	; 18
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	c8 01       	movw	r24, r16
     b6a:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <_ZN14SoftwareSerial5beginEl>
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	8c 85       	ldd	r24, Y+12	; 0x0c
     b72:	0e 94 12 1a 	call	0x3424	; 0x3424 <pinMode>
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8c 85       	ldd	r24, Y+12	; 0x0c
     b7a:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
     b7e:	6a e0       	ldi	r22, 0x0A	; 10
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b8e:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
     b92:	64 e6       	ldi	r22, 0x64	; 100
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba2:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
     ba6:	68 ef       	ldi	r22, 0xF8	; 248
     ba8:	71 e0       	ldi	r23, 0x01	; 1
     baa:	87 e8       	ldi	r24, 0x87	; 135
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
     bb2:	8e e0       	ldi	r24, 0x0E	; 14
     bb4:	c8 2e       	mov	r12, r24
     bb6:	d1 2c       	mov	r13, r1
     bb8:	8e 01       	movw	r16, r28
     bba:	05 5e       	subi	r16, 0xE5	; 229
     bbc:	1e 4f       	sbci	r17, 0xFE	; 254
     bbe:	f7 01       	movw	r30, r14
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	dc 01       	movw	r26, r24
     bc6:	ed 91       	ld	r30, X+
     bc8:	fc 91       	ld	r31, X
     bca:	04 80       	ldd	r0, Z+4	; 0x04
     bcc:	f5 81       	ldd	r31, Z+5	; 0x05
     bce:	e0 2d       	mov	r30, r0
     bd0:	09 95       	icall
     bd2:	89 2b       	or	r24, r25
     bd4:	59 f0       	breq	.+22     	; 0xbec <_ZN13Adafruit_FONA5beginEhh+0xc6>
     bd6:	f7 01       	movw	r30, r14
     bd8:	80 81       	ld	r24, Z
     bda:	91 81       	ldd	r25, Z+1	; 0x01
     bdc:	dc 01       	movw	r26, r24
     bde:	ed 91       	ld	r30, X+
     be0:	fc 91       	ld	r31, X
     be2:	06 80       	ldd	r0, Z+6	; 0x06
     be4:	f7 81       	ldd	r31, Z+7	; 0x07
     be6:	e0 2d       	mov	r30, r0
     be8:	09 95       	icall
     bea:	e9 cf       	rjmp	.-46     	; 0xbbe <_ZN13Adafruit_FONA5beginEhh+0x98>
     bec:	f8 01       	movw	r30, r16
     bee:	40 81       	ld	r20, Z
     bf0:	51 81       	ldd	r21, Z+1	; 0x01
     bf2:	24 ef       	ldi	r18, 0xF4	; 244
     bf4:	31 e0       	ldi	r19, 0x01	; 1
     bf6:	65 ef       	ldi	r22, 0xF5	; 245
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	ce 01       	movw	r24, r28
     bfc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c00:	81 11       	cpse	r24, r1
     c02:	34 c0       	rjmp	.+104    	; 0xc6c <_ZN13Adafruit_FONA5beginEhh+0x146>
     c04:	d7 01       	movw	r26, r14
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	dc 01       	movw	r26, r24
     c0c:	ed 91       	ld	r30, X+
     c0e:	fc 91       	ld	r31, X
     c10:	04 80       	ldd	r0, Z+4	; 0x04
     c12:	f5 81       	ldd	r31, Z+5	; 0x05
     c14:	e0 2d       	mov	r30, r0
     c16:	09 95       	icall
     c18:	89 2b       	or	r24, r25
     c1a:	59 f0       	breq	.+22     	; 0xc32 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     c1c:	f7 01       	movw	r30, r14
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	06 80       	ldd	r0, Z+6	; 0x06
     c2a:	f7 81       	ldd	r31, Z+7	; 0x07
     c2c:	e0 2d       	mov	r30, r0
     c2e:	09 95       	icall
     c30:	e9 cf       	rjmp	.-46     	; 0xc04 <_ZN13Adafruit_FONA5beginEhh+0xde>
     c32:	24 ef       	ldi	r18, 0xF4	; 244
     c34:	31 e0       	ldi	r19, 0x01	; 1
     c36:	42 ef       	ldi	r20, 0xF2	; 242
     c38:	51 e0       	ldi	r21, 0x01	; 1
     c3a:	6f ee       	ldi	r22, 0xEF	; 239
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c44:	81 11       	cpse	r24, r1
     c46:	12 c0       	rjmp	.+36     	; 0xc6c <_ZN13Adafruit_FONA5beginEhh+0x146>
     c48:	64 ef       	ldi	r22, 0xF4	; 244
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     c54:	b1 e0       	ldi	r27, 0x01	; 1
     c56:	cb 1a       	sub	r12, r27
     c58:	d1 08       	sbc	r13, r1
     c5a:	09 f0       	breq	.+2      	; 0xc5e <_ZN13Adafruit_FONA5beginEhh+0x138>
     c5c:	b0 cf       	rjmp	.-160    	; 0xbbe <_ZN13Adafruit_FONA5beginEhh+0x98>
     c5e:	5e c0       	rjmp	.+188    	; 0xd1c <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     c60:	64 e6       	ldi	r22, 0x64	; 100
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     c6c:	f8 01       	movw	r30, r16
     c6e:	40 81       	ld	r20, Z
     c70:	51 81       	ldd	r21, Z+1	; 0x01
     c72:	24 ef       	ldi	r18, 0xF4	; 244
     c74:	31 e0       	ldi	r19, 0x01	; 1
     c76:	62 ec       	ldi	r22, 0xC2	; 194
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c80:	64 e6       	ldi	r22, 0x64	; 100
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     c8c:	d8 01       	movw	r26, r16
     c8e:	4d 91       	ld	r20, X+
     c90:	5c 91       	ld	r21, X
     c92:	24 ef       	ldi	r18, 0xF4	; 244
     c94:	31 e0       	ldi	r19, 0x01	; 1
     c96:	6d eb       	ldi	r22, 0xBD	; 189
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	ce 01       	movw	r24, r28
     c9c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ca0:	81 11       	cpse	r24, r1
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <_ZN13Adafruit_FONA5beginEhh+0x182>
     ca4:	12 e0       	ldi	r17, 0x02	; 2
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <_ZN13Adafruit_FONA5beginEhh+0x184>
     ca8:	11 e0       	ldi	r17, 0x01	; 1
     caa:	64 e6       	ldi	r22, 0x64	; 100
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN13Adafruit_FONA10flushInputEv>
     cbc:	66 eb       	ldi	r22, 0xB6	; 182
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	87 e8       	ldi	r24, 0x87	; 135
     cc2:	94 e0       	ldi	r25, 0x04	; 4
     cc4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     cc8:	66 e1       	ldi	r22, 0x16	; 22
     cca:	71 e0       	ldi	r23, 0x01	; 1
     ccc:	87 e8       	ldi	r24, 0x87	; 135
     cce:	94 e0       	ldi	r25, 0x04	; 4
     cd0:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     cd4:	66 e1       	ldi	r22, 0x16	; 22
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	f7 01       	movw	r30, r14
     cda:	80 81       	ld	r24, Z
     cdc:	91 81       	ldd	r25, Z+1	; 0x01
     cde:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	64 ef       	ldi	r22, 0xF4	; 244
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN13Adafruit_FONA8readlineEjb>
     cee:	6f ea       	ldi	r22, 0xAF	; 175
     cf0:	71 e0       	ldi	r23, 0x01	; 1
     cf2:	87 e8       	ldi	r24, 0x87	; 135
     cf4:	94 e0       	ldi	r25, 0x04	; 4
     cf6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     cfa:	2f 96       	adiw	r28, 0x0f	; 15
     cfc:	be 01       	movw	r22, r28
     cfe:	87 e8       	ldi	r24, 0x87	; 135
     d00:	94 e0       	ldi	r25, 0x04	; 4
     d02:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     d06:	64 ea       	ldi	r22, 0xA4	; 164
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <strstr_P>
     d10:	89 2b       	or	r24, r25
     d12:	11 f0       	breq	.+4      	; 0xd18 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     d14:	81 2f       	mov	r24, r17
     d16:	35 c0       	rjmp	.+106    	; 0xd82 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	33 c0       	rjmp	.+102    	; 0xd82 <_ZN13Adafruit_FONA5beginEhh+0x25c>
     d1c:	d8 01       	movw	r26, r16
     d1e:	4d 91       	ld	r20, X+
     d20:	5c 91       	ld	r21, X
     d22:	24 ef       	ldi	r18, 0xF4	; 244
     d24:	31 e0       	ldi	r19, 0x01	; 1
     d26:	6c ee       	ldi	r22, 0xEC	; 236
     d28:	71 e0       	ldi	r23, 0x01	; 1
     d2a:	ce 01       	movw	r24, r28
     d2c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d30:	64 e6       	ldi	r22, 0x64	; 100
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     d3c:	f8 01       	movw	r30, r16
     d3e:	40 81       	ld	r20, Z
     d40:	51 81       	ldd	r21, Z+1	; 0x01
     d42:	24 ef       	ldi	r18, 0xF4	; 244
     d44:	31 e0       	ldi	r19, 0x01	; 1
     d46:	69 ee       	ldi	r22, 0xE9	; 233
     d48:	71 e0       	ldi	r23, 0x01	; 1
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d50:	64 e6       	ldi	r22, 0x64	; 100
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
     d5c:	d8 01       	movw	r26, r16
     d5e:	4d 91       	ld	r20, X+
     d60:	5c 91       	ld	r21, X
     d62:	24 ef       	ldi	r18, 0xF4	; 244
     d64:	31 e0       	ldi	r19, 0x01	; 1
     d66:	66 ee       	ldi	r22, 0xE6	; 230
     d68:	71 e0       	ldi	r23, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d70:	81 11       	cpse	r24, r1
     d72:	76 cf       	rjmp	.-276    	; 0xc60 <_ZN13Adafruit_FONA5beginEhh+0x13a>
     d74:	67 ec       	ldi	r22, 0xC7	; 199
     d76:	71 e0       	ldi	r23, 0x01	; 1
     d78:	87 e8       	ldi	r24, 0x87	; 135
     d7a:	94 e0       	ldi	r25, 0x04	; 4
     d7c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	08 95       	ret

00000d94 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	ec 01       	movw	r28, r24
     da2:	79 01       	movw	r14, r18
     da4:	98 01       	movw	r18, r16
     da6:	0e 94 15 05 	call	0xa2a	; 0xa2a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     daa:	b7 01       	movw	r22, r14
     dac:	ce 01       	movw	r24, r28
     dae:	0f 96       	adiw	r24, 0x0f	; 15
     db0:	0e 94 49 20 	call	0x4092	; 0x4092 <strcmp_P>
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	89 2b       	or	r24, r25
     db8:	09 f0       	breq	.+2      	; 0xdbc <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	82 2f       	mov	r24, r18
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	08 95       	ret

00000dcc <_ZN13Adafruit_FONA10enableGPRSEb>:
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ec 01       	movw	r28, r24
     de8:	28 ee       	ldi	r18, 0xE8	; 232
     dea:	3d ef       	ldi	r19, 0xFD	; 253
     dec:	66 23       	and	r22, r22
     dee:	09 f4       	brne	.+2      	; 0xdf2 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     df0:	1f c1       	rjmp	.+574    	; 0x1030 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     df2:	4e e5       	ldi	r20, 0x5E	; 94
     df4:	51 e0       	ldi	r21, 0x01	; 1
     df6:	63 e5       	ldi	r22, 0x53	; 83
     df8:	71 e0       	ldi	r23, 0x01	; 1
     dfa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     dfe:	81 11       	cpse	r24, r1
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	78 2e       	mov	r7, r24
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     e08:	77 24       	eor	r7, r7
     e0a:	73 94       	inc	r7
     e0c:	7e 01       	movw	r14, r28
     e0e:	85 ee       	ldi	r24, 0xE5	; 229
     e10:	e8 1a       	sub	r14, r24
     e12:	8e ef       	ldi	r24, 0xFE	; 254
     e14:	f8 0a       	sbc	r15, r24
     e16:	f7 01       	movw	r30, r14
     e18:	40 81       	ld	r20, Z
     e1a:	51 81       	ldd	r21, Z+1	; 0x01
     e1c:	20 e1       	ldi	r18, 0x10	; 16
     e1e:	37 e2       	ldi	r19, 0x27	; 39
     e20:	68 e4       	ldi	r22, 0x48	; 72
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e2a:	88 23       	and	r24, r24
     e2c:	09 f4       	brne	.+2      	; 0xe30 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     e2e:	25 c1       	rjmp	.+586    	; 0x107a <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     e30:	f7 01       	movw	r30, r14
     e32:	40 81       	ld	r20, Z
     e34:	51 81       	ldd	r21, Z+1	; 0x01
     e36:	20 e1       	ldi	r18, 0x10	; 16
     e38:	37 e2       	ldi	r19, 0x27	; 39
     e3a:	6a e2       	ldi	r22, 0x2A	; 42
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	ce 01       	movw	r24, r28
     e40:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e44:	88 23       	and	r24, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     e48:	1a c1       	rjmp	.+564    	; 0x107e <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     e4a:	4e 01       	movw	r8, r28
     e4c:	f2 ef       	ldi	r31, 0xF2	; 242
     e4e:	8f 1a       	sub	r8, r31
     e50:	fe ef       	ldi	r31, 0xFE	; 254
     e52:	9f 0a       	sbc	r9, r31
     e54:	f4 01       	movw	r30, r8
     e56:	40 81       	ld	r20, Z
     e58:	51 81       	ldd	r21, Z+1	; 0x01
     e5a:	41 15       	cp	r20, r1
     e5c:	51 05       	cpc	r21, r1
     e5e:	71 f4       	brne	.+28     	; 0xe7c <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     e60:	f7 01       	movw	r30, r14
     e62:	40 81       	ld	r20, Z
     e64:	51 81       	ldd	r21, Z+1	; 0x01
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	65 ec       	ldi	r22, 0xC5	; 197
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     e74:	81 11       	cpse	r24, r1
     e76:	ce c0       	rjmp	.+412    	; 0x1014 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     e78:	89 e0       	ldi	r24, 0x09	; 9
     e7a:	0e c1       	rjmp	.+540    	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     e7c:	f7 01       	movw	r30, r14
     e7e:	20 81       	ld	r18, Z
     e80:	31 81       	ldd	r19, Z+1	; 0x01
     e82:	00 e1       	ldi	r16, 0x10	; 16
     e84:	17 e2       	ldi	r17, 0x27	; 39
     e86:	66 e1       	ldi	r22, 0x16	; 22
     e88:	71 e0       	ldi	r23, 0x01	; 1
     e8a:	ce 01       	movw	r24, r28
     e8c:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
     e94:	f6 c0       	rjmp	.+492    	; 0x1082 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
     e96:	ce 01       	movw	r24, r28
     e98:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN13Adafruit_FONA10flushInputEv>
     e9c:	8e 01       	movw	r16, r28
     e9e:	03 5e       	subi	r16, 0xE3	; 227
     ea0:	1e 4f       	sbci	r17, 0xFE	; 254
     ea2:	6c e0       	ldi	r22, 0x0C	; 12
     ea4:	71 e0       	ldi	r23, 0x01	; 1
     ea6:	f8 01       	movw	r30, r16
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     eb0:	f4 01       	movw	r30, r8
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	f8 01       	movw	r30, r16
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     ec0:	5e 01       	movw	r10, r28
     ec2:	f0 ef       	ldi	r31, 0xF0	; 240
     ec4:	af 1a       	sub	r10, r31
     ec6:	fe ef       	ldi	r31, 0xFE	; 254
     ec8:	bf 0a       	sbc	r11, r31
     eca:	f5 01       	movw	r30, r10
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	89 2b       	or	r24, r25
     ed2:	79 f0       	breq	.+30     	; 0xef2 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
     ed4:	62 e3       	ldi	r22, 0x32	; 50
     ed6:	71 e0       	ldi	r23, 0x01	; 1
     ed8:	f8 01       	movw	r30, r16
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
     ee2:	f5 01       	movw	r30, r10
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	f8 01       	movw	r30, r16
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     ef2:	6e 01       	movw	r12, r28
     ef4:	fe ee       	ldi	r31, 0xEE	; 238
     ef6:	cf 1a       	sub	r12, r31
     ef8:	fe ef       	ldi	r31, 0xFE	; 254
     efa:	df 0a       	sbc	r13, r31
     efc:	f6 01       	movw	r30, r12
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	89 2b       	or	r24, r25
     f04:	79 f0       	breq	.+30     	; 0xf24 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
     f06:	62 e3       	ldi	r22, 0x32	; 50
     f08:	71 e0       	ldi	r23, 0x01	; 1
     f0a:	f8 01       	movw	r30, r16
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
     f14:	f6 01       	movw	r30, r12
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	f8 01       	movw	r30, r16
     f1c:	80 81       	ld	r24, Z
     f1e:	91 81       	ldd	r25, Z+1	; 0x01
     f20:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     f24:	64 e3       	ldi	r22, 0x34	; 52
     f26:	71 e0       	ldi	r23, 0x01	; 1
     f28:	f8 01       	movw	r30, r16
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     f32:	65 e0       	ldi	r22, 0x05	; 5
     f34:	71 e0       	ldi	r23, 0x01	; 1
     f36:	87 e8       	ldi	r24, 0x87	; 135
     f38:	94 e0       	ldi	r25, 0x04	; 4
     f3a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     f3e:	6b ef       	ldi	r22, 0xFB	; 251
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	87 e8       	ldi	r24, 0x87	; 135
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     f4a:	f4 01       	movw	r30, r8
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	87 e8       	ldi	r24, 0x87	; 135
     f52:	94 e0       	ldi	r25, 0x04	; 4
     f54:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     f58:	f5 01       	movw	r30, r10
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	89 2b       	or	r24, r25
     f60:	69 f0       	breq	.+26     	; 0xf7c <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
     f62:	62 e3       	ldi	r22, 0x32	; 50
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	87 e8       	ldi	r24, 0x87	; 135
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
     f6e:	f5 01       	movw	r30, r10
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	87 e8       	ldi	r24, 0x87	; 135
     f76:	94 e0       	ldi	r25, 0x04	; 4
     f78:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     f7c:	f6 01       	movw	r30, r12
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	89 2b       	or	r24, r25
     f84:	69 f0       	breq	.+26     	; 0xfa0 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
     f86:	62 e3       	ldi	r22, 0x32	; 50
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	87 e8       	ldi	r24, 0x87	; 135
     f8c:	94 e0       	ldi	r25, 0x04	; 4
     f8e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
     f92:	f6 01       	movw	r30, r12
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	87 e8       	ldi	r24, 0x87	; 135
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
     fa0:	64 e3       	ldi	r22, 0x34	; 52
     fa2:	71 e0       	ldi	r23, 0x01	; 1
     fa4:	87 e8       	ldi	r24, 0x87	; 135
     fa6:	94 e0       	ldi	r25, 0x04	; 4
     fa8:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
     fac:	f7 01       	movw	r30, r14
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	40 e1       	ldi	r20, 0x10	; 16
     fb4:	57 e2       	ldi	r21, 0x27	; 39
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 b8 04 	call	0x970	; 0x970 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     fbc:	88 23       	and	r24, r24
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
     fc0:	62 c0       	rjmp	.+196    	; 0x1086 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
     fc2:	f5 01       	movw	r30, r10
     fc4:	40 81       	ld	r20, Z
     fc6:	51 81       	ldd	r21, Z+1	; 0x01
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	39 f4       	brne	.+14     	; 0xfdc <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
     fce:	f6 01       	movw	r30, r12
     fd0:	40 81       	ld	r20, Z
     fd2:	51 81       	ldd	r21, Z+1	; 0x01
     fd4:	41 15       	cp	r20, r1
     fd6:	51 05       	cpc	r21, r1
     fd8:	79 f4       	brne	.+30     	; 0xff8 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
     fda:	42 cf       	rjmp	.-380    	; 0xe60 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     fdc:	f7 01       	movw	r30, r14
     fde:	20 81       	ld	r18, Z
     fe0:	31 81       	ldd	r19, Z+1	; 0x01
     fe2:	00 e1       	ldi	r16, 0x10	; 16
     fe4:	17 e2       	ldi	r17, 0x27	; 39
     fe6:	66 ee       	ldi	r22, 0xE6	; 230
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     ff0:	81 11       	cpse	r24, r1
     ff2:	ed cf       	rjmp	.-38     	; 0xfce <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
     ff4:	87 e0       	ldi	r24, 0x07	; 7
     ff6:	50 c0       	rjmp	.+160    	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     ff8:	f7 01       	movw	r30, r14
     ffa:	20 81       	ld	r18, Z
     ffc:	31 81       	ldd	r19, Z+1	; 0x01
     ffe:	00 e1       	ldi	r16, 0x10	; 16
    1000:	17 e2       	ldi	r17, 0x27	; 39
    1002:	62 ed       	ldi	r22, 0xD2	; 210
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    100c:	81 11       	cpse	r24, r1
    100e:	28 cf       	rjmp	.-432    	; 0xe60 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1010:	88 e0       	ldi	r24, 0x08	; 8
    1012:	42 c0       	rjmp	.+132    	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1014:	f7 01       	movw	r30, r14
    1016:	40 81       	ld	r20, Z
    1018:	51 81       	ldd	r21, Z+1	; 0x01
    101a:	2f ef       	ldi	r18, 0xFF	; 255
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	6c eb       	ldi	r22, 0xBC	; 188
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	ce 01       	movw	r24, r28
    1024:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1028:	88 23       	and	r24, r24
    102a:	79 f1       	breq	.+94     	; 0x108a <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    102c:	87 2d       	mov	r24, r7
    102e:	34 c0       	rjmp	.+104    	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1030:	44 eb       	ldi	r20, 0xB4	; 180
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	69 ea       	ldi	r22, 0xA9	; 169
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    103c:	88 23       	and	r24, r24
    103e:	39 f1       	breq	.+78     	; 0x108e <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    1040:	8e 01       	movw	r16, r28
    1042:	05 5e       	subi	r16, 0xE5	; 229
    1044:	1e 4f       	sbci	r17, 0xFE	; 254
    1046:	f8 01       	movw	r30, r16
    1048:	40 81       	ld	r20, Z
    104a:	51 81       	ldd	r21, Z+1	; 0x01
    104c:	20 e1       	ldi	r18, 0x10	; 16
    104e:	37 e2       	ldi	r19, 0x27	; 39
    1050:	6c e9       	ldi	r22, 0x9C	; 156
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    105a:	88 23       	and	r24, r24
    105c:	d1 f0       	breq	.+52     	; 0x1092 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    105e:	f8 01       	movw	r30, r16
    1060:	40 81       	ld	r20, Z
    1062:	51 81       	ldd	r21, Z+1	; 0x01
    1064:	20 e1       	ldi	r18, 0x10	; 16
    1066:	37 e2       	ldi	r19, 0x27	; 39
    1068:	61 e9       	ldi	r22, 0x91	; 145
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1072:	88 23       	and	r24, r24
    1074:	81 f0       	breq	.+32     	; 0x1096 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1082:	85 e0       	ldi	r24, 0x05	; 5
    1084:	09 c0       	rjmp	.+18     	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1086:	86 e0       	ldi	r24, 0x06	; 6
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    108a:	8a e0       	ldi	r24, 0x0A	; 10
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    108e:	8b e0       	ldi	r24, 0x0B	; 11
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1092:	8c e0       	ldi	r24, 0x0C	; 12
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1096:	8d e0       	ldi	r24, 0x0D	; 13
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	bf 90       	pop	r11
    10aa:	af 90       	pop	r10
    10ac:	9f 90       	pop	r9
    10ae:	8f 90       	pop	r8
    10b0:	7f 90       	pop	r7
    10b2:	08 95       	ret

000010b4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	5b 01       	movw	r10, r22
    10c8:	6a 01       	movw	r12, r20
    10ca:	e2 2e       	mov	r14, r18
    10cc:	0f 96       	adiw	r24, 0x0f	; 15
    10ce:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <strstr_P>
    10d2:	ec 01       	movw	r28, r24
    10d4:	89 2b       	or	r24, r25
    10d6:	c1 f0       	breq	.+48     	; 0x1108 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    10d8:	c5 01       	movw	r24, r10
    10da:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__strlen_P>
    10de:	8c 0f       	add	r24, r28
    10e0:	9d 1f       	adc	r25, r29
    10e2:	c0 e0       	ldi	r28, 0x00	; 0
    10e4:	f1 2c       	mov	r15, r1
    10e6:	c0 17       	cp	r28, r16
    10e8:	41 f0       	breq	.+16     	; 0x10fa <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    10ea:	b7 01       	movw	r22, r14
    10ec:	0e 94 7e 20 	call	0x40fc	; 0x40fc <strchr>
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	51 f0       	breq	.+20     	; 0x1108 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	cf 5f       	subi	r28, 0xFF	; 255
    10f8:	f6 cf       	rjmp	.-20     	; 0x10e6 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    10fa:	0e 94 2b 20 	call	0x4056	; 0x4056 <atoi>
    10fe:	f6 01       	movw	r30, r12
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	01 c0       	rjmp	.+2      	; 0x110a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	bf 90       	pop	r11
    111a:	af 90       	pop	r10
    111c:	08 95       	ret

0000111e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    111e:	af 92       	push	r10
    1120:	bf 92       	push	r11
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	6a 01       	movw	r12, r20
    1134:	59 01       	movw	r10, r18
    1136:	10 2f       	mov	r17, r16
    1138:	0e 2d       	mov	r16, r14
    113a:	44 ef       	ldi	r20, 0xF4	; 244
    113c:	51 e0       	ldi	r21, 0x01	; 1
    113e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1142:	21 2f       	mov	r18, r17
    1144:	a5 01       	movw	r20, r10
    1146:	b6 01       	movw	r22, r12
    1148:	ce 01       	movw	r24, r28
    114a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    114e:	18 2f       	mov	r17, r24
    1150:	88 23       	and	r24, r24
    1152:	31 f0       	breq	.+12     	; 0x1160 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	64 ef       	ldi	r22, 0xF4	; 244
    1158:	71 e0       	ldi	r23, 0x01	; 1
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN13Adafruit_FONA8readlineEjb>
    1160:	81 2f       	mov	r24, r17
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	08 95       	ret

00001176 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	28 97       	sbiw	r28, 0x08	; 8
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1198:	18 86       	std	Y+8, r1	; 0x08
    119a:	1f 82       	std	Y+7, r1	; 0x07
    119c:	1e 82       	std	Y+6, r1	; 0x06
    119e:	1d 82       	std	Y+5, r1	; 0x05
    11a0:	1c 82       	std	Y+4, r1	; 0x04
    11a2:	1b 82       	std	Y+3, r1	; 0x03
    11a4:	1a 82       	std	Y+2, r1	; 0x02
    11a6:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    11a8:	e1 2c       	mov	r14, r1
    11aa:	0c e2       	ldi	r16, 0x2C	; 44
    11ac:	9e 01       	movw	r18, r28
    11ae:	29 5f       	subi	r18, 0xF9	; 249
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	4d e9       	ldi	r20, 0x9D	; 157
    11b4:	51 e0       	ldi	r21, 0x01	; 1
    11b6:	66 e9       	ldi	r22, 0x96	; 150
    11b8:	71 e0       	ldi	r23, 0x01	; 1
    11ba:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    11be:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    11c0:	ee 24       	eor	r14, r14
    11c2:	e3 94       	inc	r14
    11c4:	9e 01       	movw	r18, r28
    11c6:	2b 5f       	subi	r18, 0xFB	; 251
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	4f e8       	ldi	r20, 0x8F	; 143
    11cc:	51 e0       	ldi	r21, 0x01	; 1
    11ce:	68 e8       	ldi	r22, 0x88	; 136
    11d0:	71 e0       	ldi	r23, 0x01	; 1
    11d2:	c6 01       	movw	r24, r12
    11d4:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    11d8:	88 23       	and	r24, r24
    11da:	19 f0       	breq	.+6      	; 0x11e2 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	f8 26       	eor	r15, r24
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    11e2:	ff 24       	eor	r15, r15
    11e4:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    11e6:	e1 2c       	mov	r14, r1
    11e8:	0c e2       	ldi	r16, 0x2C	; 44
    11ea:	9e 01       	movw	r18, r28
    11ec:	2d 5f       	subi	r18, 0xFD	; 253
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	40 e8       	ldi	r20, 0x80	; 128
    11f2:	51 e0       	ldi	r21, 0x01	; 1
    11f4:	67 e7       	ldi	r22, 0x77	; 119
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	c6 01       	movw	r24, r12
    11fa:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    11fe:	88 23       	and	r24, r24
    1200:	11 f0       	breq	.+4      	; 0x1206 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1202:	1b 81       	ldd	r17, Y+3	; 0x03
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1206:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1208:	ee 24       	eor	r14, r14
    120a:	e3 94       	inc	r14
    120c:	0c e2       	ldi	r16, 0x2C	; 44
    120e:	9e 01       	movw	r18, r28
    1210:	2f 5f       	subi	r18, 0xFF	; 255
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	4f e6       	ldi	r20, 0x6F	; 111
    1216:	51 e0       	ldi	r21, 0x01	; 1
    1218:	66 e6       	ldi	r22, 0x66	; 102
    121a:	71 e0       	ldi	r23, 0x01	; 1
    121c:	c6 01       	movw	r24, r12
    121e:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1222:	81 11       	cpse	r24, r1
    1224:	03 c0       	rjmp	.+6      	; 0x122c <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1226:	91 2f       	mov	r25, r17
    1228:	90 62       	ori	r25, 0x20	; 32
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    122c:	99 81       	ldd	r25, Y+1	; 0x01
    122e:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1230:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1234:	8f 2d       	mov	r24, r15
    1236:	28 96       	adiw	r28, 0x08	; 8
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	08 95       	ret

00001254 <_ZN10GsmPayloadC1Ev>:
//Internal format that gets encoded/decoded:
// TODO: Create special char at end if this was truncated and keep a track of truncation
//		 Try keep data[100] then charEncoding[100] on stack vs new data() then data->delete() then...
void GsmPayload::createEncodedPayload(char* output, uint16_t maxLength){
	
	createPayload((uint8_t*)output, maxLength);
    1254:	fc 01       	movw	r30, r24
    1256:	10 82       	st	Z, r1
    1258:	12 82       	std	Z+2, r1	; 0x02
    125a:	11 82       	std	Z+1, r1	; 0x01
    125c:	13 82       	std	Z+3, r1	; 0x03
    125e:	14 82       	std	Z+4, r1	; 0x04
    1260:	15 82       	std	Z+5, r1	; 0x05
    1262:	17 82       	std	Z+7, r1	; 0x07
    1264:	11 86       	std	Z+9, r1	; 0x09
    1266:	10 86       	std	Z+8, r1	; 0x08
    1268:	13 86       	std	Z+11, r1	; 0x0b
    126a:	12 86       	std	Z+10, r1	; 0x0a
    126c:	14 86       	std	Z+12, r1	; 0x0c
    126e:	08 95       	ret

00001270 <_ZN10GsmPayload13createPayloadEPhj>:
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	fb 01       	movw	r30, r22
    1278:	88 81       	ld	r24, Y
    127a:	80 83       	st	Z, r24
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	92 83       	std	Z+2, r25	; 0x02
    1282:	81 83       	std	Z+1, r24	; 0x01
    1284:	8c 85       	ldd	r24, Y+12	; 0x0c
    1286:	83 83       	std	Z+3, r24	; 0x03
    1288:	4c 85       	ldd	r20, Y+12	; 0x0c
    128a:	8a e0       	ldi	r24, 0x0A	; 10
    128c:	48 9f       	mul	r20, r24
    128e:	a0 01       	movw	r20, r0
    1290:	11 24       	eor	r1, r1
    1292:	6a 85       	ldd	r22, Y+10	; 0x0a
    1294:	7b 85       	ldd	r23, Y+11	; 0x0b
    1296:	cf 01       	movw	r24, r30
    1298:	04 96       	adiw	r24, 0x04	; 4
    129a:	0e 94 75 20 	call	0x40ea	; 0x40ea <memcpy>
    129e:	66 e7       	ldi	r22, 0x76	; 118
    12a0:	72 e0       	ldi	r23, 0x02	; 2
    12a2:	87 e8       	ldi	r24, 0x87	; 135
    12a4:	94 e0       	ldi	r25, 0x04	; 4
    12a6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    12aa:	66 e4       	ldi	r22, 0x46	; 70
    12ac:	71 e0       	ldi	r23, 0x01	; 1
    12ae:	87 e8       	ldi	r24, 0x87	; 135
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    12b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    12b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    12ba:	62 85       	ldd	r22, Z+10	; 0x0a
    12bc:	73 85       	ldd	r23, Z+11	; 0x0b
    12be:	4a e0       	ldi	r20, 0x0A	; 10
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	87 e8       	ldi	r24, 0x87	; 135
    12c4:	94 e0       	ldi	r25, 0x04	; 4
    12c6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_ZN5Print7printlnEji>
    12ca:	69 e6       	ldi	r22, 0x69	; 105
    12cc:	72 e0       	ldi	r23, 0x02	; 2
    12ce:	87 e8       	ldi	r24, 0x87	; 135
    12d0:	94 e0       	ldi	r25, 0x04	; 4
    12d2:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    12d6:	66 e4       	ldi	r22, 0x46	; 70
    12d8:	71 e0       	ldi	r23, 0x01	; 1
    12da:	87 e8       	ldi	r24, 0x87	; 135
    12dc:	94 e0       	ldi	r25, 0x04	; 4
    12de:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    12e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    12e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    12e6:	66 8d       	ldd	r22, Z+30	; 0x1e
    12e8:	77 8d       	ldd	r23, Z+31	; 0x1f
    12ea:	4a e0       	ldi	r20, 0x0A	; 10
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	87 e8       	ldi	r24, 0x87	; 135
    12f0:	94 e0       	ldi	r25, 0x04	; 4
    12f2:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_ZN5Print7printlnEji>
    12f6:	61 e6       	ldi	r22, 0x61	; 97
    12f8:	72 e0       	ldi	r23, 0x02	; 2
    12fa:	87 e8       	ldi	r24, 0x87	; 135
    12fc:	94 e0       	ldi	r25, 0x04	; 4
    12fe:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1302:	66 e4       	ldi	r22, 0x46	; 70
    1304:	71 e0       	ldi	r23, 0x01	; 1
    1306:	87 e8       	ldi	r24, 0x87	; 135
    1308:	94 e0       	ldi	r25, 0x04	; 4
    130a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    130e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1310:	fb 85       	ldd	r31, Y+11	; 0x0b
    1312:	62 a9       	ldd	r22, Z+50	; 0x32
    1314:	73 a9       	ldd	r23, Z+51	; 0x33
    1316:	4a e0       	ldi	r20, 0x0A	; 10
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	87 e8       	ldi	r24, 0x87	; 135
    131c:	94 e0       	ldi	r25, 0x04	; 4
    131e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_ZN5Print7printlnEji>
    1322:	60 e5       	ldi	r22, 0x50	; 80
    1324:	72 e0       	ldi	r23, 0x02	; 2
    1326:	87 e8       	ldi	r24, 0x87	; 135
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    132e:	66 e4       	ldi	r22, 0x46	; 70
    1330:	71 e0       	ldi	r23, 0x01	; 1
    1332:	87 e8       	ldi	r24, 0x87	; 135
    1334:	94 e0       	ldi	r25, 0x04	; 4
    1336:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    133a:	ea 85       	ldd	r30, Y+10	; 0x0a
    133c:	fb 85       	ldd	r31, Y+11	; 0x0b
    133e:	ea 5b       	subi	r30, 0xBA	; 186
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	4a e0       	ldi	r20, 0x0A	; 10
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	87 e8       	ldi	r24, 0x87	; 135
    134c:	94 e0       	ldi	r25, 0x04	; 4
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <_ZN5Print7printlnEji>

00001356 <_ZN10GsmPayload11readPayloadEPh>:
RM_LOG2(F("Temperature WAS "), * ((uint16_t*)(_dataArr+offsetof(SensorData, temperature))));
	
	
}

void GsmPayload::readPayload(uint8_t* input){
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
    1360:	8b 01       	movw	r16, r22
	
	memcpy(&moduleId, input, sizeof(moduleId));
    1362:	fb 01       	movw	r30, r22
    1364:	80 81       	ld	r24, Z
    1366:	88 83       	st	Y, r24
	input += sizeof(moduleId);
	RM_LOG2(F("Module ID was "), moduleId);
    1368:	61 e4       	ldi	r22, 0x41	; 65
    136a:	72 e0       	ldi	r23, 0x02	; 2
    136c:	87 e8       	ldi	r24, 0x87	; 135
    136e:	94 e0       	ldi	r25, 0x04	; 4
    1370:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1374:	66 e4       	ldi	r22, 0x46	; 70
    1376:	71 e0       	ldi	r23, 0x01	; 1
    1378:	87 e8       	ldi	r24, 0x87	; 135
    137a:	94 e0       	ldi	r25, 0x04	; 4
    137c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    1380:	4a e0       	ldi	r20, 0x0A	; 10
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	68 81       	ld	r22, Y
    1386:	87 e8       	ldi	r24, 0x87	; 135
    1388:	94 e0       	ldi	r25, 0x04	; 4
    138a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>
	
	memcpy(&thisBootNumber, input, sizeof(thisBootNumber));
    138e:	f8 01       	movw	r30, r16
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	92 81       	ldd	r25, Z+2	; 0x02
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
	input += sizeof(thisBootNumber);
	RM_LOG2(F("Boot # was "), thisBootNumber);
    1398:	65 e3       	ldi	r22, 0x35	; 53
    139a:	72 e0       	ldi	r23, 0x02	; 2
    139c:	87 e8       	ldi	r24, 0x87	; 135
    139e:	94 e0       	ldi	r25, 0x04	; 4
    13a0:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    13a4:	66 e4       	ldi	r22, 0x46	; 70
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	87 e8       	ldi	r24, 0x87	; 135
    13aa:	94 e0       	ldi	r25, 0x04	; 4
    13ac:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    13b0:	69 81       	ldd	r22, Y+1	; 0x01
    13b2:	7a 81       	ldd	r23, Y+2	; 0x02
    13b4:	4a e0       	ldi	r20, 0x0A	; 10
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	87 e8       	ldi	r24, 0x87	; 135
    13ba:	94 e0       	ldi	r25, 0x04	; 4
    13bc:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_ZN5Print7printlnEji>
	
	memcpy(&_dataArrSz, input, sizeof(_dataArrSz));
    13c0:	f8 01       	movw	r30, r16
    13c2:	83 81       	ldd	r24, Z+3	; 0x03
    13c4:	8c 87       	std	Y+12, r24	; 0x0c
	input += sizeof(_dataArrSz);
	RM_LOG2(F("Data Arr Sz was "), _dataArrSz);
    13c6:	64 e2       	ldi	r22, 0x24	; 36
    13c8:	72 e0       	ldi	r23, 0x02	; 2
    13ca:	87 e8       	ldi	r24, 0x87	; 135
    13cc:	94 e0       	ldi	r25, 0x04	; 4
    13ce:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    13d2:	66 e4       	ldi	r22, 0x46	; 70
    13d4:	71 e0       	ldi	r23, 0x01	; 1
    13d6:	87 e8       	ldi	r24, 0x87	; 135
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    13de:	4a e0       	ldi	r20, 0x0A	; 10
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    13e4:	87 e8       	ldi	r24, 0x87	; 135
    13e6:	94 e0       	ldi	r25, 0x04	; 4
    13e8:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>
	
	//SensorData tmp[_dataArrSz];
	//_dataArr = tmp;
	memcpy(_dataArr, input, _dataArrSz * sizeof(SensorData));
    13ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    13ee:	fa e0       	ldi	r31, 0x0A	; 10
    13f0:	4f 9f       	mul	r20, r31
    13f2:	a0 01       	movw	r20, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	b8 01       	movw	r22, r16
    13f8:	6c 5f       	subi	r22, 0xFC	; 252
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1400:	0e 94 75 20 	call	0x40ea	; 0x40ea <memcpy>
	input += sizeof(_dataArrSz * sizeof(SensorData));
	
	Helpers::printSensorData(_dataArr);//print the first
    1404:	8a 85       	ldd	r24, Y+10	; 0x0a
    1406:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
	//SensorData tmp[_dataArrSz];
	//_dataArr = tmp;
	memcpy(_dataArr, input, _dataArrSz * sizeof(SensorData));
	input += sizeof(_dataArrSz * sizeof(SensorData));
	
	Helpers::printSensorData(_dataArr);//print the first
    1410:	0c 94 be 0a 	jmp	0x157c	; 0x157c <_ZN7Helpers15printSensorDataEP10SensorData>

00001414 <_ZN10GsmPayload13addSensorDataEP10SensorDatah>:
	
}

void GsmPayload::addSensorData(SensorData* dataArr, uint8_t arraySz){

	_dataArr = dataArr;
    1414:	fc 01       	movw	r30, r24
    1416:	73 87       	std	Z+11, r23	; 0x0b
    1418:	62 87       	std	Z+10, r22	; 0x0a
	_dataArrSz = arraySz;	
    141a:	44 87       	std	Z+12, r20	; 0x0c
    141c:	08 95       	ret

0000141e <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    1424:	6a ef       	ldi	r22, 0xFA	; 250
    1426:	72 e0       	ldi	r23, 0x02	; 2
    1428:	87 e8       	ldi	r24, 0x87	; 135
    142a:	94 e0       	ldi	r25, 0x04	; 4
    142c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1430:	4a e0       	ldi	r20, 0x0A	; 10
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	68 81       	ld	r22, Y
    1436:	87 e8       	ldi	r24, 0x87	; 135
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN5Print5printEhi>
    143e:	66 ef       	ldi	r22, 0xF6	; 246
    1440:	72 e0       	ldi	r23, 0x02	; 2
    1442:	87 e8       	ldi	r24, 0x87	; 135
    1444:	94 e0       	ldi	r25, 0x04	; 4
    1446:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    144a:	61 ef       	ldi	r22, 0xF1	; 241
    144c:	72 e0       	ldi	r23, 0x02	; 2
    144e:	87 e8       	ldi	r24, 0x87	; 135
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1456:	4a e0       	ldi	r20, 0x0A	; 10
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	69 81       	ldd	r22, Y+1	; 0x01
    145c:	87 e8       	ldi	r24, 0x87	; 135
    145e:	94 e0       	ldi	r25, 0x04	; 4
    1460:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN5Print5printEhi>
    1464:	6d ee       	ldi	r22, 0xED	; 237
    1466:	72 e0       	ldi	r23, 0x02	; 2
    1468:	87 e8       	ldi	r24, 0x87	; 135
    146a:	94 e0       	ldi	r25, 0x04	; 4
    146c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1470:	68 ed       	ldi	r22, 0xD8	; 216
    1472:	72 e0       	ldi	r23, 0x02	; 2
    1474:	87 e8       	ldi	r24, 0x87	; 135
    1476:	94 e0       	ldi	r25, 0x04	; 4
    1478:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    147c:	6b 81       	ldd	r22, Y+3	; 0x03
    147e:	63 70       	andi	r22, 0x03	; 3
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	4a e0       	ldi	r20, 0x0A	; 10
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	87 e8       	ldi	r24, 0x87	; 135
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN5Print5printEii>
    148e:	6e ec       	ldi	r22, 0xCE	; 206
    1490:	72 e0       	ldi	r23, 0x02	; 2
    1492:	87 e8       	ldi	r24, 0x87	; 135
    1494:	94 e0       	ldi	r25, 0x04	; 4
    1496:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    149a:	6b 81       	ldd	r22, Y+3	; 0x03
    149c:	6c 71       	andi	r22, 0x1C	; 28
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	75 95       	asr	r23
    14a2:	67 95       	ror	r22
    14a4:	75 95       	asr	r23
    14a6:	67 95       	ror	r22
    14a8:	4a e0       	ldi	r20, 0x0A	; 10
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	87 e8       	ldi	r24, 0x87	; 135
    14ae:	94 e0       	ldi	r25, 0x04	; 4
    14b0:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN5Print5printEii>
    14b4:	65 ec       	ldi	r22, 0xC5	; 197
    14b6:	72 e0       	ldi	r23, 0x02	; 2
    14b8:	87 e8       	ldi	r24, 0x87	; 135
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    14c0:	6b 81       	ldd	r22, Y+3	; 0x03
    14c2:	65 fb       	bst	r22, 5
    14c4:	66 27       	eor	r22, r22
    14c6:	60 f9       	bld	r22, 0
    14c8:	4a e0       	ldi	r20, 0x0A	; 10
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	87 e8       	ldi	r24, 0x87	; 135
    14d0:	94 e0       	ldi	r25, 0x04	; 4
    14d2:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN5Print5printEii>
    14d6:	61 ec       	ldi	r22, 0xC1	; 193
    14d8:	72 e0       	ldi	r23, 0x02	; 2
    14da:	87 e8       	ldi	r24, 0x87	; 135
    14dc:	94 e0       	ldi	r25, 0x04	; 4
    14de:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    14e2:	64 eb       	ldi	r22, 0xB4	; 180
    14e4:	72 e0       	ldi	r23, 0x02	; 2
    14e6:	87 e8       	ldi	r24, 0x87	; 135
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    14ee:	4a e0       	ldi	r20, 0x0A	; 10
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	6a 81       	ldd	r22, Y+2	; 0x02
    14f4:	87 e8       	ldi	r24, 0x87	; 135
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>

00001500 <_ZN7Helpers14printByteArrayEPhj>:
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	7b 01       	movw	r14, r22
    1512:	8c 01       	movw	r16, r24
    1514:	c0 e0       	ldi	r28, 0x00	; 0
    1516:	d0 e0       	ldi	r29, 0x00	; 0
    1518:	85 e0       	ldi	r24, 0x05	; 5
    151a:	c8 2e       	mov	r12, r24
    151c:	d1 2c       	mov	r13, r1
    151e:	ce 15       	cp	r28, r14
    1520:	df 05       	cpc	r29, r15
    1522:	19 f1       	breq	.+70     	; 0x156a <_ZN7Helpers14printByteArrayEPhj+0x6a>
    1524:	20 97       	sbiw	r28, 0x00	; 0
    1526:	79 f0       	breq	.+30     	; 0x1546 <_ZN7Helpers14printByteArrayEPhj+0x46>
    1528:	ce 01       	movw	r24, r28
    152a:	b6 01       	movw	r22, r12
    152c:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <__udivmodhi4>
    1530:	89 2b       	or	r24, r25
    1532:	49 f4       	brne	.+18     	; 0x1546 <_ZN7Helpers14printByteArrayEPhj+0x46>
    1534:	4a e0       	ldi	r20, 0x0A	; 10
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	f8 01       	movw	r30, r16
    153a:	60 81       	ld	r22, Z
    153c:	87 e8       	ldi	r24, 0x87	; 135
    153e:	94 e0       	ldi	r25, 0x04	; 4
    1540:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <_ZN7Helpers14printByteArrayEPhj+0x56>
    1546:	4a e0       	ldi	r20, 0x0A	; 10
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	f8 01       	movw	r30, r16
    154c:	60 81       	ld	r22, Z
    154e:	87 e8       	ldi	r24, 0x87	; 135
    1550:	94 e0       	ldi	r25, 0x04	; 4
    1552:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN5Print5printEhi>
    1556:	65 ef       	ldi	r22, 0xF5	; 245
    1558:	71 e0       	ldi	r23, 0x01	; 1
    155a:	87 e8       	ldi	r24, 0x87	; 135
    155c:	94 e0       	ldi	r25, 0x04	; 4
    155e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    1562:	21 96       	adiw	r28, 0x01	; 1
    1564:	0f 5f       	subi	r16, 0xFF	; 255
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	da cf       	rjmp	.-76     	; 0x151e <_ZN7Helpers14printByteArrayEPhj+0x1e>
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	08 95       	ret

0000157c <_ZN7Helpers15printSensorDataEP10SensorData>:
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
    1582:	6c ea       	ldi	r22, 0xAC	; 172
    1584:	72 e0       	ldi	r23, 0x02	; 2
    1586:	87 e8       	ldi	r24, 0x87	; 135
    1588:	94 e0       	ldi	r25, 0x04	; 4
    158a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    158e:	69 81       	ldd	r22, Y+1	; 0x01
    1590:	7a 81       	ldd	r23, Y+2	; 0x02
    1592:	4a e0       	ldi	r20, 0x0A	; 10
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	87 e8       	ldi	r24, 0x87	; 135
    1598:	94 e0       	ldi	r25, 0x04	; 4
    159a:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN5Print5printEji>
    159e:	68 ea       	ldi	r22, 0xA8	; 168
    15a0:	72 e0       	ldi	r23, 0x02	; 2
    15a2:	87 e8       	ldi	r24, 0x87	; 135
    15a4:	94 e0       	ldi	r25, 0x04	; 4
    15a6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    15aa:	62 ea       	ldi	r22, 0xA2	; 162
    15ac:	72 e0       	ldi	r23, 0x02	; 2
    15ae:	87 e8       	ldi	r24, 0x87	; 135
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    15b6:	6d 81       	ldd	r22, Y+5	; 0x05
    15b8:	7e 81       	ldd	r23, Y+6	; 0x06
    15ba:	4a e0       	ldi	r20, 0x0A	; 10
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	87 e8       	ldi	r24, 0x87	; 135
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN5Print5printEji>
    15c6:	6e e9       	ldi	r22, 0x9E	; 158
    15c8:	72 e0       	ldi	r23, 0x02	; 2
    15ca:	87 e8       	ldi	r24, 0x87	; 135
    15cc:	94 e0       	ldi	r25, 0x04	; 4
    15ce:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    15d2:	65 e9       	ldi	r22, 0x95	; 149
    15d4:	72 e0       	ldi	r23, 0x02	; 2
    15d6:	87 e8       	ldi	r24, 0x87	; 135
    15d8:	94 e0       	ldi	r25, 0x04	; 4
    15da:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    15de:	6b 81       	ldd	r22, Y+3	; 0x03
    15e0:	7c 81       	ldd	r23, Y+4	; 0x04
    15e2:	4a e0       	ldi	r20, 0x0A	; 10
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	87 e8       	ldi	r24, 0x87	; 135
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN5Print5printEji>
    15ee:	61 e9       	ldi	r22, 0x91	; 145
    15f0:	72 e0       	ldi	r23, 0x02	; 2
    15f2:	87 e8       	ldi	r24, 0x87	; 135
    15f4:	94 e0       	ldi	r25, 0x04	; 4
    15f6:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    15fa:	6b e8       	ldi	r22, 0x8B	; 139
    15fc:	72 e0       	ldi	r23, 0x02	; 2
    15fe:	87 e8       	ldi	r24, 0x87	; 135
    1600:	94 e0       	ldi	r25, 0x04	; 4
    1602:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	4a e0       	ldi	r20, 0x0A	; 10
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	87 e8       	ldi	r24, 0x87	; 135
    1610:	94 e0       	ldi	r25, 0x04	; 4
    1612:	0e 94 73 18 	call	0x30e6	; 0x30e6 <_ZN5Print7printlnEji>
    1616:	67 e8       	ldi	r22, 0x87	; 135
    1618:	72 e0       	ldi	r23, 0x02	; 2
    161a:	87 e8       	ldi	r24, 0x87	; 135
    161c:	94 e0       	ldi	r25, 0x04	; 4
    161e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1622:	60 e8       	ldi	r22, 0x80	; 128
    1624:	72 e0       	ldi	r23, 0x02	; 2
    1626:	87 e8       	ldi	r24, 0x87	; 135
    1628:	94 e0       	ldi	r25, 0x04	; 4
    162a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    162e:	4a e0       	ldi	r20, 0x0A	; 10
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	69 85       	ldd	r22, Y+9	; 0x09
    1634:	87 e8       	ldi	r24, 0x87	; 135
    1636:	94 e0       	ldi	r25, 0x04	; 4
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>

00001640 <_ZN7Helpers14base64_enc_lenEi>:
    1640:	9c 01       	movw	r18, r24
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	e3 e0       	ldi	r30, 0x03	; 3
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	c9 01       	movw	r24, r18
    164c:	bf 01       	movw	r22, r30
    164e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__divmodhi4>
    1652:	a9 01       	movw	r20, r18
    1654:	48 1b       	sub	r20, r24
    1656:	59 0b       	sbc	r21, r25
    1658:	ca 01       	movw	r24, r20
    165a:	bf 01       	movw	r22, r30
    165c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__divmodhi4>
    1660:	cb 01       	movw	r24, r22
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	08 95       	ret

0000166c <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    166c:	dc 01       	movw	r26, r24
    166e:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1670:	80 81       	ld	r24, Z
    1672:	86 95       	lsr	r24
    1674:	86 95       	lsr	r24
    1676:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1678:	80 81       	ld	r24, Z
    167a:	83 70       	andi	r24, 0x03	; 3
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	92 95       	swap	r25
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	20 e1       	ldi	r18, 0x10	; 16
    1684:	82 9f       	mul	r24, r18
    1686:	90 0d       	add	r25, r0
    1688:	11 24       	eor	r1, r1
    168a:	11 96       	adiw	r26, 0x01	; 1
    168c:	9c 93       	st	X, r25
    168e:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	9f 70       	andi	r25, 0x0F	; 15
    1694:	99 0f       	add	r25, r25
    1696:	99 0f       	add	r25, r25
    1698:	22 81       	ldd	r18, Z+2	; 0x02
    169a:	22 95       	swap	r18
    169c:	26 95       	lsr	r18
    169e:	26 95       	lsr	r18
    16a0:	23 70       	andi	r18, 0x03	; 3
    16a2:	92 0f       	add	r25, r18
    16a4:	12 96       	adiw	r26, 0x02	; 2
    16a6:	9c 93       	st	X, r25
    16a8:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	8f 73       	andi	r24, 0x3F	; 63
    16ae:	13 96       	adiw	r26, 0x03	; 3
    16b0:	8c 93       	st	X, r24
    16b2:	08 95       	ret

000016b4 <_ZN7Helpers13base64_encodeEPhS0_i>:
inline void a3_to_a4(uint8_t * a4, uint8_t * a3);
inline void a4_to_a3(uint8_t * a3, uint8_t * a4);
inline uint8_t b64_lookup(char c);

/* Note: Trailing 0s for strings shouldn't be included in the length */
int16_t Helpers::base64_encode(uint8_t *output, uint8_t *input, int16_t inputLen) {
    16b4:	6f 92       	push	r6
    16b6:	7f 92       	push	r7
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	27 97       	sbiw	r28, 0x07	; 7
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	6c 01       	movw	r12, r24
    16e2:	5b 01       	movw	r10, r22
    16e4:	3b 01       	movw	r6, r22
    16e6:	64 0e       	add	r6, r20
    16e8:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    16ea:	e1 2c       	mov	r14, r1
    16ec:	f1 2c       	mov	r15, r1
inline uint8_t b64_lookup(char c);

/* Note: Trailing 0s for strings shouldn't be included in the length */
int16_t Helpers::base64_encode(uint8_t *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    16f2:	4e 01       	movw	r8, r28
    16f4:	85 e0       	ldi	r24, 0x05	; 5
    16f6:	88 0e       	add	r8, r24
    16f8:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    16fa:	6a 14       	cp	r6, r10
    16fc:	7b 04       	cpc	r7, r11
    16fe:	49 f1       	breq	.+82     	; 0x1752 <_ZN7Helpers13base64_encodeEPhS0_i+0x9e>
		a3[i++] = *(input++);
    1700:	c8 01       	movw	r24, r16
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	f5 01       	movw	r30, r10
    1706:	21 91       	ld	r18, Z+
    1708:	5f 01       	movw	r10, r30
    170a:	f4 01       	movw	r30, r8
    170c:	e0 0f       	add	r30, r16
    170e:	f1 1f       	adc	r31, r17
    1710:	20 83       	st	Z, r18
		if(i == 3) {
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	11 f0       	breq	.+4      	; 0x171c <_ZN7Helpers13base64_encodeEPhS0_i+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1718:	8c 01       	movw	r16, r24
    171a:	ef cf       	rjmp	.-34     	; 0x16fa <_ZN7Helpers13base64_encodeEPhS0_i+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    171c:	b4 01       	movw	r22, r8
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	0e 94 36 0b 	call	0x166c	; 0x166c <_Z8a3_to_a4PhS_>
    1726:	de 01       	movw	r26, r28
    1728:	11 96       	adiw	r26, 0x01	; 1
    172a:	c6 01       	movw	r24, r12
    172c:	8e 0d       	add	r24, r14
    172e:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1730:	ed 91       	ld	r30, X+
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	e0 50       	subi	r30, 0x00	; 0
    1736:	fd 4f       	sbci	r31, 0xFD	; 253
    1738:	24 91       	lpm	r18, Z
    173a:	fc 01       	movw	r30, r24
    173c:	21 93       	st	Z+, r18
    173e:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1740:	a8 15       	cp	r26, r8
    1742:	b9 05       	cpc	r27, r9
    1744:	a9 f7       	brne	.-22     	; 0x1730 <_ZN7Helpers13base64_encodeEPhS0_i+0x7c>
    1746:	f4 e0       	ldi	r31, 0x04	; 4
    1748:	ef 0e       	add	r14, r31
    174a:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	e3 cf       	rjmp	.-58     	; 0x1718 <_ZN7Helpers13base64_encodeEPhS0_i+0x64>
		}
	}

	if(i) {
    1752:	01 15       	cp	r16, r1
    1754:	11 05       	cpc	r17, r1
    1756:	09 f4       	brne	.+2      	; 0x175a <_ZN7Helpers13base64_encodeEPhS0_i+0xa6>
    1758:	3c c0       	rjmp	.+120    	; 0x17d2 <_ZN7Helpers13base64_encodeEPhS0_i+0x11e>
    175a:	be 01       	movw	r22, r28
    175c:	6b 5f       	subi	r22, 0xFB	; 251
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	fb 01       	movw	r30, r22
    1762:	e0 0f       	add	r30, r16
    1764:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1766:	cf 01       	movw	r24, r30
    1768:	86 1b       	sub	r24, r22
    176a:	97 0b       	sbc	r25, r23
    176c:	03 97       	sbiw	r24, 0x03	; 3
    176e:	14 f4       	brge	.+4      	; 0x1774 <_ZN7Helpers13base64_encodeEPhS0_i+0xc0>
			a3[j] = '\0';
    1770:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1772:	f9 cf       	rjmp	.-14     	; 0x1766 <_ZN7Helpers13base64_encodeEPhS0_i+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1774:	ce 01       	movw	r24, r28
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	5c 01       	movw	r10, r24
    177a:	0e 94 36 0b 	call	0x166c	; 0x166c <_Z8a3_to_a4PhS_>
    177e:	c6 01       	movw	r24, r12
    1780:	8e 0d       	add	r24, r14
    1782:	9f 1d       	adc	r25, r15
    1784:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1786:	ed 91       	ld	r30, X+
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	e0 50       	subi	r30, 0x00	; 0
    178c:	fd 4f       	sbci	r31, 0xFD	; 253
    178e:	24 91       	lpm	r18, Z
    1790:	fc 01       	movw	r30, r24
    1792:	21 93       	st	Z+, r18
    1794:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1796:	9d 01       	movw	r18, r26
    1798:	2a 19       	sub	r18, r10
    179a:	3b 09       	sbc	r19, r11
    179c:	02 17       	cp	r16, r18
    179e:	13 07       	cpc	r17, r19
    17a0:	94 f7       	brge	.-28     	; 0x1786 <_ZN7Helpers13base64_encodeEPhS0_i+0xd2>
    17a2:	ff ef       	ldi	r31, 0xFF	; 255
    17a4:	ef 1a       	sub	r14, r31
    17a6:	ff 0a       	sbc	r15, r31
    17a8:	e0 0e       	add	r14, r16
    17aa:	f1 1e       	adc	r15, r17
    17ac:	f6 01       	movw	r30, r12
    17ae:	ee 0d       	add	r30, r14
    17b0:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    17b2:	0c 19       	sub	r16, r12
    17b4:	1d 09       	sbc	r17, r13
    17b6:	0e 19       	sub	r16, r14
    17b8:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    17ba:	8d e3       	ldi	r24, 0x3D	; 61
    17bc:	7f 01       	movw	r14, r30
    17be:	ec 18       	sub	r14, r12
    17c0:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    17c2:	98 01       	movw	r18, r16
    17c4:	2e 0f       	add	r18, r30
    17c6:	3f 1f       	adc	r19, r31
    17c8:	23 30       	cpi	r18, 0x03	; 3
    17ca:	31 05       	cpc	r19, r1
    17cc:	14 f4       	brge	.+4      	; 0x17d2 <_ZN7Helpers13base64_encodeEPhS0_i+0x11e>
			output[encLen++] = '=';
    17ce:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    17d0:	f5 cf       	rjmp	.-22     	; 0x17bc <_ZN7Helpers13base64_encodeEPhS0_i+0x108>
			output[encLen++] = '=';
		}
	}
	output[encLen] = '\0';
    17d2:	f6 01       	movw	r30, r12
    17d4:	ee 0d       	add	r30, r14
    17d6:	ff 1d       	adc	r31, r15
    17d8:	10 82       	st	Z, r1
	return encLen;
}
    17da:	c7 01       	movw	r24, r14
    17dc:	27 96       	adiw	r28, 0x07	; 7
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	8f 90       	pop	r8
    1800:	7f 90       	pop	r7
    1802:	6f 90       	pop	r6
    1804:	08 95       	ret

00001806 <_Z8a4_to_a3PhS_>:
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
	a4[3] = (a3[2] & 0x3f);
}

inline void a4_to_a3(uint8_t * a3, uint8_t * a4) {
    1806:	dc 01       	movw	r26, r24
    1808:	fb 01       	movw	r30, r22
	a3[0] = (a4[0] << 2) + ((a4[1] & 0x30) >> 4);
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	90 73       	andi	r25, 0x30	; 48
    180e:	92 95       	swap	r25
    1810:	9f 70       	andi	r25, 0x0F	; 15
    1812:	20 81       	ld	r18, Z
    1814:	22 0f       	add	r18, r18
    1816:	22 0f       	add	r18, r18
    1818:	92 0f       	add	r25, r18
    181a:	9c 93       	st	X, r25
	a3[1] = ((a4[1] & 0xf) << 4) + ((a4[2] & 0x3c) >> 2);
    181c:	92 81       	ldd	r25, Z+2	; 0x02
    181e:	9c 73       	andi	r25, 0x3C	; 60
    1820:	96 95       	lsr	r25
    1822:	96 95       	lsr	r25
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	20 e1       	ldi	r18, 0x10	; 16
    1828:	82 9f       	mul	r24, r18
    182a:	90 0d       	add	r25, r0
    182c:	11 24       	eor	r1, r1
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	9c 93       	st	X, r25
    1832:	11 97       	sbiw	r26, 0x01	; 1
	a3[2] = ((a4[2] & 0x3) << 6) + a4[3];
    1834:	92 81       	ldd	r25, Z+2	; 0x02
    1836:	83 81       	ldd	r24, Z+3	; 0x03
    1838:	20 e4       	ldi	r18, 0x40	; 64
    183a:	92 9f       	mul	r25, r18
    183c:	80 0d       	add	r24, r0
    183e:	11 24       	eor	r1, r1
    1840:	12 96       	adiw	r26, 0x02	; 2
    1842:	8c 93       	st	X, r24
    1844:	08 95       	ret

00001846 <_Z10b64_lookupc>:
}

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
    1846:	9f eb       	ldi	r25, 0xBF	; 191
    1848:	98 0f       	add	r25, r24
    184a:	9a 31       	cpi	r25, 0x1A	; 26
    184c:	90 f0       	brcs	.+36     	; 0x1872 <_Z10b64_lookupc+0x2c>
	if(c >='a' && c <='z') return c - 71;
    184e:	9f e9       	ldi	r25, 0x9F	; 159
    1850:	98 0f       	add	r25, r24
    1852:	9a 31       	cpi	r25, 0x1A	; 26
    1854:	10 f4       	brcc	.+4      	; 0x185a <_Z10b64_lookupc+0x14>
    1856:	87 54       	subi	r24, 0x47	; 71
    1858:	08 95       	ret
	if(c >='0' && c <='9') return c + 4;
    185a:	90 ed       	ldi	r25, 0xD0	; 208
    185c:	98 0f       	add	r25, r24
    185e:	9a 30       	cpi	r25, 0x0A	; 10
    1860:	10 f4       	brcc	.+4      	; 0x1866 <_Z10b64_lookupc+0x20>
    1862:	8c 5f       	subi	r24, 0xFC	; 252
    1864:	08 95       	ret
	if(c == '+') return 62;
    1866:	8b 32       	cpi	r24, 0x2B	; 43
    1868:	31 f0       	breq	.+12     	; 0x1876 <_Z10b64_lookupc+0x30>
	if(c == '/') return 63;
    186a:	8f 32       	cpi	r24, 0x2F	; 47
    186c:	31 f0       	breq	.+12     	; 0x187a <_Z10b64_lookupc+0x34>
	return -1;
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	08 95       	ret
    1872:	89 2f       	mov	r24, r25
    1874:	08 95       	ret

inline uint8_t b64_lookup(char c) {
	if(c >='A' && c <='Z') return c - 'A';
	if(c >='a' && c <='z') return c - 71;
	if(c >='0' && c <='9') return c + 4;
	if(c == '+') return 62;
    1876:	8e e3       	ldi	r24, 0x3E	; 62
    1878:	08 95       	ret
	if(c == '/') return 63;
    187a:	8f e3       	ldi	r24, 0x3F	; 63
	return -1;
}
    187c:	08 95       	ret

0000187e <_ZN7Helpers13base64_decodeEPhS0_i>:
	output[encLen] = '\0';
	return encLen;
}

/* Note: Trailing 0s for strings shouldn't be included in the length */
int16_t Helpers::base64_decode(uint8_t * output, uint8_t * input, int16_t inputLen) {
    187e:	4f 92       	push	r4
    1880:	5f 92       	push	r5
    1882:	6f 92       	push	r6
    1884:	7f 92       	push	r7
    1886:	8f 92       	push	r8
    1888:	9f 92       	push	r9
    188a:	af 92       	push	r10
    188c:	bf 92       	push	r11
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	27 97       	sbiw	r28, 0x07	; 7
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	3c 01       	movw	r6, r24
    18b0:	7b 01       	movw	r14, r22
    18b2:	2b 01       	movw	r4, r22
    18b4:	44 0e       	add	r4, r20
    18b6:	55 1e       	adc	r5, r21
	int16_t i = 0, j = 0;
	int16_t decLen = 0;
    18b8:	c1 2c       	mov	r12, r1
    18ba:	d1 2c       	mov	r13, r1
	return encLen;
}

/* Note: Trailing 0s for strings shouldn't be included in the length */
int16_t Helpers::base64_decode(uint8_t * output, uint8_t * input, int16_t inputLen) {
	int16_t i = 0, j = 0;
    18bc:	00 e0       	ldi	r16, 0x00	; 0
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	5e 01       	movw	r10, r28
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	a8 0e       	add	r10, r24
    18c6:	b1 1c       	adc	r11, r1
    18c8:	4e 01       	movw	r8, r28
    18ca:	98 e0       	ldi	r25, 0x08	; 8
    18cc:	89 0e       	add	r8, r25
    18ce:	91 1c       	adc	r9, r1
	int16_t decLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];


	while (inputLen--) {
    18d0:	e4 14       	cp	r14, r4
    18d2:	f5 04       	cpc	r15, r5
    18d4:	a9 f1       	breq	.+106    	; 0x1940 <_ZN7Helpers13base64_decodeEPhS0_i+0xc2>
		if(*input == '=') {
    18d6:	f7 01       	movw	r30, r14
    18d8:	21 91       	ld	r18, Z+
    18da:	7f 01       	movw	r14, r30
    18dc:	2d 33       	cpi	r18, 0x3D	; 61
    18de:	81 f1       	breq	.+96     	; 0x1940 <_ZN7Helpers13base64_decodeEPhS0_i+0xc2>
			break;
		}

		a4[i++] = *(input++);
    18e0:	c8 01       	movw	r24, r16
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	e1 e0       	ldi	r30, 0x01	; 1
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	ec 0f       	add	r30, r28
    18ea:	fd 1f       	adc	r31, r29
    18ec:	e0 0f       	add	r30, r16
    18ee:	f1 1f       	adc	r31, r17
    18f0:	20 83       	st	Z, r18
		if (i == 4) {
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	91 05       	cpc	r25, r1
    18f6:	11 f0       	breq	.+4      	; 0x18fc <_ZN7Helpers13base64_decodeEPhS0_i+0x7e>
			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
			}
			i = 0;
    18f8:	8c 01       	movw	r16, r24
    18fa:	ea cf       	rjmp	.-44     	; 0x18d0 <_ZN7Helpers13base64_decodeEPhS0_i+0x52>
    18fc:	8e 01       	movw	r16, r28
    18fe:	0f 5f       	subi	r16, 0xFF	; 255
    1900:	1f 4f       	sbci	r17, 0xFF	; 255
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
				a4[i] = b64_lookup(a4[i]);
    1902:	f8 01       	movw	r30, r16
    1904:	80 81       	ld	r24, Z
    1906:	0e 94 23 0c 	call	0x1846	; 0x1846 <_Z10b64_lookupc>
    190a:	f8 01       	movw	r30, r16
    190c:	81 93       	st	Z+, r24
    190e:	8f 01       	movw	r16, r30
			break;
		}

		a4[i++] = *(input++);
		if (i == 4) {
			for (i = 0; i <4; i++) {
    1910:	ae 16       	cp	r10, r30
    1912:	bf 06       	cpc	r11, r31
    1914:	b1 f7       	brne	.-20     	; 0x1902 <_ZN7Helpers13base64_decodeEPhS0_i+0x84>
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);
    1916:	be 01       	movw	r22, r28
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	c5 01       	movw	r24, r10
    191e:	0e 94 03 0c 	call	0x1806	; 0x1806 <_Z8a4_to_a3PhS_>
    1922:	f5 01       	movw	r30, r10
    1924:	d3 01       	movw	r26, r6
    1926:	ac 0d       	add	r26, r12
    1928:	bd 1d       	adc	r27, r13

			for (i = 0; i < 3; i++) {
				output[decLen++] = a3[i];
    192a:	81 91       	ld	r24, Z+
    192c:	8d 93       	st	X+, r24
				a4[i] = b64_lookup(a4[i]);
			}

			a4_to_a3(a3,a4);

			for (i = 0; i < 3; i++) {
    192e:	e8 15       	cp	r30, r8
    1930:	f9 05       	cpc	r31, r9
    1932:	d9 f7       	brne	.-10     	; 0x192a <_ZN7Helpers13base64_decodeEPhS0_i+0xac>
    1934:	f3 e0       	ldi	r31, 0x03	; 3
    1936:	cf 0e       	add	r12, r31
    1938:	d1 1c       	adc	r13, r1
				output[decLen++] = a3[i];
			}
			i = 0;
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	dc cf       	rjmp	.-72     	; 0x18f8 <_ZN7Helpers13base64_decodeEPhS0_i+0x7a>
		}
	}

	if (i) {
    1940:	01 15       	cp	r16, r1
    1942:	11 05       	cpc	r17, r1
    1944:	99 f1       	breq	.+102    	; 0x19ac <_ZN7Helpers13base64_decodeEPhS0_i+0x12e>
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	5c 01       	movw	r10, r24
    194c:	fc 01       	movw	r30, r24
    194e:	e0 0f       	add	r30, r16
    1950:	f1 1f       	adc	r31, r17
    1952:	75 01       	movw	r14, r10
		for (j = i; j < 4; j++) {
    1954:	cf 01       	movw	r24, r30
    1956:	8a 19       	sub	r24, r10
    1958:	9b 09       	sbc	r25, r11
    195a:	04 97       	sbiw	r24, 0x04	; 4
    195c:	14 f4       	brge	.+4      	; 0x1962 <_ZN7Helpers13base64_decodeEPhS0_i+0xe4>
			a4[j] = '\0';
    195e:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if (i) {
		for (j = i; j < 4; j++) {
    1960:	f8 cf       	rjmp	.-16     	; 0x1952 <_ZN7Helpers13base64_decodeEPhS0_i+0xd4>
    1962:	4e 01       	movw	r8, r28
    1964:	95 e0       	ldi	r25, 0x05	; 5
    1966:	89 0e       	add	r8, r25
    1968:	91 1c       	adc	r9, r1
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
			a4[j] = b64_lookup(a4[j]);
    196a:	f7 01       	movw	r30, r14
    196c:	80 81       	ld	r24, Z
    196e:	0e 94 23 0c 	call	0x1846	; 0x1846 <_Z10b64_lookupc>
    1972:	f7 01       	movw	r30, r14
    1974:	81 93       	st	Z+, r24
    1976:	7f 01       	movw	r14, r30
	if (i) {
		for (j = i; j < 4; j++) {
			a4[j] = '\0';
		}

		for (j = 0; j <4; j++) {
    1978:	e8 15       	cp	r30, r8
    197a:	f9 05       	cpc	r31, r9
    197c:	b1 f7       	brne	.-20     	; 0x196a <_ZN7Helpers13base64_decodeEPhS0_i+0xec>
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);
    197e:	b5 01       	movw	r22, r10
    1980:	cf 01       	movw	r24, r30
    1982:	0e 94 03 0c 	call	0x1806	; 0x1806 <_Z8a4_to_a3PhS_>
    1986:	f7 01       	movw	r30, r14
    1988:	96 01       	movw	r18, r12
    198a:	d3 01       	movw	r26, r6
    198c:	ac 0d       	add	r26, r12
    198e:	bd 1d       	adc	r27, r13

		for (j = 0; j < i - 1; j++) {
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	01 50       	subi	r16, 0x01	; 1
    1996:	11 09       	sbc	r17, r1
    1998:	6c 01       	movw	r12, r24
    199a:	c2 0e       	add	r12, r18
    199c:	d3 1e       	adc	r13, r19
    199e:	80 17       	cp	r24, r16
    19a0:	91 07       	cpc	r25, r17
    19a2:	24 f4       	brge	.+8      	; 0x19ac <_ZN7Helpers13base64_decodeEPhS0_i+0x12e>
			output[decLen++] = a3[j];
    19a4:	41 91       	ld	r20, Z+
    19a6:	4d 93       	st	X+, r20
			a4[j] = b64_lookup(a4[j]);
		}

		a4_to_a3(a3,a4);

		for (j = 0; j < i - 1; j++) {
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	f6 cf       	rjmp	.-20     	; 0x1998 <_ZN7Helpers13base64_decodeEPhS0_i+0x11a>
			output[decLen++] = a3[j];
		}
	}
	output[decLen] = '\0';
    19ac:	f3 01       	movw	r30, r6
    19ae:	ec 0d       	add	r30, r12
    19b0:	fd 1d       	adc	r31, r13
    19b2:	10 82       	st	Z, r1
	return decLen;
}
    19b4:	c6 01       	movw	r24, r12
    19b6:	27 96       	adiw	r28, 0x07	; 7
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	bf 90       	pop	r11
    19d4:	af 90       	pop	r10
    19d6:	9f 90       	pop	r9
    19d8:	8f 90       	pop	r8
    19da:	7f 90       	pop	r7
    19dc:	6f 90       	pop	r6
    19de:	5f 90       	pop	r5
    19e0:	4f 90       	pop	r4
    19e2:	08 95       	ret

000019e4 <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	2c 97       	sbiw	r28, 0x0c	; 12
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	08 2f       	mov	r16, r24
    19fe:	69 ef       	ldi	r22, 0xF9	; 249
    1a00:	73 e0       	ldi	r23, 0x03	; 3
    1a02:	87 e8       	ldi	r24, 0x87	; 135
    1a04:	94 e0       	ldi	r25, 0x04	; 4
    1a06:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1a0a:	42 e0       	ldi	r20, 0x02	; 2
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
    1a0e:	84 ea       	ldi	r24, 0xA4	; 164
    1a10:	92 e0       	ldi	r25, 0x02	; 2
    1a12:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN13Adafruit_FONA5beginEhh>
    1a16:	18 2f       	mov	r17, r24
    1a18:	8d ef       	ldi	r24, 0xFD	; 253
    1a1a:	81 0f       	add	r24, r17
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	b8 f4       	brcc	.+46     	; 0x1a4e <_Z21ensureFonaInitialisedb+0x6a>
    1a20:	6e ed       	ldi	r22, 0xDE	; 222
    1a22:	73 e0       	ldi	r23, 0x03	; 3
    1a24:	87 e8       	ldi	r24, 0x87	; 135
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1a2c:	66 e4       	ldi	r22, 0x46	; 70
    1a2e:	71 e0       	ldi	r23, 0x01	; 1
    1a30:	87 e8       	ldi	r24, 0x87	; 135
    1a32:	94 e0       	ldi	r25, 0x04	; 4
    1a34:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    1a38:	61 2f       	mov	r22, r17
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	4a e0       	ldi	r20, 0x0A	; 10
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	87 e8       	ldi	r24, 0x87	; 135
    1a42:	94 e0       	ldi	r25, 0x04	; 4
    1a44:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	4d c0       	rjmp	.+154    	; 0x1ae8 <_Z21ensureFonaInitialisedb+0x104>
    1a4e:	8c e9       	ldi	r24, 0x9C	; 156
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN12RmMemManager11getModuleIdEv>
    1a56:	68 2f       	mov	r22, r24
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	68 5b       	subi	r22, 0xB8	; 184
    1a5c:	7e 4f       	sbci	r23, 0xFE	; 254
    1a5e:	ce 01       	movw	r24, r28
    1a60:	07 96       	adiw	r24, 0x07	; 7
    1a62:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <_ZN6StringC1EPKc>
    1a66:	be 01       	movw	r22, r28
    1a68:	69 5f       	subi	r22, 0xF9	; 249
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 4d 1b 	call	0x369a	; 0x369a <_ZN6StringC1ERKS_>
    1a74:	be 01       	movw	r22, r28
    1a76:	6f 5f       	subi	r22, 0xFF	; 255
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	84 ea       	ldi	r24, 0xA4	; 164
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN13Adafruit_FONA12setUserAgentE6String>
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN6StringD1Ev>
    1a8a:	01 11       	cpse	r16, r1
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <_Z21ensureFonaInitialisedb+0xb0>
    1a8e:	04 ea       	ldi	r16, 0xA4	; 164
    1a90:	12 e0       	ldi	r17, 0x02	; 2
    1a92:	26 c0       	rjmp	.+76     	; 0x1ae0 <_Z21ensureFonaInitialisedb+0xfc>
    1a94:	69 ec       	ldi	r22, 0xC9	; 201
    1a96:	73 e0       	ldi	r23, 0x03	; 3
    1a98:	87 e8       	ldi	r24, 0x87	; 135
    1a9a:	94 e0       	ldi	r25, 0x04	; 4
    1a9c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	84 ea       	ldi	r24, 0xA4	; 164
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN13Adafruit_FONA10enableGPRSEb>
    1aaa:	18 2f       	mov	r17, r24
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	81 0f       	add	r24, r17
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	68 f3       	brcs	.-38     	; 0x1a8e <_Z21ensureFonaInitialisedb+0xaa>
    1ab4:	6e ea       	ldi	r22, 0xAE	; 174
    1ab6:	73 e0       	ldi	r23, 0x03	; 3
    1ab8:	87 e8       	ldi	r24, 0x87	; 135
    1aba:	94 e0       	ldi	r25, 0x04	; 4
    1abc:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1ac0:	66 e4       	ldi	r22, 0x46	; 70
    1ac2:	71 e0       	ldi	r23, 0x01	; 1
    1ac4:	87 e8       	ldi	r24, 0x87	; 135
    1ac6:	94 e0       	ldi	r25, 0x04	; 4
    1ac8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    1acc:	61 2f       	mov	r22, r17
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	4a e0       	ldi	r20, 0x0A	; 10
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	87 e8       	ldi	r24, 0x87	; 135
    1ad6:	94 e0       	ldi	r25, 0x04	; 4
    1ad8:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>
    1adc:	00 e0       	ldi	r16, 0x00	; 0
    1ade:	10 e0       	ldi	r17, 0x00	; 0
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	07 96       	adiw	r24, 0x07	; 7
    1ae4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <_ZN6StringD1Ev>
    1ae8:	c8 01       	movw	r24, r16
    1aea:	2c 96       	adiw	r28, 0x0c	; 12
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <_Z15switchOffSystemv>:
    1b00:	66 e5       	ldi	r22, 0x56	; 86
    1b02:	71 e0       	ldi	r23, 0x01	; 1
    1b04:	87 e8       	ldi	r24, 0x87	; 135
    1b06:	94 e0       	ldi	r25, 0x04	; 4
    1b08:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	85 e0       	ldi	r24, 0x05	; 5
    1b10:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
    1b14:	68 eb       	ldi	r22, 0xB8	; 184
    1b16:	7b e0       	ldi	r23, 0x0B	; 11
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <delay>

00001b20 <setup>:
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	85 e0       	ldi	r24, 0x05	; 5
    1b24:	0e 94 12 1a 	call	0x3424	; 0x3424 <pinMode>
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
    1b30:	68 eb       	ldi	r22, 0xB8	; 184
    1b32:	7b e0       	ldi	r23, 0x0B	; 11
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	0e 94 12 1a 	call	0x3424	; 0x3424 <pinMode>
    1b44:	26 e0       	ldi	r18, 0x06	; 6
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	55 e2       	ldi	r21, 0x25	; 37
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	87 e8       	ldi	r24, 0x87	; 135
    1b50:	94 e0       	ldi	r25, 0x04	; 4
    1b52:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <_ZN14HardwareSerial5beginEmh>
    1b56:	6e e0       	ldi	r22, 0x0E	; 14
    1b58:	74 e0       	ldi	r23, 0x04	; 4
    1b5a:	87 e8       	ldi	r24, 0x87	; 135
    1b5c:	94 e0       	ldi	r25, 0x04	; 4
    1b5e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1b62:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_ZN13ExtendedTests20runExtendedTypesTestEv>
    1b66:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <_Z15switchOffSystemv>

00001b6a <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	2a 97       	sbiw	r28, 0x0a	; 10
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    1b7e:	6b e9       	ldi	r22, 0x9B	; 155
    1b80:	73 e0       	ldi	r23, 0x03	; 3
    1b82:	87 e8       	ldi	r24, 0x87	; 135
    1b84:	94 e0       	ldi	r25, 0x04	; 4
    1b86:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	1b 82       	std	Y+3, r1	; 0x03
    1b90:	1a 82       	std	Y+2, r1	; 0x02
    1b92:	1d 82       	std	Y+5, r1	; 0x05
    1b94:	1c 82       	std	Y+4, r1	; 0x04
    1b96:	1f 82       	std	Y+7, r1	; 0x07
    1b98:	1e 82       	std	Y+6, r1	; 0x06
    1b9a:	19 86       	std	Y+9, r1	; 0x09
    1b9c:	18 86       	std	Y+8, r1	; 0x08
    1b9e:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    1ba0:	be 01       	movw	r22, r28
    1ba2:	6f 5f       	subi	r22, 0xFF	; 255
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8a e9       	ldi	r24, 0x9A	; 154
    1ba8:	92 e0       	ldi	r25, 0x02	; 2
    1baa:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	2a 96       	adiw	r28, 0x0a	; 10
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <_Z8sendDatav+0x6>
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <_Z8sendDatav+0x8>
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
	
	boolean doInit = (_sendDataLoopCount == 0);
    1bce:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	98 0f       	add	r25, r24
    1bd6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <_sendDataLoopCount>
	
	if (doInit) {
    1bda:	81 11       	cpse	r24, r1
    1bdc:	15 c0       	rjmp	.+42     	; 0x1c08 <_Z8sendDatav+0x46>
	
		RM_LOGLN(F("Initialising module to send data"));
    1bde:	6a e7       	ldi	r22, 0x7A	; 122
    1be0:	73 e0       	ldi	r23, 0x03	; 3
    1be2:	87 e8       	ldi	r24, 0x87	; 135
    1be4:	94 e0       	ldi	r25, 0x04	; 4
    1be6:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_Z21ensureFonaInitialisedb>
    1bf0:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <_sendDataFona+0x1>
    1bf4:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <_sendDataFona>
	
		if (_sendDataFona == NULL)
    1bf8:	89 2b       	or	r24, r25
    1bfa:	f9 f0       	breq	.+62     	; 0x1c3a <_Z8sendDatav+0x78>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    1bfc:	6b e4       	ldi	r22, 0x4B	; 75
    1bfe:	73 e0       	ldi	r23, 0x03	; 3
    1c00:	87 e8       	ldi	r24, 0x87	; 135
    1c02:	94 e0       	ldi	r25, 0x04	; 4
    1c04:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    1c08:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <_sendDataLoopCount>
    1c0c:	8c 33       	cpi	r24, 0x3C	; 60
    1c0e:	b9 f4       	brne	.+46     	; 0x1c3e <_Z8sendDatav+0x7c>
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = _sendDataFona->getRSSI();
    1c10:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <_sendDataFona>
    1c14:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <_sendDataFona+0x1>
    1c18:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN13Adafruit_FONA7getRSSIEv>
    1c1c:	69 83       	std	Y+1, r22	; 0x01
    1c1e:	7a 83       	std	Y+2, r23	; 0x02
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	9c 83       	std	Y+4, r25	; 0x04
		Helpers::printRSSI(&rssi);
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
		//sd->temperature = 43;
		
		 
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    1c2c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1c30:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <_sendDataFona+0x1>
    1c34:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <_sendDataFona>
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <_Z8sendDatav+0x7c>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <_Z8sendDatav+0x7e>
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1c4e:	68 ee       	ldi	r22, 0xE8	; 232
    1c50:	73 e0       	ldi	r23, 0x03	; 3
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 55 19 	call	0x32aa	; 0x32aa <delay>
	++_timerCounter;
    1c5a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
    1c5e:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <__data_end+0x1>
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <__data_end+0x1>
    1c68:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    1c6c:	61 e4       	ldi	r22, 0x41	; 65
    1c6e:	73 e0       	ldi	r23, 0x03	; 3
    1c70:	87 e8       	ldi	r24, 0x87	; 135
    1c72:	94 e0       	ldi	r25, 0x04	; 4
    1c74:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    1c78:	66 e4       	ldi	r22, 0x46	; 70
    1c7a:	71 e0       	ldi	r23, 0x01	; 1
    1c7c:	87 e8       	ldi	r24, 0x87	; 135
    1c7e:	94 e0       	ldi	r25, 0x04	; 4
    1c80:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    1c84:	4a e0       	ldi	r20, 0x0A	; 10
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	60 91 99 02 	lds	r22, 0x0299	; 0x800299 <_behaviour>
    1c8c:	87 e8       	ldi	r24, 0x87	; 135
    1c8e:	94 e0       	ldi	r25, 0x04	; 4
    1c90:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    1c94:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1c98:	80 ff       	sbrs	r24, 0
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <loop+0x60>
		
		if (takeReadings())
    1c9c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_Z12takeReadingsv>
    1ca0:	88 23       	and	r24, r24
    1ca2:	29 f0       	breq	.+10     	; 0x1cae <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    1ca4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1ca8:	8e 7f       	andi	r24, 0xFE	; 254
    1caa:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    1cae:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1cb2:	81 ff       	sbrs	r24, 1
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <loop+0x7a>
		
		if (sendData())
    1cb6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z8sendDatav>
    1cba:	88 23       	and	r24, r24
    1cbc:	29 f0       	breq	.+10     	; 0x1cc8 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    1cbe:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1cc2:	8d 7f       	andi	r24, 0xFD	; 253
    1cc4:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    1cc8:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_behaviour>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <loop+0x86>
		
		switchOffSystem();
    1cd0:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <_Z15switchOffSystemv>
    1cd4:	08 95       	ret

00001cd6 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	64 e0       	ldi	r22, 0x04	; 4
    1cda:	84 ea       	ldi	r24, 0xA4	; 164
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	8c e9       	ldi	r24, 0x9C	; 156
    1ce6:	92 e0       	ldi	r25, 0x02	; 2
    1ce8:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	8a e9       	ldi	r24, 0x9A	; 154
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <_ZN13SensorManagerC1Eb>

00001cf6 <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    1cf6:	8a e3       	ldi	r24, 0x3A	; 58
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__fona+0x1>
    1cfe:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__fona>
    1d02:	89 eb       	ldi	r24, 0xB9	; 185
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <_ZN6StringD1Ev>

00001d0a <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	ed 91       	ld	r30, X+
    1d0e:	fc 91       	ld	r31, X
    1d10:	01 90       	ld	r0, Z+
    1d12:	f0 81       	ld	r31, Z
    1d14:	e0 2d       	mov	r30, r0
    1d16:	09 94       	ijmp

00001d18 <_ZN12RmMemManagerC1Eb>:
    1d18:	fc 01       	movw	r30, r24
    1d1a:	11 82       	std	Z+1, r1	; 0x01
    1d1c:	12 82       	std	Z+2, r1	; 0x02
    1d1e:	13 82       	std	Z+3, r1	; 0x03
    1d20:	14 82       	std	Z+4, r1	; 0x04
    1d22:	80 e8       	ldi	r24, 0x80	; 128
    1d24:	85 83       	std	Z+5, r24	; 0x05
    1d26:	86 83       	std	Z+6, r24	; 0x06
    1d28:	17 82       	std	Z+7, r1	; 0x07
    1d2a:	60 83       	st	Z, r22
    1d2c:	61 11       	cpse	r22, r1
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <_ZN12RmMemManagerC1Eb+0x20>
    1d30:	81 e3       	ldi	r24, 0x31	; 49
    1d32:	94 e0       	ldi	r25, 0x04	; 4
    1d34:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <_ZN7TwoWire5beginEv>
    1d38:	08 95       	ret

00001d3a <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	eb 01       	movw	r28, r22
    1d48:	7b 01       	movw	r14, r22
    1d4a:	e4 0e       	add	r14, r20
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1d50:	ce 15       	cp	r28, r14
    1d52:	df 05       	cpc	r29, r15
    1d54:	71 f1       	breq	.+92     	; 0x1db2 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    1d56:	60 e5       	ldi	r22, 0x50	; 80
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	81 e3       	ldi	r24, 0x31	; 49
    1d5c:	94 e0       	ldi	r25, 0x04	; 4
    1d5e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    1d62:	61 2f       	mov	r22, r17
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	81 e3       	ldi	r24, 0x31	; 49
    1d68:	94 e0       	ldi	r25, 0x04	; 4
    1d6a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    1d6e:	b8 01       	movw	r22, r16
    1d70:	77 27       	eor	r23, r23
    1d72:	81 e3       	ldi	r24, 0x31	; 49
    1d74:	94 e0       	ldi	r25, 0x04	; 4
    1d76:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1d7a:	81 e3       	ldi	r24, 0x31	; 49
    1d7c:	94 e0       	ldi	r25, 0x04	; 4
    1d7e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	60 e5       	ldi	r22, 0x50	; 80
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	81 e3       	ldi	r24, 0x31	; 49
    1d8c:	94 e0       	ldi	r25, 0x04	; 4
    1d8e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    1d92:	81 e3       	ldi	r24, 0x31	; 49
    1d94:	94 e0       	ldi	r25, 0x04	; 4
    1d96:	0e 94 90 11 	call	0x2320	; 0x2320 <_ZN7TwoWire9availableEv>
    1d9a:	89 2b       	or	r24, r25
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    1d9e:	81 e3       	ldi	r24, 0x31	; 49
    1da0:	94 e0       	ldi	r25, 0x04	; 4
    1da2:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN7TwoWire4readEv>
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    1daa:	89 93       	st	Y+, r24
    1dac:	0f 5f       	subi	r16, 0xFF	; 255
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    1db0:	cf cf       	rjmp	.-98     	; 0x1d50 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	08 95       	ret

00001dc0 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	1f 92       	push	r1
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	be 01       	movw	r22, r28
    1dd0:	6f 5f       	subi	r22, 0xFF	; 255
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z12internalReadjPhh>
	return value;
}
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_ZN12RmMemManager18getUCharFromMemoryEj>

00001dea <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    1dea:	fc 01       	movw	r30, r24
    1dec:	60 83       	st	Z, r22
    1dee:	08 95       	ret

00001df0 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1df0:	fc 01       	movw	r30, r24
    1df2:	80 81       	ld	r24, Z
    1df4:	81 11       	cpse	r24, r1
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    1df8:	86 2f       	mov	r24, r22
    1dfa:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	08 95       	ret

00001e04 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    1e04:	fc 01       	movw	r30, r24
    1e06:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    1e08:	81 81       	ldd	r24, Z+1	; 0x01
    1e0a:	8f 5f       	subi	r24, 0xFF	; 255
    1e0c:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	12 96       	adiw	r26, 0x02	; 2
    1e12:	9c 93       	st	X, r25
    1e14:	8e 93       	st	-X, r24
    1e16:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    1e18:	81 81       	ldd	r24, Z+1	; 0x01
    1e1a:	2a e0       	ldi	r18, 0x0A	; 10
    1e1c:	82 9f       	mul	r24, r18
    1e1e:	c0 01       	movw	r24, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	16 96       	adiw	r26, 0x06	; 6
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
    1e28:	15 97       	sbiw	r26, 0x05	; 5
	ret->current = __mockDataCounter%7;
    1e2a:	81 81       	ldd	r24, Z+1	; 0x01
    1e2c:	67 e0       	ldi	r22, 0x07	; 7
    1e2e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__udivmodqi4>
    1e32:	89 2f       	mov	r24, r25
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	14 96       	adiw	r26, 0x04	; 4
    1e38:	9c 93       	st	X, r25
    1e3a:	8e 93       	st	-X, r24
    1e3c:	13 97       	sbiw	r26, 0x03	; 3
	ret->temperature = __mockDataCounter*100;
    1e3e:	81 81       	ldd	r24, Z+1	; 0x01
    1e40:	24 e6       	ldi	r18, 0x64	; 100
    1e42:	82 9f       	mul	r24, r18
    1e44:	c0 01       	movw	r24, r0
    1e46:	11 24       	eor	r1, r1
    1e48:	18 96       	adiw	r26, 0x08	; 8
    1e4a:	9c 93       	st	X, r25
    1e4c:	8e 93       	st	-X, r24
    1e4e:	17 97       	sbiw	r26, 0x07	; 7
    1e50:	08 95       	ret

00001e52 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1e52:	af 92       	push	r10
    1e54:	bf 92       	push	r11
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	8c 01       	movw	r16, r24
    1e68:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	80 81       	ld	r24, Z
    1e6e:	88 23       	and	r24, r24
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    1e72:	c8 01       	movw	r24, r16
    1e74:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN13SensorManager11getMockDataEP10SensorData>
    1e78:	1b c0       	rjmp	.+54     	; 0x1eb0 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1e7a:	6e e0       	ldi	r22, 0x0E	; 14
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN13SensorManager16takeSampleAnalogEh>
    1e82:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    1e84:	6f e0       	ldi	r22, 0x0F	; 15
    1e86:	c8 01       	movw	r24, r16
    1e88:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN13SensorManager16takeSampleAnalogEh>
    1e8c:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    1e8e:	61 e1       	ldi	r22, 0x11	; 17
    1e90:	c8 01       	movw	r24, r16
    1e92:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN13SensorManager16takeSampleAnalogEh>
    1e96:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    1e98:	60 e1       	ldi	r22, 0x10	; 16
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    1ea0:	ba 82       	std	Y+2, r11	; 0x02
    1ea2:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    1ea4:	de 82       	std	Y+6, r13	; 0x06
    1ea6:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    1ea8:	fc 82       	std	Y+4, r15	; 0x04
    1eaa:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    1eac:	98 87       	std	Y+8, r25	; 0x08
    1eae:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1eb0:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	bf 90       	pop	r11
    1ec4:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    1ec6:	0c 94 be 0a 	jmp	0x157c	; 0x157c <_ZN7Helpers15printSensorDataEP10SensorData>

00001eca <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1eca:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_sendStop>
    1ed4:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <twi_inRepStart>
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	82 e1       	ldi	r24, 0x12	; 18
    1edc:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
    1ee0:	61 e0       	ldi	r22, 0x01	; 1
    1ee2:	83 e1       	ldi	r24, 0x13	; 19
    1ee4:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
    1ee8:	e9 eb       	ldi	r30, 0xB9	; 185
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8e 7f       	andi	r24, 0xFE	; 254
    1ef0:	80 83       	st	Z, r24
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8d 7f       	andi	r24, 0xFD	; 253
    1ef6:	80 83       	st	Z, r24
    1ef8:	88 e4       	ldi	r24, 0x48	; 72
    1efa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1efe:	85 e4       	ldi	r24, 0x45	; 69
    1f00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f04:	08 95       	ret

00001f06 <twi_readFrom>:
    1f06:	41 32       	cpi	r20, 0x21	; 33
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <twi_readFrom+0x6>
    1f0a:	43 c0       	rjmp	.+134    	; 0x1f92 <twi_readFrom+0x8c>
    1f0c:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <twi_state>
    1f10:	91 11       	cpse	r25, r1
    1f12:	fc cf       	rjmp	.-8      	; 0x1f0c <twi_readFrom+0x6>
    1f14:	91 e0       	ldi	r25, 0x01	; 1
    1f16:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <twi_state>
    1f1a:	20 93 2e 04 	sts	0x042E, r18	; 0x80042e <twi_sendStop>
    1f1e:	2f ef       	ldi	r18, 0xFF	; 255
    1f20:	20 93 c3 03 	sts	0x03C3, r18	; 0x8003c3 <twi_error>
    1f24:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_masterBufferIndex>
    1f28:	24 0f       	add	r18, r20
    1f2a:	20 93 07 04 	sts	0x0407, r18	; 0x800407 <twi_masterBufferLength>
    1f2e:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <twi_slarw>
    1f32:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <twi_slarw>
    1f36:	88 0f       	add	r24, r24
    1f38:	89 2b       	or	r24, r25
    1f3a:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_slarw>
    1f3e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <twi_inRepStart>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	61 f4       	brne	.+24     	; 0x1f5e <twi_readFrom+0x58>
    1f46:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <twi_inRepStart>
    1f4a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_slarw>
    1f4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1f52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f56:	83 fd       	sbrc	r24, 3
    1f58:	f8 cf       	rjmp	.-16     	; 0x1f4a <twi_readFrom+0x44>
    1f5a:	85 ec       	ldi	r24, 0xC5	; 197
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <twi_readFrom+0x5a>
    1f5e:	85 ee       	ldi	r24, 0xE5	; 229
    1f60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f64:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_state>
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	e1 f3       	breq	.-8      	; 0x1f64 <twi_readFrom+0x5e>
    1f6c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f70:	84 17       	cp	r24, r20
    1f72:	10 f4       	brcc	.+4      	; 0x1f78 <twi_readFrom+0x72>
    1f74:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <twi_masterBufferIndex>
    1f78:	a9 e0       	ldi	r26, 0x09	; 9
    1f7a:	b4 e0       	ldi	r27, 0x04	; 4
    1f7c:	96 2f       	mov	r25, r22
    1f7e:	fb 01       	movw	r30, r22
    1f80:	8e 2f       	mov	r24, r30
    1f82:	89 1b       	sub	r24, r25
    1f84:	84 17       	cp	r24, r20
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <twi_readFrom+0x88>
    1f88:	8d 91       	ld	r24, X+
    1f8a:	81 93       	st	Z+, r24
    1f8c:	f9 cf       	rjmp	.-14     	; 0x1f80 <twi_readFrom+0x7a>
    1f8e:	84 2f       	mov	r24, r20
    1f90:	08 95       	ret
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	08 95       	ret

00001f96 <twi_writeTo>:
    1f96:	0f 93       	push	r16
    1f98:	41 32       	cpi	r20, 0x21	; 33
    1f9a:	08 f0       	brcs	.+2      	; 0x1f9e <twi_writeTo+0x8>
    1f9c:	4a c0       	rjmp	.+148    	; 0x2032 <twi_writeTo+0x9c>
    1f9e:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <twi_state>
    1fa2:	91 11       	cpse	r25, r1
    1fa4:	fc cf       	rjmp	.-8      	; 0x1f9e <twi_writeTo+0x8>
    1fa6:	32 e0       	ldi	r19, 0x02	; 2
    1fa8:	30 93 30 04 	sts	0x0430, r19	; 0x800430 <twi_state>
    1fac:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <twi_sendStop>
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <twi_error>
    1fb6:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_masterBufferIndex>
    1fba:	40 93 07 04 	sts	0x0407, r20	; 0x800407 <twi_masterBufferLength>
    1fbe:	56 2f       	mov	r21, r22
    1fc0:	a9 e0       	ldi	r26, 0x09	; 9
    1fc2:	b4 e0       	ldi	r27, 0x04	; 4
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	3e 2f       	mov	r19, r30
    1fc8:	35 1b       	sub	r19, r21
    1fca:	34 17       	cp	r19, r20
    1fcc:	18 f4       	brcc	.+6      	; 0x1fd4 <twi_writeTo+0x3e>
    1fce:	31 91       	ld	r19, Z+
    1fd0:	3d 93       	st	X+, r19
    1fd2:	f9 cf       	rjmp	.-14     	; 0x1fc6 <twi_writeTo+0x30>
    1fd4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_slarw>
    1fd8:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <twi_slarw>
    1fdc:	88 0f       	add	r24, r24
    1fde:	83 2b       	or	r24, r19
    1fe0:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_slarw>
    1fe4:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <twi_inRepStart>
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	61 f4       	brne	.+24     	; 0x2004 <twi_writeTo+0x6e>
    1fec:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <twi_inRepStart>
    1ff0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_slarw>
    1ff4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1ff8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1ffc:	83 fd       	sbrc	r24, 3
    1ffe:	f8 cf       	rjmp	.-16     	; 0x1ff0 <twi_writeTo+0x5a>
    2000:	85 ec       	ldi	r24, 0xC5	; 197
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <twi_writeTo+0x70>
    2004:	85 ee       	ldi	r24, 0xE5	; 229
    2006:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    200a:	22 23       	and	r18, r18
    200c:	21 f0       	breq	.+8      	; 0x2016 <twi_writeTo+0x80>
    200e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <twi_state>
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	d1 f3       	breq	.-12     	; 0x200a <twi_writeTo+0x74>
    2016:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_error>
    201a:	8f 3f       	cpi	r24, 0xFF	; 255
    201c:	79 f0       	breq	.+30     	; 0x203c <twi_writeTo+0xa6>
    201e:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_error>
    2022:	80 32       	cpi	r24, 0x20	; 32
    2024:	41 f0       	breq	.+16     	; 0x2036 <twi_writeTo+0xa0>
    2026:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_error>
    202a:	80 33       	cpi	r24, 0x30	; 48
    202c:	31 f0       	breq	.+12     	; 0x203a <twi_writeTo+0xa4>
    202e:	94 e0       	ldi	r25, 0x04	; 4
    2030:	05 c0       	rjmp	.+10     	; 0x203c <twi_writeTo+0xa6>
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	03 c0       	rjmp	.+6      	; 0x203c <twi_writeTo+0xa6>
    2036:	92 e0       	ldi	r25, 0x02	; 2
    2038:	01 c0       	rjmp	.+2      	; 0x203c <twi_writeTo+0xa6>
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	89 2f       	mov	r24, r25
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <twi_transmit>:
    2042:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    2046:	26 2f       	mov	r18, r22
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	24 0f       	add	r18, r20
    204c:	31 1d       	adc	r19, r1
    204e:	21 32       	cpi	r18, 0x21	; 33
    2050:	31 05       	cpc	r19, r1
    2052:	dc f4       	brge	.+54     	; 0x208a <twi_transmit+0x48>
    2054:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <twi_state>
    2058:	24 30       	cpi	r18, 0x04	; 4
    205a:	c9 f4       	brne	.+50     	; 0x208e <twi_transmit+0x4c>
    205c:	fc 01       	movw	r30, r24
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	86 17       	cp	r24, r22
    2064:	58 f4       	brcc	.+22     	; 0x207c <twi_transmit+0x3a>
    2066:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    206a:	21 91       	ld	r18, Z+
    206c:	dc 01       	movw	r26, r24
    206e:	a9 51       	subi	r26, 0x19	; 25
    2070:	bc 4f       	sbci	r27, 0xFC	; 252
    2072:	a3 0f       	add	r26, r19
    2074:	b1 1d       	adc	r27, r1
    2076:	2c 93       	st	X, r18
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	f3 cf       	rjmp	.-26     	; 0x2062 <twi_transmit+0x20>
    207c:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    2080:	68 0f       	add	r22, r24
    2082:	60 93 e5 03 	sts	0x03E5, r22	; 0x8003e5 <twi_txBufferLength>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	08 95       	ret
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	08 95       	ret
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	08 95       	ret

00002092 <twi_attachSlaveRxEvent>:
    2092:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <twi_onSlaveReceive+0x1>
    2096:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_onSlaveReceive>
    209a:	08 95       	ret

0000209c <twi_attachSlaveTxEvent>:
    209c:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <twi_onSlaveTransmit+0x1>
    20a0:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <twi_onSlaveTransmit>
    20a4:	08 95       	ret

000020a6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    20a6:	85 ed       	ldi	r24, 0xD5	; 213
    20a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    20ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20b0:	84 fd       	sbrc	r24, 4
    20b2:	fc cf       	rjmp	.-8      	; 0x20ac <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20b4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
    20b8:	08 95       	ret

000020ba <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20ba:	85 ec       	ldi	r24, 0xC5	; 197
    20bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    20c0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
    20c4:	08 95       	ret

000020c6 <__vector_24>:
}

ISR(TWI_vect)
{
    20c6:	1f 92       	push	r1
    20c8:	0f 92       	push	r0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	0f 92       	push	r0
    20ce:	11 24       	eor	r1, r1
    20d0:	2f 93       	push	r18
    20d2:	3f 93       	push	r19
    20d4:	4f 93       	push	r20
    20d6:	5f 93       	push	r21
    20d8:	6f 93       	push	r22
    20da:	7f 93       	push	r23
    20dc:	8f 93       	push	r24
    20de:	9f 93       	push	r25
    20e0:	af 93       	push	r26
    20e2:	bf 93       	push	r27
    20e4:	ef 93       	push	r30
    20e6:	ff 93       	push	r31
  switch(TW_STATUS){
    20e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    20ec:	88 7f       	andi	r24, 0xF8	; 248
    20ee:	80 36       	cpi	r24, 0x60	; 96
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <__vector_24+0x2e>
    20f2:	9e c0       	rjmp	.+316    	; 0x2230 <__vector_24+0x16a>
    20f4:	78 f5       	brcc	.+94     	; 0x2154 <__vector_24+0x8e>
    20f6:	88 32       	cpi	r24, 0x28	; 40
    20f8:	09 f4       	brne	.+2      	; 0x20fc <__vector_24+0x36>
    20fa:	5d c0       	rjmp	.+186    	; 0x21b6 <__vector_24+0xf0>
    20fc:	90 f4       	brcc	.+36     	; 0x2122 <__vector_24+0x5c>
    20fe:	80 31       	cpi	r24, 0x10	; 16
    2100:	09 f4       	brne	.+2      	; 0x2104 <__vector_24+0x3e>
    2102:	56 c0       	rjmp	.+172    	; 0x21b0 <__vector_24+0xea>
    2104:	38 f4       	brcc	.+14     	; 0x2114 <__vector_24+0x4e>
    2106:	88 23       	and	r24, r24
    2108:	09 f4       	brne	.+2      	; 0x210c <__vector_24+0x46>
    210a:	f5 c0       	rjmp	.+490    	; 0x22f6 <__vector_24+0x230>
    210c:	88 30       	cpi	r24, 0x08	; 8
    210e:	09 f4       	brne	.+2      	; 0x2112 <__vector_24+0x4c>
    2110:	4f c0       	rjmp	.+158    	; 0x21b0 <__vector_24+0xea>
    2112:	f5 c0       	rjmp	.+490    	; 0x22fe <__vector_24+0x238>
    2114:	88 31       	cpi	r24, 0x18	; 24
    2116:	09 f4       	brne	.+2      	; 0x211a <__vector_24+0x54>
    2118:	4e c0       	rjmp	.+156    	; 0x21b6 <__vector_24+0xf0>
    211a:	80 32       	cpi	r24, 0x20	; 32
    211c:	09 f4       	brne	.+2      	; 0x2120 <__vector_24+0x5a>
    211e:	5f c0       	rjmp	.+190    	; 0x21de <__vector_24+0x118>
    2120:	ee c0       	rjmp	.+476    	; 0x22fe <__vector_24+0x238>
    2122:	80 34       	cpi	r24, 0x40	; 64
    2124:	09 f4       	brne	.+2      	; 0x2128 <__vector_24+0x62>
    2126:	6a c0       	rjmp	.+212    	; 0x21fc <__vector_24+0x136>
    2128:	58 f4       	brcc	.+22     	; 0x2140 <__vector_24+0x7a>
    212a:	80 33       	cpi	r24, 0x30	; 48
    212c:	09 f4       	brne	.+2      	; 0x2130 <__vector_24+0x6a>
    212e:	57 c0       	rjmp	.+174    	; 0x21de <__vector_24+0x118>
    2130:	88 33       	cpi	r24, 0x38	; 56
    2132:	09 f0       	breq	.+2      	; 0x2136 <__vector_24+0x70>
    2134:	e4 c0       	rjmp	.+456    	; 0x22fe <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2136:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <twi_error>
      twi_releaseBus();
    213a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <twi_releaseBus>
      break;
    213e:	df c0       	rjmp	.+446    	; 0x22fe <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2140:	80 35       	cpi	r24, 0x50	; 80
    2142:	09 f4       	brne	.+2      	; 0x2146 <__vector_24+0x80>
    2144:	4f c0       	rjmp	.+158    	; 0x21e4 <__vector_24+0x11e>
    2146:	88 35       	cpi	r24, 0x58	; 88
    2148:	09 f4       	brne	.+2      	; 0x214c <__vector_24+0x86>
    214a:	5d c0       	rjmp	.+186    	; 0x2206 <__vector_24+0x140>
    214c:	88 34       	cpi	r24, 0x48	; 72
    214e:	09 f0       	breq	.+2      	; 0x2152 <__vector_24+0x8c>
    2150:	d6 c0       	rjmp	.+428    	; 0x22fe <__vector_24+0x238>
    2152:	d3 c0       	rjmp	.+422    	; 0x22fa <__vector_24+0x234>
    2154:	88 39       	cpi	r24, 0x98	; 152
    2156:	09 f4       	brne	.+2      	; 0x215a <__vector_24+0x94>
    2158:	c4 c0       	rjmp	.+392    	; 0x22e2 <__vector_24+0x21c>
    215a:	a8 f4       	brcc	.+42     	; 0x2186 <__vector_24+0xc0>
    215c:	88 37       	cpi	r24, 0x78	; 120
    215e:	09 f4       	brne	.+2      	; 0x2162 <__vector_24+0x9c>
    2160:	67 c0       	rjmp	.+206    	; 0x2230 <__vector_24+0x16a>
    2162:	38 f4       	brcc	.+14     	; 0x2172 <__vector_24+0xac>
    2164:	88 36       	cpi	r24, 0x68	; 104
    2166:	09 f4       	brne	.+2      	; 0x216a <__vector_24+0xa4>
    2168:	63 c0       	rjmp	.+198    	; 0x2230 <__vector_24+0x16a>
    216a:	80 37       	cpi	r24, 0x70	; 112
    216c:	09 f4       	brne	.+2      	; 0x2170 <__vector_24+0xaa>
    216e:	60 c0       	rjmp	.+192    	; 0x2230 <__vector_24+0x16a>
    2170:	c6 c0       	rjmp	.+396    	; 0x22fe <__vector_24+0x238>
    2172:	88 38       	cpi	r24, 0x88	; 136
    2174:	09 f4       	brne	.+2      	; 0x2178 <__vector_24+0xb2>
    2176:	b5 c0       	rjmp	.+362    	; 0x22e2 <__vector_24+0x21c>
    2178:	80 39       	cpi	r24, 0x90	; 144
    217a:	09 f4       	brne	.+2      	; 0x217e <__vector_24+0xb8>
    217c:	5f c0       	rjmp	.+190    	; 0x223c <__vector_24+0x176>
    217e:	80 38       	cpi	r24, 0x80	; 128
    2180:	09 f0       	breq	.+2      	; 0x2184 <__vector_24+0xbe>
    2182:	bd c0       	rjmp	.+378    	; 0x22fe <__vector_24+0x238>
    2184:	5b c0       	rjmp	.+182    	; 0x223c <__vector_24+0x176>
    2186:	80 3b       	cpi	r24, 0xB0	; 176
    2188:	09 f4       	brne	.+2      	; 0x218c <__vector_24+0xc6>
    218a:	83 c0       	rjmp	.+262    	; 0x2292 <__vector_24+0x1cc>
    218c:	38 f4       	brcc	.+14     	; 0x219c <__vector_24+0xd6>
    218e:	80 3a       	cpi	r24, 0xA0	; 160
    2190:	09 f4       	brne	.+2      	; 0x2194 <__vector_24+0xce>
    2192:	66 c0       	rjmp	.+204    	; 0x2260 <__vector_24+0x19a>
    2194:	88 3a       	cpi	r24, 0xA8	; 168
    2196:	09 f4       	brne	.+2      	; 0x219a <__vector_24+0xd4>
    2198:	7c c0       	rjmp	.+248    	; 0x2292 <__vector_24+0x1cc>
    219a:	b1 c0       	rjmp	.+354    	; 0x22fe <__vector_24+0x238>
    219c:	80 3c       	cpi	r24, 0xC0	; 192
    219e:	09 f4       	brne	.+2      	; 0x21a2 <__vector_24+0xdc>
    21a0:	a4 c0       	rjmp	.+328    	; 0x22ea <__vector_24+0x224>
    21a2:	88 3c       	cpi	r24, 0xC8	; 200
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <__vector_24+0xe2>
    21a6:	a1 c0       	rjmp	.+322    	; 0x22ea <__vector_24+0x224>
    21a8:	88 3b       	cpi	r24, 0xB8	; 184
    21aa:	09 f4       	brne	.+2      	; 0x21ae <__vector_24+0xe8>
    21ac:	87 c0       	rjmp	.+270    	; 0x22bc <__vector_24+0x1f6>
    21ae:	a7 c0       	rjmp	.+334    	; 0x22fe <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21b0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_slarw>
    21b4:	10 c0       	rjmp	.+32     	; 0x21d6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21b6:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_masterBufferIndex>
    21ba:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_masterBufferLength>
    21be:	98 17       	cp	r25, r24
    21c0:	70 f5       	brcc	.+92     	; 0x221e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21c2:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_masterBufferIndex>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	8e 0f       	add	r24, r30
    21ca:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_masterBufferIndex>
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	e7 5f       	subi	r30, 0xF7	; 247
    21d2:	fb 4f       	sbci	r31, 0xFB	; 251
    21d4:	80 81       	ld	r24, Z
    21d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21da:	85 ec       	ldi	r24, 0xC5	; 197
    21dc:	83 c0       	rjmp	.+262    	; 0x22e4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21de:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <twi_error>
    21e2:	8b c0       	rjmp	.+278    	; 0x22fa <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21e4:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_masterBufferIndex>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	8e 0f       	add	r24, r30
    21ec:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_masterBufferIndex>
    21f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	e7 5f       	subi	r30, 0xF7	; 247
    21f8:	fb 4f       	sbci	r31, 0xFB	; 251
    21fa:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21fc:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_masterBufferIndex>
    2200:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_masterBufferLength>
    2204:	6b c0       	rjmp	.+214    	; 0x22dc <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2206:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_masterBufferIndex>
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	8e 0f       	add	r24, r30
    220e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_masterBufferIndex>
    2212:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	e7 5f       	subi	r30, 0xF7	; 247
    221a:	fb 4f       	sbci	r31, 0xFB	; 251
    221c:	80 83       	st	Z, r24
	if (twi_sendStop)
    221e:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_sendStop>
    2222:	81 11       	cpse	r24, r1
    2224:	6a c0       	rjmp	.+212    	; 0x22fa <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    222c:	84 ea       	ldi	r24, 0xA4	; 164
    222e:	5e c0       	rjmp	.+188    	; 0x22ec <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2236:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <twi_rxBufferIndex>
    223a:	cf cf       	rjmp	.-98     	; 0x21da <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    223c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    2240:	80 32       	cpi	r24, 0x20	; 32
    2242:	08 f0       	brcs	.+2      	; 0x2246 <__vector_24+0x180>
    2244:	4e c0       	rjmp	.+156    	; 0x22e2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2246:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	8e 0f       	add	r24, r30
    224e:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <twi_rxBufferIndex>
    2252:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	eb 53       	subi	r30, 0x3B	; 59
    225a:	fc 4f       	sbci	r31, 0xFC	; 252
    225c:	80 83       	st	Z, r24
    225e:	bd cf       	rjmp	.-134    	; 0x21da <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2260:	0e 94 5d 10 	call	0x20ba	; 0x20ba <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2264:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    2268:	80 32       	cpi	r24, 0x20	; 32
    226a:	30 f4       	brcc	.+12     	; 0x2278 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    226c:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	eb 53       	subi	r30, 0x3B	; 59
    2274:	fc 4f       	sbci	r31, 0xFC	; 252
    2276:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2278:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <twi_rxBufferIndex>
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <twi_onSlaveReceive>
    2282:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <twi_onSlaveReceive+0x1>
    2286:	85 ec       	ldi	r24, 0xC5	; 197
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    228c:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <twi_rxBufferIndex>
      break;
    2290:	36 c0       	rjmp	.+108    	; 0x22fe <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2292:	84 e0       	ldi	r24, 0x04	; 4
    2294:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2298:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    229c:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    22a0:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <twi_onSlaveTransmit>
    22a4:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <twi_onSlaveTransmit+0x1>
    22a8:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    22aa:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    22ae:	81 11       	cpse	r24, r1
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22b8:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22bc:	e0 91 e6 03 	lds	r30, 0x03E6	; 0x8003e6 <twi_txBufferIndex>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	8e 0f       	add	r24, r30
    22c4:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <twi_txBufferIndex>
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	e9 51       	subi	r30, 0x19	; 25
    22cc:	fc 4f       	sbci	r31, 0xFC	; 252
    22ce:	80 81       	ld	r24, Z
    22d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22d4:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <twi_txBufferIndex>
    22d8:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <twi_txBufferLength>
    22dc:	98 17       	cp	r25, r24
    22de:	08 f4       	brcc	.+2      	; 0x22e2 <__vector_24+0x21c>
    22e0:	7c cf       	rjmp	.-264    	; 0x21da <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22e2:	85 e8       	ldi	r24, 0x85	; 133
    22e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    22e8:	0a c0       	rjmp	.+20     	; 0x22fe <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22ea:	85 ec       	ldi	r24, 0xC5	; 197
    22ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    22f0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <twi_state>
      break;
    22f4:	04 c0       	rjmp	.+8      	; 0x22fe <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    22f6:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <twi_error>
      twi_stop();
    22fa:	0e 94 53 10 	call	0x20a6	; 0x20a6 <twi_stop>
      break;
  }
}
    22fe:	ff 91       	pop	r31
    2300:	ef 91       	pop	r30
    2302:	bf 91       	pop	r27
    2304:	af 91       	pop	r26
    2306:	9f 91       	pop	r25
    2308:	8f 91       	pop	r24
    230a:	7f 91       	pop	r23
    230c:	6f 91       	pop	r22
    230e:	5f 91       	pop	r21
    2310:	4f 91       	pop	r20
    2312:	3f 91       	pop	r19
    2314:	2f 91       	pop	r18
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	0f 90       	pop	r0
    231c:	1f 90       	pop	r1
    231e:	18 95       	reti

00002320 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2320:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    232a:	82 1b       	sub	r24, r18
    232c:	91 09       	sbc	r25, r1
    232e:	08 95       	ret

00002330 <_ZN7TwoWire4readEv>:
    2330:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    2334:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    2338:	98 17       	cp	r25, r24
    233a:	50 f4       	brcc	.+20     	; 0x2350 <_ZN7TwoWire4readEv+0x20>
    233c:	e9 2f       	mov	r30, r25
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	e9 59       	subi	r30, 0x99	; 153
    2342:	fb 4f       	sbci	r31, 0xFB	; 251
    2344:	20 81       	ld	r18, Z
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	9f 5f       	subi	r25, 0xFF	; 255
    234a:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <_ZN7TwoWire4readEv+0x24>
    2350:	2f ef       	ldi	r18, 0xFF	; 255
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	c9 01       	movw	r24, r18
    2356:	08 95       	ret

00002358 <_ZN7TwoWire4peekEv>:
    2358:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    235c:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    2360:	e8 17       	cp	r30, r24
    2362:	30 f4       	brcc	.+12     	; 0x2370 <_ZN7TwoWire4peekEv+0x18>
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	e9 59       	subi	r30, 0x99	; 153
    2368:	fb 4f       	sbci	r31, 0xFB	; 251
    236a:	80 81       	ld	r24, Z
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	08 95       	ret
    2370:	8f ef       	ldi	r24, 0xFF	; 255
    2372:	9f ef       	ldi	r25, 0xFF	; 255
    2374:	08 95       	ret

00002376 <_ZN7TwoWire5flushEv>:
    2376:	08 95       	ret

00002378 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	ec 01       	movw	r28, r24
    237e:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <_ZN7TwoWire14user_onReceiveE>
    2382:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <_ZN7TwoWire14user_onReceiveE+0x1>
    2386:	30 97       	sbiw	r30, 0x00	; 0
    2388:	f1 f0       	breq	.+60     	; 0x23c6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    238a:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    238e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    2392:	98 17       	cp	r25, r24
    2394:	c0 f0       	brcs	.+48     	; 0x23c6 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	29 2f       	mov	r18, r25
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	26 17       	cp	r18, r22
    239e:	37 07       	cpc	r19, r23
    23a0:	54 f4       	brge	.+20     	; 0x23b6 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    23a2:	de 01       	movw	r26, r28
    23a4:	a2 0f       	add	r26, r18
    23a6:	b3 1f       	adc	r27, r19
    23a8:	4c 91       	ld	r20, X
    23aa:	d9 01       	movw	r26, r18
    23ac:	a9 59       	subi	r26, 0x99	; 153
    23ae:	bb 4f       	sbci	r27, 0xFB	; 251
    23b0:	4c 93       	st	X, r20
    23b2:	9f 5f       	subi	r25, 0xFF	; 255
    23b4:	f1 cf       	rjmp	.-30     	; 0x2398 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    23b6:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    23ba:	60 93 65 04 	sts	0x0465, r22	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    23be:	cb 01       	movw	r24, r22
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	09 94       	ijmp
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <_ZN7TwoWire16onRequestServiceEv>:
    23cc:	e0 91 3f 04 	lds	r30, 0x043F	; 0x80043f <_ZN7TwoWire14user_onRequestE>
    23d0:	f0 91 40 04 	lds	r31, 0x0440	; 0x800440 <_ZN7TwoWire14user_onRequestE+0x1>
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	29 f0       	breq	.+10     	; 0x23e2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    23d8:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    23dc:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    23e0:	09 94       	ijmp
    23e2:	08 95       	ret

000023e4 <_ZN7TwoWire5writeEPKhj>:
    23e4:	cf 92       	push	r12
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	7c 01       	movw	r14, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8a 01       	movw	r16, r20
    23fa:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <_ZN7TwoWire12transmittingE>
    23fe:	22 23       	and	r18, r18
    2400:	89 f0       	breq	.+34     	; 0x2424 <_ZN7TwoWire5writeEPKhj+0x40>
    2402:	eb 01       	movw	r28, r22
    2404:	6b 01       	movw	r12, r22
    2406:	c4 0e       	add	r12, r20
    2408:	d5 1e       	adc	r13, r21
    240a:	cc 15       	cp	r28, r12
    240c:	dd 05       	cpc	r29, r13
    240e:	69 f0       	breq	.+26     	; 0x242a <_ZN7TwoWire5writeEPKhj+0x46>
    2410:	69 91       	ld	r22, Y+
    2412:	d7 01       	movw	r26, r14
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	01 90       	ld	r0, Z+
    241a:	f0 81       	ld	r31, Z
    241c:	e0 2d       	mov	r30, r0
    241e:	c7 01       	movw	r24, r14
    2420:	09 95       	icall
    2422:	f3 cf       	rjmp	.-26     	; 0x240a <_ZN7TwoWire5writeEPKhj+0x26>
    2424:	64 2f       	mov	r22, r20
    2426:	0e 94 21 10 	call	0x2042	; 0x2042 <twi_transmit>
    242a:	c8 01       	movw	r24, r16
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ff 90       	pop	r15
    2436:	ef 90       	pop	r14
    2438:	df 90       	pop	r13
    243a:	cf 90       	pop	r12
    243c:	08 95       	ret

0000243e <_ZN7TwoWire5writeEh>:
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	1f 92       	push	r1
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	69 83       	std	Y+1, r22	; 0x01
    244a:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <_ZN7TwoWire12transmittingE>
    244e:	22 23       	and	r18, r18
    2450:	d1 f0       	breq	.+52     	; 0x2486 <_ZN7TwoWire5writeEh+0x48>
    2452:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2456:	20 32       	cpi	r18, 0x20	; 32
    2458:	40 f0       	brcs	.+16     	; 0x246a <_ZN7TwoWire5writeEh+0x2c>
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	fc 01       	movw	r30, r24
    2460:	33 83       	std	Z+3, r19	; 0x03
    2462:	22 83       	std	Z+2, r18	; 0x02
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	15 c0       	rjmp	.+42     	; 0x2494 <_ZN7TwoWire5writeEh+0x56>
    246a:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    246e:	e8 2f       	mov	r30, r24
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	ec 5b       	subi	r30, 0xBC	; 188
    2474:	fb 4f       	sbci	r31, 0xFB	; 251
    2476:	99 81       	ldd	r25, Y+1	; 0x01
    2478:	90 83       	st	Z, r25
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    2480:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2484:	05 c0       	rjmp	.+10     	; 0x2490 <_ZN7TwoWire5writeEh+0x52>
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	ce 01       	movw	r24, r28
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	0e 94 21 10 	call	0x2042	; 0x2042 <twi_transmit>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0f 90       	pop	r0
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	08 95       	ret

0000249c <_ZN7TwoWireC1Ev>:
    249c:	fc 01       	movw	r30, r24
    249e:	13 82       	std	Z+3, r1	; 0x03
    24a0:	12 82       	std	Z+2, r1	; 0x02
    24a2:	88 ee       	ldi	r24, 0xE8	; 232
    24a4:	93 e0       	ldi	r25, 0x03	; 3
    24a6:	a0 e0       	ldi	r26, 0x00	; 0
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	84 83       	std	Z+4, r24	; 0x04
    24ac:	95 83       	std	Z+5, r25	; 0x05
    24ae:	a6 83       	std	Z+6, r26	; 0x06
    24b0:	b7 83       	std	Z+7, r27	; 0x07
    24b2:	8b e6       	ldi	r24, 0x6B	; 107
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
    24ba:	08 95       	ret

000024bc <_ZN7TwoWire5beginEv>:
    24bc:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    24c0:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    24c4:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    24c8:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    24cc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <twi_init>
    24d0:	86 ee       	ldi	r24, 0xE6	; 230
    24d2:	91 e1       	ldi	r25, 0x11	; 17
    24d4:	0e 94 4e 10 	call	0x209c	; 0x209c <twi_attachSlaveTxEvent>
    24d8:	8c eb       	ldi	r24, 0xBC	; 188
    24da:	91 e1       	ldi	r25, 0x11	; 17
    24dc:	0c 94 49 10 	jmp	0x2092	; 0x2092 <twi_attachSlaveRxEvent>

000024e0 <_ZN7TwoWire17beginTransmissionEh>:
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <_ZN7TwoWire12transmittingE>
    24e6:	60 93 64 04 	sts	0x0464, r22	; 0x800464 <_ZN7TwoWire9txAddressE>
    24ea:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    24ee:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    24f2:	08 95       	ret

000024f4 <_ZN7TwoWire17beginTransmissionEi>:
    24f4:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <_ZN7TwoWire17beginTransmissionEh>

000024f8 <_ZN7TwoWire15endTransmissionEh>:
    24f8:	0f 93       	push	r16
    24fa:	06 2f       	mov	r16, r22
    24fc:	21 e0       	ldi	r18, 0x01	; 1
    24fe:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2502:	64 e4       	ldi	r22, 0x44	; 68
    2504:	74 e0       	ldi	r23, 0x04	; 4
    2506:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <_ZN7TwoWire9txAddressE>
    250a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <twi_writeTo>
    250e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN7TwoWire13txBufferIndexE>
    2512:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN7TwoWire14txBufferLengthE>
    2516:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZN7TwoWire12transmittingE>
    251a:	0f 91       	pop	r16
    251c:	08 95       	ret

0000251e <_ZN7TwoWire11requestFromEhhmhh>:
    251e:	4f 92       	push	r4
    2520:	5f 92       	push	r5
    2522:	6f 92       	push	r6
    2524:	7f 92       	push	r7
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	5c 01       	movw	r10, r24
    253a:	f6 2e       	mov	r15, r22
    253c:	d4 2f       	mov	r29, r20
    253e:	28 01       	movw	r4, r16
    2540:	39 01       	movw	r6, r18
    2542:	ee 20       	and	r14, r14
    2544:	21 f1       	breq	.+72     	; 0x258e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2546:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_ZN7TwoWire17beginTransmissionEh>
    254a:	ce 2d       	mov	r28, r14
    254c:	c4 30       	cpi	r28, 0x04	; 4
    254e:	08 f0       	brcs	.+2      	; 0x2552 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2550:	c3 e0       	ldi	r28, 0x03	; 3
    2552:	c1 50       	subi	r28, 0x01	; 1
    2554:	c0 f0       	brcs	.+48     	; 0x2586 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2556:	28 e0       	ldi	r18, 0x08	; 8
    2558:	c2 9f       	mul	r28, r18
    255a:	c0 01       	movw	r24, r0
    255c:	11 24       	eor	r1, r1
    255e:	a3 01       	movw	r20, r6
    2560:	92 01       	movw	r18, r4
    2562:	04 c0       	rjmp	.+8      	; 0x256c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2564:	56 95       	lsr	r21
    2566:	47 95       	ror	r20
    2568:	37 95       	ror	r19
    256a:	27 95       	ror	r18
    256c:	8a 95       	dec	r24
    256e:	d2 f7       	brpl	.-12     	; 0x2564 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2570:	ca 01       	movw	r24, r20
    2572:	b9 01       	movw	r22, r18
    2574:	d5 01       	movw	r26, r10
    2576:	ed 91       	ld	r30, X+
    2578:	fc 91       	ld	r31, X
    257a:	01 90       	ld	r0, Z+
    257c:	f0 81       	ld	r31, Z
    257e:	e0 2d       	mov	r30, r0
    2580:	c5 01       	movw	r24, r10
    2582:	09 95       	icall
    2584:	e6 cf       	rjmp	.-52     	; 0x2552 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	c5 01       	movw	r24, r10
    258a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN7TwoWire15endTransmissionEh>
    258e:	4d 2f       	mov	r20, r29
    2590:	d1 32       	cpi	r29, 0x21	; 33
    2592:	08 f0       	brcs	.+2      	; 0x2596 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	2c 2d       	mov	r18, r12
    2598:	67 e6       	ldi	r22, 0x67	; 103
    259a:	74 e0       	ldi	r23, 0x04	; 4
    259c:	8f 2d       	mov	r24, r15
    259e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <twi_readFrom>
    25a2:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_ZN7TwoWire13rxBufferIndexE>
    25a6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_ZN7TwoWire14rxBufferLengthE>
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	1f 91       	pop	r17
    25b0:	0f 91       	pop	r16
    25b2:	ff 90       	pop	r15
    25b4:	ef 90       	pop	r14
    25b6:	cf 90       	pop	r12
    25b8:	bf 90       	pop	r11
    25ba:	af 90       	pop	r10
    25bc:	7f 90       	pop	r7
    25be:	6f 90       	pop	r6
    25c0:	5f 90       	pop	r5
    25c2:	4f 90       	pop	r4
    25c4:	08 95       	ret

000025c6 <_ZN7TwoWire11requestFromEhhh>:
    25c6:	cf 92       	push	r12
    25c8:	ef 92       	push	r14
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	c2 2e       	mov	r12, r18
    25d0:	e1 2c       	mov	r14, r1
    25d2:	00 e0       	ldi	r16, 0x00	; 0
    25d4:	10 e0       	ldi	r17, 0x00	; 0
    25d6:	98 01       	movw	r18, r16
    25d8:	0e 94 8f 12 	call	0x251e	; 0x251e <_ZN7TwoWire11requestFromEhhmhh>
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ef 90       	pop	r14
    25e2:	cf 90       	pop	r12
    25e4:	08 95       	ret

000025e6 <_ZN7TwoWire11requestFromEii>:
    25e6:	21 e0       	ldi	r18, 0x01	; 1
    25e8:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <_ZN7TwoWire11requestFromEhhh>

000025ec <_ZN7TwoWire15endTransmissionEv>:
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <_ZN7TwoWire15endTransmissionEh>

000025f2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    25f2:	81 e3       	ldi	r24, 0x31	; 49
    25f4:	94 e0       	ldi	r25, 0x04	; 4
    25f6:	0c 94 4e 12 	jmp	0x249c	; 0x249c <_ZN7TwoWireC1Ev>

000025fa <_ZN13ExtendedTests20runExtendedTypesTestEv>:
#endif
}


//RMonV3 types/flags test
void ExtendedTests::runExtendedTypesTest() {
    25fa:	bf 92       	push	r11
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ef 92       	push	r14
    2602:	ff 92       	push	r15
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	ce 55       	subi	r28, 0x5E	; 94
    2612:	d1 40       	sbci	r29, 0x01	; 1
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	c5 5a       	subi	r28, 0xA5	; 165
    2620:	de 4f       	sbci	r29, 0xFE	; 254
    2622:	18 82       	st	Y, r1
    2624:	cb 55       	subi	r28, 0x5B	; 91
    2626:	d1 40       	sbci	r29, 0x01	; 1
    2628:	c4 5a       	subi	r28, 0xA4	; 164
    262a:	de 4f       	sbci	r29, 0xFE	; 254
    262c:	18 82       	st	Y, r1
    262e:	cc 55       	subi	r28, 0x5C	; 92
    2630:	d1 40       	sbci	r29, 0x01	; 1
    2632:	c3 5a       	subi	r28, 0xA3	; 163
    2634:	de 4f       	sbci	r29, 0xFE	; 254
    2636:	18 82       	st	Y, r1
    2638:	cd 55       	subi	r28, 0x5D	; 93
    263a:	d1 40       	sbci	r29, 0x01	; 1
							(FONA_GET_NETREG::NETSTAT_5 |
							FONA_GET_NETREG::RESULT_CODE_1 |
							FONA_GET_NETREG::IS_ERROR);
	
	FONA_GET_RSSI result;
	result.netReg = regVal;
    263c:	85 e3       	ldi	r24, 0x35	; 53
    263e:	c2 5a       	subi	r28, 0xA2	; 162
    2640:	de 4f       	sbci	r29, 0xFE	; 254
    2642:	88 83       	st	Y, r24
    2644:	ce 55       	subi	r28, 0x5E	; 94
    2646:	d1 40       	sbci	r29, 0x01	; 1
					 
	RM_LOG(F("Netstat 5 + ResultCode 1 + Error 1="));
    2648:	6e e2       	ldi	r22, 0x2E	; 46
    264a:	76 e0       	ldi	r23, 0x06	; 6
    264c:	87 e8       	ldi	r24, 0x87	; 135
    264e:	94 e0       	ldi	r25, 0x04	; 4
    2650:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(result.netReg, BIN);
    2654:	c2 5a       	subi	r28, 0xA2	; 162
    2656:	de 4f       	sbci	r29, 0xFE	; 254
    2658:	68 81       	ld	r22, Y
    265a:	ce 55       	subi	r28, 0x5E	; 94
    265c:	d1 40       	sbci	r29, 0x01	; 1
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	42 e0       	ldi	r20, 0x02	; 2
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	87 e8       	ldi	r24, 0x87	; 135
    2666:	94 e0       	ldi	r25, 0x04	; 4
    2668:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>

	uint8_t memStoredVal = result.netReg;
    266c:	c2 5a       	subi	r28, 0xA2	; 162
    266e:	de 4f       	sbci	r29, 0xFE	; 254
    2670:	18 81       	ld	r17, Y
    2672:	ce 55       	subi	r28, 0x5E	; 94
    2674:	d1 40       	sbci	r29, 0x01	; 1
	FONA_GET_NETREG back = (FONA_GET_NETREG)memStoredVal;
	RM_LOG(F("Cast back after int storage val:"));
    2676:	6d e0       	ldi	r22, 0x0D	; 13
    2678:	76 e0       	ldi	r23, 0x06	; 6
    267a:	87 e8       	ldi	r24, 0x87	; 135
    267c:	94 e0       	ldi	r25, 0x04	; 4
    267e:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLNFMT(back, BIN);
    2682:	61 2f       	mov	r22, r17
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	42 e0       	ldi	r20, 0x02	; 2
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	87 e8       	ldi	r24, 0x87	; 135
    268c:	94 e0       	ldi	r25, 0x04	; 4
    268e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>
    2692:	81 2f       	mov	r24, r17
    2694:	8c 71       	andi	r24, 0x1C	; 28
	
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_0) RM_LOGLN(F("*** TEST FAIL @1 ***"));
    2696:	19 f4       	brne	.+6      	; 0x269e <_ZN13ExtendedTests20runExtendedTypesTestEv+0xa4>
    2698:	68 ef       	ldi	r22, 0xF8	; 248
    269a:	75 e0       	ldi	r23, 0x05	; 5
    269c:	13 c0       	rjmp	.+38     	; 0x26c4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xca>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_1) RM_LOGLN(F("*** TEST FAIL @2 ***"));
    269e:	84 30       	cpi	r24, 0x04	; 4
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xae>
    26a2:	63 ee       	ldi	r22, 0xE3	; 227
    26a4:	75 e0       	ldi	r23, 0x05	; 5
    26a6:	0e c0       	rjmp	.+28     	; 0x26c4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xca>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_2) RM_LOGLN(F("*** TEST FAIL @3 ***"));
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	19 f4       	brne	.+6      	; 0x26b2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xb8>
    26ac:	6e ec       	ldi	r22, 0xCE	; 206
    26ae:	75 e0       	ldi	r23, 0x05	; 5
    26b0:	09 c0       	rjmp	.+18     	; 0x26c4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xca>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_3) RM_LOGLN(F("*** TEST FAIL @4 ***"));
    26b2:	8c 30       	cpi	r24, 0x0C	; 12
    26b4:	19 f4       	brne	.+6      	; 0x26bc <_ZN13ExtendedTests20runExtendedTypesTestEv+0xc2>
    26b6:	69 eb       	ldi	r22, 0xB9	; 185
    26b8:	75 e0       	ldi	r23, 0x05	; 5
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xca>
	if (NETREG_ONLY_NETSTAT(back) == FONA_GET_NETREG::NETSTAT_4) RM_LOGLN(F("*** TEST FAIL @5 ***"));
    26bc:	80 31       	cpi	r24, 0x10	; 16
    26be:	39 f4       	brne	.+14     	; 0x26ce <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd4>
    26c0:	64 ea       	ldi	r22, 0xA4	; 164
    26c2:	75 e0       	ldi	r23, 0x05	; 5
    26c4:	87 e8       	ldi	r24, 0x87	; 135
    26c6:	94 e0       	ldi	r25, 0x04	; 4
    26c8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xd8>
	if (NETREG_ONLY_NETSTAT(back) != FONA_GET_NETREG::NETSTAT_5) RM_LOGLN(F("*** TEST FAIL @6 ***"));
    26ce:	84 31       	cpi	r24, 0x14	; 20
    26d0:	31 f0       	breq	.+12     	; 0x26de <_ZN13ExtendedTests20runExtendedTypesTestEv+0xe4>
    26d2:	6f e8       	ldi	r22, 0x8F	; 143
    26d4:	75 e0       	ldi	r23, 0x05	; 5
    26d6:	87 e8       	ldi	r24, 0x87	; 135
    26d8:	94 e0       	ldi	r25, 0x04	; 4
    26da:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    26de:	01 2f       	mov	r16, r17
    26e0:	03 70       	andi	r16, 0x03	; 3
	
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_0) RM_LOGLN(F("*** TEST FAIL @7 ***"));
    26e2:	39 f4       	brne	.+14     	; 0x26f2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xf8>
    26e4:	6a e7       	ldi	r22, 0x7A	; 122
    26e6:	75 e0       	ldi	r23, 0x05	; 5
    26e8:	87 e8       	ldi	r24, 0x87	; 135
    26ea:	94 e0       	ldi	r25, 0x04	; 4
    26ec:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <_ZN13ExtendedTests20runExtendedTypesTestEv+0xfc>
	if (NETREG_ONLY_RESULT_CODE(back) != FONA_GET_NETREG::RESULT_CODE_1) RM_LOGLN(F("*** TEST FAIL @8 ***"));
    26f2:	01 30       	cpi	r16, 0x01	; 1
    26f4:	71 f0       	breq	.+28     	; 0x2712 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x118>
    26f6:	65 e6       	ldi	r22, 0x65	; 101
    26f8:	75 e0       	ldi	r23, 0x05	; 5
    26fa:	87 e8       	ldi	r24, 0x87	; 135
    26fc:	94 e0       	ldi	r25, 0x04	; 4
    26fe:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (NETREG_ONLY_RESULT_CODE(back) == FONA_GET_NETREG::RESULT_CODE_2) RM_LOGLN(F("*** TEST FAIL @9 ***"));
    2702:	02 30       	cpi	r16, 0x02	; 2
    2704:	31 f4       	brne	.+12     	; 0x2712 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x118>
    2706:	60 e5       	ldi	r22, 0x50	; 80
    2708:	75 e0       	ldi	r23, 0x05	; 5
    270a:	87 e8       	ldi	r24, 0x87	; 135
    270c:	94 e0       	ldi	r25, 0x04	; 4
    270e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	if (NETREG_ONLY_ERROR(back) != FONA_GET_NETREG::IS_ERROR) RM_LOGLN(F("*** TEST FAIL @10 ***"));
    2712:	15 fd       	sbrc	r17, 5
    2714:	06 c0       	rjmp	.+12     	; 0x2722 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x128>
    2716:	6a e3       	ldi	r22, 0x3A	; 58
    2718:	75 e0       	ldi	r23, 0x05	; 5
    271a:	87 e8       	ldi	r24, 0x87	; 135
    271c:	94 e0       	ldi	r25, 0x04	; 4
    271e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Print test
	RM_LOG(F("Test For Print Output:"));
    2722:	63 e2       	ldi	r22, 0x23	; 35
    2724:	75 e0       	ldi	r23, 0x05	; 5
    2726:	87 e8       	ldi	r24, 0x87	; 135
    2728:	94 e0       	ldi	r25, 0x04	; 4
    272a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
	Helpers::printRSSI(&result);
    272e:	ce 01       	movw	r24, r28
    2730:	85 5a       	subi	r24, 0xA5	; 165
    2732:	9e 4f       	sbci	r25, 0xFE	; 254
    2734:	0e 94 0f 0a 	call	0x141e	; 0x141e <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	RM_LOGLN(F("--------------------------"));
    2738:	68 e0       	ldi	r22, 0x08	; 8
    273a:	75 e0       	ldi	r23, 0x05	; 5
    273c:	87 e8       	ldi	r24, 0x87	; 135
    273e:	94 e0       	ldi	r25, 0x04	; 4
    2740:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Avoid this with lib:-
	//char r = -127;
	//char q = 129;
	//Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    2744:	f1 2c       	mov	r15, r1
	
		uint8_t input[1];
		input[0] = i;
	
		uint8_t output2[10]{0};
    2746:	8e 01       	movw	r16, r28
    2748:	0b 59       	subi	r16, 0x9B	; 155
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	8a e0       	ldi	r24, 0x0A	; 10
    274e:	e8 2e       	mov	r14, r24
		Helpers::base64_encode((uint8_t*)&output2, (uint8_t*)&input, 1);
	
		//RM_LOG2(F("INPUT WAS"), i);
		//RM_LOG2(F("INPUT ENCODING WAS"), output2);
	
		uint8_t output3[10]{0};
    2750:	ce 01       	movw	r24, r28
    2752:	01 96       	adiw	r24, 0x01	; 1
    2754:	6c 01       	movw	r12, r24
	//char q = 129;
	//Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
	
		uint8_t input[1];
		input[0] = i;
    2756:	c7 53       	subi	r28, 0x37	; 55
    2758:	df 4f       	sbci	r29, 0xFF	; 255
    275a:	f8 82       	st	Y, r15
    275c:	c9 5c       	subi	r28, 0xC9	; 201
    275e:	d0 40       	sbci	r29, 0x00	; 0
	
		uint8_t output2[10]{0};
    2760:	f8 01       	movw	r30, r16
    2762:	8e 2d       	mov	r24, r14
    2764:	11 92       	st	Z+, r1
    2766:	8a 95       	dec	r24
    2768:	e9 f7       	brne	.-6      	; 0x2764 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x16a>
		Helpers::base64_encode((uint8_t*)&output2, (uint8_t*)&input, 1);
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	be 01       	movw	r22, r28
    2770:	67 53       	subi	r22, 0x37	; 55
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	c8 01       	movw	r24, r16
    2776:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_ZN7Helpers13base64_encodeEPhS0_i>
	
		//RM_LOG2(F("INPUT WAS"), i);
		//RM_LOG2(F("INPUT ENCODING WAS"), output2);
	
		uint8_t output3[10]{0};
    277a:	f6 01       	movw	r30, r12
    277c:	8e 2d       	mov	r24, r14
    277e:	11 92       	st	Z+, r1
    2780:	8a 95       	dec	r24
    2782:	e9 f7       	brne	.-6      	; 0x277e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x184>
		Helpers::base64_decode((uint8_t*)&output3, (uint8_t*)&output2, 10);
    2784:	4a e0       	ldi	r20, 0x0A	; 10
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	b8 01       	movw	r22, r16
    278a:	c6 01       	movw	r24, r12
    278c:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN7Helpers13base64_decodeEPhS0_i>
	
		//RM_LOG2(F("DECODED BACK WAS"), (uint8_t)output3[0]);
		
		if ((uint8_t)output3[0] != i) RM_LOGLN(F("*** TEST FAIL @ENCODING ***"));
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	f8 16       	cp	r15, r24
    2794:	31 f0       	breq	.+12     	; 0x27a2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1a8>
    2796:	6c ee       	ldi	r22, 0xEC	; 236
    2798:	74 e0       	ldi	r23, 0x04	; 4
    279a:	87 e8       	ldi	r24, 0x87	; 135
    279c:	94 e0       	ldi	r25, 0x04	; 4
    279e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		if (i==255) break;
    27a2:	9f ef       	ldi	r25, 0xFF	; 255
    27a4:	f9 16       	cp	r15, r25
    27a6:	11 f0       	breq	.+4      	; 0x27ac <_ZN13ExtendedTests20runExtendedTypesTestEv+0x1b2>
	
	//Avoid this with lib:-
	//char r = -127;
	//char q = 129;
	//Serial.println((uint8_t)q==(uint8_t)r); //This is true in Arduino 
	for(uint8_t i=0 ; ; i++) {
    27a8:	f3 94       	inc	r15
    27aa:	d5 cf       	rjmp	.-86     	; 0x2756 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x15c>
	
	
	
	//1) Single round-trip test
	
	SensorData sd;			//size ~ 10 bytes
    27ac:	bb 24       	eor	r11, r11
    27ae:	b3 94       	inc	r11
    27b0:	cf 5a       	subi	r28, 0xAF	; 175
    27b2:	de 4f       	sbci	r29, 0xFE	; 254
    27b4:	b8 82       	st	Y, r11
    27b6:	c1 55       	subi	r28, 0x51	; 81
    27b8:	d1 40       	sbci	r29, 0x01	; 1
    27ba:	c8 5a       	subi	r28, 0xA8	; 168
    27bc:	de 4f       	sbci	r29, 0xFE	; 254
    27be:	19 82       	std	Y+1, r1	; 0x01
    27c0:	18 82       	st	Y, r1
    27c2:	c8 55       	subi	r28, 0x58	; 88
    27c4:	d1 40       	sbci	r29, 0x01	; 1
	sd.battVoltage = 20245; //Includes mV - e.g. 20.245V
    27c6:	85 e1       	ldi	r24, 0x15	; 21
    27c8:	9f e4       	ldi	r25, 0x4F	; 79
    27ca:	ce 5a       	subi	r28, 0xAE	; 174
    27cc:	de 4f       	sbci	r29, 0xFE	; 254
    27ce:	99 83       	std	Y+1, r25	; 0x01
    27d0:	88 83       	st	Y, r24
    27d2:	c2 55       	subi	r28, 0x52	; 82
    27d4:	d1 40       	sbci	r29, 0x01	; 1
	sd.current = 65535;
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	9f ef       	ldi	r25, 0xFF	; 255
    27da:	cc 5a       	subi	r28, 0xAC	; 172
    27dc:	de 4f       	sbci	r29, 0xFE	; 254
    27de:	99 83       	std	Y+1, r25	; 0x01
    27e0:	88 83       	st	Y, r24
    27e2:	c4 55       	subi	r28, 0x54	; 84
    27e4:	d1 40       	sbci	r29, 0x01	; 1
	sd.errorChar = 3;
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	c6 5a       	subi	r28, 0xA6	; 166
    27ea:	de 4f       	sbci	r29, 0xFE	; 254
    27ec:	88 83       	st	Y, r24
    27ee:	ca 55       	subi	r28, 0x5A	; 90
    27f0:	d1 40       	sbci	r29, 0x01	; 1
	sd.pVVoltage = 64913;
    27f2:	81 e9       	ldi	r24, 0x91	; 145
    27f4:	9d ef       	ldi	r25, 0xFD	; 253
    27f6:	ca 5a       	subi	r28, 0xAA	; 170
    27f8:	de 4f       	sbci	r29, 0xFE	; 254
    27fa:	99 83       	std	Y+1, r25	; 0x01
    27fc:	88 83       	st	Y, r24
    27fe:	c6 55       	subi	r28, 0x56	; 86
    2800:	d1 40       	sbci	r29, 0x01	; 1
	sd.temperature = 0;
	Helpers::printSensorData(&sd);
    2802:	ce 01       	movw	r24, r28
    2804:	8f 5a       	subi	r24, 0xAF	; 175
    2806:	9e 4f       	sbci	r25, 0xFE	; 254
    2808:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7Helpers15printSensorDataEP10SensorData>
	
	uint8_t typicalMemUsage = sizeof("20245-65535-3-64913-0"); //23 bytes
	RM_LOG2("Basic int->str usage would be", typicalMemUsage);
    280c:	67 e7       	ldi	r22, 0x77	; 119
    280e:	71 e0       	ldi	r23, 0x01	; 1
    2810:	87 e8       	ldi	r24, 0x87	; 135
    2812:	94 e0       	ldi	r25, 0x04	; 4
    2814:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    2818:	66 e4       	ldi	r22, 0x46	; 70
    281a:	71 e0       	ldi	r23, 0x01	; 1
    281c:	87 e8       	ldi	r24, 0x87	; 135
    281e:	94 e0       	ldi	r25, 0x04	; 4
    2820:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    2824:	4a e0       	ldi	r20, 0x0A	; 10
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	66 e1       	ldi	r22, 0x16	; 22
    282a:	87 e8       	ldi	r24, 0x87	; 135
    282c:	94 e0       	ldi	r25, 0x04	; 4
    282e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN5Print7printlnEhi>
	
	char output[100];
	int len = Helpers::base64_encode((uint8_t*)output, (uint8_t*)&sd, sizeof(SensorData));
    2832:	4a e0       	ldi	r20, 0x0A	; 10
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	be 01       	movw	r22, r28
    2838:	6f 5a       	subi	r22, 0xAF	; 175
    283a:	7e 4f       	sbci	r23, 0xFE	; 254
    283c:	ce 01       	movw	r24, r28
    283e:	87 53       	subi	r24, 0x37	; 55
    2840:	9f 4f       	sbci	r25, 0xFF	; 255
    2842:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_ZN7Helpers13base64_encodeEPhS0_i>
    2846:	7c 01       	movw	r14, r24
	RM_LOG("Encoded result to be sent over Web is ");
    2848:	65 e9       	ldi	r22, 0x95	; 149
    284a:	71 e0       	ldi	r23, 0x01	; 1
    284c:	87 e8       	ldi	r24, 0x87	; 135
    284e:	94 e0       	ldi	r25, 0x04	; 4
    2850:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
	RM_LOGLN(output);
    2854:	be 01       	movw	r22, r28
    2856:	67 53       	subi	r22, 0x37	; 55
    2858:	7f 4f       	sbci	r23, 0xFF	; 255
    285a:	87 e8       	ldi	r24, 0x87	; 135
    285c:	94 e0       	ldi	r25, 0x04	; 4
    285e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
	RM_LOG2("-Expected size given of ", Helpers::base64_enc_len(sizeof(SensorData)));
    2862:	6c eb       	ldi	r22, 0xBC	; 188
    2864:	71 e0       	ldi	r23, 0x01	; 1
    2866:	87 e8       	ldi	r24, 0x87	; 135
    2868:	94 e0       	ldi	r25, 0x04	; 4
    286a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    286e:	66 e4       	ldi	r22, 0x46	; 70
    2870:	71 e0       	ldi	r23, 0x01	; 1
    2872:	87 e8       	ldi	r24, 0x87	; 135
    2874:	94 e0       	ldi	r25, 0x04	; 4
    2876:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    287a:	8a e0       	ldi	r24, 0x0A	; 10
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN7Helpers14base64_enc_lenEi>
    2882:	4a e0       	ldi	r20, 0x0A	; 10
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	bc 01       	movw	r22, r24
    2888:	87 e8       	ldi	r24, 0x87	; 135
    288a:	94 e0       	ldi	r25, 0x04	; 4
    288c:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>
	RM_LOG2("-Actual actual resulting size of ", len);
    2890:	65 ed       	ldi	r22, 0xD5	; 213
    2892:	71 e0       	ldi	r23, 0x01	; 1
    2894:	87 e8       	ldi	r24, 0x87	; 135
    2896:	94 e0       	ldi	r25, 0x04	; 4
    2898:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    289c:	66 e4       	ldi	r22, 0x46	; 70
    289e:	71 e0       	ldi	r23, 0x01	; 1
    28a0:	87 e8       	ldi	r24, 0x87	; 135
    28a2:	94 e0       	ldi	r25, 0x04	; 4
    28a4:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    28a8:	4a e0       	ldi	r20, 0x0A	; 10
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	b7 01       	movw	r22, r14
    28ae:	87 e8       	ldi	r24, 0x87	; 135
    28b0:	94 e0       	ldi	r25, 0x04	; 4
    28b2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>
	RM_LOGLN("\t(excluding the '0' at the end incase to be treated as string)");
    28b6:	67 ef       	ldi	r22, 0xF7	; 247
    28b8:	71 e0       	ldi	r23, 0x01	; 1
    28ba:	87 e8       	ldi	r24, 0x87	; 135
    28bc:	94 e0       	ldi	r25, 0x04	; 4
    28be:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEPKc>
	
	
	SensorData sdAfter;
    28c2:	c9 5b       	subi	r28, 0xB9	; 185
    28c4:	de 4f       	sbci	r29, 0xFE	; 254
    28c6:	b8 82       	st	Y, r11
    28c8:	c7 54       	subi	r28, 0x47	; 71
    28ca:	d1 40       	sbci	r29, 0x01	; 1
    28cc:	c8 5b       	subi	r28, 0xB8	; 184
    28ce:	de 4f       	sbci	r29, 0xFE	; 254
    28d0:	19 82       	std	Y+1, r1	; 0x01
    28d2:	18 82       	st	Y, r1
    28d4:	c8 54       	subi	r28, 0x48	; 72
    28d6:	d1 40       	sbci	r29, 0x01	; 1
    28d8:	c6 5b       	subi	r28, 0xB6	; 182
    28da:	de 4f       	sbci	r29, 0xFE	; 254
    28dc:	19 82       	std	Y+1, r1	; 0x01
    28de:	18 82       	st	Y, r1
    28e0:	ca 54       	subi	r28, 0x4A	; 74
    28e2:	d1 40       	sbci	r29, 0x01	; 1
    28e4:	c4 5b       	subi	r28, 0xB4	; 180
    28e6:	de 4f       	sbci	r29, 0xFE	; 254
    28e8:	19 82       	std	Y+1, r1	; 0x01
    28ea:	18 82       	st	Y, r1
    28ec:	cc 54       	subi	r28, 0x4C	; 76
    28ee:	d1 40       	sbci	r29, 0x01	; 1
    28f0:	c2 5b       	subi	r28, 0xB2	; 178
    28f2:	de 4f       	sbci	r29, 0xFE	; 254
    28f4:	19 82       	std	Y+1, r1	; 0x01
    28f6:	18 82       	st	Y, r1
    28f8:	ce 54       	subi	r28, 0x4E	; 78
    28fa:	d1 40       	sbci	r29, 0x01	; 1
    28fc:	c0 5b       	subi	r28, 0xB0	; 176
    28fe:	de 4f       	sbci	r29, 0xFE	; 254
    2900:	18 82       	st	Y, r1
    2902:	c0 55       	subi	r28, 0x50	; 80
    2904:	d1 40       	sbci	r29, 0x01	; 1
	int lenAfter = Helpers::base64_decode((uint8_t*)&sdAfter, (uint8_t*)output, len);
    2906:	a7 01       	movw	r20, r14
    2908:	be 01       	movw	r22, r28
    290a:	67 53       	subi	r22, 0x37	; 55
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	ce 01       	movw	r24, r28
    2910:	89 5b       	subi	r24, 0xB9	; 185
    2912:	9e 4f       	sbci	r25, 0xFE	; 254
    2914:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN7Helpers13base64_decodeEPhS0_i>
    2918:	7c 01       	movw	r14, r24
	RM_LOG2("Decoded result received over Web has size of ", lenAfter);
    291a:	66 e3       	ldi	r22, 0x36	; 54
    291c:	72 e0       	ldi	r23, 0x02	; 2
    291e:	87 e8       	ldi	r24, 0x87	; 135
    2920:	94 e0       	ldi	r25, 0x04	; 4
    2922:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    2926:	66 e4       	ldi	r22, 0x46	; 70
    2928:	71 e0       	ldi	r23, 0x01	; 1
    292a:	87 e8       	ldi	r24, 0x87	; 135
    292c:	94 e0       	ldi	r25, 0x04	; 4
    292e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN5Print5printEPKc>
    2932:	4a e0       	ldi	r20, 0x0A	; 10
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	b7 01       	movw	r22, r14
    2938:	87 e8       	ldi	r24, 0x87	; 135
    293a:	94 e0       	ldi	r25, 0x04	; 4
    293c:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <_ZN5Print7printlnEii>
	Helpers::printSensorData(&sdAfter);
    2940:	ce 01       	movw	r24, r28
    2942:	89 5b       	subi	r24, 0xB9	; 185
    2944:	9e 4f       	sbci	r25, 0xFE	; 254
    2946:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7Helpers15printSensorDataEP10SensorData>
	
	if (sdAfter.battVoltage != sd.battVoltage) RM_LOGLN(F("*** ENC TEST FAIL @1 ***"));
    294a:	c8 5b       	subi	r28, 0xB8	; 184
    294c:	de 4f       	sbci	r29, 0xFE	; 254
    294e:	28 81       	ld	r18, Y
    2950:	39 81       	ldd	r19, Y+1	; 0x01
    2952:	c8 54       	subi	r28, 0x48	; 72
    2954:	d1 40       	sbci	r29, 0x01	; 1
    2956:	ce 5a       	subi	r28, 0xAE	; 174
    2958:	de 4f       	sbci	r29, 0xFE	; 254
    295a:	88 81       	ld	r24, Y
    295c:	99 81       	ldd	r25, Y+1	; 0x01
    295e:	c2 55       	subi	r28, 0x52	; 82
    2960:	d1 40       	sbci	r29, 0x01	; 1
    2962:	28 17       	cp	r18, r24
    2964:	39 07       	cpc	r19, r25
    2966:	31 f0       	breq	.+12     	; 0x2974 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x37a>
    2968:	63 ed       	ldi	r22, 0xD3	; 211
    296a:	74 e0       	ldi	r23, 0x04	; 4
    296c:	87 e8       	ldi	r24, 0x87	; 135
    296e:	94 e0       	ldi	r25, 0x04	; 4
    2970:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.current != sd.current) RM_LOGLN(F("*** ENC TEST FAIL @2 ***"));
    2974:	c6 5b       	subi	r28, 0xB6	; 182
    2976:	de 4f       	sbci	r29, 0xFE	; 254
    2978:	28 81       	ld	r18, Y
    297a:	39 81       	ldd	r19, Y+1	; 0x01
    297c:	ca 54       	subi	r28, 0x4A	; 74
    297e:	d1 40       	sbci	r29, 0x01	; 1
    2980:	cc 5a       	subi	r28, 0xAC	; 172
    2982:	de 4f       	sbci	r29, 0xFE	; 254
    2984:	88 81       	ld	r24, Y
    2986:	99 81       	ldd	r25, Y+1	; 0x01
    2988:	c4 55       	subi	r28, 0x54	; 84
    298a:	d1 40       	sbci	r29, 0x01	; 1
    298c:	28 17       	cp	r18, r24
    298e:	39 07       	cpc	r19, r25
    2990:	31 f0       	breq	.+12     	; 0x299e <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3a4>
    2992:	6a eb       	ldi	r22, 0xBA	; 186
    2994:	74 e0       	ldi	r23, 0x04	; 4
    2996:	87 e8       	ldi	r24, 0x87	; 135
    2998:	94 e0       	ldi	r25, 0x04	; 4
    299a:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.errorChar != sd.errorChar) RM_LOGLN(F("*** ENC TEST FAIL @3 ***"));
    299e:	c0 5b       	subi	r28, 0xB0	; 176
    29a0:	de 4f       	sbci	r29, 0xFE	; 254
    29a2:	98 81       	ld	r25, Y
    29a4:	c0 55       	subi	r28, 0x50	; 80
    29a6:	d1 40       	sbci	r29, 0x01	; 1
    29a8:	c6 5a       	subi	r28, 0xA6	; 166
    29aa:	de 4f       	sbci	r29, 0xFE	; 254
    29ac:	88 81       	ld	r24, Y
    29ae:	ca 55       	subi	r28, 0x5A	; 90
    29b0:	d1 40       	sbci	r29, 0x01	; 1
    29b2:	98 17       	cp	r25, r24
    29b4:	31 f0       	breq	.+12     	; 0x29c2 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3c8>
    29b6:	61 ea       	ldi	r22, 0xA1	; 161
    29b8:	74 e0       	ldi	r23, 0x04	; 4
    29ba:	87 e8       	ldi	r24, 0x87	; 135
    29bc:	94 e0       	ldi	r25, 0x04	; 4
    29be:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.pVVoltage != sd.pVVoltage) RM_LOGLN(F("*** ENC TEST FAIL @4 ***"));
    29c2:	c4 5b       	subi	r28, 0xB4	; 180
    29c4:	de 4f       	sbci	r29, 0xFE	; 254
    29c6:	28 81       	ld	r18, Y
    29c8:	39 81       	ldd	r19, Y+1	; 0x01
    29ca:	cc 54       	subi	r28, 0x4C	; 76
    29cc:	d1 40       	sbci	r29, 0x01	; 1
    29ce:	ca 5a       	subi	r28, 0xAA	; 170
    29d0:	de 4f       	sbci	r29, 0xFE	; 254
    29d2:	88 81       	ld	r24, Y
    29d4:	99 81       	ldd	r25, Y+1	; 0x01
    29d6:	c6 55       	subi	r28, 0x56	; 86
    29d8:	d1 40       	sbci	r29, 0x01	; 1
    29da:	28 17       	cp	r18, r24
    29dc:	39 07       	cpc	r19, r25
    29de:	31 f0       	breq	.+12     	; 0x29ec <_ZN13ExtendedTests20runExtendedTypesTestEv+0x3f2>
    29e0:	68 e8       	ldi	r22, 0x88	; 136
    29e2:	74 e0       	ldi	r23, 0x04	; 4
    29e4:	87 e8       	ldi	r24, 0x87	; 135
    29e6:	94 e0       	ldi	r25, 0x04	; 4
    29e8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	if (sdAfter.temperature != sd.temperature) RM_LOGLN(F("*** ENC TEST FAIL @5 ***"));
    29ec:	c2 5b       	subi	r28, 0xB2	; 178
    29ee:	de 4f       	sbci	r29, 0xFE	; 254
    29f0:	28 81       	ld	r18, Y
    29f2:	39 81       	ldd	r19, Y+1	; 0x01
    29f4:	ce 54       	subi	r28, 0x4E	; 78
    29f6:	d1 40       	sbci	r29, 0x01	; 1
    29f8:	c8 5a       	subi	r28, 0xA8	; 168
    29fa:	de 4f       	sbci	r29, 0xFE	; 254
    29fc:	88 81       	ld	r24, Y
    29fe:	99 81       	ldd	r25, Y+1	; 0x01
    2a00:	c8 55       	subi	r28, 0x58	; 88
    2a02:	d1 40       	sbci	r29, 0x01	; 1
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	31 f0       	breq	.+12     	; 0x2a16 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x41c>
    2a0a:	6f e6       	ldi	r22, 0x6F	; 111
    2a0c:	74 e0       	ldi	r23, 0x04	; 4
    2a0e:	87 e8       	ldi	r24, 0x87	; 135
    2a10:	94 e0       	ldi	r25, 0x04	; 4
    2a12:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	RM_LOGLN(F("--------------------------"));
    2a16:	64 e5       	ldi	r22, 0x54	; 84
    2a18:	74 e0       	ldi	r23, 0x04	; 4
    2a1a:	87 e8       	ldi	r24, 0x87	; 135
    2a1c:	94 e0       	ldi	r25, 0x04	; 4
    2a1e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2a22:	f6 01       	movw	r30, r12
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 83       	st	Z, r24
    2a28:	12 82       	std	Z+2, r1	; 0x02
    2a2a:	11 82       	std	Z+1, r1	; 0x01
    2a2c:	14 82       	std	Z+4, r1	; 0x04
    2a2e:	13 82       	std	Z+3, r1	; 0x03
    2a30:	16 82       	std	Z+6, r1	; 0x06
    2a32:	15 82       	std	Z+5, r1	; 0x05
    2a34:	10 86       	std	Z+8, r1	; 0x08
    2a36:	17 82       	std	Z+7, r1	; 0x07
    2a38:	11 86       	std	Z+9, r1	; 0x09
    2a3a:	3a 96       	adiw	r30, 0x0a	; 10
	
	//2) Test a large sequence of them to ensure correctness- MAX_READINGS constant?
	
	uint8_t COUNT = 10;
	SensorData bulkSd[COUNT];
    2a3c:	0e 17       	cp	r16, r30
    2a3e:	1f 07       	cpc	r17, r31
    2a40:	91 f7       	brne	.-28     	; 0x2a26 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x42c>
	FONA_GET_RSSI rssi;
	rssi.rssi = 15;
	rssi.ber = 3;
	rssi.netReg = (FONA_GET_NETREG)(FONA_GET_NETREG::NETSTAT_4 | FONA_GET_NETREG::RESULT_CODE_1);
	
	GsmPayload gsm;
    2a42:	ce 01       	movw	r24, r28
    2a44:	86 5c       	subi	r24, 0xC6	; 198
    2a46:	9e 4f       	sbci	r25, 0xFE	; 254
    2a48:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN10GsmPayloadC1Ev>
	gsm.moduleId=33;
    2a4c:	81 e2       	ldi	r24, 0x21	; 33
    2a4e:	c6 5c       	subi	r28, 0xC6	; 198
    2a50:	de 4f       	sbci	r29, 0xFE	; 254
    2a52:	88 83       	st	Y, r24
    2a54:	ca 53       	subi	r28, 0x3A	; 58
    2a56:	d1 40       	sbci	r29, 0x01	; 1
	gsm.thisBootNumber = 1026;
    2a58:	82 e0       	ldi	r24, 0x02	; 2
    2a5a:	94 e0       	ldi	r25, 0x04	; 4
    2a5c:	c5 5c       	subi	r28, 0xC5	; 197
    2a5e:	de 4f       	sbci	r29, 0xFE	; 254
    2a60:	99 83       	std	Y+1, r25	; 0x01
    2a62:	88 83       	st	Y, r24
    2a64:	cb 53       	subi	r28, 0x3B	; 59
    2a66:	d1 40       	sbci	r29, 0x01	; 1
	gsm.rssi = rssi;
    2a68:	8f e0       	ldi	r24, 0x0F	; 15
    2a6a:	c3 5c       	subi	r28, 0xC3	; 195
    2a6c:	de 4f       	sbci	r29, 0xFE	; 254
    2a6e:	88 83       	st	Y, r24
    2a70:	cd 53       	subi	r28, 0x3D	; 61
    2a72:	d1 40       	sbci	r29, 0x01	; 1
    2a74:	83 e0       	ldi	r24, 0x03	; 3
    2a76:	c2 5c       	subi	r28, 0xC2	; 194
    2a78:	de 4f       	sbci	r29, 0xFE	; 254
    2a7a:	88 83       	st	Y, r24
    2a7c:	ce 53       	subi	r28, 0x3E	; 62
    2a7e:	d1 40       	sbci	r29, 0x01	; 1
    2a80:	c1 5c       	subi	r28, 0xC1	; 193
    2a82:	de 4f       	sbci	r29, 0xFE	; 254
    2a84:	18 82       	st	Y, r1
    2a86:	cf 53       	subi	r28, 0x3F	; 63
    2a88:	d1 40       	sbci	r29, 0x01	; 1
    2a8a:	81 e1       	ldi	r24, 0x11	; 17
    2a8c:	c0 5c       	subi	r28, 0xC0	; 192
    2a8e:	de 4f       	sbci	r29, 0xFE	; 254
    2a90:	88 83       	st	Y, r24
    2a92:	c0 54       	subi	r28, 0x40	; 64
    2a94:	d1 40       	sbci	r29, 0x01	; 1
	gsm.addSensorData(&bulkSd[0], COUNT);
    2a96:	4a e0       	ldi	r20, 0x0A	; 10
    2a98:	b6 01       	movw	r22, r12
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	86 5c       	subi	r24, 0xC6	; 198
    2a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2aa0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_ZN10GsmPayload13addSensorDataEP10SensorDatah>
	
	//TODO: gsm.getPayloadLength() ? for char count?
	char forWeb[100] {0};
    2aa4:	84 e6       	ldi	r24, 0x64	; 100
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	11 92       	st	Z+, r1
    2aaa:	8a 95       	dec	r24
    2aac:	e9 f7       	brne	.-6      	; 0x2aa8 <_ZN13ExtendedTests20runExtendedTypesTestEv+0x4ae>
	gsm.createPayload((uint8_t*)(&forWeb[0]), 100);//createEncodedPayload(&forWeb[0], 1000);
    2aae:	44 e6       	ldi	r20, 0x64	; 100
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	b8 01       	movw	r22, r16
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	86 5c       	subi	r24, 0xC6	; 198
    2ab8:	9e 4f       	sbci	r25, 0xFE	; 254
    2aba:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN10GsmPayload13createPayloadEPhj>
	
	RM_LOGLN(F("GSM Payload To Be Sent Over Web:"));
    2abe:	63 e3       	ldi	r22, 0x33	; 51
    2ac0:	74 e0       	ldi	r23, 0x04	; 4
    2ac2:	87 e8       	ldi	r24, 0x87	; 135
    2ac4:	94 e0       	ldi	r25, 0x04	; 4
    2ac6:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printByteArray((uint8_t*)(&forWeb[0]), 20);
    2aca:	64 e1       	ldi	r22, 0x14	; 20
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	c8 01       	movw	r24, r16
    2ad0:	0e 94 80 0a 	call	0x1500	; 0x1500 <_ZN7Helpers14printByteArrayEPhj>
	GsmPayload readGsm;
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	83 5d       	subi	r24, 0xD3	; 211
    2ad8:	9e 4f       	sbci	r25, 0xFE	; 254
    2ada:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN10GsmPayloadC1Ev>
	readGsm.readPayload((uint8_t*)(&forWeb[0]));
    2ade:	b8 01       	movw	r22, r16
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	83 5d       	subi	r24, 0xD3	; 211
    2ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ae6:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN10GsmPayload11readPayloadEPh>
	
	RM_LOGLN(F("------------------------"));
    2aea:	6a e1       	ldi	r22, 0x1A	; 26
    2aec:	74 e0       	ldi	r23, 0x04	; 4
    2aee:	87 e8       	ldi	r24, 0x87	; 135
    2af0:	94 e0       	ldi	r25, 0x04	; 4
    2af2:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	
#else
RM_LOGLN(F("*** FAIL ETT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2af6:	c2 5a       	subi	r28, 0xA2	; 162
    2af8:	de 4f       	sbci	r29, 0xFE	; 254
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
    2b14:	bf 90       	pop	r11
    2b16:	08 95       	ret

00002b18 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2b18:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2b1a:	91 8d       	ldd	r25, Z+25	; 0x19
    2b1c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b1e:	89 2f       	mov	r24, r25
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	80 5c       	subi	r24, 0xC0	; 192
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	82 1b       	sub	r24, r18
    2b28:	91 09       	sbc	r25, r1
}
    2b2a:	8f 73       	andi	r24, 0x3F	; 63
    2b2c:	99 27       	eor	r25, r25
    2b2e:	08 95       	ret

00002b30 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2b30:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b32:	91 8d       	ldd	r25, Z+25	; 0x19
    2b34:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b36:	98 17       	cp	r25, r24
    2b38:	31 f0       	breq	.+12     	; 0x2b46 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f1 1d       	adc	r31, r1
    2b40:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b46:	8f ef       	ldi	r24, 0xFF	; 255
    2b48:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2b4a:	08 95       	ret

00002b4c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2b4c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b4e:	91 8d       	ldd	r25, Z+25	; 0x19
    2b50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b52:	98 17       	cp	r25, r24
    2b54:	61 f0       	breq	.+24     	; 0x2b6e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2b56:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b58:	df 01       	movw	r26, r30
    2b5a:	a8 0f       	add	r26, r24
    2b5c:	b1 1d       	adc	r27, r1
    2b5e:	5d 96       	adiw	r26, 0x1d	; 29
    2b60:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2b62:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b64:	9f 5f       	subi	r25, 0xFF	; 255
    2b66:	9f 73       	andi	r25, 0x3F	; 63
    2b68:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b6e:	8f ef       	ldi	r24, 0xFF	; 255
    2b70:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2b72:	08 95       	ret

00002b74 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2b74:	8f e0       	ldi	r24, 0x0F	; 15
    2b76:	97 e1       	ldi	r25, 0x17	; 23
    2b78:	89 2b       	or	r24, r25
    2b7a:	49 f0       	breq	.+18     	; 0x2b8e <_Z14serialEventRunv+0x1a>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	89 2b       	or	r24, r25
    2b82:	29 f0       	breq	.+10     	; 0x2b8e <_Z14serialEventRunv+0x1a>
    2b84:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <_Z17Serial0_availablev>
    2b88:	81 11       	cpse	r24, r1
    2b8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2b8e:	08 95       	ret

00002b90 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2b90:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2b92:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b94:	df 01       	movw	r26, r30
    2b96:	a8 0f       	add	r26, r24
    2b98:	b1 1d       	adc	r27, r1
    2b9a:	a3 5a       	subi	r26, 0xA3	; 163
    2b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2ba0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	8f 73       	andi	r24, 0x3F	; 63
    2ba8:	99 27       	eor	r25, r25
    2baa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2bac:	a6 89       	ldd	r26, Z+22	; 0x16
    2bae:	b7 89       	ldd	r27, Z+23	; 0x17
    2bb0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2bb2:	a0 89       	ldd	r26, Z+16	; 0x10
    2bb4:	b1 89       	ldd	r27, Z+17	; 0x11
    2bb6:	8c 91       	ld	r24, X
    2bb8:	80 64       	ori	r24, 0x40	; 64
    2bba:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2bbc:	93 8d       	ldd	r25, Z+27	; 0x1b
    2bbe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bc0:	98 13       	cpse	r25, r24
    2bc2:	06 c0       	rjmp	.+12     	; 0x2bd0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2bc4:	02 88       	ldd	r0, Z+18	; 0x12
    2bc6:	f3 89       	ldd	r31, Z+19	; 0x13
    2bc8:	e0 2d       	mov	r30, r0
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 7d       	andi	r24, 0xDF	; 223
    2bce:	80 83       	st	Z, r24
    2bd0:	08 95       	ret

00002bd2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	ec 01       	movw	r28, r24
  _written = true;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2be4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2be6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2be8:	98 13       	cpse	r25, r24
    2bea:	05 c0       	rjmp	.+10     	; 0x2bf6 <_ZN14HardwareSerial5writeEh+0x24>
    2bec:	e8 89       	ldd	r30, Y+16	; 0x10
    2bee:	f9 89       	ldd	r31, Y+17	; 0x11
    2bf0:	80 81       	ld	r24, Z
    2bf2:	85 fd       	sbrc	r24, 5
    2bf4:	24 c0       	rjmp	.+72     	; 0x2c3e <_ZN14HardwareSerial5writeEh+0x6c>
    2bf6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2bf8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2bfa:	10 e0       	ldi	r17, 0x00	; 0
    2bfc:	0f 5f       	subi	r16, 0xFF	; 255
    2bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2c00:	0f 73       	andi	r16, 0x3F	; 63
    2c02:	11 27       	eor	r17, r17
    2c04:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2c06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c08:	e8 12       	cpse	r14, r24
    2c0a:	0c c0       	rjmp	.+24     	; 0x2c24 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	07 fc       	sbrc	r0, 7
    2c10:	fa cf       	rjmp	.-12     	; 0x2c06 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2c12:	e8 89       	ldd	r30, Y+16	; 0x10
    2c14:	f9 89       	ldd	r31, Y+17	; 0x11
    2c16:	80 81       	ld	r24, Z
    2c18:	85 ff       	sbrs	r24, 5
    2c1a:	f5 cf       	rjmp	.-22     	; 0x2c06 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2c22:	f1 cf       	rjmp	.-30     	; 0x2c06 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c26:	fe 01       	movw	r30, r28
    2c28:	e8 0f       	add	r30, r24
    2c2a:	f1 1d       	adc	r31, r1
    2c2c:	e3 5a       	subi	r30, 0xA3	; 163
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2c32:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2c34:	ea 89       	ldd	r30, Y+18	; 0x12
    2c36:	fb 89       	ldd	r31, Y+19	; 0x13
    2c38:	80 81       	ld	r24, Z
    2c3a:	80 62       	ori	r24, 0x20	; 32
    2c3c:	07 c0       	rjmp	.+14     	; 0x2c4c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2c3e:	ee 89       	ldd	r30, Y+22	; 0x16
    2c40:	ff 89       	ldd	r31, Y+23	; 0x17
    2c42:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2c44:	e8 89       	ldd	r30, Y+16	; 0x10
    2c46:	f9 89       	ldd	r31, Y+17	; 0x11
    2c48:	80 81       	ld	r24, Z
    2c4a:	80 64       	ori	r24, 0x40	; 64
    2c4c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
    2c58:	0f 91       	pop	r16
    2c5a:	ff 90       	pop	r15
    2c5c:	ef 90       	pop	r14
    2c5e:	08 95       	ret

00002c60 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2c66:	88 8d       	ldd	r24, Y+24	; 0x18
    2c68:	88 23       	and	r24, r24
    2c6a:	c9 f0       	breq	.+50     	; 0x2c9e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2c6c:	ea 89       	ldd	r30, Y+18	; 0x12
    2c6e:	fb 89       	ldd	r31, Y+19	; 0x13
    2c70:	80 81       	ld	r24, Z
    2c72:	85 fd       	sbrc	r24, 5
    2c74:	05 c0       	rjmp	.+10     	; 0x2c80 <_ZN14HardwareSerial5flushEv+0x20>
    2c76:	a8 89       	ldd	r26, Y+16	; 0x10
    2c78:	b9 89       	ldd	r27, Y+17	; 0x11
    2c7a:	8c 91       	ld	r24, X
    2c7c:	86 fd       	sbrc	r24, 6
    2c7e:	0f c0       	rjmp	.+30     	; 0x2c9e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	07 fc       	sbrc	r0, 7
    2c84:	f5 cf       	rjmp	.-22     	; 0x2c70 <_ZN14HardwareSerial5flushEv+0x10>
    2c86:	80 81       	ld	r24, Z
    2c88:	85 ff       	sbrs	r24, 5
    2c8a:	f2 cf       	rjmp	.-28     	; 0x2c70 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2c8c:	a8 89       	ldd	r26, Y+16	; 0x10
    2c8e:	b9 89       	ldd	r27, Y+17	; 0x11
    2c90:	8c 91       	ld	r24, X
    2c92:	85 ff       	sbrs	r24, 5
    2c94:	ed cf       	rjmp	.-38     	; 0x2c70 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2c96:	ce 01       	movw	r24, r28
    2c98:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2c9c:	e7 cf       	rjmp	.-50     	; 0x2c6c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	08 95       	ret

00002ca4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ec 01       	movw	r28, r24
    2cb4:	6a 01       	movw	r12, r20
    2cb6:	7b 01       	movw	r14, r22
    2cb8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2cba:	e8 89       	ldd	r30, Y+16	; 0x10
    2cbc:	f9 89       	ldd	r31, Y+17	; 0x11
    2cbe:	82 e0       	ldi	r24, 0x02	; 2
    2cc0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2cc2:	41 15       	cp	r20, r1
    2cc4:	51 4e       	sbci	r21, 0xE1	; 225
    2cc6:	61 05       	cpc	r22, r1
    2cc8:	71 05       	cpc	r23, r1
    2cca:	b1 f0       	breq	.+44     	; 0x2cf8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2ccc:	60 e0       	ldi	r22, 0x00	; 0
    2cce:	79 e0       	ldi	r23, 0x09	; 9
    2cd0:	8d e3       	ldi	r24, 0x3D	; 61
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a7 01       	movw	r20, r14
    2cd6:	96 01       	movw	r18, r12
    2cd8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__udivmodsi4>
    2cdc:	da 01       	movw	r26, r20
    2cde:	c9 01       	movw	r24, r18
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	a1 09       	sbc	r26, r1
    2ce4:	b1 09       	sbc	r27, r1
    2ce6:	b6 95       	lsr	r27
    2ce8:	a7 95       	ror	r26
    2cea:	97 95       	ror	r25
    2cec:	87 95       	ror	r24
    2cee:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2cf0:	21 15       	cp	r18, r1
    2cf2:	80 e1       	ldi	r24, 0x10	; 16
    2cf4:	38 07       	cpc	r19, r24
    2cf6:	a8 f0       	brcs	.+42     	; 0x2d22 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2cf8:	e8 89       	ldd	r30, Y+16	; 0x10
    2cfa:	f9 89       	ldd	r31, Y+17	; 0x11
    2cfc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2cfe:	60 e8       	ldi	r22, 0x80	; 128
    2d00:	74 e8       	ldi	r23, 0x84	; 132
    2d02:	8e e1       	ldi	r24, 0x1E	; 30
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a7 01       	movw	r20, r14
    2d08:	96 01       	movw	r18, r12
    2d0a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__udivmodsi4>
    2d0e:	da 01       	movw	r26, r20
    2d10:	c9 01       	movw	r24, r18
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	a1 09       	sbc	r26, r1
    2d16:	b1 09       	sbc	r27, r1
    2d18:	b6 95       	lsr	r27
    2d1a:	a7 95       	ror	r26
    2d1c:	97 95       	ror	r25
    2d1e:	87 95       	ror	r24
    2d20:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d22:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d24:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d26:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2d28:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d2a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d2c:	20 83       	st	Z, r18

  _written = false;
    2d2e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2d30:	ec 89       	ldd	r30, Y+20	; 0x14
    2d32:	fd 89       	ldd	r31, Y+21	; 0x15
    2d34:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2d36:	ea 89       	ldd	r30, Y+18	; 0x12
    2d38:	fb 89       	ldd	r31, Y+19	; 0x13
    2d3a:	80 81       	ld	r24, Z
    2d3c:	80 61       	ori	r24, 0x10	; 16
    2d3e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2d40:	ea 89       	ldd	r30, Y+18	; 0x12
    2d42:	fb 89       	ldd	r31, Y+19	; 0x13
    2d44:	80 81       	ld	r24, Z
    2d46:	88 60       	ori	r24, 0x08	; 8
    2d48:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2d4a:	ea 89       	ldd	r30, Y+18	; 0x12
    2d4c:	fb 89       	ldd	r31, Y+19	; 0x13
    2d4e:	80 81       	ld	r24, Z
    2d50:	80 68       	ori	r24, 0x80	; 128
    2d52:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2d54:	ea 89       	ldd	r30, Y+18	; 0x12
    2d56:	fb 89       	ldd	r31, Y+19	; 0x13
    2d58:	80 81       	ld	r24, Z
    2d5a:	8f 7d       	andi	r24, 0xDF	; 223
    2d5c:	80 83       	st	Z, r24
}
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	08 95       	ret

00002d6e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2d6e:	1f 92       	push	r1
    2d70:	0f 92       	push	r0
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	0f 92       	push	r0
    2d76:	11 24       	eor	r1, r1
    2d78:	2f 93       	push	r18
    2d7a:	8f 93       	push	r24
    2d7c:	9f 93       	push	r25
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2d82:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <Serial+0x10>
    2d86:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <Serial+0x11>
    2d8a:	80 81       	ld	r24, Z
    2d8c:	e0 91 9d 04 	lds	r30, 0x049D	; 0x80049d <Serial+0x16>
    2d90:	f0 91 9e 04 	lds	r31, 0x049E	; 0x80049e <Serial+0x17>
    2d94:	82 fd       	sbrc	r24, 2
    2d96:	12 c0       	rjmp	.+36     	; 0x2dbc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2d98:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2d9a:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Serial+0x19>
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2da2:	20 91 a1 04 	lds	r18, 0x04A1	; 0x8004a1 <Serial+0x1a>
    2da6:	82 17       	cp	r24, r18
    2da8:	51 f0       	breq	.+20     	; 0x2dbe <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2daa:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Serial+0x19>
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	e9 57       	subi	r30, 0x79	; 121
    2db2:	fb 4f       	sbci	r31, 0xFB	; 251
    2db4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2db6:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Serial+0x19>
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2dbc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	9f 91       	pop	r25
    2dc4:	8f 91       	pop	r24
    2dc6:	2f 91       	pop	r18
    2dc8:	0f 90       	pop	r0
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	0f 90       	pop	r0
    2dce:	1f 90       	pop	r1
    2dd0:	18 95       	reti

00002dd2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2dd2:	1f 92       	push	r1
    2dd4:	0f 92       	push	r0
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	0f 92       	push	r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	2f 93       	push	r18
    2dde:	3f 93       	push	r19
    2de0:	4f 93       	push	r20
    2de2:	5f 93       	push	r21
    2de4:	6f 93       	push	r22
    2de6:	7f 93       	push	r23
    2de8:	8f 93       	push	r24
    2dea:	9f 93       	push	r25
    2dec:	af 93       	push	r26
    2dee:	bf 93       	push	r27
    2df0:	ef 93       	push	r30
    2df2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2df4:	87 e8       	ldi	r24, 0x87	; 135
    2df6:	94 e0       	ldi	r25, 0x04	; 4
    2df8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2dfc:	ff 91       	pop	r31
    2dfe:	ef 91       	pop	r30
    2e00:	bf 91       	pop	r27
    2e02:	af 91       	pop	r26
    2e04:	9f 91       	pop	r25
    2e06:	8f 91       	pop	r24
    2e08:	7f 91       	pop	r23
    2e0a:	6f 91       	pop	r22
    2e0c:	5f 91       	pop	r21
    2e0e:	4f 91       	pop	r20
    2e10:	3f 91       	pop	r19
    2e12:	2f 91       	pop	r18
    2e14:	0f 90       	pop	r0
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	0f 90       	pop	r0
    2e1a:	1f 90       	pop	r1
    2e1c:	18 95       	reti

00002e1e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2e1e:	87 e8       	ldi	r24, 0x87	; 135
    2e20:	94 e0       	ldi	r25, 0x04	; 4
    2e22:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <_ZN14HardwareSerial9availableEv>
    2e26:	21 e0       	ldi	r18, 0x01	; 1
    2e28:	89 2b       	or	r24, r25
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <_Z17Serial0_availablev+0x10>
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
}
    2e2e:	82 2f       	mov	r24, r18
    2e30:	08 95       	ret

00002e32 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2e32:	e7 e8       	ldi	r30, 0x87	; 135
    2e34:	f4 e0       	ldi	r31, 0x04	; 4
    2e36:	13 82       	std	Z+3, r1	; 0x03
    2e38:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2e3a:	88 ee       	ldi	r24, 0xE8	; 232
    2e3c:	93 e0       	ldi	r25, 0x03	; 3
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	84 83       	std	Z+4, r24	; 0x04
    2e44:	95 83       	std	Z+5, r25	; 0x05
    2e46:	a6 83       	std	Z+6, r26	; 0x06
    2e48:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2e4a:	88 e6       	ldi	r24, 0x68	; 104
    2e4c:	92 e0       	ldi	r25, 0x02	; 2
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	85 ec       	ldi	r24, 0xC5	; 197
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	95 87       	std	Z+13, r25	; 0x0d
    2e58:	84 87       	std	Z+12, r24	; 0x0c
    2e5a:	84 ec       	ldi	r24, 0xC4	; 196
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	97 87       	std	Z+15, r25	; 0x0f
    2e60:	86 87       	std	Z+14, r24	; 0x0e
    2e62:	80 ec       	ldi	r24, 0xC0	; 192
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	91 8b       	std	Z+17, r25	; 0x11
    2e68:	80 8b       	std	Z+16, r24	; 0x10
    2e6a:	81 ec       	ldi	r24, 0xC1	; 193
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	93 8b       	std	Z+19, r25	; 0x13
    2e70:	82 8b       	std	Z+18, r24	; 0x12
    2e72:	82 ec       	ldi	r24, 0xC2	; 194
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	95 8b       	std	Z+21, r25	; 0x15
    2e78:	84 8b       	std	Z+20, r24	; 0x14
    2e7a:	86 ec       	ldi	r24, 0xC6	; 198
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	97 8b       	std	Z+23, r25	; 0x17
    2e80:	86 8b       	std	Z+22, r24	; 0x16
    2e82:	11 8e       	std	Z+25, r1	; 0x19
    2e84:	12 8e       	std	Z+26, r1	; 0x1a
    2e86:	13 8e       	std	Z+27, r1	; 0x1b
    2e88:	14 8e       	std	Z+28, r1	; 0x1c
    2e8a:	08 95       	ret

00002e8c <initVariant>:
    2e8c:	08 95       	ret

00002e8e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2e8e:	0e 94 91 19 	call	0x3322	; 0x3322 <init>

	initVariant();
    2e92:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2e96:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2e9a:	ca eb       	ldi	r28, 0xBA	; 186
    2e9c:	d5 e1       	ldi	r29, 0x15	; 21
#endif
	
	setup();
    
	for (;;) {
		loop();
    2e9e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <loop>
		if (serialEventRun) serialEventRun();
    2ea2:	20 97       	sbiw	r28, 0x00	; 0
    2ea4:	e1 f3       	breq	.-8      	; 0x2e9e <main+0x10>
    2ea6:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_Z14serialEventRunv>
    2eaa:	f9 cf       	rjmp	.-14     	; 0x2e9e <main+0x10>

00002eac <_Znwj>:
    2eac:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <malloc>

00002eb0 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	6c 01       	movw	r12, r24
    2ec2:	7a 01       	movw	r14, r20
    2ec4:	8b 01       	movw	r16, r22
    2ec6:	c0 e0       	ldi	r28, 0x00	; 0
    2ec8:	d0 e0       	ldi	r29, 0x00	; 0
    2eca:	ce 15       	cp	r28, r14
    2ecc:	df 05       	cpc	r29, r15
    2ece:	81 f0       	breq	.+32     	; 0x2ef0 <_ZN5Print5writeEPKhj+0x40>
    2ed0:	d8 01       	movw	r26, r16
    2ed2:	6d 91       	ld	r22, X+
    2ed4:	8d 01       	movw	r16, r26
    2ed6:	d6 01       	movw	r26, r12
    2ed8:	ed 91       	ld	r30, X+
    2eda:	fc 91       	ld	r31, X
    2edc:	01 90       	ld	r0, Z+
    2ede:	f0 81       	ld	r31, Z
    2ee0:	e0 2d       	mov	r30, r0
    2ee2:	c6 01       	movw	r24, r12
    2ee4:	09 95       	icall
    2ee6:	89 2b       	or	r24, r25
    2ee8:	11 f0       	breq	.+4      	; 0x2eee <_ZN5Print5writeEPKhj+0x3e>
    2eea:	21 96       	adiw	r28, 0x01	; 1
    2eec:	ee cf       	rjmp	.-36     	; 0x2eca <_ZN5Print5writeEPKhj+0x1a>
    2eee:	7e 01       	movw	r14, r28
    2ef0:	c7 01       	movw	r24, r14
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	08 95       	ret

00002f04 <_ZN5Print5writeEPKc>:
    2f04:	61 15       	cp	r22, r1
    2f06:	71 05       	cpc	r23, r1
    2f08:	79 f0       	breq	.+30     	; 0x2f28 <_ZN5Print5writeEPKc+0x24>
    2f0a:	fb 01       	movw	r30, r22
    2f0c:	01 90       	ld	r0, Z+
    2f0e:	00 20       	and	r0, r0
    2f10:	e9 f7       	brne	.-6      	; 0x2f0c <_ZN5Print5writeEPKc+0x8>
    2f12:	31 97       	sbiw	r30, 0x01	; 1
    2f14:	af 01       	movw	r20, r30
    2f16:	46 1b       	sub	r20, r22
    2f18:	57 0b       	sbc	r21, r23
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	ed 91       	ld	r30, X+
    2f1e:	fc 91       	ld	r31, X
    2f20:	02 80       	ldd	r0, Z+2	; 0x02
    2f22:	f3 81       	ldd	r31, Z+3	; 0x03
    2f24:	e0 2d       	mov	r30, r0
    2f26:	09 94       	ijmp
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	08 95       	ret

00002f2e <_ZN5Print5printEPK19__FlashStringHelper>:
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	8c 01       	movw	r16, r24
    2f3c:	7b 01       	movw	r14, r22
    2f3e:	c0 e0       	ldi	r28, 0x00	; 0
    2f40:	d0 e0       	ldi	r29, 0x00	; 0
    2f42:	f7 01       	movw	r30, r14
    2f44:	ec 0f       	add	r30, r28
    2f46:	fd 1f       	adc	r31, r29
    2f48:	64 91       	lpm	r22, Z
    2f4a:	66 23       	and	r22, r22
    2f4c:	61 f0       	breq	.+24     	; 0x2f66 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2f4e:	d8 01       	movw	r26, r16
    2f50:	ed 91       	ld	r30, X+
    2f52:	fc 91       	ld	r31, X
    2f54:	01 90       	ld	r0, Z+
    2f56:	f0 81       	ld	r31, Z
    2f58:	e0 2d       	mov	r30, r0
    2f5a:	c8 01       	movw	r24, r16
    2f5c:	09 95       	icall
    2f5e:	89 2b       	or	r24, r25
    2f60:	11 f0       	breq	.+4      	; 0x2f66 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2f62:	21 96       	adiw	r28, 0x01	; 1
    2f64:	ee cf       	rjmp	.-36     	; 0x2f42 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2f66:	ce 01       	movw	r24, r28
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	08 95       	ret

00002f76 <_ZN5Print5printEPKc>:
    2f76:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <_ZN5Print5writeEPKc>

00002f7a <_ZN5Print5printEc>:
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	ed 91       	ld	r30, X+
    2f7e:	fc 91       	ld	r31, X
    2f80:	01 90       	ld	r0, Z+
    2f82:	f0 81       	ld	r31, Z
    2f84:	e0 2d       	mov	r30, r0
    2f86:	09 94       	ijmp

00002f88 <_ZN5Print7printlnEv>:
    2f88:	64 e7       	ldi	r22, 0x74	; 116
    2f8a:	72 e0       	ldi	r23, 0x02	; 2
    2f8c:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <_ZN5Print5writeEPKc>

00002f90 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	ec 01       	movw	r28, r24
    2f9a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <_ZN5Print5printEPK19__FlashStringHelper>
    2f9e:	8c 01       	movw	r16, r24
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print7printlnEv>
    2fa6:	80 0f       	add	r24, r16
    2fa8:	91 1f       	adc	r25, r17
    2faa:	df 91       	pop	r29
    2fac:	cf 91       	pop	r28
    2fae:	1f 91       	pop	r17
    2fb0:	0f 91       	pop	r16
    2fb2:	08 95       	ret

00002fb4 <_ZN5Print7printlnEPKc>:
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	ec 01       	movw	r28, r24
    2fbe:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN5Print5writeEPKc>
    2fc2:	8c 01       	movw	r16, r24
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print7printlnEv>
    2fca:	80 0f       	add	r24, r16
    2fcc:	91 1f       	adc	r25, r17
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	08 95       	ret

00002fd8 <_ZN5Print7printlnEc>:
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN5Print5printEc>
    2fe6:	8c 01       	movw	r16, r24
    2fe8:	ce 01       	movw	r24, r28
    2fea:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print7printlnEv>
    2fee:	80 0f       	add	r24, r16
    2ff0:	91 1f       	adc	r25, r17
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	08 95       	ret

00002ffc <_ZN5Print11printNumberEmh>:
    2ffc:	8f 92       	push	r8
    2ffe:	9f 92       	push	r9
    3000:	af 92       	push	r10
    3002:	bf 92       	push	r11
    3004:	ef 92       	push	r14
    3006:	ff 92       	push	r15
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	a1 97       	sbiw	r28, 0x21	; 33
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	7c 01       	movw	r14, r24
    3022:	fa 01       	movw	r30, r20
    3024:	cb 01       	movw	r24, r22
    3026:	19 a2       	std	Y+33, r1	; 0x21
    3028:	22 30       	cpi	r18, 0x02	; 2
    302a:	08 f4       	brcc	.+2      	; 0x302e <_ZN5Print11printNumberEmh+0x32>
    302c:	2a e0       	ldi	r18, 0x0A	; 10
    302e:	8e 01       	movw	r16, r28
    3030:	0f 5d       	subi	r16, 0xDF	; 223
    3032:	1f 4f       	sbci	r17, 0xFF	; 255
    3034:	82 2e       	mov	r8, r18
    3036:	91 2c       	mov	r9, r1
    3038:	a1 2c       	mov	r10, r1
    303a:	b1 2c       	mov	r11, r1
    303c:	bf 01       	movw	r22, r30
    303e:	a5 01       	movw	r20, r10
    3040:	94 01       	movw	r18, r8
    3042:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__udivmodsi4>
    3046:	f9 01       	movw	r30, r18
    3048:	ca 01       	movw	r24, r20
    304a:	01 50       	subi	r16, 0x01	; 1
    304c:	11 09       	sbc	r17, r1
    304e:	6a 30       	cpi	r22, 0x0A	; 10
    3050:	10 f4       	brcc	.+4      	; 0x3056 <_ZN5Print11printNumberEmh+0x5a>
    3052:	60 5d       	subi	r22, 0xD0	; 208
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <_ZN5Print11printNumberEmh+0x5c>
    3056:	69 5c       	subi	r22, 0xC9	; 201
    3058:	d8 01       	movw	r26, r16
    305a:	6c 93       	st	X, r22
    305c:	23 2b       	or	r18, r19
    305e:	24 2b       	or	r18, r20
    3060:	25 2b       	or	r18, r21
    3062:	61 f7       	brne	.-40     	; 0x303c <_ZN5Print11printNumberEmh+0x40>
    3064:	b8 01       	movw	r22, r16
    3066:	c7 01       	movw	r24, r14
    3068:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN5Print5writeEPKc>
    306c:	a1 96       	adiw	r28, 0x21	; 33
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	08 95       	ret

0000308e <_ZN5Print5printEmi>:
    308e:	21 15       	cp	r18, r1
    3090:	31 05       	cpc	r19, r1
    3092:	41 f4       	brne	.+16     	; 0x30a4 <_ZN5Print5printEmi+0x16>
    3094:	dc 01       	movw	r26, r24
    3096:	ed 91       	ld	r30, X+
    3098:	fc 91       	ld	r31, X
    309a:	01 90       	ld	r0, Z+
    309c:	f0 81       	ld	r31, Z
    309e:	e0 2d       	mov	r30, r0
    30a0:	64 2f       	mov	r22, r20
    30a2:	09 94       	ijmp
    30a4:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>

000030a8 <_ZN5Print5printEhi>:
    30a8:	9a 01       	movw	r18, r20
    30aa:	46 2f       	mov	r20, r22
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	0c 94 47 18 	jmp	0x308e	; 0x308e <_ZN5Print5printEmi>

000030b6 <_ZN5Print7printlnEhi>:
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	ec 01       	movw	r28, r24
    30c0:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN5Print5printEhi>
    30c4:	8c 01       	movw	r16, r24
    30c6:	ce 01       	movw	r24, r28
    30c8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print7printlnEv>
    30cc:	80 0f       	add	r24, r16
    30ce:	91 1f       	adc	r25, r17
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <_ZN5Print5printEji>:
    30da:	9a 01       	movw	r18, r20
    30dc:	ab 01       	movw	r20, r22
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0c 94 47 18 	jmp	0x308e	; 0x308e <_ZN5Print5printEmi>

000030e6 <_ZN5Print7printlnEji>:
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	ec 01       	movw	r28, r24
    30f0:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN5Print5printEji>
    30f4:	8c 01       	movw	r16, r24
    30f6:	ce 01       	movw	r24, r28
    30f8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print7printlnEv>
    30fc:	80 0f       	add	r24, r16
    30fe:	91 1f       	adc	r25, r17
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	1f 91       	pop	r17
    3106:	0f 91       	pop	r16
    3108:	08 95       	ret

0000310a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
  if (base == 0) {
    311a:	21 15       	cp	r18, r1
    311c:	31 05       	cpc	r19, r1
    311e:	81 f4       	brne	.+32     	; 0x3140 <_ZN5Print5printEli+0x36>
    return write(n);
    3120:	dc 01       	movw	r26, r24
    3122:	ed 91       	ld	r30, X+
    3124:	fc 91       	ld	r31, X
    3126:	01 90       	ld	r0, Z+
    3128:	f0 81       	ld	r31, Z
    312a:	e0 2d       	mov	r30, r0
    312c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	1f 91       	pop	r17
    3134:	0f 91       	pop	r16
    3136:	ff 90       	pop	r15
    3138:	ef 90       	pop	r14
    313a:	df 90       	pop	r13
    313c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    313e:	09 94       	ijmp
  } else if (base == 10) {
    3140:	2a 30       	cpi	r18, 0x0A	; 10
    3142:	31 05       	cpc	r19, r1
    3144:	01 f5       	brne	.+64     	; 0x3186 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3146:	77 ff       	sbrs	r23, 7
    3148:	1d c0       	rjmp	.+58     	; 0x3184 <_ZN5Print5printEli+0x7a>
    314a:	6a 01       	movw	r12, r20
    314c:	7b 01       	movw	r14, r22
    314e:	ec 01       	movw	r28, r24
      int t = print('-');
    3150:	6d e2       	ldi	r22, 0x2D	; 45
    3152:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN5Print5printEc>
    3156:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    3158:	44 27       	eor	r20, r20
    315a:	55 27       	eor	r21, r21
    315c:	ba 01       	movw	r22, r20
    315e:	4c 19       	sub	r20, r12
    3160:	5d 09       	sbc	r21, r13
    3162:	6e 09       	sbc	r22, r14
    3164:	7f 09       	sbc	r23, r15
    3166:	2a e0       	ldi	r18, 0x0A	; 10
    3168:	ce 01       	movw	r24, r28
    316a:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>
    316e:	80 0f       	add	r24, r16
    3170:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3172:	df 91       	pop	r29
    3174:	cf 91       	pop	r28
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	cf 90       	pop	r12
    3182:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3184:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	1f 91       	pop	r17
    318c:	0f 91       	pop	r16
    318e:	ff 90       	pop	r15
    3190:	ef 90       	pop	r14
    3192:	df 90       	pop	r13
    3194:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3196:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_ZN5Print11printNumberEmh>

0000319a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    319a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    319c:	ab 01       	movw	r20, r22
    319e:	77 0f       	add	r23, r23
    31a0:	66 0b       	sbc	r22, r22
    31a2:	77 0b       	sbc	r23, r23
    31a4:	0c 94 85 18 	jmp	0x310a	; 0x310a <_ZN5Print5printEli>

000031a8 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    31b2:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN5Print5printEii>
    31b6:	8c 01       	movw	r16, r24
  n += println();
    31b8:	ce 01       	movw	r24, r28
    31ba:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN5Print7printlnEv>
  return n;
}
    31be:	80 0f       	add	r24, r16
    31c0:	91 1f       	adc	r25, r17
    31c2:	df 91       	pop	r29
    31c4:	cf 91       	pop	r28
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	08 95       	ret

000031cc <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    31cc:	1f 92       	push	r1
    31ce:	0f 92       	push	r0
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	0f 92       	push	r0
    31d4:	11 24       	eor	r1, r1
    31d6:	2f 93       	push	r18
    31d8:	3f 93       	push	r19
    31da:	8f 93       	push	r24
    31dc:	9f 93       	push	r25
    31de:	af 93       	push	r26
    31e0:	bf 93       	push	r27
    31e2:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <timer0_millis>
    31e6:	90 91 26 05 	lds	r25, 0x0526	; 0x800526 <timer0_millis+0x1>
    31ea:	a0 91 27 05 	lds	r26, 0x0527	; 0x800527 <timer0_millis+0x2>
    31ee:	b0 91 28 05 	lds	r27, 0x0528	; 0x800528 <timer0_millis+0x3>
    31f2:	30 91 24 05 	lds	r19, 0x0524	; 0x800524 <timer0_fract>
    31f6:	23 e0       	ldi	r18, 0x03	; 3
    31f8:	23 0f       	add	r18, r19
    31fa:	2d 37       	cpi	r18, 0x7D	; 125
    31fc:	20 f4       	brcc	.+8      	; 0x3206 <__vector_16+0x3a>
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	a1 1d       	adc	r26, r1
    3202:	b1 1d       	adc	r27, r1
    3204:	05 c0       	rjmp	.+10     	; 0x3210 <__vector_16+0x44>
    3206:	26 e8       	ldi	r18, 0x86	; 134
    3208:	23 0f       	add	r18, r19
    320a:	02 96       	adiw	r24, 0x02	; 2
    320c:	a1 1d       	adc	r26, r1
    320e:	b1 1d       	adc	r27, r1
    3210:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <timer0_fract>
    3214:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <timer0_millis>
    3218:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <timer0_millis+0x1>
    321c:	a0 93 27 05 	sts	0x0527, r26	; 0x800527 <timer0_millis+0x2>
    3220:	b0 93 28 05 	sts	0x0528, r27	; 0x800528 <timer0_millis+0x3>
    3224:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <timer0_overflow_count>
    3228:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <timer0_overflow_count+0x1>
    322c:	a0 91 2b 05 	lds	r26, 0x052B	; 0x80052b <timer0_overflow_count+0x2>
    3230:	b0 91 2c 05 	lds	r27, 0x052C	; 0x80052c <timer0_overflow_count+0x3>
    3234:	01 96       	adiw	r24, 0x01	; 1
    3236:	a1 1d       	adc	r26, r1
    3238:	b1 1d       	adc	r27, r1
    323a:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <timer0_overflow_count>
    323e:	90 93 2a 05 	sts	0x052A, r25	; 0x80052a <timer0_overflow_count+0x1>
    3242:	a0 93 2b 05 	sts	0x052B, r26	; 0x80052b <timer0_overflow_count+0x2>
    3246:	b0 93 2c 05 	sts	0x052C, r27	; 0x80052c <timer0_overflow_count+0x3>
    324a:	bf 91       	pop	r27
    324c:	af 91       	pop	r26
    324e:	9f 91       	pop	r25
    3250:	8f 91       	pop	r24
    3252:	3f 91       	pop	r19
    3254:	2f 91       	pop	r18
    3256:	0f 90       	pop	r0
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	0f 90       	pop	r0
    325c:	1f 90       	pop	r1
    325e:	18 95       	reti

00003260 <micros>:
    3260:	3f b7       	in	r19, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <timer0_overflow_count>
    3268:	90 91 2a 05 	lds	r25, 0x052A	; 0x80052a <timer0_overflow_count+0x1>
    326c:	a0 91 2b 05 	lds	r26, 0x052B	; 0x80052b <timer0_overflow_count+0x2>
    3270:	b0 91 2c 05 	lds	r27, 0x052C	; 0x80052c <timer0_overflow_count+0x3>
    3274:	26 b5       	in	r18, 0x26	; 38
    3276:	a8 9b       	sbis	0x15, 0	; 21
    3278:	05 c0       	rjmp	.+10     	; 0x3284 <micros+0x24>
    327a:	2f 3f       	cpi	r18, 0xFF	; 255
    327c:	19 f0       	breq	.+6      	; 0x3284 <micros+0x24>
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	a1 1d       	adc	r26, r1
    3282:	b1 1d       	adc	r27, r1
    3284:	3f bf       	out	0x3f, r19	; 63
    3286:	ba 2f       	mov	r27, r26
    3288:	a9 2f       	mov	r26, r25
    328a:	98 2f       	mov	r25, r24
    328c:	88 27       	eor	r24, r24
    328e:	82 0f       	add	r24, r18
    3290:	91 1d       	adc	r25, r1
    3292:	a1 1d       	adc	r26, r1
    3294:	b1 1d       	adc	r27, r1
    3296:	bc 01       	movw	r22, r24
    3298:	cd 01       	movw	r24, r26
    329a:	42 e0       	ldi	r20, 0x02	; 2
    329c:	66 0f       	add	r22, r22
    329e:	77 1f       	adc	r23, r23
    32a0:	88 1f       	adc	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	4a 95       	dec	r20
    32a6:	d1 f7       	brne	.-12     	; 0x329c <micros+0x3c>
    32a8:	08 95       	ret

000032aa <delay>:
    32aa:	8f 92       	push	r8
    32ac:	9f 92       	push	r9
    32ae:	af 92       	push	r10
    32b0:	bf 92       	push	r11
    32b2:	cf 92       	push	r12
    32b4:	df 92       	push	r13
    32b6:	ef 92       	push	r14
    32b8:	ff 92       	push	r15
    32ba:	6b 01       	movw	r12, r22
    32bc:	7c 01       	movw	r14, r24
    32be:	0e 94 30 19 	call	0x3260	; 0x3260 <micros>
    32c2:	4b 01       	movw	r8, r22
    32c4:	5c 01       	movw	r10, r24
    32c6:	c1 14       	cp	r12, r1
    32c8:	d1 04       	cpc	r13, r1
    32ca:	e1 04       	cpc	r14, r1
    32cc:	f1 04       	cpc	r15, r1
    32ce:	01 f1       	breq	.+64     	; 0x3310 <delay+0x66>
    32d0:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <yield>
    32d4:	0e 94 30 19 	call	0x3260	; 0x3260 <micros>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	88 19       	sub	r24, r8
    32de:	99 09       	sbc	r25, r9
    32e0:	aa 09       	sbc	r26, r10
    32e2:	bb 09       	sbc	r27, r11
    32e4:	88 3e       	cpi	r24, 0xE8	; 232
    32e6:	93 40       	sbci	r25, 0x03	; 3
    32e8:	a1 05       	cpc	r26, r1
    32ea:	b1 05       	cpc	r27, r1
    32ec:	60 f3       	brcs	.-40     	; 0x32c6 <delay+0x1c>
    32ee:	21 e0       	ldi	r18, 0x01	; 1
    32f0:	c2 1a       	sub	r12, r18
    32f2:	d1 08       	sbc	r13, r1
    32f4:	e1 08       	sbc	r14, r1
    32f6:	f1 08       	sbc	r15, r1
    32f8:	88 ee       	ldi	r24, 0xE8	; 232
    32fa:	88 0e       	add	r8, r24
    32fc:	83 e0       	ldi	r24, 0x03	; 3
    32fe:	98 1e       	adc	r9, r24
    3300:	a1 1c       	adc	r10, r1
    3302:	b1 1c       	adc	r11, r1
    3304:	c1 14       	cp	r12, r1
    3306:	d1 04       	cpc	r13, r1
    3308:	e1 04       	cpc	r14, r1
    330a:	f1 04       	cpc	r15, r1
    330c:	19 f7       	brne	.-58     	; 0x32d4 <delay+0x2a>
    330e:	db cf       	rjmp	.-74     	; 0x32c6 <delay+0x1c>
    3310:	ff 90       	pop	r15
    3312:	ef 90       	pop	r14
    3314:	df 90       	pop	r13
    3316:	cf 90       	pop	r12
    3318:	bf 90       	pop	r11
    331a:	af 90       	pop	r10
    331c:	9f 90       	pop	r9
    331e:	8f 90       	pop	r8
    3320:	08 95       	ret

00003322 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3322:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3324:	84 b5       	in	r24, 0x24	; 36
    3326:	82 60       	ori	r24, 0x02	; 2
    3328:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    332a:	84 b5       	in	r24, 0x24	; 36
    332c:	81 60       	ori	r24, 0x01	; 1
    332e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3330:	85 b5       	in	r24, 0x25	; 37
    3332:	82 60       	ori	r24, 0x02	; 2
    3334:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3336:	85 b5       	in	r24, 0x25	; 37
    3338:	81 60       	ori	r24, 0x01	; 1
    333a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    333c:	ee e6       	ldi	r30, 0x6E	; 110
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	81 60       	ori	r24, 0x01	; 1
    3344:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3346:	e1 e8       	ldi	r30, 0x81	; 129
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    334c:	80 81       	ld	r24, Z
    334e:	82 60       	ori	r24, 0x02	; 2
    3350:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3352:	80 81       	ld	r24, Z
    3354:	81 60       	ori	r24, 0x01	; 1
    3356:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3358:	e0 e8       	ldi	r30, 0x80	; 128
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	81 60       	ori	r24, 0x01	; 1
    3360:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3362:	e1 eb       	ldi	r30, 0xB1	; 177
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	84 60       	ori	r24, 0x04	; 4
    336a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    336c:	e0 eb       	ldi	r30, 0xB0	; 176
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	81 60       	ori	r24, 0x01	; 1
    3374:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3376:	ea e7       	ldi	r30, 0x7A	; 122
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	84 60       	ori	r24, 0x04	; 4
    337e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3380:	80 81       	ld	r24, Z
    3382:	82 60       	ori	r24, 0x02	; 2
    3384:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3386:	80 81       	ld	r24, Z
    3388:	81 60       	ori	r24, 0x01	; 1
    338a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    338c:	80 81       	ld	r24, Z
    338e:	80 68       	ori	r24, 0x80	; 128
    3390:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3392:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3396:	08 95       	ret

00003398 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3398:	8e 30       	cpi	r24, 0x0E	; 14
    339a:	08 f0       	brcs	.+2      	; 0x339e <analogRead+0x6>
    339c:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    339e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    33a2:	90 e4       	ldi	r25, 0x40	; 64
    33a4:	29 9f       	mul	r18, r25
    33a6:	90 01       	movw	r18, r0
    33a8:	11 24       	eor	r1, r1
    33aa:	87 70       	andi	r24, 0x07	; 7
    33ac:	82 2b       	or	r24, r18
    33ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    33b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    33b6:	80 64       	ori	r24, 0x40	; 64
    33b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    33bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    33c0:	86 fd       	sbrc	r24, 6
    33c2:	fc cf       	rjmp	.-8      	; 0x33bc <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    33c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    33c8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    33cc:	90 e0       	ldi	r25, 0x00	; 0
}
    33ce:	92 2b       	or	r25, r18
    33d0:	08 95       	ret

000033d2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    33d2:	83 30       	cpi	r24, 0x03	; 3
    33d4:	81 f0       	breq	.+32     	; 0x33f6 <turnOffPWM+0x24>
    33d6:	28 f4       	brcc	.+10     	; 0x33e2 <turnOffPWM+0x10>
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	99 f0       	breq	.+38     	; 0x3402 <turnOffPWM+0x30>
    33dc:	82 30       	cpi	r24, 0x02	; 2
    33de:	a1 f0       	breq	.+40     	; 0x3408 <turnOffPWM+0x36>
    33e0:	08 95       	ret
    33e2:	87 30       	cpi	r24, 0x07	; 7
    33e4:	a9 f0       	breq	.+42     	; 0x3410 <turnOffPWM+0x3e>
    33e6:	88 30       	cpi	r24, 0x08	; 8
    33e8:	b9 f0       	breq	.+46     	; 0x3418 <turnOffPWM+0x46>
    33ea:	84 30       	cpi	r24, 0x04	; 4
    33ec:	d1 f4       	brne	.+52     	; 0x3422 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    33ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    33f2:	8f 7d       	andi	r24, 0xDF	; 223
    33f4:	03 c0       	rjmp	.+6      	; 0x33fc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    33f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    33fa:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    33fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3400:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3402:	84 b5       	in	r24, 0x24	; 36
    3404:	8f 77       	andi	r24, 0x7F	; 127
    3406:	02 c0       	rjmp	.+4      	; 0x340c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3408:	84 b5       	in	r24, 0x24	; 36
    340a:	8f 7d       	andi	r24, 0xDF	; 223
    340c:	84 bd       	out	0x24, r24	; 36
    340e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3410:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3414:	8f 77       	andi	r24, 0x7F	; 127
    3416:	03 c0       	rjmp	.+6      	; 0x341e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3418:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    341c:	8f 7d       	andi	r24, 0xDF	; 223
    341e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3422:	08 95       	ret

00003424 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	fc 01       	movw	r30, r24
    342c:	ea 59       	subi	r30, 0x9A	; 154
    342e:	f9 4f       	sbci	r31, 0xF9	; 249
    3430:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3432:	fc 01       	movw	r30, r24
    3434:	e6 58       	subi	r30, 0x86	; 134
    3436:	f9 4f       	sbci	r31, 0xF9	; 249
    3438:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    343a:	88 23       	and	r24, r24
    343c:	61 f1       	breq	.+88     	; 0x3496 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	88 0f       	add	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	fc 01       	movw	r30, r24
    3446:	ee 55       	subi	r30, 0x5E	; 94
    3448:	f9 4f       	sbci	r31, 0xF9	; 249
    344a:	c5 91       	lpm	r28, Z+
    344c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    344e:	fc 01       	movw	r30, r24
    3450:	e8 56       	subi	r30, 0x68	; 104
    3452:	f9 4f       	sbci	r31, 0xF9	; 249
    3454:	a5 91       	lpm	r26, Z+
    3456:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3458:	61 11       	cpse	r22, r1
    345a:	09 c0       	rjmp	.+18     	; 0x346e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    345c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    345e:	f8 94       	cli
		*reg &= ~bit;
    3460:	88 81       	ld	r24, Y
    3462:	20 95       	com	r18
    3464:	82 23       	and	r24, r18
    3466:	88 83       	st	Y, r24
		*out &= ~bit;
    3468:	ec 91       	ld	r30, X
    346a:	2e 23       	and	r18, r30
    346c:	0b c0       	rjmp	.+22     	; 0x3484 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    346e:	62 30       	cpi	r22, 0x02	; 2
    3470:	61 f4       	brne	.+24     	; 0x348a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3472:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3474:	f8 94       	cli
		*reg &= ~bit;
    3476:	88 81       	ld	r24, Y
    3478:	32 2f       	mov	r19, r18
    347a:	30 95       	com	r19
    347c:	83 23       	and	r24, r19
    347e:	88 83       	st	Y, r24
		*out |= bit;
    3480:	ec 91       	ld	r30, X
    3482:	2e 2b       	or	r18, r30
    3484:	2c 93       	st	X, r18
		SREG = oldSREG;
    3486:	9f bf       	out	0x3f, r25	; 63
    3488:	06 c0       	rjmp	.+12     	; 0x3496 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    348a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    348c:	f8 94       	cli
		*reg |= bit;
    348e:	e8 81       	ld	r30, Y
    3490:	2e 2b       	or	r18, r30
    3492:	28 83       	st	Y, r18
		SREG = oldSREG;
    3494:	8f bf       	out	0x3f, r24	; 63
	}
}
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	08 95       	ret

0000349c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	f9 01       	movw	r30, r18
    34a8:	ee 5a       	subi	r30, 0xAE	; 174
    34aa:	f9 4f       	sbci	r31, 0xF9	; 249
    34ac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    34ae:	f9 01       	movw	r30, r18
    34b0:	ea 59       	subi	r30, 0x9A	; 154
    34b2:	f9 4f       	sbci	r31, 0xF9	; 249
    34b4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    34b6:	f9 01       	movw	r30, r18
    34b8:	e6 58       	subi	r30, 0x86	; 134
    34ba:	f9 4f       	sbci	r31, 0xF9	; 249
    34bc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    34be:	cc 23       	and	r28, r28
    34c0:	c1 f0       	breq	.+48     	; 0x34f2 <digitalWrite+0x56>
    34c2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    34c4:	81 11       	cpse	r24, r1
    34c6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <turnOffPWM>

	out = portOutputRegister(port);
    34ca:	ec 2f       	mov	r30, r28
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	ee 0f       	add	r30, r30
    34d0:	ff 1f       	adc	r31, r31
    34d2:	e8 56       	subi	r30, 0x68	; 104
    34d4:	f9 4f       	sbci	r31, 0xF9	; 249
    34d6:	a5 91       	lpm	r26, Z+
    34d8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    34da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    34dc:	f8 94       	cli

	if (val == LOW) {
    34de:	11 11       	cpse	r17, r1
    34e0:	04 c0       	rjmp	.+8      	; 0x34ea <digitalWrite+0x4e>
		*out &= ~bit;
    34e2:	8c 91       	ld	r24, X
    34e4:	d0 95       	com	r29
    34e6:	d8 23       	and	r29, r24
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <digitalWrite+0x52>
	} else {
		*out |= bit;
    34ea:	ec 91       	ld	r30, X
    34ec:	de 2b       	or	r29, r30
    34ee:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    34f0:	9f bf       	out	0x3f, r25	; 63
}
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	08 95       	ret

000034fa <_ZN6StringD1Ev>:
		return *this;
	}
	len = length;
	strcpy_P(buffer, (PGM_P)pstr);
	return *this;
}
    34fa:	fc 01       	movw	r30, r24
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <free>

00003504 <_ZN6String10invalidateEv>:
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	ec 01       	movw	r28, r24
    350a:	88 81       	ld	r24, Y
    350c:	99 81       	ldd	r25, Y+1	; 0x01
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	11 f0       	breq	.+4      	; 0x3516 <_ZN6String10invalidateEv+0x12>
    3512:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <free>
    3516:	19 82       	std	Y+1, r1	; 0x01
    3518:	18 82       	st	Y, r1
    351a:	1d 82       	std	Y+5, r1	; 0x05
    351c:	1c 82       	std	Y+4, r1	; 0x04
    351e:	1b 82       	std	Y+3, r1	; 0x03
    3520:	1a 82       	std	Y+2, r1	; 0x02
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	08 95       	ret

00003528 <_ZN6String12changeBufferEj>:
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	ec 01       	movw	r28, r24
    3532:	8b 01       	movw	r16, r22
    3534:	6f 5f       	subi	r22, 0xFF	; 255
    3536:	7f 4f       	sbci	r23, 0xFF	; 255
    3538:	88 81       	ld	r24, Y
    353a:	99 81       	ldd	r25, Y+1	; 0x01
    353c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <realloc>
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	31 f0       	breq	.+12     	; 0x3550 <_ZN6String12changeBufferEj+0x28>
    3544:	99 83       	std	Y+1, r25	; 0x01
    3546:	88 83       	st	Y, r24
    3548:	1b 83       	std	Y+3, r17	; 0x03
    354a:	0a 83       	std	Y+2, r16	; 0x02
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	01 c0       	rjmp	.+2      	; 0x3552 <_ZN6String12changeBufferEj+0x2a>
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <_ZN6String7reserveEj>:
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ec 01       	movw	r28, r24
    3562:	88 81       	ld	r24, Y
    3564:	99 81       	ldd	r25, Y+1	; 0x01
    3566:	89 2b       	or	r24, r25
    3568:	29 f0       	breq	.+10     	; 0x3574 <_ZN6String7reserveEj+0x18>
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	9b 81       	ldd	r25, Y+3	; 0x03
    356e:	86 17       	cp	r24, r22
    3570:	97 07       	cpc	r25, r23
    3572:	60 f4       	brcc	.+24     	; 0x358c <_ZN6String7reserveEj+0x30>
    3574:	ce 01       	movw	r24, r28
    3576:	0e 94 94 1a 	call	0x3528	; 0x3528 <_ZN6String12changeBufferEj>
    357a:	88 23       	and	r24, r24
    357c:	41 f0       	breq	.+16     	; 0x358e <_ZN6String7reserveEj+0x32>
    357e:	8c 81       	ldd	r24, Y+4	; 0x04
    3580:	9d 81       	ldd	r25, Y+5	; 0x05
    3582:	89 2b       	or	r24, r25
    3584:	19 f4       	brne	.+6      	; 0x358c <_ZN6String7reserveEj+0x30>
    3586:	e8 81       	ld	r30, Y
    3588:	f9 81       	ldd	r31, Y+1	; 0x01
    358a:	10 82       	st	Z, r1
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	08 95       	ret

00003594 <_ZN6String4copyEPKcj>:
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	ec 01       	movw	r28, r24
    35a2:	7b 01       	movw	r14, r22
    35a4:	8a 01       	movw	r16, r20
    35a6:	ba 01       	movw	r22, r20
    35a8:	0e 94 ae 1a 	call	0x355c	; 0x355c <_ZN6String7reserveEj>
    35ac:	81 11       	cpse	r24, r1
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <_ZN6String4copyEPKcj+0x24>
    35b0:	ce 01       	movw	r24, r28
    35b2:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN6String10invalidateEv>
    35b6:	07 c0       	rjmp	.+14     	; 0x35c6 <_ZN6String4copyEPKcj+0x32>
    35b8:	1d 83       	std	Y+5, r17	; 0x05
    35ba:	0c 83       	std	Y+4, r16	; 0x04
    35bc:	b7 01       	movw	r22, r14
    35be:	88 81       	ld	r24, Y
    35c0:	99 81       	ldd	r25, Y+1	; 0x01
    35c2:	0e 94 89 20 	call	0x4112	; 0x4112 <strcpy>
    35c6:	ce 01       	movw	r24, r28
    35c8:	df 91       	pop	r29
    35ca:	cf 91       	pop	r28
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	ff 90       	pop	r15
    35d2:	ef 90       	pop	r14
    35d4:	08 95       	ret

000035d6 <_ZN6StringC1EPKc>:
    35d6:	fc 01       	movw	r30, r24
    35d8:	11 82       	std	Z+1, r1	; 0x01
    35da:	10 82       	st	Z, r1
    35dc:	13 82       	std	Z+3, r1	; 0x03
    35de:	12 82       	std	Z+2, r1	; 0x02
    35e0:	15 82       	std	Z+5, r1	; 0x05
    35e2:	14 82       	std	Z+4, r1	; 0x04
    35e4:	61 15       	cp	r22, r1
    35e6:	71 05       	cpc	r23, r1
    35e8:	51 f0       	breq	.+20     	; 0x35fe <_ZN6StringC1EPKc+0x28>
    35ea:	fb 01       	movw	r30, r22
    35ec:	01 90       	ld	r0, Z+
    35ee:	00 20       	and	r0, r0
    35f0:	e9 f7       	brne	.-6      	; 0x35ec <_ZN6StringC1EPKc+0x16>
    35f2:	31 97       	sbiw	r30, 0x01	; 1
    35f4:	af 01       	movw	r20, r30
    35f6:	46 1b       	sub	r20, r22
    35f8:	57 0b       	sbc	r21, r23
    35fa:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <_ZN6String4copyEPKcj>
    35fe:	08 95       	ret

00003600 <_ZN6String4moveERS_>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
void String::move(String &rhs)
{
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	8c 01       	movw	r16, r24
    360a:	eb 01       	movw	r28, r22
	if (buffer) {
    360c:	fc 01       	movw	r30, r24
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	99 f0       	breq	.+38     	; 0x363c <_ZN6String4moveERS_+0x3c>
		if (capacity >= rhs.len) {
    3616:	42 81       	ldd	r20, Z+2	; 0x02
    3618:	53 81       	ldd	r21, Z+3	; 0x03
    361a:	2c 81       	ldd	r18, Y+4	; 0x04
    361c:	3d 81       	ldd	r19, Y+5	; 0x05
    361e:	42 17       	cp	r20, r18
    3620:	53 07       	cpc	r21, r19
    3622:	50 f0       	brcs	.+20     	; 0x3638 <_ZN6String4moveERS_+0x38>
			strcpy(buffer, rhs.buffer);
    3624:	68 81       	ld	r22, Y
    3626:	79 81       	ldd	r23, Y+1	; 0x01
    3628:	0e 94 89 20 	call	0x4112	; 0x4112 <strcpy>
			len = rhs.len;
    362c:	8c 81       	ldd	r24, Y+4	; 0x04
    362e:	9d 81       	ldd	r25, Y+5	; 0x05
    3630:	f8 01       	movw	r30, r16
    3632:	95 83       	std	Z+5, r25	; 0x05
    3634:	84 83       	std	Z+4, r24	; 0x04
    3636:	13 c0       	rjmp	.+38     	; 0x365e <_ZN6String4moveERS_+0x5e>
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    3638:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <free>
		}
	}
	buffer = rhs.buffer;
    363c:	88 81       	ld	r24, Y
    363e:	99 81       	ldd	r25, Y+1	; 0x01
    3640:	f8 01       	movw	r30, r16
    3642:	91 83       	std	Z+1, r25	; 0x01
    3644:	80 83       	st	Z, r24
	capacity = rhs.capacity;
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	93 83       	std	Z+3, r25	; 0x03
    364c:	82 83       	std	Z+2, r24	; 0x02
	len = rhs.len;
    364e:	8c 81       	ldd	r24, Y+4	; 0x04
    3650:	9d 81       	ldd	r25, Y+5	; 0x05
    3652:	95 83       	std	Z+5, r25	; 0x05
    3654:	84 83       	std	Z+4, r24	; 0x04
	rhs.buffer = NULL;
    3656:	19 82       	std	Y+1, r1	; 0x01
    3658:	18 82       	st	Y, r1
	rhs.capacity = 0;
    365a:	1b 82       	std	Y+3, r1	; 0x03
    365c:	1a 82       	std	Y+2, r1	; 0x02
	rhs.len = 0;
    365e:	1d 82       	std	Y+5, r1	; 0x05
    3660:	1c 82       	std	Y+4, r1	; 0x04
}
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	08 95       	ret

0000366c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	ec 01       	movw	r28, r24
    3672:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3674:	86 17       	cp	r24, r22
    3676:	97 07       	cpc	r25, r23
    3678:	61 f0       	breq	.+24     	; 0x3692 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	61 15       	cp	r22, r1
    3680:	71 05       	cpc	r23, r1
    3682:	29 f0       	breq	.+10     	; 0x368e <_ZN6StringaSERKS_+0x22>
    3684:	44 81       	ldd	r20, Z+4	; 0x04
    3686:	55 81       	ldd	r21, Z+5	; 0x05
    3688:	0e 94 ca 1a 	call	0x3594	; 0x3594 <_ZN6String4copyEPKcj>
    368c:	02 c0       	rjmp	.+4      	; 0x3692 <_ZN6StringaSERKS_+0x26>
	else invalidate();
    368e:	0e 94 82 1a 	call	0x3504	; 0x3504 <_ZN6String10invalidateEv>
	
	return *this;
}
    3692:	ce 01       	movw	r24, r28
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret

0000369a <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    369a:	fc 01       	movw	r30, r24
    369c:	11 82       	std	Z+1, r1	; 0x01
    369e:	10 82       	st	Z, r1
	capacity = 0;
    36a0:	13 82       	std	Z+3, r1	; 0x03
    36a2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    36a4:	15 82       	std	Z+5, r1	; 0x05
    36a6:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
    36a8:	0c 94 36 1b 	jmp	0x366c	; 0x366c <_ZN6StringaSERKS_>

000036ac <_ZN6StringaSEOS_>:
	return *this;
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	ec 01       	movw	r28, r24
	if (this != &rval) move(rval);
    36b2:	86 17       	cp	r24, r22
    36b4:	97 07       	cpc	r25, r23
    36b6:	11 f0       	breq	.+4      	; 0x36bc <_ZN6StringaSEOS_+0x10>
    36b8:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN6String4moveERS_>
	return *this;
}
    36bc:	ce 01       	movw	r24, r28
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	08 95       	ret

000036c4 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    36c4:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    36c8:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    36cc:	28 17       	cp	r18, r24
    36ce:	39 07       	cpc	r19, r25
    36d0:	b9 f4       	brne	.+46     	; 0x3700 <_ZN14SoftwareSerial4readEv+0x3c>
    36d2:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    36d6:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    36da:	98 17       	cp	r25, r24
    36dc:	89 f0       	breq	.+34     	; 0x3700 <_ZN14SoftwareSerial4readEv+0x3c>
    36de:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	e1 5d       	subi	r30, 0xD1	; 209
    36e6:	fa 4f       	sbci	r31, 0xFA	; 250
    36e8:	80 81       	ld	r24, Z
    36ea:	20 91 2d 05 	lds	r18, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	2f 5f       	subi	r18, 0xFF	; 255
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	2f 73       	andi	r18, 0x3F	; 63
    36f6:	33 27       	eor	r19, r19
    36f8:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	08 95       	ret
    3700:	8f ef       	ldi	r24, 0xFF	; 255
    3702:	9f ef       	ldi	r25, 0xFF	; 255
    3704:	08 95       	ret

00003706 <_ZN14SoftwareSerial5writeEh>:
    3706:	1f 93       	push	r17
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	dc 01       	movw	r26, r24
    370e:	5c 96       	adiw	r26, 0x1c	; 28
    3710:	8d 91       	ld	r24, X+
    3712:	9c 91       	ld	r25, X
    3714:	5d 97       	sbiw	r26, 0x1d	; 29
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	39 f4       	brne	.+14     	; 0x3728 <_ZN14SoftwareSerial5writeEh+0x22>
    371a:	21 e0       	ldi	r18, 0x01	; 1
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	13 96       	adiw	r26, 0x03	; 3
    3720:	3c 93       	st	X, r19
    3722:	2e 93       	st	-X, r18
    3724:	12 97       	sbiw	r26, 0x02	; 2
    3726:	3b c0       	rjmp	.+118    	; 0x379e <_ZN14SoftwareSerial5writeEh+0x98>
    3728:	51 96       	adiw	r26, 0x11	; 17
    372a:	ed 91       	ld	r30, X+
    372c:	fc 91       	ld	r31, X
    372e:	52 97       	sbiw	r26, 0x12	; 18
    3730:	50 96       	adiw	r26, 0x10	; 16
    3732:	2c 91       	ld	r18, X
    3734:	50 97       	sbiw	r26, 0x10	; 16
    3736:	32 2f       	mov	r19, r18
    3738:	30 95       	com	r19
    373a:	1f b7       	in	r17, 0x3f	; 63
    373c:	5e 96       	adiw	r26, 0x1e	; 30
    373e:	4c 91       	ld	r20, X
    3740:	5e 97       	sbiw	r26, 0x1e	; 30
    3742:	74 2f       	mov	r23, r20
    3744:	72 70       	andi	r23, 0x02	; 2
    3746:	41 fd       	sbrc	r20, 1
    3748:	60 95       	com	r22
    374a:	f8 94       	cli
    374c:	40 81       	ld	r20, Z
    374e:	77 23       	and	r23, r23
    3750:	11 f0       	breq	.+4      	; 0x3756 <_ZN14SoftwareSerial5writeEh+0x50>
    3752:	42 2b       	or	r20, r18
    3754:	01 c0       	rjmp	.+2      	; 0x3758 <_ZN14SoftwareSerial5writeEh+0x52>
    3756:	43 23       	and	r20, r19
    3758:	40 83       	st	Z, r20
    375a:	ec 01       	movw	r28, r24
    375c:	21 97       	sbiw	r28, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <_ZN14SoftwareSerial5writeEh+0x56>
    3760:	48 e0       	ldi	r20, 0x08	; 8
    3762:	50 81       	ld	r21, Z
    3764:	60 ff       	sbrs	r22, 0
    3766:	02 c0       	rjmp	.+4      	; 0x376c <_ZN14SoftwareSerial5writeEh+0x66>
    3768:	52 2b       	or	r21, r18
    376a:	01 c0       	rjmp	.+2      	; 0x376e <_ZN14SoftwareSerial5writeEh+0x68>
    376c:	53 23       	and	r21, r19
    376e:	50 83       	st	Z, r21
    3770:	ec 01       	movw	r28, r24
    3772:	21 97       	sbiw	r28, 0x01	; 1
    3774:	f1 f7       	brne	.-4      	; 0x3772 <_ZN14SoftwareSerial5writeEh+0x6c>
    3776:	66 95       	lsr	r22
    3778:	41 50       	subi	r20, 0x01	; 1
    377a:	99 f7       	brne	.-26     	; 0x3762 <_ZN14SoftwareSerial5writeEh+0x5c>
    377c:	80 81       	ld	r24, Z
    377e:	77 23       	and	r23, r23
    3780:	19 f0       	breq	.+6      	; 0x3788 <_ZN14SoftwareSerial5writeEh+0x82>
    3782:	83 23       	and	r24, r19
    3784:	80 83       	st	Z, r24
    3786:	02 c0       	rjmp	.+4      	; 0x378c <_ZN14SoftwareSerial5writeEh+0x86>
    3788:	28 2b       	or	r18, r24
    378a:	20 83       	st	Z, r18
    378c:	1f bf       	out	0x3f, r17	; 63
    378e:	5c 96       	adiw	r26, 0x1c	; 28
    3790:	8d 91       	ld	r24, X+
    3792:	9c 91       	ld	r25, X
    3794:	5d 97       	sbiw	r26, 0x1d	; 29
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <_ZN14SoftwareSerial5writeEh+0x90>
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	1f 91       	pop	r17
    37a4:	08 95       	ret

000037a6 <_ZN14SoftwareSerial5flushEv>:
    37a6:	08 95       	ret

000037a8 <_ZN14SoftwareSerial4peekEv>:
    37a8:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    37ac:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    37b0:	28 17       	cp	r18, r24
    37b2:	39 07       	cpc	r19, r25
    37b4:	71 f4       	brne	.+28     	; 0x37d2 <_ZN14SoftwareSerial4peekEv+0x2a>
    37b6:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    37ba:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    37be:	98 17       	cp	r25, r24
    37c0:	41 f0       	breq	.+16     	; 0x37d2 <_ZN14SoftwareSerial4peekEv+0x2a>
    37c2:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	e1 5d       	subi	r30, 0xD1	; 209
    37ca:	fa 4f       	sbci	r31, 0xFA	; 250
    37cc:	80 81       	ld	r24, Z
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	08 95       	ret
    37d2:	8f ef       	ldi	r24, 0xFF	; 255
    37d4:	9f ef       	ldi	r25, 0xFF	; 255
    37d6:	08 95       	ret

000037d8 <_ZN14SoftwareSerial9availableEv>:
    37d8:	20 91 6f 05 	lds	r18, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    37dc:	30 91 70 05 	lds	r19, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    37e0:	28 17       	cp	r18, r24
    37e2:	39 07       	cpc	r19, r25
    37e4:	71 f4       	brne	.+28     	; 0x3802 <_ZN14SoftwareSerial9availableEv+0x2a>
    37e6:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    37ea:	20 91 2d 05 	lds	r18, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	80 5c       	subi	r24, 0xC0	; 192
    37f2:	9f 4f       	sbci	r25, 0xFF	; 255
    37f4:	82 1b       	sub	r24, r18
    37f6:	91 09       	sbc	r25, r1
    37f8:	60 e4       	ldi	r22, 0x40	; 64
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__divmodhi4>
    3800:	08 95       	ret
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	08 95       	ret

00003808 <_ZN14SoftwareSerial13stopListeningEv>:
    3808:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    380c:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    3810:	e8 17       	cp	r30, r24
    3812:	f9 07       	cpc	r31, r25
    3814:	69 f4       	brne	.+26     	; 0x3830 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3816:	a3 89       	ldd	r26, Z+19	; 0x13
    3818:	b4 89       	ldd	r27, Z+20	; 0x14
    381a:	9c 91       	ld	r25, X
    381c:	85 89       	ldd	r24, Z+21	; 0x15
    381e:	80 95       	com	r24
    3820:	89 23       	and	r24, r25
    3822:	8c 93       	st	X, r24
    3824:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    3828:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	08 95       	ret
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	08 95       	ret

00003834 <_ZN14SoftwareSerial6listenEv>:
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	ec 01       	movw	r28, r24
    383a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    383c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    383e:	89 2b       	or	r24, r25
    3840:	f1 f0       	breq	.+60     	; 0x387e <_ZN14SoftwareSerial6listenEv+0x4a>
    3842:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    3846:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    384a:	c8 17       	cp	r28, r24
    384c:	d9 07       	cpc	r29, r25
    384e:	b9 f0       	breq	.+46     	; 0x387e <_ZN14SoftwareSerial6listenEv+0x4a>
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	11 f0       	breq	.+4      	; 0x3858 <_ZN14SoftwareSerial6listenEv+0x24>
    3854:	0e 94 04 1c 	call	0x3808	; 0x3808 <_ZN14SoftwareSerial13stopListeningEv>
    3858:	8e 8d       	ldd	r24, Y+30	; 0x1e
    385a:	8e 7f       	andi	r24, 0xFE	; 254
    385c:	8e 8f       	std	Y+30, r24	; 0x1e
    385e:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3862:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3866:	d0 93 70 05 	sts	0x0570, r29	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    386a:	c0 93 6f 05 	sts	0x056F, r28	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    386e:	eb 89       	ldd	r30, Y+19	; 0x13
    3870:	fc 89       	ldd	r31, Y+20	; 0x14
    3872:	90 81       	ld	r25, Z
    3874:	8d 89       	ldd	r24, Y+21	; 0x15
    3876:	89 2b       	or	r24, r25
    3878:	80 83       	st	Z, r24
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	01 c0       	rjmp	.+2      	; 0x3880 <_ZN14SoftwareSerial6listenEv+0x4c>
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <__vector_3>:
    3886:	1f 92       	push	r1
    3888:	0f 92       	push	r0
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	0f 92       	push	r0
    388e:	11 24       	eor	r1, r1
    3890:	2f 93       	push	r18
    3892:	3f 93       	push	r19
    3894:	4f 93       	push	r20
    3896:	5f 93       	push	r21
    3898:	6f 93       	push	r22
    389a:	7f 93       	push	r23
    389c:	8f 93       	push	r24
    389e:	9f 93       	push	r25
    38a0:	af 93       	push	r26
    38a2:	bf 93       	push	r27
    38a4:	ef 93       	push	r30
    38a6:	ff 93       	push	r31
    38a8:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <_ZN14SoftwareSerial13active_objectE>
    38ac:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <_ZN14SoftwareSerial13active_objectE+0x1>
    38b0:	30 97       	sbiw	r30, 0x00	; 0
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <__vector_3+0x30>
    38b4:	51 c0       	rjmp	.+162    	; 0x3958 <__vector_3+0xd2>
    38b6:	96 8d       	ldd	r25, Z+30	; 0x1e
    38b8:	a6 85       	ldd	r26, Z+14	; 0x0e
    38ba:	b7 85       	ldd	r27, Z+15	; 0x0f
    38bc:	85 85       	ldd	r24, Z+13	; 0x0d
    38be:	91 ff       	sbrs	r25, 1
    38c0:	04 c0       	rjmp	.+8      	; 0x38ca <__vector_3+0x44>
    38c2:	9c 91       	ld	r25, X
    38c4:	89 23       	and	r24, r25
    38c6:	29 f4       	brne	.+10     	; 0x38d2 <__vector_3+0x4c>
    38c8:	47 c0       	rjmp	.+142    	; 0x3958 <__vector_3+0xd2>
    38ca:	9c 91       	ld	r25, X
    38cc:	89 23       	and	r24, r25
    38ce:	09 f0       	breq	.+2      	; 0x38d2 <__vector_3+0x4c>
    38d0:	43 c0       	rjmp	.+134    	; 0x3958 <__vector_3+0xd2>
    38d2:	a3 89       	ldd	r26, Z+19	; 0x13
    38d4:	b4 89       	ldd	r27, Z+20	; 0x14
    38d6:	9c 91       	ld	r25, X
    38d8:	85 89       	ldd	r24, Z+21	; 0x15
    38da:	80 95       	com	r24
    38dc:	89 23       	and	r24, r25
    38de:	8c 93       	st	X, r24
    38e0:	86 89       	ldd	r24, Z+22	; 0x16
    38e2:	97 89       	ldd	r25, Z+23	; 0x17
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <__vector_3+0x5e>
    38e8:	60 8d       	ldd	r22, Z+24	; 0x18
    38ea:	71 8d       	ldd	r23, Z+25	; 0x19
    38ec:	a6 85       	ldd	r26, Z+14	; 0x0e
    38ee:	b7 85       	ldd	r27, Z+15	; 0x0f
    38f0:	55 85       	ldd	r21, Z+13	; 0x0d
    38f2:	38 e0       	ldi	r19, 0x08	; 8
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	cb 01       	movw	r24, r22
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <__vector_3+0x72>
    38fc:	82 2f       	mov	r24, r18
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	95 95       	asr	r25
    3902:	87 95       	ror	r24
    3904:	28 2f       	mov	r18, r24
    3906:	4c 91       	ld	r20, X
    3908:	45 23       	and	r20, r21
    390a:	09 f0       	breq	.+2      	; 0x390e <__vector_3+0x88>
    390c:	20 68       	ori	r18, 0x80	; 128
    390e:	31 50       	subi	r19, 0x01	; 1
    3910:	91 f7       	brne	.-28     	; 0x38f6 <__vector_3+0x70>
    3912:	86 8d       	ldd	r24, Z+30	; 0x1e
    3914:	81 fd       	sbrc	r24, 1
    3916:	20 95       	com	r18
    3918:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	01 96       	adiw	r24, 0x01	; 1
    3920:	8f 73       	andi	r24, 0x3F	; 63
    3922:	99 27       	eor	r25, r25
    3924:	30 91 2d 05 	lds	r19, 0x052D	; 0x80052d <_ZN14SoftwareSerial20_receive_buffer_headE>
    3928:	38 17       	cp	r19, r24
    392a:	49 f0       	breq	.+18     	; 0x393e <__vector_3+0xb8>
    392c:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	a1 5d       	subi	r26, 0xD1	; 209
    3934:	ba 4f       	sbci	r27, 0xFA	; 250
    3936:	2c 93       	st	X, r18
    3938:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <_ZN14SoftwareSerial20_receive_buffer_tailE>
    393c:	03 c0       	rjmp	.+6      	; 0x3944 <__vector_3+0xbe>
    393e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3940:	81 60       	ori	r24, 0x01	; 1
    3942:	86 8f       	std	Z+30, r24	; 0x1e
    3944:	82 8d       	ldd	r24, Z+26	; 0x1a
    3946:	93 8d       	ldd	r25, Z+27	; 0x1b
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <__vector_3+0xc2>
    394c:	a3 89       	ldd	r26, Z+19	; 0x13
    394e:	b4 89       	ldd	r27, Z+20	; 0x14
    3950:	9c 91       	ld	r25, X
    3952:	85 89       	ldd	r24, Z+21	; 0x15
    3954:	89 2b       	or	r24, r25
    3956:	8c 93       	st	X, r24
    3958:	ff 91       	pop	r31
    395a:	ef 91       	pop	r30
    395c:	bf 91       	pop	r27
    395e:	af 91       	pop	r26
    3960:	9f 91       	pop	r25
    3962:	8f 91       	pop	r24
    3964:	7f 91       	pop	r23
    3966:	6f 91       	pop	r22
    3968:	5f 91       	pop	r21
    396a:	4f 91       	pop	r20
    396c:	3f 91       	pop	r19
    396e:	2f 91       	pop	r18
    3970:	0f 90       	pop	r0
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	0f 90       	pop	r0
    3976:	1f 90       	pop	r1
    3978:	18 95       	reti

0000397a <_ZN14SoftwareSerial5setTXEh>:
    397a:	1f 93       	push	r17
    397c:	cf 93       	push	r28
    397e:	df 93       	push	r29
    3980:	ec 01       	movw	r28, r24
    3982:	16 2f       	mov	r17, r22
    3984:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3986:	66 95       	lsr	r22
    3988:	61 70       	andi	r22, 0x01	; 1
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	68 27       	eor	r22, r24
    398e:	81 2f       	mov	r24, r17
    3990:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
    3994:	61 e0       	ldi	r22, 0x01	; 1
    3996:	81 2f       	mov	r24, r17
    3998:	0e 94 12 1a 	call	0x3424	; 0x3424 <pinMode>
    399c:	81 2f       	mov	r24, r17
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	fc 01       	movw	r30, r24
    39a2:	ea 59       	subi	r30, 0x9A	; 154
    39a4:	f9 4f       	sbci	r31, 0xF9	; 249
    39a6:	e4 91       	lpm	r30, Z
    39a8:	e8 8b       	std	Y+16, r30	; 0x10
    39aa:	fc 01       	movw	r30, r24
    39ac:	e6 58       	subi	r30, 0x86	; 134
    39ae:	f9 4f       	sbci	r31, 0xF9	; 249
    39b0:	e4 91       	lpm	r30, Z
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	ee 0f       	add	r30, r30
    39b6:	ff 1f       	adc	r31, r31
    39b8:	e8 56       	subi	r30, 0x68	; 104
    39ba:	f9 4f       	sbci	r31, 0xF9	; 249
    39bc:	85 91       	lpm	r24, Z+
    39be:	94 91       	lpm	r25, Z
    39c0:	9a 8b       	std	Y+18, r25	; 0x12
    39c2:	89 8b       	std	Y+17, r24	; 0x11
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	1f 91       	pop	r17
    39ca:	08 95       	ret

000039cc <_ZN14SoftwareSerial5setRXEh>:
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	ec 01       	movw	r28, r24
    39d4:	16 2f       	mov	r17, r22
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	81 2f       	mov	r24, r17
    39da:	0e 94 12 1a 	call	0x3424	; 0x3424 <pinMode>
    39de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39e0:	81 fd       	sbrc	r24, 1
    39e2:	04 c0       	rjmp	.+8      	; 0x39ec <_ZN14SoftwareSerial5setRXEh+0x20>
    39e4:	61 e0       	ldi	r22, 0x01	; 1
    39e6:	81 2f       	mov	r24, r17
    39e8:	0e 94 4e 1a 	call	0x349c	; 0x349c <digitalWrite>
    39ec:	1c 87       	std	Y+12, r17	; 0x0c
    39ee:	81 2f       	mov	r24, r17
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	fc 01       	movw	r30, r24
    39f4:	ea 59       	subi	r30, 0x9A	; 154
    39f6:	f9 4f       	sbci	r31, 0xF9	; 249
    39f8:	e4 91       	lpm	r30, Z
    39fa:	ed 87       	std	Y+13, r30	; 0x0d
    39fc:	fc 01       	movw	r30, r24
    39fe:	e6 58       	subi	r30, 0x86	; 134
    3a00:	f9 4f       	sbci	r31, 0xF9	; 249
    3a02:	e4 91       	lpm	r30, Z
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	ee 0f       	add	r30, r30
    3a08:	ff 1f       	adc	r31, r31
    3a0a:	e2 57       	subi	r30, 0x72	; 114
    3a0c:	f9 4f       	sbci	r31, 0xF9	; 249
    3a0e:	85 91       	lpm	r24, Z+
    3a10:	94 91       	lpm	r25, Z
    3a12:	9f 87       	std	Y+15, r25	; 0x0f
    3a14:	8e 87       	std	Y+14, r24	; 0x0e
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	08 95       	ret

00003a1e <_ZN14SoftwareSerialC1Ehhb>:
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	ec 01       	movw	r28, r24
    3a26:	16 2f       	mov	r17, r22
    3a28:	1b 82       	std	Y+3, r1	; 0x03
    3a2a:	1a 82       	std	Y+2, r1	; 0x02
    3a2c:	88 ee       	ldi	r24, 0xE8	; 232
    3a2e:	93 e0       	ldi	r25, 0x03	; 3
    3a30:	a0 e0       	ldi	r26, 0x00	; 0
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	8c 83       	std	Y+4, r24	; 0x04
    3a36:	9d 83       	std	Y+5, r25	; 0x05
    3a38:	ae 83       	std	Y+6, r26	; 0x06
    3a3a:	bf 83       	std	Y+7, r27	; 0x07
    3a3c:	87 e8       	ldi	r24, 0x87	; 135
    3a3e:	92 e0       	ldi	r25, 0x02	; 2
    3a40:	99 83       	std	Y+1, r25	; 0x01
    3a42:	88 83       	st	Y, r24
    3a44:	1f 8a       	std	Y+23, r1	; 0x17
    3a46:	1e 8a       	std	Y+22, r1	; 0x16
    3a48:	19 8e       	std	Y+25, r1	; 0x19
    3a4a:	18 8e       	std	Y+24, r1	; 0x18
    3a4c:	1b 8e       	std	Y+27, r1	; 0x1b
    3a4e:	1a 8e       	std	Y+26, r1	; 0x1a
    3a50:	1d 8e       	std	Y+29, r1	; 0x1d
    3a52:	1c 8e       	std	Y+28, r1	; 0x1c
    3a54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a56:	8e 7f       	andi	r24, 0xFE	; 254
    3a58:	20 fb       	bst	r18, 0
    3a5a:	81 f9       	bld	r24, 1
    3a5c:	8e 8f       	std	Y+30, r24	; 0x1e
    3a5e:	64 2f       	mov	r22, r20
    3a60:	ce 01       	movw	r24, r28
    3a62:	0e 94 bd 1c 	call	0x397a	; 0x397a <_ZN14SoftwareSerial5setTXEh>
    3a66:	61 2f       	mov	r22, r17
    3a68:	ce 01       	movw	r24, r28
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <_ZN14SoftwareSerial5setRXEh>

00003a74 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3a74:	cf 93       	push	r28
    3a76:	df 93       	push	r29
    3a78:	ec 01       	movw	r28, r24
    3a7a:	9a 01       	movw	r18, r20
    3a7c:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3a7e:	1b 8e       	std	Y+27, r1	; 0x1b
    3a80:	1a 8e       	std	Y+26, r1	; 0x1a
    3a82:	19 8e       	std	Y+25, r1	; 0x19
    3a84:	18 8e       	std	Y+24, r1	; 0x18
    3a86:	1f 8a       	std	Y+23, r1	; 0x17
    3a88:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3a8a:	60 e0       	ldi	r22, 0x00	; 0
    3a8c:	79 e0       	ldi	r23, 0x09	; 9
    3a8e:	8d e3       	ldi	r24, 0x3D	; 61
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <__divmodsi4>
    3a96:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3a98:	24 30       	cpi	r18, 0x04	; 4
    3a9a:	31 05       	cpc	r19, r1
    3a9c:	18 f0       	brcs	.+6      	; 0x3aa4 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3a9e:	c9 01       	movw	r24, r18
    3aa0:	03 97       	sbiw	r24, 0x03	; 3
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3aa8:	9d 8f       	std	Y+29, r25	; 0x1d
    3aaa:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3aac:	6c 85       	ldd	r22, Y+12	; 0x0c
    3aae:	66 31       	cpi	r22, 0x16	; 22
    3ab0:	08 f0       	brcs	.+2      	; 0x3ab4 <_ZN14SoftwareSerial5beginEl+0x40>
    3ab2:	69 c0       	rjmp	.+210    	; 0x3b86 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3ab4:	c9 01       	movw	r24, r18
    3ab6:	96 95       	lsr	r25
    3ab8:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3aba:	84 31       	cpi	r24, 0x14	; 20
    3abc:	91 05       	cpc	r25, r1
    3abe:	10 f0       	brcs	.+4      	; 0x3ac4 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3ac0:	43 97       	sbiw	r24, 0x13	; 19
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3ac8:	9f 8b       	std	Y+23, r25	; 0x17
    3aca:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3acc:	36 97       	sbiw	r30, 0x06	; 6
    3ace:	18 f0       	brcs	.+6      	; 0x3ad6 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3ad0:	c9 01       	movw	r24, r18
    3ad2:	05 97       	sbiw	r24, 0x05	; 5
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3ada:	99 8f       	std	Y+25, r25	; 0x19
    3adc:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3ade:	c9 01       	movw	r24, r18
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	28 0f       	add	r18, r24
    3ae6:	39 1f       	adc	r19, r25
    3ae8:	36 95       	lsr	r19
    3aea:	27 95       	ror	r18
    3aec:	36 95       	lsr	r19
    3aee:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3af0:	2d 30       	cpi	r18, 0x0D	; 13
    3af2:	31 05       	cpc	r19, r1
    3af4:	18 f0       	brcs	.+6      	; 0x3afc <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3af6:	2c 50       	subi	r18, 0x0C	; 12
    3af8:	31 09       	sbc	r19, r1
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3afc:	21 e0       	ldi	r18, 0x01	; 1
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3b00:	3b 8f       	std	Y+27, r19	; 0x1b
    3b02:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3b04:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3b08:	68 30       	cpi	r22, 0x08	; 8
    3b0a:	50 f0       	brcs	.+20     	; 0x3b20 <_ZN14SoftwareSerial5beginEl+0xac>
    3b0c:	21 e0       	ldi	r18, 0x01	; 1
    3b0e:	6e 30       	cpi	r22, 0x0E	; 14
    3b10:	08 f4       	brcc	.+2      	; 0x3b14 <_ZN14SoftwareSerial5beginEl+0xa0>
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	01 c0       	rjmp	.+2      	; 0x3b1a <_ZN14SoftwareSerial5beginEl+0xa6>
    3b18:	88 0f       	add	r24, r24
    3b1a:	2a 95       	dec	r18
    3b1c:	ea f7       	brpl	.-6      	; 0x3b18 <_ZN14SoftwareSerial5beginEl+0xa4>
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <_ZN14SoftwareSerial5beginEl+0xae>
    3b20:	84 e0       	ldi	r24, 0x04	; 4
    3b22:	89 2b       	or	r24, r25
    3b24:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    3b28:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b2a:	98 30       	cpi	r25, 0x08	; 8
    3b2c:	38 f0       	brcs	.+14     	; 0x3b3c <_ZN14SoftwareSerial5beginEl+0xc8>
    3b2e:	9e 30       	cpi	r25, 0x0E	; 14
    3b30:	40 f0       	brcs	.+16     	; 0x3b42 <_ZN14SoftwareSerial5beginEl+0xce>
    3b32:	96 31       	cpi	r25, 0x16	; 22
    3b34:	48 f0       	brcs	.+18     	; 0x3b48 <_ZN14SoftwareSerial5beginEl+0xd4>
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	08 c0       	rjmp	.+16     	; 0x3b4c <_ZN14SoftwareSerial5beginEl+0xd8>
    3b3c:	2d e6       	ldi	r18, 0x6D	; 109
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	05 c0       	rjmp	.+10     	; 0x3b4c <_ZN14SoftwareSerial5beginEl+0xd8>
    3b42:	2b e6       	ldi	r18, 0x6B	; 107
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <_ZN14SoftwareSerial5beginEl+0xd8>
    3b48:	2c e6       	ldi	r18, 0x6C	; 108
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	3c 8b       	std	Y+20, r19	; 0x14
    3b4e:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3b50:	98 30       	cpi	r25, 0x08	; 8
    3b52:	30 f4       	brcc	.+12     	; 0x3b60 <_ZN14SoftwareSerial5beginEl+0xec>
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <_ZN14SoftwareSerial5beginEl+0xe6>
    3b58:	88 0f       	add	r24, r24
    3b5a:	9a 95       	dec	r25
    3b5c:	ea f7       	brpl	.-6      	; 0x3b58 <_ZN14SoftwareSerial5beginEl+0xe4>
    3b5e:	0e c0       	rjmp	.+28     	; 0x3b7c <_ZN14SoftwareSerial5beginEl+0x108>
    3b60:	29 2f       	mov	r18, r25
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	9e 30       	cpi	r25, 0x0E	; 14
    3b66:	18 f4       	brcc	.+6      	; 0x3b6e <_ZN14SoftwareSerial5beginEl+0xfa>
    3b68:	28 50       	subi	r18, 0x08	; 8
    3b6a:	31 09       	sbc	r19, r1
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <_ZN14SoftwareSerial5beginEl+0xfe>
    3b6e:	2e 50       	subi	r18, 0x0E	; 14
    3b70:	31 09       	sbc	r19, r1
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	01 c0       	rjmp	.+2      	; 0x3b78 <_ZN14SoftwareSerial5beginEl+0x104>
    3b76:	88 0f       	add	r24, r24
    3b78:	2a 95       	dec	r18
    3b7a:	ea f7       	brpl	.-6      	; 0x3b76 <_ZN14SoftwareSerial5beginEl+0x102>
    3b7c:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3b7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b82:	01 97       	sbiw	r24, 0x01	; 1
    3b84:	f1 f7       	brne	.-4      	; 0x3b82 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3b86:	ce 01       	movw	r24, r28
}
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3b8c:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <_ZN14SoftwareSerial6listenEv>

00003b90 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3b90:	08 95       	ret

00003b92 <__udivmodqi4>:
    3b92:	99 1b       	sub	r25, r25
    3b94:	79 e0       	ldi	r23, 0x09	; 9
    3b96:	04 c0       	rjmp	.+8      	; 0x3ba0 <__udivmodqi4_ep>

00003b98 <__udivmodqi4_loop>:
    3b98:	99 1f       	adc	r25, r25
    3b9a:	96 17       	cp	r25, r22
    3b9c:	08 f0       	brcs	.+2      	; 0x3ba0 <__udivmodqi4_ep>
    3b9e:	96 1b       	sub	r25, r22

00003ba0 <__udivmodqi4_ep>:
    3ba0:	88 1f       	adc	r24, r24
    3ba2:	7a 95       	dec	r23
    3ba4:	c9 f7       	brne	.-14     	; 0x3b98 <__udivmodqi4_loop>
    3ba6:	80 95       	com	r24
    3ba8:	08 95       	ret

00003baa <__udivmodhi4>:
    3baa:	aa 1b       	sub	r26, r26
    3bac:	bb 1b       	sub	r27, r27
    3bae:	51 e1       	ldi	r21, 0x11	; 17
    3bb0:	07 c0       	rjmp	.+14     	; 0x3bc0 <__udivmodhi4_ep>

00003bb2 <__udivmodhi4_loop>:
    3bb2:	aa 1f       	adc	r26, r26
    3bb4:	bb 1f       	adc	r27, r27
    3bb6:	a6 17       	cp	r26, r22
    3bb8:	b7 07       	cpc	r27, r23
    3bba:	10 f0       	brcs	.+4      	; 0x3bc0 <__udivmodhi4_ep>
    3bbc:	a6 1b       	sub	r26, r22
    3bbe:	b7 0b       	sbc	r27, r23

00003bc0 <__udivmodhi4_ep>:
    3bc0:	88 1f       	adc	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	5a 95       	dec	r21
    3bc6:	a9 f7       	brne	.-22     	; 0x3bb2 <__udivmodhi4_loop>
    3bc8:	80 95       	com	r24
    3bca:	90 95       	com	r25
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	08 95       	ret

00003bd2 <__divmodhi4>:
    3bd2:	97 fb       	bst	r25, 7
    3bd4:	07 2e       	mov	r0, r23
    3bd6:	16 f4       	brtc	.+4      	; 0x3bdc <__divmodhi4+0xa>
    3bd8:	00 94       	com	r0
    3bda:	07 d0       	rcall	.+14     	; 0x3bea <__divmodhi4_neg1>
    3bdc:	77 fd       	sbrc	r23, 7
    3bde:	09 d0       	rcall	.+18     	; 0x3bf2 <__divmodhi4_neg2>
    3be0:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <__udivmodhi4>
    3be4:	07 fc       	sbrc	r0, 7
    3be6:	05 d0       	rcall	.+10     	; 0x3bf2 <__divmodhi4_neg2>
    3be8:	3e f4       	brtc	.+14     	; 0x3bf8 <__divmodhi4_exit>

00003bea <__divmodhi4_neg1>:
    3bea:	90 95       	com	r25
    3bec:	81 95       	neg	r24
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	08 95       	ret

00003bf2 <__divmodhi4_neg2>:
    3bf2:	70 95       	com	r23
    3bf4:	61 95       	neg	r22
    3bf6:	7f 4f       	sbci	r23, 0xFF	; 255

00003bf8 <__divmodhi4_exit>:
    3bf8:	08 95       	ret

00003bfa <__udivmodsi4>:
    3bfa:	a1 e2       	ldi	r26, 0x21	; 33
    3bfc:	1a 2e       	mov	r1, r26
    3bfe:	aa 1b       	sub	r26, r26
    3c00:	bb 1b       	sub	r27, r27
    3c02:	fd 01       	movw	r30, r26
    3c04:	0d c0       	rjmp	.+26     	; 0x3c20 <__udivmodsi4_ep>

00003c06 <__udivmodsi4_loop>:
    3c06:	aa 1f       	adc	r26, r26
    3c08:	bb 1f       	adc	r27, r27
    3c0a:	ee 1f       	adc	r30, r30
    3c0c:	ff 1f       	adc	r31, r31
    3c0e:	a2 17       	cp	r26, r18
    3c10:	b3 07       	cpc	r27, r19
    3c12:	e4 07       	cpc	r30, r20
    3c14:	f5 07       	cpc	r31, r21
    3c16:	20 f0       	brcs	.+8      	; 0x3c20 <__udivmodsi4_ep>
    3c18:	a2 1b       	sub	r26, r18
    3c1a:	b3 0b       	sbc	r27, r19
    3c1c:	e4 0b       	sbc	r30, r20
    3c1e:	f5 0b       	sbc	r31, r21

00003c20 <__udivmodsi4_ep>:
    3c20:	66 1f       	adc	r22, r22
    3c22:	77 1f       	adc	r23, r23
    3c24:	88 1f       	adc	r24, r24
    3c26:	99 1f       	adc	r25, r25
    3c28:	1a 94       	dec	r1
    3c2a:	69 f7       	brne	.-38     	; 0x3c06 <__udivmodsi4_loop>
    3c2c:	60 95       	com	r22
    3c2e:	70 95       	com	r23
    3c30:	80 95       	com	r24
    3c32:	90 95       	com	r25
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24
    3c38:	bd 01       	movw	r22, r26
    3c3a:	cf 01       	movw	r24, r30
    3c3c:	08 95       	ret

00003c3e <__divmodsi4>:
    3c3e:	05 2e       	mov	r0, r21
    3c40:	97 fb       	bst	r25, 7
    3c42:	1e f4       	brtc	.+6      	; 0x3c4a <__divmodsi4+0xc>
    3c44:	00 94       	com	r0
    3c46:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__negsi2>
    3c4a:	57 fd       	sbrc	r21, 7
    3c4c:	07 d0       	rcall	.+14     	; 0x3c5c <__divmodsi4_neg2>
    3c4e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__udivmodsi4>
    3c52:	07 fc       	sbrc	r0, 7
    3c54:	03 d0       	rcall	.+6      	; 0x3c5c <__divmodsi4_neg2>
    3c56:	4e f4       	brtc	.+18     	; 0x3c6a <__divmodsi4_exit>
    3c58:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <__negsi2>

00003c5c <__divmodsi4_neg2>:
    3c5c:	50 95       	com	r21
    3c5e:	40 95       	com	r20
    3c60:	30 95       	com	r19
    3c62:	21 95       	neg	r18
    3c64:	3f 4f       	sbci	r19, 0xFF	; 255
    3c66:	4f 4f       	sbci	r20, 0xFF	; 255
    3c68:	5f 4f       	sbci	r21, 0xFF	; 255

00003c6a <__divmodsi4_exit>:
    3c6a:	08 95       	ret

00003c6c <__negsi2>:
    3c6c:	90 95       	com	r25
    3c6e:	80 95       	com	r24
    3c70:	70 95       	com	r23
    3c72:	61 95       	neg	r22
    3c74:	7f 4f       	sbci	r23, 0xFF	; 255
    3c76:	8f 4f       	sbci	r24, 0xFF	; 255
    3c78:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7a:	08 95       	ret

00003c7c <__tablejump2__>:
    3c7c:	ee 0f       	add	r30, r30
    3c7e:	ff 1f       	adc	r31, r31
    3c80:	05 90       	lpm	r0, Z+
    3c82:	f4 91       	lpm	r31, Z
    3c84:	e0 2d       	mov	r30, r0
    3c86:	09 94       	ijmp

00003c88 <malloc>:
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
    3c8c:	cf 93       	push	r28
    3c8e:	df 93       	push	r29
    3c90:	82 30       	cpi	r24, 0x02	; 2
    3c92:	91 05       	cpc	r25, r1
    3c94:	10 f4       	brcc	.+4      	; 0x3c9a <malloc+0x12>
    3c96:	82 e0       	ldi	r24, 0x02	; 2
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	e0 91 73 05 	lds	r30, 0x0573	; 0x800573 <__flp>
    3c9e:	f0 91 74 05 	lds	r31, 0x0574	; 0x800574 <__flp+0x1>
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	a0 e0       	ldi	r26, 0x00	; 0
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	30 97       	sbiw	r30, 0x00	; 0
    3cac:	19 f1       	breq	.+70     	; 0x3cf4 <malloc+0x6c>
    3cae:	40 81       	ld	r20, Z
    3cb0:	51 81       	ldd	r21, Z+1	; 0x01
    3cb2:	02 81       	ldd	r16, Z+2	; 0x02
    3cb4:	13 81       	ldd	r17, Z+3	; 0x03
    3cb6:	48 17       	cp	r20, r24
    3cb8:	59 07       	cpc	r21, r25
    3cba:	c8 f0       	brcs	.+50     	; 0x3cee <malloc+0x66>
    3cbc:	84 17       	cp	r24, r20
    3cbe:	95 07       	cpc	r25, r21
    3cc0:	69 f4       	brne	.+26     	; 0x3cdc <malloc+0x54>
    3cc2:	10 97       	sbiw	r26, 0x00	; 0
    3cc4:	31 f0       	breq	.+12     	; 0x3cd2 <malloc+0x4a>
    3cc6:	12 96       	adiw	r26, 0x02	; 2
    3cc8:	0c 93       	st	X, r16
    3cca:	12 97       	sbiw	r26, 0x02	; 2
    3ccc:	13 96       	adiw	r26, 0x03	; 3
    3cce:	1c 93       	st	X, r17
    3cd0:	27 c0       	rjmp	.+78     	; 0x3d20 <malloc+0x98>
    3cd2:	00 93 73 05 	sts	0x0573, r16	; 0x800573 <__flp>
    3cd6:	10 93 74 05 	sts	0x0574, r17	; 0x800574 <__flp+0x1>
    3cda:	22 c0       	rjmp	.+68     	; 0x3d20 <malloc+0x98>
    3cdc:	21 15       	cp	r18, r1
    3cde:	31 05       	cpc	r19, r1
    3ce0:	19 f0       	breq	.+6      	; 0x3ce8 <malloc+0x60>
    3ce2:	42 17       	cp	r20, r18
    3ce4:	53 07       	cpc	r21, r19
    3ce6:	18 f4       	brcc	.+6      	; 0x3cee <malloc+0x66>
    3ce8:	9a 01       	movw	r18, r20
    3cea:	bd 01       	movw	r22, r26
    3cec:	ef 01       	movw	r28, r30
    3cee:	df 01       	movw	r26, r30
    3cf0:	f8 01       	movw	r30, r16
    3cf2:	db cf       	rjmp	.-74     	; 0x3caa <malloc+0x22>
    3cf4:	21 15       	cp	r18, r1
    3cf6:	31 05       	cpc	r19, r1
    3cf8:	f9 f0       	breq	.+62     	; 0x3d38 <malloc+0xb0>
    3cfa:	28 1b       	sub	r18, r24
    3cfc:	39 0b       	sbc	r19, r25
    3cfe:	24 30       	cpi	r18, 0x04	; 4
    3d00:	31 05       	cpc	r19, r1
    3d02:	80 f4       	brcc	.+32     	; 0x3d24 <malloc+0x9c>
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	9b 81       	ldd	r25, Y+3	; 0x03
    3d08:	61 15       	cp	r22, r1
    3d0a:	71 05       	cpc	r23, r1
    3d0c:	21 f0       	breq	.+8      	; 0x3d16 <malloc+0x8e>
    3d0e:	fb 01       	movw	r30, r22
    3d10:	93 83       	std	Z+3, r25	; 0x03
    3d12:	82 83       	std	Z+2, r24	; 0x02
    3d14:	04 c0       	rjmp	.+8      	; 0x3d1e <malloc+0x96>
    3d16:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <__flp+0x1>
    3d1a:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <__flp>
    3d1e:	fe 01       	movw	r30, r28
    3d20:	32 96       	adiw	r30, 0x02	; 2
    3d22:	44 c0       	rjmp	.+136    	; 0x3dac <malloc+0x124>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e2 0f       	add	r30, r18
    3d28:	f3 1f       	adc	r31, r19
    3d2a:	81 93       	st	Z+, r24
    3d2c:	91 93       	st	Z+, r25
    3d2e:	22 50       	subi	r18, 0x02	; 2
    3d30:	31 09       	sbc	r19, r1
    3d32:	39 83       	std	Y+1, r19	; 0x01
    3d34:	28 83       	st	Y, r18
    3d36:	3a c0       	rjmp	.+116    	; 0x3dac <malloc+0x124>
    3d38:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    3d3c:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    3d40:	23 2b       	or	r18, r19
    3d42:	41 f4       	brne	.+16     	; 0x3d54 <malloc+0xcc>
    3d44:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3d48:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3d4c:	30 93 72 05 	sts	0x0572, r19	; 0x800572 <__brkval+0x1>
    3d50:	20 93 71 05 	sts	0x0571, r18	; 0x800571 <__brkval>
    3d54:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3d58:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3d5c:	21 15       	cp	r18, r1
    3d5e:	31 05       	cpc	r19, r1
    3d60:	41 f4       	brne	.+16     	; 0x3d72 <malloc+0xea>
    3d62:	2d b7       	in	r18, 0x3d	; 61
    3d64:	3e b7       	in	r19, 0x3e	; 62
    3d66:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3d6a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3d6e:	24 1b       	sub	r18, r20
    3d70:	35 0b       	sbc	r19, r21
    3d72:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <__brkval>
    3d76:	f0 91 72 05 	lds	r31, 0x0572	; 0x800572 <__brkval+0x1>
    3d7a:	e2 17       	cp	r30, r18
    3d7c:	f3 07       	cpc	r31, r19
    3d7e:	a0 f4       	brcc	.+40     	; 0x3da8 <malloc+0x120>
    3d80:	2e 1b       	sub	r18, r30
    3d82:	3f 0b       	sbc	r19, r31
    3d84:	28 17       	cp	r18, r24
    3d86:	39 07       	cpc	r19, r25
    3d88:	78 f0       	brcs	.+30     	; 0x3da8 <malloc+0x120>
    3d8a:	ac 01       	movw	r20, r24
    3d8c:	4e 5f       	subi	r20, 0xFE	; 254
    3d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d90:	24 17       	cp	r18, r20
    3d92:	35 07       	cpc	r19, r21
    3d94:	48 f0       	brcs	.+18     	; 0x3da8 <malloc+0x120>
    3d96:	4e 0f       	add	r20, r30
    3d98:	5f 1f       	adc	r21, r31
    3d9a:	50 93 72 05 	sts	0x0572, r21	; 0x800572 <__brkval+0x1>
    3d9e:	40 93 71 05 	sts	0x0571, r20	; 0x800571 <__brkval>
    3da2:	81 93       	st	Z+, r24
    3da4:	91 93       	st	Z+, r25
    3da6:	02 c0       	rjmp	.+4      	; 0x3dac <malloc+0x124>
    3da8:	e0 e0       	ldi	r30, 0x00	; 0
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	cf 01       	movw	r24, r30
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	1f 91       	pop	r17
    3db4:	0f 91       	pop	r16
    3db6:	08 95       	ret

00003db8 <free>:
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	09 f4       	brne	.+2      	; 0x3dc2 <free+0xa>
    3dc0:	81 c0       	rjmp	.+258    	; 0x3ec4 <free+0x10c>
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	32 97       	sbiw	r30, 0x02	; 2
    3dc6:	13 82       	std	Z+3, r1	; 0x03
    3dc8:	12 82       	std	Z+2, r1	; 0x02
    3dca:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <__flp>
    3dce:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <__flp+0x1>
    3dd2:	10 97       	sbiw	r26, 0x00	; 0
    3dd4:	81 f4       	brne	.+32     	; 0x3df6 <free+0x3e>
    3dd6:	20 81       	ld	r18, Z
    3dd8:	31 81       	ldd	r19, Z+1	; 0x01
    3dda:	82 0f       	add	r24, r18
    3ddc:	93 1f       	adc	r25, r19
    3dde:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    3de2:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    3de6:	28 17       	cp	r18, r24
    3de8:	39 07       	cpc	r19, r25
    3dea:	51 f5       	brne	.+84     	; 0x3e40 <free+0x88>
    3dec:	f0 93 72 05 	sts	0x0572, r31	; 0x800572 <__brkval+0x1>
    3df0:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <__brkval>
    3df4:	67 c0       	rjmp	.+206    	; 0x3ec4 <free+0x10c>
    3df6:	ed 01       	movw	r28, r26
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	ce 17       	cp	r28, r30
    3dfe:	df 07       	cpc	r29, r31
    3e00:	40 f4       	brcc	.+16     	; 0x3e12 <free+0x5a>
    3e02:	4a 81       	ldd	r20, Y+2	; 0x02
    3e04:	5b 81       	ldd	r21, Y+3	; 0x03
    3e06:	9e 01       	movw	r18, r28
    3e08:	41 15       	cp	r20, r1
    3e0a:	51 05       	cpc	r21, r1
    3e0c:	f1 f0       	breq	.+60     	; 0x3e4a <free+0x92>
    3e0e:	ea 01       	movw	r28, r20
    3e10:	f5 cf       	rjmp	.-22     	; 0x3dfc <free+0x44>
    3e12:	d3 83       	std	Z+3, r29	; 0x03
    3e14:	c2 83       	std	Z+2, r28	; 0x02
    3e16:	40 81       	ld	r20, Z
    3e18:	51 81       	ldd	r21, Z+1	; 0x01
    3e1a:	84 0f       	add	r24, r20
    3e1c:	95 1f       	adc	r25, r21
    3e1e:	c8 17       	cp	r28, r24
    3e20:	d9 07       	cpc	r29, r25
    3e22:	59 f4       	brne	.+22     	; 0x3e3a <free+0x82>
    3e24:	88 81       	ld	r24, Y
    3e26:	99 81       	ldd	r25, Y+1	; 0x01
    3e28:	84 0f       	add	r24, r20
    3e2a:	95 1f       	adc	r25, r21
    3e2c:	02 96       	adiw	r24, 0x02	; 2
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	80 83       	st	Z, r24
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	9b 81       	ldd	r25, Y+3	; 0x03
    3e36:	93 83       	std	Z+3, r25	; 0x03
    3e38:	82 83       	std	Z+2, r24	; 0x02
    3e3a:	21 15       	cp	r18, r1
    3e3c:	31 05       	cpc	r19, r1
    3e3e:	29 f4       	brne	.+10     	; 0x3e4a <free+0x92>
    3e40:	f0 93 74 05 	sts	0x0574, r31	; 0x800574 <__flp+0x1>
    3e44:	e0 93 73 05 	sts	0x0573, r30	; 0x800573 <__flp>
    3e48:	3d c0       	rjmp	.+122    	; 0x3ec4 <free+0x10c>
    3e4a:	e9 01       	movw	r28, r18
    3e4c:	fb 83       	std	Y+3, r31	; 0x03
    3e4e:	ea 83       	std	Y+2, r30	; 0x02
    3e50:	49 91       	ld	r20, Y+
    3e52:	59 91       	ld	r21, Y+
    3e54:	c4 0f       	add	r28, r20
    3e56:	d5 1f       	adc	r29, r21
    3e58:	ec 17       	cp	r30, r28
    3e5a:	fd 07       	cpc	r31, r29
    3e5c:	61 f4       	brne	.+24     	; 0x3e76 <free+0xbe>
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	84 0f       	add	r24, r20
    3e64:	95 1f       	adc	r25, r21
    3e66:	02 96       	adiw	r24, 0x02	; 2
    3e68:	e9 01       	movw	r28, r18
    3e6a:	99 83       	std	Y+1, r25	; 0x01
    3e6c:	88 83       	st	Y, r24
    3e6e:	82 81       	ldd	r24, Z+2	; 0x02
    3e70:	93 81       	ldd	r25, Z+3	; 0x03
    3e72:	9b 83       	std	Y+3, r25	; 0x03
    3e74:	8a 83       	std	Y+2, r24	; 0x02
    3e76:	e0 e0       	ldi	r30, 0x00	; 0
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	12 96       	adiw	r26, 0x02	; 2
    3e7c:	8d 91       	ld	r24, X+
    3e7e:	9c 91       	ld	r25, X
    3e80:	13 97       	sbiw	r26, 0x03	; 3
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	19 f0       	breq	.+6      	; 0x3e8c <free+0xd4>
    3e86:	fd 01       	movw	r30, r26
    3e88:	dc 01       	movw	r26, r24
    3e8a:	f7 cf       	rjmp	.-18     	; 0x3e7a <free+0xc2>
    3e8c:	8d 91       	ld	r24, X+
    3e8e:	9c 91       	ld	r25, X
    3e90:	11 97       	sbiw	r26, 0x01	; 1
    3e92:	9d 01       	movw	r18, r26
    3e94:	2e 5f       	subi	r18, 0xFE	; 254
    3e96:	3f 4f       	sbci	r19, 0xFF	; 255
    3e98:	82 0f       	add	r24, r18
    3e9a:	93 1f       	adc	r25, r19
    3e9c:	20 91 71 05 	lds	r18, 0x0571	; 0x800571 <__brkval>
    3ea0:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <__brkval+0x1>
    3ea4:	28 17       	cp	r18, r24
    3ea6:	39 07       	cpc	r19, r25
    3ea8:	69 f4       	brne	.+26     	; 0x3ec4 <free+0x10c>
    3eaa:	30 97       	sbiw	r30, 0x00	; 0
    3eac:	29 f4       	brne	.+10     	; 0x3eb8 <free+0x100>
    3eae:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <__flp+0x1>
    3eb2:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <__flp>
    3eb6:	02 c0       	rjmp	.+4      	; 0x3ebc <free+0x104>
    3eb8:	13 82       	std	Z+3, r1	; 0x03
    3eba:	12 82       	std	Z+2, r1	; 0x02
    3ebc:	b0 93 72 05 	sts	0x0572, r27	; 0x800572 <__brkval+0x1>
    3ec0:	a0 93 71 05 	sts	0x0571, r26	; 0x800571 <__brkval>
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	08 95       	ret

00003eca <realloc>:
    3eca:	a0 e0       	ldi	r26, 0x00	; 0
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	eb e6       	ldi	r30, 0x6B	; 107
    3ed0:	ff e1       	ldi	r31, 0x1F	; 31
    3ed2:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__prologue_saves__+0x8>
    3ed6:	ec 01       	movw	r28, r24
    3ed8:	00 97       	sbiw	r24, 0x00	; 0
    3eda:	21 f4       	brne	.+8      	; 0x3ee4 <realloc+0x1a>
    3edc:	cb 01       	movw	r24, r22
    3ede:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <malloc>
    3ee2:	b4 c0       	rjmp	.+360    	; 0x404c <realloc+0x182>
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	e6 0f       	add	r30, r22
    3ee8:	f7 1f       	adc	r31, r23
    3eea:	9c 01       	movw	r18, r24
    3eec:	22 50       	subi	r18, 0x02	; 2
    3eee:	31 09       	sbc	r19, r1
    3ef0:	e2 17       	cp	r30, r18
    3ef2:	f3 07       	cpc	r31, r19
    3ef4:	08 f4       	brcc	.+2      	; 0x3ef8 <realloc+0x2e>
    3ef6:	a8 c0       	rjmp	.+336    	; 0x4048 <realloc+0x17e>
    3ef8:	d9 01       	movw	r26, r18
    3efa:	0d 91       	ld	r16, X+
    3efc:	1c 91       	ld	r17, X
    3efe:	11 97       	sbiw	r26, 0x01	; 1
    3f00:	06 17       	cp	r16, r22
    3f02:	17 07       	cpc	r17, r23
    3f04:	b0 f0       	brcs	.+44     	; 0x3f32 <realloc+0x68>
    3f06:	05 30       	cpi	r16, 0x05	; 5
    3f08:	11 05       	cpc	r17, r1
    3f0a:	08 f4       	brcc	.+2      	; 0x3f0e <realloc+0x44>
    3f0c:	9b c0       	rjmp	.+310    	; 0x4044 <realloc+0x17a>
    3f0e:	c8 01       	movw	r24, r16
    3f10:	04 97       	sbiw	r24, 0x04	; 4
    3f12:	86 17       	cp	r24, r22
    3f14:	97 07       	cpc	r25, r23
    3f16:	08 f4       	brcc	.+2      	; 0x3f1a <realloc+0x50>
    3f18:	95 c0       	rjmp	.+298    	; 0x4044 <realloc+0x17a>
    3f1a:	02 50       	subi	r16, 0x02	; 2
    3f1c:	11 09       	sbc	r17, r1
    3f1e:	06 1b       	sub	r16, r22
    3f20:	17 0b       	sbc	r17, r23
    3f22:	01 93       	st	Z+, r16
    3f24:	11 93       	st	Z+, r17
    3f26:	6d 93       	st	X+, r22
    3f28:	7c 93       	st	X, r23
    3f2a:	cf 01       	movw	r24, r30
    3f2c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <free>
    3f30:	89 c0       	rjmp	.+274    	; 0x4044 <realloc+0x17a>
    3f32:	5b 01       	movw	r10, r22
    3f34:	a0 1a       	sub	r10, r16
    3f36:	b1 0a       	sbc	r11, r17
    3f38:	4c 01       	movw	r8, r24
    3f3a:	80 0e       	add	r8, r16
    3f3c:	91 1e       	adc	r9, r17
    3f3e:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <__flp>
    3f42:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <__flp+0x1>
    3f46:	61 2c       	mov	r6, r1
    3f48:	71 2c       	mov	r7, r1
    3f4a:	e1 2c       	mov	r14, r1
    3f4c:	f1 2c       	mov	r15, r1
    3f4e:	10 97       	sbiw	r26, 0x00	; 0
    3f50:	09 f4       	brne	.+2      	; 0x3f54 <realloc+0x8a>
    3f52:	46 c0       	rjmp	.+140    	; 0x3fe0 <realloc+0x116>
    3f54:	8d 91       	ld	r24, X+
    3f56:	9c 91       	ld	r25, X
    3f58:	11 97       	sbiw	r26, 0x01	; 1
    3f5a:	a8 15       	cp	r26, r8
    3f5c:	b9 05       	cpc	r27, r9
    3f5e:	b1 f5       	brne	.+108    	; 0x3fcc <realloc+0x102>
    3f60:	6c 01       	movw	r12, r24
    3f62:	42 e0       	ldi	r20, 0x02	; 2
    3f64:	c4 0e       	add	r12, r20
    3f66:	d1 1c       	adc	r13, r1
    3f68:	ca 14       	cp	r12, r10
    3f6a:	db 04       	cpc	r13, r11
    3f6c:	78 f1       	brcs	.+94     	; 0x3fcc <realloc+0x102>
    3f6e:	4c 01       	movw	r8, r24
    3f70:	8a 18       	sub	r8, r10
    3f72:	9b 08       	sbc	r9, r11
    3f74:	64 01       	movw	r12, r8
    3f76:	42 e0       	ldi	r20, 0x02	; 2
    3f78:	c4 0e       	add	r12, r20
    3f7a:	d1 1c       	adc	r13, r1
    3f7c:	12 96       	adiw	r26, 0x02	; 2
    3f7e:	bc 90       	ld	r11, X
    3f80:	12 97       	sbiw	r26, 0x02	; 2
    3f82:	13 96       	adiw	r26, 0x03	; 3
    3f84:	ac 91       	ld	r26, X
    3f86:	b5 e0       	ldi	r27, 0x05	; 5
    3f88:	cb 16       	cp	r12, r27
    3f8a:	d1 04       	cpc	r13, r1
    3f8c:	40 f0       	brcs	.+16     	; 0x3f9e <realloc+0xd4>
    3f8e:	b2 82       	std	Z+2, r11	; 0x02
    3f90:	a3 83       	std	Z+3, r26	; 0x03
    3f92:	91 82       	std	Z+1, r9	; 0x01
    3f94:	80 82       	st	Z, r8
    3f96:	d9 01       	movw	r26, r18
    3f98:	6d 93       	st	X+, r22
    3f9a:	7c 93       	st	X, r23
    3f9c:	09 c0       	rjmp	.+18     	; 0x3fb0 <realloc+0xe6>
    3f9e:	0e 5f       	subi	r16, 0xFE	; 254
    3fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa2:	80 0f       	add	r24, r16
    3fa4:	91 1f       	adc	r25, r17
    3fa6:	f9 01       	movw	r30, r18
    3fa8:	91 83       	std	Z+1, r25	; 0x01
    3faa:	80 83       	st	Z, r24
    3fac:	eb 2d       	mov	r30, r11
    3fae:	fa 2f       	mov	r31, r26
    3fb0:	e1 14       	cp	r14, r1
    3fb2:	f1 04       	cpc	r15, r1
    3fb4:	31 f0       	breq	.+12     	; 0x3fc2 <realloc+0xf8>
    3fb6:	d7 01       	movw	r26, r14
    3fb8:	13 96       	adiw	r26, 0x03	; 3
    3fba:	fc 93       	st	X, r31
    3fbc:	ee 93       	st	-X, r30
    3fbe:	12 97       	sbiw	r26, 0x02	; 2
    3fc0:	41 c0       	rjmp	.+130    	; 0x4044 <realloc+0x17a>
    3fc2:	f0 93 74 05 	sts	0x0574, r31	; 0x800574 <__flp+0x1>
    3fc6:	e0 93 73 05 	sts	0x0573, r30	; 0x800573 <__flp>
    3fca:	3c c0       	rjmp	.+120    	; 0x4044 <realloc+0x17a>
    3fcc:	68 16       	cp	r6, r24
    3fce:	79 06       	cpc	r7, r25
    3fd0:	08 f4       	brcc	.+2      	; 0x3fd4 <realloc+0x10a>
    3fd2:	3c 01       	movw	r6, r24
    3fd4:	7d 01       	movw	r14, r26
    3fd6:	12 96       	adiw	r26, 0x02	; 2
    3fd8:	0d 90       	ld	r0, X+
    3fda:	bc 91       	ld	r27, X
    3fdc:	a0 2d       	mov	r26, r0
    3fde:	b7 cf       	rjmp	.-146    	; 0x3f4e <realloc+0x84>
    3fe0:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <__brkval>
    3fe4:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <__brkval+0x1>
    3fe8:	88 16       	cp	r8, r24
    3fea:	99 06       	cpc	r9, r25
    3fec:	e1 f4       	brne	.+56     	; 0x4026 <realloc+0x15c>
    3fee:	66 16       	cp	r6, r22
    3ff0:	77 06       	cpc	r7, r23
    3ff2:	c8 f4       	brcc	.+50     	; 0x4026 <realloc+0x15c>
    3ff4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3ff8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	41 f4       	brne	.+16     	; 0x4010 <realloc+0x146>
    4000:	8d b7       	in	r24, 0x3d	; 61
    4002:	9e b7       	in	r25, 0x3e	; 62
    4004:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4008:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    400c:	84 1b       	sub	r24, r20
    400e:	95 0b       	sbc	r25, r21
    4010:	e8 17       	cp	r30, r24
    4012:	f9 07       	cpc	r31, r25
    4014:	c8 f4       	brcc	.+50     	; 0x4048 <realloc+0x17e>
    4016:	f0 93 72 05 	sts	0x0572, r31	; 0x800572 <__brkval+0x1>
    401a:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <__brkval>
    401e:	f9 01       	movw	r30, r18
    4020:	71 83       	std	Z+1, r23	; 0x01
    4022:	60 83       	st	Z, r22
    4024:	0f c0       	rjmp	.+30     	; 0x4044 <realloc+0x17a>
    4026:	cb 01       	movw	r24, r22
    4028:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <malloc>
    402c:	7c 01       	movw	r14, r24
    402e:	00 97       	sbiw	r24, 0x00	; 0
    4030:	59 f0       	breq	.+22     	; 0x4048 <realloc+0x17e>
    4032:	a8 01       	movw	r20, r16
    4034:	be 01       	movw	r22, r28
    4036:	0e 94 75 20 	call	0x40ea	; 0x40ea <memcpy>
    403a:	ce 01       	movw	r24, r28
    403c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <free>
    4040:	c7 01       	movw	r24, r14
    4042:	04 c0       	rjmp	.+8      	; 0x404c <realloc+0x182>
    4044:	ce 01       	movw	r24, r28
    4046:	02 c0       	rjmp	.+4      	; 0x404c <realloc+0x182>
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	ee e0       	ldi	r30, 0x0E	; 14
    4052:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__epilogue_restores__+0x8>

00004056 <atoi>:
    4056:	fc 01       	movw	r30, r24
    4058:	88 27       	eor	r24, r24
    405a:	99 27       	eor	r25, r25
    405c:	e8 94       	clt
    405e:	21 91       	ld	r18, Z+
    4060:	20 32       	cpi	r18, 0x20	; 32
    4062:	e9 f3       	breq	.-6      	; 0x405e <atoi+0x8>
    4064:	29 30       	cpi	r18, 0x09	; 9
    4066:	10 f0       	brcs	.+4      	; 0x406c <atoi+0x16>
    4068:	2e 30       	cpi	r18, 0x0E	; 14
    406a:	c8 f3       	brcs	.-14     	; 0x405e <atoi+0x8>
    406c:	2b 32       	cpi	r18, 0x2B	; 43
    406e:	41 f0       	breq	.+16     	; 0x4080 <atoi+0x2a>
    4070:	2d 32       	cpi	r18, 0x2D	; 45
    4072:	39 f4       	brne	.+14     	; 0x4082 <atoi+0x2c>
    4074:	68 94       	set
    4076:	04 c0       	rjmp	.+8      	; 0x4080 <atoi+0x2a>
    4078:	0e 94 90 20 	call	0x4120	; 0x4120 <__mulhi_const_10>
    407c:	82 0f       	add	r24, r18
    407e:	91 1d       	adc	r25, r1
    4080:	21 91       	ld	r18, Z+
    4082:	20 53       	subi	r18, 0x30	; 48
    4084:	2a 30       	cpi	r18, 0x0A	; 10
    4086:	c0 f3       	brcs	.-16     	; 0x4078 <atoi+0x22>
    4088:	1e f4       	brtc	.+6      	; 0x4090 <atoi+0x3a>
    408a:	90 95       	com	r25
    408c:	81 95       	neg	r24
    408e:	9f 4f       	sbci	r25, 0xFF	; 255
    4090:	08 95       	ret

00004092 <strcmp_P>:
    4092:	fb 01       	movw	r30, r22
    4094:	dc 01       	movw	r26, r24
    4096:	8d 91       	ld	r24, X+
    4098:	05 90       	lpm	r0, Z+
    409a:	80 19       	sub	r24, r0
    409c:	01 10       	cpse	r0, r1
    409e:	d9 f3       	breq	.-10     	; 0x4096 <strcmp_P+0x4>
    40a0:	99 0b       	sbc	r25, r25
    40a2:	08 95       	ret

000040a4 <__strlen_P>:
    40a4:	fc 01       	movw	r30, r24
    40a6:	05 90       	lpm	r0, Z+
    40a8:	00 20       	and	r0, r0
    40aa:	e9 f7       	brne	.-6      	; 0x40a6 <__strlen_P+0x2>
    40ac:	80 95       	com	r24
    40ae:	90 95       	com	r25
    40b0:	8e 0f       	add	r24, r30
    40b2:	9f 1f       	adc	r25, r31
    40b4:	08 95       	ret

000040b6 <strstr_P>:
    40b6:	fb 01       	movw	r30, r22
    40b8:	55 91       	lpm	r21, Z+
    40ba:	55 23       	and	r21, r21
    40bc:	a9 f0       	breq	.+42     	; 0x40e8 <strstr_P+0x32>
    40be:	bf 01       	movw	r22, r30
    40c0:	dc 01       	movw	r26, r24
    40c2:	4d 91       	ld	r20, X+
    40c4:	45 17       	cp	r20, r21
    40c6:	41 11       	cpse	r20, r1
    40c8:	e1 f7       	brne	.-8      	; 0x40c2 <strstr_P+0xc>
    40ca:	59 f4       	brne	.+22     	; 0x40e2 <strstr_P+0x2c>
    40cc:	cd 01       	movw	r24, r26
    40ce:	05 90       	lpm	r0, Z+
    40d0:	00 20       	and	r0, r0
    40d2:	49 f0       	breq	.+18     	; 0x40e6 <strstr_P+0x30>
    40d4:	4d 91       	ld	r20, X+
    40d6:	40 15       	cp	r20, r0
    40d8:	41 11       	cpse	r20, r1
    40da:	c9 f3       	breq	.-14     	; 0x40ce <strstr_P+0x18>
    40dc:	fb 01       	movw	r30, r22
    40de:	41 11       	cpse	r20, r1
    40e0:	ef cf       	rjmp	.-34     	; 0x40c0 <strstr_P+0xa>
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	08 95       	ret

000040ea <memcpy>:
    40ea:	fb 01       	movw	r30, r22
    40ec:	dc 01       	movw	r26, r24
    40ee:	02 c0       	rjmp	.+4      	; 0x40f4 <memcpy+0xa>
    40f0:	01 90       	ld	r0, Z+
    40f2:	0d 92       	st	X+, r0
    40f4:	41 50       	subi	r20, 0x01	; 1
    40f6:	50 40       	sbci	r21, 0x00	; 0
    40f8:	d8 f7       	brcc	.-10     	; 0x40f0 <memcpy+0x6>
    40fa:	08 95       	ret

000040fc <strchr>:
    40fc:	fc 01       	movw	r30, r24
    40fe:	81 91       	ld	r24, Z+
    4100:	86 17       	cp	r24, r22
    4102:	21 f0       	breq	.+8      	; 0x410c <strchr+0x10>
    4104:	88 23       	and	r24, r24
    4106:	d9 f7       	brne	.-10     	; 0x40fe <strchr+0x2>
    4108:	99 27       	eor	r25, r25
    410a:	08 95       	ret
    410c:	31 97       	sbiw	r30, 0x01	; 1
    410e:	cf 01       	movw	r24, r30
    4110:	08 95       	ret

00004112 <strcpy>:
    4112:	fb 01       	movw	r30, r22
    4114:	dc 01       	movw	r26, r24
    4116:	01 90       	ld	r0, Z+
    4118:	0d 92       	st	X+, r0
    411a:	00 20       	and	r0, r0
    411c:	e1 f7       	brne	.-8      	; 0x4116 <strcpy+0x4>
    411e:	08 95       	ret

00004120 <__mulhi_const_10>:
    4120:	7a e0       	ldi	r23, 0x0A	; 10
    4122:	97 9f       	mul	r25, r23
    4124:	90 2d       	mov	r25, r0
    4126:	87 9f       	mul	r24, r23
    4128:	80 2d       	mov	r24, r0
    412a:	91 0d       	add	r25, r1
    412c:	11 24       	eor	r1, r1
    412e:	08 95       	ret

00004130 <__prologue_saves__>:
    4130:	2f 92       	push	r2
    4132:	3f 92       	push	r3
    4134:	4f 92       	push	r4
    4136:	5f 92       	push	r5
    4138:	6f 92       	push	r6
    413a:	7f 92       	push	r7
    413c:	8f 92       	push	r8
    413e:	9f 92       	push	r9
    4140:	af 92       	push	r10
    4142:	bf 92       	push	r11
    4144:	cf 92       	push	r12
    4146:	df 92       	push	r13
    4148:	ef 92       	push	r14
    414a:	ff 92       	push	r15
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    4158:	ca 1b       	sub	r28, r26
    415a:	db 0b       	sbc	r29, r27
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	09 94       	ijmp

00004168 <__epilogue_restores__>:
    4168:	2a 88       	ldd	r2, Y+18	; 0x12
    416a:	39 88       	ldd	r3, Y+17	; 0x11
    416c:	48 88       	ldd	r4, Y+16	; 0x10
    416e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4170:	6e 84       	ldd	r6, Y+14	; 0x0e
    4172:	7d 84       	ldd	r7, Y+13	; 0x0d
    4174:	8c 84       	ldd	r8, Y+12	; 0x0c
    4176:	9b 84       	ldd	r9, Y+11	; 0x0b
    4178:	aa 84       	ldd	r10, Y+10	; 0x0a
    417a:	b9 84       	ldd	r11, Y+9	; 0x09
    417c:	c8 84       	ldd	r12, Y+8	; 0x08
    417e:	df 80       	ldd	r13, Y+7	; 0x07
    4180:	ee 80       	ldd	r14, Y+6	; 0x06
    4182:	fd 80       	ldd	r15, Y+5	; 0x05
    4184:	0c 81       	ldd	r16, Y+4	; 0x04
    4186:	1b 81       	ldd	r17, Y+3	; 0x03
    4188:	aa 81       	ldd	r26, Y+2	; 0x02
    418a:	b9 81       	ldd	r27, Y+1	; 0x01
    418c:	ce 0f       	add	r28, r30
    418e:	d1 1d       	adc	r29, r1
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	ed 01       	movw	r28, r26
    419c:	08 95       	ret

0000419e <__do_global_dtors>:
    419e:	13 e0       	ldi	r17, 0x03	; 3
    41a0:	c9 e5       	ldi	r28, 0x59	; 89
    41a2:	d3 e0       	ldi	r29, 0x03	; 3
    41a4:	04 c0       	rjmp	.+8      	; 0x41ae <__do_global_dtors+0x10>
    41a6:	fe 01       	movw	r30, r28
    41a8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__tablejump2__>
    41ac:	21 96       	adiw	r28, 0x01	; 1
    41ae:	ca 35       	cpi	r28, 0x5A	; 90
    41b0:	d1 07       	cpc	r29, r17
    41b2:	c9 f7       	brne	.-14     	; 0x41a6 <__do_global_dtors+0x8>
    41b4:	f8 94       	cli

000041b6 <__stop_program>:
    41b6:	ff cf       	rjmp	.-2      	; 0x41b6 <__stop_program>
