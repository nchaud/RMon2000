
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  0000472a  000047be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000472a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f2  008001ba  008001ba  00004878  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000048a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce8  00000000  00000000  000048e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002037d  00000000  00000000  000055d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049b7  00000000  00000000  0002594d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007139  00000000  00000000  0002a304  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f6c  00000000  00000000  00031440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c21  00000000  00000000  000343ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010ff3  00000000  00000000  00039fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  0004afc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 03 	jmp	0x70c	; 0x70c <__dtors_end>
       4:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
       8:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
       c:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__vector_3>
      10:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__vector_3>
      14:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__vector_3>
      18:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      1c:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      20:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      24:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      28:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      2c:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      30:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      34:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      38:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      3c:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      40:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__vector_16>
      44:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      48:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__vector_18>
      4c:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__vector_19>
      50:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      54:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      58:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      5c:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>
      60:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__vector_24>
      64:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
      9f:	55 41 00                                            UA.

000000a2 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
      a2:	55 52 4c 00                                         URL.

000000a6 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
      a6:	43 49 44 00                                         CID.

000000aa <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_2>:
      aa:	4c 65 6e 3a 20 00                                   Len: .

000000b0 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
      b0:	53 74 61 74 75 73 3a 20 00                          Status: .

000000b9 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
      b9:	54 69 6d 65 6f 75 74 20 76 61 6c 75 65 3a 20 00     Timeout value: .

000000c9 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
      c9:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000d1 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
      d1:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000000dc <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
      dc:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

000000e8 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      e8:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000f5 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      f5:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000102 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     102:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000111 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     111:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000011a <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     11a:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000127 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     127:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000134 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     134:	09 2d 2d 2d 3e 20 00                                .---> .

0000013b <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     13b:	22 2c 00                                            ",.

0000013e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     13e:	22 2c 22 00                                         ",".

00000142 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     142:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000150 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     150:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

0000015e <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     15e:	09 2d 2d 2d 3e 20 00                                .---> .

00000165 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     165:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000171 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     171:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

0000017d <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c_0>:
     17d:	46 61 69 6c 65 64 20 74 6f 20 73 65 6e 64 20 64     Failed to send d
     18d:	61 74 61 3a 20 00                                   ata: .

00000193 <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c>:
     193:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000019e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     19e:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     1a9:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000001b6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     1b6:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000001c1 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     1c1:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000001c9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     1c9:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000001d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     1d2:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000001df <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     1df:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     1ef:	44 22 2c 00                                         D",.

000001f3 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     1f3:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     203:	45 52 22 2c 00                                      ER",.

00000208 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     208:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000212 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     212:	09 2d 2d 2d 3e 20 00                                .---> .

00000219 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     219:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000223 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     223:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     233:	4e 22 2c 00                                         N",.

00000237 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     237:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     247:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000255 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     255:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000260 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     260:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000026b <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     26b:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000273 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     273:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000027c <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     27c:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000284 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     284:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000028d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     28d:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000295 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     295:	41 54 2b 43 53 51 00                                AT+CSQ.

0000029c <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     29c:	2b 43 53 51 3a 20 00                                +CSQ: .

000002a3 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     2a3:	41 54 2b 43 53 51 00                                AT+CSQ.

000002aa <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     2aa:	2b 43 53 51 3a 20 00                                +CSQ: .

000002b1 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c>:
     2b1:	41 54 2b 43 42 43 00                                AT+CBC.

000002b8 <_ZZN13Adafruit_FONA14getBattPercentEPjE3__c_0>:
     2b8:	2b 43 42 43 3a 20 00                                +CBC: .

000002bf <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     2bf:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000002ca <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     2ca:	09 3c 2d 2d 2d 20 00                                .<--- .

000002d1 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     2d1:	09 2d 2d 2d 3e 20 00                                .---> .

000002d8 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     2d8:	41 54 45 30 00                                      ATE0.

000002dd <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     2dd:	41 54 45 30 00                                      ATE0.

000002e2 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     2e2:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     2f2:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

00000301 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     301:	41 54 00                                            AT.

00000304 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     304:	41 54 00                                            AT.

00000307 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     307:	41 54 00                                            AT.

0000030a <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     30a:	41 54 00                                            AT.

0000030d <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     30d:	41 54 00                                            AT.

00000310 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     310:	41 54 00                                            AT.

00000313 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     313:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     323:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000334 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     334:	4f 4b 00                                            OK.

00000337 <_ZZN13Adafruit_FONAC4EabE3__c>:
     337:	46 4f 4e 41 6e 65 74 00                             FONAnet.

0000033f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     33f:	45 72 72 6f 72 3d 00                                Error=.

00000346 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     346:	20 7c 20 00                                          | .

0000034a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     34a:	54 65 6d 70 3d 00                                   Temp=.

00000350 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     350:	20 7c 20 00                                          | .

00000354 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     354:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000035d <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     35d:	20 7c 20 00                                          | .

00000361 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     361:	50 56 2d 56 3d 00                                   PV-V=.

00000367 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     367:	20 7c 20 00                                          | .

0000036b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     36b:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000373 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     373:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

00000380 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     380:	20 7c 20 00                                          | .

00000384 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     384:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000038d <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     38d:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000397 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     397:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     3a7:	6f 64 65 3d 00                                      ode=.

000003ac <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     3ac:	20 7c 20 00                                          | .

000003b0 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     3b0:	42 45 52 3d 00                                      BER=.

000003b5 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     3b5:	20 7c 20 00                                          | .

000003b9 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     3b9:	52 53 53 49 3d 00                                   RSSI=.

000003bf <_ZL12b64_alphabet>:
     3bf:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     3cf:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     3df:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     3ef:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

00000400 <_ZZ4loopE3__c>:
     400:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000040a <_ZZ8sendDatavE3__c_2>:
     40a:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     41a:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     42a:	6f 72 20 73 65 6e 64 3a 00                          or send:.

00000433 <_ZZ8sendDatavE3__c_1>:
     433:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     443:	52 29 00                                            R).

00000446 <_ZZ8sendDatavE3__c_0>:
     446:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     456:	69 6e 67 2e 2e 2e 29 00                             ing...).

0000045e <_ZZ8sendDatavE3__c>:
     45e:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     46e:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

0000047d <_ZZ17createEncodedDataPchP14DailyCycleDataE3__c>:
     47d:	2a 2a 2a 2a 20 54 6f 6f 20 6c 69 74 74 6c 65 20     **** Too little 
     48d:	52 41 4d 20 62 65 66 6f 72 65 20 70 61 79 6c 6f     RAM before paylo
     49d:	61 64 20 63 72 65 61 74 69 6f 6e 20 2a 2a 2a 00     ad creation ***.

000004ad <_ZZ12takeReadingsvE3__c>:
     4ad:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     4bd:	2e 2e 00                                            ...

000004c0 <_ZZ21ensureFonaInitialisedbE3__c_9>:
     4c0:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     4d0:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     4e0:	64 6f 6e 65 29 00                                   done).

000004e6 <_ZZ21ensureFonaInitialisedbE3__c_8>:
     4e6:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     4f6:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     506:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     516:	75 65 20 6e 6f 77 29 00                             ue now).

0000051e <_ZZ21ensureFonaInitialisedbE3__c_7>:
     51e:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     52e:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     53e:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

0000054d <_ZZ21ensureFonaInitialisedbE3__c_6>:
     54d:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     55d:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

00000568 <_ZZ21ensureFonaInitialisedbE3__c_5>:
     568:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     578:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000588 <_ZZ21ensureFonaInitialisedbE3__c_4>:
     588:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     598:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     5a8:	65 64 00                                            ed.

000005ab <_ZZ21ensureFonaInitialisedbE3__c_3>:
     5ab:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     5bb:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     5cb:	6f 72 74 6c 79 00                                   ortly.

000005d1 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     5d1:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     5e1:	6e 67 20 47 50 52 53 00                             ng GPRS.

000005e9 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     5e9:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     5f9:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

00000606 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     606:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     616:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000621 <_ZZ21ensureFonaInitialisedbE3__c>:
     621:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     631:	61 2e 2e 2e 00                                      a....

00000636 <_ZZ5setupE3__c>:
     636:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000642 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     642:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     652:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     662:	73 73 69 6f 6e 3a 00                                ssion:.

00000669 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     669:	2a 2a 2a 2a 00                                      ****.

0000066e <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     66e:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     67e:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     68e:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     69e:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

000006a9 <digital_pin_to_timer_PGM>:
     6a9:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     6b9:	00 00 00 00                                         ....

000006bd <digital_pin_to_bit_mask_PGM>:
     6bd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6cd:	04 08 10 20                                         ... 

000006d1 <digital_pin_to_port_PGM>:
     6d1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6e1:	03 03 03 03                                         ....

000006e5 <port_to_input_PGM>:
     6e5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000006ef <port_to_output_PGM>:
     6ef:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006f9 <port_to_mode_PGM>:
     6f9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000704 <__ctors_start>:
     704:	ba 12       	cpse	r11, r26
     706:	64 17       	cp	r22, r20
     708:	54 19       	sub	r21, r4

0000070a <__ctors_end>:
     70a:	d5 12       	cpse	r13, r21

0000070c <__dtors_end>:
     70c:	11 24       	eor	r1, r1
     70e:	1f be       	out	0x3f, r1	; 63
     710:	cf ef       	ldi	r28, 0xFF	; 255
     712:	d8 e0       	ldi	r29, 0x08	; 8
     714:	de bf       	out	0x3e, r29	; 62
     716:	cd bf       	out	0x3d, r28	; 61

00000718 <__do_copy_data>:
     718:	11 e0       	ldi	r17, 0x01	; 1
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b1 e0       	ldi	r27, 0x01	; 1
     71e:	ea e2       	ldi	r30, 0x2A	; 42
     720:	f7 e4       	ldi	r31, 0x47	; 71
     722:	02 c0       	rjmp	.+4      	; 0x728 <__do_copy_data+0x10>
     724:	05 90       	lpm	r0, Z+
     726:	0d 92       	st	X+, r0
     728:	aa 3b       	cpi	r26, 0xBA	; 186
     72a:	b1 07       	cpc	r27, r17
     72c:	d9 f7       	brne	.-10     	; 0x724 <__do_copy_data+0xc>

0000072e <__do_clear_bss>:
     72e:	24 e0       	ldi	r18, 0x04	; 4
     730:	aa eb       	ldi	r26, 0xBA	; 186
     732:	b1 e0       	ldi	r27, 0x01	; 1
     734:	01 c0       	rjmp	.+2      	; 0x738 <.do_clear_bss_start>

00000736 <.do_clear_bss_loop>:
     736:	1d 92       	st	X+, r1

00000738 <.do_clear_bss_start>:
     738:	ac 3a       	cpi	r26, 0xAC	; 172
     73a:	b2 07       	cpc	r27, r18
     73c:	e1 f7       	brne	.-8      	; 0x736 <.do_clear_bss_loop>

0000073e <__do_global_ctors>:
     73e:	13 e0       	ldi	r17, 0x03	; 3
     740:	c5 e8       	ldi	r28, 0x85	; 133
     742:	d3 e0       	ldi	r29, 0x03	; 3
     744:	04 c0       	rjmp	.+8      	; 0x74e <__do_global_ctors+0x10>
     746:	21 97       	sbiw	r28, 0x01	; 1
     748:	fe 01       	movw	r30, r28
     74a:	0e 94 c2 20 	call	0x4184	; 0x4184 <__tablejump2__>
     74e:	c2 38       	cpi	r28, 0x82	; 130
     750:	d1 07       	cpc	r29, r17
     752:	c9 f7       	brne	.-14     	; 0x746 <__do_global_ctors+0x8>
     754:	0e 94 82 19 	call	0x3304	; 0x3304 <main>
     758:	0c 94 88 23 	jmp	0x4710	; 0x4710 <__do_global_dtors>

0000075c <__bad_interrupt>:
     75c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000760 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     760:	83 5e       	subi	r24, 0xE3	; 227
     762:	9e 4f       	sbci	r25, 0xFE	; 254
     764:	dc 01       	movw	r26, r24
     766:	8d 91       	ld	r24, X+
     768:	9c 91       	ld	r25, X
     76a:	dc 01       	movw	r26, r24
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	04 80       	ldd	r0, Z+4	; 0x04
     772:	f5 81       	ldd	r31, Z+5	; 0x05
     774:	e0 2d       	mov	r30, r0
     776:	09 94       	ijmp

00000778 <_ZN13Adafruit_FONA5writeEh>:
     778:	83 5e       	subi	r24, 0xE3	; 227
     77a:	9e 4f       	sbci	r25, 0xFE	; 254
     77c:	dc 01       	movw	r26, r24
     77e:	8d 91       	ld	r24, X+
     780:	9c 91       	ld	r25, X
     782:	dc 01       	movw	r26, r24
     784:	ed 91       	ld	r30, X+
     786:	fc 91       	ld	r31, X
     788:	01 90       	ld	r0, Z+
     78a:	f0 81       	ld	r31, Z
     78c:	e0 2d       	mov	r30, r0
     78e:	09 94       	ijmp

00000790 <_ZN13Adafruit_FONA4readEv>:
     790:	83 5e       	subi	r24, 0xE3	; 227
     792:	9e 4f       	sbci	r25, 0xFE	; 254
     794:	dc 01       	movw	r26, r24
     796:	8d 91       	ld	r24, X+
     798:	9c 91       	ld	r25, X
     79a:	dc 01       	movw	r26, r24
     79c:	ed 91       	ld	r30, X+
     79e:	fc 91       	ld	r31, X
     7a0:	06 80       	ldd	r0, Z+6	; 0x06
     7a2:	f7 81       	ldd	r31, Z+7	; 0x07
     7a4:	e0 2d       	mov	r30, r0
     7a6:	09 94       	ijmp

000007a8 <_ZN13Adafruit_FONA4peekEv>:
     7a8:	83 5e       	subi	r24, 0xE3	; 227
     7aa:	9e 4f       	sbci	r25, 0xFE	; 254
     7ac:	dc 01       	movw	r26, r24
     7ae:	8d 91       	ld	r24, X+
     7b0:	9c 91       	ld	r25, X
     7b2:	dc 01       	movw	r26, r24
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	00 84       	ldd	r0, Z+8	; 0x08
     7ba:	f1 85       	ldd	r31, Z+9	; 0x09
     7bc:	e0 2d       	mov	r30, r0
     7be:	09 94       	ijmp

000007c0 <_ZN13Adafruit_FONA5flushEv>:
     7c0:	83 5e       	subi	r24, 0xE3	; 227
     7c2:	9e 4f       	sbci	r25, 0xFE	; 254
     7c4:	dc 01       	movw	r26, r24
     7c6:	8d 91       	ld	r24, X+
     7c8:	9c 91       	ld	r25, X
     7ca:	dc 01       	movw	r26, r24
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	02 84       	ldd	r0, Z+10	; 0x0a
     7d2:	f3 85       	ldd	r31, Z+11	; 0x0b
     7d4:	e0 2d       	mov	r30, r0
     7d6:	09 94       	ijmp

000007d8 <_ZN13Adafruit_FONAC1Eab>:
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	ec 01       	movw	r28, r24
     7e2:	06 2f       	mov	r16, r22
     7e4:	14 2f       	mov	r17, r20
     7e6:	1b 82       	std	Y+3, r1	; 0x03
     7e8:	1a 82       	std	Y+2, r1	; 0x02
     7ea:	88 ee       	ldi	r24, 0xE8	; 232
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	8c 83       	std	Y+4, r24	; 0x04
     7f4:	9d 83       	std	Y+5, r25	; 0x05
     7f6:	ae 83       	std	Y+6, r26	; 0x06
     7f8:	bf 83       	std	Y+7, r27	; 0x07
     7fa:	8d e4       	ldi	r24, 0x4D	; 77
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	99 83       	std	Y+1, r25	; 0x01
     800:	88 83       	st	Y, r24
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	8e 87       	std	Y+14, r24	; 0x0e
     806:	6c e9       	ldi	r22, 0x9C	; 156
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	ce 01       	movw	r24, r28
     80c:	8b 5e       	subi	r24, 0xEB	; 235
     80e:	9e 4f       	sbci	r25, 0xFE	; 254
     810:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN6StringC1EPKc>
     814:	0c 87       	std	Y+12, r16	; 0x0c
     816:	1d 87       	std	Y+13, r17	; 0x0d
     818:	fe 01       	movw	r30, r28
     81a:	e2 5f       	subi	r30, 0xF2	; 242
     81c:	fe 4f       	sbci	r31, 0xFE	; 254
     81e:	87 e3       	ldi	r24, 0x37	; 55
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
     826:	32 96       	adiw	r30, 0x02	; 2
     828:	11 82       	std	Z+1, r1	; 0x01
     82a:	10 82       	st	Z, r1
     82c:	32 96       	adiw	r30, 0x02	; 2
     82e:	11 82       	std	Z+1, r1	; 0x01
     830:	10 82       	st	Z, r1
     832:	3b 96       	adiw	r30, 0x0b	; 11
     834:	11 82       	std	Z+1, r1	; 0x01
     836:	10 82       	st	Z, r1
     838:	39 97       	sbiw	r30, 0x09	; 9
     83a:	10 82       	st	Z, r1
     83c:	c5 5e       	subi	r28, 0xE5	; 229
     83e:	de 4f       	sbci	r29, 0xFE	; 254
     840:	84 e3       	ldi	r24, 0x34	; 52
     842:	93 e0       	ldi	r25, 0x03	; 3
     844:	99 83       	std	Y+1, r25	; 0x01
     846:	88 83       	st	Y, r24
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     852:	8b 5e       	subi	r24, 0xEB	; 235
     854:	9e 4f       	sbci	r25, 0xFE	; 254
     856:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_ZN6StringaSERKS_>

0000085a <_ZN13Adafruit_FONA10flushInputEv>:
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	8c 01       	movw	r16, r24
     86a:	0f 5f       	subi	r16, 0xFF	; 255
     86c:	1f 4f       	sbci	r17, 0xFF	; 255
     86e:	88 97       	sbiw	r24, 0x28	; 40
     870:	d8 f4       	brcc	.+54     	; 0x8a8 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     872:	e8 81       	ld	r30, Y
     874:	f9 81       	ldd	r31, Y+1	; 0x01
     876:	04 80       	ldd	r0, Z+4	; 0x04
     878:	f5 81       	ldd	r31, Z+5	; 0x05
     87a:	e0 2d       	mov	r30, r0
     87c:	ce 01       	movw	r24, r28
     87e:	09 95       	icall
     880:	89 2b       	or	r24, r25
     882:	51 f0       	breq	.+20     	; 0x898 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     884:	e8 81       	ld	r30, Y
     886:	f9 81       	ldd	r31, Y+1	; 0x01
     888:	06 80       	ldd	r0, Z+6	; 0x06
     88a:	f7 81       	ldd	r31, Z+7	; 0x07
     88c:	e0 2d       	mov	r30, r0
     88e:	ce 01       	movw	r24, r28
     890:	09 95       	icall
     892:	00 e0       	ldi	r16, 0x00	; 0
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	ed cf       	rjmp	.-38     	; 0x872 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     8a4:	c8 01       	movw	r24, r16
     8a6:	e0 cf       	rjmp	.-64     	; 0x868 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	08 95       	ret

000008b2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
     8be:	8b 01       	movw	r16, r22
     8c0:	f4 2e       	mov	r15, r20
     8c2:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
     8c6:	6e e5       	ldi	r22, 0x5E	; 94
     8c8:	71 e0       	ldi	r23, 0x01	; 1
     8ca:	8e eb       	ldi	r24, 0xBE	; 190
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     8d2:	60 e5       	ldi	r22, 0x50	; 80
     8d4:	71 e0       	ldi	r23, 0x01	; 1
     8d6:	8e eb       	ldi	r24, 0xBE	; 190
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     8de:	b8 01       	movw	r22, r16
     8e0:	8e eb       	ldi	r24, 0xBE	; 190
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     8e8:	62 e2       	ldi	r22, 0x22	; 34
     8ea:	8e eb       	ldi	r24, 0xBE	; 190
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print7printlnEc>
     8f2:	c3 5e       	subi	r28, 0xE3	; 227
     8f4:	de 4f       	sbci	r29, 0xFE	; 254
     8f6:	62 e4       	ldi	r22, 0x42	; 66
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	88 81       	ld	r24, Y
     8fc:	99 81       	ldd	r25, Y+1	; 0x01
     8fe:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     902:	b8 01       	movw	r22, r16
     904:	88 81       	ld	r24, Y
     906:	99 81       	ldd	r25, Y+1	; 0x01
     908:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     90c:	88 81       	ld	r24, Y
     90e:	99 81       	ldd	r25, Y+1	; 0x01
     910:	ff 20       	and	r15, r15
     912:	19 f0       	breq	.+6      	; 0x91a <__stack+0x1b>
     914:	6e e3       	ldi	r22, 0x3E	; 62
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
     91a:	6b e3       	ldi	r22, 0x3B	; 59
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>

0000092c <_ZN13Adafruit_FONA8readlineEjb>:
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	7c 01       	movw	r14, r24
     940:	b4 2e       	mov	r11, r20
     942:	8b 01       	movw	r16, r22
     944:	00 0f       	add	r16, r16
     946:	11 1f       	adc	r17, r17
     948:	00 0f       	add	r16, r16
     94a:	11 1f       	adc	r17, r17
     94c:	c0 e0       	ldi	r28, 0x00	; 0
     94e:	d0 e0       	ldi	r29, 0x00	; 0
     950:	67 01       	movw	r12, r14
     952:	83 ee       	ldi	r24, 0xE3	; 227
     954:	c8 1a       	sub	r12, r24
     956:	8e ef       	ldi	r24, 0xFE	; 254
     958:	d8 0a       	sbc	r13, r24
     95a:	01 15       	cp	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	c9 f1       	breq	.+114    	; 0x9d2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     960:	ce 3f       	cpi	r28, 0xFE	; 254
     962:	d1 05       	cpc	r29, r1
     964:	98 f0       	brcs	.+38     	; 0x98c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     966:	62 e9       	ldi	r22, 0x92	; 146
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	8e eb       	ldi	r24, 0xBE	; 190
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
     972:	2f c0       	rjmp	.+94     	; 0x9d2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     974:	f6 01       	movw	r30, r12
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	dc 01       	movw	r26, r24
     97c:	ed 91       	ld	r30, X+
     97e:	fc 91       	ld	r31, X
     980:	06 80       	ldd	r0, Z+6	; 0x06
     982:	f7 81       	ldd	r31, Z+7	; 0x07
     984:	e0 2d       	mov	r30, r0
     986:	09 95       	icall
     988:	8d 30       	cpi	r24, 0x0D	; 13
     98a:	69 f4       	brne	.+26     	; 0x9a6 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     98c:	d6 01       	movw	r26, r12
     98e:	8d 91       	ld	r24, X+
     990:	9c 91       	ld	r25, X
     992:	dc 01       	movw	r26, r24
     994:	ed 91       	ld	r30, X+
     996:	fc 91       	ld	r31, X
     998:	04 80       	ldd	r0, Z+4	; 0x04
     99a:	f5 81       	ldd	r31, Z+5	; 0x05
     99c:	e0 2d       	mov	r30, r0
     99e:	09 95       	icall
     9a0:	89 2b       	or	r24, r25
     9a2:	41 f7       	brne	.-48     	; 0x974 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     9a4:	0c c0       	rjmp	.+24     	; 0x9be <_ZN13Adafruit_FONA8readlineEjb+0x92>
     9a6:	8a 30       	cpi	r24, 0x0A	; 10
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     9aa:	20 97       	sbiw	r28, 0x00	; 0
     9ac:	79 f3       	breq	.-34     	; 0x98c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9ae:	bb 20       	and	r11, r11
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9b2:	f7 01       	movw	r30, r14
     9b4:	ec 0f       	add	r30, r28
     9b6:	fd 1f       	adc	r31, r29
     9b8:	87 87       	std	Z+15, r24	; 0x0f
     9ba:	21 96       	adiw	r28, 0x01	; 1
     9bc:	e7 cf       	rjmp	.-50     	; 0x98c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     9be:	01 50       	subi	r16, 0x01	; 1
     9c0:	11 09       	sbc	r17, r1
     9c2:	39 f0       	breq	.+14     	; 0x9d2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     9d0:	c4 cf       	rjmp	.-120    	; 0x95a <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     9d2:	f7 01       	movw	r30, r14
     9d4:	ec 0f       	add	r30, r28
     9d6:	fd 1f       	adc	r31, r29
     9d8:	17 86       	std	Z+15, r1	; 0x0f
     9da:	8c 2f       	mov	r24, r28
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	08 95       	ret

000009f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	8b 01       	movw	r16, r22
     9fc:	ba 01       	movw	r22, r20
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
     a04:	68 e9       	ldi	r22, 0x98	; 152
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	8e eb       	ldi	r24, 0xBE	; 190
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     a10:	2f 96       	adiw	r28, 0x0f	; 15
     a12:	be 01       	movw	r22, r28
     a14:	8e eb       	ldi	r24, 0xBE	; 190
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
     a1c:	b8 01       	movw	r22, r16
     a1e:	ce 01       	movw	r24, r28
     a20:	0e 94 cd 22 	call	0x459a	; 0x459a <strcmp_P>
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	89 2b       	or	r24, r25
     a28:	09 f0       	breq	.+2      	; 0xa2c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	82 2f       	mov	r24, r18
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret

00000a38 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
     a3e:	fc 01       	movw	r30, r24
     a40:	e3 5e       	subi	r30, 0xE3	; 227
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	66 23       	and	r22, r22
     a46:	31 f0       	breq	.+12     	; 0xa54 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     a48:	62 e2       	ldi	r22, 0x22	; 34
     a4a:	80 81       	ld	r24, Z
     a4c:	91 81       	ldd	r25, Z+1	; 0x01
     a4e:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print7printlnEc>
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
     a5c:	fe 01       	movw	r30, r28
     a5e:	e5 5e       	subi	r30, 0xE5	; 229
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	60 81       	ld	r22, Z
     a64:	71 81       	ldd	r23, Z+1	; 0x01
     a66:	40 e1       	ldi	r20, 0x10	; 16
     a68:	57 e2       	ldi	r21, 0x27	; 39
     a6a:	ce 01       	movw	r24, r28
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000a74 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	ec 01       	movw	r28, r24
     a7e:	8a 01       	movw	r16, r20
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a86:	fe 01       	movw	r30, r28
     a88:	e3 5e       	subi	r30, 0xE3	; 227
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	b8 01       	movw	r22, r16
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	ce 01       	movw	r24, r28
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000aa6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ec 01       	movw	r28, r24
     ab0:	8a 01       	movw	r16, r20
     ab2:	41 e0       	ldi	r20, 0x01	; 1
     ab4:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     ab8:	fe 01       	movw	r30, r28
     aba:	e3 5e       	subi	r30, 0xE3	; 227
     abc:	fe 4f       	sbci	r31, 0xFE	; 254
     abe:	b8 01       	movw	r22, r16
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZN5Print5printERK6String>
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	ce 01       	movw	r24, r28
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000ad8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	8a 01       	movw	r16, r20
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     aea:	fe 01       	movw	r30, r28
     aec:	e3 5e       	subi	r30, 0xE3	; 227
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	b8 01       	movw	r22, r16
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	ce 01       	movw	r24, r28
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b0a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
     b18:	69 01       	movw	r12, r18
     b1a:	7a 01       	movw	r14, r20
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     b22:	fe 01       	movw	r30, r28
     b24:	e3 5e       	subi	r30, 0xE3	; 227
     b26:	fe 4f       	sbci	r31, 0xFE	; 254
     b28:	2a e0       	ldi	r18, 0x0A	; 10
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	b7 01       	movw	r22, r14
     b2e:	a6 01       	movw	r20, r12
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEli>
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	ce 01       	movw	r24, r28
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	cf 90       	pop	r12
     b48:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b4c <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     b4c:	4f 92       	push	r4
     b4e:	5f 92       	push	r5
     b50:	6f 92       	push	r6
     b52:	7f 92       	push	r7
     b54:	8f 92       	push	r8
     b56:	9f 92       	push	r9
     b58:	af 92       	push	r10
     b5a:	bf 92       	push	r11
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	7c 01       	movw	r14, r24
     b6a:	2a 01       	movw	r4, r20
     b6c:	3b 01       	movw	r6, r22
     b6e:	48 01       	movw	r8, r16
     b70:	59 01       	movw	r10, r18
     b72:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
     b76:	64 e3       	ldi	r22, 0x34	; 52
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	8e eb       	ldi	r24, 0xBE	; 190
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     b82:	67 e2       	ldi	r22, 0x27	; 39
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	8e eb       	ldi	r24, 0xBE	; 190
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     b8e:	2a e0       	ldi	r18, 0x0A	; 10
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	b3 01       	movw	r22, r6
     b94:	a2 01       	movw	r20, r4
     b96:	8e eb       	ldi	r24, 0xBE	; 190
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN5Print5printEmi>
     b9e:	6c e2       	ldi	r22, 0x2C	; 44
     ba0:	8e eb       	ldi	r24, 0xBE	; 190
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZN5Print5printEc>
     ba8:	2a e0       	ldi	r18, 0x0A	; 10
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	b5 01       	movw	r22, r10
     bae:	a4 01       	movw	r20, r8
     bb0:	8e eb       	ldi	r24, 0xBE	; 190
     bb2:	93 e0       	ldi	r25, 0x03	; 3
     bb4:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEmi>
     bb8:	e7 01       	movw	r28, r14
     bba:	c3 5e       	subi	r28, 0xE3	; 227
     bbc:	de 4f       	sbci	r29, 0xFE	; 254
     bbe:	6a e1       	ldi	r22, 0x1A	; 26
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     bca:	2a e0       	ldi	r18, 0x0A	; 10
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	b3 01       	movw	r22, r6
     bd0:	a2 01       	movw	r20, r4
     bd2:	88 81       	ld	r24, Y
     bd4:	99 81       	ldd	r25, Y+1	; 0x01
     bd6:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN5Print5printEmi>
     bda:	67 e0       	ldi	r22, 0x07	; 7
     bdc:	71 e0       	ldi	r23, 0x01	; 1
     bde:	88 81       	ld	r24, Y
     be0:	99 81       	ldd	r25, Y+1	; 0x01
     be2:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
     be6:	2a e0       	ldi	r18, 0x0A	; 10
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	b5 01       	movw	r22, r10
     bec:	a4 01       	movw	r20, r8
     bee:	88 81       	ld	r24, Y
     bf0:	99 81       	ldd	r25, Y+1	; 0x01
     bf2:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEmi>
     bf6:	40 e1       	ldi	r20, 0x10	; 16
     bf8:	57 e2       	ldi	r21, 0x27	; 39
     bfa:	61 e1       	ldi	r22, 0x11	; 17
     bfc:	71 e0       	ldi	r23, 0x01	; 1
     bfe:	c7 01       	movw	r24, r14
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	bf 90       	pop	r11
     c0e:	af 90       	pop	r10
     c10:	9f 90       	pop	r9
     c12:	8f 90       	pop	r8
     c14:	7f 90       	pop	r7
     c16:	6f 90       	pop	r6
     c18:	5f 90       	pop	r5
     c1a:	4f 90       	pop	r4
     c1c:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000c20 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	ec 01       	movw	r28, r24
     c2e:	8b 01       	movw	r16, r22
     c30:	7a 01       	movw	r14, r20
     c32:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
     c36:	6b e8       	ldi	r22, 0x8B	; 139
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	8e eb       	ldi	r24, 0xBE	; 190
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     c42:	b8 01       	movw	r22, r16
     c44:	8e eb       	ldi	r24, 0xBE	; 190
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c4c:	fe 01       	movw	r30, r28
     c4e:	e3 5e       	subi	r30, 0xE3	; 227
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	b8 01       	movw	r22, r16
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	b7 01       	movw	r22, r14
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
     c66:	18 2f       	mov	r17, r24
     c68:	64 e8       	ldi	r22, 0x84	; 132
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	8e eb       	ldi	r24, 0xBE	; 190
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     c74:	be 01       	movw	r22, r28
     c76:	61 5f       	subi	r22, 0xF1	; 241
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	8e eb       	ldi	r24, 0xBE	; 190
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
     c82:	81 2f       	mov	r24, r17
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	08 95       	ret

00000c92 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     c92:	8f 92       	push	r8
     c94:	9f 92       	push	r9
     c96:	af 92       	push	r10
     c98:	bf 92       	push	r11
     c9a:	cf 92       	push	r12
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
     cac:	6b 01       	movw	r12, r22
     cae:	49 01       	movw	r8, r18
     cb0:	5a 01       	movw	r10, r20
     cb2:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
     cb6:	6d e7       	ldi	r22, 0x7D	; 125
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	8e eb       	ldi	r24, 0xBE	; 190
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     cc2:	b6 01       	movw	r22, r12
     cc4:	8e eb       	ldi	r24, 0xBE	; 190
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     ccc:	2a e0       	ldi	r18, 0x0A	; 10
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	b5 01       	movw	r22, r10
     cd2:	a4 01       	movw	r20, r8
     cd4:	8e eb       	ldi	r24, 0xBE	; 190
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN5Print7printlnEli>
     cdc:	7e 01       	movw	r14, r28
     cde:	83 ee       	ldi	r24, 0xE3	; 227
     ce0:	e8 1a       	sub	r14, r24
     ce2:	8e ef       	ldi	r24, 0xFE	; 254
     ce4:	f8 0a       	sbc	r15, r24
     ce6:	b6 01       	movw	r22, r12
     ce8:	f7 01       	movw	r30, r14
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     cf2:	2a e0       	ldi	r18, 0x0A	; 10
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	b5 01       	movw	r22, r10
     cf8:	a4 01       	movw	r20, r8
     cfa:	f7 01       	movw	r30, r14
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	0e 94 41 1b 	call	0x3682	; 0x3682 <_ZN5Print7printlnEli>
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	b8 01       	movw	r22, r16
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
     d0e:	18 2f       	mov	r17, r24
     d10:	66 e7       	ldi	r22, 0x76	; 118
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	8e eb       	ldi	r24, 0xBE	; 190
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     d1c:	be 01       	movw	r22, r28
     d1e:	61 5f       	subi	r22, 0xF1	; 241
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	8e eb       	ldi	r24, 0xBE	; 190
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
     d2a:	81 2f       	mov	r24, r17
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	08 95       	ret

00000d46 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     d46:	af 92       	push	r10
     d48:	bf 92       	push	r11
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ec 01       	movw	r28, r24
     d5c:	6b 01       	movw	r12, r22
     d5e:	7a 01       	movw	r14, r20
     d60:	59 01       	movw	r10, r18
     d62:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
     d66:	6f e6       	ldi	r22, 0x6F	; 111
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	8e eb       	ldi	r24, 0xBE	; 190
     d6c:	93 e0       	ldi	r25, 0x03	; 3
     d6e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     d72:	b6 01       	movw	r22, r12
     d74:	8e eb       	ldi	r24, 0xBE	; 190
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     d7c:	62 e2       	ldi	r22, 0x22	; 34
     d7e:	8e eb       	ldi	r24, 0xBE	; 190
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZN5Print5printEc>
     d86:	b7 01       	movw	r22, r14
     d88:	8e eb       	ldi	r24, 0xBE	; 190
     d8a:	93 e0       	ldi	r25, 0x03	; 3
     d8c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     d90:	62 e2       	ldi	r22, 0x22	; 34
     d92:	8e eb       	ldi	r24, 0xBE	; 190
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print7printlnEc>
     d9a:	8e 01       	movw	r16, r28
     d9c:	03 5e       	subi	r16, 0xE3	; 227
     d9e:	1e 4f       	sbci	r17, 0xFE	; 254
     da0:	b6 01       	movw	r22, r12
     da2:	f8 01       	movw	r30, r16
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     dac:	62 e2       	ldi	r22, 0x22	; 34
     dae:	f8 01       	movw	r30, r16
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZN5Print5printEc>
     db8:	b7 01       	movw	r22, r14
     dba:	f8 01       	movw	r30, r16
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     dc4:	62 e2       	ldi	r22, 0x22	; 34
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print7printlnEc>
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	b5 01       	movw	r22, r10
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
     dda:	18 2f       	mov	r17, r24
     ddc:	68 e6       	ldi	r22, 0x68	; 104
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	8e eb       	ldi	r24, 0xBE	; 190
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     de8:	be 01       	movw	r22, r28
     dea:	61 5f       	subi	r22, 0xF1	; 241
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8e eb       	ldi	r24, 0xBE	; 190
     df0:	93 e0       	ldi	r25, 0x03	; 3
     df2:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
     df6:	81 2f       	mov	r24, r17
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	08 95       	ret

00000e0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ec 01       	movw	r28, r24
     e18:	8a 01       	movw	r16, r20
     e1a:	a9 01       	movw	r20, r18
     e1c:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e20:	88 23       	and	r24, r24
     e22:	41 f0       	breq	.+16     	; 0xe34 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     e24:	b8 01       	movw	r22, r16
     e26:	ce 01       	movw	r24, r28
     e28:	0f 96       	adiw	r24, 0x0f	; 15
     e2a:	0e 94 cd 22 	call	0x459a	; 0x459a <strcmp_P>
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	89 2b       	or	r24, r25
     e32:	09 f0       	breq	.+2      	; 0xe36 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	82 2f       	mov	r24, r18
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <_ZN13Adafruit_FONA5beginEhh>:
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	f6 2e       	mov	r15, r22
     e56:	e4 2e       	mov	r14, r20
     e58:	8f e1       	ldi	r24, 0x1F	; 31
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 91 19 	call	0x3322	; 0x3322 <_Znwj>
     e60:	8c 01       	movw	r16, r24
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	4e 2d       	mov	r20, r14
     e66:	6f 2d       	mov	r22, r15
     e68:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <_ZN14SoftwareSerialC1Ehhb>
     e6c:	7e 01       	movw	r14, r28
     e6e:	83 ee       	ldi	r24, 0xE3	; 227
     e70:	e8 1a       	sub	r14, r24
     e72:	8e ef       	ldi	r24, 0xFE	; 254
     e74:	f8 0a       	sbc	r15, r24
     e76:	d7 01       	movw	r26, r14
     e78:	0d 93       	st	X+, r16
     e7a:	1c 93       	st	X, r17
     e7c:	40 ec       	ldi	r20, 0xC0	; 192
     e7e:	52 e1       	ldi	r21, 0x12	; 18
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	c8 01       	movw	r24, r16
     e86:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <_ZN14SoftwareSerial5beginEl>
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e8e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <pinMode>
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	8c 85       	ldd	r24, Y+12	; 0x0c
     e96:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
     e9a:	6a e0       	ldi	r22, 0x0A	; 10
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eaa:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
     eae:	64 e6       	ldi	r22, 0x64	; 100
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	8c 85       	ldd	r24, Y+12	; 0x0c
     ebe:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
     ec2:	63 e1       	ldi	r22, 0x13	; 19
     ec4:	73 e0       	ldi	r23, 0x03	; 3
     ec6:	8e eb       	ldi	r24, 0xBE	; 190
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
     ece:	8e e0       	ldi	r24, 0x0E	; 14
     ed0:	c8 2e       	mov	r12, r24
     ed2:	d1 2c       	mov	r13, r1
     ed4:	8e 01       	movw	r16, r28
     ed6:	05 5e       	subi	r16, 0xE5	; 229
     ed8:	1e 4f       	sbci	r17, 0xFE	; 254
     eda:	f7 01       	movw	r30, r14
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	dc 01       	movw	r26, r24
     ee2:	ed 91       	ld	r30, X+
     ee4:	fc 91       	ld	r31, X
     ee6:	04 80       	ldd	r0, Z+4	; 0x04
     ee8:	f5 81       	ldd	r31, Z+5	; 0x05
     eea:	e0 2d       	mov	r30, r0
     eec:	09 95       	icall
     eee:	89 2b       	or	r24, r25
     ef0:	59 f0       	breq	.+22     	; 0xf08 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     ef2:	f7 01       	movw	r30, r14
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	dc 01       	movw	r26, r24
     efa:	ed 91       	ld	r30, X+
     efc:	fc 91       	ld	r31, X
     efe:	06 80       	ldd	r0, Z+6	; 0x06
     f00:	f7 81       	ldd	r31, Z+7	; 0x07
     f02:	e0 2d       	mov	r30, r0
     f04:	09 95       	icall
     f06:	e9 cf       	rjmp	.-46     	; 0xeda <_ZN13Adafruit_FONA5beginEhh+0x98>
     f08:	f8 01       	movw	r30, r16
     f0a:	40 81       	ld	r20, Z
     f0c:	51 81       	ldd	r21, Z+1	; 0x01
     f0e:	24 ef       	ldi	r18, 0xF4	; 244
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	60 e1       	ldi	r22, 0x10	; 16
     f14:	73 e0       	ldi	r23, 0x03	; 3
     f16:	ce 01       	movw	r24, r28
     f18:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f1c:	81 11       	cpse	r24, r1
     f1e:	34 c0       	rjmp	.+104    	; 0xf88 <_ZN13Adafruit_FONA5beginEhh+0x146>
     f20:	d7 01       	movw	r26, r14
     f22:	8d 91       	ld	r24, X+
     f24:	9c 91       	ld	r25, X
     f26:	dc 01       	movw	r26, r24
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	04 80       	ldd	r0, Z+4	; 0x04
     f2e:	f5 81       	ldd	r31, Z+5	; 0x05
     f30:	e0 2d       	mov	r30, r0
     f32:	09 95       	icall
     f34:	89 2b       	or	r24, r25
     f36:	59 f0       	breq	.+22     	; 0xf4e <_ZN13Adafruit_FONA5beginEhh+0x10c>
     f38:	f7 01       	movw	r30, r14
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	dc 01       	movw	r26, r24
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	06 80       	ldd	r0, Z+6	; 0x06
     f46:	f7 81       	ldd	r31, Z+7	; 0x07
     f48:	e0 2d       	mov	r30, r0
     f4a:	09 95       	icall
     f4c:	e9 cf       	rjmp	.-46     	; 0xf20 <_ZN13Adafruit_FONA5beginEhh+0xde>
     f4e:	24 ef       	ldi	r18, 0xF4	; 244
     f50:	31 e0       	ldi	r19, 0x01	; 1
     f52:	4d e0       	ldi	r20, 0x0D	; 13
     f54:	53 e0       	ldi	r21, 0x03	; 3
     f56:	6a e0       	ldi	r22, 0x0A	; 10
     f58:	73 e0       	ldi	r23, 0x03	; 3
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f60:	81 11       	cpse	r24, r1
     f62:	12 c0       	rjmp	.+36     	; 0xf88 <_ZN13Adafruit_FONA5beginEhh+0x146>
     f64:	64 ef       	ldi	r22, 0xF4	; 244
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     f70:	b1 e0       	ldi	r27, 0x01	; 1
     f72:	cb 1a       	sub	r12, r27
     f74:	d1 08       	sbc	r13, r1
     f76:	09 f0       	breq	.+2      	; 0xf7a <_ZN13Adafruit_FONA5beginEhh+0x138>
     f78:	b0 cf       	rjmp	.-160    	; 0xeda <_ZN13Adafruit_FONA5beginEhh+0x98>
     f7a:	5e c0       	rjmp	.+188    	; 0x1038 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     f7c:	64 e6       	ldi	r22, 0x64	; 100
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     f88:	f8 01       	movw	r30, r16
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	24 ef       	ldi	r18, 0xF4	; 244
     f90:	31 e0       	ldi	r19, 0x01	; 1
     f92:	6d ed       	ldi	r22, 0xDD	; 221
     f94:	72 e0       	ldi	r23, 0x02	; 2
     f96:	ce 01       	movw	r24, r28
     f98:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f9c:	64 e6       	ldi	r22, 0x64	; 100
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     fa8:	d8 01       	movw	r26, r16
     faa:	4d 91       	ld	r20, X+
     fac:	5c 91       	ld	r21, X
     fae:	24 ef       	ldi	r18, 0xF4	; 244
     fb0:	31 e0       	ldi	r19, 0x01	; 1
     fb2:	68 ed       	ldi	r22, 0xD8	; 216
     fb4:	72 e0       	ldi	r23, 0x02	; 2
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     fbc:	81 11       	cpse	r24, r1
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <_ZN13Adafruit_FONA5beginEhh+0x182>
     fc0:	12 e0       	ldi	r17, 0x02	; 2
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <_ZN13Adafruit_FONA5beginEhh+0x184>
     fc4:	11 e0       	ldi	r17, 0x01	; 1
     fc6:	64 e6       	ldi	r22, 0x64	; 100
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
     fd2:	ce 01       	movw	r24, r28
     fd4:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
     fd8:	61 ed       	ldi	r22, 0xD1	; 209
     fda:	72 e0       	ldi	r23, 0x02	; 2
     fdc:	8e eb       	ldi	r24, 0xBE	; 190
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
     fe4:	69 e0       	ldi	r22, 0x09	; 9
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	8e eb       	ldi	r24, 0xBE	; 190
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
     ff0:	69 e0       	ldi	r22, 0x09	; 9
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	f7 01       	movw	r30, r14
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	64 ef       	ldi	r22, 0xF4	; 244
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	ce 01       	movw	r24, r28
    1006:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
    100a:	6a ec       	ldi	r22, 0xCA	; 202
    100c:	72 e0       	ldi	r23, 0x02	; 2
    100e:	8e eb       	ldi	r24, 0xBE	; 190
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1016:	2f 96       	adiw	r28, 0x0f	; 15
    1018:	be 01       	movw	r22, r28
    101a:	8e eb       	ldi	r24, 0xBE	; 190
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
    1022:	6f eb       	ldi	r22, 0xBF	; 191
    1024:	72 e0       	ldi	r23, 0x02	; 2
    1026:	ce 01       	movw	r24, r28
    1028:	0e 94 df 22 	call	0x45be	; 0x45be <strstr_P>
    102c:	89 2b       	or	r24, r25
    102e:	11 f4       	brne	.+4      	; 0x1034 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	35 c0       	rjmp	.+106    	; 0x109e <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1034:	81 2f       	mov	r24, r17
    1036:	33 c0       	rjmp	.+102    	; 0x109e <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1038:	d8 01       	movw	r26, r16
    103a:	4d 91       	ld	r20, X+
    103c:	5c 91       	ld	r21, X
    103e:	24 ef       	ldi	r18, 0xF4	; 244
    1040:	31 e0       	ldi	r19, 0x01	; 1
    1042:	67 e0       	ldi	r22, 0x07	; 7
    1044:	73 e0       	ldi	r23, 0x03	; 3
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    104c:	64 e6       	ldi	r22, 0x64	; 100
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
    1058:	f8 01       	movw	r30, r16
    105a:	40 81       	ld	r20, Z
    105c:	51 81       	ldd	r21, Z+1	; 0x01
    105e:	24 ef       	ldi	r18, 0xF4	; 244
    1060:	31 e0       	ldi	r19, 0x01	; 1
    1062:	64 e0       	ldi	r22, 0x04	; 4
    1064:	73 e0       	ldi	r23, 0x03	; 3
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    106c:	64 e6       	ldi	r22, 0x64	; 100
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
    1078:	d8 01       	movw	r26, r16
    107a:	4d 91       	ld	r20, X+
    107c:	5c 91       	ld	r21, X
    107e:	24 ef       	ldi	r18, 0xF4	; 244
    1080:	31 e0       	ldi	r19, 0x01	; 1
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	73 e0       	ldi	r23, 0x03	; 3
    1086:	ce 01       	movw	r24, r28
    1088:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    108c:	81 11       	cpse	r24, r1
    108e:	76 cf       	rjmp	.-276    	; 0xf7c <_ZN13Adafruit_FONA5beginEhh+0x13a>
    1090:	62 ee       	ldi	r22, 0xE2	; 226
    1092:	72 e0       	ldi	r23, 0x02	; 2
    1094:	8e eb       	ldi	r24, 0xBE	; 190
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	08 95       	ret

000010b0 <_ZN13Adafruit_FONA9HTTP_initEv>:
    10b0:	fc 01       	movw	r30, r24
    10b2:	e5 5e       	subi	r30, 0xE5	; 229
    10b4:	fe 4f       	sbci	r31, 0xFE	; 254
    10b6:	40 81       	ld	r20, Z
    10b8:	51 81       	ldd	r21, Z+1	; 0x01
    10ba:	24 ef       	ldi	r18, 0xF4	; 244
    10bc:	31 e0       	ldi	r19, 0x01	; 1
    10be:	61 e7       	ldi	r22, 0x71	; 113
    10c0:	71 e0       	ldi	r23, 0x01	; 1
    10c2:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000010c6 <_ZN13Adafruit_FONA9HTTP_termEv>:
    10c6:	fc 01       	movw	r30, r24
    10c8:	e5 5e       	subi	r30, 0xE5	; 229
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	40 81       	ld	r20, Z
    10ce:	51 81       	ldd	r21, Z+1	; 0x01
    10d0:	24 ef       	ldi	r18, 0xF4	; 244
    10d2:	31 e0       	ldi	r19, 0x01	; 1
    10d4:	65 e6       	ldi	r22, 0x65	; 101
    10d6:	71 e0       	ldi	r23, 0x01	; 1
    10d8:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000010dc <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <_ZN13Adafruit_FONA10HTTP_setupEPc+0xe>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <_ZN13Adafruit_FONA10HTTP_setupEPc+0x10>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <_ZN13Adafruit_FONA10HTTP_setupEPc+0x12>
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	8c 01       	movw	r16, r24
    10f4:	7b 01       	movw	r14, r22
    10f6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN13Adafruit_FONA9HTTP_termEv>
    10fa:	c8 01       	movw	r24, r16
    10fc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN13Adafruit_FONA9HTTP_initEv>
    1100:	88 23       	and	r24, r24
    1102:	59 f1       	breq	.+86     	; 0x115a <_ZN13Adafruit_FONA10HTTP_setupEPc+0x7e>
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	66 ea       	ldi	r22, 0xA6	; 166
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	c8 01       	movw	r24, r16
    1112:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1116:	88 23       	and	r24, r24
    1118:	11 f1       	breq	.+68     	; 0x115e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x82>
    111a:	a7 01       	movw	r20, r14
    111c:	62 ea       	ldi	r22, 0xA2	; 162
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    1126:	88 23       	and	r24, r24
    1128:	e1 f0       	breq	.+56     	; 0x1162 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x86>
    112a:	b8 01       	movw	r22, r16
    112c:	6b 5e       	subi	r22, 0xEB	; 235
    112e:	7e 4f       	sbci	r23, 0xFE	; 254
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <_ZN6StringC1ERKS_>
    1138:	ae 01       	movw	r20, r28
    113a:	4f 5f       	subi	r20, 0xFF	; 255
    113c:	5f 4f       	sbci	r21, 0xFF	; 255
    113e:	6f e9       	ldi	r22, 0x9F	; 159
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	c8 01       	movw	r24, r16
    1144:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1148:	18 2f       	mov	r17, r24
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN6StringD1Ev>
    1152:	11 23       	and	r17, r17
    1154:	41 f0       	breq	.+16     	; 0x1166 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8a>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	07 c0       	rjmp	.+14     	; 0x1168 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x8c>
    1166:	80 e4       	ldi	r24, 0x40	; 64
    1168:	26 96       	adiw	r28, 0x06	; 6
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	08 95       	ret

00001182 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	68 01       	movw	r12, r16
    1196:	87 01       	movw	r16, r14
    1198:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    119c:	b6 01       	movw	r22, r12
    119e:	ce 01       	movw	r24, r28
    11a0:	0f 96       	adiw	r24, 0x0f	; 15
    11a2:	0e 94 cd 22 	call	0x459a	; 0x459a <strcmp_P>
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	89 2b       	or	r24, r25
    11aa:	09 f0       	breq	.+2      	; 0x11ae <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	82 2f       	mov	r24, r18
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	08 95       	ret

000011c2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	ec 01       	movw	r28, r24
    11d0:	79 01       	movw	r14, r18
    11d2:	98 01       	movw	r18, r16
    11d4:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    11d8:	b7 01       	movw	r22, r14
    11da:	ce 01       	movw	r24, r28
    11dc:	0f 96       	adiw	r24, 0x0f	; 15
    11de:	0e 94 cd 22 	call	0x459a	; 0x459a <strcmp_P>
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	89 2b       	or	r24, r25
    11e6:	09 f0       	breq	.+2      	; 0x11ea <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	82 2f       	mov	r24, r18
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <_ZN13Adafruit_FONA10enableGPRSEb>:
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	28 ee       	ldi	r18, 0xE8	; 232
    1218:	3d ef       	ldi	r19, 0xFD	; 253
    121a:	66 23       	and	r22, r22
    121c:	09 f4       	brne	.+2      	; 0x1220 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    121e:	1f c1       	rjmp	.+574    	; 0x145e <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    1220:	4b e6       	ldi	r20, 0x6B	; 107
    1222:	52 e0       	ldi	r21, 0x02	; 2
    1224:	60 e6       	ldi	r22, 0x60	; 96
    1226:	72 e0       	ldi	r23, 0x02	; 2
    1228:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    122c:	81 11       	cpse	r24, r1
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	78 2e       	mov	r7, r24
    1234:	02 c0       	rjmp	.+4      	; 0x123a <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1236:	77 24       	eor	r7, r7
    1238:	73 94       	inc	r7
    123a:	7e 01       	movw	r14, r28
    123c:	85 ee       	ldi	r24, 0xE5	; 229
    123e:	e8 1a       	sub	r14, r24
    1240:	8e ef       	ldi	r24, 0xFE	; 254
    1242:	f8 0a       	sbc	r15, r24
    1244:	f7 01       	movw	r30, r14
    1246:	40 81       	ld	r20, Z
    1248:	51 81       	ldd	r21, Z+1	; 0x01
    124a:	20 e1       	ldi	r18, 0x10	; 16
    124c:	37 e2       	ldi	r19, 0x27	; 39
    124e:	65 e5       	ldi	r22, 0x55	; 85
    1250:	72 e0       	ldi	r23, 0x02	; 2
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1258:	88 23       	and	r24, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    125c:	25 c1       	rjmp	.+586    	; 0x14a8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    125e:	f7 01       	movw	r30, r14
    1260:	40 81       	ld	r20, Z
    1262:	51 81       	ldd	r21, Z+1	; 0x01
    1264:	20 e1       	ldi	r18, 0x10	; 16
    1266:	37 e2       	ldi	r19, 0x27	; 39
    1268:	67 e3       	ldi	r22, 0x37	; 55
    126a:	72 e0       	ldi	r23, 0x02	; 2
    126c:	ce 01       	movw	r24, r28
    126e:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1272:	88 23       	and	r24, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    1276:	1a c1       	rjmp	.+564    	; 0x14ac <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    1278:	4e 01       	movw	r8, r28
    127a:	f2 ef       	ldi	r31, 0xF2	; 242
    127c:	8f 1a       	sub	r8, r31
    127e:	fe ef       	ldi	r31, 0xFE	; 254
    1280:	9f 0a       	sbc	r9, r31
    1282:	f4 01       	movw	r30, r8
    1284:	40 81       	ld	r20, Z
    1286:	51 81       	ldd	r21, Z+1	; 0x01
    1288:	41 15       	cp	r20, r1
    128a:	51 05       	cpc	r21, r1
    128c:	71 f4       	brne	.+28     	; 0x12aa <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    128e:	f7 01       	movw	r30, r14
    1290:	40 81       	ld	r20, Z
    1292:	51 81       	ldd	r21, Z+1	; 0x01
    1294:	2f ef       	ldi	r18, 0xFF	; 255
    1296:	3f ef       	ldi	r19, 0xFF	; 255
    1298:	62 ed       	ldi	r22, 0xD2	; 210
    129a:	71 e0       	ldi	r23, 0x01	; 1
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12a2:	81 11       	cpse	r24, r1
    12a4:	ce c0       	rjmp	.+412    	; 0x1442 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    12a6:	89 e0       	ldi	r24, 0x09	; 9
    12a8:	0e c1       	rjmp	.+540    	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    12aa:	f7 01       	movw	r30, r14
    12ac:	20 81       	ld	r18, Z
    12ae:	31 81       	ldd	r19, Z+1	; 0x01
    12b0:	00 e1       	ldi	r16, 0x10	; 16
    12b2:	17 e2       	ldi	r17, 0x27	; 39
    12b4:	63 e2       	ldi	r22, 0x23	; 35
    12b6:	72 e0       	ldi	r23, 0x02	; 2
    12b8:	ce 01       	movw	r24, r28
    12ba:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    12c2:	f6 c0       	rjmp	.+492    	; 0x14b0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN13Adafruit_FONA10flushInputEv>
    12ca:	8e 01       	movw	r16, r28
    12cc:	03 5e       	subi	r16, 0xE3	; 227
    12ce:	1e 4f       	sbci	r17, 0xFE	; 254
    12d0:	69 e1       	ldi	r22, 0x19	; 25
    12d2:	72 e0       	ldi	r23, 0x02	; 2
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    12de:	f4 01       	movw	r30, r8
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    12ee:	5e 01       	movw	r10, r28
    12f0:	f0 ef       	ldi	r31, 0xF0	; 240
    12f2:	af 1a       	sub	r10, r31
    12f4:	fe ef       	ldi	r31, 0xFE	; 254
    12f6:	bf 0a       	sbc	r11, r31
    12f8:	f5 01       	movw	r30, r10
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	89 2b       	or	r24, r25
    1300:	79 f0       	breq	.+30     	; 0x1320 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    1302:	65 e2       	ldi	r22, 0x25	; 37
    1304:	71 e0       	ldi	r23, 0x01	; 1
    1306:	f8 01       	movw	r30, r16
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    1310:	f5 01       	movw	r30, r10
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	f8 01       	movw	r30, r16
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1320:	6e 01       	movw	r12, r28
    1322:	fe ee       	ldi	r31, 0xEE	; 238
    1324:	cf 1a       	sub	r12, r31
    1326:	fe ef       	ldi	r31, 0xFE	; 254
    1328:	df 0a       	sbc	r13, r31
    132a:	f6 01       	movw	r30, r12
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	89 2b       	or	r24, r25
    1332:	79 f0       	breq	.+30     	; 0x1352 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1334:	65 e2       	ldi	r22, 0x25	; 37
    1336:	71 e0       	ldi	r23, 0x01	; 1
    1338:	f8 01       	movw	r30, r16
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    1342:	f6 01       	movw	r30, r12
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	f8 01       	movw	r30, r16
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1352:	67 e2       	ldi	r22, 0x27	; 39
    1354:	71 e0       	ldi	r23, 0x01	; 1
    1356:	f8 01       	movw	r30, r16
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
    1360:	62 e1       	ldi	r22, 0x12	; 18
    1362:	72 e0       	ldi	r23, 0x02	; 2
    1364:	8e eb       	ldi	r24, 0xBE	; 190
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    136c:	68 e0       	ldi	r22, 0x08	; 8
    136e:	72 e0       	ldi	r23, 0x02	; 2
    1370:	8e eb       	ldi	r24, 0xBE	; 190
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1378:	f4 01       	movw	r30, r8
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	8e eb       	ldi	r24, 0xBE	; 190
    1380:	93 e0       	ldi	r25, 0x03	; 3
    1382:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1386:	f5 01       	movw	r30, r10
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	89 2b       	or	r24, r25
    138e:	69 f0       	breq	.+26     	; 0x13aa <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    1390:	65 e2       	ldi	r22, 0x25	; 37
    1392:	71 e0       	ldi	r23, 0x01	; 1
    1394:	8e eb       	ldi	r24, 0xBE	; 190
    1396:	93 e0       	ldi	r25, 0x03	; 3
    1398:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    139c:	f5 01       	movw	r30, r10
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	8e eb       	ldi	r24, 0xBE	; 190
    13a4:	93 e0       	ldi	r25, 0x03	; 3
    13a6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    13aa:	f6 01       	movw	r30, r12
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	89 2b       	or	r24, r25
    13b2:	69 f0       	breq	.+26     	; 0x13ce <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    13b4:	65 e2       	ldi	r22, 0x25	; 37
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	8e eb       	ldi	r24, 0xBE	; 190
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    13c0:	f6 01       	movw	r30, r12
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	8e eb       	ldi	r24, 0xBE	; 190
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    13ce:	67 e2       	ldi	r22, 0x27	; 39
    13d0:	71 e0       	ldi	r23, 0x01	; 1
    13d2:	8e eb       	ldi	r24, 0xBE	; 190
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
    13da:	f7 01       	movw	r30, r14
    13dc:	60 81       	ld	r22, Z
    13de:	71 81       	ldd	r23, Z+1	; 0x01
    13e0:	40 e1       	ldi	r20, 0x10	; 16
    13e2:	57 e2       	ldi	r21, 0x27	; 39
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    13ea:	88 23       	and	r24, r24
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    13ee:	62 c0       	rjmp	.+196    	; 0x14b4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    13f0:	f5 01       	movw	r30, r10
    13f2:	40 81       	ld	r20, Z
    13f4:	51 81       	ldd	r21, Z+1	; 0x01
    13f6:	41 15       	cp	r20, r1
    13f8:	51 05       	cpc	r21, r1
    13fa:	39 f4       	brne	.+14     	; 0x140a <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    13fc:	f6 01       	movw	r30, r12
    13fe:	40 81       	ld	r20, Z
    1400:	51 81       	ldd	r21, Z+1	; 0x01
    1402:	41 15       	cp	r20, r1
    1404:	51 05       	cpc	r21, r1
    1406:	79 f4       	brne	.+30     	; 0x1426 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    1408:	42 cf       	rjmp	.-380    	; 0x128e <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    140a:	f7 01       	movw	r30, r14
    140c:	20 81       	ld	r18, Z
    140e:	31 81       	ldd	r19, Z+1	; 0x01
    1410:	00 e1       	ldi	r16, 0x10	; 16
    1412:	17 e2       	ldi	r17, 0x27	; 39
    1414:	63 ef       	ldi	r22, 0xF3	; 243
    1416:	71 e0       	ldi	r23, 0x01	; 1
    1418:	ce 01       	movw	r24, r28
    141a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    141e:	81 11       	cpse	r24, r1
    1420:	ed cf       	rjmp	.-38     	; 0x13fc <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1422:	87 e0       	ldi	r24, 0x07	; 7
    1424:	50 c0       	rjmp	.+160    	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1426:	f7 01       	movw	r30, r14
    1428:	20 81       	ld	r18, Z
    142a:	31 81       	ldd	r19, Z+1	; 0x01
    142c:	00 e1       	ldi	r16, 0x10	; 16
    142e:	17 e2       	ldi	r17, 0x27	; 39
    1430:	6f ed       	ldi	r22, 0xDF	; 223
    1432:	71 e0       	ldi	r23, 0x01	; 1
    1434:	ce 01       	movw	r24, r28
    1436:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    143a:	81 11       	cpse	r24, r1
    143c:	28 cf       	rjmp	.-432    	; 0x128e <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    143e:	88 e0       	ldi	r24, 0x08	; 8
    1440:	42 c0       	rjmp	.+132    	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1442:	f7 01       	movw	r30, r14
    1444:	40 81       	ld	r20, Z
    1446:	51 81       	ldd	r21, Z+1	; 0x01
    1448:	2f ef       	ldi	r18, 0xFF	; 255
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	69 ec       	ldi	r22, 0xC9	; 201
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1456:	88 23       	and	r24, r24
    1458:	79 f1       	breq	.+94     	; 0x14b8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    145a:	87 2d       	mov	r24, r7
    145c:	34 c0       	rjmp	.+104    	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    145e:	41 ec       	ldi	r20, 0xC1	; 193
    1460:	51 e0       	ldi	r21, 0x01	; 1
    1462:	66 eb       	ldi	r22, 0xB6	; 182
    1464:	71 e0       	ldi	r23, 0x01	; 1
    1466:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    146a:	88 23       	and	r24, r24
    146c:	39 f1       	breq	.+78     	; 0x14bc <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    146e:	8e 01       	movw	r16, r28
    1470:	05 5e       	subi	r16, 0xE5	; 229
    1472:	1e 4f       	sbci	r17, 0xFE	; 254
    1474:	f8 01       	movw	r30, r16
    1476:	40 81       	ld	r20, Z
    1478:	51 81       	ldd	r21, Z+1	; 0x01
    147a:	20 e1       	ldi	r18, 0x10	; 16
    147c:	37 e2       	ldi	r19, 0x27	; 39
    147e:	69 ea       	ldi	r22, 0xA9	; 169
    1480:	71 e0       	ldi	r23, 0x01	; 1
    1482:	ce 01       	movw	r24, r28
    1484:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1488:	88 23       	and	r24, r24
    148a:	d1 f0       	breq	.+52     	; 0x14c0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    148c:	f8 01       	movw	r30, r16
    148e:	40 81       	ld	r20, Z
    1490:	51 81       	ldd	r21, Z+1	; 0x01
    1492:	20 e1       	ldi	r18, 0x10	; 16
    1494:	37 e2       	ldi	r19, 0x27	; 39
    1496:	6e e9       	ldi	r22, 0x9E	; 158
    1498:	71 e0       	ldi	r23, 0x01	; 1
    149a:	ce 01       	movw	r24, r28
    149c:	0e 94 07 07 	call	0xe0e	; 0xe0e <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14a0:	88 23       	and	r24, r24
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	0d c0       	rjmp	.+26     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	0b c0       	rjmp	.+22     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b4:	86 e0       	ldi	r24, 0x06	; 6
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b8:	8a e0       	ldi	r24, 0x0A	; 10
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14bc:	8b e0       	ldi	r24, 0x0B	; 11
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14c0:	8c e0       	ldi	r24, 0x0C	; 12
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14c4:	8d e0       	ldi	r24, 0x0D	; 13
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	df 90       	pop	r13
    14d4:	cf 90       	pop	r12
    14d6:	bf 90       	pop	r11
    14d8:	af 90       	pop	r10
    14da:	9f 90       	pop	r9
    14dc:	8f 90       	pop	r8
    14de:	7f 90       	pop	r7
    14e0:	08 95       	ret

000014e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	5b 01       	movw	r10, r22
    14f6:	6a 01       	movw	r12, r20
    14f8:	e2 2e       	mov	r14, r18
    14fa:	0f 96       	adiw	r24, 0x0f	; 15
    14fc:	0e 94 df 22 	call	0x45be	; 0x45be <strstr_P>
    1500:	ec 01       	movw	r28, r24
    1502:	89 2b       	or	r24, r25
    1504:	c1 f0       	breq	.+48     	; 0x1536 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1506:	c5 01       	movw	r24, r10
    1508:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__strlen_P>
    150c:	8c 0f       	add	r24, r28
    150e:	9d 1f       	adc	r25, r29
    1510:	c0 e0       	ldi	r28, 0x00	; 0
    1512:	f1 2c       	mov	r15, r1
    1514:	c0 17       	cp	r28, r16
    1516:	41 f0       	breq	.+16     	; 0x1528 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1518:	b7 01       	movw	r22, r14
    151a:	0e 94 02 23 	call	0x4604	; 0x4604 <strchr>
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	51 f0       	breq	.+20     	; 0x1536 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	cf 5f       	subi	r28, 0xFF	; 255
    1526:	f6 cf       	rjmp	.-20     	; 0x1514 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1528:	0e 94 af 22 	call	0x455e	; 0x455e <atoi>
    152c:	f6 01       	movw	r30, r12
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	bf 90       	pop	r11
    1548:	af 90       	pop	r10
    154a:	08 95       	ret

0000154c <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
    1558:	7b 01       	movw	r14, r22
    155a:	44 ef       	ldi	r20, 0xF4	; 244
    155c:	51 e0       	ldi	r21, 0x01	; 1
    155e:	6c ed       	ldi	r22, 0xDC	; 220
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	2c e2       	ldi	r18, 0x2C	; 44
    156a:	a7 01       	movw	r20, r14
    156c:	61 ed       	ldi	r22, 0xD1	; 209
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	ce 01       	movw	r24, r28
    1572:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	08 95       	ret

00001582 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    1582:	4f 92       	push	r4
    1584:	5f 92       	push	r5
    1586:	6f 92       	push	r6
    1588:	7f 92       	push	r7
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
    15a0:	5a 01       	movw	r10, r20
    15a2:	69 01       	movw	r12, r18
    15a4:	27 01       	movw	r4, r14
    15a6:	38 01       	movw	r6, r16
    15a8:	fc 01       	movw	r30, r24
    15aa:	e5 5e       	subi	r30, 0xE5	; 229
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	00 81       	ld	r16, Z
    15b0:	11 81       	ldd	r17, Z+1	; 0x01
    15b2:	26 2f       	mov	r18, r22
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	84 ef       	ldi	r24, 0xF4	; 244
    15bc:	e8 2e       	mov	r14, r24
    15be:	ff 24       	eor	r15, r15
    15c0:	f3 94       	inc	r15
    15c2:	62 e0       	ldi	r22, 0x02	; 2
    15c4:	71 e0       	ldi	r23, 0x01	; 1
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    15cc:	88 23       	and	r24, r24
    15ce:	d9 f0       	breq	.+54     	; 0x1606 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x84>
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	b2 01       	movw	r22, r4
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
    15da:	01 e0       	ldi	r16, 0x01	; 1
    15dc:	2c e2       	ldi	r18, 0x2C	; 44
    15de:	a5 01       	movw	r20, r10
    15e0:	65 ef       	ldi	r22, 0xF5	; 245
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15ea:	88 23       	and	r24, r24
    15ec:	71 f0       	breq	.+28     	; 0x160a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x88>
    15ee:	02 e0       	ldi	r16, 0x02	; 2
    15f0:	2c e2       	ldi	r18, 0x2C	; 44
    15f2:	a6 01       	movw	r20, r12
    15f4:	68 ee       	ldi	r22, 0xE8	; 232
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	ce 01       	movw	r24, r28
    15fa:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15fe:	88 23       	and	r24, r24
    1600:	31 f0       	breq	.+12     	; 0x160e <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8c>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8e>
    1606:	87 e0       	ldi	r24, 0x07	; 7
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8e>
    160a:	88 e0       	ldi	r24, 0x08	; 8
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x8e>
    160e:	89 e0       	ldi	r24, 0x09	; 9
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	bf 90       	pop	r11
    1622:	af 90       	pop	r10
    1624:	7f 90       	pop	r7
    1626:	6f 90       	pop	r6
    1628:	5f 90       	pop	r5
    162a:	4f 90       	pop	r4
    162c:	08 95       	ret

0000162e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    162e:	3f 92       	push	r3
    1630:	4f 92       	push	r4
    1632:	5f 92       	push	r5
    1634:	6f 92       	push	r6
    1636:	7f 92       	push	r7
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	ec 01       	movw	r28, r24
    1652:	2a 01       	movw	r4, r20
    1654:	39 01       	movw	r6, r18
    1656:	48 01       	movw	r8, r16
    1658:	57 01       	movw	r10, r14
    165a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN13Adafruit_FONA10HTTP_setupEPc>
    165e:	38 2e       	mov	r3, r24
    1660:	8f 70       	andi	r24, 0x0F	; 15
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	08 f0       	brcs	.+2      	; 0x1668 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x3a>
    1666:	83 c0       	rjmp	.+262    	; 0x176e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x140>
    1668:	a2 01       	movw	r20, r4
    166a:	69 ec       	ldi	r22, 0xC9	; 201
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1674:	81 11       	cpse	r24, r1
    1676:	03 c0       	rjmp	.+6      	; 0x167e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x50>
    1678:	83 2d       	mov	r24, r3
    167a:	80 61       	ori	r24, 0x10	; 16
    167c:	38 2e       	mov	r3, r24
    167e:	69 eb       	ldi	r22, 0xB9	; 185
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	8e eb       	ldi	r24, 0xBE	; 190
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    168a:	2a e0       	ldi	r18, 0x0A	; 10
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 ec       	ldi	r20, 0xC0	; 192
    1690:	54 ed       	ldi	r21, 0xD4	; 212
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	7f ef       	ldi	r23, 0xFF	; 255
    1696:	8e eb       	ldi	r24, 0xBE	; 190
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	0e 94 ce 1a 	call	0x359c	; 0x359c <_ZN5Print7printlnEmi>
    169e:	a4 01       	movw	r20, r8
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	00 ec       	ldi	r16, 0xC0	; 192
    16a6:	14 ed       	ldi	r17, 0xD4	; 212
    16a8:	2f ef       	ldi	r18, 0xFF	; 255
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN13Adafruit_FONA9HTTP_dataEmm>
    16b2:	81 11       	cpse	r24, r1
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x8e>
    16b6:	83 2d       	mov	r24, r3
    16b8:	85 60       	ori	r24, 0x05	; 5
    16ba:	5a c0       	rjmp	.+180    	; 0x1770 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x142>
    16bc:	fe 01       	movw	r30, r28
    16be:	e3 5e       	subi	r30, 0xE3	; 227
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	dc 01       	movw	r26, r24
    16c8:	ed 91       	ld	r30, X+
    16ca:	fc 91       	ld	r31, X
    16cc:	02 80       	ldd	r0, Z+2	; 0x02
    16ce:	f3 81       	ldd	r31, Z+3	; 0x03
    16d0:	e0 2d       	mov	r30, r0
    16d2:	a4 01       	movw	r20, r8
    16d4:	b3 01       	movw	r22, r6
    16d6:	09 95       	icall
    16d8:	fe 01       	movw	r30, r28
    16da:	e5 5e       	subi	r30, 0xE5	; 229
    16dc:	fe 4f       	sbci	r31, 0xFE	; 254
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	40 e1       	ldi	r20, 0x10	; 16
    16e4:	57 e2       	ldi	r21, 0x27	; 39
    16e6:	ce 01       	movw	r24, r28
    16e8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    16ec:	81 11       	cpse	r24, r1
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0xc8>
    16f0:	83 2d       	mov	r24, r3
    16f2:	86 60       	ori	r24, 0x06	; 6
    16f4:	3d c0       	rjmp	.+122    	; 0x1770 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x142>
    16f6:	10 e1       	ldi	r17, 0x10	; 16
    16f8:	e1 2e       	mov	r14, r17
    16fa:	17 e2       	ldi	r17, 0x27	; 39
    16fc:	f1 2e       	mov	r15, r17
    16fe:	00 e0       	ldi	r16, 0x00	; 0
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	96 01       	movw	r18, r12
    1704:	a5 01       	movw	r20, r10
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	ce 01       	movw	r24, r28
    170a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    170e:	98 2f       	mov	r25, r24
    1710:	9f 70       	andi	r25, 0x0F	; 15
    1712:	92 30       	cpi	r25, 0x02	; 2
    1714:	10 f0       	brcs	.+4      	; 0x171a <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0xec>
    1716:	83 29       	or	r24, r3
    1718:	2b c0       	rjmp	.+86     	; 0x1770 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x142>
    171a:	60 eb       	ldi	r22, 0xB0	; 176
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	8e eb       	ldi	r24, 0xBE	; 190
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1726:	f5 01       	movw	r30, r10
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	4a e0       	ldi	r20, 0x0A	; 10
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	8e eb       	ldi	r24, 0xBE	; 190
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEji>
    1738:	6a ea       	ldi	r22, 0xAA	; 170
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	8e eb       	ldi	r24, 0xBE	; 190
    173e:	93 e0       	ldi	r25, 0x03	; 3
    1740:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1744:	d6 01       	movw	r26, r12
    1746:	6d 91       	ld	r22, X+
    1748:	7c 91       	ld	r23, X
    174a:	4a e0       	ldi	r20, 0x0A	; 10
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	8e eb       	ldi	r24, 0xBE	; 190
    1750:	93 e0       	ldi	r25, 0x03	; 3
    1752:	0e 94 bc 1a 	call	0x3578	; 0x3578 <_ZN5Print7printlnEji>
    1756:	b6 01       	movw	r22, r12
    1758:	ce 01       	movw	r24, r28
    175a:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN13Adafruit_FONA12HTTP_readallEPj>
    175e:	81 11       	cpse	r24, r1
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x13a>
    1762:	b3 2d       	mov	r27, r3
    1764:	b0 62       	ori	r27, 0x20	; 32
    1766:	3b 2e       	mov	r3, r27
    1768:	83 2d       	mov	r24, r3
    176a:	81 60       	ori	r24, 0x01	; 1
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x142>
    176e:	83 2d       	mov	r24, r3
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	7f 90       	pop	r7
    178a:	6f 90       	pop	r6
    178c:	5f 90       	pop	r5
    178e:	4f 90       	pop	r4
    1790:	3f 90       	pop	r3
    1792:	08 95       	ret

00001794 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>:
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	a2 97       	sbiw	r28, 0x22	; 34
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	5c 01       	movw	r10, r24
    17be:	4a 01       	movw	r8, r20
    17c0:	80 e2       	ldi	r24, 0x20	; 32
    17c2:	e9 e2       	ldi	r30, 0x29	; 41
    17c4:	f1 e0       	ldi	r31, 0x01	; 1
    17c6:	de 01       	movw	r26, r28
    17c8:	11 96       	adiw	r26, 0x01	; 1
    17ca:	01 90       	ld	r0, Z+
    17cc:	0d 92       	st	X+, r0
    17ce:	8a 95       	dec	r24
    17d0:	e1 f7       	brne	.-8      	; 0x17ca <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x36>
    17d2:	ce 01       	movw	r24, r28
    17d4:	81 96       	adiw	r24, 0x21	; 33
    17d6:	6c 01       	movw	r12, r24
    17d8:	79 01       	movw	r14, r18
    17da:	8a 01       	movw	r16, r20
    17dc:	9b 01       	movw	r18, r22
    17de:	43 e9       	ldi	r20, 0x93	; 147
    17e0:	51 e0       	ldi	r21, 0x01	; 1
    17e2:	be 01       	movw	r22, r28
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	c5 01       	movw	r24, r10
    17ea:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
    17ee:	18 2f       	mov	r17, r24
    17f0:	8f 70       	andi	r24, 0x0F	; 15
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	58 f1       	brcs	.+86     	; 0x184c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb8>
    17f6:	6d e7       	ldi	r22, 0x7D	; 125
    17f8:	71 e0       	ldi	r23, 0x01	; 1
    17fa:	8e eb       	ldi	r24, 0xBE	; 190
    17fc:	93 e0       	ldi	r25, 0x03	; 3
    17fe:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1802:	61 2f       	mov	r22, r17
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	4a e0       	ldi	r20, 0x0A	; 10
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	8e eb       	ldi	r24, 0xBE	; 190
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN5Print7printlnEii>
    1812:	22 c0       	rjmp	.+68     	; 0x1858 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xc4>
    1814:	d5 01       	movw	r26, r10
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	04 80       	ldd	r0, Z+4	; 0x04
    181c:	f5 81       	ldd	r31, Z+5	; 0x05
    181e:	e0 2d       	mov	r30, r0
    1820:	c5 01       	movw	r24, r10
    1822:	09 95       	icall
    1824:	89 2b       	or	r24, r25
    1826:	91 f0       	breq	.+36     	; 0x184c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb8>
    1828:	d5 01       	movw	r26, r10
    182a:	ed 91       	ld	r30, X+
    182c:	fc 91       	ld	r31, X
    182e:	06 80       	ldd	r0, Z+6	; 0x06
    1830:	f7 81       	ldd	r31, Z+7	; 0x07
    1832:	e0 2d       	mov	r30, r0
    1834:	c5 01       	movw	r24, r10
    1836:	09 95       	icall
    1838:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    183c:	95 ff       	sbrs	r25, 5
    183e:	fc cf       	rjmp	.-8      	; 0x1838 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    1840:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1844:	b1 e0       	ldi	r27, 0x01	; 1
    1846:	8b 1a       	sub	r8, r27
    1848:	91 08       	sbc	r9, r1
    184a:	21 f7       	brne	.-56     	; 0x1814 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x80>
    184c:	81 14       	cp	r8, r1
    184e:	91 04       	cpc	r9, r1
    1850:	09 f7       	brne	.-62     	; 0x1814 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x80>
    1852:	c5 01       	movw	r24, r10
    1854:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN13Adafruit_FONA9HTTP_termEv>
    1858:	81 2f       	mov	r24, r17
    185a:	a2 96       	adiw	r28, 0x22	; 34
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
    187e:	08 95       	ret

00001880 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	6a 01       	movw	r12, r20
    1896:	59 01       	movw	r10, r18
    1898:	10 2f       	mov	r17, r16
    189a:	0e 2d       	mov	r16, r14
    189c:	44 ef       	ldi	r20, 0xF4	; 244
    189e:	51 e0       	ldi	r21, 0x01	; 1
    18a0:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    18a4:	21 2f       	mov	r18, r17
    18a6:	a5 01       	movw	r20, r10
    18a8:	b6 01       	movw	r22, r12
    18aa:	ce 01       	movw	r24, r28
    18ac:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    18b0:	18 2f       	mov	r17, r24
    18b2:	88 23       	and	r24, r24
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	64 ef       	ldi	r22, 0xF4	; 244
    18ba:	71 e0       	ldi	r23, 0x01	; 1
    18bc:	ce 01       	movw	r24, r28
    18be:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN13Adafruit_FONA8readlineEjb>
    18c2:	81 2f       	mov	r24, r17
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	bf 90       	pop	r11
    18d4:	af 90       	pop	r10
    18d6:	08 95       	ret

000018d8 <_ZN13Adafruit_FONA14getBattPercentEPj>:
    18d8:	ef 92       	push	r14
    18da:	0f 93       	push	r16
    18dc:	9b 01       	movw	r18, r22
    18de:	ee 24       	eor	r14, r14
    18e0:	e3 94       	inc	r14
    18e2:	0c e2       	ldi	r16, 0x2C	; 44
    18e4:	48 eb       	ldi	r20, 0xB8	; 184
    18e6:	52 e0       	ldi	r21, 0x02	; 2
    18e8:	61 eb       	ldi	r22, 0xB1	; 177
    18ea:	72 e0       	ldi	r23, 0x02	; 2
    18ec:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    18f0:	0f 91       	pop	r16
    18f2:	ef 90       	pop	r14
    18f4:	08 95       	ret

000018f6 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	28 97       	sbiw	r28, 0x08	; 8
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    1918:	18 86       	std	Y+8, r1	; 0x08
    191a:	1f 82       	std	Y+7, r1	; 0x07
    191c:	1e 82       	std	Y+6, r1	; 0x06
    191e:	1d 82       	std	Y+5, r1	; 0x05
    1920:	1c 82       	std	Y+4, r1	; 0x04
    1922:	1b 82       	std	Y+3, r1	; 0x03
    1924:	1a 82       	std	Y+2, r1	; 0x02
    1926:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    1928:	e1 2c       	mov	r14, r1
    192a:	0c e2       	ldi	r16, 0x2C	; 44
    192c:	9e 01       	movw	r18, r28
    192e:	29 5f       	subi	r18, 0xF9	; 249
    1930:	3f 4f       	sbci	r19, 0xFF	; 255
    1932:	4a ea       	ldi	r20, 0xAA	; 170
    1934:	52 e0       	ldi	r21, 0x02	; 2
    1936:	63 ea       	ldi	r22, 0xA3	; 163
    1938:	72 e0       	ldi	r23, 0x02	; 2
    193a:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    193e:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    1940:	ee 24       	eor	r14, r14
    1942:	e3 94       	inc	r14
    1944:	9e 01       	movw	r18, r28
    1946:	2b 5f       	subi	r18, 0xFB	; 251
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	4c e9       	ldi	r20, 0x9C	; 156
    194c:	52 e0       	ldi	r21, 0x02	; 2
    194e:	65 e9       	ldi	r22, 0x95	; 149
    1950:	72 e0       	ldi	r23, 0x02	; 2
    1952:	c6 01       	movw	r24, r12
    1954:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1958:	88 23       	and	r24, r24
    195a:	19 f0       	breq	.+6      	; 0x1962 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	f8 26       	eor	r15, r24
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    1962:	ff 24       	eor	r15, r15
    1964:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1966:	e1 2c       	mov	r14, r1
    1968:	0c e2       	ldi	r16, 0x2C	; 44
    196a:	9e 01       	movw	r18, r28
    196c:	2d 5f       	subi	r18, 0xFD	; 253
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	4d e8       	ldi	r20, 0x8D	; 141
    1972:	52 e0       	ldi	r21, 0x02	; 2
    1974:	64 e8       	ldi	r22, 0x84	; 132
    1976:	72 e0       	ldi	r23, 0x02	; 2
    1978:	c6 01       	movw	r24, r12
    197a:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    197e:	88 23       	and	r24, r24
    1980:	11 f0       	breq	.+4      	; 0x1986 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1982:	1b 81       	ldd	r17, Y+3	; 0x03
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1986:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1988:	ee 24       	eor	r14, r14
    198a:	e3 94       	inc	r14
    198c:	0c e2       	ldi	r16, 0x2C	; 44
    198e:	9e 01       	movw	r18, r28
    1990:	2f 5f       	subi	r18, 0xFF	; 255
    1992:	3f 4f       	sbci	r19, 0xFF	; 255
    1994:	4c e7       	ldi	r20, 0x7C	; 124
    1996:	52 e0       	ldi	r21, 0x02	; 2
    1998:	63 e7       	ldi	r22, 0x73	; 115
    199a:	72 e0       	ldi	r23, 0x02	; 2
    199c:	c6 01       	movw	r24, r12
    199e:	0e 94 40 0c 	call	0x1880	; 0x1880 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    19a2:	81 11       	cpse	r24, r1
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    19a6:	91 2f       	mov	r25, r17
    19a8:	90 62       	ori	r25, 0x20	; 32
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    19ac:	99 81       	ldd	r25, Y+1	; 0x01
    19ae:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    19b0:	7d 81       	ldd	r23, Y+5	; 0x05
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
}
    19b4:	8f 2d       	mov	r24, r15
    19b6:	28 96       	adiw	r28, 0x08	; 8
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    19d4:	fc 01       	movw	r30, r24
    19d6:	10 82       	st	Z, r1
    19d8:	12 82       	std	Z+2, r1	; 0x02
    19da:	11 82       	std	Z+1, r1	; 0x01
    19dc:	13 82       	std	Z+3, r1	; 0x03
    19de:	14 82       	std	Z+4, r1	; 0x04
    19e0:	15 82       	std	Z+5, r1	; 0x05
    19e2:	16 82       	std	Z+6, r1	; 0x06
    19e4:	17 82       	std	Z+7, r1	; 0x07
    19e6:	12 86       	std	Z+10, r1	; 0x0a
    19e8:	11 86       	std	Z+9, r1	; 0x09
    19ea:	14 86       	std	Z+12, r1	; 0x0c
    19ec:	13 86       	std	Z+11, r1	; 0x0b
    19ee:	08 95       	ret

000019f0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    19f0:	2a e0       	ldi	r18, 0x0A	; 10
    19f2:	82 9f       	mul	r24, r18
    19f4:	c0 01       	movw	r24, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	09 96       	adiw	r24, 0x09	; 9
    19fa:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <_ZN7Helpers14base64_enc_lenEi>

000019fe <_ZN10GsmPayload16createRawPayloadEPh>:
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	ec 01       	movw	r28, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	29 e0       	ldi	r18, 0x09	; 9
    1a08:	fe 01       	movw	r30, r28
    1a0a:	db 01       	movw	r26, r22
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	2a 95       	dec	r18
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    1a14:	4b 81       	ldd	r20, Y+3	; 0x03
    1a16:	2a e0       	ldi	r18, 0x0A	; 10
    1a18:	42 9f       	mul	r20, r18
    1a1a:	a0 01       	movw	r20, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	09 96       	adiw	r24, 0x09	; 9
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <memcpy>

00001a2c <_ZN10GsmPayload20createEncodedPayloadEPc>:
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	6b 01       	movw	r12, r22
    1a46:	ed b6       	in	r14, 0x3d	; 61
    1a48:	fe b6       	in	r15, 0x3e	; 62
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	03 81       	ldd	r16, Z+3	; 0x03
    1a4e:	fa e0       	ldi	r31, 0x0A	; 10
    1a50:	0f 9f       	mul	r16, r31
    1a52:	80 01       	movw	r16, r0
    1a54:	11 24       	eor	r1, r1
    1a56:	07 5f       	subi	r16, 0xF7	; 247
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	2d b7       	in	r18, 0x3d	; 61
    1a5c:	3e b7       	in	r19, 0x3e	; 62
    1a5e:	20 1b       	sub	r18, r16
    1a60:	31 0b       	sbc	r19, r17
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	3e bf       	out	0x3e, r19	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	2d bf       	out	0x3d, r18	; 61
    1a6c:	ed b7       	in	r30, 0x3d	; 61
    1a6e:	fe b7       	in	r31, 0x3e	; 62
    1a70:	31 96       	adiw	r30, 0x01	; 1
    1a72:	5f 01       	movw	r10, r30
    1a74:	bf 01       	movw	r22, r30
    1a76:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_ZN10GsmPayload16createRawPayloadEPh>
    1a7a:	a8 01       	movw	r20, r16
    1a7c:	b5 01       	movw	r22, r10
    1a7e:	c6 01       	movw	r24, r12
    1a80:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN7Helpers13base64_encodeEPcPhi>
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	fe be       	out	0x3e, r15	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	ed be       	out	0x3d, r14	; 61
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	df 90       	pop	r13
    1a9c:	cf 90       	pop	r12
    1a9e:	bf 90       	pop	r11
    1aa0:	af 90       	pop	r10
    1aa2:	08 95       	ret

00001aa4 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	74 87       	std	Z+12, r23	; 0x0c
    1aa8:	63 87       	std	Z+11, r22	; 0x0b
    1aaa:	43 83       	std	Z+3, r20	; 0x03
    1aac:	08 95       	ret

00001aae <_ZN10GsmPayload11setModuleIdEh>:
    1aae:	fc 01       	movw	r30, r24
    1ab0:	60 83       	st	Z, r22
    1ab2:	08 95       	ret

00001ab4 <_ZN10GsmPayload13getBootNumberEv>:
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	92 81       	ldd	r25, Z+2	; 0x02
    1aba:	08 95       	ret

00001abc <_ZN10GsmPayload13setBootNumberEj>:
    1abc:	fc 01       	movw	r30, r24
    1abe:	72 83       	std	Z+2, r23	; 0x02
    1ac0:	61 83       	std	Z+1, r22	; 0x01
    1ac2:	08 95       	ret

00001ac4 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	45 83       	std	Z+5, r20	; 0x05
    1ac8:	56 83       	std	Z+6, r21	; 0x06
    1aca:	67 83       	std	Z+7, r22	; 0x07
    1acc:	70 87       	std	Z+8, r23	; 0x08
    1ace:	08 95       	ret

00001ad0 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	69 eb       	ldi	r22, 0xB9	; 185
    1ad8:	73 e0       	ldi	r23, 0x03	; 3
    1ada:	8e eb       	ldi	r24, 0xBE	; 190
    1adc:	93 e0       	ldi	r25, 0x03	; 3
    1ade:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1ae2:	4a e0       	ldi	r20, 0x0A	; 10
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	68 81       	ld	r22, Y
    1ae8:	8e eb       	ldi	r24, 0xBE	; 190
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN5Print5printEhi>
    1af0:	65 eb       	ldi	r22, 0xB5	; 181
    1af2:	73 e0       	ldi	r23, 0x03	; 3
    1af4:	8e eb       	ldi	r24, 0xBE	; 190
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1afc:	60 eb       	ldi	r22, 0xB0	; 176
    1afe:	73 e0       	ldi	r23, 0x03	; 3
    1b00:	8e eb       	ldi	r24, 0xBE	; 190
    1b02:	93 e0       	ldi	r25, 0x03	; 3
    1b04:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b08:	4a e0       	ldi	r20, 0x0A	; 10
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	69 81       	ldd	r22, Y+1	; 0x01
    1b0e:	8e eb       	ldi	r24, 0xBE	; 190
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN5Print5printEhi>
    1b16:	6c ea       	ldi	r22, 0xAC	; 172
    1b18:	73 e0       	ldi	r23, 0x03	; 3
    1b1a:	8e eb       	ldi	r24, 0xBE	; 190
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b22:	67 e9       	ldi	r22, 0x97	; 151
    1b24:	73 e0       	ldi	r23, 0x03	; 3
    1b26:	8e eb       	ldi	r24, 0xBE	; 190
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b30:	63 70       	andi	r22, 0x03	; 3
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	4a e0       	ldi	r20, 0x0A	; 10
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	8e eb       	ldi	r24, 0xBE	; 190
    1b3a:	93 e0       	ldi	r25, 0x03	; 3
    1b3c:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN5Print5printEii>
    1b40:	6d e8       	ldi	r22, 0x8D	; 141
    1b42:	73 e0       	ldi	r23, 0x03	; 3
    1b44:	8e eb       	ldi	r24, 0xBE	; 190
    1b46:	93 e0       	ldi	r25, 0x03	; 3
    1b48:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b4c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b4e:	6c 71       	andi	r22, 0x1C	; 28
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	75 95       	asr	r23
    1b54:	67 95       	ror	r22
    1b56:	75 95       	asr	r23
    1b58:	67 95       	ror	r22
    1b5a:	4a e0       	ldi	r20, 0x0A	; 10
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	8e eb       	ldi	r24, 0xBE	; 190
    1b60:	93 e0       	ldi	r25, 0x03	; 3
    1b62:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN5Print5printEii>
    1b66:	64 e8       	ldi	r22, 0x84	; 132
    1b68:	73 e0       	ldi	r23, 0x03	; 3
    1b6a:	8e eb       	ldi	r24, 0xBE	; 190
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b72:	6b 81       	ldd	r22, Y+3	; 0x03
    1b74:	65 fb       	bst	r22, 5
    1b76:	66 27       	eor	r22, r22
    1b78:	60 f9       	bld	r22, 0
    1b7a:	4a e0       	ldi	r20, 0x0A	; 10
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	8e eb       	ldi	r24, 0xBE	; 190
    1b82:	93 e0       	ldi	r25, 0x03	; 3
    1b84:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN5Print5printEii>
    1b88:	60 e8       	ldi	r22, 0x80	; 128
    1b8a:	73 e0       	ldi	r23, 0x03	; 3
    1b8c:	8e eb       	ldi	r24, 0xBE	; 190
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b94:	63 e7       	ldi	r22, 0x73	; 115
    1b96:	73 e0       	ldi	r23, 0x03	; 3
    1b98:	8e eb       	ldi	r24, 0xBE	; 190
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1ba0:	4a e0       	ldi	r20, 0x0A	; 10
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba6:	8e eb       	ldi	r24, 0xBE	; 190
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_ZN5Print7printlnEhi>

00001bb2 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	22 81       	ldd	r18, Z+2	; 0x02
    1bb6:	21 11       	cpse	r18, r1
    1bb8:	06 c0       	rjmp	.+12     	; 0x1bc6 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1bba:	90 81       	ld	r25, Z
    1bbc:	93 36       	cpi	r25, 0x63	; 99
    1bbe:	19 f0       	breq	.+6      	; 0x1bc6 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	97 30       	cpi	r25, 0x07	; 7
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	08 95       	ret

00001bca <_ZN7Helpers15printSensorDataEP10SensorData>:
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
    1bd0:	6b e6       	ldi	r22, 0x6B	; 107
    1bd2:	73 e0       	ldi	r23, 0x03	; 3
    1bd4:	8e eb       	ldi	r24, 0xBE	; 190
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bdc:	69 81       	ldd	r22, Y+1	; 0x01
    1bde:	7a 81       	ldd	r23, Y+2	; 0x02
    1be0:	4a e0       	ldi	r20, 0x0A	; 10
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	8e eb       	ldi	r24, 0xBE	; 190
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print5printEji>
    1bec:	67 e6       	ldi	r22, 0x67	; 103
    1bee:	73 e0       	ldi	r23, 0x03	; 3
    1bf0:	8e eb       	ldi	r24, 0xBE	; 190
    1bf2:	93 e0       	ldi	r25, 0x03	; 3
    1bf4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bf8:	61 e6       	ldi	r22, 0x61	; 97
    1bfa:	73 e0       	ldi	r23, 0x03	; 3
    1bfc:	8e eb       	ldi	r24, 0xBE	; 190
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c04:	6b 81       	ldd	r22, Y+3	; 0x03
    1c06:	7c 81       	ldd	r23, Y+4	; 0x04
    1c08:	4a e0       	ldi	r20, 0x0A	; 10
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	8e eb       	ldi	r24, 0xBE	; 190
    1c0e:	93 e0       	ldi	r25, 0x03	; 3
    1c10:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print5printEji>
    1c14:	6d e5       	ldi	r22, 0x5D	; 93
    1c16:	73 e0       	ldi	r23, 0x03	; 3
    1c18:	8e eb       	ldi	r24, 0xBE	; 190
    1c1a:	93 e0       	ldi	r25, 0x03	; 3
    1c1c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c20:	64 e5       	ldi	r22, 0x54	; 84
    1c22:	73 e0       	ldi	r23, 0x03	; 3
    1c24:	8e eb       	ldi	r24, 0xBE	; 190
    1c26:	93 e0       	ldi	r25, 0x03	; 3
    1c28:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c30:	4a e0       	ldi	r20, 0x0A	; 10
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	8e eb       	ldi	r24, 0xBE	; 190
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print5printEji>
    1c3c:	60 e5       	ldi	r22, 0x50	; 80
    1c3e:	73 e0       	ldi	r23, 0x03	; 3
    1c40:	8e eb       	ldi	r24, 0xBE	; 190
    1c42:	93 e0       	ldi	r25, 0x03	; 3
    1c44:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c48:	6a e4       	ldi	r22, 0x4A	; 74
    1c4a:	73 e0       	ldi	r23, 0x03	; 3
    1c4c:	8e eb       	ldi	r24, 0xBE	; 190
    1c4e:	93 e0       	ldi	r25, 0x03	; 3
    1c50:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	4a e0       	ldi	r20, 0x0A	; 10
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	8e eb       	ldi	r24, 0xBE	; 190
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print5printEji>
    1c64:	66 e4       	ldi	r22, 0x46	; 70
    1c66:	73 e0       	ldi	r23, 0x03	; 3
    1c68:	8e eb       	ldi	r24, 0xBE	; 190
    1c6a:	93 e0       	ldi	r25, 0x03	; 3
    1c6c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c70:	6f e3       	ldi	r22, 0x3F	; 63
    1c72:	73 e0       	ldi	r23, 0x03	; 3
    1c74:	8e eb       	ldi	r24, 0xBE	; 190
    1c76:	93 e0       	ldi	r25, 0x03	; 3
    1c78:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c7c:	4a e0       	ldi	r20, 0x0A	; 10
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	69 85       	ldd	r22, Y+9	; 0x09
    1c82:	8e eb       	ldi	r24, 0xBE	; 190
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_ZN5Print7printlnEhi>

00001c8e <_ZN7Helpers12freeListSizeEv>:
    1c8e:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <__flp>
    1c92:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <__flp+0x1>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	30 97       	sbiw	r30, 0x00	; 0
    1c9c:	49 f0       	breq	.+18     	; 0x1cb0 <_ZN7Helpers12freeListSizeEv+0x22>
    1c9e:	02 96       	adiw	r24, 0x02	; 2
    1ca0:	20 81       	ld	r18, Z
    1ca2:	31 81       	ldd	r19, Z+1	; 0x01
    1ca4:	82 0f       	add	r24, r18
    1ca6:	93 1f       	adc	r25, r19
    1ca8:	02 80       	ldd	r0, Z+2	; 0x02
    1caa:	f3 81       	ldd	r31, Z+3	; 0x03
    1cac:	e0 2d       	mov	r30, r0
    1cae:	f5 cf       	rjmp	.-22     	; 0x1c9a <_ZN7Helpers12freeListSizeEv+0xc>
    1cb0:	08 95       	ret

00001cb2 <_ZN7Helpers10freeMemoryEv>:
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <_ZN7Helpers10freeMemoryEv+0xa>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__brkval>
    1cc4:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <__brkval+0x1>
    1cc8:	8e 01       	movw	r16, r28
    1cca:	0f 5f       	subi	r16, 0xFF	; 255
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	29 f4       	brne	.+10     	; 0x1cdc <_ZN7Helpers10freeMemoryEv+0x2a>
    1cd2:	0c 5a       	subi	r16, 0xAC	; 172
    1cd4:	14 40       	sbci	r17, 0x04	; 4
    1cd6:	1a 83       	std	Y+2, r17	; 0x02
    1cd8:	09 83       	std	Y+1, r16	; 0x01
    1cda:	0a c0       	rjmp	.+20     	; 0x1cf0 <_ZN7Helpers10freeMemoryEv+0x3e>
    1cdc:	08 1b       	sub	r16, r24
    1cde:	19 0b       	sbc	r17, r25
    1ce0:	1a 83       	std	Y+2, r17	; 0x02
    1ce2:	09 83       	std	Y+1, r16	; 0x01
    1ce4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN7Helpers12freeListSizeEv>
    1ce8:	80 0f       	add	r24, r16
    1cea:	91 1f       	adc	r25, r17
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <_ZN7Helpers14base64_enc_lenEi>:
    1d02:	9c 01       	movw	r18, r24
    1d04:	2e 5f       	subi	r18, 0xFE	; 254
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	e3 e0       	ldi	r30, 0x03	; 3
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	c9 01       	movw	r24, r18
    1d0e:	bf 01       	movw	r22, r30
    1d10:	0e 94 6d 20 	call	0x40da	; 0x40da <__divmodhi4>
    1d14:	a9 01       	movw	r20, r18
    1d16:	48 1b       	sub	r20, r24
    1d18:	59 0b       	sbc	r21, r25
    1d1a:	ca 01       	movw	r24, r20
    1d1c:	bf 01       	movw	r22, r30
    1d1e:	0e 94 6d 20 	call	0x40da	; 0x40da <__divmodhi4>
    1d22:	cb 01       	movw	r24, r22
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	08 95       	ret

00001d30 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1d30:	dc 01       	movw	r26, r24
    1d32:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1d34:	80 81       	ld	r24, Z
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1d3c:	80 81       	ld	r24, Z
    1d3e:	83 70       	andi	r24, 0x03	; 3
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	92 95       	swap	r25
    1d44:	9f 70       	andi	r25, 0x0F	; 15
    1d46:	20 e1       	ldi	r18, 0x10	; 16
    1d48:	82 9f       	mul	r24, r18
    1d4a:	90 0d       	add	r25, r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	11 96       	adiw	r26, 0x01	; 1
    1d50:	9c 93       	st	X, r25
    1d52:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	9f 70       	andi	r25, 0x0F	; 15
    1d58:	99 0f       	add	r25, r25
    1d5a:	99 0f       	add	r25, r25
    1d5c:	22 81       	ldd	r18, Z+2	; 0x02
    1d5e:	22 95       	swap	r18
    1d60:	26 95       	lsr	r18
    1d62:	26 95       	lsr	r18
    1d64:	23 70       	andi	r18, 0x03	; 3
    1d66:	92 0f       	add	r25, r18
    1d68:	12 96       	adiw	r26, 0x02	; 2
    1d6a:	9c 93       	st	X, r25
    1d6c:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	8f 73       	andi	r24, 0x3F	; 63
    1d72:	13 96       	adiw	r26, 0x03	; 3
    1d74:	8c 93       	st	X, r24
    1d76:	08 95       	ret

00001d78 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1d78:	6f 92       	push	r6
    1d7a:	7f 92       	push	r7
    1d7c:	8f 92       	push	r8
    1d7e:	9f 92       	push	r9
    1d80:	af 92       	push	r10
    1d82:	bf 92       	push	r11
    1d84:	cf 92       	push	r12
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	27 97       	sbiw	r28, 0x07	; 7
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	6c 01       	movw	r12, r24
    1da6:	5b 01       	movw	r10, r22
    1da8:	3b 01       	movw	r6, r22
    1daa:	64 0e       	add	r6, r20
    1dac:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1dae:	e1 2c       	mov	r14, r1
    1db0:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1db2:	00 e0       	ldi	r16, 0x00	; 0
    1db4:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1db6:	4e 01       	movw	r8, r28
    1db8:	85 e0       	ldi	r24, 0x05	; 5
    1dba:	88 0e       	add	r8, r24
    1dbc:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1dbe:	6a 14       	cp	r6, r10
    1dc0:	7b 04       	cpc	r7, r11
    1dc2:	49 f1       	breq	.+82     	; 0x1e16 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1dc4:	c8 01       	movw	r24, r16
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	f5 01       	movw	r30, r10
    1dca:	21 91       	ld	r18, Z+
    1dcc:	5f 01       	movw	r10, r30
    1dce:	f4 01       	movw	r30, r8
    1dd0:	e0 0f       	add	r30, r16
    1dd2:	f1 1f       	adc	r31, r17
    1dd4:	20 83       	st	Z, r18
		if(i == 3) {
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	11 f0       	breq	.+4      	; 0x1de0 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1ddc:	8c 01       	movw	r16, r24
    1dde:	ef cf       	rjmp	.-34     	; 0x1dbe <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1de0:	b4 01       	movw	r22, r8
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_Z8a3_to_a4PhS_>
    1dea:	de 01       	movw	r26, r28
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	c6 01       	movw	r24, r12
    1df0:	8e 0d       	add	r24, r14
    1df2:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1df4:	ed 91       	ld	r30, X+
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	e1 54       	subi	r30, 0x41	; 65
    1dfa:	fc 4f       	sbci	r31, 0xFC	; 252
    1dfc:	24 91       	lpm	r18, Z
    1dfe:	fc 01       	movw	r30, r24
    1e00:	21 93       	st	Z+, r18
    1e02:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1e04:	a8 15       	cp	r26, r8
    1e06:	b9 05       	cpc	r27, r9
    1e08:	a9 f7       	brne	.-22     	; 0x1df4 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1e0a:	f4 e0       	ldi	r31, 0x04	; 4
    1e0c:	ef 0e       	add	r14, r31
    1e0e:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	e3 cf       	rjmp	.-58     	; 0x1ddc <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1e16:	01 15       	cp	r16, r1
    1e18:	11 05       	cpc	r17, r1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1e1c:	3c c0       	rjmp	.+120    	; 0x1e96 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1e1e:	be 01       	movw	r22, r28
    1e20:	6b 5f       	subi	r22, 0xFB	; 251
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	fb 01       	movw	r30, r22
    1e26:	e0 0f       	add	r30, r16
    1e28:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1e2a:	cf 01       	movw	r24, r30
    1e2c:	86 1b       	sub	r24, r22
    1e2e:	97 0b       	sbc	r25, r23
    1e30:	03 97       	sbiw	r24, 0x03	; 3
    1e32:	14 f4       	brge	.+4      	; 0x1e38 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1e34:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1e36:	f9 cf       	rjmp	.-14     	; 0x1e2a <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1e38:	ce 01       	movw	r24, r28
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	5c 01       	movw	r10, r24
    1e3e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_Z8a3_to_a4PhS_>
    1e42:	c6 01       	movw	r24, r12
    1e44:	8e 0d       	add	r24, r14
    1e46:	9f 1d       	adc	r25, r15
    1e48:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1e4a:	ed 91       	ld	r30, X+
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	e1 54       	subi	r30, 0x41	; 65
    1e50:	fc 4f       	sbci	r31, 0xFC	; 252
    1e52:	24 91       	lpm	r18, Z
    1e54:	fc 01       	movw	r30, r24
    1e56:	21 93       	st	Z+, r18
    1e58:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1e5a:	9d 01       	movw	r18, r26
    1e5c:	2a 19       	sub	r18, r10
    1e5e:	3b 09       	sbc	r19, r11
    1e60:	02 17       	cp	r16, r18
    1e62:	13 07       	cpc	r17, r19
    1e64:	94 f7       	brge	.-28     	; 0x1e4a <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1e66:	ff ef       	ldi	r31, 0xFF	; 255
    1e68:	ef 1a       	sub	r14, r31
    1e6a:	ff 0a       	sbc	r15, r31
    1e6c:	e0 0e       	add	r14, r16
    1e6e:	f1 1e       	adc	r15, r17
    1e70:	f6 01       	movw	r30, r12
    1e72:	ee 0d       	add	r30, r14
    1e74:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e76:	0c 19       	sub	r16, r12
    1e78:	1d 09       	sbc	r17, r13
    1e7a:	0e 19       	sub	r16, r14
    1e7c:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1e7e:	8d e3       	ldi	r24, 0x3D	; 61
    1e80:	7f 01       	movw	r14, r30
    1e82:	ec 18       	sub	r14, r12
    1e84:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e86:	98 01       	movw	r18, r16
    1e88:	2e 0f       	add	r18, r30
    1e8a:	3f 1f       	adc	r19, r31
    1e8c:	23 30       	cpi	r18, 0x03	; 3
    1e8e:	31 05       	cpc	r19, r1
    1e90:	14 f4       	brge	.+4      	; 0x1e96 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1e92:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e94:	f5 cf       	rjmp	.-22     	; 0x1e80 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1e96:	f6 01       	movw	r30, r12
    1e98:	ee 0d       	add	r30, r14
    1e9a:	ff 1d       	adc	r31, r15
    1e9c:	10 82       	st	Z, r1
	
	return encLen;
}
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	27 96       	adiw	r28, 0x07	; 7
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	8f 90       	pop	r8
    1ec6:	7f 90       	pop	r7
    1ec8:	6f 90       	pop	r6
    1eca:	08 95       	ret

00001ecc <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	85 e0       	ldi	r24, 0x05	; 5
    1ed0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <pinMode>
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	85 e0       	ldi	r24, 0x05	; 5
    1ed8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
    1edc:	68 eb       	ldi	r22, 0xB8	; 184
    1ede:	7b e0       	ldi	r23, 0x0B	; 11
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	8d e0       	ldi	r24, 0x0D	; 13
    1eec:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <pinMode>
    1ef0:	26 e0       	ldi	r18, 0x06	; 6
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	55 e2       	ldi	r21, 0x25	; 37
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	8e eb       	ldi	r24, 0xBE	; 190
    1efc:	93 e0       	ldi	r25, 0x03	; 3
    1efe:	0e 94 8d 18 	call	0x311a	; 0x311a <_ZN14HardwareSerial5beginEmh>
    1f02:	66 e3       	ldi	r22, 0x36	; 54
    1f04:	76 e0       	ldi	r23, 0x06	; 6
    1f06:	8e eb       	ldi	r24, 0xBE	; 190
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f0e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    1f12:	84 60       	ori	r24, 0x04	; 4
    1f14:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <_behaviour>
    1f18:	08 95       	ret

00001f1a <_Z21ensureFonaInitialisedb>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	2c 97       	sbiw	r28, 0x0c	; 12
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	18 2f       	mov	r17, r24
    1f34:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__initState+0x9>
    1f38:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <__initState+0xa>
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <__initState+0xa>
    1f42:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <__initState+0x9>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__initState+0x2>
    1f4c:	89 ed       	ldi	r24, 0xD9	; 217
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <__initState+0x1>
    1f54:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__initState>
    1f58:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <__initState+0x3>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	34 c0       	rjmp	.+104    	; 0x1fc8 <_Z21ensureFonaInitialisedb+0xae>
    1f60:	61 e2       	ldi	r22, 0x21	; 33
    1f62:	76 e0       	ldi	r23, 0x06	; 6
    1f64:	8e eb       	ldi	r24, 0xBE	; 190
    1f66:	93 e0       	ldi	r25, 0x03	; 3
    1f68:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f6c:	42 e0       	ldi	r20, 0x02	; 2
    1f6e:	63 e0       	ldi	r22, 0x03	; 3
    1f70:	89 ed       	ldi	r24, 0xD9	; 217
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZN13Adafruit_FONA5beginEhh>
    1f78:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__initState+0x3>
    1f7c:	8e ec       	ldi	r24, 0xCE	; 206
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN12RmMemManager11getModuleIdEv>
    1f84:	08 2f       	mov	r16, r24
    1f86:	69 e5       	ldi	r22, 0x59	; 89
    1f88:	71 e0       	ldi	r23, 0x01	; 1
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	07 96       	adiw	r24, 0x07	; 7
    1f8e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN6StringC1EPKc>
    1f92:	60 2f       	mov	r22, r16
    1f94:	ce 01       	movw	r24, r28
    1f96:	07 96       	adiw	r24, 0x07	; 7
    1f98:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <_ZN6String6concatEh>
    1f9c:	be 01       	movw	r22, r28
    1f9e:	69 5f       	subi	r22, 0xF9	; 249
    1fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <_ZN6StringC1ERKS_>
    1faa:	be 01       	movw	r22, r28
    1fac:	6f 5f       	subi	r22, 0xFF	; 255
    1fae:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb0:	89 ed       	ldi	r24, 0xD9	; 217
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1fb8:	ce 01       	movw	r24, r28
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN6StringD1Ev>
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	07 96       	adiw	r24, 0x07	; 7
    1fc4:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <_ZN6StringD1Ev>
    1fc8:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <__initState+0x3>
    1fcc:	83 50       	subi	r24, 0x03	; 3
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	b0 f4       	brcc	.+44     	; 0x1ffe <_Z21ensureFonaInitialisedb+0xe4>
    1fd2:	66 e0       	ldi	r22, 0x06	; 6
    1fd4:	76 e0       	ldi	r23, 0x06	; 6
    1fd6:	8e eb       	ldi	r24, 0xBE	; 190
    1fd8:	93 e0       	ldi	r25, 0x03	; 3
    1fda:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    1fde:	67 e6       	ldi	r22, 0x67	; 103
    1fe0:	71 e0       	ldi	r23, 0x01	; 1
    1fe2:	8e eb       	ldi	r24, 0xBE	; 190
    1fe4:	93 e0       	ldi	r25, 0x03	; 3
    1fe6:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    1fea:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <__initState+0x3>
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	4a e0       	ldi	r20, 0x0A	; 10
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	8e eb       	ldi	r24, 0xBE	; 190
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN5Print7printlnEii>
    1ffc:	65 c0       	rjmp	.+202    	; 0x20c8 <_Z21ensureFonaInitialisedb+0x1ae>
    1ffe:	11 23       	and	r17, r17
    2000:	09 f4       	brne	.+2      	; 0x2004 <_Z21ensureFonaInitialisedb+0xea>
    2002:	b1 c0       	rjmp	.+354    	; 0x2166 <_Z21ensureFonaInitialisedb+0x24c>
    2004:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__initState+0x4>
    2008:	81 11       	cpse	r24, r1
    200a:	49 c0       	rjmp	.+146    	; 0x209e <_Z21ensureFonaInitialisedb+0x184>
    200c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__initState+0x9>
    2010:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <__initState+0xa>
    2014:	6a e0       	ldi	r22, 0x0A	; 10
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	0e 94 59 20 	call	0x40b2	; 0x40b2 <__udivmodhi4>
    201c:	89 2b       	or	r24, r25
    201e:	19 f0       	breq	.+6      	; 0x2026 <_Z21ensureFonaInitialisedb+0x10c>
    2020:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__initState+0x2>
    2024:	3c c0       	rjmp	.+120    	; 0x209e <_Z21ensureFonaInitialisedb+0x184>
    2026:	69 ee       	ldi	r22, 0xE9	; 233
    2028:	75 e0       	ldi	r23, 0x05	; 5
    202a:	8e eb       	ldi	r24, 0xBE	; 190
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	89 ed       	ldi	r24, 0xD9	; 217
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN13Adafruit_FONA10enableGPRSEb>
    203c:	18 2f       	mov	r17, r24
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	81 0f       	add	r24, r17
    2042:	82 30       	cpi	r24, 0x02	; 2
    2044:	20 f1       	brcs	.+72     	; 0x208e <_Z21ensureFonaInitialisedb+0x174>
    2046:	61 ed       	ldi	r22, 0xD1	; 209
    2048:	75 e0       	ldi	r23, 0x05	; 5
    204a:	8e eb       	ldi	r24, 0xBE	; 190
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    2052:	67 e6       	ldi	r22, 0x67	; 103
    2054:	71 e0       	ldi	r23, 0x01	; 1
    2056:	8e eb       	ldi	r24, 0xBE	; 190
    2058:	93 e0       	ldi	r25, 0x03	; 3
    205a:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    205e:	61 2f       	mov	r22, r17
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	4a e0       	ldi	r20, 0x0A	; 10
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	8e eb       	ldi	r24, 0xBE	; 190
    2068:	93 e0       	ldi	r25, 0x03	; 3
    206a:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN5Print7printlnEii>
    206e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__initState+0x9>
    2072:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <__initState+0xa>
    2076:	cc 97       	sbiw	r24, 0x3c	; 60
    2078:	28 f4       	brcc	.+10     	; 0x2084 <_Z21ensureFonaInitialisedb+0x16a>
    207a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__initState+0x2>
    207e:	6b ea       	ldi	r22, 0xAB	; 171
    2080:	75 e0       	ldi	r23, 0x05	; 5
    2082:	09 c0       	rjmp	.+18     	; 0x2096 <_Z21ensureFonaInitialisedb+0x17c>
    2084:	10 93 c2 01 	sts	0x01C2, r17	; 0x8001c2 <__initState+0x4>
    2088:	68 e8       	ldi	r22, 0x88	; 136
    208a:	75 e0       	ldi	r23, 0x05	; 5
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <_Z21ensureFonaInitialisedb+0x17c>
    208e:	10 93 c2 01 	sts	0x01C2, r17	; 0x8001c2 <__initState+0x4>
    2092:	68 e6       	ldi	r22, 0x68	; 104
    2094:	75 e0       	ldi	r23, 0x05	; 5
    2096:	8e eb       	ldi	r24, 0xBE	; 190
    2098:	93 e0       	ldi	r25, 0x03	; 3
    209a:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    209e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__initState+0x4>
    20a2:	81 50       	subi	r24, 0x01	; 1
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	80 f4       	brcc	.+32     	; 0x20c8 <_Z21ensureFonaInitialisedb+0x1ae>
    20a8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <__initState+0xb>
    20ac:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <__initState+0xc>
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <__initState+0xc>
    20b6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <__initState+0xb>
    20ba:	83 ec       	ldi	r24, 0xC3	; 195
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    20c2:	88 23       	and	r24, r24
    20c4:	31 f0       	breq	.+12     	; 0x20d2 <_Z21ensureFonaInitialisedb+0x1b8>
    20c6:	4f c0       	rjmp	.+158    	; 0x2166 <_Z21ensureFonaInitialisedb+0x24c>
    20c8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <__initState+0x1>
    20cc:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__initState>
    20d0:	4a c0       	rjmp	.+148    	; 0x2166 <_Z21ensureFonaInitialisedb+0x24c>
    20d2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <__initState+0xb>
    20d6:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <__initState+0xc>
    20da:	6a e0       	ldi	r22, 0x0A	; 10
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	0e 94 59 20 	call	0x40b2	; 0x40b2 <__udivmodhi4>
    20e2:	89 2b       	or	r24, r25
    20e4:	19 f0       	breq	.+6      	; 0x20ec <_Z21ensureFonaInitialisedb+0x1d2>
    20e6:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__initState+0x2>
    20ea:	3d c0       	rjmp	.+122    	; 0x2166 <_Z21ensureFonaInitialisedb+0x24c>
    20ec:	6d e4       	ldi	r22, 0x4D	; 77
    20ee:	75 e0       	ldi	r23, 0x05	; 5
    20f0:	8e eb       	ldi	r24, 0xBE	; 190
    20f2:	93 e0       	ldi	r25, 0x03	; 3
    20f4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    20f8:	89 ed       	ldi	r24, 0xD9	; 217
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <_ZN13Adafruit_FONA7getRSSIEv>
    2100:	69 83       	std	Y+1, r22	; 0x01
    2102:	7a 83       	std	Y+2, r23	; 0x02
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	ce 01       	movw	r24, r28
    210a:	01 96       	adiw	r24, 0x01	; 1
    210c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    2110:	ce 01       	movw	r24, r28
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    2118:	81 11       	cpse	r24, r1
    211a:	13 c0       	rjmp	.+38     	; 0x2142 <_Z21ensureFonaInitialisedb+0x228>
    211c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <__initState+0xb>
    2120:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <__initState+0xc>
    2124:	8c 32       	cpi	r24, 0x2C	; 44
    2126:	91 40       	sbci	r25, 0x01	; 1
    2128:	48 f4       	brcc	.+18     	; 0x213c <_Z21ensureFonaInitialisedb+0x222>
    212a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__initState+0x2>
    212e:	6e e1       	ldi	r22, 0x1E	; 30
    2130:	75 e0       	ldi	r23, 0x05	; 5
    2132:	8e eb       	ldi	r24, 0xBE	; 190
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    213a:	15 c0       	rjmp	.+42     	; 0x2166 <_Z21ensureFonaInitialisedb+0x24c>
    213c:	66 ee       	ldi	r22, 0xE6	; 230
    213e:	74 e0       	ldi	r23, 0x04	; 4
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <_Z21ensureFonaInitialisedb+0x22c>
    2142:	60 ec       	ldi	r22, 0xC0	; 192
    2144:	74 e0       	ldi	r23, 0x04	; 4
    2146:	8e eb       	ldi	r24, 0xBE	; 190
    2148:	93 e0       	ldi	r25, 0x03	; 3
    214a:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	ab 81       	ldd	r26, Y+3	; 0x03
    2154:	bc 81       	ldd	r27, Y+4	; 0x04
    2156:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <__initState+0x5>
    215a:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <__initState+0x6>
    215e:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <__initState+0x7>
    2162:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <__initState+0x8>
    2166:	8e eb       	ldi	r24, 0xBE	; 190
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	2c 96       	adiw	r28, 0x0c	; 12
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	08 95       	ret

00002180 <_Z15switchOffSystemv>:
    2180:	69 e6       	ldi	r22, 0x69	; 105
    2182:	71 e0       	ldi	r23, 0x01	; 1
    2184:	8e eb       	ldi	r24, 0xBE	; 190
    2186:	93 e0       	ldi	r25, 0x03	; 3
    2188:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	85 e0       	ldi	r24, 0x05	; 5
    2190:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
    2194:	68 eb       	ldi	r22, 0xB8	; 184
    2196:	7b e0       	ldi	r23, 0x0B	; 11
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <delay>

000021a0 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	2a 97       	sbiw	r28, 0x0a	; 10
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    21b4:	6d ea       	ldi	r22, 0xAD	; 173
    21b6:	74 e0       	ldi	r23, 0x04	; 4
    21b8:	8e eb       	ldi	r24, 0xBE	; 190
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	1b 82       	std	Y+3, r1	; 0x03
    21c6:	1a 82       	std	Y+2, r1	; 0x02
    21c8:	1d 82       	std	Y+5, r1	; 0x05
    21ca:	1c 82       	std	Y+4, r1	; 0x04
    21cc:	1f 82       	std	Y+7, r1	; 0x07
    21ce:	1e 82       	std	Y+6, r1	; 0x06
    21d0:	19 86       	std	Y+9, r1	; 0x09
    21d2:	18 86       	std	Y+8, r1	; 0x08
    21d4:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    21d6:	be 01       	movw	r22, r28
    21d8:	6f 5f       	subi	r22, 0xFF	; 255
    21da:	7f 4f       	sbci	r23, 0xFF	; 255
    21dc:	8c ec       	ldi	r24, 0xCC	; 204
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 94 13 	call	0x2728	; 0x2728 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	2a 96       	adiw	r28, 0x0a	; 10
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <_Z17createEncodedDataPchP14DailyCycleData>:

void createEncodedData(char* encodedOutput, uint8_t maxReadings, DailyCycleData* cycleData) {
    21f8:	7f 92       	push	r7
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	2d 97       	sbiw	r28, 0x0d	; 13
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	5c 01       	movw	r10, r24
    2224:	76 2e       	mov	r7, r22
    2226:	8a 01       	movw	r16, r20
	payload.setRSSI(cycleData->RSSI);
	payload.createEncodedPayload(encodedOutput);
	
	cycleData->BootNo = payload.getBootNumber();
	cycleData->NoOfReadings = numLoaded;
}
    2228:	cd b6       	in	r12, 0x3d	; 61
    222a:	de b6       	in	r13, 0x3e	; 62
}

void createEncodedData(char* encodedOutput, uint8_t maxReadings, DailyCycleData* cycleData) {
	
	//This will likely be peak of stack usage so warn if low memory !
	int16_t freeRAM = Helpers::freeMemory();
    222c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <_ZN7Helpers10freeMemoryEv>
    2230:	7c 01       	movw	r14, r24
	int16_t minRAM = (sizeof(SensorData)*maxReadings)
    2232:	87 2c       	mov	r8, r7
    2234:	91 2c       	mov	r9, r1
					+sizeof(GsmPayload)
					+100; //Buffer

	if (freeRAM < minRAM)
    2236:	2a e0       	ldi	r18, 0x0A	; 10
    2238:	72 9e       	mul	r7, r18
    223a:	c0 01       	movw	r24, r0
    223c:	11 24       	eor	r1, r1
    223e:	8f 58       	subi	r24, 0x8F	; 143
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	e8 16       	cp	r14, r24
    2244:	f9 06       	cpc	r15, r25
    2246:	34 f4       	brge	.+12     	; 0x2254 <_Z17createEncodedDataPchP14DailyCycleData+0x5c>
		RM_LOG2(F("**** Too little RAM before payload creation ***"), freeRAM);
    2248:	6d e7       	ldi	r22, 0x7D	; 125
    224a:	74 e0       	ldi	r23, 0x04	; 4
    224c:	8e eb       	ldi	r24, 0xBE	; 190
    224e:	93 e0       	ldi	r25, 0x03	; 3
    2250:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    2254:	67 e6       	ldi	r22, 0x67	; 103
    2256:	71 e0       	ldi	r23, 0x01	; 1
    2258:	8e eb       	ldi	r24, 0xBE	; 190
    225a:	93 e0       	ldi	r25, 0x03	; 3
    225c:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    2260:	4a e0       	ldi	r20, 0x0A	; 10
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	b7 01       	movw	r22, r14
    2266:	8e eb       	ldi	r24, 0xBE	; 190
    2268:	93 e0       	ldi	r25, 0x03	; 3
    226a:	0e 94 2f 1b 	call	0x365e	; 0x365e <_ZN5Print7printlnEii>
	
	SensorData sData[maxReadings];
    226e:	2a e0       	ldi	r18, 0x0A	; 10
    2270:	28 9d       	mul	r18, r8
    2272:	c0 01       	movw	r24, r0
    2274:	29 9d       	mul	r18, r9
    2276:	90 0d       	add	r25, r0
    2278:	11 24       	eor	r1, r1
    227a:	ed b7       	in	r30, 0x3d	; 61
    227c:	fe b7       	in	r31, 0x3e	; 62
    227e:	e8 1b       	sub	r30, r24
    2280:	f9 0b       	sbc	r31, r25
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	fe bf       	out	0x3e, r31	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	ed bf       	out	0x3d, r30	; 61
    228c:	2d b7       	in	r18, 0x3d	; 61
    228e:	3e b7       	in	r19, 0x3e	; 62
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	79 01       	movw	r14, r18
    2296:	f9 01       	movw	r30, r18
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	31 e0       	ldi	r19, 0x01	; 1
    229c:	83 1a       	sub	r8, r19
    229e:	91 08       	sbc	r9, r1
    22a0:	60 f0       	brcs	.+24     	; 0x22ba <_Z17createEncodedDataPchP14DailyCycleData+0xc2>
    22a2:	80 83       	st	Z, r24
    22a4:	12 82       	std	Z+2, r1	; 0x02
    22a6:	11 82       	std	Z+1, r1	; 0x01
    22a8:	14 82       	std	Z+4, r1	; 0x04
    22aa:	13 82       	std	Z+3, r1	; 0x03
    22ac:	16 82       	std	Z+6, r1	; 0x06
    22ae:	15 82       	std	Z+5, r1	; 0x05
    22b0:	10 86       	std	Z+8, r1	; 0x08
    22b2:	17 82       	std	Z+7, r1	; 0x07
    22b4:	11 86       	std	Z+9, r1	; 0x09
    22b6:	3a 96       	adiw	r30, 0x0a	; 10
    22b8:	f0 cf       	rjmp	.-32     	; 0x229a <_Z17createEncodedDataPchP14DailyCycleData+0xa2>
	uint8_t numLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    22ba:	47 2d       	mov	r20, r7
    22bc:	b7 01       	movw	r22, r14
    22be:	8e ec       	ldi	r24, 0xCE	; 206
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    22c6:	98 2e       	mov	r9, r24
	
	GsmPayload payload;
    22c8:	ce 01       	movw	r24, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    22d0:	67 ee       	ldi	r22, 0xE7	; 231
    22d2:	ce 01       	movw	r24, r28
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    22da:	61 e2       	ldi	r22, 0x21	; 33
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	ce 01       	movw	r24, r28
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, numLoaded);
    22e6:	49 2d       	mov	r20, r9
    22e8:	b7 01       	movw	r22, r14
    22ea:	ce 01       	movw	r24, r28
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(cycleData->RSSI);
    22f2:	f8 01       	movw	r30, r16
    22f4:	42 85       	ldd	r20, Z+10	; 0x0a
    22f6:	53 85       	ldd	r21, Z+11	; 0x0b
    22f8:	64 85       	ldd	r22, Z+12	; 0x0c
    22fa:	75 85       	ldd	r23, Z+13	; 0x0d
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);
    2304:	b5 01       	movw	r22, r10
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN10GsmPayload20createEncodedPayloadEPc>
	
	cycleData->BootNo = payload.getBootNumber();
    230e:	ce 01       	movw	r24, r28
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN10GsmPayload13getBootNumberEv>
    2316:	f8 01       	movw	r30, r16
    2318:	93 83       	std	Z+3, r25	; 0x03
    231a:	82 83       	std	Z+2, r24	; 0x02
	cycleData->NoOfReadings = numLoaded;
    231c:	94 82       	std	Z+4, r9	; 0x04
}
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de be       	out	0x3e, r13	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd be       	out	0x3d, r12	; 61
    2328:	2d 96       	adiw	r28, 0x0d	; 13
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	1f 91       	pop	r17
    233a:	0f 91       	pop	r16
    233c:	ff 90       	pop	r15
    233e:	ef 90       	pop	r14
    2340:	df 90       	pop	r13
    2342:	cf 90       	pop	r12
    2344:	bf 90       	pop	r11
    2346:	af 90       	pop	r10
    2348:	9f 90       	pop	r9
    234a:	8f 90       	pop	r8
    234c:	7f 90       	pop	r7
    234e:	08 95       	ret

00002350 <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	bf 92       	push	r11
    2356:	cf 92       	push	r12
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	62 97       	sbiw	r28, 0x12	; 18
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
	sendData.HTMLStatusCode = statuscode;
		
	mem.appendDailyEntry(&sendData);
		
	return true;
}
    2376:	ed b6       	in	r14, 0x3d	; 61
    2378:	fe b6       	in	r15, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    237a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_sendDataLoopCount>
    237e:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_sendDataLoopCount+0x1>
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <_sendDataLoopCount+0x1>
    2388:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	31 f4       	brne	.+12     	; 0x239c <_Z8sendDatav+0x4c>
		RM_LOGLN(F("Initialising Fona to send data"));
    2390:	6e e5       	ldi	r22, 0x5E	; 94
    2392:	74 e0       	ldi	r23, 0x04	; 4
    2394:	8e eb       	ldi	r24, 0xBE	; 190
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	INITIALISING_STATE* sendDataFona = ensureFonaInitialised(true);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_Z21ensureFonaInitialisedb>
    23a2:	fc 01       	movw	r30, r24
	
	if (!sendDataFona->isComplete) {
    23a4:	b2 80       	ldd	r11, Z+2	; 0x02
    23a6:	b1 10       	cpse	r11, r1
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <_Z8sendDatav+0x68>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    23aa:	66 e4       	ldi	r22, 0x46	; 70
    23ac:	74 e0       	ldi	r23, 0x04	; 4
    23ae:	8e eb       	ldi	r24, 0xBE	; 190
    23b0:	93 e0       	ldi	r25, 0x03	; 3
    23b2:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return false; //Still waiting to initialise
    23b6:	67 c0       	rjmp	.+206    	; 0x2486 <_Z8sendDatav+0x136>
	uint8_t  errorChar		= 0;/* TODO: uint16_32 for bitwise errs?*/ /* not unsigned else will get treated like int by string ctor */
	//bool           HasBeenSent	= false;
};

/* Stored in ROM (for later checking) to record what happened when trying to send a day's worth of readings */
struct DailyCycleData {
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	1a 82       	std	Y+2, r1	; 0x02
    23be:	1c 82       	std	Y+4, r1	; 0x04
    23c0:	1b 82       	std	Y+3, r1	; 0x03
    23c2:	1d 82       	std	Y+5, r1	; 0x05
    23c4:	18 86       	std	Y+8, r1	; 0x08
    23c6:	1a 86       	std	Y+10, r1	; 0x0a
    23c8:	19 86       	std	Y+9, r1	; 0x09
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    23ca:	1b 86       	std	Y+11, r1	; 0x0b
    23cc:	1c 86       	std	Y+12, r1	; 0x0c
    23ce:	1d 86       	std	Y+13, r1	; 0x0d
	}
		
	DailyCycleData sendData;
	sendData.InitStatus = sendDataFona->_fonaStatusInit;
    23d0:	83 81       	ldd	r24, Z+3	; 0x03
    23d2:	8e 83       	std	Y+6, r24	; 0x06
	sendData.GPRSInitStatus = sendDataFona->_gprsStatusInit;
    23d4:	84 81       	ldd	r24, Z+4	; 0x04
    23d6:	8f 83       	std	Y+7, r24	; 0x07
	sendData.RSSI = sendDataFona->_rssiStatusInit;
    23d8:	85 81       	ldd	r24, Z+5	; 0x05
    23da:	96 81       	ldd	r25, Z+6	; 0x06
    23dc:	a7 81       	ldd	r26, Z+7	; 0x07
    23de:	b0 85       	ldd	r27, Z+8	; 0x08
    23e0:	8b 87       	std	Y+11, r24	; 0x0b
    23e2:	9c 87       	std	Y+12, r25	; 0x0c
    23e4:	ad 87       	std	Y+13, r26	; 0x0d
    23e6:	be 87       	std	Y+14, r27	; 0x0e
		
	if (sendDataFona->fona == NULL) {
    23e8:	00 81       	ld	r16, Z
    23ea:	11 81       	ldd	r17, Z+1	; 0x01
    23ec:	01 15       	cp	r16, r1
    23ee:	11 05       	cpc	r17, r1
    23f0:	39 f4       	brne	.+14     	; 0x2400 <_Z8sendDatav+0xb0>
		
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    23f2:	63 e3       	ldi	r22, 0x33	; 51
    23f4:	74 e0       	ldi	r23, 0x04	; 4
    23f6:	8e eb       	ldi	r24, 0xBE	; 190
    23f8:	93 e0       	ldi	r25, 0x03	; 3
    23fa:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
    23fe:	3c c0       	rjmp	.+120    	; 0x2478 <_Z8sendDatav+0x128>
	}
	
	Adafruit_FONA* fona = (Adafruit_FONA*)sendDataFona->fona;
	//TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 
	uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    2400:	84 e1       	ldi	r24, 0x14	; 20
    2402:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    2406:	4c 01       	movw	r8, r24
	char encodedData[encodedSz];
    2408:	8d b7       	in	r24, 0x3d	; 61
    240a:	9e b7       	in	r25, 0x3e	; 62
    240c:	88 19       	sub	r24, r8
    240e:	99 09       	sbc	r25, r9
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	9e bf       	out	0x3e, r25	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	8d bf       	out	0x3d, r24	; 61
    241a:	01 96       	adiw	r24, 0x01	; 1
    241c:	6c 01       	movw	r12, r24
		
	//Encode in another method to free up RAM on return for the sending (just in case)
	createEncodedData(encodedData, GPRS_MAX_READINGS_FOR_SEND, &sendData);
    241e:	ae 01       	movw	r20, r28
    2420:	4f 5f       	subi	r20, 0xFF	; 255
    2422:	5f 4f       	sbci	r21, 0xFF	; 255
    2424:	64 e1       	ldi	r22, 0x14	; 20
    2426:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <_Z17createEncodedDataPchP14DailyCycleData>

	RM_LOGLN(F("Encoded data created and ready for send:"));
    242a:	6a e0       	ldi	r22, 0x0A	; 10
    242c:	74 e0       	ldi	r23, 0x04	; 4
    242e:	8e eb       	ldi	r24, 0xBE	; 190
    2430:	93 e0       	ldi	r25, 0x03	; 3
    2432:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
	RM_LOGLN(encodedData);
    2436:	b6 01       	movw	r22, r12
    2438:	8e eb       	ldi	r24, 0xBE	; 190
    243a:	93 e0       	ldi	r25, 0x03	; 3
    243c:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN5Print7printlnEPKc>

	uint16_t statuscode=0;
    2440:	1a 8a       	std	Y+18, r1	; 0x12
    2442:	19 8a       	std	Y+17, r1	; 0x11
	FONA_STATUS_GPRS_SEND status =  fona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);
    2444:	9e 01       	movw	r18, r28
    2446:	2f 5e       	subi	r18, 0xEF	; 239
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	a4 01       	movw	r20, r8
    244c:	b6 01       	movw	r22, r12
    244e:	c8 01       	movw	r24, r16
    2450:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>
    2454:	d8 2e       	mov	r13, r24

	uint16_t battPct;
	if (!fona->getBattPercent(&battPct))
    2456:	be 01       	movw	r22, r28
    2458:	61 5f       	subi	r22, 0xF1	; 241
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	c8 01       	movw	r24, r16
    245e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN13Adafruit_FONA14getBattPercentEPj>
    2462:	81 11       	cpse	r24, r1
    2464:	02 c0       	rjmp	.+4      	; 0x246a <_Z8sendDatav+0x11a>
		sendData.BattPct = -1;
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	01 c0       	rjmp	.+2      	; 0x246c <_Z8sendDatav+0x11c>
	else
		sendData.BattPct = battPct;
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	8a 83       	std	Y+2, r24	; 0x02
	
	sendData.SendStatus = status;
    246e:	d8 86       	std	Y+8, r13	; 0x08
	sendData.HTMLStatusCode = statuscode;
    2470:	89 89       	ldd	r24, Y+17	; 0x11
    2472:	9a 89       	ldd	r25, Y+18	; 0x12
    2474:	9a 87       	std	Y+10, r25	; 0x0a
    2476:	89 87       	std	Y+9, r24	; 0x09
		
	mem.appendDailyEntry(&sendData);
    2478:	be 01       	movw	r22, r28
    247a:	6f 5f       	subi	r22, 0xFF	; 255
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	8e ec       	ldi	r24, 0xCE	; 206
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>
		
	return true;
}
    2486:	8b 2d       	mov	r24, r11
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	fe be       	out	0x3e, r15	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	ed be       	out	0x3d, r14	; 61
    2492:	62 96       	adiw	r28, 0x12	; 18
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	bf 90       	pop	r11
    24b0:	9f 90       	pop	r9
    24b2:	8f 90       	pop	r8
    24b4:	08 95       	ret

000024b6 <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    24b6:	68 ee       	ldi	r22, 0xE8	; 232
    24b8:	73 e0       	ldi	r23, 0x03	; 3
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 c2 1b 	call	0x3784	; 0x3784 <delay>
	++_timerCounter;
    24c2:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
    24c6:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x1>
    24d0:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	74 e0       	ldi	r23, 0x04	; 4
    24d8:	8e eb       	ldi	r24, 0xBE	; 190
    24da:	93 e0       	ldi	r25, 0x03	; 3
    24dc:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    24e0:	67 e6       	ldi	r22, 0x67	; 103
    24e2:	71 e0       	ldi	r23, 0x01	; 1
    24e4:	8e eb       	ldi	r24, 0xBE	; 190
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN5Print5printEPKc>
    24ec:	4a e0       	ldi	r20, 0x0A	; 10
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <_behaviour>
    24f4:	8e eb       	ldi	r24, 0xBE	; 190
    24f6:	93 e0       	ldi	r25, 0x03	; 3
    24f8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    24fc:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    2500:	80 ff       	sbrs	r24, 0
    2502:	09 c0       	rjmp	.+18     	; 0x2516 <loop+0x60>
		
		if (takeReadings())
    2504:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_Z12takeReadingsv>
    2508:	88 23       	and	r24, r24
    250a:	29 f0       	breq	.+10     	; 0x2516 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    250c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    2510:	8e 7f       	andi	r24, 0xFE	; 254
    2512:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    2516:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    251a:	81 ff       	sbrs	r24, 1
    251c:	09 c0       	rjmp	.+18     	; 0x2530 <loop+0x7a>
		
		if (sendData())
    251e:	0e 94 a8 11 	call	0x2350	; 0x2350 <_Z8sendDatav>
    2522:	88 23       	and	r24, r24
    2524:	29 f0       	breq	.+10     	; 0x2530 <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    2526:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    252a:	8d 7f       	andi	r24, 0xFD	; 253
    252c:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    2530:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    2534:	82 ff       	sbrs	r24, 2
    2536:	17 c0       	rjmp	.+46     	; 0x2566 <loop+0xb0>
	
		if (_timerCounter == 1)
    2538:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__data_end>
    253c:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__data_end+0x1>
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	31 f4       	brne	.+12     	; 0x2550 <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    2544:	6e ec       	ldi	r22, 0xCE	; 206
    2546:	71 e0       	ldi	r23, 0x01	; 1
    2548:	89 ed       	ldi	r24, 0xD9	; 217
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    2550:	0e 94 a8 11 	call	0x2350	; 0x2350 <_Z8sendDatav>
    2554:	88 23       	and	r24, r24
    2556:	39 f0       	breq	.+14     	; 0x2566 <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    2558:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    255c:	8b 7f       	andi	r24, 0xFB	; 251
    255e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    2562:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    2566:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_behaviour>
    256a:	81 11       	cpse	r24, r1
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <loop+0xbc>
		
		switchOffSystem();
    256e:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <_Z15switchOffSystemv>
    2572:	08 95       	ret

00002574 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	64 e0       	ldi	r22, 0x04	; 4
    2578:	89 ed       	ldi	r24, 0xD9	; 217
    257a:	91 e0       	ldi	r25, 0x01	; 1
    257c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	8e ec       	ldi	r24, 0xCE	; 206
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	0e 94 e6 12 	call	0x25cc	; 0x25cc <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	8c ec       	ldi	r24, 0xCC	; 204
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN13SensorManagerC1Eb>
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    2594:	ee eb       	ldi	r30, 0xBE	; 190
    2596:	f1 e0       	ldi	r31, 0x01	; 1
    2598:	12 82       	std	Z+2, r1	; 0x02
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    259a:	15 82       	std	Z+5, r1	; 0x05
    259c:	16 82       	std	Z+6, r1	; 0x06
    259e:	17 82       	std	Z+7, r1	; 0x07
	uint8_t rssiErr	= 0;
	
	FONA_GET_NETREG netReg;
};

struct INITIALISING_STATE {
    25a0:	12 86       	std	Z+10, r1	; 0x0a
    25a2:	11 86       	std	Z+9, r1	; 0x09
    25a4:	14 86       	std	Z+12, r1	; 0x0c
    25a6:	13 86       	std	Z+11, r1	; 0x0b
    25a8:	08 95       	ret

000025aa <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    25aa:	8d e4       	ldi	r24, 0x4D	; 77
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <__fona+0x1>
    25b2:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <__fona>
    25b6:	8e ee       	ldi	r24, 0xEE	; 238
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <_ZN6StringD1Ev>

000025be <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    25be:	dc 01       	movw	r26, r24
    25c0:	ed 91       	ld	r30, X+
    25c2:	fc 91       	ld	r31, X
    25c4:	01 90       	ld	r0, Z+
    25c6:	f0 81       	ld	r31, Z
    25c8:	e0 2d       	mov	r30, r0
    25ca:	09 94       	ijmp

000025cc <_ZN12RmMemManagerC1Eb>:
    25cc:	fc 01       	movw	r30, r24
    25ce:	14 82       	std	Z+4, r1	; 0x04
    25d0:	15 82       	std	Z+5, r1	; 0x05
    25d2:	16 82       	std	Z+6, r1	; 0x06
    25d4:	17 82       	std	Z+7, r1	; 0x07
    25d6:	80 e8       	ldi	r24, 0x80	; 128
    25d8:	80 87       	std	Z+8, r24	; 0x08
    25da:	81 87       	std	Z+9, r24	; 0x09
    25dc:	12 86       	std	Z+10, r1	; 0x0a
    25de:	63 83       	std	Z+3, r22	; 0x03
    25e0:	61 11       	cpse	r22, r1
    25e2:	04 c0       	rjmp	.+8      	; 0x25ec <_ZN12RmMemManagerC1Eb+0x20>
    25e4:	86 e6       	ldi	r24, 0x66	; 102
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_ZN7TwoWire5beginEv>
    25ec:	08 95       	ret

000025ee <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    25ee:	fc 01       	movw	r30, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	61 15       	cp	r22, r1
    25f8:	71 05       	cpc	r23, r1
    25fa:	39 f0       	breq	.+14     	; 0x260a <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    25fc:	42 81       	ldd	r20, Z+2	; 0x02
    25fe:	2a e0       	ldi	r18, 0x0A	; 10
    2600:	42 9f       	mul	r20, r18
    2602:	a0 01       	movw	r20, r0
    2604:	11 24       	eor	r1, r1
    2606:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <memcpy>
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	08 95       	ret

0000260e <_ZN12RmMemManager16appendDailyEntryEP14DailyCycleData>:
    260e:	08 95       	ret

00002610 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	eb 01       	movw	r28, r22
    261e:	7b 01       	movw	r14, r22
    2620:	e4 0e       	add	r14, r20
    2622:	f1 1c       	adc	r15, r1
    2624:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2626:	ce 15       	cp	r28, r14
    2628:	df 05       	cpc	r29, r15
    262a:	71 f1       	breq	.+92     	; 0x2688 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    262c:	60 e5       	ldi	r22, 0x50	; 80
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	86 e6       	ldi	r24, 0x66	; 102
    2632:	93 e0       	ldi	r25, 0x03	; 3
    2634:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    2638:	61 2f       	mov	r22, r17
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	86 e6       	ldi	r24, 0x66	; 102
    263e:	93 e0       	ldi	r25, 0x03	; 3
    2640:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    2644:	b8 01       	movw	r22, r16
    2646:	77 27       	eor	r23, r23
    2648:	86 e6       	ldi	r24, 0x66	; 102
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    2650:	86 e6       	ldi	r24, 0x66	; 102
    2652:	93 e0       	ldi	r25, 0x03	; 3
    2654:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	60 e5       	ldi	r22, 0x50	; 80
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	86 e6       	ldi	r24, 0x66	; 102
    2662:	93 e0       	ldi	r25, 0x03	; 3
    2664:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    2668:	86 e6       	ldi	r24, 0x66	; 102
    266a:	93 e0       	ldi	r25, 0x03	; 3
    266c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN7TwoWire9availableEv>
    2670:	89 2b       	or	r24, r25
    2672:	29 f0       	breq	.+10     	; 0x267e <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    2674:	86 e6       	ldi	r24, 0x66	; 102
    2676:	93 e0       	ldi	r25, 0x03	; 3
    2678:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN7TwoWire4readEv>
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    267e:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    2680:	89 93       	st	Y+, r24
    2682:	0f 5f       	subi	r16, 0xFF	; 255
    2684:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2686:	cf cf       	rjmp	.-98     	; 0x2626 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	08 95       	ret

00002696 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	1f 92       	push	r1
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	be 01       	movw	r22, r28
    26a6:	6f 5f       	subi	r22, 0xFF	; 255
    26a8:	7f 4f       	sbci	r23, 0xFF	; 255
    26aa:	0e 94 08 13 	call	0x2610	; 0x2610 <_Z12internalReadjPhh>
	return value;
}
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	0f 90       	pop	r0
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <_ZN12RmMemManager18getUCharFromMemoryEj>

000026c0 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    26c0:	fc 01       	movw	r30, r24
    26c2:	60 83       	st	Z, r22
    26c4:	08 95       	ret

000026c6 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    26c6:	fc 01       	movw	r30, r24
    26c8:	80 81       	ld	r24, Z
    26ca:	81 11       	cpse	r24, r1
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    26ce:	86 2f       	mov	r24, r22
    26d0:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    26d4:	85 e0       	ldi	r24, 0x05	; 5
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	08 95       	ret

000026da <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    26da:	fc 01       	movw	r30, r24
    26dc:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    26de:	81 81       	ldd	r24, Z+1	; 0x01
    26e0:	8f 5f       	subi	r24, 0xFF	; 255
    26e2:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	12 96       	adiw	r26, 0x02	; 2
    26e8:	9c 93       	st	X, r25
    26ea:	8e 93       	st	-X, r24
    26ec:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    26ee:	81 81       	ldd	r24, Z+1	; 0x01
    26f0:	2a e0       	ldi	r18, 0x0A	; 10
    26f2:	82 9f       	mul	r24, r18
    26f4:	c0 01       	movw	r24, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	14 96       	adiw	r26, 0x04	; 4
    26fa:	9c 93       	st	X, r25
    26fc:	8e 93       	st	-X, r24
    26fe:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    2700:	81 81       	ldd	r24, Z+1	; 0x01
    2702:	67 e0       	ldi	r22, 0x07	; 7
    2704:	0e 94 4d 20 	call	0x409a	; 0x409a <__udivmodqi4>
    2708:	89 2f       	mov	r24, r25
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	16 96       	adiw	r26, 0x06	; 6
    270e:	9c 93       	st	X, r25
    2710:	8e 93       	st	-X, r24
    2712:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    2714:	81 81       	ldd	r24, Z+1	; 0x01
    2716:	24 e6       	ldi	r18, 0x64	; 100
    2718:	82 9f       	mul	r24, r18
    271a:	c0 01       	movw	r24, r0
    271c:	11 24       	eor	r1, r1
    271e:	18 96       	adiw	r26, 0x08	; 8
    2720:	9c 93       	st	X, r25
    2722:	8e 93       	st	-X, r24
    2724:	17 97       	sbiw	r26, 0x07	; 7
    2726:	08 95       	ret

00002728 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	8c 01       	movw	r16, r24
    273e:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    2740:	fc 01       	movw	r30, r24
    2742:	80 81       	ld	r24, Z
    2744:	88 23       	and	r24, r24
    2746:	21 f0       	breq	.+8      	; 0x2750 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    2748:	c8 01       	movw	r24, r16
    274a:	0e 94 6d 13 	call	0x26da	; 0x26da <_ZN13SensorManager11getMockDataEP10SensorData>
    274e:	1b c0       	rjmp	.+54     	; 0x2786 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2750:	6e e0       	ldi	r22, 0x0E	; 14
    2752:	c8 01       	movw	r24, r16
    2754:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN13SensorManager16takeSampleAnalogEh>
    2758:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    275a:	6f e0       	ldi	r22, 0x0F	; 15
    275c:	c8 01       	movw	r24, r16
    275e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN13SensorManager16takeSampleAnalogEh>
    2762:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2764:	61 e1       	ldi	r22, 0x11	; 17
    2766:	c8 01       	movw	r24, r16
    2768:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN13SensorManager16takeSampleAnalogEh>
    276c:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    276e:	60 e1       	ldi	r22, 0x10	; 16
    2770:	c8 01       	movw	r24, r16
    2772:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    2776:	ba 82       	std	Y+2, r11	; 0x02
    2778:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    277a:	dc 82       	std	Y+4, r13	; 0x04
    277c:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    277e:	fe 82       	std	Y+6, r15	; 0x06
    2780:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    2782:	98 87       	std	Y+8, r25	; 0x08
    2784:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    2786:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	df 90       	pop	r13
    2796:	cf 90       	pop	r12
    2798:	bf 90       	pop	r11
    279a:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    279c:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <_ZN7Helpers15printSensorDataEP10SensorData>

000027a0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    27a0:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_state>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_sendStop>
    27aa:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_inRepStart>
    27ae:	61 e0       	ldi	r22, 0x01	; 1
    27b0:	82 e1       	ldi	r24, 0x12	; 18
    27b2:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	83 e1       	ldi	r24, 0x13	; 19
    27ba:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
    27be:	e9 eb       	ldi	r30, 0xB9	; 185
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	8e 7f       	andi	r24, 0xFE	; 254
    27c6:	80 83       	st	Z, r24
    27c8:	80 81       	ld	r24, Z
    27ca:	8d 7f       	andi	r24, 0xFD	; 253
    27cc:	80 83       	st	Z, r24
    27ce:	88 e4       	ldi	r24, 0x48	; 72
    27d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    27d4:	85 e4       	ldi	r24, 0x45	; 69
    27d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    27da:	08 95       	ret

000027dc <twi_readFrom>:
    27dc:	41 32       	cpi	r20, 0x21	; 33
    27de:	08 f0       	brcs	.+2      	; 0x27e2 <twi_readFrom+0x6>
    27e0:	43 c0       	rjmp	.+134    	; 0x2868 <twi_readFrom+0x8c>
    27e2:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <twi_state>
    27e6:	91 11       	cpse	r25, r1
    27e8:	fc cf       	rjmp	.-8      	; 0x27e2 <twi_readFrom+0x6>
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <twi_state>
    27f0:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <twi_sendStop>
    27f4:	2f ef       	ldi	r18, 0xFF	; 255
    27f6:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <twi_error>
    27fa:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_masterBufferIndex>
    27fe:	24 0f       	add	r18, r20
    2800:	20 93 3c 03 	sts	0x033C, r18	; 0x80033c <twi_masterBufferLength>
    2804:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <twi_slarw>
    2808:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <twi_slarw>
    280c:	88 0f       	add	r24, r24
    280e:	89 2b       	or	r24, r25
    2810:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <twi_slarw>
    2814:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_inRepStart>
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	61 f4       	brne	.+24     	; 0x2834 <twi_readFrom+0x58>
    281c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_inRepStart>
    2820:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <twi_slarw>
    2824:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2828:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    282c:	83 fd       	sbrc	r24, 3
    282e:	f8 cf       	rjmp	.-16     	; 0x2820 <twi_readFrom+0x44>
    2830:	85 ec       	ldi	r24, 0xC5	; 197
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <twi_readFrom+0x5a>
    2834:	85 ee       	ldi	r24, 0xE5	; 229
    2836:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    283a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <twi_state>
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	e1 f3       	breq	.-8      	; 0x283a <twi_readFrom+0x5e>
    2842:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_masterBufferIndex>
    2846:	84 17       	cp	r24, r20
    2848:	10 f4       	brcc	.+4      	; 0x284e <twi_readFrom+0x72>
    284a:	40 91 3d 03 	lds	r20, 0x033D	; 0x80033d <twi_masterBufferIndex>
    284e:	ae e3       	ldi	r26, 0x3E	; 62
    2850:	b3 e0       	ldi	r27, 0x03	; 3
    2852:	96 2f       	mov	r25, r22
    2854:	fb 01       	movw	r30, r22
    2856:	8e 2f       	mov	r24, r30
    2858:	89 1b       	sub	r24, r25
    285a:	84 17       	cp	r24, r20
    285c:	18 f4       	brcc	.+6      	; 0x2864 <twi_readFrom+0x88>
    285e:	8d 91       	ld	r24, X+
    2860:	81 93       	st	Z+, r24
    2862:	f9 cf       	rjmp	.-14     	; 0x2856 <twi_readFrom+0x7a>
    2864:	84 2f       	mov	r24, r20
    2866:	08 95       	ret
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	08 95       	ret

0000286c <twi_writeTo>:
    286c:	0f 93       	push	r16
    286e:	41 32       	cpi	r20, 0x21	; 33
    2870:	08 f0       	brcs	.+2      	; 0x2874 <twi_writeTo+0x8>
    2872:	4a c0       	rjmp	.+148    	; 0x2908 <twi_writeTo+0x9c>
    2874:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <twi_state>
    2878:	91 11       	cpse	r25, r1
    287a:	fc cf       	rjmp	.-8      	; 0x2874 <twi_writeTo+0x8>
    287c:	32 e0       	ldi	r19, 0x02	; 2
    287e:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <twi_state>
    2882:	00 93 63 03 	sts	0x0363, r16	; 0x800363 <twi_sendStop>
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	30 93 f8 02 	sts	0x02F8, r19	; 0x8002f8 <twi_error>
    288c:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_masterBufferIndex>
    2890:	40 93 3c 03 	sts	0x033C, r20	; 0x80033c <twi_masterBufferLength>
    2894:	56 2f       	mov	r21, r22
    2896:	ae e3       	ldi	r26, 0x3E	; 62
    2898:	b3 e0       	ldi	r27, 0x03	; 3
    289a:	fb 01       	movw	r30, r22
    289c:	3e 2f       	mov	r19, r30
    289e:	35 1b       	sub	r19, r21
    28a0:	34 17       	cp	r19, r20
    28a2:	18 f4       	brcc	.+6      	; 0x28aa <twi_writeTo+0x3e>
    28a4:	31 91       	ld	r19, Z+
    28a6:	3d 93       	st	X+, r19
    28a8:	f9 cf       	rjmp	.-14     	; 0x289c <twi_writeTo+0x30>
    28aa:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <twi_slarw>
    28ae:	30 91 64 03 	lds	r19, 0x0364	; 0x800364 <twi_slarw>
    28b2:	88 0f       	add	r24, r24
    28b4:	83 2b       	or	r24, r19
    28b6:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <twi_slarw>
    28ba:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_inRepStart>
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	61 f4       	brne	.+24     	; 0x28da <twi_writeTo+0x6e>
    28c2:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_inRepStart>
    28c6:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <twi_slarw>
    28ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    28ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    28d2:	83 fd       	sbrc	r24, 3
    28d4:	f8 cf       	rjmp	.-16     	; 0x28c6 <twi_writeTo+0x5a>
    28d6:	85 ec       	ldi	r24, 0xC5	; 197
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <twi_writeTo+0x70>
    28da:	85 ee       	ldi	r24, 0xE5	; 229
    28dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    28e0:	22 23       	and	r18, r18
    28e2:	21 f0       	breq	.+8      	; 0x28ec <twi_writeTo+0x80>
    28e4:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <twi_state>
    28e8:	82 30       	cpi	r24, 0x02	; 2
    28ea:	d1 f3       	breq	.-12     	; 0x28e0 <twi_writeTo+0x74>
    28ec:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <twi_error>
    28f0:	8f 3f       	cpi	r24, 0xFF	; 255
    28f2:	79 f0       	breq	.+30     	; 0x2912 <twi_writeTo+0xa6>
    28f4:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <twi_error>
    28f8:	80 32       	cpi	r24, 0x20	; 32
    28fa:	41 f0       	breq	.+16     	; 0x290c <twi_writeTo+0xa0>
    28fc:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <twi_error>
    2900:	80 33       	cpi	r24, 0x30	; 48
    2902:	31 f0       	breq	.+12     	; 0x2910 <twi_writeTo+0xa4>
    2904:	94 e0       	ldi	r25, 0x04	; 4
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <twi_writeTo+0xa6>
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	03 c0       	rjmp	.+6      	; 0x2912 <twi_writeTo+0xa6>
    290c:	92 e0       	ldi	r25, 0x02	; 2
    290e:	01 c0       	rjmp	.+2      	; 0x2912 <twi_writeTo+0xa6>
    2910:	93 e0       	ldi	r25, 0x03	; 3
    2912:	89 2f       	mov	r24, r25
    2914:	0f 91       	pop	r16
    2916:	08 95       	ret

00002918 <twi_transmit>:
    2918:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <twi_txBufferLength>
    291c:	26 2f       	mov	r18, r22
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	24 0f       	add	r18, r20
    2922:	31 1d       	adc	r19, r1
    2924:	21 32       	cpi	r18, 0x21	; 33
    2926:	31 05       	cpc	r19, r1
    2928:	dc f4       	brge	.+54     	; 0x2960 <twi_transmit+0x48>
    292a:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <twi_state>
    292e:	24 30       	cpi	r18, 0x04	; 4
    2930:	c9 f4       	brne	.+50     	; 0x2964 <twi_transmit+0x4c>
    2932:	fc 01       	movw	r30, r24
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	86 17       	cp	r24, r22
    293a:	58 f4       	brcc	.+22     	; 0x2952 <twi_transmit+0x3a>
    293c:	30 91 1a 03 	lds	r19, 0x031A	; 0x80031a <twi_txBufferLength>
    2940:	21 91       	ld	r18, Z+
    2942:	dc 01       	movw	r26, r24
    2944:	a4 5e       	subi	r26, 0xE4	; 228
    2946:	bc 4f       	sbci	r27, 0xFC	; 252
    2948:	a3 0f       	add	r26, r19
    294a:	b1 1d       	adc	r27, r1
    294c:	2c 93       	st	X, r18
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	f3 cf       	rjmp	.-26     	; 0x2938 <twi_transmit+0x20>
    2952:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <twi_txBufferLength>
    2956:	68 0f       	add	r22, r24
    2958:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <twi_txBufferLength>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	08 95       	ret
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	08 95       	ret
    2964:	82 e0       	ldi	r24, 0x02	; 2
    2966:	08 95       	ret

00002968 <twi_attachSlaveRxEvent>:
    2968:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <twi_onSlaveReceive+0x1>
    296c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <twi_onSlaveReceive>
    2970:	08 95       	ret

00002972 <twi_attachSlaveTxEvent>:
    2972:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <twi_onSlaveTransmit+0x1>
    2976:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <twi_onSlaveTransmit>
    297a:	08 95       	ret

0000297c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    297c:	85 ed       	ldi	r24, 0xD5	; 213
    297e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2982:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2986:	84 fd       	sbrc	r24, 4
    2988:	fc cf       	rjmp	.-8      	; 0x2982 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    298a:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_state>
    298e:	08 95       	ret

00002990 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2990:	85 ec       	ldi	r24, 0xC5	; 197
    2992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    2996:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_state>
    299a:	08 95       	ret

0000299c <__vector_24>:
}

ISR(TWI_vect)
{
    299c:	1f 92       	push	r1
    299e:	0f 92       	push	r0
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	0f 92       	push	r0
    29a4:	11 24       	eor	r1, r1
    29a6:	2f 93       	push	r18
    29a8:	3f 93       	push	r19
    29aa:	4f 93       	push	r20
    29ac:	5f 93       	push	r21
    29ae:	6f 93       	push	r22
    29b0:	7f 93       	push	r23
    29b2:	8f 93       	push	r24
    29b4:	9f 93       	push	r25
    29b6:	af 93       	push	r26
    29b8:	bf 93       	push	r27
    29ba:	ef 93       	push	r30
    29bc:	ff 93       	push	r31
  switch(TW_STATUS){
    29be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    29c2:	88 7f       	andi	r24, 0xF8	; 248
    29c4:	80 36       	cpi	r24, 0x60	; 96
    29c6:	09 f4       	brne	.+2      	; 0x29ca <__vector_24+0x2e>
    29c8:	9e c0       	rjmp	.+316    	; 0x2b06 <__vector_24+0x16a>
    29ca:	78 f5       	brcc	.+94     	; 0x2a2a <__vector_24+0x8e>
    29cc:	88 32       	cpi	r24, 0x28	; 40
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <__vector_24+0x36>
    29d0:	5d c0       	rjmp	.+186    	; 0x2a8c <__vector_24+0xf0>
    29d2:	90 f4       	brcc	.+36     	; 0x29f8 <__vector_24+0x5c>
    29d4:	80 31       	cpi	r24, 0x10	; 16
    29d6:	09 f4       	brne	.+2      	; 0x29da <__vector_24+0x3e>
    29d8:	56 c0       	rjmp	.+172    	; 0x2a86 <__vector_24+0xea>
    29da:	38 f4       	brcc	.+14     	; 0x29ea <__vector_24+0x4e>
    29dc:	88 23       	and	r24, r24
    29de:	09 f4       	brne	.+2      	; 0x29e2 <__vector_24+0x46>
    29e0:	f5 c0       	rjmp	.+490    	; 0x2bcc <__vector_24+0x230>
    29e2:	88 30       	cpi	r24, 0x08	; 8
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <__vector_24+0x4c>
    29e6:	4f c0       	rjmp	.+158    	; 0x2a86 <__vector_24+0xea>
    29e8:	f5 c0       	rjmp	.+490    	; 0x2bd4 <__vector_24+0x238>
    29ea:	88 31       	cpi	r24, 0x18	; 24
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <__vector_24+0x54>
    29ee:	4e c0       	rjmp	.+156    	; 0x2a8c <__vector_24+0xf0>
    29f0:	80 32       	cpi	r24, 0x20	; 32
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <__vector_24+0x5a>
    29f4:	5f c0       	rjmp	.+190    	; 0x2ab4 <__vector_24+0x118>
    29f6:	ee c0       	rjmp	.+476    	; 0x2bd4 <__vector_24+0x238>
    29f8:	80 34       	cpi	r24, 0x40	; 64
    29fa:	09 f4       	brne	.+2      	; 0x29fe <__vector_24+0x62>
    29fc:	6a c0       	rjmp	.+212    	; 0x2ad2 <__vector_24+0x136>
    29fe:	58 f4       	brcc	.+22     	; 0x2a16 <__vector_24+0x7a>
    2a00:	80 33       	cpi	r24, 0x30	; 48
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <__vector_24+0x6a>
    2a04:	57 c0       	rjmp	.+174    	; 0x2ab4 <__vector_24+0x118>
    2a06:	88 33       	cpi	r24, 0x38	; 56
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <__vector_24+0x70>
    2a0a:	e4 c0       	rjmp	.+456    	; 0x2bd4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2a0c:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <twi_error>
      twi_releaseBus();
    2a10:	0e 94 c8 14 	call	0x2990	; 0x2990 <twi_releaseBus>
      break;
    2a14:	df c0       	rjmp	.+446    	; 0x2bd4 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2a16:	80 35       	cpi	r24, 0x50	; 80
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <__vector_24+0x80>
    2a1a:	4f c0       	rjmp	.+158    	; 0x2aba <__vector_24+0x11e>
    2a1c:	88 35       	cpi	r24, 0x58	; 88
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__vector_24+0x86>
    2a20:	5d c0       	rjmp	.+186    	; 0x2adc <__vector_24+0x140>
    2a22:	88 34       	cpi	r24, 0x48	; 72
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <__vector_24+0x8c>
    2a26:	d6 c0       	rjmp	.+428    	; 0x2bd4 <__vector_24+0x238>
    2a28:	d3 c0       	rjmp	.+422    	; 0x2bd0 <__vector_24+0x234>
    2a2a:	88 39       	cpi	r24, 0x98	; 152
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <__vector_24+0x94>
    2a2e:	c4 c0       	rjmp	.+392    	; 0x2bb8 <__vector_24+0x21c>
    2a30:	a8 f4       	brcc	.+42     	; 0x2a5c <__vector_24+0xc0>
    2a32:	88 37       	cpi	r24, 0x78	; 120
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <__vector_24+0x9c>
    2a36:	67 c0       	rjmp	.+206    	; 0x2b06 <__vector_24+0x16a>
    2a38:	38 f4       	brcc	.+14     	; 0x2a48 <__vector_24+0xac>
    2a3a:	88 36       	cpi	r24, 0x68	; 104
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <__vector_24+0xa4>
    2a3e:	63 c0       	rjmp	.+198    	; 0x2b06 <__vector_24+0x16a>
    2a40:	80 37       	cpi	r24, 0x70	; 112
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <__vector_24+0xaa>
    2a44:	60 c0       	rjmp	.+192    	; 0x2b06 <__vector_24+0x16a>
    2a46:	c6 c0       	rjmp	.+396    	; 0x2bd4 <__vector_24+0x238>
    2a48:	88 38       	cpi	r24, 0x88	; 136
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <__vector_24+0xb2>
    2a4c:	b5 c0       	rjmp	.+362    	; 0x2bb8 <__vector_24+0x21c>
    2a4e:	80 39       	cpi	r24, 0x90	; 144
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <__vector_24+0xb8>
    2a52:	5f c0       	rjmp	.+190    	; 0x2b12 <__vector_24+0x176>
    2a54:	80 38       	cpi	r24, 0x80	; 128
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <__vector_24+0xbe>
    2a58:	bd c0       	rjmp	.+378    	; 0x2bd4 <__vector_24+0x238>
    2a5a:	5b c0       	rjmp	.+182    	; 0x2b12 <__vector_24+0x176>
    2a5c:	80 3b       	cpi	r24, 0xB0	; 176
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <__vector_24+0xc6>
    2a60:	83 c0       	rjmp	.+262    	; 0x2b68 <__vector_24+0x1cc>
    2a62:	38 f4       	brcc	.+14     	; 0x2a72 <__vector_24+0xd6>
    2a64:	80 3a       	cpi	r24, 0xA0	; 160
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <__vector_24+0xce>
    2a68:	66 c0       	rjmp	.+204    	; 0x2b36 <__vector_24+0x19a>
    2a6a:	88 3a       	cpi	r24, 0xA8	; 168
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <__vector_24+0xd4>
    2a6e:	7c c0       	rjmp	.+248    	; 0x2b68 <__vector_24+0x1cc>
    2a70:	b1 c0       	rjmp	.+354    	; 0x2bd4 <__vector_24+0x238>
    2a72:	80 3c       	cpi	r24, 0xC0	; 192
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <__vector_24+0xdc>
    2a76:	a4 c0       	rjmp	.+328    	; 0x2bc0 <__vector_24+0x224>
    2a78:	88 3c       	cpi	r24, 0xC8	; 200
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <__vector_24+0xe2>
    2a7c:	a1 c0       	rjmp	.+322    	; 0x2bc0 <__vector_24+0x224>
    2a7e:	88 3b       	cpi	r24, 0xB8	; 184
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <__vector_24+0xe8>
    2a82:	87 c0       	rjmp	.+270    	; 0x2b92 <__vector_24+0x1f6>
    2a84:	a7 c0       	rjmp	.+334    	; 0x2bd4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2a86:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <twi_slarw>
    2a8a:	10 c0       	rjmp	.+32     	; 0x2aac <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a8c:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <twi_masterBufferIndex>
    2a90:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_masterBufferLength>
    2a94:	98 17       	cp	r25, r24
    2a96:	70 f5       	brcc	.+92     	; 0x2af4 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2a98:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_masterBufferIndex>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	8e 0f       	add	r24, r30
    2aa0:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_masterBufferIndex>
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	e2 5c       	subi	r30, 0xC2	; 194
    2aa8:	fc 4f       	sbci	r31, 0xFC	; 252
    2aaa:	80 81       	ld	r24, Z
    2aac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ab0:	85 ec       	ldi	r24, 0xC5	; 197
    2ab2:	83 c0       	rjmp	.+262    	; 0x2bba <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2ab4:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <twi_error>
    2ab8:	8b c0       	rjmp	.+278    	; 0x2bd0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2aba:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_masterBufferIndex>
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	8e 0f       	add	r24, r30
    2ac2:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_masterBufferIndex>
    2ac6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	e2 5c       	subi	r30, 0xC2	; 194
    2ace:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad0:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ad2:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <twi_masterBufferIndex>
    2ad6:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <twi_masterBufferLength>
    2ada:	6b c0       	rjmp	.+214    	; 0x2bb2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2adc:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <twi_masterBufferIndex>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	8e 0f       	add	r24, r30
    2ae4:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_masterBufferIndex>
    2ae8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	e2 5c       	subi	r30, 0xC2	; 194
    2af0:	fc 4f       	sbci	r31, 0xFC	; 252
    2af2:	80 83       	st	Z, r24
	if (twi_sendStop)
    2af4:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <twi_sendStop>
    2af8:	81 11       	cpse	r24, r1
    2afa:	6a c0       	rjmp	.+212    	; 0x2bd0 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2b02:	84 ea       	ldi	r24, 0xA4	; 164
    2b04:	5e c0       	rjmp	.+188    	; 0x2bc2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2b06:	83 e0       	ldi	r24, 0x03	; 3
    2b08:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2b0c:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <twi_rxBufferIndex>
    2b10:	cf cf       	rjmp	.-98     	; 0x2ab0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b12:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <twi_rxBufferIndex>
    2b16:	80 32       	cpi	r24, 0x20	; 32
    2b18:	08 f0       	brcs	.+2      	; 0x2b1c <__vector_24+0x180>
    2b1a:	4e c0       	rjmp	.+156    	; 0x2bb8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2b1c:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <twi_rxBufferIndex>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	8e 0f       	add	r24, r30
    2b24:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <twi_rxBufferIndex>
    2b28:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	e6 50       	subi	r30, 0x06	; 6
    2b30:	fd 4f       	sbci	r31, 0xFD	; 253
    2b32:	80 83       	st	Z, r24
    2b34:	bd cf       	rjmp	.-134    	; 0x2ab0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2b36:	0e 94 c8 14 	call	0x2990	; 0x2990 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2b3a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <twi_rxBufferIndex>
    2b3e:	80 32       	cpi	r24, 0x20	; 32
    2b40:	30 f4       	brcc	.+12     	; 0x2b4e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2b42:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <twi_rxBufferIndex>
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	e6 50       	subi	r30, 0x06	; 6
    2b4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b4c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2b4e:	60 91 f9 02 	lds	r22, 0x02F9	; 0x8002f9 <twi_rxBufferIndex>
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <twi_onSlaveReceive>
    2b58:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <twi_onSlaveReceive+0x1>
    2b5c:	8a ef       	ldi	r24, 0xFA	; 250
    2b5e:	92 e0       	ldi	r25, 0x02	; 2
    2b60:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2b62:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <twi_rxBufferIndex>
      break;
    2b66:	36 c0       	rjmp	.+108    	; 0x2bd4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2b68:	84 e0       	ldi	r24, 0x04	; 4
    2b6a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2b6e:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2b72:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2b76:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <twi_onSlaveTransmit>
    2b7a:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <twi_onSlaveTransmit+0x1>
    2b7e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2b80:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <twi_txBufferLength>
    2b84:	81 11       	cpse	r24, r1
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2b8e:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2b92:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <twi_txBufferIndex>
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	8e 0f       	add	r24, r30
    2b9a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_txBufferIndex>
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	e4 5e       	subi	r30, 0xE4	; 228
    2ba2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2baa:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <twi_txBufferIndex>
    2bae:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <twi_txBufferLength>
    2bb2:	98 17       	cp	r25, r24
    2bb4:	08 f4       	brcc	.+2      	; 0x2bb8 <__vector_24+0x21c>
    2bb6:	7c cf       	rjmp	.-264    	; 0x2ab0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2bb8:	85 e8       	ldi	r24, 0x85	; 133
    2bba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2bbe:	0a c0       	rjmp	.+20     	; 0x2bd4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2bc0:	85 ec       	ldi	r24, 0xC5	; 197
    2bc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2bc6:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_state>
      break;
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2bcc:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <twi_error>
      twi_stop();
    2bd0:	0e 94 be 14 	call	0x297c	; 0x297c <twi_stop>
      break;
  }
}
    2bd4:	ff 91       	pop	r31
    2bd6:	ef 91       	pop	r30
    2bd8:	bf 91       	pop	r27
    2bda:	af 91       	pop	r26
    2bdc:	9f 91       	pop	r25
    2bde:	8f 91       	pop	r24
    2be0:	7f 91       	pop	r23
    2be2:	6f 91       	pop	r22
    2be4:	5f 91       	pop	r21
    2be6:	4f 91       	pop	r20
    2be8:	3f 91       	pop	r19
    2bea:	2f 91       	pop	r18
    2bec:	0f 90       	pop	r0
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	0f 90       	pop	r0
    2bf2:	1f 90       	pop	r1
    2bf4:	18 95       	reti

00002bf6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2bf6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2c00:	82 1b       	sub	r24, r18
    2c02:	91 09       	sbc	r25, r1
    2c04:	08 95       	ret

00002c06 <_ZN7TwoWire4readEv>:
    2c06:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2c0a:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2c0e:	98 17       	cp	r25, r24
    2c10:	50 f4       	brcc	.+20     	; 0x2c26 <_ZN7TwoWire4readEv+0x20>
    2c12:	e9 2f       	mov	r30, r25
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	e4 56       	subi	r30, 0x64	; 100
    2c18:	fc 4f       	sbci	r31, 0xFC	; 252
    2c1a:	20 81       	ld	r18, Z
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	9f 5f       	subi	r25, 0xFF	; 255
    2c20:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <_ZN7TwoWire4readEv+0x24>
    2c26:	2f ef       	ldi	r18, 0xFF	; 255
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	c9 01       	movw	r24, r18
    2c2c:	08 95       	ret

00002c2e <_ZN7TwoWire4peekEv>:
    2c2e:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2c32:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2c36:	e8 17       	cp	r30, r24
    2c38:	30 f4       	brcc	.+12     	; 0x2c46 <_ZN7TwoWire4peekEv+0x18>
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	e4 56       	subi	r30, 0x64	; 100
    2c3e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c40:	80 81       	ld	r24, Z
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	08 95       	ret
    2c46:	8f ef       	ldi	r24, 0xFF	; 255
    2c48:	9f ef       	ldi	r25, 0xFF	; 255
    2c4a:	08 95       	ret

00002c4c <_ZN7TwoWire5flushEv>:
    2c4c:	08 95       	ret

00002c4e <_ZN7TwoWire16onReceiveServiceEPhi>:
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	ec 01       	movw	r28, r24
    2c54:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <_ZN7TwoWire14user_onReceiveE>
    2c58:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <_ZN7TwoWire14user_onReceiveE+0x1>
    2c5c:	30 97       	sbiw	r30, 0x00	; 0
    2c5e:	f1 f0       	breq	.+60     	; 0x2c9c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c60:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2c64:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2c68:	98 17       	cp	r25, r24
    2c6a:	c0 f0       	brcs	.+48     	; 0x2c9c <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	29 2f       	mov	r18, r25
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	26 17       	cp	r18, r22
    2c74:	37 07       	cpc	r19, r23
    2c76:	54 f4       	brge	.+20     	; 0x2c8c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2c78:	de 01       	movw	r26, r28
    2c7a:	a2 0f       	add	r26, r18
    2c7c:	b3 1f       	adc	r27, r19
    2c7e:	4c 91       	ld	r20, X
    2c80:	d9 01       	movw	r26, r18
    2c82:	a4 56       	subi	r26, 0x64	; 100
    2c84:	bc 4f       	sbci	r27, 0xFC	; 252
    2c86:	4c 93       	st	X, r20
    2c88:	9f 5f       	subi	r25, 0xFF	; 255
    2c8a:	f1 cf       	rjmp	.-30     	; 0x2c6e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2c8c:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2c90:	60 93 9a 03 	sts	0x039A, r22	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2c94:	cb 01       	movw	r24, r22
    2c96:	df 91       	pop	r29
    2c98:	cf 91       	pop	r28
    2c9a:	09 94       	ijmp
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <_ZN7TwoWire16onRequestServiceEv>:
    2ca2:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <_ZN7TwoWire14user_onRequestE>
    2ca6:	f0 91 75 03 	lds	r31, 0x0375	; 0x800375 <_ZN7TwoWire14user_onRequestE+0x1>
    2caa:	30 97       	sbiw	r30, 0x00	; 0
    2cac:	29 f0       	breq	.+10     	; 0x2cb8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2cae:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <_ZN7TwoWire13txBufferIndexE>
    2cb2:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2cb6:	09 94       	ijmp
    2cb8:	08 95       	ret

00002cba <_ZN7TwoWire5writeEPKhj>:
    2cba:	cf 92       	push	r12
    2cbc:	df 92       	push	r13
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	7c 01       	movw	r14, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8a 01       	movw	r16, r20
    2cd0:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <_ZN7TwoWire12transmittingE>
    2cd4:	22 23       	and	r18, r18
    2cd6:	89 f0       	breq	.+34     	; 0x2cfa <_ZN7TwoWire5writeEPKhj+0x40>
    2cd8:	eb 01       	movw	r28, r22
    2cda:	6b 01       	movw	r12, r22
    2cdc:	c4 0e       	add	r12, r20
    2cde:	d5 1e       	adc	r13, r21
    2ce0:	cc 15       	cp	r28, r12
    2ce2:	dd 05       	cpc	r29, r13
    2ce4:	69 f0       	breq	.+26     	; 0x2d00 <_ZN7TwoWire5writeEPKhj+0x46>
    2ce6:	69 91       	ld	r22, Y+
    2ce8:	d7 01       	movw	r26, r14
    2cea:	ed 91       	ld	r30, X+
    2cec:	fc 91       	ld	r31, X
    2cee:	01 90       	ld	r0, Z+
    2cf0:	f0 81       	ld	r31, Z
    2cf2:	e0 2d       	mov	r30, r0
    2cf4:	c7 01       	movw	r24, r14
    2cf6:	09 95       	icall
    2cf8:	f3 cf       	rjmp	.-26     	; 0x2ce0 <_ZN7TwoWire5writeEPKhj+0x26>
    2cfa:	64 2f       	mov	r22, r20
    2cfc:	0e 94 8c 14 	call	0x2918	; 0x2918 <twi_transmit>
    2d00:	c8 01       	movw	r24, r16
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	df 90       	pop	r13
    2d10:	cf 90       	pop	r12
    2d12:	08 95       	ret

00002d14 <_ZN7TwoWire5writeEh>:
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	1f 92       	push	r1
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	69 83       	std	Y+1, r22	; 0x01
    2d20:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <_ZN7TwoWire12transmittingE>
    2d24:	22 23       	and	r18, r18
    2d26:	d1 f0       	breq	.+52     	; 0x2d5c <_ZN7TwoWire5writeEh+0x48>
    2d28:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2d2c:	20 32       	cpi	r18, 0x20	; 32
    2d2e:	40 f0       	brcs	.+16     	; 0x2d40 <_ZN7TwoWire5writeEh+0x2c>
    2d30:	21 e0       	ldi	r18, 0x01	; 1
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	fc 01       	movw	r30, r24
    2d36:	33 83       	std	Z+3, r19	; 0x03
    2d38:	22 83       	std	Z+2, r18	; 0x02
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	15 c0       	rjmp	.+42     	; 0x2d6a <_ZN7TwoWire5writeEh+0x56>
    2d40:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <_ZN7TwoWire13txBufferIndexE>
    2d44:	e8 2f       	mov	r30, r24
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	e7 58       	subi	r30, 0x87	; 135
    2d4a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d4c:	99 81       	ldd	r25, Y+1	; 0x01
    2d4e:	90 83       	st	Z, r25
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <_ZN7TwoWire13txBufferIndexE>
    2d56:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2d5a:	05 c0       	rjmp	.+10     	; 0x2d66 <_ZN7TwoWire5writeEh+0x52>
    2d5c:	61 e0       	ldi	r22, 0x01	; 1
    2d5e:	ce 01       	movw	r24, r28
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	0e 94 8c 14 	call	0x2918	; 0x2918 <twi_transmit>
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0f 90       	pop	r0
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <_ZN7TwoWireC1Ev>:
    2d72:	fc 01       	movw	r30, r24
    2d74:	13 82       	std	Z+3, r1	; 0x03
    2d76:	12 82       	std	Z+2, r1	; 0x02
    2d78:	88 ee       	ldi	r24, 0xE8	; 232
    2d7a:	93 e0       	ldi	r25, 0x03	; 3
    2d7c:	a0 e0       	ldi	r26, 0x00	; 0
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	84 83       	std	Z+4, r24	; 0x04
    2d82:	95 83       	std	Z+5, r25	; 0x05
    2d84:	a6 83       	std	Z+6, r26	; 0x06
    2d86:	b7 83       	std	Z+7, r27	; 0x07
    2d88:	8e e7       	ldi	r24, 0x7E	; 126
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	08 95       	ret

00002d92 <_ZN7TwoWire5beginEv>:
    2d92:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2d96:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2d9a:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <_ZN7TwoWire13txBufferIndexE>
    2d9e:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2da2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <twi_init>
    2da6:	81 e5       	ldi	r24, 0x51	; 81
    2da8:	96 e1       	ldi	r25, 0x16	; 22
    2daa:	0e 94 b9 14 	call	0x2972	; 0x2972 <twi_attachSlaveTxEvent>
    2dae:	87 e2       	ldi	r24, 0x27	; 39
    2db0:	96 e1       	ldi	r25, 0x16	; 22
    2db2:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <twi_attachSlaveRxEvent>

00002db6 <_ZN7TwoWire17beginTransmissionEh>:
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <_ZN7TwoWire12transmittingE>
    2dbc:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <_ZN7TwoWire9txAddressE>
    2dc0:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <_ZN7TwoWire13txBufferIndexE>
    2dc4:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2dc8:	08 95       	ret

00002dca <_ZN7TwoWire17beginTransmissionEi>:
    2dca:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <_ZN7TwoWire17beginTransmissionEh>

00002dce <_ZN7TwoWire15endTransmissionEh>:
    2dce:	0f 93       	push	r16
    2dd0:	06 2f       	mov	r16, r22
    2dd2:	21 e0       	ldi	r18, 0x01	; 1
    2dd4:	40 91 77 03 	lds	r20, 0x0377	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2dd8:	69 e7       	ldi	r22, 0x79	; 121
    2dda:	73 e0       	ldi	r23, 0x03	; 3
    2ddc:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZN7TwoWire9txAddressE>
    2de0:	0e 94 36 14 	call	0x286c	; 0x286c <twi_writeTo>
    2de4:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <_ZN7TwoWire13txBufferIndexE>
    2de8:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <_ZN7TwoWire14txBufferLengthE>
    2dec:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <_ZN7TwoWire12transmittingE>
    2df0:	0f 91       	pop	r16
    2df2:	08 95       	ret

00002df4 <_ZN7TwoWire11requestFromEhhmhh>:
    2df4:	4f 92       	push	r4
    2df6:	5f 92       	push	r5
    2df8:	6f 92       	push	r6
    2dfa:	7f 92       	push	r7
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	5c 01       	movw	r10, r24
    2e10:	f6 2e       	mov	r15, r22
    2e12:	d4 2f       	mov	r29, r20
    2e14:	28 01       	movw	r4, r16
    2e16:	39 01       	movw	r6, r18
    2e18:	ee 20       	and	r14, r14
    2e1a:	21 f1       	breq	.+72     	; 0x2e64 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2e1c:	0e 94 db 16 	call	0x2db6	; 0x2db6 <_ZN7TwoWire17beginTransmissionEh>
    2e20:	ce 2d       	mov	r28, r14
    2e22:	c4 30       	cpi	r28, 0x04	; 4
    2e24:	08 f0       	brcs	.+2      	; 0x2e28 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2e26:	c3 e0       	ldi	r28, 0x03	; 3
    2e28:	c1 50       	subi	r28, 0x01	; 1
    2e2a:	c0 f0       	brcs	.+48     	; 0x2e5c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2e2c:	28 e0       	ldi	r18, 0x08	; 8
    2e2e:	c2 9f       	mul	r28, r18
    2e30:	c0 01       	movw	r24, r0
    2e32:	11 24       	eor	r1, r1
    2e34:	a3 01       	movw	r20, r6
    2e36:	92 01       	movw	r18, r4
    2e38:	04 c0       	rjmp	.+8      	; 0x2e42 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2e3a:	56 95       	lsr	r21
    2e3c:	47 95       	ror	r20
    2e3e:	37 95       	ror	r19
    2e40:	27 95       	ror	r18
    2e42:	8a 95       	dec	r24
    2e44:	d2 f7       	brpl	.-12     	; 0x2e3a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2e46:	ca 01       	movw	r24, r20
    2e48:	b9 01       	movw	r22, r18
    2e4a:	d5 01       	movw	r26, r10
    2e4c:	ed 91       	ld	r30, X+
    2e4e:	fc 91       	ld	r31, X
    2e50:	01 90       	ld	r0, Z+
    2e52:	f0 81       	ld	r31, Z
    2e54:	e0 2d       	mov	r30, r0
    2e56:	c5 01       	movw	r24, r10
    2e58:	09 95       	icall
    2e5a:	e6 cf       	rjmp	.-52     	; 0x2e28 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	c5 01       	movw	r24, r10
    2e60:	0e 94 e7 16 	call	0x2dce	; 0x2dce <_ZN7TwoWire15endTransmissionEh>
    2e64:	4d 2f       	mov	r20, r29
    2e66:	d1 32       	cpi	r29, 0x21	; 33
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	2c 2d       	mov	r18, r12
    2e6e:	6c e9       	ldi	r22, 0x9C	; 156
    2e70:	73 e0       	ldi	r23, 0x03	; 3
    2e72:	8f 2d       	mov	r24, r15
    2e74:	0e 94 ee 13 	call	0x27dc	; 0x27dc <twi_readFrom>
    2e78:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13rxBufferIndexE>
    2e7c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZN7TwoWire14rxBufferLengthE>
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	cf 90       	pop	r12
    2e8e:	bf 90       	pop	r11
    2e90:	af 90       	pop	r10
    2e92:	7f 90       	pop	r7
    2e94:	6f 90       	pop	r6
    2e96:	5f 90       	pop	r5
    2e98:	4f 90       	pop	r4
    2e9a:	08 95       	ret

00002e9c <_ZN7TwoWire11requestFromEhhh>:
    2e9c:	cf 92       	push	r12
    2e9e:	ef 92       	push	r14
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	c2 2e       	mov	r12, r18
    2ea6:	e1 2c       	mov	r14, r1
    2ea8:	00 e0       	ldi	r16, 0x00	; 0
    2eaa:	10 e0       	ldi	r17, 0x00	; 0
    2eac:	98 01       	movw	r18, r16
    2eae:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <_ZN7TwoWire11requestFromEhhmhh>
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ef 90       	pop	r14
    2eb8:	cf 90       	pop	r12
    2eba:	08 95       	ret

00002ebc <_ZN7TwoWire11requestFromEii>:
    2ebc:	21 e0       	ldi	r18, 0x01	; 1
    2ebe:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <_ZN7TwoWire11requestFromEhhh>

00002ec2 <_ZN7TwoWire15endTransmissionEv>:
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <_ZN7TwoWire15endTransmissionEh>

00002ec8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2ec8:	86 e6       	ldi	r24, 0x66	; 102
    2eca:	93 e0       	ldi	r25, 0x03	; 3
    2ecc:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <_ZN7TwoWireC1Ev>

00002ed0 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    2ed0:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_mockData>
    2ed4:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <_mockData+0x1>
    2ed8:	0e 94 60 21 	call	0x42c0	; 0x42c0 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    2edc:	6e e6       	ldi	r22, 0x6E	; 110
    2ede:	76 e0       	ldi	r23, 0x06	; 6
    2ee0:	8e eb       	ldi	r24, 0xBE	; 190
    2ee2:	93 e0       	ldi	r25, 0x03	; 3
    2ee4:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>

00002ee8 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    2eee:	69 e6       	ldi	r22, 0x69	; 105
    2ef0:	76 e0       	ldi	r23, 0x06	; 6
    2ef2:	8e eb       	ldi	r24, 0xBE	; 190
    2ef4:	93 e0       	ldi	r25, 0x03	; 3
    2ef6:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    2efa:	84 e1       	ldi	r24, 0x14	; 20
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
    2f02:	fc 01       	movw	r30, r24
    2f04:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <_mockData+0x1>
    2f08:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	92 83       	std	Z+2, r25	; 0x02
    2f12:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    2f14:	8a e0       	ldi	r24, 0x0A	; 10
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	96 83       	std	Z+6, r25	; 0x06
    2f1a:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    2f1c:	84 e6       	ldi	r24, 0x64	; 100
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	94 83       	std	Z+4, r25	; 0x04
    2f22:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    2f24:	83 e3       	ldi	r24, 0x33	; 51
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	90 87       	std	Z+8, r25	; 0x08
    2f2a:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	94 87       	std	Z+12, r25	; 0x0c
    2f36:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    2f38:	84 e1       	ldi	r24, 0x14	; 20
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	90 8b       	std	Z+16, r25	; 0x10
    2f3e:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    2f40:	88 ec       	ldi	r24, 0xC8	; 200
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	96 87       	std	Z+14, r25	; 0x0e
    2f46:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    2f48:	84 e3       	ldi	r24, 0x34	; 52
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	92 8b       	std	Z+18, r25	; 0x12
    2f4e:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    2f50:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    2f52:	62 e4       	ldi	r22, 0x42	; 66
    2f54:	76 e0       	ldi	r23, 0x06	; 6
    2f56:	8e eb       	ldi	r24, 0xBE	; 190
    2f58:	93 e0       	ldi	r25, 0x03	; 3
    2f5a:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    2f5e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_mockData>
    2f62:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <_mockData+0x1>
    2f66:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    2f6a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_mockData>
    2f6e:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <_mockData+0x1>
    2f72:	0a 96       	adiw	r24, 0x0a	; 10
    2f74:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    2f78:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_mockData>
    2f7c:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <_mockData+0x1>
    2f80:	99 83       	std	Y+1, r25	; 0x01
    2f82:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	08 95       	ret

00002f8e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2f8e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2f90:	91 8d       	ldd	r25, Z+25	; 0x19
    2f92:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f94:	89 2f       	mov	r24, r25
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	80 5c       	subi	r24, 0xC0	; 192
    2f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9c:	82 1b       	sub	r24, r18
    2f9e:	91 09       	sbc	r25, r1
}
    2fa0:	8f 73       	andi	r24, 0x3F	; 63
    2fa2:	99 27       	eor	r25, r25
    2fa4:	08 95       	ret

00002fa6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2fa6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2fa8:	91 8d       	ldd	r25, Z+25	; 0x19
    2faa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fac:	98 17       	cp	r25, r24
    2fae:	31 f0       	breq	.+12     	; 0x2fbc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2fb0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fb2:	e8 0f       	add	r30, r24
    2fb4:	f1 1d       	adc	r31, r1
    2fb6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2fbc:	8f ef       	ldi	r24, 0xFF	; 255
    2fbe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2fc0:	08 95       	ret

00002fc2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2fc2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2fc4:	91 8d       	ldd	r25, Z+25	; 0x19
    2fc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fc8:	98 17       	cp	r25, r24
    2fca:	61 f0       	breq	.+24     	; 0x2fe4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2fcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fce:	df 01       	movw	r26, r30
    2fd0:	a8 0f       	add	r26, r24
    2fd2:	b1 1d       	adc	r27, r1
    2fd4:	5d 96       	adiw	r26, 0x1d	; 29
    2fd6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2fd8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fda:	9f 5f       	subi	r25, 0xFF	; 255
    2fdc:	9f 73       	andi	r25, 0x3F	; 63
    2fde:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2fe8:	08 95       	ret

00002fea <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2fea:	8a e4       	ldi	r24, 0x4A	; 74
    2fec:	99 e1       	ldi	r25, 0x19	; 25
    2fee:	89 2b       	or	r24, r25
    2ff0:	49 f0       	breq	.+18     	; 0x3004 <_Z14serialEventRunv+0x1a>
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	89 2b       	or	r24, r25
    2ff8:	29 f0       	breq	.+10     	; 0x3004 <_Z14serialEventRunv+0x1a>
    2ffa:	0e 94 4a 19 	call	0x3294	; 0x3294 <_Z17Serial0_availablev>
    2ffe:	81 11       	cpse	r24, r1
    3000:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3004:	08 95       	ret

00003006 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3006:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3008:	84 8d       	ldd	r24, Z+28	; 0x1c
    300a:	df 01       	movw	r26, r30
    300c:	a8 0f       	add	r26, r24
    300e:	b1 1d       	adc	r27, r1
    3010:	a3 5a       	subi	r26, 0xA3	; 163
    3012:	bf 4f       	sbci	r27, 0xFF	; 255
    3014:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3016:	84 8d       	ldd	r24, Z+28	; 0x1c
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	8f 73       	andi	r24, 0x3F	; 63
    301e:	99 27       	eor	r25, r25
    3020:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3022:	a6 89       	ldd	r26, Z+22	; 0x16
    3024:	b7 89       	ldd	r27, Z+23	; 0x17
    3026:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3028:	a0 89       	ldd	r26, Z+16	; 0x10
    302a:	b1 89       	ldd	r27, Z+17	; 0x11
    302c:	8c 91       	ld	r24, X
    302e:	80 64       	ori	r24, 0x40	; 64
    3030:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3032:	93 8d       	ldd	r25, Z+27	; 0x1b
    3034:	84 8d       	ldd	r24, Z+28	; 0x1c
    3036:	98 13       	cpse	r25, r24
    3038:	06 c0       	rjmp	.+12     	; 0x3046 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    303a:	02 88       	ldd	r0, Z+18	; 0x12
    303c:	f3 89       	ldd	r31, Z+19	; 0x13
    303e:	e0 2d       	mov	r30, r0
    3040:	80 81       	ld	r24, Z
    3042:	8f 7d       	andi	r24, 0xDF	; 223
    3044:	80 83       	st	Z, r24
    3046:	08 95       	ret

00003048 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3048:	ef 92       	push	r14
    304a:	ff 92       	push	r15
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    3054:	ec 01       	movw	r28, r24
  _written = true;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    305a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    305c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    305e:	98 13       	cpse	r25, r24
    3060:	05 c0       	rjmp	.+10     	; 0x306c <_ZN14HardwareSerial5writeEh+0x24>
    3062:	e8 89       	ldd	r30, Y+16	; 0x10
    3064:	f9 89       	ldd	r31, Y+17	; 0x11
    3066:	80 81       	ld	r24, Z
    3068:	85 fd       	sbrc	r24, 5
    306a:	24 c0       	rjmp	.+72     	; 0x30b4 <_ZN14HardwareSerial5writeEh+0x6c>
    306c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    306e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3070:	10 e0       	ldi	r17, 0x00	; 0
    3072:	0f 5f       	subi	r16, 0xFF	; 255
    3074:	1f 4f       	sbci	r17, 0xFF	; 255
    3076:	0f 73       	andi	r16, 0x3F	; 63
    3078:	11 27       	eor	r17, r17
    307a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    307c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    307e:	e8 12       	cpse	r14, r24
    3080:	0c c0       	rjmp	.+24     	; 0x309a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	07 fc       	sbrc	r0, 7
    3086:	fa cf       	rjmp	.-12     	; 0x307c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3088:	e8 89       	ldd	r30, Y+16	; 0x10
    308a:	f9 89       	ldd	r31, Y+17	; 0x11
    308c:	80 81       	ld	r24, Z
    308e:	85 ff       	sbrs	r24, 5
    3090:	f5 cf       	rjmp	.-22     	; 0x307c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3092:	ce 01       	movw	r24, r28
    3094:	0e 94 03 18 	call	0x3006	; 0x3006 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3098:	f1 cf       	rjmp	.-30     	; 0x307c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    309a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    309c:	fe 01       	movw	r30, r28
    309e:	e8 0f       	add	r30, r24
    30a0:	f1 1d       	adc	r31, r1
    30a2:	e3 5a       	subi	r30, 0xA3	; 163
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    30a8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    30aa:	ea 89       	ldd	r30, Y+18	; 0x12
    30ac:	fb 89       	ldd	r31, Y+19	; 0x13
    30ae:	80 81       	ld	r24, Z
    30b0:	80 62       	ori	r24, 0x20	; 32
    30b2:	07 c0       	rjmp	.+14     	; 0x30c2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    30b4:	ee 89       	ldd	r30, Y+22	; 0x16
    30b6:	ff 89       	ldd	r31, Y+23	; 0x17
    30b8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    30ba:	e8 89       	ldd	r30, Y+16	; 0x10
    30bc:	f9 89       	ldd	r31, Y+17	; 0x11
    30be:	80 81       	ld	r24, Z
    30c0:	80 64       	ori	r24, 0x40	; 64
    30c2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	08 95       	ret

000030d6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    30dc:	88 8d       	ldd	r24, Y+24	; 0x18
    30de:	88 23       	and	r24, r24
    30e0:	c9 f0       	breq	.+50     	; 0x3114 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    30e2:	ea 89       	ldd	r30, Y+18	; 0x12
    30e4:	fb 89       	ldd	r31, Y+19	; 0x13
    30e6:	80 81       	ld	r24, Z
    30e8:	85 fd       	sbrc	r24, 5
    30ea:	05 c0       	rjmp	.+10     	; 0x30f6 <_ZN14HardwareSerial5flushEv+0x20>
    30ec:	a8 89       	ldd	r26, Y+16	; 0x10
    30ee:	b9 89       	ldd	r27, Y+17	; 0x11
    30f0:	8c 91       	ld	r24, X
    30f2:	86 fd       	sbrc	r24, 6
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	07 fc       	sbrc	r0, 7
    30fa:	f5 cf       	rjmp	.-22     	; 0x30e6 <_ZN14HardwareSerial5flushEv+0x10>
    30fc:	80 81       	ld	r24, Z
    30fe:	85 ff       	sbrs	r24, 5
    3100:	f2 cf       	rjmp	.-28     	; 0x30e6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3102:	a8 89       	ldd	r26, Y+16	; 0x10
    3104:	b9 89       	ldd	r27, Y+17	; 0x11
    3106:	8c 91       	ld	r24, X
    3108:	85 ff       	sbrs	r24, 5
    310a:	ed cf       	rjmp	.-38     	; 0x30e6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    310c:	ce 01       	movw	r24, r28
    310e:	0e 94 03 18 	call	0x3006	; 0x3006 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3112:	e7 cf       	rjmp	.-50     	; 0x30e2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	08 95       	ret

0000311a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    311a:	cf 92       	push	r12
    311c:	df 92       	push	r13
    311e:	ef 92       	push	r14
    3120:	ff 92       	push	r15
    3122:	1f 93       	push	r17
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	ec 01       	movw	r28, r24
    312a:	6a 01       	movw	r12, r20
    312c:	7b 01       	movw	r14, r22
    312e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3130:	e8 89       	ldd	r30, Y+16	; 0x10
    3132:	f9 89       	ldd	r31, Y+17	; 0x11
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3138:	41 15       	cp	r20, r1
    313a:	51 4e       	sbci	r21, 0xE1	; 225
    313c:	61 05       	cpc	r22, r1
    313e:	71 05       	cpc	r23, r1
    3140:	b1 f0       	breq	.+44     	; 0x316e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	79 e0       	ldi	r23, 0x09	; 9
    3146:	8d e3       	ldi	r24, 0x3D	; 61
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	a7 01       	movw	r20, r14
    314c:	96 01       	movw	r18, r12
    314e:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    3152:	da 01       	movw	r26, r20
    3154:	c9 01       	movw	r24, r18
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	a1 09       	sbc	r26, r1
    315a:	b1 09       	sbc	r27, r1
    315c:	b6 95       	lsr	r27
    315e:	a7 95       	ror	r26
    3160:	97 95       	ror	r25
    3162:	87 95       	ror	r24
    3164:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3166:	21 15       	cp	r18, r1
    3168:	80 e1       	ldi	r24, 0x10	; 16
    316a:	38 07       	cpc	r19, r24
    316c:	a8 f0       	brcs	.+42     	; 0x3198 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    316e:	e8 89       	ldd	r30, Y+16	; 0x10
    3170:	f9 89       	ldd	r31, Y+17	; 0x11
    3172:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3174:	60 e8       	ldi	r22, 0x80	; 128
    3176:	74 e8       	ldi	r23, 0x84	; 132
    3178:	8e e1       	ldi	r24, 0x1E	; 30
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	a7 01       	movw	r20, r14
    317e:	96 01       	movw	r18, r12
    3180:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    3184:	da 01       	movw	r26, r20
    3186:	c9 01       	movw	r24, r18
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	a1 09       	sbc	r26, r1
    318c:	b1 09       	sbc	r27, r1
    318e:	b6 95       	lsr	r27
    3190:	a7 95       	ror	r26
    3192:	97 95       	ror	r25
    3194:	87 95       	ror	r24
    3196:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3198:	ec 85       	ldd	r30, Y+12	; 0x0c
    319a:	fd 85       	ldd	r31, Y+13	; 0x0d
    319c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    319e:	ee 85       	ldd	r30, Y+14	; 0x0e
    31a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    31a2:	20 83       	st	Z, r18

  _written = false;
    31a4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    31a6:	ec 89       	ldd	r30, Y+20	; 0x14
    31a8:	fd 89       	ldd	r31, Y+21	; 0x15
    31aa:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    31ac:	ea 89       	ldd	r30, Y+18	; 0x12
    31ae:	fb 89       	ldd	r31, Y+19	; 0x13
    31b0:	80 81       	ld	r24, Z
    31b2:	80 61       	ori	r24, 0x10	; 16
    31b4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    31b6:	ea 89       	ldd	r30, Y+18	; 0x12
    31b8:	fb 89       	ldd	r31, Y+19	; 0x13
    31ba:	80 81       	ld	r24, Z
    31bc:	88 60       	ori	r24, 0x08	; 8
    31be:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    31c0:	ea 89       	ldd	r30, Y+18	; 0x12
    31c2:	fb 89       	ldd	r31, Y+19	; 0x13
    31c4:	80 81       	ld	r24, Z
    31c6:	80 68       	ori	r24, 0x80	; 128
    31c8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    31ca:	ea 89       	ldd	r30, Y+18	; 0x12
    31cc:	fb 89       	ldd	r31, Y+19	; 0x13
    31ce:	80 81       	ld	r24, Z
    31d0:	8f 7d       	andi	r24, 0xDF	; 223
    31d2:	80 83       	st	Z, r24
}
    31d4:	df 91       	pop	r29
    31d6:	cf 91       	pop	r28
    31d8:	1f 91       	pop	r17
    31da:	ff 90       	pop	r15
    31dc:	ef 90       	pop	r14
    31de:	df 90       	pop	r13
    31e0:	cf 90       	pop	r12
    31e2:	08 95       	ret

000031e4 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    31e4:	1f 92       	push	r1
    31e6:	0f 92       	push	r0
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	0f 92       	push	r0
    31ec:	11 24       	eor	r1, r1
    31ee:	2f 93       	push	r18
    31f0:	8f 93       	push	r24
    31f2:	9f 93       	push	r25
    31f4:	ef 93       	push	r30
    31f6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    31f8:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <Serial+0x10>
    31fc:	f0 91 cf 03 	lds	r31, 0x03CF	; 0x8003cf <Serial+0x11>
    3200:	80 81       	ld	r24, Z
    3202:	e0 91 d4 03 	lds	r30, 0x03D4	; 0x8003d4 <Serial+0x16>
    3206:	f0 91 d5 03 	lds	r31, 0x03D5	; 0x8003d5 <Serial+0x17>
    320a:	82 fd       	sbrc	r24, 2
    320c:	12 c0       	rjmp	.+36     	; 0x3232 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    320e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3210:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Serial+0x19>
    3214:	8f 5f       	subi	r24, 0xFF	; 255
    3216:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3218:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <Serial+0x1a>
    321c:	82 17       	cp	r24, r18
    321e:	51 f0       	breq	.+20     	; 0x3234 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3220:	e0 91 d7 03 	lds	r30, 0x03D7	; 0x8003d7 <Serial+0x19>
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	e2 54       	subi	r30, 0x42	; 66
    3228:	fc 4f       	sbci	r31, 0xFC	; 252
    322a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    322c:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <Serial+0x19>
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3232:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3234:	ff 91       	pop	r31
    3236:	ef 91       	pop	r30
    3238:	9f 91       	pop	r25
    323a:	8f 91       	pop	r24
    323c:	2f 91       	pop	r18
    323e:	0f 90       	pop	r0
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	0f 90       	pop	r0
    3244:	1f 90       	pop	r1
    3246:	18 95       	reti

00003248 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3248:	1f 92       	push	r1
    324a:	0f 92       	push	r0
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	0f 92       	push	r0
    3250:	11 24       	eor	r1, r1
    3252:	2f 93       	push	r18
    3254:	3f 93       	push	r19
    3256:	4f 93       	push	r20
    3258:	5f 93       	push	r21
    325a:	6f 93       	push	r22
    325c:	7f 93       	push	r23
    325e:	8f 93       	push	r24
    3260:	9f 93       	push	r25
    3262:	af 93       	push	r26
    3264:	bf 93       	push	r27
    3266:	ef 93       	push	r30
    3268:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    326a:	8e eb       	ldi	r24, 0xBE	; 190
    326c:	93 e0       	ldi	r25, 0x03	; 3
    326e:	0e 94 03 18 	call	0x3006	; 0x3006 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3272:	ff 91       	pop	r31
    3274:	ef 91       	pop	r30
    3276:	bf 91       	pop	r27
    3278:	af 91       	pop	r26
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	7f 91       	pop	r23
    3280:	6f 91       	pop	r22
    3282:	5f 91       	pop	r21
    3284:	4f 91       	pop	r20
    3286:	3f 91       	pop	r19
    3288:	2f 91       	pop	r18
    328a:	0f 90       	pop	r0
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	0f 90       	pop	r0
    3290:	1f 90       	pop	r1
    3292:	18 95       	reti

00003294 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3294:	8e eb       	ldi	r24, 0xBE	; 190
    3296:	93 e0       	ldi	r25, 0x03	; 3
    3298:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <_ZN14HardwareSerial9availableEv>
    329c:	21 e0       	ldi	r18, 0x01	; 1
    329e:	89 2b       	or	r24, r25
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <_Z17Serial0_availablev+0x10>
    32a2:	20 e0       	ldi	r18, 0x00	; 0
}
    32a4:	82 2f       	mov	r24, r18
    32a6:	08 95       	ret

000032a8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    32a8:	ee eb       	ldi	r30, 0xBE	; 190
    32aa:	f3 e0       	ldi	r31, 0x03	; 3
    32ac:	13 82       	std	Z+3, r1	; 0x03
    32ae:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    32b0:	88 ee       	ldi	r24, 0xE8	; 232
    32b2:	93 e0       	ldi	r25, 0x03	; 3
    32b4:	a0 e0       	ldi	r26, 0x00	; 0
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	84 83       	std	Z+4, r24	; 0x04
    32ba:	95 83       	std	Z+5, r25	; 0x05
    32bc:	a6 83       	std	Z+6, r26	; 0x06
    32be:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    32c0:	8e e8       	ldi	r24, 0x8E	; 142
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	91 83       	std	Z+1, r25	; 0x01
    32c6:	80 83       	st	Z, r24
    32c8:	85 ec       	ldi	r24, 0xC5	; 197
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	95 87       	std	Z+13, r25	; 0x0d
    32ce:	84 87       	std	Z+12, r24	; 0x0c
    32d0:	84 ec       	ldi	r24, 0xC4	; 196
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	97 87       	std	Z+15, r25	; 0x0f
    32d6:	86 87       	std	Z+14, r24	; 0x0e
    32d8:	80 ec       	ldi	r24, 0xC0	; 192
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	91 8b       	std	Z+17, r25	; 0x11
    32de:	80 8b       	std	Z+16, r24	; 0x10
    32e0:	81 ec       	ldi	r24, 0xC1	; 193
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	93 8b       	std	Z+19, r25	; 0x13
    32e6:	82 8b       	std	Z+18, r24	; 0x12
    32e8:	82 ec       	ldi	r24, 0xC2	; 194
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	95 8b       	std	Z+21, r25	; 0x15
    32ee:	84 8b       	std	Z+20, r24	; 0x14
    32f0:	86 ec       	ldi	r24, 0xC6	; 198
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	97 8b       	std	Z+23, r25	; 0x17
    32f6:	86 8b       	std	Z+22, r24	; 0x16
    32f8:	11 8e       	std	Z+25, r1	; 0x19
    32fa:	12 8e       	std	Z+26, r1	; 0x1a
    32fc:	13 8e       	std	Z+27, r1	; 0x1b
    32fe:	14 8e       	std	Z+28, r1	; 0x1c
    3300:	08 95       	ret

00003302 <initVariant>:
    3302:	08 95       	ret

00003304 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3304:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <init>

	initVariant();
    3308:	0e 94 81 19 	call	0x3302	; 0x3302 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    330c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3310:	c5 ef       	ldi	r28, 0xF5	; 245
    3312:	d7 e1       	ldi	r29, 0x17	; 23
#endif
	
	setup();
    
	for (;;) {
		loop();
    3314:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <loop>
		if (serialEventRun) serialEventRun();
    3318:	20 97       	sbiw	r28, 0x00	; 0
    331a:	e1 f3       	breq	.-8      	; 0x3314 <main+0x10>
    331c:	0e 94 f5 17 	call	0x2fea	; 0x2fea <_Z14serialEventRunv>
    3320:	f9 cf       	rjmp	.-14     	; 0x3314 <main+0x10>

00003322 <_Znwj>:
    3322:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <malloc>

00003326 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    3326:	cf 92       	push	r12
    3328:	df 92       	push	r13
    332a:	ef 92       	push	r14
    332c:	ff 92       	push	r15
    332e:	0f 93       	push	r16
    3330:	1f 93       	push	r17
    3332:	cf 93       	push	r28
    3334:	df 93       	push	r29
    3336:	6c 01       	movw	r12, r24
    3338:	7a 01       	movw	r14, r20
    333a:	8b 01       	movw	r16, r22
    333c:	c0 e0       	ldi	r28, 0x00	; 0
    333e:	d0 e0       	ldi	r29, 0x00	; 0
    3340:	ce 15       	cp	r28, r14
    3342:	df 05       	cpc	r29, r15
    3344:	81 f0       	breq	.+32     	; 0x3366 <_ZN5Print5writeEPKhj+0x40>
    3346:	d8 01       	movw	r26, r16
    3348:	6d 91       	ld	r22, X+
    334a:	8d 01       	movw	r16, r26
    334c:	d6 01       	movw	r26, r12
    334e:	ed 91       	ld	r30, X+
    3350:	fc 91       	ld	r31, X
    3352:	01 90       	ld	r0, Z+
    3354:	f0 81       	ld	r31, Z
    3356:	e0 2d       	mov	r30, r0
    3358:	c6 01       	movw	r24, r12
    335a:	09 95       	icall
    335c:	89 2b       	or	r24, r25
    335e:	11 f0       	breq	.+4      	; 0x3364 <_ZN5Print5writeEPKhj+0x3e>
    3360:	21 96       	adiw	r28, 0x01	; 1
    3362:	ee cf       	rjmp	.-36     	; 0x3340 <_ZN5Print5writeEPKhj+0x1a>
    3364:	7e 01       	movw	r14, r28
    3366:	c7 01       	movw	r24, r14
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	ff 90       	pop	r15
    3372:	ef 90       	pop	r14
    3374:	df 90       	pop	r13
    3376:	cf 90       	pop	r12
    3378:	08 95       	ret

0000337a <_ZN5Print5writeEPKc>:
    337a:	61 15       	cp	r22, r1
    337c:	71 05       	cpc	r23, r1
    337e:	79 f0       	breq	.+30     	; 0x339e <_ZN5Print5writeEPKc+0x24>
    3380:	fb 01       	movw	r30, r22
    3382:	01 90       	ld	r0, Z+
    3384:	00 20       	and	r0, r0
    3386:	e9 f7       	brne	.-6      	; 0x3382 <_ZN5Print5writeEPKc+0x8>
    3388:	31 97       	sbiw	r30, 0x01	; 1
    338a:	af 01       	movw	r20, r30
    338c:	46 1b       	sub	r20, r22
    338e:	57 0b       	sbc	r21, r23
    3390:	dc 01       	movw	r26, r24
    3392:	ed 91       	ld	r30, X+
    3394:	fc 91       	ld	r31, X
    3396:	02 80       	ldd	r0, Z+2	; 0x02
    3398:	f3 81       	ldd	r31, Z+3	; 0x03
    339a:	e0 2d       	mov	r30, r0
    339c:	09 94       	ijmp
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	08 95       	ret

000033a4 <_ZN5Print5printEPK19__FlashStringHelper>:
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	8c 01       	movw	r16, r24
    33b2:	7b 01       	movw	r14, r22
    33b4:	c0 e0       	ldi	r28, 0x00	; 0
    33b6:	d0 e0       	ldi	r29, 0x00	; 0
    33b8:	f7 01       	movw	r30, r14
    33ba:	ec 0f       	add	r30, r28
    33bc:	fd 1f       	adc	r31, r29
    33be:	64 91       	lpm	r22, Z
    33c0:	66 23       	and	r22, r22
    33c2:	61 f0       	breq	.+24     	; 0x33dc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    33c4:	d8 01       	movw	r26, r16
    33c6:	ed 91       	ld	r30, X+
    33c8:	fc 91       	ld	r31, X
    33ca:	01 90       	ld	r0, Z+
    33cc:	f0 81       	ld	r31, Z
    33ce:	e0 2d       	mov	r30, r0
    33d0:	c8 01       	movw	r24, r16
    33d2:	09 95       	icall
    33d4:	89 2b       	or	r24, r25
    33d6:	11 f0       	breq	.+4      	; 0x33dc <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    33d8:	21 96       	adiw	r28, 0x01	; 1
    33da:	ee cf       	rjmp	.-36     	; 0x33b8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    33dc:	ce 01       	movw	r24, r28
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	08 95       	ret

000033ec <_ZN5Print5printERK6String>:
    33ec:	db 01       	movw	r26, r22
    33ee:	14 96       	adiw	r26, 0x04	; 4
    33f0:	4d 91       	ld	r20, X+
    33f2:	5c 91       	ld	r21, X
    33f4:	15 97       	sbiw	r26, 0x05	; 5
    33f6:	6d 91       	ld	r22, X+
    33f8:	7c 91       	ld	r23, X
    33fa:	dc 01       	movw	r26, r24
    33fc:	ed 91       	ld	r30, X+
    33fe:	fc 91       	ld	r31, X
    3400:	02 80       	ldd	r0, Z+2	; 0x02
    3402:	f3 81       	ldd	r31, Z+3	; 0x03
    3404:	e0 2d       	mov	r30, r0
    3406:	09 94       	ijmp

00003408 <_ZN5Print5printEPKc>:
    3408:	0c 94 bd 19 	jmp	0x337a	; 0x337a <_ZN5Print5writeEPKc>

0000340c <_ZN5Print5printEc>:
    340c:	dc 01       	movw	r26, r24
    340e:	ed 91       	ld	r30, X+
    3410:	fc 91       	ld	r31, X
    3412:	01 90       	ld	r0, Z+
    3414:	f0 81       	ld	r31, Z
    3416:	e0 2d       	mov	r30, r0
    3418:	09 94       	ijmp

0000341a <_ZN5Print7printlnEv>:
    341a:	6a e9       	ldi	r22, 0x9A	; 154
    341c:	71 e0       	ldi	r23, 0x01	; 1
    341e:	0c 94 bd 19 	jmp	0x337a	; 0x337a <_ZN5Print5writeEPKc>

00003422 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	ec 01       	movw	r28, r24
    342c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <_ZN5Print5printEPK19__FlashStringHelper>
    3430:	8c 01       	movw	r16, r24
    3432:	ce 01       	movw	r24, r28
    3434:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
    3438:	80 0f       	add	r24, r16
    343a:	91 1f       	adc	r25, r17
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	1f 91       	pop	r17
    3442:	0f 91       	pop	r16
    3444:	08 95       	ret

00003446 <_ZN5Print7printlnEPKc>:
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	ec 01       	movw	r28, r24
    3450:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN5Print5writeEPKc>
    3454:	8c 01       	movw	r16, r24
    3456:	ce 01       	movw	r24, r28
    3458:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
    345c:	80 0f       	add	r24, r16
    345e:	91 1f       	adc	r25, r17
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	08 95       	ret

0000346a <_ZN5Print7printlnEc>:
    346a:	0f 93       	push	r16
    346c:	1f 93       	push	r17
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	ec 01       	movw	r28, r24
    3474:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZN5Print5printEc>
    3478:	8c 01       	movw	r16, r24
    347a:	ce 01       	movw	r24, r28
    347c:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
    3480:	80 0f       	add	r24, r16
    3482:	91 1f       	adc	r25, r17
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	08 95       	ret

0000348e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    348e:	8f 92       	push	r8
    3490:	9f 92       	push	r9
    3492:	af 92       	push	r10
    3494:	bf 92       	push	r11
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	a1 97       	sbiw	r28, 0x21	; 33
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	7c 01       	movw	r14, r24
    34b4:	fa 01       	movw	r30, r20
    34b6:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    34b8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    34ba:	22 30       	cpi	r18, 0x02	; 2
    34bc:	08 f4       	brcc	.+2      	; 0x34c0 <_ZN5Print11printNumberEmh+0x32>
    34be:	2a e0       	ldi	r18, 0x0A	; 10
    34c0:	8e 01       	movw	r16, r28
    34c2:	0f 5d       	subi	r16, 0xDF	; 223
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    34c6:	82 2e       	mov	r8, r18
    34c8:	91 2c       	mov	r9, r1
    34ca:	a1 2c       	mov	r10, r1
    34cc:	b1 2c       	mov	r11, r1
    34ce:	bf 01       	movw	r22, r30
    34d0:	a5 01       	movw	r20, r10
    34d2:	94 01       	movw	r18, r8
    34d4:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    n /= base;
    34d8:	f9 01       	movw	r30, r18
    34da:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    34dc:	01 50       	subi	r16, 0x01	; 1
    34de:	11 09       	sbc	r17, r1
    34e0:	6a 30       	cpi	r22, 0x0A	; 10
    34e2:	10 f4       	brcc	.+4      	; 0x34e8 <_ZN5Print11printNumberEmh+0x5a>
    34e4:	60 5d       	subi	r22, 0xD0	; 208
    34e6:	01 c0       	rjmp	.+2      	; 0x34ea <_ZN5Print11printNumberEmh+0x5c>
    34e8:	69 5c       	subi	r22, 0xC9	; 201
    34ea:	d8 01       	movw	r26, r16
    34ec:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    34ee:	23 2b       	or	r18, r19
    34f0:	24 2b       	or	r18, r20
    34f2:	25 2b       	or	r18, r21
    34f4:	61 f7       	brne	.-40     	; 0x34ce <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    34f6:	b8 01       	movw	r22, r16
    34f8:	c7 01       	movw	r24, r14
    34fa:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN5Print5writeEPKc>
}
    34fe:	a1 96       	adiw	r28, 0x21	; 33
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    3512:	ff 90       	pop	r15
    3514:	ef 90       	pop	r14
    3516:	bf 90       	pop	r11
    3518:	af 90       	pop	r10
    351a:	9f 90       	pop	r9
    351c:	8f 90       	pop	r8
    351e:	08 95       	ret

00003520 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    3520:	21 15       	cp	r18, r1
    3522:	31 05       	cpc	r19, r1
    3524:	41 f4       	brne	.+16     	; 0x3536 <_ZN5Print5printEmi+0x16>
    3526:	dc 01       	movw	r26, r24
    3528:	ed 91       	ld	r30, X+
    352a:	fc 91       	ld	r31, X
    352c:	01 90       	ld	r0, Z+
    352e:	f0 81       	ld	r31, Z
    3530:	e0 2d       	mov	r30, r0
    3532:	64 2f       	mov	r22, r20
    3534:	09 94       	ijmp
  else return printNumber(n, base);
    3536:	0c 94 47 1a 	jmp	0x348e	; 0x348e <_ZN5Print11printNumberEmh>

0000353a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    353a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    353c:	46 2f       	mov	r20, r22
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	70 e0       	ldi	r23, 0x00	; 0
    3544:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <_ZN5Print5printEmi>

00003548 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3548:	0f 93       	push	r16
    354a:	1f 93       	push	r17
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3552:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN5Print5printEhi>
    3556:	8c 01       	movw	r16, r24
  n += println();
    3558:	ce 01       	movw	r24, r28
    355a:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
  return n;
}
    355e:	80 0f       	add	r24, r16
    3560:	91 1f       	adc	r25, r17
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    356c:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    356e:	ab 01       	movw	r20, r22
    3570:	60 e0       	ldi	r22, 0x00	; 0
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <_ZN5Print5printEmi>

00003578 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    3578:	0f 93       	push	r16
    357a:	1f 93       	push	r17
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
    3580:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3582:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print5printEji>
    3586:	8c 01       	movw	r16, r24
  n += println();
    3588:	ce 01       	movw	r24, r28
    358a:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
  return n;
}
    358e:	80 0f       	add	r24, r16
    3590:	91 1f       	adc	r25, r17
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    359a:	08 95       	ret

0000359c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    35a6:	0e 94 90 1a 	call	0x3520	; 0x3520 <_ZN5Print5printEmi>
    35aa:	8c 01       	movw	r16, r24
  n += println();
    35ac:	ce 01       	movw	r24, r28
    35ae:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
  return n;
}
    35b2:	80 0f       	add	r24, r16
    35b4:	91 1f       	adc	r25, r17
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
  if (base == 0) {
    35d0:	21 15       	cp	r18, r1
    35d2:	31 05       	cpc	r19, r1
    35d4:	81 f4       	brne	.+32     	; 0x35f6 <_ZN5Print5printEli+0x36>
    return write(n);
    35d6:	dc 01       	movw	r26, r24
    35d8:	ed 91       	ld	r30, X+
    35da:	fc 91       	ld	r31, X
    35dc:	01 90       	ld	r0, Z+
    35de:	f0 81       	ld	r31, Z
    35e0:	e0 2d       	mov	r30, r0
    35e2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	ff 90       	pop	r15
    35ee:	ef 90       	pop	r14
    35f0:	df 90       	pop	r13
    35f2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    35f4:	09 94       	ijmp
  } else if (base == 10) {
    35f6:	2a 30       	cpi	r18, 0x0A	; 10
    35f8:	31 05       	cpc	r19, r1
    35fa:	01 f5       	brne	.+64     	; 0x363c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    35fc:	77 ff       	sbrs	r23, 7
    35fe:	1d c0       	rjmp	.+58     	; 0x363a <_ZN5Print5printEli+0x7a>
    3600:	6a 01       	movw	r12, r20
    3602:	7b 01       	movw	r14, r22
    3604:	ec 01       	movw	r28, r24
      int t = print('-');
    3606:	6d e2       	ldi	r22, 0x2D	; 45
    3608:	0e 94 06 1a 	call	0x340c	; 0x340c <_ZN5Print5printEc>
    360c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    360e:	44 27       	eor	r20, r20
    3610:	55 27       	eor	r21, r21
    3612:	ba 01       	movw	r22, r20
    3614:	4c 19       	sub	r20, r12
    3616:	5d 09       	sbc	r21, r13
    3618:	6e 09       	sbc	r22, r14
    361a:	7f 09       	sbc	r23, r15
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	ce 01       	movw	r24, r28
    3620:	0e 94 47 1a 	call	0x348e	; 0x348e <_ZN5Print11printNumberEmh>
    3624:	80 0f       	add	r24, r16
    3626:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	ef 90       	pop	r14
    3634:	df 90       	pop	r13
    3636:	cf 90       	pop	r12
    3638:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    363a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    363c:	df 91       	pop	r29
    363e:	cf 91       	pop	r28
    3640:	1f 91       	pop	r17
    3642:	0f 91       	pop	r16
    3644:	ff 90       	pop	r15
    3646:	ef 90       	pop	r14
    3648:	df 90       	pop	r13
    364a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    364c:	0c 94 47 1a 	jmp	0x348e	; 0x348e <_ZN5Print11printNumberEmh>

00003650 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3650:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3652:	ab 01       	movw	r20, r22
    3654:	77 0f       	add	r23, r23
    3656:	66 0b       	sbc	r22, r22
    3658:	77 0b       	sbc	r23, r23
    365a:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <_ZN5Print5printEli>

0000365e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3668:	0e 94 28 1b 	call	0x3650	; 0x3650 <_ZN5Print5printEii>
    366c:	8c 01       	movw	r16, r24
  n += println();
    366e:	ce 01       	movw	r24, r28
    3670:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
  return n;
}
    3674:	80 0f       	add	r24, r16
    3676:	91 1f       	adc	r25, r17
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	08 95       	ret

00003682 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    368c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEli>
    3690:	8c 01       	movw	r16, r24
  n += println();
    3692:	ce 01       	movw	r24, r28
    3694:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN5Print7printlnEv>
  return n;
}
    3698:	80 0f       	add	r24, r16
    369a:	91 1f       	adc	r25, r17
    369c:	df 91       	pop	r29
    369e:	cf 91       	pop	r28
    36a0:	1f 91       	pop	r17
    36a2:	0f 91       	pop	r16
    36a4:	08 95       	ret

000036a6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    36a6:	1f 92       	push	r1
    36a8:	0f 92       	push	r0
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	0f 92       	push	r0
    36ae:	11 24       	eor	r1, r1
    36b0:	2f 93       	push	r18
    36b2:	3f 93       	push	r19
    36b4:	8f 93       	push	r24
    36b6:	9f 93       	push	r25
    36b8:	af 93       	push	r26
    36ba:	bf 93       	push	r27
    36bc:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <timer0_millis>
    36c0:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <timer0_millis+0x1>
    36c4:	a0 91 5e 04 	lds	r26, 0x045E	; 0x80045e <timer0_millis+0x2>
    36c8:	b0 91 5f 04 	lds	r27, 0x045F	; 0x80045f <timer0_millis+0x3>
    36cc:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <timer0_fract>
    36d0:	23 e0       	ldi	r18, 0x03	; 3
    36d2:	23 0f       	add	r18, r19
    36d4:	2d 37       	cpi	r18, 0x7D	; 125
    36d6:	20 f4       	brcc	.+8      	; 0x36e0 <__vector_16+0x3a>
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	a1 1d       	adc	r26, r1
    36dc:	b1 1d       	adc	r27, r1
    36de:	05 c0       	rjmp	.+10     	; 0x36ea <__vector_16+0x44>
    36e0:	26 e8       	ldi	r18, 0x86	; 134
    36e2:	23 0f       	add	r18, r19
    36e4:	02 96       	adiw	r24, 0x02	; 2
    36e6:	a1 1d       	adc	r26, r1
    36e8:	b1 1d       	adc	r27, r1
    36ea:	20 93 5b 04 	sts	0x045B, r18	; 0x80045b <timer0_fract>
    36ee:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <timer0_millis>
    36f2:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <timer0_millis+0x1>
    36f6:	a0 93 5e 04 	sts	0x045E, r26	; 0x80045e <timer0_millis+0x2>
    36fa:	b0 93 5f 04 	sts	0x045F, r27	; 0x80045f <timer0_millis+0x3>
    36fe:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <timer0_overflow_count>
    3702:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <timer0_overflow_count+0x1>
    3706:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <timer0_overflow_count+0x2>
    370a:	b0 91 63 04 	lds	r27, 0x0463	; 0x800463 <timer0_overflow_count+0x3>
    370e:	01 96       	adiw	r24, 0x01	; 1
    3710:	a1 1d       	adc	r26, r1
    3712:	b1 1d       	adc	r27, r1
    3714:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <timer0_overflow_count>
    3718:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <timer0_overflow_count+0x1>
    371c:	a0 93 62 04 	sts	0x0462, r26	; 0x800462 <timer0_overflow_count+0x2>
    3720:	b0 93 63 04 	sts	0x0463, r27	; 0x800463 <timer0_overflow_count+0x3>
    3724:	bf 91       	pop	r27
    3726:	af 91       	pop	r26
    3728:	9f 91       	pop	r25
    372a:	8f 91       	pop	r24
    372c:	3f 91       	pop	r19
    372e:	2f 91       	pop	r18
    3730:	0f 90       	pop	r0
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	0f 90       	pop	r0
    3736:	1f 90       	pop	r1
    3738:	18 95       	reti

0000373a <micros>:
    373a:	3f b7       	in	r19, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <timer0_overflow_count>
    3742:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <timer0_overflow_count+0x1>
    3746:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <timer0_overflow_count+0x2>
    374a:	b0 91 63 04 	lds	r27, 0x0463	; 0x800463 <timer0_overflow_count+0x3>
    374e:	26 b5       	in	r18, 0x26	; 38
    3750:	a8 9b       	sbis	0x15, 0	; 21
    3752:	05 c0       	rjmp	.+10     	; 0x375e <micros+0x24>
    3754:	2f 3f       	cpi	r18, 0xFF	; 255
    3756:	19 f0       	breq	.+6      	; 0x375e <micros+0x24>
    3758:	01 96       	adiw	r24, 0x01	; 1
    375a:	a1 1d       	adc	r26, r1
    375c:	b1 1d       	adc	r27, r1
    375e:	3f bf       	out	0x3f, r19	; 63
    3760:	ba 2f       	mov	r27, r26
    3762:	a9 2f       	mov	r26, r25
    3764:	98 2f       	mov	r25, r24
    3766:	88 27       	eor	r24, r24
    3768:	82 0f       	add	r24, r18
    376a:	91 1d       	adc	r25, r1
    376c:	a1 1d       	adc	r26, r1
    376e:	b1 1d       	adc	r27, r1
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	42 e0       	ldi	r20, 0x02	; 2
    3776:	66 0f       	add	r22, r22
    3778:	77 1f       	adc	r23, r23
    377a:	88 1f       	adc	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	4a 95       	dec	r20
    3780:	d1 f7       	brne	.-12     	; 0x3776 <micros+0x3c>
    3782:	08 95       	ret

00003784 <delay>:
    3784:	8f 92       	push	r8
    3786:	9f 92       	push	r9
    3788:	af 92       	push	r10
    378a:	bf 92       	push	r11
    378c:	cf 92       	push	r12
    378e:	df 92       	push	r13
    3790:	ef 92       	push	r14
    3792:	ff 92       	push	r15
    3794:	6b 01       	movw	r12, r22
    3796:	7c 01       	movw	r14, r24
    3798:	0e 94 9d 1b 	call	0x373a	; 0x373a <micros>
    379c:	4b 01       	movw	r8, r22
    379e:	5c 01       	movw	r10, r24
    37a0:	c1 14       	cp	r12, r1
    37a2:	d1 04       	cpc	r13, r1
    37a4:	e1 04       	cpc	r14, r1
    37a6:	f1 04       	cpc	r15, r1
    37a8:	01 f1       	breq	.+64     	; 0x37ea <delay+0x66>
    37aa:	0e 94 4c 20 	call	0x4098	; 0x4098 <yield>
    37ae:	0e 94 9d 1b 	call	0x373a	; 0x373a <micros>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	88 19       	sub	r24, r8
    37b8:	99 09       	sbc	r25, r9
    37ba:	aa 09       	sbc	r26, r10
    37bc:	bb 09       	sbc	r27, r11
    37be:	88 3e       	cpi	r24, 0xE8	; 232
    37c0:	93 40       	sbci	r25, 0x03	; 3
    37c2:	a1 05       	cpc	r26, r1
    37c4:	b1 05       	cpc	r27, r1
    37c6:	60 f3       	brcs	.-40     	; 0x37a0 <delay+0x1c>
    37c8:	21 e0       	ldi	r18, 0x01	; 1
    37ca:	c2 1a       	sub	r12, r18
    37cc:	d1 08       	sbc	r13, r1
    37ce:	e1 08       	sbc	r14, r1
    37d0:	f1 08       	sbc	r15, r1
    37d2:	88 ee       	ldi	r24, 0xE8	; 232
    37d4:	88 0e       	add	r8, r24
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	98 1e       	adc	r9, r24
    37da:	a1 1c       	adc	r10, r1
    37dc:	b1 1c       	adc	r11, r1
    37de:	c1 14       	cp	r12, r1
    37e0:	d1 04       	cpc	r13, r1
    37e2:	e1 04       	cpc	r14, r1
    37e4:	f1 04       	cpc	r15, r1
    37e6:	19 f7       	brne	.-58     	; 0x37ae <delay+0x2a>
    37e8:	db cf       	rjmp	.-74     	; 0x37a0 <delay+0x1c>
    37ea:	ff 90       	pop	r15
    37ec:	ef 90       	pop	r14
    37ee:	df 90       	pop	r13
    37f0:	cf 90       	pop	r12
    37f2:	bf 90       	pop	r11
    37f4:	af 90       	pop	r10
    37f6:	9f 90       	pop	r9
    37f8:	8f 90       	pop	r8
    37fa:	08 95       	ret

000037fc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    37fc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    37fe:	84 b5       	in	r24, 0x24	; 36
    3800:	82 60       	ori	r24, 0x02	; 2
    3802:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3804:	84 b5       	in	r24, 0x24	; 36
    3806:	81 60       	ori	r24, 0x01	; 1
    3808:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    380a:	85 b5       	in	r24, 0x25	; 37
    380c:	82 60       	ori	r24, 0x02	; 2
    380e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3810:	85 b5       	in	r24, 0x25	; 37
    3812:	81 60       	ori	r24, 0x01	; 1
    3814:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3816:	ee e6       	ldi	r30, 0x6E	; 110
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	81 60       	ori	r24, 0x01	; 1
    381e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3820:	e1 e8       	ldi	r30, 0x81	; 129
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3826:	80 81       	ld	r24, Z
    3828:	82 60       	ori	r24, 0x02	; 2
    382a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    382c:	80 81       	ld	r24, Z
    382e:	81 60       	ori	r24, 0x01	; 1
    3830:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3832:	e0 e8       	ldi	r30, 0x80	; 128
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	81 60       	ori	r24, 0x01	; 1
    383a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    383c:	e1 eb       	ldi	r30, 0xB1	; 177
    383e:	f0 e0       	ldi	r31, 0x00	; 0
    3840:	80 81       	ld	r24, Z
    3842:	84 60       	ori	r24, 0x04	; 4
    3844:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3846:	e0 eb       	ldi	r30, 0xB0	; 176
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	81 60       	ori	r24, 0x01	; 1
    384e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3850:	ea e7       	ldi	r30, 0x7A	; 122
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	84 60       	ori	r24, 0x04	; 4
    3858:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    385a:	80 81       	ld	r24, Z
    385c:	82 60       	ori	r24, 0x02	; 2
    385e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3860:	80 81       	ld	r24, Z
    3862:	81 60       	ori	r24, 0x01	; 1
    3864:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3866:	80 81       	ld	r24, Z
    3868:	80 68       	ori	r24, 0x80	; 128
    386a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    386c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3870:	08 95       	ret

00003872 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3872:	8e 30       	cpi	r24, 0x0E	; 14
    3874:	08 f0       	brcs	.+2      	; 0x3878 <analogRead+0x6>
    3876:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3878:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    387c:	90 e4       	ldi	r25, 0x40	; 64
    387e:	29 9f       	mul	r18, r25
    3880:	90 01       	movw	r18, r0
    3882:	11 24       	eor	r1, r1
    3884:	87 70       	andi	r24, 0x07	; 7
    3886:	82 2b       	or	r24, r18
    3888:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    388c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3890:	80 64       	ori	r24, 0x40	; 64
    3892:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3896:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    389a:	86 fd       	sbrc	r24, 6
    389c:	fc cf       	rjmp	.-8      	; 0x3896 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    389e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    38a2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    38a6:	90 e0       	ldi	r25, 0x00	; 0
}
    38a8:	92 2b       	or	r25, r18
    38aa:	08 95       	ret

000038ac <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    38ac:	83 30       	cpi	r24, 0x03	; 3
    38ae:	81 f0       	breq	.+32     	; 0x38d0 <turnOffPWM+0x24>
    38b0:	28 f4       	brcc	.+10     	; 0x38bc <turnOffPWM+0x10>
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	99 f0       	breq	.+38     	; 0x38dc <turnOffPWM+0x30>
    38b6:	82 30       	cpi	r24, 0x02	; 2
    38b8:	a1 f0       	breq	.+40     	; 0x38e2 <turnOffPWM+0x36>
    38ba:	08 95       	ret
    38bc:	87 30       	cpi	r24, 0x07	; 7
    38be:	a9 f0       	breq	.+42     	; 0x38ea <turnOffPWM+0x3e>
    38c0:	88 30       	cpi	r24, 0x08	; 8
    38c2:	b9 f0       	breq	.+46     	; 0x38f2 <turnOffPWM+0x46>
    38c4:	84 30       	cpi	r24, 0x04	; 4
    38c6:	d1 f4       	brne	.+52     	; 0x38fc <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    38c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    38cc:	8f 7d       	andi	r24, 0xDF	; 223
    38ce:	03 c0       	rjmp	.+6      	; 0x38d6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    38d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    38d4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    38d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    38da:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    38dc:	84 b5       	in	r24, 0x24	; 36
    38de:	8f 77       	andi	r24, 0x7F	; 127
    38e0:	02 c0       	rjmp	.+4      	; 0x38e6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    38e2:	84 b5       	in	r24, 0x24	; 36
    38e4:	8f 7d       	andi	r24, 0xDF	; 223
    38e6:	84 bd       	out	0x24, r24	; 36
    38e8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    38ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    38ee:	8f 77       	andi	r24, 0x7F	; 127
    38f0:	03 c0       	rjmp	.+6      	; 0x38f8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    38f2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    38f6:	8f 7d       	andi	r24, 0xDF	; 223
    38f8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    38fc:	08 95       	ret

000038fe <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	fc 01       	movw	r30, r24
    3906:	e3 54       	subi	r30, 0x43	; 67
    3908:	f9 4f       	sbci	r31, 0xF9	; 249
    390a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    390c:	fc 01       	movw	r30, r24
    390e:	ef 52       	subi	r30, 0x2F	; 47
    3910:	f9 4f       	sbci	r31, 0xF9	; 249
    3912:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3914:	88 23       	and	r24, r24
    3916:	61 f1       	breq	.+88     	; 0x3970 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	88 0f       	add	r24, r24
    391c:	99 1f       	adc	r25, r25
    391e:	fc 01       	movw	r30, r24
    3920:	e7 50       	subi	r30, 0x07	; 7
    3922:	f9 4f       	sbci	r31, 0xF9	; 249
    3924:	c5 91       	lpm	r28, Z+
    3926:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3928:	fc 01       	movw	r30, r24
    392a:	e1 51       	subi	r30, 0x11	; 17
    392c:	f9 4f       	sbci	r31, 0xF9	; 249
    392e:	a5 91       	lpm	r26, Z+
    3930:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3932:	61 11       	cpse	r22, r1
    3934:	09 c0       	rjmp	.+18     	; 0x3948 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3936:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3938:	f8 94       	cli
		*reg &= ~bit;
    393a:	88 81       	ld	r24, Y
    393c:	20 95       	com	r18
    393e:	82 23       	and	r24, r18
    3940:	88 83       	st	Y, r24
		*out &= ~bit;
    3942:	ec 91       	ld	r30, X
    3944:	2e 23       	and	r18, r30
    3946:	0b c0       	rjmp	.+22     	; 0x395e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3948:	62 30       	cpi	r22, 0x02	; 2
    394a:	61 f4       	brne	.+24     	; 0x3964 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    394c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    394e:	f8 94       	cli
		*reg &= ~bit;
    3950:	88 81       	ld	r24, Y
    3952:	32 2f       	mov	r19, r18
    3954:	30 95       	com	r19
    3956:	83 23       	and	r24, r19
    3958:	88 83       	st	Y, r24
		*out |= bit;
    395a:	ec 91       	ld	r30, X
    395c:	2e 2b       	or	r18, r30
    395e:	2c 93       	st	X, r18
		SREG = oldSREG;
    3960:	9f bf       	out	0x3f, r25	; 63
    3962:	06 c0       	rjmp	.+12     	; 0x3970 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3964:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3966:	f8 94       	cli
		*reg |= bit;
    3968:	e8 81       	ld	r30, Y
    396a:	2e 2b       	or	r18, r30
    396c:	28 83       	st	Y, r18
		SREG = oldSREG;
    396e:	8f bf       	out	0x3f, r24	; 63
	}
}
    3970:	df 91       	pop	r29
    3972:	cf 91       	pop	r28
    3974:	08 95       	ret

00003976 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3976:	1f 93       	push	r17
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    397c:	28 2f       	mov	r18, r24
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	f9 01       	movw	r30, r18
    3982:	e7 55       	subi	r30, 0x57	; 87
    3984:	f9 4f       	sbci	r31, 0xF9	; 249
    3986:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3988:	f9 01       	movw	r30, r18
    398a:	e3 54       	subi	r30, 0x43	; 67
    398c:	f9 4f       	sbci	r31, 0xF9	; 249
    398e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3990:	f9 01       	movw	r30, r18
    3992:	ef 52       	subi	r30, 0x2F	; 47
    3994:	f9 4f       	sbci	r31, 0xF9	; 249
    3996:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3998:	cc 23       	and	r28, r28
    399a:	c1 f0       	breq	.+48     	; 0x39cc <digitalWrite+0x56>
    399c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    399e:	81 11       	cpse	r24, r1
    39a0:	0e 94 56 1c 	call	0x38ac	; 0x38ac <turnOffPWM>

	out = portOutputRegister(port);
    39a4:	ec 2f       	mov	r30, r28
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	ee 0f       	add	r30, r30
    39aa:	ff 1f       	adc	r31, r31
    39ac:	e1 51       	subi	r30, 0x11	; 17
    39ae:	f9 4f       	sbci	r31, 0xF9	; 249
    39b0:	a5 91       	lpm	r26, Z+
    39b2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    39b4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    39b6:	f8 94       	cli

	if (val == LOW) {
    39b8:	11 11       	cpse	r17, r1
    39ba:	04 c0       	rjmp	.+8      	; 0x39c4 <digitalWrite+0x4e>
		*out &= ~bit;
    39bc:	8c 91       	ld	r24, X
    39be:	d0 95       	com	r29
    39c0:	d8 23       	and	r29, r24
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    39c4:	ec 91       	ld	r30, X
    39c6:	de 2b       	or	r29, r30
    39c8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    39ca:	9f bf       	out	0x3f, r25	; 63
}
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	08 95       	ret

000039d4 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    39d4:	fc 01       	movw	r30, r24
    39d6:	80 81       	ld	r24, Z
    39d8:	91 81       	ldd	r25, Z+1	; 0x01
    39da:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <free>

000039de <_ZN6String10invalidateEv>:
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	ec 01       	movw	r28, r24
    39e4:	88 81       	ld	r24, Y
    39e6:	99 81       	ldd	r25, Y+1	; 0x01
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	11 f0       	breq	.+4      	; 0x39f0 <_ZN6String10invalidateEv+0x12>
    39ec:	0e 94 60 21 	call	0x42c0	; 0x42c0 <free>
    39f0:	19 82       	std	Y+1, r1	; 0x01
    39f2:	18 82       	st	Y, r1
    39f4:	1d 82       	std	Y+5, r1	; 0x05
    39f6:	1c 82       	std	Y+4, r1	; 0x04
    39f8:	1b 82       	std	Y+3, r1	; 0x03
    39fa:	1a 82       	std	Y+2, r1	; 0x02
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	08 95       	ret

00003a02 <_ZN6String12changeBufferEj>:
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	ec 01       	movw	r28, r24
    3a0c:	8b 01       	movw	r16, r22
    3a0e:	6f 5f       	subi	r22, 0xFF	; 255
    3a10:	7f 4f       	sbci	r23, 0xFF	; 255
    3a12:	88 81       	ld	r24, Y
    3a14:	99 81       	ldd	r25, Y+1	; 0x01
    3a16:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <realloc>
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	31 f0       	breq	.+12     	; 0x3a2a <_ZN6String12changeBufferEj+0x28>
    3a1e:	99 83       	std	Y+1, r25	; 0x01
    3a20:	88 83       	st	Y, r24
    3a22:	1b 83       	std	Y+3, r17	; 0x03
    3a24:	0a 83       	std	Y+2, r16	; 0x02
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	01 c0       	rjmp	.+2      	; 0x3a2c <_ZN6String12changeBufferEj+0x2a>
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	08 95       	ret

00003a36 <_ZN6String7reserveEj>:
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	ec 01       	movw	r28, r24
    3a3c:	88 81       	ld	r24, Y
    3a3e:	99 81       	ldd	r25, Y+1	; 0x01
    3a40:	89 2b       	or	r24, r25
    3a42:	29 f0       	breq	.+10     	; 0x3a4e <_ZN6String7reserveEj+0x18>
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	9b 81       	ldd	r25, Y+3	; 0x03
    3a48:	86 17       	cp	r24, r22
    3a4a:	97 07       	cpc	r25, r23
    3a4c:	60 f4       	brcc	.+24     	; 0x3a66 <_ZN6String7reserveEj+0x30>
    3a4e:	ce 01       	movw	r24, r28
    3a50:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN6String12changeBufferEj>
    3a54:	88 23       	and	r24, r24
    3a56:	41 f0       	breq	.+16     	; 0x3a68 <_ZN6String7reserveEj+0x32>
    3a58:	8c 81       	ldd	r24, Y+4	; 0x04
    3a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5c:	89 2b       	or	r24, r25
    3a5e:	19 f4       	brne	.+6      	; 0x3a66 <_ZN6String7reserveEj+0x30>
    3a60:	e8 81       	ld	r30, Y
    3a62:	f9 81       	ldd	r31, Y+1	; 0x01
    3a64:	10 82       	st	Z, r1
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	08 95       	ret

00003a6e <_ZN6String4copyEPKcj>:
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	ec 01       	movw	r28, r24
    3a7c:	7b 01       	movw	r14, r22
    3a7e:	8a 01       	movw	r16, r20
    3a80:	ba 01       	movw	r22, r20
    3a82:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_ZN6String7reserveEj>
    3a86:	81 11       	cpse	r24, r1
    3a88:	04 c0       	rjmp	.+8      	; 0x3a92 <_ZN6String4copyEPKcj+0x24>
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	0e 94 ef 1c 	call	0x39de	; 0x39de <_ZN6String10invalidateEv>
    3a90:	07 c0       	rjmp	.+14     	; 0x3aa0 <_ZN6String4copyEPKcj+0x32>
    3a92:	1d 83       	std	Y+5, r17	; 0x05
    3a94:	0c 83       	std	Y+4, r16	; 0x04
    3a96:	b7 01       	movw	r22, r14
    3a98:	88 81       	ld	r24, Y
    3a9a:	99 81       	ldd	r25, Y+1	; 0x01
    3a9c:	0e 94 0d 23 	call	0x461a	; 0x461a <strcpy>
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	1f 91       	pop	r17
    3aa8:	0f 91       	pop	r16
    3aaa:	ff 90       	pop	r15
    3aac:	ef 90       	pop	r14
    3aae:	08 95       	ret

00003ab0 <_ZN6StringC1EPKc>:
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	11 82       	std	Z+1, r1	; 0x01
    3ab4:	10 82       	st	Z, r1
    3ab6:	13 82       	std	Z+3, r1	; 0x03
    3ab8:	12 82       	std	Z+2, r1	; 0x02
    3aba:	15 82       	std	Z+5, r1	; 0x05
    3abc:	14 82       	std	Z+4, r1	; 0x04
    3abe:	61 15       	cp	r22, r1
    3ac0:	71 05       	cpc	r23, r1
    3ac2:	51 f0       	breq	.+20     	; 0x3ad8 <_ZN6StringC1EPKc+0x28>
    3ac4:	fb 01       	movw	r30, r22
    3ac6:	01 90       	ld	r0, Z+
    3ac8:	00 20       	and	r0, r0
    3aca:	e9 f7       	brne	.-6      	; 0x3ac6 <_ZN6StringC1EPKc+0x16>
    3acc:	31 97       	sbiw	r30, 0x01	; 1
    3ace:	af 01       	movw	r20, r30
    3ad0:	46 1b       	sub	r20, r22
    3ad2:	57 0b       	sbc	r21, r23
    3ad4:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <_ZN6String4copyEPKcj>
    3ad8:	08 95       	ret

00003ada <_ZN6StringaSERKS_>:
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	ec 01       	movw	r28, r24
    3ae0:	fb 01       	movw	r30, r22
    3ae2:	86 17       	cp	r24, r22
    3ae4:	97 07       	cpc	r25, r23
    3ae6:	61 f0       	breq	.+24     	; 0x3b00 <_ZN6StringaSERKS_+0x26>
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	61 15       	cp	r22, r1
    3aee:	71 05       	cpc	r23, r1
    3af0:	29 f0       	breq	.+10     	; 0x3afc <_ZN6StringaSERKS_+0x22>
    3af2:	44 81       	ldd	r20, Z+4	; 0x04
    3af4:	55 81       	ldd	r21, Z+5	; 0x05
    3af6:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_ZN6String4copyEPKcj>
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <_ZN6StringaSERKS_+0x26>
    3afc:	0e 94 ef 1c 	call	0x39de	; 0x39de <_ZN6String10invalidateEv>
    3b00:	ce 01       	movw	r24, r28
    3b02:	df 91       	pop	r29
    3b04:	cf 91       	pop	r28
    3b06:	08 95       	ret

00003b08 <_ZN6StringC1ERKS_>:
    3b08:	fc 01       	movw	r30, r24
    3b0a:	11 82       	std	Z+1, r1	; 0x01
    3b0c:	10 82       	st	Z, r1
    3b0e:	13 82       	std	Z+3, r1	; 0x03
    3b10:	12 82       	std	Z+2, r1	; 0x02
    3b12:	15 82       	std	Z+5, r1	; 0x05
    3b14:	14 82       	std	Z+4, r1	; 0x04
    3b16:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_ZN6StringaSERKS_>

00003b1a <_ZN6String6concatEPKcj>:
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	61 15       	cp	r22, r1
    3b28:	71 05       	cpc	r23, r1
    3b2a:	11 f4       	brne	.+4      	; 0x3b30 <_ZN6String6concatEPKcj+0x16>
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	1c c0       	rjmp	.+56     	; 0x3b68 <_ZN6String6concatEPKcj+0x4e>
    3b30:	41 15       	cp	r20, r1
    3b32:	51 05       	cpc	r21, r1
    3b34:	c1 f0       	breq	.+48     	; 0x3b66 <_ZN6String6concatEPKcj+0x4c>
    3b36:	7b 01       	movw	r14, r22
    3b38:	ec 01       	movw	r28, r24
    3b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b3e:	8a 01       	movw	r16, r20
    3b40:	08 0f       	add	r16, r24
    3b42:	19 1f       	adc	r17, r25
    3b44:	b8 01       	movw	r22, r16
    3b46:	ce 01       	movw	r24, r28
    3b48:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_ZN6String7reserveEj>
    3b4c:	88 23       	and	r24, r24
    3b4e:	71 f3       	breq	.-36     	; 0x3b2c <_ZN6String6concatEPKcj+0x12>
    3b50:	28 81       	ld	r18, Y
    3b52:	39 81       	ldd	r19, Y+1	; 0x01
    3b54:	8c 81       	ldd	r24, Y+4	; 0x04
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	b7 01       	movw	r22, r14
    3b5a:	82 0f       	add	r24, r18
    3b5c:	93 1f       	adc	r25, r19
    3b5e:	0e 94 0d 23 	call	0x461a	; 0x461a <strcpy>
    3b62:	1d 83       	std	Y+5, r17	; 0x05
    3b64:	0c 83       	std	Y+4, r16	; 0x04
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	ff 90       	pop	r15
    3b72:	ef 90       	pop	r14
    3b74:	08 95       	ret

00003b76 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3b76:	ef 92       	push	r14
    3b78:	ff 92       	push	r15
    3b7a:	0f 93       	push	r16
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <_ZN6String6concatEh+0xe>
    3b84:	00 d0       	rcall	.+0      	; 0x3b86 <_ZN6String6concatEh+0x10>
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	7c 01       	movw	r14, r24
    3b8c:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3b8e:	4a e0       	ldi	r20, 0x0A	; 10
    3b90:	8e 01       	movw	r16, r28
    3b92:	0f 5f       	subi	r16, 0xFF	; 255
    3b94:	1f 4f       	sbci	r17, 0xFF	; 255
    3b96:	b8 01       	movw	r22, r16
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 14 23 	call	0x4628	; 0x4628 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	01 90       	ld	r0, Z+
    3ba2:	00 20       	and	r0, r0
    3ba4:	e9 f7       	brne	.-6      	; 0x3ba0 <_ZN6String6concatEh+0x2a>
    3ba6:	31 97       	sbiw	r30, 0x01	; 1
    3ba8:	af 01       	movw	r20, r30
    3baa:	40 1b       	sub	r20, r16
    3bac:	51 0b       	sbc	r21, r17
    3bae:	b8 01       	movw	r22, r16
    3bb0:	c7 01       	movw	r24, r14
    3bb2:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <_ZN6String6concatEPKcj>
}
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	1f 91       	pop	r17
    3bc4:	0f 91       	pop	r16
    3bc6:	ff 90       	pop	r15
    3bc8:	ef 90       	pop	r14
    3bca:	08 95       	ret

00003bcc <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3bcc:	20 91 a6 04 	lds	r18, 0x04A6	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3bd0:	30 91 a7 04 	lds	r19, 0x04A7	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3bd4:	28 17       	cp	r18, r24
    3bd6:	39 07       	cpc	r19, r25
    3bd8:	b9 f4       	brne	.+46     	; 0x3c08 <_ZN14SoftwareSerial4readEv+0x3c>
    3bda:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3bde:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3be2:	98 17       	cp	r25, r24
    3be4:	89 f0       	breq	.+34     	; 0x3c08 <_ZN14SoftwareSerial4readEv+0x3c>
    3be6:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	ea 59       	subi	r30, 0x9A	; 154
    3bee:	fb 4f       	sbci	r31, 0xFB	; 251
    3bf0:	80 81       	ld	r24, Z
    3bf2:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	2f 5f       	subi	r18, 0xFF	; 255
    3bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfc:	2f 73       	andi	r18, 0x3F	; 63
    3bfe:	33 27       	eor	r19, r19
    3c00:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	08 95       	ret
    3c08:	8f ef       	ldi	r24, 0xFF	; 255
    3c0a:	9f ef       	ldi	r25, 0xFF	; 255
    3c0c:	08 95       	ret

00003c0e <_ZN14SoftwareSerial5writeEh>:
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	dc 01       	movw	r26, r24
    3c16:	5c 96       	adiw	r26, 0x1c	; 28
    3c18:	8d 91       	ld	r24, X+
    3c1a:	9c 91       	ld	r25, X
    3c1c:	5d 97       	sbiw	r26, 0x1d	; 29
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	39 f4       	brne	.+14     	; 0x3c30 <_ZN14SoftwareSerial5writeEh+0x22>
    3c22:	21 e0       	ldi	r18, 0x01	; 1
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	13 96       	adiw	r26, 0x03	; 3
    3c28:	3c 93       	st	X, r19
    3c2a:	2e 93       	st	-X, r18
    3c2c:	12 97       	sbiw	r26, 0x02	; 2
    3c2e:	3b c0       	rjmp	.+118    	; 0x3ca6 <_ZN14SoftwareSerial5writeEh+0x98>
    3c30:	51 96       	adiw	r26, 0x11	; 17
    3c32:	ed 91       	ld	r30, X+
    3c34:	fc 91       	ld	r31, X
    3c36:	52 97       	sbiw	r26, 0x12	; 18
    3c38:	50 96       	adiw	r26, 0x10	; 16
    3c3a:	2c 91       	ld	r18, X
    3c3c:	50 97       	sbiw	r26, 0x10	; 16
    3c3e:	32 2f       	mov	r19, r18
    3c40:	30 95       	com	r19
    3c42:	1f b7       	in	r17, 0x3f	; 63
    3c44:	5e 96       	adiw	r26, 0x1e	; 30
    3c46:	4c 91       	ld	r20, X
    3c48:	5e 97       	sbiw	r26, 0x1e	; 30
    3c4a:	74 2f       	mov	r23, r20
    3c4c:	72 70       	andi	r23, 0x02	; 2
    3c4e:	41 fd       	sbrc	r20, 1
    3c50:	60 95       	com	r22
    3c52:	f8 94       	cli
    3c54:	40 81       	ld	r20, Z
    3c56:	77 23       	and	r23, r23
    3c58:	11 f0       	breq	.+4      	; 0x3c5e <_ZN14SoftwareSerial5writeEh+0x50>
    3c5a:	42 2b       	or	r20, r18
    3c5c:	01 c0       	rjmp	.+2      	; 0x3c60 <_ZN14SoftwareSerial5writeEh+0x52>
    3c5e:	43 23       	and	r20, r19
    3c60:	40 83       	st	Z, r20
    3c62:	ec 01       	movw	r28, r24
    3c64:	21 97       	sbiw	r28, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <_ZN14SoftwareSerial5writeEh+0x56>
    3c68:	48 e0       	ldi	r20, 0x08	; 8
    3c6a:	50 81       	ld	r21, Z
    3c6c:	60 ff       	sbrs	r22, 0
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <_ZN14SoftwareSerial5writeEh+0x66>
    3c70:	52 2b       	or	r21, r18
    3c72:	01 c0       	rjmp	.+2      	; 0x3c76 <_ZN14SoftwareSerial5writeEh+0x68>
    3c74:	53 23       	and	r21, r19
    3c76:	50 83       	st	Z, r21
    3c78:	ec 01       	movw	r28, r24
    3c7a:	21 97       	sbiw	r28, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <_ZN14SoftwareSerial5writeEh+0x6c>
    3c7e:	66 95       	lsr	r22
    3c80:	41 50       	subi	r20, 0x01	; 1
    3c82:	99 f7       	brne	.-26     	; 0x3c6a <_ZN14SoftwareSerial5writeEh+0x5c>
    3c84:	80 81       	ld	r24, Z
    3c86:	77 23       	and	r23, r23
    3c88:	19 f0       	breq	.+6      	; 0x3c90 <_ZN14SoftwareSerial5writeEh+0x82>
    3c8a:	83 23       	and	r24, r19
    3c8c:	80 83       	st	Z, r24
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <_ZN14SoftwareSerial5writeEh+0x86>
    3c90:	28 2b       	or	r18, r24
    3c92:	20 83       	st	Z, r18
    3c94:	1f bf       	out	0x3f, r17	; 63
    3c96:	5c 96       	adiw	r26, 0x1c	; 28
    3c98:	8d 91       	ld	r24, X+
    3c9a:	9c 91       	ld	r25, X
    3c9c:	5d 97       	sbiw	r26, 0x1d	; 29
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	f1 f7       	brne	.-4      	; 0x3c9e <_ZN14SoftwareSerial5writeEh+0x90>
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	08 95       	ret

00003cae <_ZN14SoftwareSerial5flushEv>:
    3cae:	08 95       	ret

00003cb0 <_ZN14SoftwareSerial4peekEv>:
    3cb0:	20 91 a6 04 	lds	r18, 0x04A6	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3cb4:	30 91 a7 04 	lds	r19, 0x04A7	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3cb8:	28 17       	cp	r18, r24
    3cba:	39 07       	cpc	r19, r25
    3cbc:	71 f4       	brne	.+28     	; 0x3cda <_ZN14SoftwareSerial4peekEv+0x2a>
    3cbe:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cc2:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3cc6:	98 17       	cp	r25, r24
    3cc8:	41 f0       	breq	.+16     	; 0x3cda <_ZN14SoftwareSerial4peekEv+0x2a>
    3cca:	e0 91 64 04 	lds	r30, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	ea 59       	subi	r30, 0x9A	; 154
    3cd2:	fb 4f       	sbci	r31, 0xFB	; 251
    3cd4:	80 81       	ld	r24, Z
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	08 95       	ret
    3cda:	8f ef       	ldi	r24, 0xFF	; 255
    3cdc:	9f ef       	ldi	r25, 0xFF	; 255
    3cde:	08 95       	ret

00003ce0 <_ZN14SoftwareSerial9availableEv>:
    3ce0:	20 91 a6 04 	lds	r18, 0x04A6	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3ce4:	30 91 a7 04 	lds	r19, 0x04A7	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3ce8:	28 17       	cp	r18, r24
    3cea:	39 07       	cpc	r19, r25
    3cec:	71 f4       	brne	.+28     	; 0x3d0a <_ZN14SoftwareSerial9availableEv+0x2a>
    3cee:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3cf2:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	80 5c       	subi	r24, 0xC0	; 192
    3cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfc:	82 1b       	sub	r24, r18
    3cfe:	91 09       	sbc	r25, r1
    3d00:	60 e4       	ldi	r22, 0x40	; 64
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	0e 94 6d 20 	call	0x40da	; 0x40da <__divmodhi4>
    3d08:	08 95       	ret
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	08 95       	ret

00003d10 <_ZN14SoftwareSerial13stopListeningEv>:
    3d10:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3d14:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d18:	e8 17       	cp	r30, r24
    3d1a:	f9 07       	cpc	r31, r25
    3d1c:	69 f4       	brne	.+26     	; 0x3d38 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3d1e:	a3 89       	ldd	r26, Z+19	; 0x13
    3d20:	b4 89       	ldd	r27, Z+20	; 0x14
    3d22:	9c 91       	ld	r25, X
    3d24:	85 89       	ldd	r24, Z+21	; 0x15
    3d26:	80 95       	com	r24
    3d28:	89 23       	and	r24, r25
    3d2a:	8c 93       	st	X, r24
    3d2c:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d30:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	08 95       	ret
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	08 95       	ret

00003d3c <_ZN14SoftwareSerial6listenEv>:
    3d3c:	cf 93       	push	r28
    3d3e:	df 93       	push	r29
    3d40:	ec 01       	movw	r28, r24
    3d42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d44:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d46:	89 2b       	or	r24, r25
    3d48:	f1 f0       	breq	.+60     	; 0x3d86 <_ZN14SoftwareSerial6listenEv+0x4a>
    3d4a:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3d4e:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d52:	c8 17       	cp	r28, r24
    3d54:	d9 07       	cpc	r29, r25
    3d56:	b9 f0       	breq	.+46     	; 0x3d86 <_ZN14SoftwareSerial6listenEv+0x4a>
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	11 f0       	breq	.+4      	; 0x3d60 <_ZN14SoftwareSerial6listenEv+0x24>
    3d5c:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <_ZN14SoftwareSerial13stopListeningEv>
    3d60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d62:	8e 7f       	andi	r24, 0xFE	; 254
    3d64:	8e 8f       	std	Y+30, r24	; 0x1e
    3d66:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d6a:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d6e:	d0 93 a7 04 	sts	0x04A7, r29	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3d72:	c0 93 a6 04 	sts	0x04A6, r28	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3d76:	eb 89       	ldd	r30, Y+19	; 0x13
    3d78:	fc 89       	ldd	r31, Y+20	; 0x14
    3d7a:	90 81       	ld	r25, Z
    3d7c:	8d 89       	ldd	r24, Y+21	; 0x15
    3d7e:	89 2b       	or	r24, r25
    3d80:	80 83       	st	Z, r24
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <_ZN14SoftwareSerial6listenEv+0x4c>
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	08 95       	ret

00003d8e <__vector_3>:
    3d8e:	1f 92       	push	r1
    3d90:	0f 92       	push	r0
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	0f 92       	push	r0
    3d96:	11 24       	eor	r1, r1
    3d98:	2f 93       	push	r18
    3d9a:	3f 93       	push	r19
    3d9c:	4f 93       	push	r20
    3d9e:	5f 93       	push	r21
    3da0:	6f 93       	push	r22
    3da2:	7f 93       	push	r23
    3da4:	8f 93       	push	r24
    3da6:	9f 93       	push	r25
    3da8:	af 93       	push	r26
    3daa:	bf 93       	push	r27
    3dac:	ef 93       	push	r30
    3dae:	ff 93       	push	r31
    3db0:	e0 91 a6 04 	lds	r30, 0x04A6	; 0x8004a6 <_ZN14SoftwareSerial13active_objectE>
    3db4:	f0 91 a7 04 	lds	r31, 0x04A7	; 0x8004a7 <_ZN14SoftwareSerial13active_objectE+0x1>
    3db8:	30 97       	sbiw	r30, 0x00	; 0
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <__vector_3+0x30>
    3dbc:	51 c0       	rjmp	.+162    	; 0x3e60 <__vector_3+0xd2>
    3dbe:	96 8d       	ldd	r25, Z+30	; 0x1e
    3dc0:	a6 85       	ldd	r26, Z+14	; 0x0e
    3dc2:	b7 85       	ldd	r27, Z+15	; 0x0f
    3dc4:	85 85       	ldd	r24, Z+13	; 0x0d
    3dc6:	91 ff       	sbrs	r25, 1
    3dc8:	04 c0       	rjmp	.+8      	; 0x3dd2 <__vector_3+0x44>
    3dca:	9c 91       	ld	r25, X
    3dcc:	89 23       	and	r24, r25
    3dce:	29 f4       	brne	.+10     	; 0x3dda <__vector_3+0x4c>
    3dd0:	47 c0       	rjmp	.+142    	; 0x3e60 <__vector_3+0xd2>
    3dd2:	9c 91       	ld	r25, X
    3dd4:	89 23       	and	r24, r25
    3dd6:	09 f0       	breq	.+2      	; 0x3dda <__vector_3+0x4c>
    3dd8:	43 c0       	rjmp	.+134    	; 0x3e60 <__vector_3+0xd2>
    3dda:	a3 89       	ldd	r26, Z+19	; 0x13
    3ddc:	b4 89       	ldd	r27, Z+20	; 0x14
    3dde:	9c 91       	ld	r25, X
    3de0:	85 89       	ldd	r24, Z+21	; 0x15
    3de2:	80 95       	com	r24
    3de4:	89 23       	and	r24, r25
    3de6:	8c 93       	st	X, r24
    3de8:	86 89       	ldd	r24, Z+22	; 0x16
    3dea:	97 89       	ldd	r25, Z+23	; 0x17
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <__vector_3+0x5e>
    3df0:	60 8d       	ldd	r22, Z+24	; 0x18
    3df2:	71 8d       	ldd	r23, Z+25	; 0x19
    3df4:	a6 85       	ldd	r26, Z+14	; 0x0e
    3df6:	b7 85       	ldd	r27, Z+15	; 0x0f
    3df8:	55 85       	ldd	r21, Z+13	; 0x0d
    3dfa:	38 e0       	ldi	r19, 0x08	; 8
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	cb 01       	movw	r24, r22
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <__vector_3+0x72>
    3e04:	82 2f       	mov	r24, r18
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	95 95       	asr	r25
    3e0a:	87 95       	ror	r24
    3e0c:	28 2f       	mov	r18, r24
    3e0e:	4c 91       	ld	r20, X
    3e10:	45 23       	and	r20, r21
    3e12:	09 f0       	breq	.+2      	; 0x3e16 <__vector_3+0x88>
    3e14:	20 68       	ori	r18, 0x80	; 128
    3e16:	31 50       	subi	r19, 0x01	; 1
    3e18:	91 f7       	brne	.-28     	; 0x3dfe <__vector_3+0x70>
    3e1a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e1c:	81 fd       	sbrc	r24, 1
    3e1e:	20 95       	com	r18
    3e20:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	01 96       	adiw	r24, 0x01	; 1
    3e28:	8f 73       	andi	r24, 0x3F	; 63
    3e2a:	99 27       	eor	r25, r25
    3e2c:	30 91 64 04 	lds	r19, 0x0464	; 0x800464 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3e30:	38 17       	cp	r19, r24
    3e32:	49 f0       	breq	.+18     	; 0x3e46 <__vector_3+0xb8>
    3e34:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e38:	b0 e0       	ldi	r27, 0x00	; 0
    3e3a:	aa 59       	subi	r26, 0x9A	; 154
    3e3c:	bb 4f       	sbci	r27, 0xFB	; 251
    3e3e:	2c 93       	st	X, r18
    3e40:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3e44:	03 c0       	rjmp	.+6      	; 0x3e4c <__vector_3+0xbe>
    3e46:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e48:	81 60       	ori	r24, 0x01	; 1
    3e4a:	86 8f       	std	Z+30, r24	; 0x1e
    3e4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3e4e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3e50:	01 97       	sbiw	r24, 0x01	; 1
    3e52:	f1 f7       	brne	.-4      	; 0x3e50 <__vector_3+0xc2>
    3e54:	a3 89       	ldd	r26, Z+19	; 0x13
    3e56:	b4 89       	ldd	r27, Z+20	; 0x14
    3e58:	9c 91       	ld	r25, X
    3e5a:	85 89       	ldd	r24, Z+21	; 0x15
    3e5c:	89 2b       	or	r24, r25
    3e5e:	8c 93       	st	X, r24
    3e60:	ff 91       	pop	r31
    3e62:	ef 91       	pop	r30
    3e64:	bf 91       	pop	r27
    3e66:	af 91       	pop	r26
    3e68:	9f 91       	pop	r25
    3e6a:	8f 91       	pop	r24
    3e6c:	7f 91       	pop	r23
    3e6e:	6f 91       	pop	r22
    3e70:	5f 91       	pop	r21
    3e72:	4f 91       	pop	r20
    3e74:	3f 91       	pop	r19
    3e76:	2f 91       	pop	r18
    3e78:	0f 90       	pop	r0
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	0f 90       	pop	r0
    3e7e:	1f 90       	pop	r1
    3e80:	18 95       	reti

00003e82 <_ZN14SoftwareSerial5setTXEh>:
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	ec 01       	movw	r28, r24
    3e8a:	16 2f       	mov	r17, r22
    3e8c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3e8e:	66 95       	lsr	r22
    3e90:	61 70       	andi	r22, 0x01	; 1
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	68 27       	eor	r22, r24
    3e96:	81 2f       	mov	r24, r17
    3e98:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
    3e9c:	61 e0       	ldi	r22, 0x01	; 1
    3e9e:	81 2f       	mov	r24, r17
    3ea0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <pinMode>
    3ea4:	81 2f       	mov	r24, r17
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	e3 54       	subi	r30, 0x43	; 67
    3eac:	f9 4f       	sbci	r31, 0xF9	; 249
    3eae:	e4 91       	lpm	r30, Z
    3eb0:	e8 8b       	std	Y+16, r30	; 0x10
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	ef 52       	subi	r30, 0x2F	; 47
    3eb6:	f9 4f       	sbci	r31, 0xF9	; 249
    3eb8:	e4 91       	lpm	r30, Z
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	e1 51       	subi	r30, 0x11	; 17
    3ec2:	f9 4f       	sbci	r31, 0xF9	; 249
    3ec4:	85 91       	lpm	r24, Z+
    3ec6:	94 91       	lpm	r25, Z
    3ec8:	9a 8b       	std	Y+18, r25	; 0x12
    3eca:	89 8b       	std	Y+17, r24	; 0x11
    3ecc:	df 91       	pop	r29
    3ece:	cf 91       	pop	r28
    3ed0:	1f 91       	pop	r17
    3ed2:	08 95       	ret

00003ed4 <_ZN14SoftwareSerial5setRXEh>:
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	ec 01       	movw	r28, r24
    3edc:	16 2f       	mov	r17, r22
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	81 2f       	mov	r24, r17
    3ee2:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <pinMode>
    3ee6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ee8:	81 fd       	sbrc	r24, 1
    3eea:	04 c0       	rjmp	.+8      	; 0x3ef4 <_ZN14SoftwareSerial5setRXEh+0x20>
    3eec:	61 e0       	ldi	r22, 0x01	; 1
    3eee:	81 2f       	mov	r24, r17
    3ef0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <digitalWrite>
    3ef4:	1c 87       	std	Y+12, r17	; 0x0c
    3ef6:	81 2f       	mov	r24, r17
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	fc 01       	movw	r30, r24
    3efc:	e3 54       	subi	r30, 0x43	; 67
    3efe:	f9 4f       	sbci	r31, 0xF9	; 249
    3f00:	e4 91       	lpm	r30, Z
    3f02:	ed 87       	std	Y+13, r30	; 0x0d
    3f04:	fc 01       	movw	r30, r24
    3f06:	ef 52       	subi	r30, 0x2F	; 47
    3f08:	f9 4f       	sbci	r31, 0xF9	; 249
    3f0a:	e4 91       	lpm	r30, Z
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	ee 0f       	add	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	eb 51       	subi	r30, 0x1B	; 27
    3f14:	f9 4f       	sbci	r31, 0xF9	; 249
    3f16:	85 91       	lpm	r24, Z+
    3f18:	94 91       	lpm	r25, Z
    3f1a:	9f 87       	std	Y+15, r25	; 0x0f
    3f1c:	8e 87       	std	Y+14, r24	; 0x0e
    3f1e:	df 91       	pop	r29
    3f20:	cf 91       	pop	r28
    3f22:	1f 91       	pop	r17
    3f24:	08 95       	ret

00003f26 <_ZN14SoftwareSerialC1Ehhb>:
    3f26:	1f 93       	push	r17
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	ec 01       	movw	r28, r24
    3f2e:	16 2f       	mov	r17, r22
    3f30:	1b 82       	std	Y+3, r1	; 0x03
    3f32:	1a 82       	std	Y+2, r1	; 0x02
    3f34:	88 ee       	ldi	r24, 0xE8	; 232
    3f36:	93 e0       	ldi	r25, 0x03	; 3
    3f38:	a0 e0       	ldi	r26, 0x00	; 0
    3f3a:	b0 e0       	ldi	r27, 0x00	; 0
    3f3c:	8c 83       	std	Y+4, r24	; 0x04
    3f3e:	9d 83       	std	Y+5, r25	; 0x05
    3f40:	ae 83       	std	Y+6, r26	; 0x06
    3f42:	bf 83       	std	Y+7, r27	; 0x07
    3f44:	8d ea       	ldi	r24, 0xAD	; 173
    3f46:	91 e0       	ldi	r25, 0x01	; 1
    3f48:	99 83       	std	Y+1, r25	; 0x01
    3f4a:	88 83       	st	Y, r24
    3f4c:	1f 8a       	std	Y+23, r1	; 0x17
    3f4e:	1e 8a       	std	Y+22, r1	; 0x16
    3f50:	19 8e       	std	Y+25, r1	; 0x19
    3f52:	18 8e       	std	Y+24, r1	; 0x18
    3f54:	1b 8e       	std	Y+27, r1	; 0x1b
    3f56:	1a 8e       	std	Y+26, r1	; 0x1a
    3f58:	1d 8e       	std	Y+29, r1	; 0x1d
    3f5a:	1c 8e       	std	Y+28, r1	; 0x1c
    3f5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f5e:	8e 7f       	andi	r24, 0xFE	; 254
    3f60:	20 fb       	bst	r18, 0
    3f62:	81 f9       	bld	r24, 1
    3f64:	8e 8f       	std	Y+30, r24	; 0x1e
    3f66:	64 2f       	mov	r22, r20
    3f68:	ce 01       	movw	r24, r28
    3f6a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_ZN14SoftwareSerial5setTXEh>
    3f6e:	61 2f       	mov	r22, r17
    3f70:	ce 01       	movw	r24, r28
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <_ZN14SoftwareSerial5setRXEh>

00003f7c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	ec 01       	movw	r28, r24
    3f82:	9a 01       	movw	r18, r20
    3f84:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3f86:	1b 8e       	std	Y+27, r1	; 0x1b
    3f88:	1a 8e       	std	Y+26, r1	; 0x1a
    3f8a:	19 8e       	std	Y+25, r1	; 0x19
    3f8c:	18 8e       	std	Y+24, r1	; 0x18
    3f8e:	1f 8a       	std	Y+23, r1	; 0x17
    3f90:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3f92:	60 e0       	ldi	r22, 0x00	; 0
    3f94:	79 e0       	ldi	r23, 0x09	; 9
    3f96:	8d e3       	ldi	r24, 0x3D	; 61
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 a3 20 	call	0x4146	; 0x4146 <__divmodsi4>
    3f9e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3fa0:	24 30       	cpi	r18, 0x04	; 4
    3fa2:	31 05       	cpc	r19, r1
    3fa4:	18 f0       	brcs	.+6      	; 0x3fac <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3fa6:	c9 01       	movw	r24, r18
    3fa8:	03 97       	sbiw	r24, 0x03	; 3
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3fb0:	9d 8f       	std	Y+29, r25	; 0x1d
    3fb2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3fb4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fb6:	66 31       	cpi	r22, 0x16	; 22
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <_ZN14SoftwareSerial5beginEl+0x40>
    3fba:	69 c0       	rjmp	.+210    	; 0x408e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3fbc:	c9 01       	movw	r24, r18
    3fbe:	96 95       	lsr	r25
    3fc0:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3fc2:	84 31       	cpi	r24, 0x14	; 20
    3fc4:	91 05       	cpc	r25, r1
    3fc6:	10 f0       	brcs	.+4      	; 0x3fcc <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3fc8:	43 97       	sbiw	r24, 0x13	; 19
    3fca:	02 c0       	rjmp	.+4      	; 0x3fd0 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3fd0:	9f 8b       	std	Y+23, r25	; 0x17
    3fd2:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3fd4:	36 97       	sbiw	r30, 0x06	; 6
    3fd6:	18 f0       	brcs	.+6      	; 0x3fde <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3fd8:	c9 01       	movw	r24, r18
    3fda:	05 97       	sbiw	r24, 0x05	; 5
    3fdc:	02 c0       	rjmp	.+4      	; 0x3fe2 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3fe2:	99 8f       	std	Y+25, r25	; 0x19
    3fe4:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3fe6:	c9 01       	movw	r24, r18
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	28 0f       	add	r18, r24
    3fee:	39 1f       	adc	r19, r25
    3ff0:	36 95       	lsr	r19
    3ff2:	27 95       	ror	r18
    3ff4:	36 95       	lsr	r19
    3ff6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3ff8:	2d 30       	cpi	r18, 0x0D	; 13
    3ffa:	31 05       	cpc	r19, r1
    3ffc:	18 f0       	brcs	.+6      	; 0x4004 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3ffe:	2c 50       	subi	r18, 0x0C	; 12
    4000:	31 09       	sbc	r19, r1
    4002:	02 c0       	rjmp	.+4      	; 0x4008 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    4004:	21 e0       	ldi	r18, 0x01	; 1
    4006:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4008:	3b 8f       	std	Y+27, r19	; 0x1b
    400a:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    400c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    4010:	68 30       	cpi	r22, 0x08	; 8
    4012:	50 f0       	brcs	.+20     	; 0x4028 <_ZN14SoftwareSerial5beginEl+0xac>
    4014:	21 e0       	ldi	r18, 0x01	; 1
    4016:	6e 30       	cpi	r22, 0x0E	; 14
    4018:	08 f4       	brcc	.+2      	; 0x401c <_ZN14SoftwareSerial5beginEl+0xa0>
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	81 e0       	ldi	r24, 0x01	; 1
    401e:	01 c0       	rjmp	.+2      	; 0x4022 <_ZN14SoftwareSerial5beginEl+0xa6>
    4020:	88 0f       	add	r24, r24
    4022:	2a 95       	dec	r18
    4024:	ea f7       	brpl	.-6      	; 0x4020 <_ZN14SoftwareSerial5beginEl+0xa4>
    4026:	01 c0       	rjmp	.+2      	; 0x402a <_ZN14SoftwareSerial5beginEl+0xae>
    4028:	84 e0       	ldi	r24, 0x04	; 4
    402a:	89 2b       	or	r24, r25
    402c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    4030:	9c 85       	ldd	r25, Y+12	; 0x0c
    4032:	98 30       	cpi	r25, 0x08	; 8
    4034:	38 f0       	brcs	.+14     	; 0x4044 <_ZN14SoftwareSerial5beginEl+0xc8>
    4036:	9e 30       	cpi	r25, 0x0E	; 14
    4038:	40 f0       	brcs	.+16     	; 0x404a <_ZN14SoftwareSerial5beginEl+0xce>
    403a:	96 31       	cpi	r25, 0x16	; 22
    403c:	48 f0       	brcs	.+18     	; 0x4050 <_ZN14SoftwareSerial5beginEl+0xd4>
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	08 c0       	rjmp	.+16     	; 0x4054 <_ZN14SoftwareSerial5beginEl+0xd8>
    4044:	2d e6       	ldi	r18, 0x6D	; 109
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	05 c0       	rjmp	.+10     	; 0x4054 <_ZN14SoftwareSerial5beginEl+0xd8>
    404a:	2b e6       	ldi	r18, 0x6B	; 107
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <_ZN14SoftwareSerial5beginEl+0xd8>
    4050:	2c e6       	ldi	r18, 0x6C	; 108
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	3c 8b       	std	Y+20, r19	; 0x14
    4056:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    4058:	98 30       	cpi	r25, 0x08	; 8
    405a:	30 f4       	brcc	.+12     	; 0x4068 <_ZN14SoftwareSerial5beginEl+0xec>
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	01 c0       	rjmp	.+2      	; 0x4062 <_ZN14SoftwareSerial5beginEl+0xe6>
    4060:	88 0f       	add	r24, r24
    4062:	9a 95       	dec	r25
    4064:	ea f7       	brpl	.-6      	; 0x4060 <_ZN14SoftwareSerial5beginEl+0xe4>
    4066:	0e c0       	rjmp	.+28     	; 0x4084 <_ZN14SoftwareSerial5beginEl+0x108>
    4068:	29 2f       	mov	r18, r25
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	9e 30       	cpi	r25, 0x0E	; 14
    406e:	18 f4       	brcc	.+6      	; 0x4076 <_ZN14SoftwareSerial5beginEl+0xfa>
    4070:	28 50       	subi	r18, 0x08	; 8
    4072:	31 09       	sbc	r19, r1
    4074:	02 c0       	rjmp	.+4      	; 0x407a <_ZN14SoftwareSerial5beginEl+0xfe>
    4076:	2e 50       	subi	r18, 0x0E	; 14
    4078:	31 09       	sbc	r19, r1
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	01 c0       	rjmp	.+2      	; 0x4080 <_ZN14SoftwareSerial5beginEl+0x104>
    407e:	88 0f       	add	r24, r24
    4080:	2a 95       	dec	r18
    4082:	ea f7       	brpl	.-6      	; 0x407e <_ZN14SoftwareSerial5beginEl+0x102>
    4084:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4086:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4088:	9d 8d       	ldd	r25, Y+29	; 0x1d
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    408e:	ce 01       	movw	r24, r28
}
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4094:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <_ZN14SoftwareSerial6listenEv>

00004098 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4098:	08 95       	ret

0000409a <__udivmodqi4>:
    409a:	99 1b       	sub	r25, r25
    409c:	79 e0       	ldi	r23, 0x09	; 9
    409e:	04 c0       	rjmp	.+8      	; 0x40a8 <__udivmodqi4_ep>

000040a0 <__udivmodqi4_loop>:
    40a0:	99 1f       	adc	r25, r25
    40a2:	96 17       	cp	r25, r22
    40a4:	08 f0       	brcs	.+2      	; 0x40a8 <__udivmodqi4_ep>
    40a6:	96 1b       	sub	r25, r22

000040a8 <__udivmodqi4_ep>:
    40a8:	88 1f       	adc	r24, r24
    40aa:	7a 95       	dec	r23
    40ac:	c9 f7       	brne	.-14     	; 0x40a0 <__udivmodqi4_loop>
    40ae:	80 95       	com	r24
    40b0:	08 95       	ret

000040b2 <__udivmodhi4>:
    40b2:	aa 1b       	sub	r26, r26
    40b4:	bb 1b       	sub	r27, r27
    40b6:	51 e1       	ldi	r21, 0x11	; 17
    40b8:	07 c0       	rjmp	.+14     	; 0x40c8 <__udivmodhi4_ep>

000040ba <__udivmodhi4_loop>:
    40ba:	aa 1f       	adc	r26, r26
    40bc:	bb 1f       	adc	r27, r27
    40be:	a6 17       	cp	r26, r22
    40c0:	b7 07       	cpc	r27, r23
    40c2:	10 f0       	brcs	.+4      	; 0x40c8 <__udivmodhi4_ep>
    40c4:	a6 1b       	sub	r26, r22
    40c6:	b7 0b       	sbc	r27, r23

000040c8 <__udivmodhi4_ep>:
    40c8:	88 1f       	adc	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	5a 95       	dec	r21
    40ce:	a9 f7       	brne	.-22     	; 0x40ba <__udivmodhi4_loop>
    40d0:	80 95       	com	r24
    40d2:	90 95       	com	r25
    40d4:	bc 01       	movw	r22, r24
    40d6:	cd 01       	movw	r24, r26
    40d8:	08 95       	ret

000040da <__divmodhi4>:
    40da:	97 fb       	bst	r25, 7
    40dc:	07 2e       	mov	r0, r23
    40de:	16 f4       	brtc	.+4      	; 0x40e4 <__divmodhi4+0xa>
    40e0:	00 94       	com	r0
    40e2:	07 d0       	rcall	.+14     	; 0x40f2 <__divmodhi4_neg1>
    40e4:	77 fd       	sbrc	r23, 7
    40e6:	09 d0       	rcall	.+18     	; 0x40fa <__divmodhi4_neg2>
    40e8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <__udivmodhi4>
    40ec:	07 fc       	sbrc	r0, 7
    40ee:	05 d0       	rcall	.+10     	; 0x40fa <__divmodhi4_neg2>
    40f0:	3e f4       	brtc	.+14     	; 0x4100 <__divmodhi4_exit>

000040f2 <__divmodhi4_neg1>:
    40f2:	90 95       	com	r25
    40f4:	81 95       	neg	r24
    40f6:	9f 4f       	sbci	r25, 0xFF	; 255
    40f8:	08 95       	ret

000040fa <__divmodhi4_neg2>:
    40fa:	70 95       	com	r23
    40fc:	61 95       	neg	r22
    40fe:	7f 4f       	sbci	r23, 0xFF	; 255

00004100 <__divmodhi4_exit>:
    4100:	08 95       	ret

00004102 <__udivmodsi4>:
    4102:	a1 e2       	ldi	r26, 0x21	; 33
    4104:	1a 2e       	mov	r1, r26
    4106:	aa 1b       	sub	r26, r26
    4108:	bb 1b       	sub	r27, r27
    410a:	fd 01       	movw	r30, r26
    410c:	0d c0       	rjmp	.+26     	; 0x4128 <__udivmodsi4_ep>

0000410e <__udivmodsi4_loop>:
    410e:	aa 1f       	adc	r26, r26
    4110:	bb 1f       	adc	r27, r27
    4112:	ee 1f       	adc	r30, r30
    4114:	ff 1f       	adc	r31, r31
    4116:	a2 17       	cp	r26, r18
    4118:	b3 07       	cpc	r27, r19
    411a:	e4 07       	cpc	r30, r20
    411c:	f5 07       	cpc	r31, r21
    411e:	20 f0       	brcs	.+8      	; 0x4128 <__udivmodsi4_ep>
    4120:	a2 1b       	sub	r26, r18
    4122:	b3 0b       	sbc	r27, r19
    4124:	e4 0b       	sbc	r30, r20
    4126:	f5 0b       	sbc	r31, r21

00004128 <__udivmodsi4_ep>:
    4128:	66 1f       	adc	r22, r22
    412a:	77 1f       	adc	r23, r23
    412c:	88 1f       	adc	r24, r24
    412e:	99 1f       	adc	r25, r25
    4130:	1a 94       	dec	r1
    4132:	69 f7       	brne	.-38     	; 0x410e <__udivmodsi4_loop>
    4134:	60 95       	com	r22
    4136:	70 95       	com	r23
    4138:	80 95       	com	r24
    413a:	90 95       	com	r25
    413c:	9b 01       	movw	r18, r22
    413e:	ac 01       	movw	r20, r24
    4140:	bd 01       	movw	r22, r26
    4142:	cf 01       	movw	r24, r30
    4144:	08 95       	ret

00004146 <__divmodsi4>:
    4146:	05 2e       	mov	r0, r21
    4148:	97 fb       	bst	r25, 7
    414a:	1e f4       	brtc	.+6      	; 0x4152 <__divmodsi4+0xc>
    414c:	00 94       	com	r0
    414e:	0e 94 ba 20 	call	0x4174	; 0x4174 <__negsi2>
    4152:	57 fd       	sbrc	r21, 7
    4154:	07 d0       	rcall	.+14     	; 0x4164 <__divmodsi4_neg2>
    4156:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    415a:	07 fc       	sbrc	r0, 7
    415c:	03 d0       	rcall	.+6      	; 0x4164 <__divmodsi4_neg2>
    415e:	4e f4       	brtc	.+18     	; 0x4172 <__divmodsi4_exit>
    4160:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__negsi2>

00004164 <__divmodsi4_neg2>:
    4164:	50 95       	com	r21
    4166:	40 95       	com	r20
    4168:	30 95       	com	r19
    416a:	21 95       	neg	r18
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	4f 4f       	sbci	r20, 0xFF	; 255
    4170:	5f 4f       	sbci	r21, 0xFF	; 255

00004172 <__divmodsi4_exit>:
    4172:	08 95       	ret

00004174 <__negsi2>:
    4174:	90 95       	com	r25
    4176:	80 95       	com	r24
    4178:	70 95       	com	r23
    417a:	61 95       	neg	r22
    417c:	7f 4f       	sbci	r23, 0xFF	; 255
    417e:	8f 4f       	sbci	r24, 0xFF	; 255
    4180:	9f 4f       	sbci	r25, 0xFF	; 255
    4182:	08 95       	ret

00004184 <__tablejump2__>:
    4184:	ee 0f       	add	r30, r30
    4186:	ff 1f       	adc	r31, r31
    4188:	05 90       	lpm	r0, Z+
    418a:	f4 91       	lpm	r31, Z
    418c:	e0 2d       	mov	r30, r0
    418e:	09 94       	ijmp

00004190 <malloc>:
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
    4194:	cf 93       	push	r28
    4196:	df 93       	push	r29
    4198:	82 30       	cpi	r24, 0x02	; 2
    419a:	91 05       	cpc	r25, r1
    419c:	10 f4       	brcc	.+4      	; 0x41a2 <malloc+0x12>
    419e:	82 e0       	ldi	r24, 0x02	; 2
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <__flp>
    41a6:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <__flp+0x1>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	a0 e0       	ldi	r26, 0x00	; 0
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	30 97       	sbiw	r30, 0x00	; 0
    41b4:	19 f1       	breq	.+70     	; 0x41fc <malloc+0x6c>
    41b6:	40 81       	ld	r20, Z
    41b8:	51 81       	ldd	r21, Z+1	; 0x01
    41ba:	02 81       	ldd	r16, Z+2	; 0x02
    41bc:	13 81       	ldd	r17, Z+3	; 0x03
    41be:	48 17       	cp	r20, r24
    41c0:	59 07       	cpc	r21, r25
    41c2:	c8 f0       	brcs	.+50     	; 0x41f6 <malloc+0x66>
    41c4:	84 17       	cp	r24, r20
    41c6:	95 07       	cpc	r25, r21
    41c8:	69 f4       	brne	.+26     	; 0x41e4 <malloc+0x54>
    41ca:	10 97       	sbiw	r26, 0x00	; 0
    41cc:	31 f0       	breq	.+12     	; 0x41da <malloc+0x4a>
    41ce:	12 96       	adiw	r26, 0x02	; 2
    41d0:	0c 93       	st	X, r16
    41d2:	12 97       	sbiw	r26, 0x02	; 2
    41d4:	13 96       	adiw	r26, 0x03	; 3
    41d6:	1c 93       	st	X, r17
    41d8:	27 c0       	rjmp	.+78     	; 0x4228 <malloc+0x98>
    41da:	00 93 aa 04 	sts	0x04AA, r16	; 0x8004aa <__flp>
    41de:	10 93 ab 04 	sts	0x04AB, r17	; 0x8004ab <__flp+0x1>
    41e2:	22 c0       	rjmp	.+68     	; 0x4228 <malloc+0x98>
    41e4:	21 15       	cp	r18, r1
    41e6:	31 05       	cpc	r19, r1
    41e8:	19 f0       	breq	.+6      	; 0x41f0 <malloc+0x60>
    41ea:	42 17       	cp	r20, r18
    41ec:	53 07       	cpc	r21, r19
    41ee:	18 f4       	brcc	.+6      	; 0x41f6 <malloc+0x66>
    41f0:	9a 01       	movw	r18, r20
    41f2:	bd 01       	movw	r22, r26
    41f4:	ef 01       	movw	r28, r30
    41f6:	df 01       	movw	r26, r30
    41f8:	f8 01       	movw	r30, r16
    41fa:	db cf       	rjmp	.-74     	; 0x41b2 <malloc+0x22>
    41fc:	21 15       	cp	r18, r1
    41fe:	31 05       	cpc	r19, r1
    4200:	f9 f0       	breq	.+62     	; 0x4240 <malloc+0xb0>
    4202:	28 1b       	sub	r18, r24
    4204:	39 0b       	sbc	r19, r25
    4206:	24 30       	cpi	r18, 0x04	; 4
    4208:	31 05       	cpc	r19, r1
    420a:	80 f4       	brcc	.+32     	; 0x422c <malloc+0x9c>
    420c:	8a 81       	ldd	r24, Y+2	; 0x02
    420e:	9b 81       	ldd	r25, Y+3	; 0x03
    4210:	61 15       	cp	r22, r1
    4212:	71 05       	cpc	r23, r1
    4214:	21 f0       	breq	.+8      	; 0x421e <malloc+0x8e>
    4216:	fb 01       	movw	r30, r22
    4218:	93 83       	std	Z+3, r25	; 0x03
    421a:	82 83       	std	Z+2, r24	; 0x02
    421c:	04 c0       	rjmp	.+8      	; 0x4226 <malloc+0x96>
    421e:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <__flp+0x1>
    4222:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <__flp>
    4226:	fe 01       	movw	r30, r28
    4228:	32 96       	adiw	r30, 0x02	; 2
    422a:	44 c0       	rjmp	.+136    	; 0x42b4 <malloc+0x124>
    422c:	fe 01       	movw	r30, r28
    422e:	e2 0f       	add	r30, r18
    4230:	f3 1f       	adc	r31, r19
    4232:	81 93       	st	Z+, r24
    4234:	91 93       	st	Z+, r25
    4236:	22 50       	subi	r18, 0x02	; 2
    4238:	31 09       	sbc	r19, r1
    423a:	39 83       	std	Y+1, r19	; 0x01
    423c:	28 83       	st	Y, r18
    423e:	3a c0       	rjmp	.+116    	; 0x42b4 <malloc+0x124>
    4240:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__brkval>
    4244:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <__brkval+0x1>
    4248:	23 2b       	or	r18, r19
    424a:	41 f4       	brne	.+16     	; 0x425c <malloc+0xcc>
    424c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4250:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4254:	30 93 a9 04 	sts	0x04A9, r19	; 0x8004a9 <__brkval+0x1>
    4258:	20 93 a8 04 	sts	0x04A8, r18	; 0x8004a8 <__brkval>
    425c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4260:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4264:	21 15       	cp	r18, r1
    4266:	31 05       	cpc	r19, r1
    4268:	41 f4       	brne	.+16     	; 0x427a <malloc+0xea>
    426a:	2d b7       	in	r18, 0x3d	; 61
    426c:	3e b7       	in	r19, 0x3e	; 62
    426e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4272:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4276:	24 1b       	sub	r18, r20
    4278:	35 0b       	sbc	r19, r21
    427a:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <__brkval>
    427e:	f0 91 a9 04 	lds	r31, 0x04A9	; 0x8004a9 <__brkval+0x1>
    4282:	e2 17       	cp	r30, r18
    4284:	f3 07       	cpc	r31, r19
    4286:	a0 f4       	brcc	.+40     	; 0x42b0 <malloc+0x120>
    4288:	2e 1b       	sub	r18, r30
    428a:	3f 0b       	sbc	r19, r31
    428c:	28 17       	cp	r18, r24
    428e:	39 07       	cpc	r19, r25
    4290:	78 f0       	brcs	.+30     	; 0x42b0 <malloc+0x120>
    4292:	ac 01       	movw	r20, r24
    4294:	4e 5f       	subi	r20, 0xFE	; 254
    4296:	5f 4f       	sbci	r21, 0xFF	; 255
    4298:	24 17       	cp	r18, r20
    429a:	35 07       	cpc	r19, r21
    429c:	48 f0       	brcs	.+18     	; 0x42b0 <malloc+0x120>
    429e:	4e 0f       	add	r20, r30
    42a0:	5f 1f       	adc	r21, r31
    42a2:	50 93 a9 04 	sts	0x04A9, r21	; 0x8004a9 <__brkval+0x1>
    42a6:	40 93 a8 04 	sts	0x04A8, r20	; 0x8004a8 <__brkval>
    42aa:	81 93       	st	Z+, r24
    42ac:	91 93       	st	Z+, r25
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <malloc+0x124>
    42b0:	e0 e0       	ldi	r30, 0x00	; 0
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	cf 01       	movw	r24, r30
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	1f 91       	pop	r17
    42bc:	0f 91       	pop	r16
    42be:	08 95       	ret

000042c0 <free>:
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	09 f4       	brne	.+2      	; 0x42ca <free+0xa>
    42c8:	81 c0       	rjmp	.+258    	; 0x43cc <free+0x10c>
    42ca:	fc 01       	movw	r30, r24
    42cc:	32 97       	sbiw	r30, 0x02	; 2
    42ce:	13 82       	std	Z+3, r1	; 0x03
    42d0:	12 82       	std	Z+2, r1	; 0x02
    42d2:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <__flp>
    42d6:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <__flp+0x1>
    42da:	10 97       	sbiw	r26, 0x00	; 0
    42dc:	81 f4       	brne	.+32     	; 0x42fe <free+0x3e>
    42de:	20 81       	ld	r18, Z
    42e0:	31 81       	ldd	r19, Z+1	; 0x01
    42e2:	82 0f       	add	r24, r18
    42e4:	93 1f       	adc	r25, r19
    42e6:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__brkval>
    42ea:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <__brkval+0x1>
    42ee:	28 17       	cp	r18, r24
    42f0:	39 07       	cpc	r19, r25
    42f2:	51 f5       	brne	.+84     	; 0x4348 <free+0x88>
    42f4:	f0 93 a9 04 	sts	0x04A9, r31	; 0x8004a9 <__brkval+0x1>
    42f8:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <__brkval>
    42fc:	67 c0       	rjmp	.+206    	; 0x43cc <free+0x10c>
    42fe:	ed 01       	movw	r28, r26
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	ce 17       	cp	r28, r30
    4306:	df 07       	cpc	r29, r31
    4308:	40 f4       	brcc	.+16     	; 0x431a <free+0x5a>
    430a:	4a 81       	ldd	r20, Y+2	; 0x02
    430c:	5b 81       	ldd	r21, Y+3	; 0x03
    430e:	9e 01       	movw	r18, r28
    4310:	41 15       	cp	r20, r1
    4312:	51 05       	cpc	r21, r1
    4314:	f1 f0       	breq	.+60     	; 0x4352 <free+0x92>
    4316:	ea 01       	movw	r28, r20
    4318:	f5 cf       	rjmp	.-22     	; 0x4304 <free+0x44>
    431a:	d3 83       	std	Z+3, r29	; 0x03
    431c:	c2 83       	std	Z+2, r28	; 0x02
    431e:	40 81       	ld	r20, Z
    4320:	51 81       	ldd	r21, Z+1	; 0x01
    4322:	84 0f       	add	r24, r20
    4324:	95 1f       	adc	r25, r21
    4326:	c8 17       	cp	r28, r24
    4328:	d9 07       	cpc	r29, r25
    432a:	59 f4       	brne	.+22     	; 0x4342 <free+0x82>
    432c:	88 81       	ld	r24, Y
    432e:	99 81       	ldd	r25, Y+1	; 0x01
    4330:	84 0f       	add	r24, r20
    4332:	95 1f       	adc	r25, r21
    4334:	02 96       	adiw	r24, 0x02	; 2
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	80 83       	st	Z, r24
    433a:	8a 81       	ldd	r24, Y+2	; 0x02
    433c:	9b 81       	ldd	r25, Y+3	; 0x03
    433e:	93 83       	std	Z+3, r25	; 0x03
    4340:	82 83       	std	Z+2, r24	; 0x02
    4342:	21 15       	cp	r18, r1
    4344:	31 05       	cpc	r19, r1
    4346:	29 f4       	brne	.+10     	; 0x4352 <free+0x92>
    4348:	f0 93 ab 04 	sts	0x04AB, r31	; 0x8004ab <__flp+0x1>
    434c:	e0 93 aa 04 	sts	0x04AA, r30	; 0x8004aa <__flp>
    4350:	3d c0       	rjmp	.+122    	; 0x43cc <free+0x10c>
    4352:	e9 01       	movw	r28, r18
    4354:	fb 83       	std	Y+3, r31	; 0x03
    4356:	ea 83       	std	Y+2, r30	; 0x02
    4358:	49 91       	ld	r20, Y+
    435a:	59 91       	ld	r21, Y+
    435c:	c4 0f       	add	r28, r20
    435e:	d5 1f       	adc	r29, r21
    4360:	ec 17       	cp	r30, r28
    4362:	fd 07       	cpc	r31, r29
    4364:	61 f4       	brne	.+24     	; 0x437e <free+0xbe>
    4366:	80 81       	ld	r24, Z
    4368:	91 81       	ldd	r25, Z+1	; 0x01
    436a:	84 0f       	add	r24, r20
    436c:	95 1f       	adc	r25, r21
    436e:	02 96       	adiw	r24, 0x02	; 2
    4370:	e9 01       	movw	r28, r18
    4372:	99 83       	std	Y+1, r25	; 0x01
    4374:	88 83       	st	Y, r24
    4376:	82 81       	ldd	r24, Z+2	; 0x02
    4378:	93 81       	ldd	r25, Z+3	; 0x03
    437a:	9b 83       	std	Y+3, r25	; 0x03
    437c:	8a 83       	std	Y+2, r24	; 0x02
    437e:	e0 e0       	ldi	r30, 0x00	; 0
    4380:	f0 e0       	ldi	r31, 0x00	; 0
    4382:	12 96       	adiw	r26, 0x02	; 2
    4384:	8d 91       	ld	r24, X+
    4386:	9c 91       	ld	r25, X
    4388:	13 97       	sbiw	r26, 0x03	; 3
    438a:	00 97       	sbiw	r24, 0x00	; 0
    438c:	19 f0       	breq	.+6      	; 0x4394 <free+0xd4>
    438e:	fd 01       	movw	r30, r26
    4390:	dc 01       	movw	r26, r24
    4392:	f7 cf       	rjmp	.-18     	; 0x4382 <free+0xc2>
    4394:	8d 91       	ld	r24, X+
    4396:	9c 91       	ld	r25, X
    4398:	11 97       	sbiw	r26, 0x01	; 1
    439a:	9d 01       	movw	r18, r26
    439c:	2e 5f       	subi	r18, 0xFE	; 254
    439e:	3f 4f       	sbci	r19, 0xFF	; 255
    43a0:	82 0f       	add	r24, r18
    43a2:	93 1f       	adc	r25, r19
    43a4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__brkval>
    43a8:	30 91 a9 04 	lds	r19, 0x04A9	; 0x8004a9 <__brkval+0x1>
    43ac:	28 17       	cp	r18, r24
    43ae:	39 07       	cpc	r19, r25
    43b0:	69 f4       	brne	.+26     	; 0x43cc <free+0x10c>
    43b2:	30 97       	sbiw	r30, 0x00	; 0
    43b4:	29 f4       	brne	.+10     	; 0x43c0 <free+0x100>
    43b6:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <__flp+0x1>
    43ba:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <__flp>
    43be:	02 c0       	rjmp	.+4      	; 0x43c4 <free+0x104>
    43c0:	13 82       	std	Z+3, r1	; 0x03
    43c2:	12 82       	std	Z+2, r1	; 0x02
    43c4:	b0 93 a9 04 	sts	0x04A9, r27	; 0x8004a9 <__brkval+0x1>
    43c8:	a0 93 a8 04 	sts	0x04A8, r26	; 0x8004a8 <__brkval>
    43cc:	df 91       	pop	r29
    43ce:	cf 91       	pop	r28
    43d0:	08 95       	ret

000043d2 <realloc>:
    43d2:	a0 e0       	ldi	r26, 0x00	; 0
    43d4:	b0 e0       	ldi	r27, 0x00	; 0
    43d6:	ef ee       	ldi	r30, 0xEF	; 239
    43d8:	f1 e2       	ldi	r31, 0x21	; 33
    43da:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <__prologue_saves__+0x8>
    43de:	ec 01       	movw	r28, r24
    43e0:	00 97       	sbiw	r24, 0x00	; 0
    43e2:	21 f4       	brne	.+8      	; 0x43ec <realloc+0x1a>
    43e4:	cb 01       	movw	r24, r22
    43e6:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
    43ea:	b4 c0       	rjmp	.+360    	; 0x4554 <realloc+0x182>
    43ec:	fc 01       	movw	r30, r24
    43ee:	e6 0f       	add	r30, r22
    43f0:	f7 1f       	adc	r31, r23
    43f2:	9c 01       	movw	r18, r24
    43f4:	22 50       	subi	r18, 0x02	; 2
    43f6:	31 09       	sbc	r19, r1
    43f8:	e2 17       	cp	r30, r18
    43fa:	f3 07       	cpc	r31, r19
    43fc:	08 f4       	brcc	.+2      	; 0x4400 <realloc+0x2e>
    43fe:	a8 c0       	rjmp	.+336    	; 0x4550 <realloc+0x17e>
    4400:	d9 01       	movw	r26, r18
    4402:	0d 91       	ld	r16, X+
    4404:	1c 91       	ld	r17, X
    4406:	11 97       	sbiw	r26, 0x01	; 1
    4408:	06 17       	cp	r16, r22
    440a:	17 07       	cpc	r17, r23
    440c:	b0 f0       	brcs	.+44     	; 0x443a <realloc+0x68>
    440e:	05 30       	cpi	r16, 0x05	; 5
    4410:	11 05       	cpc	r17, r1
    4412:	08 f4       	brcc	.+2      	; 0x4416 <realloc+0x44>
    4414:	9b c0       	rjmp	.+310    	; 0x454c <realloc+0x17a>
    4416:	c8 01       	movw	r24, r16
    4418:	04 97       	sbiw	r24, 0x04	; 4
    441a:	86 17       	cp	r24, r22
    441c:	97 07       	cpc	r25, r23
    441e:	08 f4       	brcc	.+2      	; 0x4422 <realloc+0x50>
    4420:	95 c0       	rjmp	.+298    	; 0x454c <realloc+0x17a>
    4422:	02 50       	subi	r16, 0x02	; 2
    4424:	11 09       	sbc	r17, r1
    4426:	06 1b       	sub	r16, r22
    4428:	17 0b       	sbc	r17, r23
    442a:	01 93       	st	Z+, r16
    442c:	11 93       	st	Z+, r17
    442e:	6d 93       	st	X+, r22
    4430:	7c 93       	st	X, r23
    4432:	cf 01       	movw	r24, r30
    4434:	0e 94 60 21 	call	0x42c0	; 0x42c0 <free>
    4438:	89 c0       	rjmp	.+274    	; 0x454c <realloc+0x17a>
    443a:	5b 01       	movw	r10, r22
    443c:	a0 1a       	sub	r10, r16
    443e:	b1 0a       	sbc	r11, r17
    4440:	4c 01       	movw	r8, r24
    4442:	80 0e       	add	r8, r16
    4444:	91 1e       	adc	r9, r17
    4446:	a0 91 aa 04 	lds	r26, 0x04AA	; 0x8004aa <__flp>
    444a:	b0 91 ab 04 	lds	r27, 0x04AB	; 0x8004ab <__flp+0x1>
    444e:	61 2c       	mov	r6, r1
    4450:	71 2c       	mov	r7, r1
    4452:	e1 2c       	mov	r14, r1
    4454:	f1 2c       	mov	r15, r1
    4456:	10 97       	sbiw	r26, 0x00	; 0
    4458:	09 f4       	brne	.+2      	; 0x445c <realloc+0x8a>
    445a:	46 c0       	rjmp	.+140    	; 0x44e8 <realloc+0x116>
    445c:	8d 91       	ld	r24, X+
    445e:	9c 91       	ld	r25, X
    4460:	11 97       	sbiw	r26, 0x01	; 1
    4462:	a8 15       	cp	r26, r8
    4464:	b9 05       	cpc	r27, r9
    4466:	b1 f5       	brne	.+108    	; 0x44d4 <realloc+0x102>
    4468:	6c 01       	movw	r12, r24
    446a:	42 e0       	ldi	r20, 0x02	; 2
    446c:	c4 0e       	add	r12, r20
    446e:	d1 1c       	adc	r13, r1
    4470:	ca 14       	cp	r12, r10
    4472:	db 04       	cpc	r13, r11
    4474:	78 f1       	brcs	.+94     	; 0x44d4 <realloc+0x102>
    4476:	4c 01       	movw	r8, r24
    4478:	8a 18       	sub	r8, r10
    447a:	9b 08       	sbc	r9, r11
    447c:	64 01       	movw	r12, r8
    447e:	42 e0       	ldi	r20, 0x02	; 2
    4480:	c4 0e       	add	r12, r20
    4482:	d1 1c       	adc	r13, r1
    4484:	12 96       	adiw	r26, 0x02	; 2
    4486:	bc 90       	ld	r11, X
    4488:	12 97       	sbiw	r26, 0x02	; 2
    448a:	13 96       	adiw	r26, 0x03	; 3
    448c:	ac 91       	ld	r26, X
    448e:	b5 e0       	ldi	r27, 0x05	; 5
    4490:	cb 16       	cp	r12, r27
    4492:	d1 04       	cpc	r13, r1
    4494:	40 f0       	brcs	.+16     	; 0x44a6 <realloc+0xd4>
    4496:	b2 82       	std	Z+2, r11	; 0x02
    4498:	a3 83       	std	Z+3, r26	; 0x03
    449a:	91 82       	std	Z+1, r9	; 0x01
    449c:	80 82       	st	Z, r8
    449e:	d9 01       	movw	r26, r18
    44a0:	6d 93       	st	X+, r22
    44a2:	7c 93       	st	X, r23
    44a4:	09 c0       	rjmp	.+18     	; 0x44b8 <realloc+0xe6>
    44a6:	0e 5f       	subi	r16, 0xFE	; 254
    44a8:	1f 4f       	sbci	r17, 0xFF	; 255
    44aa:	80 0f       	add	r24, r16
    44ac:	91 1f       	adc	r25, r17
    44ae:	f9 01       	movw	r30, r18
    44b0:	91 83       	std	Z+1, r25	; 0x01
    44b2:	80 83       	st	Z, r24
    44b4:	eb 2d       	mov	r30, r11
    44b6:	fa 2f       	mov	r31, r26
    44b8:	e1 14       	cp	r14, r1
    44ba:	f1 04       	cpc	r15, r1
    44bc:	31 f0       	breq	.+12     	; 0x44ca <realloc+0xf8>
    44be:	d7 01       	movw	r26, r14
    44c0:	13 96       	adiw	r26, 0x03	; 3
    44c2:	fc 93       	st	X, r31
    44c4:	ee 93       	st	-X, r30
    44c6:	12 97       	sbiw	r26, 0x02	; 2
    44c8:	41 c0       	rjmp	.+130    	; 0x454c <realloc+0x17a>
    44ca:	f0 93 ab 04 	sts	0x04AB, r31	; 0x8004ab <__flp+0x1>
    44ce:	e0 93 aa 04 	sts	0x04AA, r30	; 0x8004aa <__flp>
    44d2:	3c c0       	rjmp	.+120    	; 0x454c <realloc+0x17a>
    44d4:	68 16       	cp	r6, r24
    44d6:	79 06       	cpc	r7, r25
    44d8:	08 f4       	brcc	.+2      	; 0x44dc <realloc+0x10a>
    44da:	3c 01       	movw	r6, r24
    44dc:	7d 01       	movw	r14, r26
    44de:	12 96       	adiw	r26, 0x02	; 2
    44e0:	0d 90       	ld	r0, X+
    44e2:	bc 91       	ld	r27, X
    44e4:	a0 2d       	mov	r26, r0
    44e6:	b7 cf       	rjmp	.-146    	; 0x4456 <realloc+0x84>
    44e8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__brkval>
    44ec:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <__brkval+0x1>
    44f0:	88 16       	cp	r8, r24
    44f2:	99 06       	cpc	r9, r25
    44f4:	e1 f4       	brne	.+56     	; 0x452e <realloc+0x15c>
    44f6:	66 16       	cp	r6, r22
    44f8:	77 06       	cpc	r7, r23
    44fa:	c8 f4       	brcc	.+50     	; 0x452e <realloc+0x15c>
    44fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4500:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	41 f4       	brne	.+16     	; 0x4518 <realloc+0x146>
    4508:	8d b7       	in	r24, 0x3d	; 61
    450a:	9e b7       	in	r25, 0x3e	; 62
    450c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4510:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4514:	84 1b       	sub	r24, r20
    4516:	95 0b       	sbc	r25, r21
    4518:	e8 17       	cp	r30, r24
    451a:	f9 07       	cpc	r31, r25
    451c:	c8 f4       	brcc	.+50     	; 0x4550 <realloc+0x17e>
    451e:	f0 93 a9 04 	sts	0x04A9, r31	; 0x8004a9 <__brkval+0x1>
    4522:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <__brkval>
    4526:	f9 01       	movw	r30, r18
    4528:	71 83       	std	Z+1, r23	; 0x01
    452a:	60 83       	st	Z, r22
    452c:	0f c0       	rjmp	.+30     	; 0x454c <realloc+0x17a>
    452e:	cb 01       	movw	r24, r22
    4530:	0e 94 c8 20 	call	0x4190	; 0x4190 <malloc>
    4534:	7c 01       	movw	r14, r24
    4536:	00 97       	sbiw	r24, 0x00	; 0
    4538:	59 f0       	breq	.+22     	; 0x4550 <realloc+0x17e>
    453a:	a8 01       	movw	r20, r16
    453c:	be 01       	movw	r22, r28
    453e:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <memcpy>
    4542:	ce 01       	movw	r24, r28
    4544:	0e 94 60 21 	call	0x42c0	; 0x42c0 <free>
    4548:	c7 01       	movw	r24, r14
    454a:	04 c0       	rjmp	.+8      	; 0x4554 <realloc+0x182>
    454c:	ce 01       	movw	r24, r28
    454e:	02 c0       	rjmp	.+4      	; 0x4554 <realloc+0x182>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
    4558:	ee e0       	ldi	r30, 0x0E	; 14
    455a:	0c 94 71 23 	jmp	0x46e2	; 0x46e2 <__epilogue_restores__+0x8>

0000455e <atoi>:
    455e:	fc 01       	movw	r30, r24
    4560:	88 27       	eor	r24, r24
    4562:	99 27       	eor	r25, r25
    4564:	e8 94       	clt
    4566:	21 91       	ld	r18, Z+
    4568:	20 32       	cpi	r18, 0x20	; 32
    456a:	e9 f3       	breq	.-6      	; 0x4566 <atoi+0x8>
    456c:	29 30       	cpi	r18, 0x09	; 9
    456e:	10 f0       	brcs	.+4      	; 0x4574 <atoi+0x16>
    4570:	2e 30       	cpi	r18, 0x0E	; 14
    4572:	c8 f3       	brcs	.-14     	; 0x4566 <atoi+0x8>
    4574:	2b 32       	cpi	r18, 0x2B	; 43
    4576:	41 f0       	breq	.+16     	; 0x4588 <atoi+0x2a>
    4578:	2d 32       	cpi	r18, 0x2D	; 45
    457a:	39 f4       	brne	.+14     	; 0x458a <atoi+0x2c>
    457c:	68 94       	set
    457e:	04 c0       	rjmp	.+8      	; 0x4588 <atoi+0x2a>
    4580:	0e 94 1f 23 	call	0x463e	; 0x463e <__mulhi_const_10>
    4584:	82 0f       	add	r24, r18
    4586:	91 1d       	adc	r25, r1
    4588:	21 91       	ld	r18, Z+
    458a:	20 53       	subi	r18, 0x30	; 48
    458c:	2a 30       	cpi	r18, 0x0A	; 10
    458e:	c0 f3       	brcs	.-16     	; 0x4580 <atoi+0x22>
    4590:	1e f4       	brtc	.+6      	; 0x4598 <atoi+0x3a>
    4592:	90 95       	com	r25
    4594:	81 95       	neg	r24
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	08 95       	ret

0000459a <strcmp_P>:
    459a:	fb 01       	movw	r30, r22
    459c:	dc 01       	movw	r26, r24
    459e:	8d 91       	ld	r24, X+
    45a0:	05 90       	lpm	r0, Z+
    45a2:	80 19       	sub	r24, r0
    45a4:	01 10       	cpse	r0, r1
    45a6:	d9 f3       	breq	.-10     	; 0x459e <strcmp_P+0x4>
    45a8:	99 0b       	sbc	r25, r25
    45aa:	08 95       	ret

000045ac <__strlen_P>:
    45ac:	fc 01       	movw	r30, r24
    45ae:	05 90       	lpm	r0, Z+
    45b0:	00 20       	and	r0, r0
    45b2:	e9 f7       	brne	.-6      	; 0x45ae <__strlen_P+0x2>
    45b4:	80 95       	com	r24
    45b6:	90 95       	com	r25
    45b8:	8e 0f       	add	r24, r30
    45ba:	9f 1f       	adc	r25, r31
    45bc:	08 95       	ret

000045be <strstr_P>:
    45be:	fb 01       	movw	r30, r22
    45c0:	55 91       	lpm	r21, Z+
    45c2:	55 23       	and	r21, r21
    45c4:	a9 f0       	breq	.+42     	; 0x45f0 <strstr_P+0x32>
    45c6:	bf 01       	movw	r22, r30
    45c8:	dc 01       	movw	r26, r24
    45ca:	4d 91       	ld	r20, X+
    45cc:	45 17       	cp	r20, r21
    45ce:	41 11       	cpse	r20, r1
    45d0:	e1 f7       	brne	.-8      	; 0x45ca <strstr_P+0xc>
    45d2:	59 f4       	brne	.+22     	; 0x45ea <strstr_P+0x2c>
    45d4:	cd 01       	movw	r24, r26
    45d6:	05 90       	lpm	r0, Z+
    45d8:	00 20       	and	r0, r0
    45da:	49 f0       	breq	.+18     	; 0x45ee <strstr_P+0x30>
    45dc:	4d 91       	ld	r20, X+
    45de:	40 15       	cp	r20, r0
    45e0:	41 11       	cpse	r20, r1
    45e2:	c9 f3       	breq	.-14     	; 0x45d6 <strstr_P+0x18>
    45e4:	fb 01       	movw	r30, r22
    45e6:	41 11       	cpse	r20, r1
    45e8:	ef cf       	rjmp	.-34     	; 0x45c8 <strstr_P+0xa>
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	08 95       	ret

000045f2 <memcpy>:
    45f2:	fb 01       	movw	r30, r22
    45f4:	dc 01       	movw	r26, r24
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <memcpy+0xa>
    45f8:	01 90       	ld	r0, Z+
    45fa:	0d 92       	st	X+, r0
    45fc:	41 50       	subi	r20, 0x01	; 1
    45fe:	50 40       	sbci	r21, 0x00	; 0
    4600:	d8 f7       	brcc	.-10     	; 0x45f8 <memcpy+0x6>
    4602:	08 95       	ret

00004604 <strchr>:
    4604:	fc 01       	movw	r30, r24
    4606:	81 91       	ld	r24, Z+
    4608:	86 17       	cp	r24, r22
    460a:	21 f0       	breq	.+8      	; 0x4614 <strchr+0x10>
    460c:	88 23       	and	r24, r24
    460e:	d9 f7       	brne	.-10     	; 0x4606 <strchr+0x2>
    4610:	99 27       	eor	r25, r25
    4612:	08 95       	ret
    4614:	31 97       	sbiw	r30, 0x01	; 1
    4616:	cf 01       	movw	r24, r30
    4618:	08 95       	ret

0000461a <strcpy>:
    461a:	fb 01       	movw	r30, r22
    461c:	dc 01       	movw	r26, r24
    461e:	01 90       	ld	r0, Z+
    4620:	0d 92       	st	X+, r0
    4622:	00 20       	and	r0, r0
    4624:	e1 f7       	brne	.-8      	; 0x461e <strcpy+0x4>
    4626:	08 95       	ret

00004628 <__itoa_ncheck>:
    4628:	bb 27       	eor	r27, r27
    462a:	4a 30       	cpi	r20, 0x0A	; 10
    462c:	31 f4       	brne	.+12     	; 0x463a <__itoa_ncheck+0x12>
    462e:	99 23       	and	r25, r25
    4630:	22 f4       	brpl	.+8      	; 0x463a <__itoa_ncheck+0x12>
    4632:	bd e2       	ldi	r27, 0x2D	; 45
    4634:	90 95       	com	r25
    4636:	81 95       	neg	r24
    4638:	9f 4f       	sbci	r25, 0xFF	; 255
    463a:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__utoa_common>

0000463e <__mulhi_const_10>:
    463e:	7a e0       	ldi	r23, 0x0A	; 10
    4640:	97 9f       	mul	r25, r23
    4642:	90 2d       	mov	r25, r0
    4644:	87 9f       	mul	r24, r23
    4646:	80 2d       	mov	r24, r0
    4648:	91 0d       	add	r25, r1
    464a:	11 24       	eor	r1, r1
    464c:	08 95       	ret

0000464e <__utoa_ncheck>:
    464e:	bb 27       	eor	r27, r27

00004650 <__utoa_common>:
    4650:	fb 01       	movw	r30, r22
    4652:	55 27       	eor	r21, r21
    4654:	aa 27       	eor	r26, r26
    4656:	88 0f       	add	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	aa 1f       	adc	r26, r26
    465c:	a4 17       	cp	r26, r20
    465e:	10 f0       	brcs	.+4      	; 0x4664 <__utoa_common+0x14>
    4660:	a4 1b       	sub	r26, r20
    4662:	83 95       	inc	r24
    4664:	50 51       	subi	r21, 0x10	; 16
    4666:	b9 f7       	brne	.-18     	; 0x4656 <__utoa_common+0x6>
    4668:	a0 5d       	subi	r26, 0xD0	; 208
    466a:	aa 33       	cpi	r26, 0x3A	; 58
    466c:	08 f0       	brcs	.+2      	; 0x4670 <__utoa_common+0x20>
    466e:	a9 5d       	subi	r26, 0xD9	; 217
    4670:	a1 93       	st	Z+, r26
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	79 f7       	brne	.-34     	; 0x4654 <__utoa_common+0x4>
    4676:	b1 11       	cpse	r27, r1
    4678:	b1 93       	st	Z+, r27
    467a:	11 92       	st	Z+, r1
    467c:	cb 01       	movw	r24, r22
    467e:	0c 94 41 23 	jmp	0x4682	; 0x4682 <strrev>

00004682 <strrev>:
    4682:	dc 01       	movw	r26, r24
    4684:	fc 01       	movw	r30, r24
    4686:	67 2f       	mov	r22, r23
    4688:	71 91       	ld	r23, Z+
    468a:	77 23       	and	r23, r23
    468c:	e1 f7       	brne	.-8      	; 0x4686 <strrev+0x4>
    468e:	32 97       	sbiw	r30, 0x02	; 2
    4690:	04 c0       	rjmp	.+8      	; 0x469a <strrev+0x18>
    4692:	7c 91       	ld	r23, X
    4694:	6d 93       	st	X+, r22
    4696:	70 83       	st	Z, r23
    4698:	62 91       	ld	r22, -Z
    469a:	ae 17       	cp	r26, r30
    469c:	bf 07       	cpc	r27, r31
    469e:	c8 f3       	brcs	.-14     	; 0x4692 <strrev+0x10>
    46a0:	08 95       	ret

000046a2 <__prologue_saves__>:
    46a2:	2f 92       	push	r2
    46a4:	3f 92       	push	r3
    46a6:	4f 92       	push	r4
    46a8:	5f 92       	push	r5
    46aa:	6f 92       	push	r6
    46ac:	7f 92       	push	r7
    46ae:	8f 92       	push	r8
    46b0:	9f 92       	push	r9
    46b2:	af 92       	push	r10
    46b4:	bf 92       	push	r11
    46b6:	cf 92       	push	r12
    46b8:	df 92       	push	r13
    46ba:	ef 92       	push	r14
    46bc:	ff 92       	push	r15
    46be:	0f 93       	push	r16
    46c0:	1f 93       	push	r17
    46c2:	cf 93       	push	r28
    46c4:	df 93       	push	r29
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    46ca:	ca 1b       	sub	r28, r26
    46cc:	db 0b       	sbc	r29, r27
    46ce:	0f b6       	in	r0, 0x3f	; 63
    46d0:	f8 94       	cli
    46d2:	de bf       	out	0x3e, r29	; 62
    46d4:	0f be       	out	0x3f, r0	; 63
    46d6:	cd bf       	out	0x3d, r28	; 61
    46d8:	09 94       	ijmp

000046da <__epilogue_restores__>:
    46da:	2a 88       	ldd	r2, Y+18	; 0x12
    46dc:	39 88       	ldd	r3, Y+17	; 0x11
    46de:	48 88       	ldd	r4, Y+16	; 0x10
    46e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    46e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    46e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    46e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    46e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    46ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    46ec:	b9 84       	ldd	r11, Y+9	; 0x09
    46ee:	c8 84       	ldd	r12, Y+8	; 0x08
    46f0:	df 80       	ldd	r13, Y+7	; 0x07
    46f2:	ee 80       	ldd	r14, Y+6	; 0x06
    46f4:	fd 80       	ldd	r15, Y+5	; 0x05
    46f6:	0c 81       	ldd	r16, Y+4	; 0x04
    46f8:	1b 81       	ldd	r17, Y+3	; 0x03
    46fa:	aa 81       	ldd	r26, Y+2	; 0x02
    46fc:	b9 81       	ldd	r27, Y+1	; 0x01
    46fe:	ce 0f       	add	r28, r30
    4700:	d1 1d       	adc	r29, r1
    4702:	0f b6       	in	r0, 0x3f	; 63
    4704:	f8 94       	cli
    4706:	de bf       	out	0x3e, r29	; 62
    4708:	0f be       	out	0x3f, r0	; 63
    470a:	cd bf       	out	0x3d, r28	; 61
    470c:	ed 01       	movw	r28, r26
    470e:	08 95       	ret

00004710 <__do_global_dtors>:
    4710:	13 e0       	ldi	r17, 0x03	; 3
    4712:	c5 e8       	ldi	r28, 0x85	; 133
    4714:	d3 e0       	ldi	r29, 0x03	; 3
    4716:	04 c0       	rjmp	.+8      	; 0x4720 <__do_global_dtors+0x10>
    4718:	fe 01       	movw	r30, r28
    471a:	0e 94 c2 20 	call	0x4184	; 0x4184 <__tablejump2__>
    471e:	21 96       	adiw	r28, 0x01	; 1
    4720:	c6 38       	cpi	r28, 0x86	; 134
    4722:	d1 07       	cpc	r29, r17
    4724:	c9 f7       	brne	.-14     	; 0x4718 <__do_global_dtors+0x8>
    4726:	f8 94       	cli

00004728 <__stop_program>:
    4728:	ff cf       	rjmp	.-2      	; 0x4728 <__stop_program>
