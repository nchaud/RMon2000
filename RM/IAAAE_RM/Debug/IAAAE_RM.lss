
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00002cfa  00002d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d5  008001a2  008001a2  00002e30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000920  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a3dd  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f21  00000000  00000000  0001db9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005534  00000000  00000000  00021abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000215c  00000000  00000000  00026ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005089  00000000  00000000  00029150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bb1b  00000000  00000000  0002e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c0  00000000  00000000  00039cf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__ctors_end>
       4:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
       8:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
       c:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__vector_3>
      10:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__vector_3>
      14:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__vector_3>
      18:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      1c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      20:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      24:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      28:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      2c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      30:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      34:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      38:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      3c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      40:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_16>
      44:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      48:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_18>
      4c:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_19>
      50:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      54:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      58:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      5c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>
      60:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_24>
      64:	0c 94 36 02 	jmp	0x46c	; 0x46c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     166:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

0000016f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     16f:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000177 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     177:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000180 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     180:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000188 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     188:	41 54 2b 43 53 51 00                                AT+CSQ.

0000018f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     18f:	2b 43 53 51 3a 20 00                                +CSQ: .

00000196 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     196:	41 54 2b 43 53 51 00                                AT+CSQ.

0000019d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     19d:	2b 43 53 51 3a 20 00                                +CSQ: .

000001a4 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     1a4:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000001af <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     1af:	09 3c 2d 2d 2d 20 00                                .<--- .

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     1b6:	09 2d 2d 2d 3e 20 00                                .---> .

000001bd <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     1bd:	41 54 45 30 00                                      ATE0.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     1c2:	41 54 45 30 00                                      ATE0.

000001c7 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     1c7:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1d7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001e6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1e6:	41 54 00                                            AT.

000001e9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1e9:	41 54 00                                            AT.

000001ec <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1ec:	41 54 00                                            AT.

000001ef <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1ef:	41 54 00                                            AT.

000001f2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1f2:	41 54 00                                            AT.

000001f5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1f5:	41 54 00                                            AT.

000001f8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1f8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     208:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000219 <_ZZN13Adafruit_FONAC4EabE3__c_1>:
     219:	4f 4b 00                                            OK.

0000021c <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     21c:	46 4f 4e 41 00                                      FONA.

00000221 <_ZZN13Adafruit_FONAC4EabE3__c>:
     221:	46 4f 4e 41 6e 65 74 00                             FONAnet.

00000229 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     229:	54 65 6d 70 3d 00                                   Temp=.

0000022f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     22f:	20 7c 20 00                                          | .

00000233 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     233:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000023c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     23c:	20 7c 20 00                                          | .

00000240 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     240:	50 56 2d 56 3d 00                                   PV-V=.

00000246 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     246:	20 7c 20 00                                          | .

0000024a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     24a:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000252 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     252:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

0000025f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     25f:	20 7c 20 00                                          | .

00000263 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     263:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000026c <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     26c:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000276 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     276:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     286:	6f 64 65 3d 00                                      ode=.

0000028b <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     28b:	20 7c 20 00                                          | .

0000028f <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     28f:	42 45 52 3d 00                                      BER=.

00000294 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     294:	20 7c 20 00                                          | .

00000298 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     298:	52 53 53 49 3d 00                                   RSSI=.

0000029e <_ZZ4loopE3__c>:
     29e:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000002a8 <_ZZ8sendDatavE3__c_1>:
     2a8:	53 69 67 6e 61 6c 20 69 73 20 00                    Signal is .

000002b3 <_ZZ8sendDatavE3__c_0>:
     2b3:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     2c3:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     2d3:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

000002e2 <_ZZ8sendDatavE3__c>:
     2e2:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     2f2:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

00000303 <_ZZ12takeReadingsvE3__c>:
     303:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     313:	2e 2e 00                                            ...

00000316 <_ZZ21ensureFonaInitialisedbE3__c_2>:
     316:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     326:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

00000331 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     331:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     341:	73 2e 2e 2e 00                                      s....

00000346 <_ZZ21ensureFonaInitialisedbE3__c_0>:
     346:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     356:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

00000361 <_ZZ21ensureFonaInitialisedbE3__c>:
     361:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     371:	61 2e 2e 2e 00                                      a....

00000376 <_ZZ5setupE3__c_0>:
     376:	2a 2a 2a 20 46 41 49 4c 20 45 47 54 20 2d 20 46     *** FAIL EGT - F
     386:	4f 4e 41 20 49 4e 49 54 20 45 52 52 4f 52 20 2a     ONA INIT ERROR *
     396:	2a 2a 00                                            **.

00000399 <_ZZ5setupE3__c>:
     399:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000003a5 <_ZZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONAE3__c>:
     3a5:	54 45 53 54 3a 20 43 68 65 63 6b 69 6e 67 20 72     TEST: Checking r
     3b5:	73 73 69 2e 2e 2e 00                                ssi....

000003bc <digital_pin_to_timer_PGM>:
     3bc:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3cc:	00 00 00 00                                         ....

000003d0 <digital_pin_to_bit_mask_PGM>:
     3d0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3e0:	04 08 10 20                                         ... 

000003e4 <digital_pin_to_port_PGM>:
     3e4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3f4:	03 03 03 03                                         ....

000003f8 <port_to_input_PGM>:
     3f8:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000402 <port_to_output_PGM>:
     402:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000040c <port_to_mode_PGM>:
     40c:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000416 <__ctors_start>:
     416:	0e 0a       	sbc	r0, r30
     418:	fd 0c       	add	r15, r13
     41a:	b7 0e       	add	r11, r23

0000041c <__ctors_end>:
     41c:	11 24       	eor	r1, r1
     41e:	1f be       	out	0x3f, r1	; 63
     420:	cf ef       	ldi	r28, 0xFF	; 255
     422:	d8 e0       	ldi	r29, 0x08	; 8
     424:	de bf       	out	0x3e, r29	; 62
     426:	cd bf       	out	0x3d, r28	; 61

00000428 <__do_copy_data>:
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	ea ef       	ldi	r30, 0xFA	; 250
     430:	fc e2       	ldi	r31, 0x2C	; 44
     432:	02 c0       	rjmp	.+4      	; 0x438 <__do_copy_data+0x10>
     434:	05 90       	lpm	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	a2 3a       	cpi	r26, 0xA2	; 162
     43a:	b1 07       	cpc	r27, r17
     43c:	d9 f7       	brne	.-10     	; 0x434 <__do_copy_data+0xc>

0000043e <__do_clear_bss>:
     43e:	24 e0       	ldi	r18, 0x04	; 4
     440:	a2 ea       	ldi	r26, 0xA2	; 162
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	01 c0       	rjmp	.+2      	; 0x448 <.do_clear_bss_start>

00000446 <.do_clear_bss_loop>:
     446:	1d 92       	st	X+, r1

00000448 <.do_clear_bss_start>:
     448:	a7 37       	cpi	r26, 0x77	; 119
     44a:	b2 07       	cpc	r27, r18
     44c:	e1 f7       	brne	.-8      	; 0x446 <.do_clear_bss_loop>

0000044e <__do_global_ctors>:
     44e:	12 e0       	ldi	r17, 0x02	; 2
     450:	ce e0       	ldi	r28, 0x0E	; 14
     452:	d2 e0       	ldi	r29, 0x02	; 2
     454:	04 c0       	rjmp	.+8      	; 0x45e <__do_global_ctors+0x10>
     456:	21 97       	sbiw	r28, 0x01	; 1
     458:	fe 01       	movw	r30, r28
     45a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__tablejump2__>
     45e:	cb 30       	cpi	r28, 0x0B	; 11
     460:	d1 07       	cpc	r29, r17
     462:	c9 f7       	brne	.-14     	; 0x456 <__do_global_ctors+0x8>
     464:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <main>
     468:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <_exit>

0000046c <__bad_interrupt>:
     46c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000470 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     470:	87 5e       	subi	r24, 0xE7	; 231
     472:	9e 4f       	sbci	r25, 0xFE	; 254
     474:	dc 01       	movw	r26, r24
     476:	8d 91       	ld	r24, X+
     478:	9c 91       	ld	r25, X
     47a:	dc 01       	movw	r26, r24
     47c:	ed 91       	ld	r30, X+
     47e:	fc 91       	ld	r31, X
     480:	04 80       	ldd	r0, Z+4	; 0x04
     482:	f5 81       	ldd	r31, Z+5	; 0x05
     484:	e0 2d       	mov	r30, r0
     486:	09 94       	ijmp

00000488 <_ZN13Adafruit_FONA5writeEh>:
     488:	87 5e       	subi	r24, 0xE7	; 231
     48a:	9e 4f       	sbci	r25, 0xFE	; 254
     48c:	dc 01       	movw	r26, r24
     48e:	8d 91       	ld	r24, X+
     490:	9c 91       	ld	r25, X
     492:	dc 01       	movw	r26, r24
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	01 90       	ld	r0, Z+
     49a:	f0 81       	ld	r31, Z
     49c:	e0 2d       	mov	r30, r0
     49e:	09 94       	ijmp

000004a0 <_ZN13Adafruit_FONA4readEv>:
     4a0:	87 5e       	subi	r24, 0xE7	; 231
     4a2:	9e 4f       	sbci	r25, 0xFE	; 254
     4a4:	dc 01       	movw	r26, r24
     4a6:	8d 91       	ld	r24, X+
     4a8:	9c 91       	ld	r25, X
     4aa:	dc 01       	movw	r26, r24
     4ac:	ed 91       	ld	r30, X+
     4ae:	fc 91       	ld	r31, X
     4b0:	06 80       	ldd	r0, Z+6	; 0x06
     4b2:	f7 81       	ldd	r31, Z+7	; 0x07
     4b4:	e0 2d       	mov	r30, r0
     4b6:	09 94       	ijmp

000004b8 <_ZN13Adafruit_FONA4peekEv>:
     4b8:	87 5e       	subi	r24, 0xE7	; 231
     4ba:	9e 4f       	sbci	r25, 0xFE	; 254
     4bc:	dc 01       	movw	r26, r24
     4be:	8d 91       	ld	r24, X+
     4c0:	9c 91       	ld	r25, X
     4c2:	dc 01       	movw	r26, r24
     4c4:	ed 91       	ld	r30, X+
     4c6:	fc 91       	ld	r31, X
     4c8:	00 84       	ldd	r0, Z+8	; 0x08
     4ca:	f1 85       	ldd	r31, Z+9	; 0x09
     4cc:	e0 2d       	mov	r30, r0
     4ce:	09 94       	ijmp

000004d0 <_ZN13Adafruit_FONA5flushEv>:
     4d0:	87 5e       	subi	r24, 0xE7	; 231
     4d2:	9e 4f       	sbci	r25, 0xFE	; 254
     4d4:	dc 01       	movw	r26, r24
     4d6:	8d 91       	ld	r24, X+
     4d8:	9c 91       	ld	r25, X
     4da:	dc 01       	movw	r26, r24
     4dc:	ed 91       	ld	r30, X+
     4de:	fc 91       	ld	r31, X
     4e0:	02 84       	ldd	r0, Z+10	; 0x0a
     4e2:	f3 85       	ldd	r31, Z+11	; 0x0b
     4e4:	e0 2d       	mov	r30, r0
     4e6:	09 94       	ijmp

000004e8 <_ZN13Adafruit_FONAC1Eab>:
     4e8:	fc 01       	movw	r30, r24
     4ea:	13 82       	std	Z+3, r1	; 0x03
     4ec:	12 82       	std	Z+2, r1	; 0x02
     4ee:	88 ee       	ldi	r24, 0xE8	; 232
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	84 83       	std	Z+4, r24	; 0x04
     4f8:	95 83       	std	Z+5, r25	; 0x05
     4fa:	a6 83       	std	Z+6, r26	; 0x06
     4fc:	b7 83       	std	Z+7, r27	; 0x07
     4fe:	84 e4       	ldi	r24, 0x44	; 68
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	91 83       	std	Z+1, r25	; 0x01
     504:	80 83       	st	Z, r24
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	86 87       	std	Z+14, r24	; 0x0e
     50a:	64 87       	std	Z+12, r22	; 0x0c
     50c:	45 87       	std	Z+13, r20	; 0x0d
     50e:	df 01       	movw	r26, r30
     510:	a2 5f       	subi	r26, 0xF2	; 242
     512:	be 4f       	sbci	r27, 0xFE	; 254
     514:	81 e2       	ldi	r24, 0x21	; 33
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	9c 93       	st	X, r25
     51c:	8e 93       	st	-X, r24
     51e:	12 96       	adiw	r26, 0x02	; 2
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	1c 92       	st	X, r1
     524:	1e 92       	st	-X, r1
     526:	12 96       	adiw	r26, 0x02	; 2
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	1c 92       	st	X, r1
     52c:	1e 92       	st	-X, r1
     52e:	17 96       	adiw	r26, 0x07	; 7
     530:	11 96       	adiw	r26, 0x01	; 1
     532:	1c 92       	st	X, r1
     534:	1e 92       	st	-X, r1
     536:	15 97       	sbiw	r26, 0x05	; 5
     538:	1c 92       	st	X, r1
     53a:	11 96       	adiw	r26, 0x01	; 1
     53c:	8c e1       	ldi	r24, 0x1C	; 28
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	8d 93       	st	X+, r24
     542:	9c 93       	st	X, r25
     544:	e9 5e       	subi	r30, 0xE9	; 233
     546:	fe 4f       	sbci	r31, 0xFE	; 254
     548:	89 e1       	ldi	r24, 0x19	; 25
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	91 83       	std	Z+1, r25	; 0x01
     54e:	80 83       	st	Z, r24
     550:	08 95       	ret

00000552 <_ZN13Adafruit_FONA10flushInputEv>:
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	ec 01       	movw	r28, r24
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	8c 01       	movw	r16, r24
     562:	0f 5f       	subi	r16, 0xFF	; 255
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	88 97       	sbiw	r24, 0x28	; 40
     568:	d8 f4       	brcc	.+54     	; 0x5a0 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     56a:	e8 81       	ld	r30, Y
     56c:	f9 81       	ldd	r31, Y+1	; 0x01
     56e:	04 80       	ldd	r0, Z+4	; 0x04
     570:	f5 81       	ldd	r31, Z+5	; 0x05
     572:	e0 2d       	mov	r30, r0
     574:	ce 01       	movw	r24, r28
     576:	09 95       	icall
     578:	89 2b       	or	r24, r25
     57a:	51 f0       	breq	.+20     	; 0x590 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     57c:	e8 81       	ld	r30, Y
     57e:	f9 81       	ldd	r31, Y+1	; 0x01
     580:	06 80       	ldd	r0, Z+6	; 0x06
     582:	f7 81       	ldd	r31, Z+7	; 0x07
     584:	e0 2d       	mov	r30, r0
     586:	ce 01       	movw	r24, r28
     588:	09 95       	icall
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	ed cf       	rjmp	.-38     	; 0x56a <_ZN13Adafruit_FONA10flushInputEv+0x18>
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     59c:	c8 01       	movw	r24, r16
     59e:	e0 cf       	rjmp	.-64     	; 0x560 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <_ZN13Adafruit_FONA8readlineEjb>:
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	7c 01       	movw	r14, r24
     5be:	b4 2e       	mov	r11, r20
     5c0:	8b 01       	movw	r16, r22
     5c2:	00 0f       	add	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	00 0f       	add	r16, r16
     5c8:	11 1f       	adc	r17, r17
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	d0 e0       	ldi	r29, 0x00	; 0
     5ce:	67 01       	movw	r12, r14
     5d0:	87 ee       	ldi	r24, 0xE7	; 231
     5d2:	c8 1a       	sub	r12, r24
     5d4:	8e ef       	ldi	r24, 0xFE	; 254
     5d6:	d8 0a       	sbc	r13, r24
     5d8:	01 15       	cp	r16, r1
     5da:	11 05       	cpc	r17, r1
     5dc:	c9 f1       	breq	.+114    	; 0x650 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     5de:	ce 3f       	cpi	r28, 0xFE	; 254
     5e0:	d1 05       	cpc	r29, r1
     5e2:	98 f0       	brcs	.+38     	; 0x60a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     5e4:	64 e8       	ldi	r22, 0x84	; 132
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	89 e8       	ldi	r24, 0x89	; 137
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
     5f0:	2f c0       	rjmp	.+94     	; 0x650 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     5f2:	f6 01       	movw	r30, r12
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	dc 01       	movw	r26, r24
     5fa:	ed 91       	ld	r30, X+
     5fc:	fc 91       	ld	r31, X
     5fe:	06 80       	ldd	r0, Z+6	; 0x06
     600:	f7 81       	ldd	r31, Z+7	; 0x07
     602:	e0 2d       	mov	r30, r0
     604:	09 95       	icall
     606:	8d 30       	cpi	r24, 0x0D	; 13
     608:	69 f4       	brne	.+26     	; 0x624 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     60a:	d6 01       	movw	r26, r12
     60c:	8d 91       	ld	r24, X+
     60e:	9c 91       	ld	r25, X
     610:	dc 01       	movw	r26, r24
     612:	ed 91       	ld	r30, X+
     614:	fc 91       	ld	r31, X
     616:	04 80       	ldd	r0, Z+4	; 0x04
     618:	f5 81       	ldd	r31, Z+5	; 0x05
     61a:	e0 2d       	mov	r30, r0
     61c:	09 95       	icall
     61e:	89 2b       	or	r24, r25
     620:	41 f7       	brne	.-48     	; 0x5f2 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     622:	0c c0       	rjmp	.+24     	; 0x63c <_ZN13Adafruit_FONA8readlineEjb+0x92>
     624:	8a 30       	cpi	r24, 0x0A	; 10
     626:	21 f4       	brne	.+8      	; 0x630 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     628:	20 97       	sbiw	r28, 0x00	; 0
     62a:	79 f3       	breq	.-34     	; 0x60a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     62c:	bb 20       	and	r11, r11
     62e:	81 f0       	breq	.+32     	; 0x650 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     630:	f7 01       	movw	r30, r14
     632:	ec 0f       	add	r30, r28
     634:	fd 1f       	adc	r31, r29
     636:	87 87       	std	Z+15, r24	; 0x0f
     638:	21 96       	adiw	r28, 0x01	; 1
     63a:	e7 cf       	rjmp	.-50     	; 0x60a <_ZN13Adafruit_FONA8readlineEjb+0x60>
     63c:	01 50       	subi	r16, 0x01	; 1
     63e:	11 09       	sbc	r17, r1
     640:	39 f0       	breq	.+14     	; 0x650 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     64e:	c4 cf       	rjmp	.-120    	; 0x5d8 <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     650:	f7 01       	movw	r30, r14
     652:	ec 0f       	add	r30, r28
     654:	fd 1f       	adc	r31, r29
     656:	17 86       	std	Z+15, r1	; 0x0f
     658:	8c 2f       	mov	r24, r28
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	08 95       	ret

0000066e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
     678:	8b 01       	movw	r16, r22
     67a:	ba 01       	movw	r22, r20
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN13Adafruit_FONA8readlineEjb>
     682:	6a e8       	ldi	r22, 0x8A	; 138
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	89 e8       	ldi	r24, 0x89	; 137
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     68e:	2f 96       	adiw	r28, 0x0f	; 15
     690:	be 01       	movw	r22, r28
     692:	89 e8       	ldi	r24, 0x89	; 137
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     69a:	b8 01       	movw	r22, r16
     69c:	ce 01       	movw	r24, r28
     69e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <strcmp_P>
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	89 2b       	or	r24, r25
     6a6:	09 f0       	breq	.+2      	; 0x6aa <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	82 2f       	mov	r24, r18
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	08 95       	ret

000006b6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	8b 01       	movw	r16, r22
     6c6:	7a 01       	movw	r14, r20
     6c8:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN13Adafruit_FONA10flushInputEv>
     6cc:	6d e7       	ldi	r22, 0x7D	; 125
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	89 e8       	ldi	r24, 0x89	; 137
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     6d8:	b8 01       	movw	r22, r16
     6da:	89 e8       	ldi	r24, 0x89	; 137
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
     6e2:	fe 01       	movw	r30, r28
     6e4:	e7 5e       	subi	r30, 0xE7	; 231
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	b8 01       	movw	r22, r16
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	b7 01       	movw	r22, r14
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN13Adafruit_FONA8readlineEjb>
     6fc:	18 2f       	mov	r17, r24
     6fe:	66 e7       	ldi	r22, 0x76	; 118
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	89 e8       	ldi	r24, 0x89	; 137
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     70a:	be 01       	movw	r22, r28
     70c:	61 5f       	subi	r22, 0xF1	; 241
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	89 e8       	ldi	r24, 0x89	; 137
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     718:	81 2f       	mov	r24, r17
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	08 95       	ret

00000728 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	ec 01       	movw	r28, r24
     73e:	6b 01       	movw	r12, r22
     740:	7a 01       	movw	r14, r20
     742:	59 01       	movw	r10, r18
     744:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN13Adafruit_FONA10flushInputEv>
     748:	6f e6       	ldi	r22, 0x6F	; 111
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	89 e8       	ldi	r24, 0x89	; 137
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     754:	b6 01       	movw	r22, r12
     756:	89 e8       	ldi	r24, 0x89	; 137
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     75e:	62 e2       	ldi	r22, 0x22	; 34
     760:	89 e8       	ldi	r24, 0x89	; 137
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_ZN5Print5printEc>
     768:	b7 01       	movw	r22, r14
     76a:	89 e8       	ldi	r24, 0x89	; 137
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     772:	62 e2       	ldi	r22, 0x22	; 34
     774:	89 e8       	ldi	r24, 0x89	; 137
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN5Print7printlnEc>
     77c:	8e 01       	movw	r16, r28
     77e:	07 5e       	subi	r16, 0xE7	; 231
     780:	1e 4f       	sbci	r17, 0xFE	; 254
     782:	b6 01       	movw	r22, r12
     784:	f8 01       	movw	r30, r16
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     78e:	62 e2       	ldi	r22, 0x22	; 34
     790:	f8 01       	movw	r30, r16
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_ZN5Print5printEc>
     79a:	b7 01       	movw	r22, r14
     79c:	f8 01       	movw	r30, r16
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     7a6:	62 e2       	ldi	r22, 0x22	; 34
     7a8:	f8 01       	movw	r30, r16
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN5Print7printlnEc>
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	b5 01       	movw	r22, r10
     7b6:	ce 01       	movw	r24, r28
     7b8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN13Adafruit_FONA8readlineEjb>
     7bc:	18 2f       	mov	r17, r24
     7be:	68 e6       	ldi	r22, 0x68	; 104
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	89 e8       	ldi	r24, 0x89	; 137
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     7ca:	be 01       	movw	r22, r28
     7cc:	61 5f       	subi	r22, 0xF1	; 241
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	89 e8       	ldi	r24, 0x89	; 137
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     7d8:	81 2f       	mov	r24, r17
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	08 95       	ret

000007f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
     7fa:	8a 01       	movw	r16, r20
     7fc:	a9 01       	movw	r20, r18
     7fe:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     802:	88 23       	and	r24, r24
     804:	41 f0       	breq	.+16     	; 0x816 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     806:	b8 01       	movw	r22, r16
     808:	ce 01       	movw	r24, r28
     80a:	0f 96       	adiw	r24, 0x0f	; 15
     80c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <strcmp_P>
     810:	21 e0       	ldi	r18, 0x01	; 1
     812:	89 2b       	or	r24, r25
     814:	09 f0       	breq	.+2      	; 0x818 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	82 2f       	mov	r24, r18
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <_ZN13Adafruit_FONA5beginEhh>:
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	ec 01       	movw	r28, r24
     836:	f6 2e       	mov	r15, r22
     838:	e4 2e       	mov	r14, r20
     83a:	8f e1       	ldi	r24, 0x1F	; 31
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_Znwj>
     842:	8c 01       	movw	r16, r24
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	4e 2d       	mov	r20, r14
     848:	6f 2d       	mov	r22, r15
     84a:	0e 94 c8 13 	call	0x2790	; 0x2790 <_ZN14SoftwareSerialC1Ehhb>
     84e:	40 ec       	ldi	r20, 0xC0	; 192
     850:	52 e1       	ldi	r21, 0x12	; 18
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	c8 01       	movw	r24, r16
     858:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <_ZN14SoftwareSerial5beginEl>
     85c:	7e 01       	movw	r14, r28
     85e:	87 ee       	ldi	r24, 0xE7	; 231
     860:	e8 1a       	sub	r14, r24
     862:	8e ef       	ldi	r24, 0xFE	; 254
     864:	f8 0a       	sbc	r15, r24
     866:	d7 01       	movw	r26, r14
     868:	0d 93       	st	X+, r16
     86a:	1c 93       	st	X, r17
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	8c 85       	ldd	r24, Y+12	; 0x0c
     870:	0e 94 b0 11 	call	0x2360	; 0x2360 <pinMode>
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	8c 85       	ldd	r24, Y+12	; 0x0c
     878:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
     87c:	6a e0       	ldi	r22, 0x0A	; 10
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	8c 85       	ldd	r24, Y+12	; 0x0c
     88c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
     890:	64 e6       	ldi	r22, 0x64	; 100
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	8c 85       	ldd	r24, Y+12	; 0x0c
     8a0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
     8a4:	68 ef       	ldi	r22, 0xF8	; 248
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	89 e8       	ldi	r24, 0x89	; 137
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
     8b0:	8e e0       	ldi	r24, 0x0E	; 14
     8b2:	c8 2e       	mov	r12, r24
     8b4:	d1 2c       	mov	r13, r1
     8b6:	8e 01       	movw	r16, r28
     8b8:	09 5e       	subi	r16, 0xE9	; 233
     8ba:	1e 4f       	sbci	r17, 0xFE	; 254
     8bc:	f7 01       	movw	r30, r14
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	dc 01       	movw	r26, r24
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	04 80       	ldd	r0, Z+4	; 0x04
     8ca:	f5 81       	ldd	r31, Z+5	; 0x05
     8cc:	e0 2d       	mov	r30, r0
     8ce:	09 95       	icall
     8d0:	89 2b       	or	r24, r25
     8d2:	59 f0       	breq	.+22     	; 0x8ea <_ZN13Adafruit_FONA5beginEhh+0xc6>
     8d4:	f7 01       	movw	r30, r14
     8d6:	80 81       	ld	r24, Z
     8d8:	91 81       	ldd	r25, Z+1	; 0x01
     8da:	dc 01       	movw	r26, r24
     8dc:	ed 91       	ld	r30, X+
     8de:	fc 91       	ld	r31, X
     8e0:	06 80       	ldd	r0, Z+6	; 0x06
     8e2:	f7 81       	ldd	r31, Z+7	; 0x07
     8e4:	e0 2d       	mov	r30, r0
     8e6:	09 95       	icall
     8e8:	e9 cf       	rjmp	.-46     	; 0x8bc <_ZN13Adafruit_FONA5beginEhh+0x98>
     8ea:	f8 01       	movw	r30, r16
     8ec:	40 81       	ld	r20, Z
     8ee:	51 81       	ldd	r21, Z+1	; 0x01
     8f0:	24 ef       	ldi	r18, 0xF4	; 244
     8f2:	31 e0       	ldi	r19, 0x01	; 1
     8f4:	65 ef       	ldi	r22, 0xF5	; 245
     8f6:	71 e0       	ldi	r23, 0x01	; 1
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     8fe:	81 11       	cpse	r24, r1
     900:	34 c0       	rjmp	.+104    	; 0x96a <__stack+0x6b>
     902:	d7 01       	movw	r26, r14
     904:	8d 91       	ld	r24, X+
     906:	9c 91       	ld	r25, X
     908:	dc 01       	movw	r26, r24
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	04 80       	ldd	r0, Z+4	; 0x04
     910:	f5 81       	ldd	r31, Z+5	; 0x05
     912:	e0 2d       	mov	r30, r0
     914:	09 95       	icall
     916:	89 2b       	or	r24, r25
     918:	59 f0       	breq	.+22     	; 0x930 <__stack+0x31>
     91a:	f7 01       	movw	r30, r14
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	dc 01       	movw	r26, r24
     922:	ed 91       	ld	r30, X+
     924:	fc 91       	ld	r31, X
     926:	06 80       	ldd	r0, Z+6	; 0x06
     928:	f7 81       	ldd	r31, Z+7	; 0x07
     92a:	e0 2d       	mov	r30, r0
     92c:	09 95       	icall
     92e:	e9 cf       	rjmp	.-46     	; 0x902 <__stack+0x3>
     930:	24 ef       	ldi	r18, 0xF4	; 244
     932:	31 e0       	ldi	r19, 0x01	; 1
     934:	42 ef       	ldi	r20, 0xF2	; 242
     936:	51 e0       	ldi	r21, 0x01	; 1
     938:	6f ee       	ldi	r22, 0xEF	; 239
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	ce 01       	movw	r24, r28
     93e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     942:	81 11       	cpse	r24, r1
     944:	12 c0       	rjmp	.+36     	; 0x96a <__stack+0x6b>
     946:	64 ef       	ldi	r22, 0xF4	; 244
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     952:	b1 e0       	ldi	r27, 0x01	; 1
     954:	cb 1a       	sub	r12, r27
     956:	d1 08       	sbc	r13, r1
     958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
     95a:	b0 cf       	rjmp	.-160    	; 0x8bc <_ZN13Adafruit_FONA5beginEhh+0x98>
     95c:	5e c0       	rjmp	.+188    	; 0xa1a <__stack+0x11b>
     95e:	64 e6       	ldi	r22, 0x64	; 100
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     96a:	f8 01       	movw	r30, r16
     96c:	40 81       	ld	r20, Z
     96e:	51 81       	ldd	r21, Z+1	; 0x01
     970:	24 ef       	ldi	r18, 0xF4	; 244
     972:	31 e0       	ldi	r19, 0x01	; 1
     974:	62 ec       	ldi	r22, 0xC2	; 194
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	ce 01       	movw	r24, r28
     97a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     97e:	64 e6       	ldi	r22, 0x64	; 100
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     98a:	d8 01       	movw	r26, r16
     98c:	4d 91       	ld	r20, X+
     98e:	5c 91       	ld	r21, X
     990:	24 ef       	ldi	r18, 0xF4	; 244
     992:	31 e0       	ldi	r19, 0x01	; 1
     994:	6d eb       	ldi	r22, 0xBD	; 189
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	ce 01       	movw	r24, r28
     99a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     99e:	81 11       	cpse	r24, r1
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
     9a2:	12 e0       	ldi	r17, 0x02	; 2
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <__stack+0xa9>
     9a6:	11 e0       	ldi	r17, 0x01	; 1
     9a8:	64 e6       	ldi	r22, 0x64	; 100
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     9b4:	ce 01       	movw	r24, r28
     9b6:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN13Adafruit_FONA10flushInputEv>
     9ba:	66 eb       	ldi	r22, 0xB6	; 182
     9bc:	71 e0       	ldi	r23, 0x01	; 1
     9be:	89 e8       	ldi	r24, 0x89	; 137
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     9c6:	61 e1       	ldi	r22, 0x11	; 17
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	89 e8       	ldi	r24, 0x89	; 137
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     9d2:	61 e1       	ldi	r22, 0x11	; 17
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	f7 01       	movw	r30, r14
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	64 ef       	ldi	r22, 0xF4	; 244
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN13Adafruit_FONA8readlineEjb>
     9ec:	6f ea       	ldi	r22, 0xAF	; 175
     9ee:	71 e0       	ldi	r23, 0x01	; 1
     9f0:	89 e8       	ldi	r24, 0x89	; 137
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     9f8:	2f 96       	adiw	r28, 0x0f	; 15
     9fa:	be 01       	movw	r22, r28
     9fc:	89 e8       	ldi	r24, 0x89	; 137
     9fe:	93 e0       	ldi	r25, 0x03	; 3
     a00:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     a04:	64 ea       	ldi	r22, 0xA4	; 164
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <strstr_P>
     a0e:	89 2b       	or	r24, r25
     a10:	11 f0       	breq	.+4      	; 0xa16 <__stack+0x117>
     a12:	81 2f       	mov	r24, r17
     a14:	35 c0       	rjmp	.+106    	; 0xa80 <__stack+0x181>
     a16:	84 e0       	ldi	r24, 0x04	; 4
     a18:	33 c0       	rjmp	.+102    	; 0xa80 <__stack+0x181>
     a1a:	d8 01       	movw	r26, r16
     a1c:	4d 91       	ld	r20, X+
     a1e:	5c 91       	ld	r21, X
     a20:	24 ef       	ldi	r18, 0xF4	; 244
     a22:	31 e0       	ldi	r19, 0x01	; 1
     a24:	6c ee       	ldi	r22, 0xEC	; 236
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	ce 01       	movw	r24, r28
     a2a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     a2e:	64 e6       	ldi	r22, 0x64	; 100
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     a3a:	f8 01       	movw	r30, r16
     a3c:	40 81       	ld	r20, Z
     a3e:	51 81       	ldd	r21, Z+1	; 0x01
     a40:	24 ef       	ldi	r18, 0xF4	; 244
     a42:	31 e0       	ldi	r19, 0x01	; 1
     a44:	69 ee       	ldi	r22, 0xE9	; 233
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	ce 01       	movw	r24, r28
     a4a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     a4e:	64 e6       	ldi	r22, 0x64	; 100
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
     a5a:	d8 01       	movw	r26, r16
     a5c:	4d 91       	ld	r20, X+
     a5e:	5c 91       	ld	r21, X
     a60:	24 ef       	ldi	r18, 0xF4	; 244
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	66 ee       	ldi	r22, 0xE6	; 230
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	ce 01       	movw	r24, r28
     a6a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     a6e:	81 11       	cpse	r24, r1
     a70:	76 cf       	rjmp	.-276    	; 0x95e <__stack+0x5f>
     a72:	67 ec       	ldi	r22, 0xC7	; 199
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	89 e8       	ldi	r24, 0x89	; 137
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	ec 01       	movw	r28, r24
     aa0:	79 01       	movw	r14, r18
     aa2:	98 01       	movw	r18, r16
     aa4:	0e 94 94 03 	call	0x728	; 0x728 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     aa8:	b7 01       	movw	r22, r14
     aaa:	ce 01       	movw	r24, r28
     aac:	0f 96       	adiw	r24, 0x0f	; 15
     aae:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <strcmp_P>
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	89 2b       	or	r24, r25
     ab6:	09 f0       	breq	.+2      	; 0xaba <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	82 2f       	mov	r24, r18
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <_ZN13Adafruit_FONA10enableGPRSEb>:
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	ec 01       	movw	r28, r24
     ae6:	28 ee       	ldi	r18, 0xE8	; 232
     ae8:	3d ef       	ldi	r19, 0xFD	; 253
     aea:	66 23       	and	r22, r22
     aec:	09 f4       	brne	.+2      	; 0xaf0 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     aee:	1f c1       	rjmp	.+574    	; 0xd2e <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     af0:	4e e5       	ldi	r20, 0x5E	; 94
     af2:	51 e0       	ldi	r21, 0x01	; 1
     af4:	63 e5       	ldi	r22, 0x53	; 83
     af6:	71 e0       	ldi	r23, 0x01	; 1
     af8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     afc:	81 11       	cpse	r24, r1
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	78 2e       	mov	r7, r24
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     b06:	77 24       	eor	r7, r7
     b08:	73 94       	inc	r7
     b0a:	7e 01       	movw	r14, r28
     b0c:	89 ee       	ldi	r24, 0xE9	; 233
     b0e:	e8 1a       	sub	r14, r24
     b10:	8e ef       	ldi	r24, 0xFE	; 254
     b12:	f8 0a       	sbc	r15, r24
     b14:	f7 01       	movw	r30, r14
     b16:	40 81       	ld	r20, Z
     b18:	51 81       	ldd	r21, Z+1	; 0x01
     b1a:	20 e1       	ldi	r18, 0x10	; 16
     b1c:	37 e2       	ldi	r19, 0x27	; 39
     b1e:	68 e4       	ldi	r22, 0x48	; 72
     b20:	71 e0       	ldi	r23, 0x01	; 1
     b22:	ce 01       	movw	r24, r28
     b24:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     b2c:	25 c1       	rjmp	.+586    	; 0xd78 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     b2e:	f7 01       	movw	r30, r14
     b30:	40 81       	ld	r20, Z
     b32:	51 81       	ldd	r21, Z+1	; 0x01
     b34:	20 e1       	ldi	r18, 0x10	; 16
     b36:	37 e2       	ldi	r19, 0x27	; 39
     b38:	6a e2       	ldi	r22, 0x2A	; 42
     b3a:	71 e0       	ldi	r23, 0x01	; 1
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b42:	88 23       	and	r24, r24
     b44:	09 f4       	brne	.+2      	; 0xb48 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     b46:	1a c1       	rjmp	.+564    	; 0xd7c <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     b48:	4e 01       	movw	r8, r28
     b4a:	f2 ef       	ldi	r31, 0xF2	; 242
     b4c:	8f 1a       	sub	r8, r31
     b4e:	fe ef       	ldi	r31, 0xFE	; 254
     b50:	9f 0a       	sbc	r9, r31
     b52:	f4 01       	movw	r30, r8
     b54:	40 81       	ld	r20, Z
     b56:	51 81       	ldd	r21, Z+1	; 0x01
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	71 f4       	brne	.+28     	; 0xb7a <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     b5e:	f7 01       	movw	r30, r14
     b60:	40 81       	ld	r20, Z
     b62:	51 81       	ldd	r21, Z+1	; 0x01
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	65 ec       	ldi	r22, 0xC5	; 197
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     b72:	81 11       	cpse	r24, r1
     b74:	ce c0       	rjmp	.+412    	; 0xd12 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     b76:	89 e0       	ldi	r24, 0x09	; 9
     b78:	0e c1       	rjmp	.+540    	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     b7a:	f7 01       	movw	r30, r14
     b7c:	20 81       	ld	r18, Z
     b7e:	31 81       	ldd	r19, Z+1	; 0x01
     b80:	00 e1       	ldi	r16, 0x10	; 16
     b82:	17 e2       	ldi	r17, 0x27	; 39
     b84:	66 e1       	ldi	r22, 0x16	; 22
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	ce 01       	movw	r24, r28
     b8a:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
     b92:	f6 c0       	rjmp	.+492    	; 0xd80 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN13Adafruit_FONA10flushInputEv>
     b9a:	8e 01       	movw	r16, r28
     b9c:	07 5e       	subi	r16, 0xE7	; 231
     b9e:	1e 4f       	sbci	r17, 0xFE	; 254
     ba0:	6c e0       	ldi	r22, 0x0C	; 12
     ba2:	71 e0       	ldi	r23, 0x01	; 1
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 81       	ld	r24, Z
     ba8:	91 81       	ldd	r25, Z+1	; 0x01
     baa:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     bae:	f4 01       	movw	r30, r8
     bb0:	60 81       	ld	r22, Z
     bb2:	71 81       	ldd	r23, Z+1	; 0x01
     bb4:	f8 01       	movw	r30, r16
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     bbe:	5e 01       	movw	r10, r28
     bc0:	f0 ef       	ldi	r31, 0xF0	; 240
     bc2:	af 1a       	sub	r10, r31
     bc4:	fe ef       	ldi	r31, 0xFE	; 254
     bc6:	bf 0a       	sbc	r11, r31
     bc8:	f5 01       	movw	r30, r10
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	79 f0       	breq	.+30     	; 0xbf0 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
     bd2:	6c e3       	ldi	r22, 0x3C	; 60
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	f8 01       	movw	r30, r16
     bd8:	80 81       	ld	r24, Z
     bda:	91 81       	ldd	r25, Z+1	; 0x01
     bdc:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN5Print5printEPKc>
     be0:	f5 01       	movw	r30, r10
     be2:	60 81       	ld	r22, Z
     be4:	71 81       	ldd	r23, Z+1	; 0x01
     be6:	f8 01       	movw	r30, r16
     be8:	80 81       	ld	r24, Z
     bea:	91 81       	ldd	r25, Z+1	; 0x01
     bec:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     bf0:	6e 01       	movw	r12, r28
     bf2:	fe ee       	ldi	r31, 0xEE	; 238
     bf4:	cf 1a       	sub	r12, r31
     bf6:	fe ef       	ldi	r31, 0xFE	; 254
     bf8:	df 0a       	sbc	r13, r31
     bfa:	f6 01       	movw	r30, r12
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	89 2b       	or	r24, r25
     c02:	79 f0       	breq	.+30     	; 0xc22 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
     c04:	6c e3       	ldi	r22, 0x3C	; 60
     c06:	71 e0       	ldi	r23, 0x01	; 1
     c08:	f8 01       	movw	r30, r16
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN5Print5printEPKc>
     c12:	f6 01       	movw	r30, r12
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	f8 01       	movw	r30, r16
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     c22:	6e e3       	ldi	r22, 0x3E	; 62
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	f8 01       	movw	r30, r16
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     c30:	65 e0       	ldi	r22, 0x05	; 5
     c32:	71 e0       	ldi	r23, 0x01	; 1
     c34:	89 e8       	ldi	r24, 0x89	; 137
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     c3c:	6b ef       	ldi	r22, 0xFB	; 251
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	89 e8       	ldi	r24, 0x89	; 137
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     c48:	f4 01       	movw	r30, r8
     c4a:	60 81       	ld	r22, Z
     c4c:	71 81       	ldd	r23, Z+1	; 0x01
     c4e:	89 e8       	ldi	r24, 0x89	; 137
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     c56:	f5 01       	movw	r30, r10
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	89 2b       	or	r24, r25
     c5e:	69 f0       	breq	.+26     	; 0xc7a <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
     c60:	6c e3       	ldi	r22, 0x3C	; 60
     c62:	71 e0       	ldi	r23, 0x01	; 1
     c64:	89 e8       	ldi	r24, 0x89	; 137
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN5Print5printEPKc>
     c6c:	f5 01       	movw	r30, r10
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	89 e8       	ldi	r24, 0x89	; 137
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     c7a:	f6 01       	movw	r30, r12
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	89 2b       	or	r24, r25
     c82:	69 f0       	breq	.+26     	; 0xc9e <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
     c84:	6c e3       	ldi	r22, 0x3C	; 60
     c86:	71 e0       	ldi	r23, 0x01	; 1
     c88:	89 e8       	ldi	r24, 0x89	; 137
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN5Print5printEPKc>
     c90:	f6 01       	movw	r30, r12
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	89 e8       	ldi	r24, 0x89	; 137
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
     c9e:	6e e3       	ldi	r22, 0x3E	; 62
     ca0:	71 e0       	ldi	r23, 0x01	; 1
     ca2:	89 e8       	ldi	r24, 0x89	; 137
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
     caa:	f7 01       	movw	r30, r14
     cac:	60 81       	ld	r22, Z
     cae:	71 81       	ldd	r23, Z+1	; 0x01
     cb0:	40 e1       	ldi	r20, 0x10	; 16
     cb2:	57 e2       	ldi	r21, 0x27	; 39
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     cba:	88 23       	and	r24, r24
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
     cbe:	62 c0       	rjmp	.+196    	; 0xd84 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
     cc0:	f5 01       	movw	r30, r10
     cc2:	40 81       	ld	r20, Z
     cc4:	51 81       	ldd	r21, Z+1	; 0x01
     cc6:	41 15       	cp	r20, r1
     cc8:	51 05       	cpc	r21, r1
     cca:	39 f4       	brne	.+14     	; 0xcda <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
     ccc:	f6 01       	movw	r30, r12
     cce:	40 81       	ld	r20, Z
     cd0:	51 81       	ldd	r21, Z+1	; 0x01
     cd2:	41 15       	cp	r20, r1
     cd4:	51 05       	cpc	r21, r1
     cd6:	79 f4       	brne	.+30     	; 0xcf6 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
     cd8:	42 cf       	rjmp	.-380    	; 0xb5e <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     cda:	f7 01       	movw	r30, r14
     cdc:	20 81       	ld	r18, Z
     cde:	31 81       	ldd	r19, Z+1	; 0x01
     ce0:	00 e1       	ldi	r16, 0x10	; 16
     ce2:	17 e2       	ldi	r17, 0x27	; 39
     ce4:	66 ee       	ldi	r22, 0xE6	; 230
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     cee:	81 11       	cpse	r24, r1
     cf0:	ed cf       	rjmp	.-38     	; 0xccc <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	50 c0       	rjmp	.+160    	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cf6:	f7 01       	movw	r30, r14
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	00 e1       	ldi	r16, 0x10	; 16
     cfe:	17 e2       	ldi	r17, 0x27	; 39
     d00:	62 ed       	ldi	r22, 0xD2	; 210
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	ce 01       	movw	r24, r28
     d06:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     d0a:	81 11       	cpse	r24, r1
     d0c:	28 cf       	rjmp	.-432    	; 0xb5e <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     d0e:	88 e0       	ldi	r24, 0x08	; 8
     d10:	42 c0       	rjmp	.+132    	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d12:	f7 01       	movw	r30, r14
     d14:	40 81       	ld	r20, Z
     d16:	51 81       	ldd	r21, Z+1	; 0x01
     d18:	2f ef       	ldi	r18, 0xFF	; 255
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	6c eb       	ldi	r22, 0xBC	; 188
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d26:	88 23       	and	r24, r24
     d28:	79 f1       	breq	.+94     	; 0xd88 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
     d2a:	87 2d       	mov	r24, r7
     d2c:	34 c0       	rjmp	.+104    	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d2e:	44 eb       	ldi	r20, 0xB4	; 180
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	69 ea       	ldi	r22, 0xA9	; 169
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d3a:	88 23       	and	r24, r24
     d3c:	39 f1       	breq	.+78     	; 0xd8c <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
     d3e:	8e 01       	movw	r16, r28
     d40:	09 5e       	subi	r16, 0xE9	; 233
     d42:	1e 4f       	sbci	r17, 0xFE	; 254
     d44:	f8 01       	movw	r30, r16
     d46:	40 81       	ld	r20, Z
     d48:	51 81       	ldd	r21, Z+1	; 0x01
     d4a:	20 e1       	ldi	r18, 0x10	; 16
     d4c:	37 e2       	ldi	r19, 0x27	; 39
     d4e:	6c e9       	ldi	r22, 0x9C	; 156
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	ce 01       	movw	r24, r28
     d54:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d58:	88 23       	and	r24, r24
     d5a:	d1 f0       	breq	.+52     	; 0xd90 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
     d5c:	f8 01       	movw	r30, r16
     d5e:	40 81       	ld	r20, Z
     d60:	51 81       	ldd	r21, Z+1	; 0x01
     d62:	20 e1       	ldi	r18, 0x10	; 16
     d64:	37 e2       	ldi	r19, 0x27	; 39
     d66:	61 e9       	ldi	r22, 0x91	; 145
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     d70:	88 23       	and	r24, r24
     d72:	81 f0       	breq	.+32     	; 0xd94 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	0f c0       	rjmp	.+30     	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d7c:	84 e0       	ldi	r24, 0x04	; 4
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d80:	85 e0       	ldi	r24, 0x05	; 5
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d84:	86 e0       	ldi	r24, 0x06	; 6
     d86:	07 c0       	rjmp	.+14     	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d8c:	8b e0       	ldi	r24, 0x0B	; 11
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d90:	8c e0       	ldi	r24, 0x0C	; 12
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     d94:	8d e0       	ldi	r24, 0x0D	; 13
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	7f 90       	pop	r7
     db0:	08 95       	ret

00000db2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	5b 01       	movw	r10, r22
     dc6:	6a 01       	movw	r12, r20
     dc8:	e2 2e       	mov	r14, r18
     dca:	0f 96       	adiw	r24, 0x0f	; 15
     dcc:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <strstr_P>
     dd0:	ec 01       	movw	r28, r24
     dd2:	89 2b       	or	r24, r25
     dd4:	c1 f0       	breq	.+48     	; 0xe06 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     dd6:	c5 01       	movw	r24, r10
     dd8:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__strlen_P>
     ddc:	8c 0f       	add	r24, r28
     dde:	9d 1f       	adc	r25, r29
     de0:	c0 e0       	ldi	r28, 0x00	; 0
     de2:	f1 2c       	mov	r15, r1
     de4:	c0 17       	cp	r28, r16
     de6:	41 f0       	breq	.+16     	; 0xdf8 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
     de8:	b7 01       	movw	r22, r14
     dea:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <strchr>
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	51 f0       	breq	.+20     	; 0xe06 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	cf 5f       	subi	r28, 0xFF	; 255
     df6:	f6 cf       	rjmp	.-20     	; 0xde4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
     df8:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <atoi>
     dfc:	f6 01       	movw	r30, r12
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	08 95       	ret

00000e1c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	6a 01       	movw	r12, r20
     e32:	59 01       	movw	r10, r18
     e34:	10 2f       	mov	r17, r16
     e36:	0e 2d       	mov	r16, r14
     e38:	44 ef       	ldi	r20, 0xF4	; 244
     e3a:	51 e0       	ldi	r21, 0x01	; 1
     e3c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     e40:	21 2f       	mov	r18, r17
     e42:	a5 01       	movw	r20, r10
     e44:	b6 01       	movw	r22, r12
     e46:	ce 01       	movw	r24, r28
     e48:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
     e4c:	18 2f       	mov	r17, r24
     e4e:	88 23       	and	r24, r24
     e50:	31 f0       	breq	.+12     	; 0xe5e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	64 ef       	ldi	r22, 0xF4	; 244
     e56:	71 e0       	ldi	r23, 0x01	; 1
     e58:	ce 01       	movw	r24, r28
     e5a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN13Adafruit_FONA8readlineEjb>
     e5e:	81 2f       	mov	r24, r17
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	08 95       	ret

00000e74 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	28 97       	sbiw	r28, 0x08	; 8
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
     e96:	18 86       	std	Y+8, r1	; 0x08
     e98:	1f 82       	std	Y+7, r1	; 0x07
     e9a:	1e 82       	std	Y+6, r1	; 0x06
     e9c:	1d 82       	std	Y+5, r1	; 0x05
     e9e:	1c 82       	std	Y+4, r1	; 0x04
     ea0:	1b 82       	std	Y+3, r1	; 0x03
     ea2:	1a 82       	std	Y+2, r1	; 0x02
     ea4:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
     ea6:	e1 2c       	mov	r14, r1
     ea8:	0c e2       	ldi	r16, 0x2C	; 44
     eaa:	9e 01       	movw	r18, r28
     eac:	29 5f       	subi	r18, 0xF9	; 249
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	4d e9       	ldi	r20, 0x9D	; 157
     eb2:	51 e0       	ldi	r21, 0x01	; 1
     eb4:	66 e9       	ldi	r22, 0x96	; 150
     eb6:	71 e0       	ldi	r23, 0x01	; 1
     eb8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     ebc:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
     ebe:	ee 24       	eor	r14, r14
     ec0:	e3 94       	inc	r14
     ec2:	9e 01       	movw	r18, r28
     ec4:	2b 5f       	subi	r18, 0xFB	; 251
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	4f e8       	ldi	r20, 0x8F	; 143
     eca:	51 e0       	ldi	r21, 0x01	; 1
     ecc:	68 e8       	ldi	r22, 0x88	; 136
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	c6 01       	movw	r24, r12
     ed2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     ed6:	88 23       	and	r24, r24
     ed8:	19 f0       	breq	.+6      	; 0xee0 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	f8 26       	eor	r15, r24
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
     ee0:	ff 24       	eor	r15, r15
     ee2:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
     ee4:	e1 2c       	mov	r14, r1
     ee6:	0c e2       	ldi	r16, 0x2C	; 44
     ee8:	9e 01       	movw	r18, r28
     eea:	2d 5f       	subi	r18, 0xFD	; 253
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	51 e0       	ldi	r21, 0x01	; 1
     ef2:	67 e7       	ldi	r22, 0x77	; 119
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	c6 01       	movw	r24, r12
     ef8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     efc:	88 23       	and	r24, r24
     efe:	11 f0       	breq	.+4      	; 0xf04 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
     f00:	1b 81       	ldd	r17, Y+3	; 0x03
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
     f04:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
     f06:	ee 24       	eor	r14, r14
     f08:	e3 94       	inc	r14
     f0a:	0c e2       	ldi	r16, 0x2C	; 44
     f0c:	9e 01       	movw	r18, r28
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	4f e6       	ldi	r20, 0x6F	; 111
     f14:	51 e0       	ldi	r21, 0x01	; 1
     f16:	66 e6       	ldi	r22, 0x66	; 102
     f18:	71 e0       	ldi	r23, 0x01	; 1
     f1a:	c6 01       	movw	r24, r12
     f1c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     f20:	81 11       	cpse	r24, r1
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
     f24:	91 2f       	mov	r25, r17
     f26:	90 62       	ori	r25, 0x20	; 32
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
     f2a:	99 81       	ldd	r25, Y+1	; 0x01
     f2c:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
     f2e:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
     f30:	6f 81       	ldd	r22, Y+7	; 0x07
}
     f32:	8f 2d       	mov	r24, r15
     f34:	28 96       	adiw	r28, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"

void Helpers::printRSSI(FONA_GET_RSSI* rssi) {
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
	
	RM_LOG(F("RSSI="));
     f58:	68 e9       	ldi	r22, 0x98	; 152
     f5a:	72 e0       	ldi	r23, 0x02	; 2
     f5c:	89 e8       	ldi	r24, 0x89	; 137
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(rssi->rssi);
     f64:	4a e0       	ldi	r20, 0x0A	; 10
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	68 81       	ld	r22, Y
     f6a:	89 e8       	ldi	r24, 0x89	; 137
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Print5printEhi>
	RM_LOG(F(" | "));
     f72:	64 e9       	ldi	r22, 0x94	; 148
     f74:	72 e0       	ldi	r23, 0x02	; 2
     f76:	89 e8       	ldi	r24, 0x89	; 137
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("BER="));
     f7e:	6f e8       	ldi	r22, 0x8F	; 143
     f80:	72 e0       	ldi	r23, 0x02	; 2
     f82:	89 e8       	ldi	r24, 0x89	; 137
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(rssi->ber);
     f8a:	4a e0       	ldi	r20, 0x0A	; 10
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	69 81       	ldd	r22, Y+1	; 0x01
     f90:	89 e8       	ldi	r24, 0x89	; 137
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Print5printEhi>
	RM_LOG(F(" | "));
     f98:	6b e8       	ldi	r22, 0x8B	; 139
     f9a:	72 e0       	ldi	r23, 0x02	; 2
     f9c:	89 e8       	ldi	r24, 0x89	; 137
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Network-Reg ResCode="));
     fa4:	66 e7       	ldi	r22, 0x76	; 118
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	89 e8       	ldi	r24, 0x89	; 137
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(NETREG_ACTUALVAL_RESULT_CODE(rssi->netReg));
     fb0:	6b 81       	ldd	r22, Y+3	; 0x03
     fb2:	63 70       	andi	r22, 0x03	; 3
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	4a e0       	ldi	r20, 0x0A	; 10
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	89 e8       	ldi	r24, 0x89	; 137
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN5Print5printEii>
	RM_LOG(F(", Status="));
     fc2:	6c e6       	ldi	r22, 0x6C	; 108
     fc4:	72 e0       	ldi	r23, 0x02	; 2
     fc6:	89 e8       	ldi	r24, 0x89	; 137
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(NETREG_ACTUALVAL_NETSTAT(rssi->netReg));
     fce:	6b 81       	ldd	r22, Y+3	; 0x03
     fd0:	6c 71       	andi	r22, 0x1C	; 28
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	75 95       	asr	r23
     fd6:	67 95       	ror	r22
     fd8:	75 95       	asr	r23
     fda:	67 95       	ror	r22
     fdc:	4a e0       	ldi	r20, 0x0A	; 10
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	89 e8       	ldi	r24, 0x89	; 137
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN5Print5printEii>
	RM_LOG(F(", Error="));
     fe8:	63 e6       	ldi	r22, 0x63	; 99
     fea:	72 e0       	ldi	r23, 0x02	; 2
     fec:	89 e8       	ldi	r24, 0x89	; 137
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(NETREG_ACTUALVAL_ERROR(rssi->netReg));
     ff4:	6b 81       	ldd	r22, Y+3	; 0x03
     ff6:	65 fb       	bst	r22, 5
     ff8:	66 27       	eor	r22, r22
     ffa:	60 f9       	bld	r22, 0
     ffc:	4a e0       	ldi	r20, 0x0A	; 10
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	89 e8       	ldi	r24, 0x89	; 137
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN5Print5printEii>
	RM_LOG(F(" | "));
    100a:	6f e5       	ldi	r22, 0x5F	; 95
    100c:	72 e0       	ldi	r23, 0x02	; 2
    100e:	89 e8       	ldi	r24, 0x89	; 137
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("RSSI Error?="));
    1016:	62 e5       	ldi	r22, 0x52	; 82
    1018:	72 e0       	ldi	r23, 0x02	; 2
    101a:	89 e8       	ldi	r24, 0x89	; 137
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(rssi->rssiErr);
    1022:	4a e0       	ldi	r20, 0x0A	; 10
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	6a 81       	ldd	r22, Y+2	; 0x02
    1028:	89 e8       	ldi	r24, 0x89	; 137
    102a:	93 e0       	ldi	r25, 0x03	; 3
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
	RM_LOG(F(", Error="));
	RM_LOG(NETREG_ACTUALVAL_ERROR(rssi->netReg));
	RM_LOG(F(" | "));
	
	RM_LOG(F("RSSI Error?="));
	RM_LOGLN(rssi->rssiErr);
    1030:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <_ZN5Print7printlnEhi>

00001034 <_ZN7Helpers15printSensorDataEP10SensorData>:
}

void Helpers::printSensorData(SensorData* sd) {
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
    103a:	6a e4       	ldi	r22, 0x4A	; 74
    103c:	72 e0       	ldi	r23, 0x02	; 2
    103e:	89 e8       	ldi	r24, 0x89	; 137
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
    1046:	69 81       	ldd	r22, Y+1	; 0x01
    1048:	7a 81       	ldd	r23, Y+2	; 0x02
    104a:	4a e0       	ldi	r20, 0x0A	; 10
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	89 e8       	ldi	r24, 0x89	; 137
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    1056:	66 e4       	ldi	r22, 0x46	; 70
    1058:	72 e0       	ldi	r23, 0x02	; 2
    105a:	89 e8       	ldi	r24, 0x89	; 137
    105c:	93 e0       	ldi	r25, 0x03	; 3
    105e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
    1062:	60 e4       	ldi	r22, 0x40	; 64
    1064:	72 e0       	ldi	r23, 0x02	; 2
    1066:	89 e8       	ldi	r24, 0x89	; 137
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
    106e:	6d 81       	ldd	r22, Y+5	; 0x05
    1070:	7e 81       	ldd	r23, Y+6	; 0x06
    1072:	4a e0       	ldi	r20, 0x0A	; 10
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	89 e8       	ldi	r24, 0x89	; 137
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    107e:	6c e3       	ldi	r22, 0x3C	; 60
    1080:	72 e0       	ldi	r23, 0x02	; 2
    1082:	89 e8       	ldi	r24, 0x89	; 137
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
    108a:	63 e3       	ldi	r22, 0x33	; 51
    108c:	72 e0       	ldi	r23, 0x02	; 2
    108e:	89 e8       	ldi	r24, 0x89	; 137
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
    1096:	6b 81       	ldd	r22, Y+3	; 0x03
    1098:	7c 81       	ldd	r23, Y+4	; 0x04
    109a:	4a e0       	ldi	r20, 0x0A	; 10
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	89 e8       	ldi	r24, 0x89	; 137
    10a0:	93 e0       	ldi	r25, 0x03	; 3
    10a2:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Print5printEji>
	RM_LOG(F(" | "));
    10a6:	6f e2       	ldi	r22, 0x2F	; 47
    10a8:	72 e0       	ldi	r23, 0x02	; 2
    10aa:	89 e8       	ldi	r24, 0x89	; 137
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
    10b2:	69 e2       	ldi	r22, 0x29	; 41
    10b4:	72 e0       	ldi	r23, 0x02	; 2
    10b6:	89 e8       	ldi	r24, 0x89	; 137
    10b8:	93 e0       	ldi	r25, 0x03	; 3
    10ba:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->temperature);
    10be:	6f 81       	ldd	r22, Y+7	; 0x07
    10c0:	78 85       	ldd	r23, Y+8	; 0x08
    10c2:	4a e0       	ldi	r20, 0x0A	; 10
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	89 e8       	ldi	r24, 0x89	; 137
    10c8:	93 e0       	ldi	r25, 0x03	; 3
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
	RM_LOG(F("Current="));
	RM_LOG(sd->current);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Temp="));
	RM_LOGLN(sd->temperature);
    10ce:	0c 94 11 10 	jmp	0x2022	; 0x2022 <_ZN5Print7printlnEji>

000010d2 <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	d8 2f       	mov	r29, r24
    10d8:	61 e6       	ldi	r22, 0x61	; 97
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	89 e8       	ldi	r24, 0x89	; 137
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
    10e4:	42 e0       	ldi	r20, 0x02	; 2
    10e6:	63 e0       	ldi	r22, 0x03	; 3
    10e8:	8a ea       	ldi	r24, 0xAA	; 170
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 12 04 	call	0x824	; 0x824 <_ZN13Adafruit_FONA5beginEhh>
    10f0:	c8 2f       	mov	r28, r24
    10f2:	8d ef       	ldi	r24, 0xFD	; 253
    10f4:	8c 0f       	add	r24, r28
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	18 f4       	brcc	.+6      	; 0x1100 <_Z21ensureFonaInitialisedb+0x2e>
    10fa:	66 e4       	ldi	r22, 0x46	; 70
    10fc:	73 e0       	ldi	r23, 0x03	; 3
    10fe:	17 c0       	rjmp	.+46     	; 0x112e <_Z21ensureFonaInitialisedb+0x5c>
    1100:	d1 11       	cpse	r29, r1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <_Z21ensureFonaInitialisedb+0x38>
    1104:	8a ea       	ldi	r24, 0xAA	; 170
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	26 c0       	rjmp	.+76     	; 0x1156 <_Z21ensureFonaInitialisedb+0x84>
    110a:	61 e3       	ldi	r22, 0x31	; 49
    110c:	73 e0       	ldi	r23, 0x03	; 3
    110e:	89 e8       	ldi	r24, 0x89	; 137
    1110:	93 e0       	ldi	r25, 0x03	; 3
    1112:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	8a ea       	ldi	r24, 0xAA	; 170
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN13Adafruit_FONA10enableGPRSEb>
    1120:	c8 2f       	mov	r28, r24
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	8c 0f       	add	r24, r28
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	68 f3       	brcs	.-38     	; 0x1104 <_Z21ensureFonaInitialisedb+0x32>
    112a:	66 e1       	ldi	r22, 0x16	; 22
    112c:	73 e0       	ldi	r23, 0x03	; 3
    112e:	89 e8       	ldi	r24, 0x89	; 137
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
    1136:	60 e5       	ldi	r22, 0x50	; 80
    1138:	71 e0       	ldi	r23, 0x01	; 1
    113a:	89 e8       	ldi	r24, 0x89	; 137
    113c:	93 e0       	ldi	r25, 0x03	; 3
    113e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN5Print5printEPKc>
    1142:	6c 2f       	mov	r22, r28
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	4a e0       	ldi	r20, 0x0A	; 10
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	89 e8       	ldi	r24, 0x89	; 137
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN5Print7printlnEii>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <_Z15switchOffSystemv>:
    115c:	62 e5       	ldi	r22, 0x52	; 82
    115e:	71 e0       	ldi	r23, 0x01	; 1
    1160:	89 e8       	ldi	r24, 0x89	; 137
    1162:	93 e0       	ldi	r25, 0x03	; 3
    1164:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN5Print7printlnEPKc>
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	85 e0       	ldi	r24, 0x05	; 5
    116c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
    1170:	68 eb       	ldi	r22, 0xB8	; 184
    1172:	7b e0       	ldi	r23, 0x0B	; 11
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <delay>

0000117c <setup>:
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	cb 51       	subi	r28, 0x1B	; 27
    1186:	d1 40       	sbci	r29, 0x01	; 1
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	0e 94 b0 11 	call	0x2360	; 0x2360 <pinMode>
    119a:	61 e0       	ldi	r22, 0x01	; 1
    119c:	85 e0       	ldi	r24, 0x05	; 5
    119e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
    11a2:	68 eb       	ldi	r22, 0xB8	; 184
    11a4:	7b e0       	ldi	r23, 0x0B	; 11
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	8d e0       	ldi	r24, 0x0D	; 13
    11b2:	0e 94 b0 11 	call	0x2360	; 0x2360 <pinMode>
    11b6:	26 e0       	ldi	r18, 0x06	; 6
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	55 e2       	ldi	r21, 0x25	; 37
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	89 e8       	ldi	r24, 0x89	; 137
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN14HardwareSerial5beginEmh>
    11c8:	69 e9       	ldi	r22, 0x99	; 153
    11ca:	73 e0       	ldi	r23, 0x03	; 3
    11cc:	89 e8       	ldi	r24, 0x89	; 137
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z21ensureFonaInitialisedb>
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	39 f4       	brne	.+14     	; 0x11ec <setup+0x70>
    11de:	66 e7       	ldi	r22, 0x76	; 118
    11e0:	73 e0       	ldi	r23, 0x03	; 3
    11e2:	89 e8       	ldi	r24, 0x89	; 137
    11e4:	93 e0       	ldi	r25, 0x03	; 3
    11e6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
    11ea:	6a c0       	rjmp	.+212    	; 0x12c0 <setup+0x144>
    11ec:	fc 01       	movw	r30, r24
    11ee:	22 81       	ldd	r18, Z+2	; 0x02
    11f0:	33 81       	ldd	r19, Z+3	; 0x03
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	44 81       	ldd	r20, Z+4	; 0x04
    11f8:	55 81       	ldd	r21, Z+5	; 0x05
    11fa:	66 81       	ldd	r22, Z+6	; 0x06
    11fc:	77 81       	ldd	r23, Z+7	; 0x07
    11fe:	4d 83       	std	Y+5, r20	; 0x05
    1200:	5e 83       	std	Y+6, r21	; 0x06
    1202:	6f 83       	std	Y+7, r22	; 0x07
    1204:	78 87       	std	Y+8, r23	; 0x08
    1206:	40 85       	ldd	r20, Z+8	; 0x08
    1208:	51 85       	ldd	r21, Z+9	; 0x09
    120a:	62 85       	ldd	r22, Z+10	; 0x0a
    120c:	73 85       	ldd	r23, Z+11	; 0x0b
    120e:	49 87       	std	Y+9, r20	; 0x09
    1210:	5a 87       	std	Y+10, r21	; 0x0a
    1212:	6b 87       	std	Y+11, r22	; 0x0b
    1214:	7c 87       	std	Y+12, r23	; 0x0c
    1216:	24 e4       	ldi	r18, 0x44	; 68
    1218:	31 e0       	ldi	r19, 0x01	; 1
    121a:	3a 83       	std	Y+2, r19	; 0x02
    121c:	29 83       	std	Y+1, r18	; 0x01
    121e:	24 85       	ldd	r18, Z+12	; 0x0c
    1220:	2d 87       	std	Y+13, r18	; 0x0d
    1222:	25 85       	ldd	r18, Z+13	; 0x0d
    1224:	2e 87       	std	Y+14, r18	; 0x0e
    1226:	26 85       	ldd	r18, Z+14	; 0x0e
    1228:	2f 87       	std	Y+15, r18	; 0x0f
    122a:	2f ef       	ldi	r18, 0xFF	; 255
    122c:	3f 96       	adiw	r30, 0x0f	; 15
    122e:	de 01       	movw	r26, r28
    1230:	50 96       	adiw	r26, 0x10	; 16
    1232:	01 90       	ld	r0, Z+
    1234:	0d 92       	st	X+, r0
    1236:	2a 95       	dec	r18
    1238:	e1 f7       	brne	.-8      	; 0x1232 <setup+0xb6>
    123a:	fc 01       	movw	r30, r24
    123c:	e2 5f       	subi	r30, 0xF2	; 242
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	20 81       	ld	r18, Z
    1242:	31 81       	ldd	r19, Z+1	; 0x01
    1244:	c1 5f       	subi	r28, 0xF1	; 241
    1246:	de 4f       	sbci	r29, 0xFE	; 254
    1248:	39 83       	std	Y+1, r19	; 0x01
    124a:	28 83       	st	Y, r18
    124c:	cf 50       	subi	r28, 0x0F	; 15
    124e:	d1 40       	sbci	r29, 0x01	; 1
    1250:	32 96       	adiw	r30, 0x02	; 2
    1252:	20 81       	ld	r18, Z
    1254:	31 81       	ldd	r19, Z+1	; 0x01
    1256:	cf 5e       	subi	r28, 0xEF	; 239
    1258:	de 4f       	sbci	r29, 0xFE	; 254
    125a:	39 83       	std	Y+1, r19	; 0x01
    125c:	28 83       	st	Y, r18
    125e:	c1 51       	subi	r28, 0x11	; 17
    1260:	d1 40       	sbci	r29, 0x01	; 1
    1262:	32 96       	adiw	r30, 0x02	; 2
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	cd 5e       	subi	r28, 0xED	; 237
    126a:	de 4f       	sbci	r29, 0xFE	; 254
    126c:	39 83       	std	Y+1, r19	; 0x01
    126e:	28 83       	st	Y, r18
    1270:	c3 51       	subi	r28, 0x13	; 19
    1272:	d1 40       	sbci	r29, 0x01	; 1
    1274:	32 96       	adiw	r30, 0x02	; 2
    1276:	20 81       	ld	r18, Z
    1278:	cb 5e       	subi	r28, 0xEB	; 235
    127a:	de 4f       	sbci	r29, 0xFE	; 254
    127c:	28 83       	st	Y, r18
    127e:	c5 51       	subi	r28, 0x15	; 21
    1280:	d1 40       	sbci	r29, 0x01	; 1
    1282:	31 96       	adiw	r30, 0x01	; 1
    1284:	20 81       	ld	r18, Z
    1286:	31 81       	ldd	r19, Z+1	; 0x01
    1288:	ca 5e       	subi	r28, 0xEA	; 234
    128a:	de 4f       	sbci	r29, 0xFE	; 254
    128c:	39 83       	std	Y+1, r19	; 0x01
    128e:	28 83       	st	Y, r18
    1290:	c6 51       	subi	r28, 0x16	; 22
    1292:	d1 40       	sbci	r29, 0x01	; 1
    1294:	32 96       	adiw	r30, 0x02	; 2
    1296:	20 81       	ld	r18, Z
    1298:	31 81       	ldd	r19, Z+1	; 0x01
    129a:	c8 5e       	subi	r28, 0xE8	; 232
    129c:	de 4f       	sbci	r29, 0xFE	; 254
    129e:	39 83       	std	Y+1, r19	; 0x01
    12a0:	28 83       	st	Y, r18
    12a2:	c8 51       	subi	r28, 0x18	; 24
    12a4:	d1 40       	sbci	r29, 0x01	; 1
    12a6:	32 96       	adiw	r30, 0x02	; 2
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	c6 5e       	subi	r28, 0xE6	; 230
    12ae:	de 4f       	sbci	r29, 0xFE	; 254
    12b0:	99 83       	std	Y+1, r25	; 0x01
    12b2:	88 83       	st	Y, r24
    12b4:	ca 51       	subi	r28, 0x1A	; 26
    12b6:	d1 40       	sbci	r29, 0x01	; 1
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONA>
    12c0:	0e 94 ae 08 	call	0x115c	; 0x115c <_Z15switchOffSystemv>
    12c4:	c5 5e       	subi	r28, 0xE5	; 229
    12c6:	de 4f       	sbci	r29, 0xFE	; 254
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	2a 97       	sbiw	r28, 0x0a	; 10
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    12ec:	63 e0       	ldi	r22, 0x03	; 3
    12ee:	73 e0       	ldi	r23, 0x03	; 3
    12f0:	89 e8       	ldi	r24, 0x89	; 137
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	1b 82       	std	Y+3, r1	; 0x03
    12fe:	1a 82       	std	Y+2, r1	; 0x02
    1300:	1d 82       	std	Y+5, r1	; 0x05
    1302:	1c 82       	std	Y+4, r1	; 0x04
    1304:	1f 82       	std	Y+7, r1	; 0x07
    1306:	1e 82       	std	Y+6, r1	; 0x06
    1308:	19 86       	std	Y+9, r1	; 0x09
    130a:	18 86       	std	Y+8, r1	; 0x08
    130c:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    130e:	be 01       	movw	r22, r28
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	88 ea       	ldi	r24, 0xA8	; 168
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	2a 96       	adiw	r28, 0x0a	; 10
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
	
	boolean doInit = (_sendDataLoopCount == 0);
    1330:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	98 0f       	add	r25, r24
    1338:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_sendDataLoopCount>
	
	if (doInit) {
    133c:	81 11       	cpse	r24, r1
    133e:	15 c0       	rjmp	.+42     	; 0x136a <_Z8sendDatav+0x3a>
	
		RM_LOGLN(F("Initialising module to send data"));
    1340:	62 ee       	ldi	r22, 0xE2	; 226
    1342:	72 e0       	ldi	r23, 0x02	; 2
    1344:	89 e8       	ldi	r24, 0x89	; 137
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z21ensureFonaInitialisedb>
    1352:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <_sendDataFona+0x1>
    1356:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_sendDataFona>
	
		if (_sendDataFona == NULL)
    135a:	89 2b       	or	r24, r25
    135c:	b9 f0       	breq	.+46     	; 0x138c <_Z8sendDatav+0x5c>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    135e:	63 eb       	ldi	r22, 0xB3	; 179
    1360:	72 e0       	ldi	r23, 0x02	; 2
    1362:	89 e8       	ldi	r24, 0x89	; 137
    1364:	93 e0       	ldi	r25, 0x03	; 3
    1366:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    136a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_sendDataLoopCount>
    136e:	8c 33       	cpi	r24, 0x3C	; 60
    1370:	79 f4       	brne	.+30     	; 0x1390 <_Z8sendDatav+0x60>
		
		//Get RSSI - store? wait another minute?not
		//_sendDataFona->getRSSI()
		RM_LOGLN(F("Signal is "));
    1372:	68 ea       	ldi	r22, 0xA8	; 168
    1374:	72 e0       	ldi	r23, 0x02	; 2
    1376:	89 e8       	ldi	r24, 0x89	; 137
    1378:	93 e0       	ldi	r25, 0x03	; 3
    137a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    137e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1382:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_sendDataFona+0x1>
    1386:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_sendDataFona>
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <_Z8sendDatav+0x60>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	08 95       	ret
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1390:	80 e0       	ldi	r24, 0x00	; 0
}
    1392:	08 95       	ret

00001394 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1394:	68 ee       	ldi	r22, 0xE8	; 232
    1396:	73 e0       	ldi	r23, 0x03	; 3
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
	++_timerCounter;
    13a0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
    13a4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x1>
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
    13ae:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    13b2:	6e e9       	ldi	r22, 0x9E	; 158
    13b4:	72 e0       	ldi	r23, 0x02	; 2
    13b6:	89 e8       	ldi	r24, 0x89	; 137
    13b8:	93 e0       	ldi	r25, 0x03	; 3
    13ba:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
    13be:	60 e5       	ldi	r22, 0x50	; 80
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	89 e8       	ldi	r24, 0x89	; 137
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_ZN5Print5printEPKc>
    13ca:	4a e0       	ldi	r20, 0x0A	; 10
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <_behaviour>
    13d2:	89 e8       	ldi	r24, 0x89	; 137
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    13da:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    13de:	80 ff       	sbrs	r24, 0
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <loop+0x60>
		
		if (takeReadings())
    13e2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z12takeReadingsv>
    13e6:	88 23       	and	r24, r24
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    13ea:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    13f4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    13f8:	81 ff       	sbrs	r24, 1
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <loop+0x7a>
		
		if (sendData())
    13fc:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z8sendDatav>
    1400:	88 23       	and	r24, r24
    1402:	29 f0       	breq	.+10     	; 0x140e <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    1404:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    1408:	8d 7f       	andi	r24, 0xFD	; 253
    140a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    140e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    1412:	81 11       	cpse	r24, r1
    1414:	02 c0       	rjmp	.+4      	; 0x141a <loop+0x86>
		
		switchOffSystem();
    1416:	0c 94 ae 08 	jmp	0x115c	; 0x115c <_Z15switchOffSystemv>
    141a:	08 95       	ret

0000141c <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	64 e0       	ldi	r22, 0x04	; 4
    1420:	8a ea       	ldi	r24, 0xAA	; 170
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	89 ea       	ldi	r24, 0xA9	; 169
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    1432:	61 e0       	ldi	r22, 0x01	; 1
    1434:	88 ea       	ldi	r24, 0xA8	; 168
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	0c 94 27 0a 	jmp	0x144e	; 0x144e <_ZN13SensorManagerC1Eb>

0000143c <_ZN12RmMemManagerC1Eb>:
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock) {
	_isMock = isMock;
    143c:	fc 01       	movw	r30, r24
    143e:	60 83       	st	Z, r22
	
	if (!_isMock)
    1440:	61 11       	cpse	r22, r1
    1442:	04 c0       	rjmp	.+8      	; 0x144c <_ZN12RmMemManagerC1Eb+0x10>
		Wire.begin();
    1444:	84 e3       	ldi	r24, 0x34	; 52
    1446:	93 e0       	ldi	r25, 0x03	; 3
    1448:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <_ZN7TwoWire5beginEv>
    144c:	08 95       	ret

0000144e <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    144e:	fc 01       	movw	r30, r24
    1450:	60 83       	st	Z, r22
    1452:	08 95       	ret

00001454 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1454:	fc 01       	movw	r30, r24
    1456:	80 81       	ld	r24, Z
    1458:	81 11       	cpse	r24, r1
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    145c:	86 2f       	mov	r24, r22
    145e:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1462:	85 e0       	ldi	r24, 0x05	; 5
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	08 95       	ret

00001468 <_Z11getMockDataP10SensorData>:

uint8_t __mockDataCounter;
void getMockData(SensorData* ret) {
    1468:	fc 01       	movw	r30, r24
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    146a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__mockDataCounter>
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	28 0f       	add	r18, r24
    1472:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <__mockDataCounter>
	
	ret->battVoltage = __mockDataCounter;
    1476:	82 2f       	mov	r24, r18
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	92 83       	std	Z+2, r25	; 0x02
    147c:	81 83       	std	Z+1, r24	; 0x01
	ret->pVVoltage = __mockDataCounter*10;
    147e:	3a e0       	ldi	r19, 0x0A	; 10
    1480:	23 9f       	mul	r18, r19
    1482:	c0 01       	movw	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	96 83       	std	Z+6, r25	; 0x06
    1488:	85 83       	std	Z+5, r24	; 0x05
	ret->current = __mockDataCounter%7;
    148a:	82 2f       	mov	r24, r18
    148c:	67 e0       	ldi	r22, 0x07	; 7
    148e:	0e 94 82 14 	call	0x2904	; 0x2904 <__udivmodqi4>
    1492:	89 2f       	mov	r24, r25
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	94 83       	std	Z+4, r25	; 0x04
    1498:	83 83       	std	Z+3, r24	; 0x03
	ret->temperature = __mockDataCounter*100;
    149a:	34 e6       	ldi	r19, 0x64	; 100
    149c:	23 9f       	mul	r18, r19
    149e:	c0 01       	movw	r24, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	90 87       	std	Z+8, r25	; 0x08
    14a4:	87 83       	std	Z+7, r24	; 0x07
    14a6:	08 95       	ret

000014a8 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    14a8:	af 92       	push	r10
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	8c 01       	movw	r16, r24
    14be:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	88 23       	and	r24, r24
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		getMockData(ret);
    14c8:	cb 01       	movw	r24, r22
    14ca:	0e 94 34 0a 	call	0x1468	; 0x1468 <_Z11getMockDataP10SensorData>
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    14d0:	6e e0       	ldi	r22, 0x0E	; 14
    14d2:	c8 01       	movw	r24, r16
    14d4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN13SensorManager16takeSampleAnalogEh>
    14d8:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    14da:	6f e0       	ldi	r22, 0x0F	; 15
    14dc:	c8 01       	movw	r24, r16
    14de:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN13SensorManager16takeSampleAnalogEh>
    14e2:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    14e4:	61 e1       	ldi	r22, 0x11	; 17
    14e6:	c8 01       	movw	r24, r16
    14e8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN13SensorManager16takeSampleAnalogEh>
    14ec:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    14ee:	60 e1       	ldi	r22, 0x10	; 16
    14f0:	c8 01       	movw	r24, r16
    14f2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    14f6:	ba 82       	std	Y+2, r11	; 0x02
    14f8:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    14fa:	de 82       	std	Y+6, r13	; 0x06
    14fc:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    14fe:	fc 82       	std	Y+4, r15	; 0x04
    1500:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    1502:	98 87       	std	Y+8, r25	; 0x08
    1504:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    1506:	ce 01       	movw	r24, r28
	
	//return ret;
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	bf 90       	pop	r11
    151a:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    151c:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN7Helpers15printSensorDataEP10SensorData>

00001520 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1520:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <twi_sendStop>
    152a:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_inRepStart>
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	82 e1       	ldi	r24, 0x12	; 18
    1532:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	83 e1       	ldi	r24, 0x13	; 19
    153a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
    153e:	e9 eb       	ldi	r30, 0xB9	; 185
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 83       	st	Z, r24
    1548:	80 81       	ld	r24, Z
    154a:	8d 7f       	andi	r24, 0xFD	; 253
    154c:	80 83       	st	Z, r24
    154e:	88 e4       	ldi	r24, 0x48	; 72
    1550:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1554:	85 e4       	ldi	r24, 0x45	; 69
    1556:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    155a:	08 95       	ret

0000155c <twi_transmit>:
    155c:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    1560:	26 2f       	mov	r18, r22
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	24 0f       	add	r18, r20
    1566:	31 1d       	adc	r19, r1
    1568:	21 32       	cpi	r18, 0x21	; 33
    156a:	31 05       	cpc	r19, r1
    156c:	dc f4       	brge	.+54     	; 0x15a4 <twi_transmit+0x48>
    156e:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <twi_state>
    1572:	24 30       	cpi	r18, 0x04	; 4
    1574:	c9 f4       	brne	.+50     	; 0x15a8 <twi_transmit+0x4c>
    1576:	fc 01       	movw	r30, r24
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	86 17       	cp	r24, r22
    157e:	58 f4       	brcc	.+22     	; 0x1596 <twi_transmit+0x3a>
    1580:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    1584:	21 91       	ld	r18, Z+
    1586:	dc 01       	movw	r26, r24
    1588:	a6 51       	subi	r26, 0x16	; 22
    158a:	bd 4f       	sbci	r27, 0xFD	; 253
    158c:	a3 0f       	add	r26, r19
    158e:	b1 1d       	adc	r27, r1
    1590:	2c 93       	st	X, r18
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	f3 cf       	rjmp	.-26     	; 0x157c <twi_transmit+0x20>
    1596:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    159a:	68 0f       	add	r22, r24
    159c:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <twi_txBufferLength>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	08 95       	ret
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	08 95       	ret
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	08 95       	ret

000015ac <twi_attachSlaveRxEvent>:
    15ac:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <twi_onSlaveReceive+0x1>
    15b0:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_onSlaveReceive>
    15b4:	08 95       	ret

000015b6 <twi_attachSlaveTxEvent>:
    15b6:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <twi_onSlaveTransmit+0x1>
    15ba:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_onSlaveTransmit>
    15be:	08 95       	ret

000015c0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    15c0:	85 ed       	ldi	r24, 0xD5	; 213
    15c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    15c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    15ca:	84 fd       	sbrc	r24, 4
    15cc:	fc cf       	rjmp	.-8      	; 0x15c6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    15ce:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
    15d2:	08 95       	ret

000015d4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    15d4:	85 ec       	ldi	r24, 0xC5	; 197
    15d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    15da:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
    15de:	08 95       	ret

000015e0 <__vector_24>:
}

ISR(TWI_vect)
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
  switch(TW_STATUS){
    1602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    1606:	88 7f       	andi	r24, 0xF8	; 248
    1608:	80 36       	cpi	r24, 0x60	; 96
    160a:	09 f4       	brne	.+2      	; 0x160e <__vector_24+0x2e>
    160c:	9e c0       	rjmp	.+316    	; 0x174a <__vector_24+0x16a>
    160e:	78 f5       	brcc	.+94     	; 0x166e <__vector_24+0x8e>
    1610:	88 32       	cpi	r24, 0x28	; 40
    1612:	09 f4       	brne	.+2      	; 0x1616 <__vector_24+0x36>
    1614:	5d c0       	rjmp	.+186    	; 0x16d0 <__vector_24+0xf0>
    1616:	90 f4       	brcc	.+36     	; 0x163c <__vector_24+0x5c>
    1618:	80 31       	cpi	r24, 0x10	; 16
    161a:	09 f4       	brne	.+2      	; 0x161e <__vector_24+0x3e>
    161c:	56 c0       	rjmp	.+172    	; 0x16ca <__vector_24+0xea>
    161e:	38 f4       	brcc	.+14     	; 0x162e <__vector_24+0x4e>
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <__vector_24+0x46>
    1624:	f5 c0       	rjmp	.+490    	; 0x1810 <__vector_24+0x230>
    1626:	88 30       	cpi	r24, 0x08	; 8
    1628:	09 f4       	brne	.+2      	; 0x162c <__vector_24+0x4c>
    162a:	4f c0       	rjmp	.+158    	; 0x16ca <__vector_24+0xea>
    162c:	f5 c0       	rjmp	.+490    	; 0x1818 <__vector_24+0x238>
    162e:	88 31       	cpi	r24, 0x18	; 24
    1630:	09 f4       	brne	.+2      	; 0x1634 <__vector_24+0x54>
    1632:	4e c0       	rjmp	.+156    	; 0x16d0 <__vector_24+0xf0>
    1634:	80 32       	cpi	r24, 0x20	; 32
    1636:	09 f4       	brne	.+2      	; 0x163a <__vector_24+0x5a>
    1638:	5f c0       	rjmp	.+190    	; 0x16f8 <__vector_24+0x118>
    163a:	ee c0       	rjmp	.+476    	; 0x1818 <__vector_24+0x238>
    163c:	80 34       	cpi	r24, 0x40	; 64
    163e:	09 f4       	brne	.+2      	; 0x1642 <__vector_24+0x62>
    1640:	6a c0       	rjmp	.+212    	; 0x1716 <__vector_24+0x136>
    1642:	58 f4       	brcc	.+22     	; 0x165a <__vector_24+0x7a>
    1644:	80 33       	cpi	r24, 0x30	; 48
    1646:	09 f4       	brne	.+2      	; 0x164a <__vector_24+0x6a>
    1648:	57 c0       	rjmp	.+174    	; 0x16f8 <__vector_24+0x118>
    164a:	88 33       	cpi	r24, 0x38	; 56
    164c:	09 f0       	breq	.+2      	; 0x1650 <__vector_24+0x70>
    164e:	e4 c0       	rjmp	.+456    	; 0x1818 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1650:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <twi_error>
      twi_releaseBus();
    1654:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <twi_releaseBus>
      break;
    1658:	df c0       	rjmp	.+446    	; 0x1818 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    165a:	80 35       	cpi	r24, 0x50	; 80
    165c:	09 f4       	brne	.+2      	; 0x1660 <__vector_24+0x80>
    165e:	4f c0       	rjmp	.+158    	; 0x16fe <__vector_24+0x11e>
    1660:	88 35       	cpi	r24, 0x58	; 88
    1662:	09 f4       	brne	.+2      	; 0x1666 <__vector_24+0x86>
    1664:	5d c0       	rjmp	.+186    	; 0x1720 <__vector_24+0x140>
    1666:	88 34       	cpi	r24, 0x48	; 72
    1668:	09 f0       	breq	.+2      	; 0x166c <__vector_24+0x8c>
    166a:	d6 c0       	rjmp	.+428    	; 0x1818 <__vector_24+0x238>
    166c:	d3 c0       	rjmp	.+422    	; 0x1814 <__vector_24+0x234>
    166e:	88 39       	cpi	r24, 0x98	; 152
    1670:	09 f4       	brne	.+2      	; 0x1674 <__vector_24+0x94>
    1672:	c4 c0       	rjmp	.+392    	; 0x17fc <__vector_24+0x21c>
    1674:	a8 f4       	brcc	.+42     	; 0x16a0 <__vector_24+0xc0>
    1676:	88 37       	cpi	r24, 0x78	; 120
    1678:	09 f4       	brne	.+2      	; 0x167c <__vector_24+0x9c>
    167a:	67 c0       	rjmp	.+206    	; 0x174a <__vector_24+0x16a>
    167c:	38 f4       	brcc	.+14     	; 0x168c <__vector_24+0xac>
    167e:	88 36       	cpi	r24, 0x68	; 104
    1680:	09 f4       	brne	.+2      	; 0x1684 <__vector_24+0xa4>
    1682:	63 c0       	rjmp	.+198    	; 0x174a <__vector_24+0x16a>
    1684:	80 37       	cpi	r24, 0x70	; 112
    1686:	09 f4       	brne	.+2      	; 0x168a <__vector_24+0xaa>
    1688:	60 c0       	rjmp	.+192    	; 0x174a <__vector_24+0x16a>
    168a:	c6 c0       	rjmp	.+396    	; 0x1818 <__vector_24+0x238>
    168c:	88 38       	cpi	r24, 0x88	; 136
    168e:	09 f4       	brne	.+2      	; 0x1692 <__vector_24+0xb2>
    1690:	b5 c0       	rjmp	.+362    	; 0x17fc <__vector_24+0x21c>
    1692:	80 39       	cpi	r24, 0x90	; 144
    1694:	09 f4       	brne	.+2      	; 0x1698 <__vector_24+0xb8>
    1696:	5f c0       	rjmp	.+190    	; 0x1756 <__vector_24+0x176>
    1698:	80 38       	cpi	r24, 0x80	; 128
    169a:	09 f0       	breq	.+2      	; 0x169e <__vector_24+0xbe>
    169c:	bd c0       	rjmp	.+378    	; 0x1818 <__vector_24+0x238>
    169e:	5b c0       	rjmp	.+182    	; 0x1756 <__vector_24+0x176>
    16a0:	80 3b       	cpi	r24, 0xB0	; 176
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <__vector_24+0xc6>
    16a4:	83 c0       	rjmp	.+262    	; 0x17ac <__vector_24+0x1cc>
    16a6:	38 f4       	brcc	.+14     	; 0x16b6 <__vector_24+0xd6>
    16a8:	80 3a       	cpi	r24, 0xA0	; 160
    16aa:	09 f4       	brne	.+2      	; 0x16ae <__vector_24+0xce>
    16ac:	66 c0       	rjmp	.+204    	; 0x177a <__vector_24+0x19a>
    16ae:	88 3a       	cpi	r24, 0xA8	; 168
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <__vector_24+0xd4>
    16b2:	7c c0       	rjmp	.+248    	; 0x17ac <__vector_24+0x1cc>
    16b4:	b1 c0       	rjmp	.+354    	; 0x1818 <__vector_24+0x238>
    16b6:	80 3c       	cpi	r24, 0xC0	; 192
    16b8:	09 f4       	brne	.+2      	; 0x16bc <__vector_24+0xdc>
    16ba:	a4 c0       	rjmp	.+328    	; 0x1804 <__vector_24+0x224>
    16bc:	88 3c       	cpi	r24, 0xC8	; 200
    16be:	09 f4       	brne	.+2      	; 0x16c2 <__vector_24+0xe2>
    16c0:	a1 c0       	rjmp	.+322    	; 0x1804 <__vector_24+0x224>
    16c2:	88 3b       	cpi	r24, 0xB8	; 184
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <__vector_24+0xe8>
    16c6:	87 c0       	rjmp	.+270    	; 0x17d6 <__vector_24+0x1f6>
    16c8:	a7 c0       	rjmp	.+334    	; 0x1818 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    16ca:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_slarw>
    16ce:	10 c0       	rjmp	.+32     	; 0x16f0 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    16d0:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_masterBufferIndex>
    16d4:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_masterBufferLength>
    16d8:	98 17       	cp	r25, r24
    16da:	70 f5       	brcc	.+92     	; 0x1738 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    16dc:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <twi_masterBufferIndex>
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	8e 0f       	add	r24, r30
    16e4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_masterBufferIndex>
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	e4 5f       	subi	r30, 0xF4	; 244
    16ec:	fc 4f       	sbci	r31, 0xFC	; 252
    16ee:	80 81       	ld	r24, Z
    16f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16f4:	85 ec       	ldi	r24, 0xC5	; 197
    16f6:	83 c0       	rjmp	.+262    	; 0x17fe <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    16f8:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <twi_error>
    16fc:	8b c0       	rjmp	.+278    	; 0x1814 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    16fe:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <twi_masterBufferIndex>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	8e 0f       	add	r24, r30
    1706:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_masterBufferIndex>
    170a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	e4 5f       	subi	r30, 0xF4	; 244
    1712:	fc 4f       	sbci	r31, 0xFC	; 252
    1714:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1716:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_masterBufferIndex>
    171a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_masterBufferLength>
    171e:	6b c0       	rjmp	.+214    	; 0x17f6 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1720:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <twi_masterBufferIndex>
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	8e 0f       	add	r24, r30
    1728:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_masterBufferIndex>
    172c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	e4 5f       	subi	r30, 0xF4	; 244
    1734:	fc 4f       	sbci	r31, 0xFC	; 252
    1736:	80 83       	st	Z, r24
	if (twi_sendStop)
    1738:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <twi_sendStop>
    173c:	81 11       	cpse	r24, r1
    173e:	6a c0       	rjmp	.+212    	; 0x1814 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1746:	84 ea       	ldi	r24, 0xA4	; 164
    1748:	5e c0       	rjmp	.+188    	; 0x1806 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1750:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <twi_rxBufferIndex>
    1754:	cf cf       	rjmp	.-98     	; 0x16f4 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1756:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    175a:	80 32       	cpi	r24, 0x20	; 32
    175c:	08 f0       	brcs	.+2      	; 0x1760 <__vector_24+0x180>
    175e:	4e c0       	rjmp	.+156    	; 0x17fc <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1760:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	8e 0f       	add	r24, r30
    1768:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <twi_rxBufferIndex>
    176c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	e8 53       	subi	r30, 0x38	; 56
    1774:	fd 4f       	sbci	r31, 0xFD	; 253
    1776:	80 83       	st	Z, r24
    1778:	bd cf       	rjmp	.-134    	; 0x16f4 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    177a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    177e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    1782:	80 32       	cpi	r24, 0x20	; 32
    1784:	30 f4       	brcc	.+12     	; 0x1792 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1786:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	e8 53       	subi	r30, 0x38	; 56
    178e:	fd 4f       	sbci	r31, 0xFD	; 253
    1790:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1792:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <twi_onSlaveReceive>
    179c:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <twi_onSlaveReceive+0x1>
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    17a6:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <twi_rxBufferIndex>
      break;
    17aa:	36 c0       	rjmp	.+108    	; 0x1818 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    17ac:	84 e0       	ldi	r24, 0x04	; 4
    17ae:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    17b2:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    17b6:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    17ba:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <twi_onSlaveTransmit>
    17be:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <twi_onSlaveTransmit+0x1>
    17c2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    17c4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    17c8:	81 11       	cpse	r24, r1
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    17d2:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    17d6:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <twi_txBufferIndex>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	8e 0f       	add	r24, r30
    17de:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_txBufferIndex>
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	e6 51       	subi	r30, 0x16	; 22
    17e6:	fd 4f       	sbci	r31, 0xFD	; 253
    17e8:	80 81       	ld	r24, Z
    17ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17ee:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <twi_txBufferIndex>
    17f2:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    17f6:	98 17       	cp	r25, r24
    17f8:	08 f4       	brcc	.+2      	; 0x17fc <__vector_24+0x21c>
    17fa:	7c cf       	rjmp	.-264    	; 0x16f4 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17fc:	85 e8       	ldi	r24, 0x85	; 133
    17fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1804:	85 ec       	ldi	r24, 0xC5	; 197
    1806:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    180a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
      break;
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1810:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <twi_error>
      twi_stop();
    1814:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <twi_stop>
      break;
  }
}
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    183a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1844:	82 1b       	sub	r24, r18
    1846:	91 09       	sbc	r25, r1
    1848:	08 95       	ret

0000184a <_ZN7TwoWire4readEv>:
    184a:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    184e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    1852:	98 17       	cp	r25, r24
    1854:	50 f4       	brcc	.+20     	; 0x186a <_ZN7TwoWire4readEv+0x20>
    1856:	e9 2f       	mov	r30, r25
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	e7 59       	subi	r30, 0x97	; 151
    185c:	fc 4f       	sbci	r31, 0xFC	; 252
    185e:	20 81       	ld	r18, Z
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	9f 5f       	subi	r25, 0xFF	; 255
    1864:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1868:	02 c0       	rjmp	.+4      	; 0x186e <_ZN7TwoWire4readEv+0x24>
    186a:	2f ef       	ldi	r18, 0xFF	; 255
    186c:	3f ef       	ldi	r19, 0xFF	; 255
    186e:	c9 01       	movw	r24, r18
    1870:	08 95       	ret

00001872 <_ZN7TwoWire4peekEv>:
    1872:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1876:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    187a:	e8 17       	cp	r30, r24
    187c:	30 f4       	brcc	.+12     	; 0x188a <_ZN7TwoWire4peekEv+0x18>
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	e7 59       	subi	r30, 0x97	; 151
    1882:	fc 4f       	sbci	r31, 0xFC	; 252
    1884:	80 81       	ld	r24, Z
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	08 95       	ret
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	08 95       	ret

00001890 <_ZN7TwoWire5flushEv>:
    1890:	08 95       	ret

00001892 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
    1898:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <_ZN7TwoWire14user_onReceiveE>
    189c:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <_ZN7TwoWire14user_onReceiveE+0x1>
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	f1 f0       	breq	.+60     	; 0x18e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    18a4:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    18a8:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    18ac:	98 17       	cp	r25, r24
    18ae:	c0 f0       	brcs	.+48     	; 0x18e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	29 2f       	mov	r18, r25
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	26 17       	cp	r18, r22
    18b8:	37 07       	cpc	r19, r23
    18ba:	54 f4       	brge	.+20     	; 0x18d0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    18bc:	de 01       	movw	r26, r28
    18be:	a2 0f       	add	r26, r18
    18c0:	b3 1f       	adc	r27, r19
    18c2:	4c 91       	ld	r20, X
    18c4:	d9 01       	movw	r26, r18
    18c6:	a7 59       	subi	r26, 0x97	; 151
    18c8:	bc 4f       	sbci	r27, 0xFC	; 252
    18ca:	4c 93       	st	X, r20
    18cc:	9f 5f       	subi	r25, 0xFF	; 255
    18ce:	f1 cf       	rjmp	.-30     	; 0x18b2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    18d0:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    18d4:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    18d8:	cb 01       	movw	r24, r22
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	09 94       	ijmp
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <_ZN7TwoWire16onRequestServiceEv>:
    18e6:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <_ZN7TwoWire14user_onRequestE>
    18ea:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <_ZN7TwoWire14user_onRequestE+0x1>
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	29 f0       	breq	.+10     	; 0x18fc <_ZN7TwoWire16onRequestServiceEv+0x16>
    18f2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    18f6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    18fa:	09 94       	ijmp
    18fc:	08 95       	ret

000018fe <_ZN7TwoWire5writeEPKhj>:
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	7c 01       	movw	r14, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8a 01       	movw	r16, r20
    1914:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <_ZN7TwoWire12transmittingE>
    1918:	22 23       	and	r18, r18
    191a:	89 f0       	breq	.+34     	; 0x193e <_ZN7TwoWire5writeEPKhj+0x40>
    191c:	eb 01       	movw	r28, r22
    191e:	6b 01       	movw	r12, r22
    1920:	c4 0e       	add	r12, r20
    1922:	d5 1e       	adc	r13, r21
    1924:	cc 15       	cp	r28, r12
    1926:	dd 05       	cpc	r29, r13
    1928:	69 f0       	breq	.+26     	; 0x1944 <_ZN7TwoWire5writeEPKhj+0x46>
    192a:	69 91       	ld	r22, Y+
    192c:	d7 01       	movw	r26, r14
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	01 90       	ld	r0, Z+
    1934:	f0 81       	ld	r31, Z
    1936:	e0 2d       	mov	r30, r0
    1938:	c7 01       	movw	r24, r14
    193a:	09 95       	icall
    193c:	f3 cf       	rjmp	.-26     	; 0x1924 <_ZN7TwoWire5writeEPKhj+0x26>
    193e:	64 2f       	mov	r22, r20
    1940:	0e 94 ae 0a 	call	0x155c	; 0x155c <twi_transmit>
    1944:	c8 01       	movw	r24, r16
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	08 95       	ret

00001958 <_ZN7TwoWire5writeEh>:
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	1f 92       	push	r1
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	69 83       	std	Y+1, r22	; 0x01
    1964:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <_ZN7TwoWire12transmittingE>
    1968:	22 23       	and	r18, r18
    196a:	d1 f0       	breq	.+52     	; 0x19a0 <_ZN7TwoWire5writeEh+0x48>
    196c:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    1970:	20 32       	cpi	r18, 0x20	; 32
    1972:	40 f0       	brcs	.+16     	; 0x1984 <_ZN7TwoWire5writeEh+0x2c>
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	fc 01       	movw	r30, r24
    197a:	33 83       	std	Z+3, r19	; 0x03
    197c:	22 83       	std	Z+2, r18	; 0x02
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	15 c0       	rjmp	.+42     	; 0x19ae <_ZN7TwoWire5writeEh+0x56>
    1984:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    1988:	e8 2f       	mov	r30, r24
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	e9 5b       	subi	r30, 0xB9	; 185
    198e:	fc 4f       	sbci	r31, 0xFC	; 252
    1990:	99 81       	ldd	r25, Y+1	; 0x01
    1992:	90 83       	st	Z, r25
    1994:	8f 5f       	subi	r24, 0xFF	; 255
    1996:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    199a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <_ZN7TwoWire5writeEh+0x52>
    19a0:	61 e0       	ldi	r22, 0x01	; 1
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 ae 0a 	call	0x155c	; 0x155c <twi_transmit>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0f 90       	pop	r0
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <_ZN7TwoWireC1Ev>:
    19b6:	fc 01       	movw	r30, r24
    19b8:	13 82       	std	Z+3, r1	; 0x03
    19ba:	12 82       	std	Z+2, r1	; 0x02
    19bc:	88 ee       	ldi	r24, 0xE8	; 232
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	a0 e0       	ldi	r26, 0x00	; 0
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	84 83       	std	Z+4, r24	; 0x04
    19c6:	95 83       	std	Z+5, r25	; 0x05
    19c8:	a6 83       	std	Z+6, r26	; 0x06
    19ca:	b7 83       	std	Z+7, r27	; 0x07
    19cc:	87 e6       	ldi	r24, 0x67	; 103
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	08 95       	ret

000019d6 <_ZN7TwoWire5beginEv>:
    19d6:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    19da:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    19de:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    19e2:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    19e6:	0e 94 90 0a 	call	0x1520	; 0x1520 <twi_init>
    19ea:	83 e7       	ldi	r24, 0x73	; 115
    19ec:	9c e0       	ldi	r25, 0x0C	; 12
    19ee:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <twi_attachSlaveTxEvent>
    19f2:	89 e4       	ldi	r24, 0x49	; 73
    19f4:	9c e0       	ldi	r25, 0x0C	; 12
    19f6:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <twi_attachSlaveRxEvent>

000019fa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    19fa:	84 e3       	ldi	r24, 0x34	; 52
    19fc:	93 e0       	ldi	r25, 0x03	; 3
    19fe:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <_ZN7TwoWireC1Ev>

00001a02 <_ZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONA>:
}



//SMS/GPRS test
void ExtendedTests::runExtendedGsmTest(Adafruit_FONA fona) {
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <_ZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONA+0xa>
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <_ZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONA+0xc>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	8c 01       	movw	r16, r24
	
#if IS_EXTENDED_GSM_TEST == true

	delay(5000);
    1a14:	68 e8       	ldi	r22, 0x88	; 136
    1a16:	73 e1       	ldi	r23, 0x13	; 19
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <delay>
	
	RM_LOGLN(F("TEST: Checking rssi..."));
    1a20:	65 ea       	ldi	r22, 0xA5	; 165
    1a22:	73 e0       	ldi	r23, 0x03	; 3
    1a24:	89 e8       	ldi	r24, 0x89	; 137
    1a26:	93 e0       	ldi	r25, 0x03	; 3
    1a28:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	FONA_GET_RSSI result = fona.getRSSI();
    1a2c:	c8 01       	movw	r24, r16
    1a2e:	0e 94 3a 07 	call	0xe74	; 0xe74 <_ZN13Adafruit_FONA7getRSSIEv>
    1a32:	69 83       	std	Y+1, r22	; 0x01
    1a34:	7a 83       	std	Y+2, r23	; 0x02
    1a36:	8b 83       	std	Y+3, r24	; 0x03
    1a38:	9c 83       	std	Y+4, r25	; 0x04
	Helpers::printRSSI(&result);	
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	0e 94 a9 07 	call	0xf52	; 0xf52 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1a54:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1a56:	91 8d       	ldd	r25, Z+25	; 0x19
    1a58:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a5a:	89 2f       	mov	r24, r25
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	80 5c       	subi	r24, 0xC0	; 192
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	82 1b       	sub	r24, r18
    1a64:	91 09       	sbc	r25, r1
}
    1a66:	8f 73       	andi	r24, 0x3F	; 63
    1a68:	99 27       	eor	r25, r25
    1a6a:	08 95       	ret

00001a6c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1a6c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a6e:	91 8d       	ldd	r25, Z+25	; 0x19
    1a70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a72:	98 17       	cp	r25, r24
    1a74:	31 f0       	breq	.+12     	; 0x1a82 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1a76:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a78:	e8 0f       	add	r30, r24
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1a86:	08 95       	ret

00001a88 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1a88:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a8a:	91 8d       	ldd	r25, Z+25	; 0x19
    1a8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a8e:	98 17       	cp	r25, r24
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1a92:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a94:	df 01       	movw	r26, r30
    1a96:	a8 0f       	add	r26, r24
    1a98:	b1 1d       	adc	r27, r1
    1a9a:	5d 96       	adiw	r26, 0x1d	; 29
    1a9c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aa0:	9f 5f       	subi	r25, 0xFF	; 255
    1aa2:	9f 73       	andi	r25, 0x3F	; 63
    1aa4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1aae:	08 95       	ret

00001ab0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1ab0:	8d ea       	ldi	r24, 0xAD	; 173
    1ab2:	9e e0       	ldi	r25, 0x0E	; 14
    1ab4:	89 2b       	or	r24, r25
    1ab6:	49 f0       	breq	.+18     	; 0x1aca <_Z14serialEventRunv+0x1a>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	89 2b       	or	r24, r25
    1abe:	29 f0       	breq	.+10     	; 0x1aca <_Z14serialEventRunv+0x1a>
    1ac0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_Z17Serial0_availablev>
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1aca:	08 95       	ret

00001acc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1acc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1ace:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ad0:	df 01       	movw	r26, r30
    1ad2:	a8 0f       	add	r26, r24
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	a3 5a       	subi	r26, 0xA3	; 163
    1ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ada:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1adc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	8f 73       	andi	r24, 0x3F	; 63
    1ae4:	99 27       	eor	r25, r25
    1ae6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1ae8:	a6 89       	ldd	r26, Z+22	; 0x16
    1aea:	b7 89       	ldd	r27, Z+23	; 0x17
    1aec:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1aee:	a0 89       	ldd	r26, Z+16	; 0x10
    1af0:	b1 89       	ldd	r27, Z+17	; 0x11
    1af2:	8c 91       	ld	r24, X
    1af4:	80 64       	ori	r24, 0x40	; 64
    1af6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1af8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1afa:	84 8d       	ldd	r24, Z+28	; 0x1c
    1afc:	98 13       	cpse	r25, r24
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1b00:	02 88       	ldd	r0, Z+18	; 0x12
    1b02:	f3 89       	ldd	r31, Z+19	; 0x13
    1b04:	e0 2d       	mov	r30, r0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 7d       	andi	r24, 0xDF	; 223
    1b0a:	80 83       	st	Z, r24
    1b0c:	08 95       	ret

00001b0e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	ec 01       	movw	r28, r24
  _written = true;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b24:	98 13       	cpse	r25, r24
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <_ZN14HardwareSerial5writeEh+0x24>
    1b28:	e8 89       	ldd	r30, Y+16	; 0x10
    1b2a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b2c:	80 81       	ld	r24, Z
    1b2e:	85 fd       	sbrc	r24, 5
    1b30:	24 c0       	rjmp	.+72     	; 0x1b7a <_ZN14HardwareSerial5writeEh+0x6c>
    1b32:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1b34:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	0f 5f       	subi	r16, 0xFF	; 255
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	0f 73       	andi	r16, 0x3F	; 63
    1b3e:	11 27       	eor	r17, r17
    1b40:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1b42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b44:	e8 12       	cpse	r14, r24
    1b46:	0c c0       	rjmp	.+24     	; 0x1b60 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	07 fc       	sbrc	r0, 7
    1b4c:	fa cf       	rjmp	.-12     	; 0x1b42 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1b4e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b50:	f9 89       	ldd	r31, Y+17	; 0x11
    1b52:	80 81       	ld	r24, Z
    1b54:	85 ff       	sbrs	r24, 5
    1b56:	f5 cf       	rjmp	.-22     	; 0x1b42 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b5e:	f1 cf       	rjmp	.-30     	; 0x1b42 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b62:	fe 01       	movw	r30, r28
    1b64:	e8 0f       	add	r30, r24
    1b66:	f1 1d       	adc	r31, r1
    1b68:	e3 5a       	subi	r30, 0xA3	; 163
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1b6e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1b70:	ea 89       	ldd	r30, Y+18	; 0x12
    1b72:	fb 89       	ldd	r31, Y+19	; 0x13
    1b74:	80 81       	ld	r24, Z
    1b76:	80 62       	ori	r24, 0x20	; 32
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1b7a:	ee 89       	ldd	r30, Y+22	; 0x16
    1b7c:	ff 89       	ldd	r31, Y+23	; 0x17
    1b7e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1b80:	e8 89       	ldd	r30, Y+16	; 0x10
    1b82:	f9 89       	ldd	r31, Y+17	; 0x11
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	08 95       	ret

00001b9c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1ba2:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba4:	88 23       	and	r24, r24
    1ba6:	c9 f0       	breq	.+50     	; 0x1bda <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1ba8:	ea 89       	ldd	r30, Y+18	; 0x12
    1baa:	fb 89       	ldd	r31, Y+19	; 0x13
    1bac:	80 81       	ld	r24, Z
    1bae:	85 fd       	sbrc	r24, 5
    1bb0:	05 c0       	rjmp	.+10     	; 0x1bbc <_ZN14HardwareSerial5flushEv+0x20>
    1bb2:	a8 89       	ldd	r26, Y+16	; 0x10
    1bb4:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb6:	8c 91       	ld	r24, X
    1bb8:	86 fd       	sbrc	r24, 6
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	07 fc       	sbrc	r0, 7
    1bc0:	f5 cf       	rjmp	.-22     	; 0x1bac <_ZN14HardwareSerial5flushEv+0x10>
    1bc2:	80 81       	ld	r24, Z
    1bc4:	85 ff       	sbrs	r24, 5
    1bc6:	f2 cf       	rjmp	.-28     	; 0x1bac <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1bc8:	a8 89       	ldd	r26, Y+16	; 0x10
    1bca:	b9 89       	ldd	r27, Y+17	; 0x11
    1bcc:	8c 91       	ld	r24, X
    1bce:	85 ff       	sbrs	r24, 5
    1bd0:	ed cf       	rjmp	.-38     	; 0x1bac <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1bd8:	e7 cf       	rjmp	.-50     	; 0x1ba8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ec 01       	movw	r28, r24
    1bf0:	6a 01       	movw	r12, r20
    1bf2:	7b 01       	movw	r14, r22
    1bf4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1bf6:	e8 89       	ldd	r30, Y+16	; 0x10
    1bf8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1bfe:	41 15       	cp	r20, r1
    1c00:	51 4e       	sbci	r21, 0xE1	; 225
    1c02:	61 05       	cpc	r22, r1
    1c04:	71 05       	cpc	r23, r1
    1c06:	b1 f0       	breq	.+44     	; 0x1c34 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	79 e0       	ldi	r23, 0x09	; 9
    1c0c:	8d e3       	ldi	r24, 0x3D	; 61
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a7 01       	movw	r20, r14
    1c12:	96 01       	movw	r18, r12
    1c14:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    1c18:	da 01       	movw	r26, r20
    1c1a:	c9 01       	movw	r24, r18
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	a1 09       	sbc	r26, r1
    1c20:	b1 09       	sbc	r27, r1
    1c22:	b6 95       	lsr	r27
    1c24:	a7 95       	ror	r26
    1c26:	97 95       	ror	r25
    1c28:	87 95       	ror	r24
    1c2a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c2c:	21 15       	cp	r18, r1
    1c2e:	80 e1       	ldi	r24, 0x10	; 16
    1c30:	38 07       	cpc	r19, r24
    1c32:	a8 f0       	brcs	.+42     	; 0x1c5e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1c34:	e8 89       	ldd	r30, Y+16	; 0x10
    1c36:	f9 89       	ldd	r31, Y+17	; 0x11
    1c38:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c3a:	60 e8       	ldi	r22, 0x80	; 128
    1c3c:	74 e8       	ldi	r23, 0x84	; 132
    1c3e:	8e e1       	ldi	r24, 0x1E	; 30
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a7 01       	movw	r20, r14
    1c44:	96 01       	movw	r18, r12
    1c46:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    1c4a:	da 01       	movw	r26, r20
    1c4c:	c9 01       	movw	r24, r18
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	a1 09       	sbc	r26, r1
    1c52:	b1 09       	sbc	r27, r1
    1c54:	b6 95       	lsr	r27
    1c56:	a7 95       	ror	r26
    1c58:	97 95       	ror	r25
    1c5a:	87 95       	ror	r24
    1c5c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1c5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c60:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c62:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1c64:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c66:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c68:	20 83       	st	Z, r18

  _written = false;
    1c6a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1c6c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c6e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c70:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1c72:	ea 89       	ldd	r30, Y+18	; 0x12
    1c74:	fb 89       	ldd	r31, Y+19	; 0x13
    1c76:	80 81       	ld	r24, Z
    1c78:	80 61       	ori	r24, 0x10	; 16
    1c7a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1c7c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c7e:	fb 89       	ldd	r31, Y+19	; 0x13
    1c80:	80 81       	ld	r24, Z
    1c82:	88 60       	ori	r24, 0x08	; 8
    1c84:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1c86:	ea 89       	ldd	r30, Y+18	; 0x12
    1c88:	fb 89       	ldd	r31, Y+19	; 0x13
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 68       	ori	r24, 0x80	; 128
    1c8e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1c90:	ea 89       	ldd	r30, Y+18	; 0x12
    1c92:	fb 89       	ldd	r31, Y+19	; 0x13
    1c94:	80 81       	ld	r24, Z
    1c96:	8f 7d       	andi	r24, 0xDF	; 223
    1c98:	80 83       	st	Z, r24
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	08 95       	ret

00001caa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1caa:	1f 92       	push	r1
    1cac:	0f 92       	push	r0
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	0f 92       	push	r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	2f 93       	push	r18
    1cb6:	8f 93       	push	r24
    1cb8:	9f 93       	push	r25
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1cbe:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <Serial+0x10>
    1cc2:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <Serial+0x11>
    1cc6:	80 81       	ld	r24, Z
    1cc8:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <Serial+0x16>
    1ccc:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <Serial+0x17>
    1cd0:	82 fd       	sbrc	r24, 2
    1cd2:	12 c0       	rjmp	.+36     	; 0x1cf8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1cd4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1cd6:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <Serial+0x19>
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
    1cdc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1cde:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <Serial+0x1a>
    1ce2:	82 17       	cp	r24, r18
    1ce4:	51 f0       	breq	.+20     	; 0x1cfa <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1ce6:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <Serial+0x19>
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	e7 57       	subi	r30, 0x77	; 119
    1cee:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1cf2:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <Serial+0x19>
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1cf8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1cfa:	ff 91       	pop	r31
    1cfc:	ef 91       	pop	r30
    1cfe:	9f 91       	pop	r25
    1d00:	8f 91       	pop	r24
    1d02:	2f 91       	pop	r18
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1d30:	89 e8       	ldi	r24, 0x89	; 137
    1d32:	93 e0       	ldi	r25, 0x03	; 3
    1d34:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1d38:	ff 91       	pop	r31
    1d3a:	ef 91       	pop	r30
    1d3c:	bf 91       	pop	r27
    1d3e:	af 91       	pop	r26
    1d40:	9f 91       	pop	r25
    1d42:	8f 91       	pop	r24
    1d44:	7f 91       	pop	r23
    1d46:	6f 91       	pop	r22
    1d48:	5f 91       	pop	r21
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1d5a:	89 e8       	ldi	r24, 0x89	; 137
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN14HardwareSerial9availableEv>
    1d62:	21 e0       	ldi	r18, 0x01	; 1
    1d64:	89 2b       	or	r24, r25
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <_Z17Serial0_availablev+0x10>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
}
    1d6a:	82 2f       	mov	r24, r18
    1d6c:	08 95       	ret

00001d6e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d6e:	e9 e8       	ldi	r30, 0x89	; 137
    1d70:	f3 e0       	ldi	r31, 0x03	; 3
    1d72:	13 82       	std	Z+3, r1	; 0x03
    1d74:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1d76:	88 ee       	ldi	r24, 0xE8	; 232
    1d78:	93 e0       	ldi	r25, 0x03	; 3
    1d7a:	a0 e0       	ldi	r26, 0x00	; 0
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	84 83       	std	Z+4, r24	; 0x04
    1d80:	95 83       	std	Z+5, r25	; 0x05
    1d82:	a6 83       	std	Z+6, r26	; 0x06
    1d84:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1d86:	87 e7       	ldi	r24, 0x77	; 119
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	85 ec       	ldi	r24, 0xC5	; 197
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	95 87       	std	Z+13, r25	; 0x0d
    1d94:	84 87       	std	Z+12, r24	; 0x0c
    1d96:	84 ec       	ldi	r24, 0xC4	; 196
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	97 87       	std	Z+15, r25	; 0x0f
    1d9c:	86 87       	std	Z+14, r24	; 0x0e
    1d9e:	80 ec       	ldi	r24, 0xC0	; 192
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	91 8b       	std	Z+17, r25	; 0x11
    1da4:	80 8b       	std	Z+16, r24	; 0x10
    1da6:	81 ec       	ldi	r24, 0xC1	; 193
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	93 8b       	std	Z+19, r25	; 0x13
    1dac:	82 8b       	std	Z+18, r24	; 0x12
    1dae:	82 ec       	ldi	r24, 0xC2	; 194
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	95 8b       	std	Z+21, r25	; 0x15
    1db4:	84 8b       	std	Z+20, r24	; 0x14
    1db6:	86 ec       	ldi	r24, 0xC6	; 198
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	97 8b       	std	Z+23, r25	; 0x17
    1dbc:	86 8b       	std	Z+22, r24	; 0x16
    1dbe:	11 8e       	std	Z+25, r1	; 0x19
    1dc0:	12 8e       	std	Z+26, r1	; 0x1a
    1dc2:	13 8e       	std	Z+27, r1	; 0x1b
    1dc4:	14 8e       	std	Z+28, r1	; 0x1c
    1dc6:	08 95       	ret

00001dc8 <initVariant>:
    1dc8:	08 95       	ret

00001dca <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1dca:	0e 94 2f 11 	call	0x225e	; 0x225e <init>

	initVariant();
    1dce:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1dd2:	0e 94 be 08 	call	0x117c	; 0x117c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1dd6:	c8 e5       	ldi	r28, 0x58	; 88
    1dd8:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1dda:	0e 94 ca 09 	call	0x1394	; 0x1394 <loop>
		if (serialEventRun) serialEventRun();
    1dde:	20 97       	sbiw	r28, 0x00	; 0
    1de0:	e1 f3       	breq	.-8      	; 0x1dda <main+0x10>
    1de2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_Z14serialEventRunv>
    1de6:	f9 cf       	rjmp	.-14     	; 0x1dda <main+0x10>

00001de8 <_Znwj>:
    1de8:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <malloc>

00001dec <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	6c 01       	movw	r12, r24
    1dfe:	7a 01       	movw	r14, r20
    1e00:	8b 01       	movw	r16, r22
    1e02:	c0 e0       	ldi	r28, 0x00	; 0
    1e04:	d0 e0       	ldi	r29, 0x00	; 0
    1e06:	ce 15       	cp	r28, r14
    1e08:	df 05       	cpc	r29, r15
    1e0a:	81 f0       	breq	.+32     	; 0x1e2c <_ZN5Print5writeEPKhj+0x40>
    1e0c:	d8 01       	movw	r26, r16
    1e0e:	6d 91       	ld	r22, X+
    1e10:	8d 01       	movw	r16, r26
    1e12:	d6 01       	movw	r26, r12
    1e14:	ed 91       	ld	r30, X+
    1e16:	fc 91       	ld	r31, X
    1e18:	01 90       	ld	r0, Z+
    1e1a:	f0 81       	ld	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	c6 01       	movw	r24, r12
    1e20:	09 95       	icall
    1e22:	89 2b       	or	r24, r25
    1e24:	11 f0       	breq	.+4      	; 0x1e2a <_ZN5Print5writeEPKhj+0x3e>
    1e26:	21 96       	adiw	r28, 0x01	; 1
    1e28:	ee cf       	rjmp	.-36     	; 0x1e06 <_ZN5Print5writeEPKhj+0x1a>
    1e2a:	7e 01       	movw	r14, r28
    1e2c:	c7 01       	movw	r24, r14
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	ff 90       	pop	r15
    1e38:	ef 90       	pop	r14
    1e3a:	df 90       	pop	r13
    1e3c:	cf 90       	pop	r12
    1e3e:	08 95       	ret

00001e40 <_ZN5Print5writeEPKc>:
    1e40:	61 15       	cp	r22, r1
    1e42:	71 05       	cpc	r23, r1
    1e44:	79 f0       	breq	.+30     	; 0x1e64 <_ZN5Print5writeEPKc+0x24>
    1e46:	fb 01       	movw	r30, r22
    1e48:	01 90       	ld	r0, Z+
    1e4a:	00 20       	and	r0, r0
    1e4c:	e9 f7       	brne	.-6      	; 0x1e48 <_ZN5Print5writeEPKc+0x8>
    1e4e:	31 97       	sbiw	r30, 0x01	; 1
    1e50:	af 01       	movw	r20, r30
    1e52:	46 1b       	sub	r20, r22
    1e54:	57 0b       	sbc	r21, r23
    1e56:	dc 01       	movw	r26, r24
    1e58:	ed 91       	ld	r30, X+
    1e5a:	fc 91       	ld	r31, X
    1e5c:	02 80       	ldd	r0, Z+2	; 0x02
    1e5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e60:	e0 2d       	mov	r30, r0
    1e62:	09 94       	ijmp
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	08 95       	ret

00001e6a <_ZN5Print5printEPK19__FlashStringHelper>:
    1e6a:	ef 92       	push	r14
    1e6c:	ff 92       	push	r15
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	8c 01       	movw	r16, r24
    1e78:	7b 01       	movw	r14, r22
    1e7a:	c0 e0       	ldi	r28, 0x00	; 0
    1e7c:	d0 e0       	ldi	r29, 0x00	; 0
    1e7e:	f7 01       	movw	r30, r14
    1e80:	ec 0f       	add	r30, r28
    1e82:	fd 1f       	adc	r31, r29
    1e84:	64 91       	lpm	r22, Z
    1e86:	66 23       	and	r22, r22
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1e8a:	d8 01       	movw	r26, r16
    1e8c:	ed 91       	ld	r30, X+
    1e8e:	fc 91       	ld	r31, X
    1e90:	01 90       	ld	r0, Z+
    1e92:	f0 81       	ld	r31, Z
    1e94:	e0 2d       	mov	r30, r0
    1e96:	c8 01       	movw	r24, r16
    1e98:	09 95       	icall
    1e9a:	89 2b       	or	r24, r25
    1e9c:	11 f0       	breq	.+4      	; 0x1ea2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1e9e:	21 96       	adiw	r28, 0x01	; 1
    1ea0:	ee cf       	rjmp	.-36     	; 0x1e7e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	08 95       	ret

00001eb2 <_ZN5Print5printEPKc>:
    1eb2:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <_ZN5Print5writeEPKc>

00001eb6 <_ZN5Print5printEc>:
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	ed 91       	ld	r30, X+
    1eba:	fc 91       	ld	r31, X
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	f0 81       	ld	r31, Z
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	09 94       	ijmp

00001ec4 <_ZN5Print7printlnEv>:
    1ec4:	63 e8       	ldi	r22, 0x83	; 131
    1ec6:	71 e0       	ldi	r23, 0x01	; 1
    1ec8:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <_ZN5Print5writeEPKc>

00001ecc <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	ec 01       	movw	r28, r24
    1ed6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN5Print5printEPK19__FlashStringHelper>
    1eda:	8c 01       	movw	r16, r24
    1edc:	ce 01       	movw	r24, r28
    1ede:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print7printlnEv>
    1ee2:	80 0f       	add	r24, r16
    1ee4:	91 1f       	adc	r25, r17
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <_ZN5Print7printlnEPKc>:
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	ec 01       	movw	r28, r24
    1efa:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_ZN5Print5writeEPKc>
    1efe:	8c 01       	movw	r16, r24
    1f00:	ce 01       	movw	r24, r28
    1f02:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print7printlnEv>
    1f06:	80 0f       	add	r24, r16
    1f08:	91 1f       	adc	r25, r17
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	08 95       	ret

00001f14 <_ZN5Print7printlnEc>:
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	ec 01       	movw	r28, r24
    1f1e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_ZN5Print5printEc>
    1f22:	8c 01       	movw	r16, r24
    1f24:	ce 01       	movw	r24, r28
    1f26:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print7printlnEv>
    1f2a:	80 0f       	add	r24, r16
    1f2c:	91 1f       	adc	r25, r17
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <_ZN5Print11printNumberEmh>:
    1f38:	8f 92       	push	r8
    1f3a:	9f 92       	push	r9
    1f3c:	af 92       	push	r10
    1f3e:	bf 92       	push	r11
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	a1 97       	sbiw	r28, 0x21	; 33
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	7c 01       	movw	r14, r24
    1f5e:	fa 01       	movw	r30, r20
    1f60:	cb 01       	movw	r24, r22
    1f62:	19 a2       	std	Y+33, r1	; 0x21
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	08 f4       	brcc	.+2      	; 0x1f6a <_ZN5Print11printNumberEmh+0x32>
    1f68:	2a e0       	ldi	r18, 0x0A	; 10
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	0f 5d       	subi	r16, 0xDF	; 223
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	82 2e       	mov	r8, r18
    1f72:	91 2c       	mov	r9, r1
    1f74:	a1 2c       	mov	r10, r1
    1f76:	b1 2c       	mov	r11, r1
    1f78:	bf 01       	movw	r22, r30
    1f7a:	a5 01       	movw	r20, r10
    1f7c:	94 01       	movw	r18, r8
    1f7e:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    1f82:	f9 01       	movw	r30, r18
    1f84:	ca 01       	movw	r24, r20
    1f86:	01 50       	subi	r16, 0x01	; 1
    1f88:	11 09       	sbc	r17, r1
    1f8a:	6a 30       	cpi	r22, 0x0A	; 10
    1f8c:	10 f4       	brcc	.+4      	; 0x1f92 <_ZN5Print11printNumberEmh+0x5a>
    1f8e:	60 5d       	subi	r22, 0xD0	; 208
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <_ZN5Print11printNumberEmh+0x5c>
    1f92:	69 5c       	subi	r22, 0xC9	; 201
    1f94:	d8 01       	movw	r26, r16
    1f96:	6c 93       	st	X, r22
    1f98:	23 2b       	or	r18, r19
    1f9a:	24 2b       	or	r18, r20
    1f9c:	25 2b       	or	r18, r21
    1f9e:	61 f7       	brne	.-40     	; 0x1f78 <_ZN5Print11printNumberEmh+0x40>
    1fa0:	b8 01       	movw	r22, r16
    1fa2:	c7 01       	movw	r24, r14
    1fa4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <_ZN5Print5writeEPKc>
    1fa8:	a1 96       	adiw	r28, 0x21	; 33
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	9f 90       	pop	r9
    1fc6:	8f 90       	pop	r8
    1fc8:	08 95       	ret

00001fca <_ZN5Print5printEmi>:
    1fca:	21 15       	cp	r18, r1
    1fcc:	31 05       	cpc	r19, r1
    1fce:	41 f4       	brne	.+16     	; 0x1fe0 <_ZN5Print5printEmi+0x16>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	ed 91       	ld	r30, X+
    1fd4:	fc 91       	ld	r31, X
    1fd6:	01 90       	ld	r0, Z+
    1fd8:	f0 81       	ld	r31, Z
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	64 2f       	mov	r22, r20
    1fde:	09 94       	ijmp
    1fe0:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <_ZN5Print11printNumberEmh>

00001fe4 <_ZN5Print5printEhi>:
    1fe4:	9a 01       	movw	r18, r20
    1fe6:	46 2f       	mov	r20, r22
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_ZN5Print5printEmi>

00001ff2 <_ZN5Print7printlnEhi>:
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	ec 01       	movw	r28, r24
    1ffc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN5Print5printEhi>
    2000:	8c 01       	movw	r16, r24
    2002:	ce 01       	movw	r24, r28
    2004:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print7printlnEv>
    2008:	80 0f       	add	r24, r16
    200a:	91 1f       	adc	r25, r17
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <_ZN5Print5printEji>:
    2016:	9a 01       	movw	r18, r20
    2018:	ab 01       	movw	r20, r22
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_ZN5Print5printEmi>

00002022 <_ZN5Print7printlnEji>:
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	ec 01       	movw	r28, r24
    202c:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN5Print5printEji>
    2030:	8c 01       	movw	r16, r24
    2032:	ce 01       	movw	r24, r28
    2034:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print7printlnEv>
    2038:	80 0f       	add	r24, r16
    203a:	91 1f       	adc	r25, r17
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	08 95       	ret

00002046 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
  if (base == 0) {
    2056:	21 15       	cp	r18, r1
    2058:	31 05       	cpc	r19, r1
    205a:	81 f4       	brne	.+32     	; 0x207c <_ZN5Print5printEli+0x36>
    return write(n);
    205c:	dc 01       	movw	r26, r24
    205e:	ed 91       	ld	r30, X+
    2060:	fc 91       	ld	r31, X
    2062:	01 90       	ld	r0, Z+
    2064:	f0 81       	ld	r31, Z
    2066:	e0 2d       	mov	r30, r0
    2068:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    207a:	09 94       	ijmp
  } else if (base == 10) {
    207c:	2a 30       	cpi	r18, 0x0A	; 10
    207e:	31 05       	cpc	r19, r1
    2080:	01 f5       	brne	.+64     	; 0x20c2 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    2082:	77 ff       	sbrs	r23, 7
    2084:	1d c0       	rjmp	.+58     	; 0x20c0 <_ZN5Print5printEli+0x7a>
    2086:	6a 01       	movw	r12, r20
    2088:	7b 01       	movw	r14, r22
    208a:	ec 01       	movw	r28, r24
      int t = print('-');
    208c:	6d e2       	ldi	r22, 0x2D	; 45
    208e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <_ZN5Print5printEc>
    2092:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    2094:	44 27       	eor	r20, r20
    2096:	55 27       	eor	r21, r21
    2098:	ba 01       	movw	r22, r20
    209a:	4c 19       	sub	r20, r12
    209c:	5d 09       	sbc	r21, r13
    209e:	6e 09       	sbc	r22, r14
    20a0:	7f 09       	sbc	r23, r15
    20a2:	2a e0       	ldi	r18, 0x0A	; 10
    20a4:	ce 01       	movw	r24, r28
    20a6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN5Print11printNumberEmh>
    20aa:	80 0f       	add	r24, r16
    20ac:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    20ae:	df 91       	pop	r29
    20b0:	cf 91       	pop	r28
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    20c0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    20d2:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <_ZN5Print11printNumberEmh>

000020d6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    20d6:	9a 01       	movw	r18, r20
  return print((long) n, base);
    20d8:	ab 01       	movw	r20, r22
    20da:	77 0f       	add	r23, r23
    20dc:	66 0b       	sbc	r22, r22
    20de:	77 0b       	sbc	r23, r23
    20e0:	0c 94 23 10 	jmp	0x2046	; 0x2046 <_ZN5Print5printEli>

000020e4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    20ee:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN5Print5printEii>
    20f2:	8c 01       	movw	r16, r24
  n += println();
    20f4:	ce 01       	movw	r24, r28
    20f6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print7printlnEv>
  return n;
}
    20fa:	80 0f       	add	r24, r16
    20fc:	91 1f       	adc	r25, r17
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	08 95       	ret

00002108 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
    2112:	2f 93       	push	r18
    2114:	3f 93       	push	r19
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_millis>
    2122:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_millis+0x1>
    2126:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_millis+0x2>
    212a:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_millis+0x3>
    212e:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <timer0_fract>
    2132:	23 e0       	ldi	r18, 0x03	; 3
    2134:	23 0f       	add	r18, r19
    2136:	2d 37       	cpi	r18, 0x7D	; 125
    2138:	20 f4       	brcc	.+8      	; 0x2142 <__vector_16+0x3a>
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	a1 1d       	adc	r26, r1
    213e:	b1 1d       	adc	r27, r1
    2140:	05 c0       	rjmp	.+10     	; 0x214c <__vector_16+0x44>
    2142:	26 e8       	ldi	r18, 0x86	; 134
    2144:	23 0f       	add	r18, r19
    2146:	02 96       	adiw	r24, 0x02	; 2
    2148:	a1 1d       	adc	r26, r1
    214a:	b1 1d       	adc	r27, r1
    214c:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <timer0_fract>
    2150:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <timer0_millis>
    2154:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <timer0_millis+0x1>
    2158:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <timer0_millis+0x2>
    215c:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <timer0_millis+0x3>
    2160:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <timer0_overflow_count>
    2164:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <timer0_overflow_count+0x1>
    2168:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <timer0_overflow_count+0x2>
    216c:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <timer0_overflow_count+0x3>
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	a1 1d       	adc	r26, r1
    2174:	b1 1d       	adc	r27, r1
    2176:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <timer0_overflow_count>
    217a:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <timer0_overflow_count+0x1>
    217e:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <timer0_overflow_count+0x2>
    2182:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <timer0_overflow_count+0x3>
    2186:	bf 91       	pop	r27
    2188:	af 91       	pop	r26
    218a:	9f 91       	pop	r25
    218c:	8f 91       	pop	r24
    218e:	3f 91       	pop	r19
    2190:	2f 91       	pop	r18
    2192:	0f 90       	pop	r0
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	0f 90       	pop	r0
    2198:	1f 90       	pop	r1
    219a:	18 95       	reti

0000219c <micros>:
    219c:	3f b7       	in	r19, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <timer0_overflow_count>
    21a4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <timer0_overflow_count+0x1>
    21a8:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <timer0_overflow_count+0x2>
    21ac:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <timer0_overflow_count+0x3>
    21b0:	26 b5       	in	r18, 0x26	; 38
    21b2:	a8 9b       	sbis	0x15, 0	; 21
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <micros+0x24>
    21b6:	2f 3f       	cpi	r18, 0xFF	; 255
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <micros+0x24>
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	a1 1d       	adc	r26, r1
    21be:	b1 1d       	adc	r27, r1
    21c0:	3f bf       	out	0x3f, r19	; 63
    21c2:	ba 2f       	mov	r27, r26
    21c4:	a9 2f       	mov	r26, r25
    21c6:	98 2f       	mov	r25, r24
    21c8:	88 27       	eor	r24, r24
    21ca:	82 0f       	add	r24, r18
    21cc:	91 1d       	adc	r25, r1
    21ce:	a1 1d       	adc	r26, r1
    21d0:	b1 1d       	adc	r27, r1
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	42 e0       	ldi	r20, 0x02	; 2
    21d8:	66 0f       	add	r22, r22
    21da:	77 1f       	adc	r23, r23
    21dc:	88 1f       	adc	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	4a 95       	dec	r20
    21e2:	d1 f7       	brne	.-12     	; 0x21d8 <micros+0x3c>
    21e4:	08 95       	ret

000021e6 <delay>:
    21e6:	8f 92       	push	r8
    21e8:	9f 92       	push	r9
    21ea:	af 92       	push	r10
    21ec:	bf 92       	push	r11
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	6b 01       	movw	r12, r22
    21f8:	7c 01       	movw	r14, r24
    21fa:	0e 94 ce 10 	call	0x219c	; 0x219c <micros>
    21fe:	4b 01       	movw	r8, r22
    2200:	5c 01       	movw	r10, r24
    2202:	c1 14       	cp	r12, r1
    2204:	d1 04       	cpc	r13, r1
    2206:	e1 04       	cpc	r14, r1
    2208:	f1 04       	cpc	r15, r1
    220a:	01 f1       	breq	.+64     	; 0x224c <delay+0x66>
    220c:	0e 94 81 14 	call	0x2902	; 0x2902 <yield>
    2210:	0e 94 ce 10 	call	0x219c	; 0x219c <micros>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	88 19       	sub	r24, r8
    221a:	99 09       	sbc	r25, r9
    221c:	aa 09       	sbc	r26, r10
    221e:	bb 09       	sbc	r27, r11
    2220:	88 3e       	cpi	r24, 0xE8	; 232
    2222:	93 40       	sbci	r25, 0x03	; 3
    2224:	a1 05       	cpc	r26, r1
    2226:	b1 05       	cpc	r27, r1
    2228:	60 f3       	brcs	.-40     	; 0x2202 <delay+0x1c>
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	c2 1a       	sub	r12, r18
    222e:	d1 08       	sbc	r13, r1
    2230:	e1 08       	sbc	r14, r1
    2232:	f1 08       	sbc	r15, r1
    2234:	88 ee       	ldi	r24, 0xE8	; 232
    2236:	88 0e       	add	r8, r24
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	98 1e       	adc	r9, r24
    223c:	a1 1c       	adc	r10, r1
    223e:	b1 1c       	adc	r11, r1
    2240:	c1 14       	cp	r12, r1
    2242:	d1 04       	cpc	r13, r1
    2244:	e1 04       	cpc	r14, r1
    2246:	f1 04       	cpc	r15, r1
    2248:	19 f7       	brne	.-58     	; 0x2210 <delay+0x2a>
    224a:	db cf       	rjmp	.-74     	; 0x2202 <delay+0x1c>
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	cf 90       	pop	r12
    2254:	bf 90       	pop	r11
    2256:	af 90       	pop	r10
    2258:	9f 90       	pop	r9
    225a:	8f 90       	pop	r8
    225c:	08 95       	ret

0000225e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    225e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2260:	84 b5       	in	r24, 0x24	; 36
    2262:	82 60       	ori	r24, 0x02	; 2
    2264:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2266:	84 b5       	in	r24, 0x24	; 36
    2268:	81 60       	ori	r24, 0x01	; 1
    226a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    226c:	85 b5       	in	r24, 0x25	; 37
    226e:	82 60       	ori	r24, 0x02	; 2
    2270:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2272:	85 b5       	in	r24, 0x25	; 37
    2274:	81 60       	ori	r24, 0x01	; 1
    2276:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2278:	ee e6       	ldi	r30, 0x6E	; 110
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	81 60       	ori	r24, 0x01	; 1
    2280:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2282:	e1 e8       	ldi	r30, 0x81	; 129
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2288:	80 81       	ld	r24, Z
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    228e:	80 81       	ld	r24, Z
    2290:	81 60       	ori	r24, 0x01	; 1
    2292:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2294:	e0 e8       	ldi	r30, 0x80	; 128
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	81 60       	ori	r24, 0x01	; 1
    229c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    229e:	e1 eb       	ldi	r30, 0xB1	; 177
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	84 60       	ori	r24, 0x04	; 4
    22a6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    22a8:	e0 eb       	ldi	r30, 0xB0	; 176
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    22b2:	ea e7       	ldi	r30, 0x7A	; 122
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	84 60       	ori	r24, 0x04	; 4
    22ba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    22bc:	80 81       	ld	r24, Z
    22be:	82 60       	ori	r24, 0x02	; 2
    22c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    22c2:	80 81       	ld	r24, Z
    22c4:	81 60       	ori	r24, 0x01	; 1
    22c6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22c8:	80 81       	ld	r24, Z
    22ca:	80 68       	ori	r24, 0x80	; 128
    22cc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    22ce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    22d2:	08 95       	ret

000022d4 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    22d4:	8e 30       	cpi	r24, 0x0E	; 14
    22d6:	08 f0       	brcs	.+2      	; 0x22da <analogRead+0x6>
    22d8:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    22da:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    22de:	90 e4       	ldi	r25, 0x40	; 64
    22e0:	29 9f       	mul	r18, r25
    22e2:	90 01       	movw	r18, r0
    22e4:	11 24       	eor	r1, r1
    22e6:	87 70       	andi	r24, 0x07	; 7
    22e8:	82 2b       	or	r24, r18
    22ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    22ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    22f2:	80 64       	ori	r24, 0x40	; 64
    22f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    22f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    22fc:	86 fd       	sbrc	r24, 6
    22fe:	fc cf       	rjmp	.-8      	; 0x22f8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    2304:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2308:	90 e0       	ldi	r25, 0x00	; 0
}
    230a:	92 2b       	or	r25, r18
    230c:	08 95       	ret

0000230e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    230e:	83 30       	cpi	r24, 0x03	; 3
    2310:	81 f0       	breq	.+32     	; 0x2332 <turnOffPWM+0x24>
    2312:	28 f4       	brcc	.+10     	; 0x231e <turnOffPWM+0x10>
    2314:	81 30       	cpi	r24, 0x01	; 1
    2316:	99 f0       	breq	.+38     	; 0x233e <turnOffPWM+0x30>
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	a1 f0       	breq	.+40     	; 0x2344 <turnOffPWM+0x36>
    231c:	08 95       	ret
    231e:	87 30       	cpi	r24, 0x07	; 7
    2320:	a9 f0       	breq	.+42     	; 0x234c <turnOffPWM+0x3e>
    2322:	88 30       	cpi	r24, 0x08	; 8
    2324:	b9 f0       	breq	.+46     	; 0x2354 <turnOffPWM+0x46>
    2326:	84 30       	cpi	r24, 0x04	; 4
    2328:	d1 f4       	brne	.+52     	; 0x235e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    232a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    232e:	8f 7d       	andi	r24, 0xDF	; 223
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2332:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2336:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2338:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    233c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    233e:	84 b5       	in	r24, 0x24	; 36
    2340:	8f 77       	andi	r24, 0x7F	; 127
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2344:	84 b5       	in	r24, 0x24	; 36
    2346:	8f 7d       	andi	r24, 0xDF	; 223
    2348:	84 bd       	out	0x24, r24	; 36
    234a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    234c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2350:	8f 77       	andi	r24, 0x7F	; 127
    2352:	03 c0       	rjmp	.+6      	; 0x235a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2354:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2358:	8f 7d       	andi	r24, 0xDF	; 223
    235a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    235e:	08 95       	ret

00002360 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	fc 01       	movw	r30, r24
    2368:	e0 53       	subi	r30, 0x30	; 48
    236a:	fc 4f       	sbci	r31, 0xFC	; 252
    236c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    236e:	fc 01       	movw	r30, r24
    2370:	ec 51       	subi	r30, 0x1C	; 28
    2372:	fc 4f       	sbci	r31, 0xFC	; 252
    2374:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2376:	88 23       	and	r24, r24
    2378:	61 f1       	breq	.+88     	; 0x23d2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	fc 01       	movw	r30, r24
    2382:	e4 5f       	subi	r30, 0xF4	; 244
    2384:	fb 4f       	sbci	r31, 0xFB	; 251
    2386:	c5 91       	lpm	r28, Z+
    2388:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    238a:	fc 01       	movw	r30, r24
    238c:	ee 5f       	subi	r30, 0xFE	; 254
    238e:	fb 4f       	sbci	r31, 0xFB	; 251
    2390:	a5 91       	lpm	r26, Z+
    2392:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2394:	61 11       	cpse	r22, r1
    2396:	09 c0       	rjmp	.+18     	; 0x23aa <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2398:	9f b7       	in	r25, 0x3f	; 63
                cli();
    239a:	f8 94       	cli
		*reg &= ~bit;
    239c:	88 81       	ld	r24, Y
    239e:	20 95       	com	r18
    23a0:	82 23       	and	r24, r18
    23a2:	88 83       	st	Y, r24
		*out &= ~bit;
    23a4:	ec 91       	ld	r30, X
    23a6:	2e 23       	and	r18, r30
    23a8:	0b c0       	rjmp	.+22     	; 0x23c0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    23aa:	62 30       	cpi	r22, 0x02	; 2
    23ac:	61 f4       	brne	.+24     	; 0x23c6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    23ae:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23b0:	f8 94       	cli
		*reg &= ~bit;
    23b2:	88 81       	ld	r24, Y
    23b4:	32 2f       	mov	r19, r18
    23b6:	30 95       	com	r19
    23b8:	83 23       	and	r24, r19
    23ba:	88 83       	st	Y, r24
		*out |= bit;
    23bc:	ec 91       	ld	r30, X
    23be:	2e 2b       	or	r18, r30
    23c0:	2c 93       	st	X, r18
		SREG = oldSREG;
    23c2:	9f bf       	out	0x3f, r25	; 63
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    23c6:	8f b7       	in	r24, 0x3f	; 63
                cli();
    23c8:	f8 94       	cli
		*reg |= bit;
    23ca:	e8 81       	ld	r30, Y
    23cc:	2e 2b       	or	r18, r30
    23ce:	28 83       	st	Y, r18
		SREG = oldSREG;
    23d0:	8f bf       	out	0x3f, r24	; 63
	}
}
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	08 95       	ret

000023d8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	f9 01       	movw	r30, r18
    23e4:	e4 54       	subi	r30, 0x44	; 68
    23e6:	fc 4f       	sbci	r31, 0xFC	; 252
    23e8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    23ea:	f9 01       	movw	r30, r18
    23ec:	e0 53       	subi	r30, 0x30	; 48
    23ee:	fc 4f       	sbci	r31, 0xFC	; 252
    23f0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    23f2:	f9 01       	movw	r30, r18
    23f4:	ec 51       	subi	r30, 0x1C	; 28
    23f6:	fc 4f       	sbci	r31, 0xFC	; 252
    23f8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    23fa:	cc 23       	and	r28, r28
    23fc:	c1 f0       	breq	.+48     	; 0x242e <digitalWrite+0x56>
    23fe:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2400:	81 11       	cpse	r24, r1
    2402:	0e 94 87 11 	call	0x230e	; 0x230e <turnOffPWM>

	out = portOutputRegister(port);
    2406:	ec 2f       	mov	r30, r28
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ee 5f       	subi	r30, 0xFE	; 254
    2410:	fb 4f       	sbci	r31, 0xFB	; 251
    2412:	a5 91       	lpm	r26, Z+
    2414:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2416:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2418:	f8 94       	cli

	if (val == LOW) {
    241a:	11 11       	cpse	r17, r1
    241c:	04 c0       	rjmp	.+8      	; 0x2426 <digitalWrite+0x4e>
		*out &= ~bit;
    241e:	8c 91       	ld	r24, X
    2420:	d0 95       	com	r29
    2422:	d8 23       	and	r29, r24
    2424:	02 c0       	rjmp	.+4      	; 0x242a <digitalWrite+0x52>
	} else {
		*out |= bit;
    2426:	ec 91       	ld	r30, X
    2428:	de 2b       	or	r29, r30
    242a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    242c:	9f bf       	out	0x3f, r25	; 63
}
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	08 95       	ret

00002436 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    2436:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    243a:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    243e:	28 17       	cp	r18, r24
    2440:	39 07       	cpc	r19, r25
    2442:	b9 f4       	brne	.+46     	; 0x2472 <_ZN14SoftwareSerial4readEv+0x3c>
    2444:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2448:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    244c:	98 17       	cp	r25, r24
    244e:	89 f0       	breq	.+34     	; 0x2472 <_ZN14SoftwareSerial4readEv+0x3c>
    2450:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	ef 5c       	subi	r30, 0xCF	; 207
    2458:	fb 4f       	sbci	r31, 0xFB	; 251
    245a:	80 81       	ld	r24, Z
    245c:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	2f 5f       	subi	r18, 0xFF	; 255
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	2f 73       	andi	r18, 0x3F	; 63
    2468:	33 27       	eor	r19, r19
    246a:	20 93 2f 04 	sts	0x042F, r18	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	08 95       	ret
    2472:	8f ef       	ldi	r24, 0xFF	; 255
    2474:	9f ef       	ldi	r25, 0xFF	; 255
    2476:	08 95       	ret

00002478 <_ZN14SoftwareSerial5writeEh>:
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	dc 01       	movw	r26, r24
    2480:	5c 96       	adiw	r26, 0x1c	; 28
    2482:	8d 91       	ld	r24, X+
    2484:	9c 91       	ld	r25, X
    2486:	5d 97       	sbiw	r26, 0x1d	; 29
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	39 f4       	brne	.+14     	; 0x249a <_ZN14SoftwareSerial5writeEh+0x22>
    248c:	21 e0       	ldi	r18, 0x01	; 1
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	13 96       	adiw	r26, 0x03	; 3
    2492:	3c 93       	st	X, r19
    2494:	2e 93       	st	-X, r18
    2496:	12 97       	sbiw	r26, 0x02	; 2
    2498:	3b c0       	rjmp	.+118    	; 0x2510 <_ZN14SoftwareSerial5writeEh+0x98>
    249a:	51 96       	adiw	r26, 0x11	; 17
    249c:	ed 91       	ld	r30, X+
    249e:	fc 91       	ld	r31, X
    24a0:	52 97       	sbiw	r26, 0x12	; 18
    24a2:	50 96       	adiw	r26, 0x10	; 16
    24a4:	2c 91       	ld	r18, X
    24a6:	50 97       	sbiw	r26, 0x10	; 16
    24a8:	32 2f       	mov	r19, r18
    24aa:	30 95       	com	r19
    24ac:	1f b7       	in	r17, 0x3f	; 63
    24ae:	5e 96       	adiw	r26, 0x1e	; 30
    24b0:	4c 91       	ld	r20, X
    24b2:	5e 97       	sbiw	r26, 0x1e	; 30
    24b4:	74 2f       	mov	r23, r20
    24b6:	72 70       	andi	r23, 0x02	; 2
    24b8:	41 fd       	sbrc	r20, 1
    24ba:	60 95       	com	r22
    24bc:	f8 94       	cli
    24be:	40 81       	ld	r20, Z
    24c0:	77 23       	and	r23, r23
    24c2:	11 f0       	breq	.+4      	; 0x24c8 <_ZN14SoftwareSerial5writeEh+0x50>
    24c4:	42 2b       	or	r20, r18
    24c6:	01 c0       	rjmp	.+2      	; 0x24ca <_ZN14SoftwareSerial5writeEh+0x52>
    24c8:	43 23       	and	r20, r19
    24ca:	40 83       	st	Z, r20
    24cc:	ec 01       	movw	r28, r24
    24ce:	21 97       	sbiw	r28, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <_ZN14SoftwareSerial5writeEh+0x56>
    24d2:	48 e0       	ldi	r20, 0x08	; 8
    24d4:	50 81       	ld	r21, Z
    24d6:	60 ff       	sbrs	r22, 0
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <_ZN14SoftwareSerial5writeEh+0x66>
    24da:	52 2b       	or	r21, r18
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <_ZN14SoftwareSerial5writeEh+0x68>
    24de:	53 23       	and	r21, r19
    24e0:	50 83       	st	Z, r21
    24e2:	ec 01       	movw	r28, r24
    24e4:	21 97       	sbiw	r28, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <_ZN14SoftwareSerial5writeEh+0x6c>
    24e8:	66 95       	lsr	r22
    24ea:	41 50       	subi	r20, 0x01	; 1
    24ec:	99 f7       	brne	.-26     	; 0x24d4 <_ZN14SoftwareSerial5writeEh+0x5c>
    24ee:	80 81       	ld	r24, Z
    24f0:	77 23       	and	r23, r23
    24f2:	19 f0       	breq	.+6      	; 0x24fa <_ZN14SoftwareSerial5writeEh+0x82>
    24f4:	83 23       	and	r24, r19
    24f6:	80 83       	st	Z, r24
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <_ZN14SoftwareSerial5writeEh+0x86>
    24fa:	28 2b       	or	r18, r24
    24fc:	20 83       	st	Z, r18
    24fe:	1f bf       	out	0x3f, r17	; 63
    2500:	5c 96       	adiw	r26, 0x1c	; 28
    2502:	8d 91       	ld	r24, X+
    2504:	9c 91       	ld	r25, X
    2506:	5d 97       	sbiw	r26, 0x1d	; 29
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <_ZN14SoftwareSerial5writeEh+0x90>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	08 95       	ret

00002518 <_ZN14SoftwareSerial5flushEv>:
    2518:	08 95       	ret

0000251a <_ZN14SoftwareSerial4peekEv>:
    251a:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    251e:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2522:	28 17       	cp	r18, r24
    2524:	39 07       	cpc	r19, r25
    2526:	71 f4       	brne	.+28     	; 0x2544 <_ZN14SoftwareSerial4peekEv+0x2a>
    2528:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    252c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2530:	98 17       	cp	r25, r24
    2532:	41 f0       	breq	.+16     	; 0x2544 <_ZN14SoftwareSerial4peekEv+0x2a>
    2534:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	ef 5c       	subi	r30, 0xCF	; 207
    253c:	fb 4f       	sbci	r31, 0xFB	; 251
    253e:	80 81       	ld	r24, Z
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	08 95       	ret
    2544:	8f ef       	ldi	r24, 0xFF	; 255
    2546:	9f ef       	ldi	r25, 0xFF	; 255
    2548:	08 95       	ret

0000254a <_ZN14SoftwareSerial9availableEv>:
    254a:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    254e:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2552:	28 17       	cp	r18, r24
    2554:	39 07       	cpc	r19, r25
    2556:	71 f4       	brne	.+28     	; 0x2574 <_ZN14SoftwareSerial9availableEv+0x2a>
    2558:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    255c:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	80 5c       	subi	r24, 0xC0	; 192
    2564:	9f 4f       	sbci	r25, 0xFF	; 255
    2566:	82 1b       	sub	r24, r18
    2568:	91 09       	sbc	r25, r1
    256a:	60 e4       	ldi	r22, 0x40	; 64
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	0e 94 8e 14 	call	0x291c	; 0x291c <__divmodhi4>
    2572:	08 95       	ret
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	08 95       	ret

0000257a <_ZN14SoftwareSerial13stopListeningEv>:
    257a:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    257e:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2582:	e8 17       	cp	r30, r24
    2584:	f9 07       	cpc	r31, r25
    2586:	69 f4       	brne	.+26     	; 0x25a2 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    2588:	a3 89       	ldd	r26, Z+19	; 0x13
    258a:	b4 89       	ldd	r27, Z+20	; 0x14
    258c:	9c 91       	ld	r25, X
    258e:	85 89       	ldd	r24, Z+21	; 0x15
    2590:	80 95       	com	r24
    2592:	89 23       	and	r24, r25
    2594:	8c 93       	st	X, r24
    2596:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    259a:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	08 95       	ret
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	08 95       	ret

000025a6 <_ZN14SoftwareSerial6listenEv>:
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	ec 01       	movw	r28, r24
    25ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25b0:	89 2b       	or	r24, r25
    25b2:	f1 f0       	breq	.+60     	; 0x25f0 <_ZN14SoftwareSerial6listenEv+0x4a>
    25b4:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    25b8:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    25bc:	c8 17       	cp	r28, r24
    25be:	d9 07       	cpc	r29, r25
    25c0:	b9 f0       	breq	.+46     	; 0x25f0 <_ZN14SoftwareSerial6listenEv+0x4a>
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	11 f0       	breq	.+4      	; 0x25ca <_ZN14SoftwareSerial6listenEv+0x24>
    25c6:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN14SoftwareSerial13stopListeningEv>
    25ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25cc:	8e 7f       	andi	r24, 0xFE	; 254
    25ce:	8e 8f       	std	Y+30, r24	; 0x1e
    25d0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    25d4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    25d8:	d0 93 72 04 	sts	0x0472, r29	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    25dc:	c0 93 71 04 	sts	0x0471, r28	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    25e0:	eb 89       	ldd	r30, Y+19	; 0x13
    25e2:	fc 89       	ldd	r31, Y+20	; 0x14
    25e4:	90 81       	ld	r25, Z
    25e6:	8d 89       	ldd	r24, Y+21	; 0x15
    25e8:	89 2b       	or	r24, r25
    25ea:	80 83       	st	Z, r24
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <_ZN14SoftwareSerial6listenEv+0x4c>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <__vector_3>:
    25f8:	1f 92       	push	r1
    25fa:	0f 92       	push	r0
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	0f 92       	push	r0
    2600:	11 24       	eor	r1, r1
    2602:	2f 93       	push	r18
    2604:	3f 93       	push	r19
    2606:	4f 93       	push	r20
    2608:	5f 93       	push	r21
    260a:	6f 93       	push	r22
    260c:	7f 93       	push	r23
    260e:	8f 93       	push	r24
    2610:	9f 93       	push	r25
    2612:	af 93       	push	r26
    2614:	bf 93       	push	r27
    2616:	ef 93       	push	r30
    2618:	ff 93       	push	r31
    261a:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    261e:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2622:	30 97       	sbiw	r30, 0x00	; 0
    2624:	09 f4       	brne	.+2      	; 0x2628 <__vector_3+0x30>
    2626:	51 c0       	rjmp	.+162    	; 0x26ca <__vector_3+0xd2>
    2628:	96 8d       	ldd	r25, Z+30	; 0x1e
    262a:	a6 85       	ldd	r26, Z+14	; 0x0e
    262c:	b7 85       	ldd	r27, Z+15	; 0x0f
    262e:	85 85       	ldd	r24, Z+13	; 0x0d
    2630:	91 ff       	sbrs	r25, 1
    2632:	04 c0       	rjmp	.+8      	; 0x263c <__vector_3+0x44>
    2634:	9c 91       	ld	r25, X
    2636:	89 23       	and	r24, r25
    2638:	29 f4       	brne	.+10     	; 0x2644 <__vector_3+0x4c>
    263a:	47 c0       	rjmp	.+142    	; 0x26ca <__vector_3+0xd2>
    263c:	9c 91       	ld	r25, X
    263e:	89 23       	and	r24, r25
    2640:	09 f0       	breq	.+2      	; 0x2644 <__vector_3+0x4c>
    2642:	43 c0       	rjmp	.+134    	; 0x26ca <__vector_3+0xd2>
    2644:	a3 89       	ldd	r26, Z+19	; 0x13
    2646:	b4 89       	ldd	r27, Z+20	; 0x14
    2648:	9c 91       	ld	r25, X
    264a:	85 89       	ldd	r24, Z+21	; 0x15
    264c:	80 95       	com	r24
    264e:	89 23       	and	r24, r25
    2650:	8c 93       	st	X, r24
    2652:	86 89       	ldd	r24, Z+22	; 0x16
    2654:	97 89       	ldd	r25, Z+23	; 0x17
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <__vector_3+0x5e>
    265a:	60 8d       	ldd	r22, Z+24	; 0x18
    265c:	71 8d       	ldd	r23, Z+25	; 0x19
    265e:	a6 85       	ldd	r26, Z+14	; 0x0e
    2660:	b7 85       	ldd	r27, Z+15	; 0x0f
    2662:	55 85       	ldd	r21, Z+13	; 0x0d
    2664:	38 e0       	ldi	r19, 0x08	; 8
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	cb 01       	movw	r24, r22
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <__vector_3+0x72>
    266e:	82 2f       	mov	r24, r18
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	95 95       	asr	r25
    2674:	87 95       	ror	r24
    2676:	28 2f       	mov	r18, r24
    2678:	4c 91       	ld	r20, X
    267a:	45 23       	and	r20, r21
    267c:	09 f0       	breq	.+2      	; 0x2680 <__vector_3+0x88>
    267e:	20 68       	ori	r18, 0x80	; 128
    2680:	31 50       	subi	r19, 0x01	; 1
    2682:	91 f7       	brne	.-28     	; 0x2668 <__vector_3+0x70>
    2684:	86 8d       	ldd	r24, Z+30	; 0x1e
    2686:	81 fd       	sbrc	r24, 1
    2688:	20 95       	com	r18
    268a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	8f 73       	andi	r24, 0x3F	; 63
    2694:	99 27       	eor	r25, r25
    2696:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    269a:	38 17       	cp	r19, r24
    269c:	49 f0       	breq	.+18     	; 0x26b0 <__vector_3+0xb8>
    269e:	a0 91 30 04 	lds	r26, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	af 5c       	subi	r26, 0xCF	; 207
    26a6:	bb 4f       	sbci	r27, 0xFB	; 251
    26a8:	2c 93       	st	X, r18
    26aa:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <__vector_3+0xbe>
    26b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    26b2:	81 60       	ori	r24, 0x01	; 1
    26b4:	86 8f       	std	Z+30, r24	; 0x1e
    26b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    26b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <__vector_3+0xc2>
    26be:	a3 89       	ldd	r26, Z+19	; 0x13
    26c0:	b4 89       	ldd	r27, Z+20	; 0x14
    26c2:	9c 91       	ld	r25, X
    26c4:	85 89       	ldd	r24, Z+21	; 0x15
    26c6:	89 2b       	or	r24, r25
    26c8:	8c 93       	st	X, r24
    26ca:	ff 91       	pop	r31
    26cc:	ef 91       	pop	r30
    26ce:	bf 91       	pop	r27
    26d0:	af 91       	pop	r26
    26d2:	9f 91       	pop	r25
    26d4:	8f 91       	pop	r24
    26d6:	7f 91       	pop	r23
    26d8:	6f 91       	pop	r22
    26da:	5f 91       	pop	r21
    26dc:	4f 91       	pop	r20
    26de:	3f 91       	pop	r19
    26e0:	2f 91       	pop	r18
    26e2:	0f 90       	pop	r0
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	0f 90       	pop	r0
    26e8:	1f 90       	pop	r1
    26ea:	18 95       	reti

000026ec <_ZN14SoftwareSerial5setTXEh>:
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	ec 01       	movw	r28, r24
    26f4:	16 2f       	mov	r17, r22
    26f6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    26f8:	66 95       	lsr	r22
    26fa:	61 70       	andi	r22, 0x01	; 1
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	68 27       	eor	r22, r24
    2700:	81 2f       	mov	r24, r17
    2702:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	81 2f       	mov	r24, r17
    270a:	0e 94 b0 11 	call	0x2360	; 0x2360 <pinMode>
    270e:	81 2f       	mov	r24, r17
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	fc 01       	movw	r30, r24
    2714:	e0 53       	subi	r30, 0x30	; 48
    2716:	fc 4f       	sbci	r31, 0xFC	; 252
    2718:	e4 91       	lpm	r30, Z
    271a:	e8 8b       	std	Y+16, r30	; 0x10
    271c:	fc 01       	movw	r30, r24
    271e:	ec 51       	subi	r30, 0x1C	; 28
    2720:	fc 4f       	sbci	r31, 0xFC	; 252
    2722:	e4 91       	lpm	r30, Z
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	ee 5f       	subi	r30, 0xFE	; 254
    272c:	fb 4f       	sbci	r31, 0xFB	; 251
    272e:	85 91       	lpm	r24, Z+
    2730:	94 91       	lpm	r25, Z
    2732:	9a 8b       	std	Y+18, r25	; 0x12
    2734:	89 8b       	std	Y+17, r24	; 0x11
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	08 95       	ret

0000273e <_ZN14SoftwareSerial5setRXEh>:
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	ec 01       	movw	r28, r24
    2746:	16 2f       	mov	r17, r22
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	81 2f       	mov	r24, r17
    274c:	0e 94 b0 11 	call	0x2360	; 0x2360 <pinMode>
    2750:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2752:	81 fd       	sbrc	r24, 1
    2754:	04 c0       	rjmp	.+8      	; 0x275e <_ZN14SoftwareSerial5setRXEh+0x20>
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	81 2f       	mov	r24, r17
    275a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <digitalWrite>
    275e:	1c 87       	std	Y+12, r17	; 0x0c
    2760:	81 2f       	mov	r24, r17
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	fc 01       	movw	r30, r24
    2766:	e0 53       	subi	r30, 0x30	; 48
    2768:	fc 4f       	sbci	r31, 0xFC	; 252
    276a:	e4 91       	lpm	r30, Z
    276c:	ed 87       	std	Y+13, r30	; 0x0d
    276e:	fc 01       	movw	r30, r24
    2770:	ec 51       	subi	r30, 0x1C	; 28
    2772:	fc 4f       	sbci	r31, 0xFC	; 252
    2774:	e4 91       	lpm	r30, Z
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	e8 50       	subi	r30, 0x08	; 8
    277e:	fc 4f       	sbci	r31, 0xFC	; 252
    2780:	85 91       	lpm	r24, Z+
    2782:	94 91       	lpm	r25, Z
    2784:	9f 87       	std	Y+15, r25	; 0x0f
    2786:	8e 87       	std	Y+14, r24	; 0x0e
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	08 95       	ret

00002790 <_ZN14SoftwareSerialC1Ehhb>:
    2790:	1f 93       	push	r17
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ec 01       	movw	r28, r24
    2798:	16 2f       	mov	r17, r22
    279a:	1b 82       	std	Y+3, r1	; 0x03
    279c:	1a 82       	std	Y+2, r1	; 0x02
    279e:	88 ee       	ldi	r24, 0xE8	; 232
    27a0:	93 e0       	ldi	r25, 0x03	; 3
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	8c 83       	std	Y+4, r24	; 0x04
    27a8:	9d 83       	std	Y+5, r25	; 0x05
    27aa:	ae 83       	std	Y+6, r26	; 0x06
    27ac:	bf 83       	std	Y+7, r27	; 0x07
    27ae:	86 e9       	ldi	r24, 0x96	; 150
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	99 83       	std	Y+1, r25	; 0x01
    27b4:	88 83       	st	Y, r24
    27b6:	1f 8a       	std	Y+23, r1	; 0x17
    27b8:	1e 8a       	std	Y+22, r1	; 0x16
    27ba:	19 8e       	std	Y+25, r1	; 0x19
    27bc:	18 8e       	std	Y+24, r1	; 0x18
    27be:	1b 8e       	std	Y+27, r1	; 0x1b
    27c0:	1a 8e       	std	Y+26, r1	; 0x1a
    27c2:	1d 8e       	std	Y+29, r1	; 0x1d
    27c4:	1c 8e       	std	Y+28, r1	; 0x1c
    27c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c8:	8e 7f       	andi	r24, 0xFE	; 254
    27ca:	20 fb       	bst	r18, 0
    27cc:	81 f9       	bld	r24, 1
    27ce:	8e 8f       	std	Y+30, r24	; 0x1e
    27d0:	64 2f       	mov	r22, r20
    27d2:	ce 01       	movw	r24, r28
    27d4:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN14SoftwareSerial5setTXEh>
    27d8:	61 2f       	mov	r22, r17
    27da:	ce 01       	movw	r24, r28
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0c 94 9f 13 	jmp	0x273e	; 0x273e <_ZN14SoftwareSerial5setRXEh>

000027e6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	ec 01       	movw	r28, r24
    27ec:	9a 01       	movw	r18, r20
    27ee:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    27f0:	1b 8e       	std	Y+27, r1	; 0x1b
    27f2:	1a 8e       	std	Y+26, r1	; 0x1a
    27f4:	19 8e       	std	Y+25, r1	; 0x19
    27f6:	18 8e       	std	Y+24, r1	; 0x18
    27f8:	1f 8a       	std	Y+23, r1	; 0x17
    27fa:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	79 e0       	ldi	r23, 0x09	; 9
    2800:	8d e3       	ldi	r24, 0x3D	; 61
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodsi4>
    2808:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    280a:	24 30       	cpi	r18, 0x04	; 4
    280c:	31 05       	cpc	r19, r1
    280e:	18 f0       	brcs	.+6      	; 0x2816 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2810:	c9 01       	movw	r24, r18
    2812:	03 97       	sbiw	r24, 0x03	; 3
    2814:	02 c0       	rjmp	.+4      	; 0x281a <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    281a:	9d 8f       	std	Y+29, r25	; 0x1d
    281c:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    281e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2820:	66 31       	cpi	r22, 0x16	; 22
    2822:	08 f0       	brcs	.+2      	; 0x2826 <_ZN14SoftwareSerial5beginEl+0x40>
    2824:	69 c0       	rjmp	.+210    	; 0x28f8 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2826:	c9 01       	movw	r24, r18
    2828:	96 95       	lsr	r25
    282a:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    282c:	84 31       	cpi	r24, 0x14	; 20
    282e:	91 05       	cpc	r25, r1
    2830:	10 f0       	brcs	.+4      	; 0x2836 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    2832:	43 97       	sbiw	r24, 0x13	; 19
    2834:	02 c0       	rjmp	.+4      	; 0x283a <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    283a:	9f 8b       	std	Y+23, r25	; 0x17
    283c:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    283e:	36 97       	sbiw	r30, 0x06	; 6
    2840:	18 f0       	brcs	.+6      	; 0x2848 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    2842:	c9 01       	movw	r24, r18
    2844:	05 97       	sbiw	r24, 0x05	; 5
    2846:	02 c0       	rjmp	.+4      	; 0x284c <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    284c:	99 8f       	std	Y+25, r25	; 0x19
    284e:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2850:	c9 01       	movw	r24, r18
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	28 0f       	add	r18, r24
    2858:	39 1f       	adc	r19, r25
    285a:	36 95       	lsr	r19
    285c:	27 95       	ror	r18
    285e:	36 95       	lsr	r19
    2860:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2862:	2d 30       	cpi	r18, 0x0D	; 13
    2864:	31 05       	cpc	r19, r1
    2866:	18 f0       	brcs	.+6      	; 0x286e <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2868:	2c 50       	subi	r18, 0x0C	; 12
    286a:	31 09       	sbc	r19, r1
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    286e:	21 e0       	ldi	r18, 0x01	; 1
    2870:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2872:	3b 8f       	std	Y+27, r19	; 0x1b
    2874:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2876:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    287a:	68 30       	cpi	r22, 0x08	; 8
    287c:	50 f0       	brcs	.+20     	; 0x2892 <_ZN14SoftwareSerial5beginEl+0xac>
    287e:	21 e0       	ldi	r18, 0x01	; 1
    2880:	6e 30       	cpi	r22, 0x0E	; 14
    2882:	08 f4       	brcc	.+2      	; 0x2886 <_ZN14SoftwareSerial5beginEl+0xa0>
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	01 c0       	rjmp	.+2      	; 0x288c <_ZN14SoftwareSerial5beginEl+0xa6>
    288a:	88 0f       	add	r24, r24
    288c:	2a 95       	dec	r18
    288e:	ea f7       	brpl	.-6      	; 0x288a <_ZN14SoftwareSerial5beginEl+0xa4>
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <_ZN14SoftwareSerial5beginEl+0xae>
    2892:	84 e0       	ldi	r24, 0x04	; 4
    2894:	89 2b       	or	r24, r25
    2896:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    289a:	9c 85       	ldd	r25, Y+12	; 0x0c
    289c:	98 30       	cpi	r25, 0x08	; 8
    289e:	38 f0       	brcs	.+14     	; 0x28ae <_ZN14SoftwareSerial5beginEl+0xc8>
    28a0:	9e 30       	cpi	r25, 0x0E	; 14
    28a2:	40 f0       	brcs	.+16     	; 0x28b4 <_ZN14SoftwareSerial5beginEl+0xce>
    28a4:	96 31       	cpi	r25, 0x16	; 22
    28a6:	48 f0       	brcs	.+18     	; 0x28ba <_ZN14SoftwareSerial5beginEl+0xd4>
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	08 c0       	rjmp	.+16     	; 0x28be <_ZN14SoftwareSerial5beginEl+0xd8>
    28ae:	2d e6       	ldi	r18, 0x6D	; 109
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	05 c0       	rjmp	.+10     	; 0x28be <_ZN14SoftwareSerial5beginEl+0xd8>
    28b4:	2b e6       	ldi	r18, 0x6B	; 107
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <_ZN14SoftwareSerial5beginEl+0xd8>
    28ba:	2c e6       	ldi	r18, 0x6C	; 108
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	3c 8b       	std	Y+20, r19	; 0x14
    28c0:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    28c2:	98 30       	cpi	r25, 0x08	; 8
    28c4:	30 f4       	brcc	.+12     	; 0x28d2 <_ZN14SoftwareSerial5beginEl+0xec>
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <_ZN14SoftwareSerial5beginEl+0xe6>
    28ca:	88 0f       	add	r24, r24
    28cc:	9a 95       	dec	r25
    28ce:	ea f7       	brpl	.-6      	; 0x28ca <_ZN14SoftwareSerial5beginEl+0xe4>
    28d0:	0e c0       	rjmp	.+28     	; 0x28ee <_ZN14SoftwareSerial5beginEl+0x108>
    28d2:	29 2f       	mov	r18, r25
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	9e 30       	cpi	r25, 0x0E	; 14
    28d8:	18 f4       	brcc	.+6      	; 0x28e0 <_ZN14SoftwareSerial5beginEl+0xfa>
    28da:	28 50       	subi	r18, 0x08	; 8
    28dc:	31 09       	sbc	r19, r1
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <_ZN14SoftwareSerial5beginEl+0xfe>
    28e0:	2e 50       	subi	r18, 0x0E	; 14
    28e2:	31 09       	sbc	r19, r1
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <_ZN14SoftwareSerial5beginEl+0x104>
    28e8:	88 0f       	add	r24, r24
    28ea:	2a 95       	dec	r18
    28ec:	ea f7       	brpl	.-6      	; 0x28e8 <_ZN14SoftwareSerial5beginEl+0x102>
    28ee:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    28f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    28f8:	ce 01       	movw	r24, r28
}
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    28fe:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <_ZN14SoftwareSerial6listenEv>

00002902 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2902:	08 95       	ret

00002904 <__udivmodqi4>:
    2904:	99 1b       	sub	r25, r25
    2906:	79 e0       	ldi	r23, 0x09	; 9
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <__udivmodqi4_ep>

0000290a <__udivmodqi4_loop>:
    290a:	99 1f       	adc	r25, r25
    290c:	96 17       	cp	r25, r22
    290e:	08 f0       	brcs	.+2      	; 0x2912 <__udivmodqi4_ep>
    2910:	96 1b       	sub	r25, r22

00002912 <__udivmodqi4_ep>:
    2912:	88 1f       	adc	r24, r24
    2914:	7a 95       	dec	r23
    2916:	c9 f7       	brne	.-14     	; 0x290a <__udivmodqi4_loop>
    2918:	80 95       	com	r24
    291a:	08 95       	ret

0000291c <__divmodhi4>:
    291c:	97 fb       	bst	r25, 7
    291e:	07 2e       	mov	r0, r23
    2920:	16 f4       	brtc	.+4      	; 0x2926 <__divmodhi4+0xa>
    2922:	00 94       	com	r0
    2924:	07 d0       	rcall	.+14     	; 0x2934 <__divmodhi4_neg1>
    2926:	77 fd       	sbrc	r23, 7
    2928:	09 d0       	rcall	.+18     	; 0x293c <__divmodhi4_neg2>
    292a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__udivmodhi4>
    292e:	07 fc       	sbrc	r0, 7
    2930:	05 d0       	rcall	.+10     	; 0x293c <__divmodhi4_neg2>
    2932:	3e f4       	brtc	.+14     	; 0x2942 <__divmodhi4_exit>

00002934 <__divmodhi4_neg1>:
    2934:	90 95       	com	r25
    2936:	81 95       	neg	r24
    2938:	9f 4f       	sbci	r25, 0xFF	; 255
    293a:	08 95       	ret

0000293c <__divmodhi4_neg2>:
    293c:	70 95       	com	r23
    293e:	61 95       	neg	r22
    2940:	7f 4f       	sbci	r23, 0xFF	; 255

00002942 <__divmodhi4_exit>:
    2942:	08 95       	ret

00002944 <__udivmodsi4>:
    2944:	a1 e2       	ldi	r26, 0x21	; 33
    2946:	1a 2e       	mov	r1, r26
    2948:	aa 1b       	sub	r26, r26
    294a:	bb 1b       	sub	r27, r27
    294c:	fd 01       	movw	r30, r26
    294e:	0d c0       	rjmp	.+26     	; 0x296a <__udivmodsi4_ep>

00002950 <__udivmodsi4_loop>:
    2950:	aa 1f       	adc	r26, r26
    2952:	bb 1f       	adc	r27, r27
    2954:	ee 1f       	adc	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	a2 17       	cp	r26, r18
    295a:	b3 07       	cpc	r27, r19
    295c:	e4 07       	cpc	r30, r20
    295e:	f5 07       	cpc	r31, r21
    2960:	20 f0       	brcs	.+8      	; 0x296a <__udivmodsi4_ep>
    2962:	a2 1b       	sub	r26, r18
    2964:	b3 0b       	sbc	r27, r19
    2966:	e4 0b       	sbc	r30, r20
    2968:	f5 0b       	sbc	r31, r21

0000296a <__udivmodsi4_ep>:
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	1a 94       	dec	r1
    2974:	69 f7       	brne	.-38     	; 0x2950 <__udivmodsi4_loop>
    2976:	60 95       	com	r22
    2978:	70 95       	com	r23
    297a:	80 95       	com	r24
    297c:	90 95       	com	r25
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	bd 01       	movw	r22, r26
    2984:	cf 01       	movw	r24, r30
    2986:	08 95       	ret

00002988 <__divmodsi4>:
    2988:	05 2e       	mov	r0, r21
    298a:	97 fb       	bst	r25, 7
    298c:	1e f4       	brtc	.+6      	; 0x2994 <__divmodsi4+0xc>
    298e:	00 94       	com	r0
    2990:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__negsi2>
    2994:	57 fd       	sbrc	r21, 7
    2996:	07 d0       	rcall	.+14     	; 0x29a6 <__divmodsi4_neg2>
    2998:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
    299c:	07 fc       	sbrc	r0, 7
    299e:	03 d0       	rcall	.+6      	; 0x29a6 <__divmodsi4_neg2>
    29a0:	4e f4       	brtc	.+18     	; 0x29b4 <__divmodsi4_exit>
    29a2:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__negsi2>

000029a6 <__divmodsi4_neg2>:
    29a6:	50 95       	com	r21
    29a8:	40 95       	com	r20
    29aa:	30 95       	com	r19
    29ac:	21 95       	neg	r18
    29ae:	3f 4f       	sbci	r19, 0xFF	; 255
    29b0:	4f 4f       	sbci	r20, 0xFF	; 255
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255

000029b4 <__divmodsi4_exit>:
    29b4:	08 95       	ret

000029b6 <__negsi2>:
    29b6:	90 95       	com	r25
    29b8:	80 95       	com	r24
    29ba:	70 95       	com	r23
    29bc:	61 95       	neg	r22
    29be:	7f 4f       	sbci	r23, 0xFF	; 255
    29c0:	8f 4f       	sbci	r24, 0xFF	; 255
    29c2:	9f 4f       	sbci	r25, 0xFF	; 255
    29c4:	08 95       	ret

000029c6 <__udivmodhi4>:
    29c6:	aa 1b       	sub	r26, r26
    29c8:	bb 1b       	sub	r27, r27
    29ca:	51 e1       	ldi	r21, 0x11	; 17
    29cc:	07 c0       	rjmp	.+14     	; 0x29dc <__udivmodhi4_ep>

000029ce <__udivmodhi4_loop>:
    29ce:	aa 1f       	adc	r26, r26
    29d0:	bb 1f       	adc	r27, r27
    29d2:	a6 17       	cp	r26, r22
    29d4:	b7 07       	cpc	r27, r23
    29d6:	10 f0       	brcs	.+4      	; 0x29dc <__udivmodhi4_ep>
    29d8:	a6 1b       	sub	r26, r22
    29da:	b7 0b       	sbc	r27, r23

000029dc <__udivmodhi4_ep>:
    29dc:	88 1f       	adc	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	5a 95       	dec	r21
    29e2:	a9 f7       	brne	.-22     	; 0x29ce <__udivmodhi4_loop>
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	08 95       	ret

000029ee <__tablejump2__>:
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	05 90       	lpm	r0, Z+
    29f4:	f4 91       	lpm	r31, Z
    29f6:	e0 2d       	mov	r30, r0
    29f8:	09 94       	ijmp

000029fa <malloc>:
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	91 05       	cpc	r25, r1
    2a06:	10 f4       	brcc	.+4      	; 0x2a0c <malloc+0x12>
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <__flp>
    2a10:	f0 91 76 04 	lds	r31, 0x0476	; 0x800476 <__flp+0x1>
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	a0 e0       	ldi	r26, 0x00	; 0
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	30 97       	sbiw	r30, 0x00	; 0
    2a1e:	19 f1       	breq	.+70     	; 0x2a66 <malloc+0x6c>
    2a20:	40 81       	ld	r20, Z
    2a22:	51 81       	ldd	r21, Z+1	; 0x01
    2a24:	02 81       	ldd	r16, Z+2	; 0x02
    2a26:	13 81       	ldd	r17, Z+3	; 0x03
    2a28:	48 17       	cp	r20, r24
    2a2a:	59 07       	cpc	r21, r25
    2a2c:	c8 f0       	brcs	.+50     	; 0x2a60 <malloc+0x66>
    2a2e:	84 17       	cp	r24, r20
    2a30:	95 07       	cpc	r25, r21
    2a32:	69 f4       	brne	.+26     	; 0x2a4e <malloc+0x54>
    2a34:	10 97       	sbiw	r26, 0x00	; 0
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <malloc+0x4a>
    2a38:	12 96       	adiw	r26, 0x02	; 2
    2a3a:	0c 93       	st	X, r16
    2a3c:	12 97       	sbiw	r26, 0x02	; 2
    2a3e:	13 96       	adiw	r26, 0x03	; 3
    2a40:	1c 93       	st	X, r17
    2a42:	27 c0       	rjmp	.+78     	; 0x2a92 <malloc+0x98>
    2a44:	00 93 75 04 	sts	0x0475, r16	; 0x800475 <__flp>
    2a48:	10 93 76 04 	sts	0x0476, r17	; 0x800476 <__flp+0x1>
    2a4c:	22 c0       	rjmp	.+68     	; 0x2a92 <malloc+0x98>
    2a4e:	21 15       	cp	r18, r1
    2a50:	31 05       	cpc	r19, r1
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <malloc+0x60>
    2a54:	42 17       	cp	r20, r18
    2a56:	53 07       	cpc	r21, r19
    2a58:	18 f4       	brcc	.+6      	; 0x2a60 <malloc+0x66>
    2a5a:	9a 01       	movw	r18, r20
    2a5c:	bd 01       	movw	r22, r26
    2a5e:	ef 01       	movw	r28, r30
    2a60:	df 01       	movw	r26, r30
    2a62:	f8 01       	movw	r30, r16
    2a64:	db cf       	rjmp	.-74     	; 0x2a1c <malloc+0x22>
    2a66:	21 15       	cp	r18, r1
    2a68:	31 05       	cpc	r19, r1
    2a6a:	f9 f0       	breq	.+62     	; 0x2aaa <malloc+0xb0>
    2a6c:	28 1b       	sub	r18, r24
    2a6e:	39 0b       	sbc	r19, r25
    2a70:	24 30       	cpi	r18, 0x04	; 4
    2a72:	31 05       	cpc	r19, r1
    2a74:	80 f4       	brcc	.+32     	; 0x2a96 <malloc+0x9c>
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7a:	61 15       	cp	r22, r1
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	21 f0       	breq	.+8      	; 0x2a88 <malloc+0x8e>
    2a80:	fb 01       	movw	r30, r22
    2a82:	93 83       	std	Z+3, r25	; 0x03
    2a84:	82 83       	std	Z+2, r24	; 0x02
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <malloc+0x96>
    2a88:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <__flp+0x1>
    2a8c:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <__flp>
    2a90:	fe 01       	movw	r30, r28
    2a92:	32 96       	adiw	r30, 0x02	; 2
    2a94:	44 c0       	rjmp	.+136    	; 0x2b1e <malloc+0x124>
    2a96:	fe 01       	movw	r30, r28
    2a98:	e2 0f       	add	r30, r18
    2a9a:	f3 1f       	adc	r31, r19
    2a9c:	81 93       	st	Z+, r24
    2a9e:	91 93       	st	Z+, r25
    2aa0:	22 50       	subi	r18, 0x02	; 2
    2aa2:	31 09       	sbc	r19, r1
    2aa4:	39 83       	std	Y+1, r19	; 0x01
    2aa6:	28 83       	st	Y, r18
    2aa8:	3a c0       	rjmp	.+116    	; 0x2b1e <malloc+0x124>
    2aaa:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <__brkval>
    2aae:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <__brkval+0x1>
    2ab2:	23 2b       	or	r18, r19
    2ab4:	41 f4       	brne	.+16     	; 0x2ac6 <malloc+0xcc>
    2ab6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2aba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2abe:	30 93 74 04 	sts	0x0474, r19	; 0x800474 <__brkval+0x1>
    2ac2:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <__brkval>
    2ac6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2aca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2ace:	21 15       	cp	r18, r1
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	41 f4       	brne	.+16     	; 0x2ae4 <malloc+0xea>
    2ad4:	2d b7       	in	r18, 0x3d	; 61
    2ad6:	3e b7       	in	r19, 0x3e	; 62
    2ad8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2adc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2ae0:	24 1b       	sub	r18, r20
    2ae2:	35 0b       	sbc	r19, r21
    2ae4:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <__brkval>
    2ae8:	f0 91 74 04 	lds	r31, 0x0474	; 0x800474 <__brkval+0x1>
    2aec:	e2 17       	cp	r30, r18
    2aee:	f3 07       	cpc	r31, r19
    2af0:	a0 f4       	brcc	.+40     	; 0x2b1a <malloc+0x120>
    2af2:	2e 1b       	sub	r18, r30
    2af4:	3f 0b       	sbc	r19, r31
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	78 f0       	brcs	.+30     	; 0x2b1a <malloc+0x120>
    2afc:	ac 01       	movw	r20, r24
    2afe:	4e 5f       	subi	r20, 0xFE	; 254
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	24 17       	cp	r18, r20
    2b04:	35 07       	cpc	r19, r21
    2b06:	48 f0       	brcs	.+18     	; 0x2b1a <malloc+0x120>
    2b08:	4e 0f       	add	r20, r30
    2b0a:	5f 1f       	adc	r21, r31
    2b0c:	50 93 74 04 	sts	0x0474, r21	; 0x800474 <__brkval+0x1>
    2b10:	40 93 73 04 	sts	0x0473, r20	; 0x800473 <__brkval>
    2b14:	81 93       	st	Z+, r24
    2b16:	91 93       	st	Z+, r25
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <malloc+0x124>
    2b1a:	e0 e0       	ldi	r30, 0x00	; 0
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	cf 01       	movw	r24, r30
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	08 95       	ret

00002b2a <free>:
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <free+0xa>
    2b32:	81 c0       	rjmp	.+258    	; 0x2c36 <free+0x10c>
    2b34:	fc 01       	movw	r30, r24
    2b36:	32 97       	sbiw	r30, 0x02	; 2
    2b38:	13 82       	std	Z+3, r1	; 0x03
    2b3a:	12 82       	std	Z+2, r1	; 0x02
    2b3c:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <__flp>
    2b40:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <__flp+0x1>
    2b44:	10 97       	sbiw	r26, 0x00	; 0
    2b46:	81 f4       	brne	.+32     	; 0x2b68 <free+0x3e>
    2b48:	20 81       	ld	r18, Z
    2b4a:	31 81       	ldd	r19, Z+1	; 0x01
    2b4c:	82 0f       	add	r24, r18
    2b4e:	93 1f       	adc	r25, r19
    2b50:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <__brkval>
    2b54:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <__brkval+0x1>
    2b58:	28 17       	cp	r18, r24
    2b5a:	39 07       	cpc	r19, r25
    2b5c:	51 f5       	brne	.+84     	; 0x2bb2 <free+0x88>
    2b5e:	f0 93 74 04 	sts	0x0474, r31	; 0x800474 <__brkval+0x1>
    2b62:	e0 93 73 04 	sts	0x0473, r30	; 0x800473 <__brkval>
    2b66:	67 c0       	rjmp	.+206    	; 0x2c36 <free+0x10c>
    2b68:	ed 01       	movw	r28, r26
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	ce 17       	cp	r28, r30
    2b70:	df 07       	cpc	r29, r31
    2b72:	40 f4       	brcc	.+16     	; 0x2b84 <free+0x5a>
    2b74:	4a 81       	ldd	r20, Y+2	; 0x02
    2b76:	5b 81       	ldd	r21, Y+3	; 0x03
    2b78:	9e 01       	movw	r18, r28
    2b7a:	41 15       	cp	r20, r1
    2b7c:	51 05       	cpc	r21, r1
    2b7e:	f1 f0       	breq	.+60     	; 0x2bbc <free+0x92>
    2b80:	ea 01       	movw	r28, r20
    2b82:	f5 cf       	rjmp	.-22     	; 0x2b6e <free+0x44>
    2b84:	d3 83       	std	Z+3, r29	; 0x03
    2b86:	c2 83       	std	Z+2, r28	; 0x02
    2b88:	40 81       	ld	r20, Z
    2b8a:	51 81       	ldd	r21, Z+1	; 0x01
    2b8c:	84 0f       	add	r24, r20
    2b8e:	95 1f       	adc	r25, r21
    2b90:	c8 17       	cp	r28, r24
    2b92:	d9 07       	cpc	r29, r25
    2b94:	59 f4       	brne	.+22     	; 0x2bac <free+0x82>
    2b96:	88 81       	ld	r24, Y
    2b98:	99 81       	ldd	r25, Y+1	; 0x01
    2b9a:	84 0f       	add	r24, r20
    2b9c:	95 1f       	adc	r25, r21
    2b9e:	02 96       	adiw	r24, 0x02	; 2
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba8:	93 83       	std	Z+3, r25	; 0x03
    2baa:	82 83       	std	Z+2, r24	; 0x02
    2bac:	21 15       	cp	r18, r1
    2bae:	31 05       	cpc	r19, r1
    2bb0:	29 f4       	brne	.+10     	; 0x2bbc <free+0x92>
    2bb2:	f0 93 76 04 	sts	0x0476, r31	; 0x800476 <__flp+0x1>
    2bb6:	e0 93 75 04 	sts	0x0475, r30	; 0x800475 <__flp>
    2bba:	3d c0       	rjmp	.+122    	; 0x2c36 <free+0x10c>
    2bbc:	e9 01       	movw	r28, r18
    2bbe:	fb 83       	std	Y+3, r31	; 0x03
    2bc0:	ea 83       	std	Y+2, r30	; 0x02
    2bc2:	49 91       	ld	r20, Y+
    2bc4:	59 91       	ld	r21, Y+
    2bc6:	c4 0f       	add	r28, r20
    2bc8:	d5 1f       	adc	r29, r21
    2bca:	ec 17       	cp	r30, r28
    2bcc:	fd 07       	cpc	r31, r29
    2bce:	61 f4       	brne	.+24     	; 0x2be8 <free+0xbe>
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	84 0f       	add	r24, r20
    2bd6:	95 1f       	adc	r25, r21
    2bd8:	02 96       	adiw	r24, 0x02	; 2
    2bda:	e9 01       	movw	r28, r18
    2bdc:	99 83       	std	Y+1, r25	; 0x01
    2bde:	88 83       	st	Y, r24
    2be0:	82 81       	ldd	r24, Z+2	; 0x02
    2be2:	93 81       	ldd	r25, Z+3	; 0x03
    2be4:	9b 83       	std	Y+3, r25	; 0x03
    2be6:	8a 83       	std	Y+2, r24	; 0x02
    2be8:	e0 e0       	ldi	r30, 0x00	; 0
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	12 96       	adiw	r26, 0x02	; 2
    2bee:	8d 91       	ld	r24, X+
    2bf0:	9c 91       	ld	r25, X
    2bf2:	13 97       	sbiw	r26, 0x03	; 3
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	19 f0       	breq	.+6      	; 0x2bfe <free+0xd4>
    2bf8:	fd 01       	movw	r30, r26
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	f7 cf       	rjmp	.-18     	; 0x2bec <free+0xc2>
    2bfe:	8d 91       	ld	r24, X+
    2c00:	9c 91       	ld	r25, X
    2c02:	11 97       	sbiw	r26, 0x01	; 1
    2c04:	9d 01       	movw	r18, r26
    2c06:	2e 5f       	subi	r18, 0xFE	; 254
    2c08:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0a:	82 0f       	add	r24, r18
    2c0c:	93 1f       	adc	r25, r19
    2c0e:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <__brkval>
    2c12:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <__brkval+0x1>
    2c16:	28 17       	cp	r18, r24
    2c18:	39 07       	cpc	r19, r25
    2c1a:	69 f4       	brne	.+26     	; 0x2c36 <free+0x10c>
    2c1c:	30 97       	sbiw	r30, 0x00	; 0
    2c1e:	29 f4       	brne	.+10     	; 0x2c2a <free+0x100>
    2c20:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <__flp+0x1>
    2c24:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <__flp>
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <free+0x104>
    2c2a:	13 82       	std	Z+3, r1	; 0x03
    2c2c:	12 82       	std	Z+2, r1	; 0x02
    2c2e:	b0 93 74 04 	sts	0x0474, r27	; 0x800474 <__brkval+0x1>
    2c32:	a0 93 73 04 	sts	0x0473, r26	; 0x800473 <__brkval>
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	08 95       	ret

00002c3c <atoi>:
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	88 27       	eor	r24, r24
    2c40:	99 27       	eor	r25, r25
    2c42:	e8 94       	clt
    2c44:	21 91       	ld	r18, Z+
    2c46:	20 32       	cpi	r18, 0x20	; 32
    2c48:	e9 f3       	breq	.-6      	; 0x2c44 <atoi+0x8>
    2c4a:	29 30       	cpi	r18, 0x09	; 9
    2c4c:	10 f0       	brcs	.+4      	; 0x2c52 <atoi+0x16>
    2c4e:	2e 30       	cpi	r18, 0x0E	; 14
    2c50:	c8 f3       	brcs	.-14     	; 0x2c44 <atoi+0x8>
    2c52:	2b 32       	cpi	r18, 0x2B	; 43
    2c54:	41 f0       	breq	.+16     	; 0x2c66 <atoi+0x2a>
    2c56:	2d 32       	cpi	r18, 0x2D	; 45
    2c58:	39 f4       	brne	.+14     	; 0x2c68 <atoi+0x2c>
    2c5a:	68 94       	set
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <atoi+0x2a>
    2c5e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__mulhi_const_10>
    2c62:	82 0f       	add	r24, r18
    2c64:	91 1d       	adc	r25, r1
    2c66:	21 91       	ld	r18, Z+
    2c68:	20 53       	subi	r18, 0x30	; 48
    2c6a:	2a 30       	cpi	r18, 0x0A	; 10
    2c6c:	c0 f3       	brcs	.-16     	; 0x2c5e <atoi+0x22>
    2c6e:	1e f4       	brtc	.+6      	; 0x2c76 <atoi+0x3a>
    2c70:	90 95       	com	r25
    2c72:	81 95       	neg	r24
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	08 95       	ret

00002c78 <strcmp_P>:
    2c78:	fb 01       	movw	r30, r22
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	8d 91       	ld	r24, X+
    2c7e:	05 90       	lpm	r0, Z+
    2c80:	80 19       	sub	r24, r0
    2c82:	01 10       	cpse	r0, r1
    2c84:	d9 f3       	breq	.-10     	; 0x2c7c <strcmp_P+0x4>
    2c86:	99 0b       	sbc	r25, r25
    2c88:	08 95       	ret

00002c8a <__strlen_P>:
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	05 90       	lpm	r0, Z+
    2c8e:	00 20       	and	r0, r0
    2c90:	e9 f7       	brne	.-6      	; 0x2c8c <__strlen_P+0x2>
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	8e 0f       	add	r24, r30
    2c98:	9f 1f       	adc	r25, r31
    2c9a:	08 95       	ret

00002c9c <strstr_P>:
    2c9c:	fb 01       	movw	r30, r22
    2c9e:	55 91       	lpm	r21, Z+
    2ca0:	55 23       	and	r21, r21
    2ca2:	a9 f0       	breq	.+42     	; 0x2cce <strstr_P+0x32>
    2ca4:	bf 01       	movw	r22, r30
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	4d 91       	ld	r20, X+
    2caa:	45 17       	cp	r20, r21
    2cac:	41 11       	cpse	r20, r1
    2cae:	e1 f7       	brne	.-8      	; 0x2ca8 <strstr_P+0xc>
    2cb0:	59 f4       	brne	.+22     	; 0x2cc8 <strstr_P+0x2c>
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	05 90       	lpm	r0, Z+
    2cb6:	00 20       	and	r0, r0
    2cb8:	49 f0       	breq	.+18     	; 0x2ccc <strstr_P+0x30>
    2cba:	4d 91       	ld	r20, X+
    2cbc:	40 15       	cp	r20, r0
    2cbe:	41 11       	cpse	r20, r1
    2cc0:	c9 f3       	breq	.-14     	; 0x2cb4 <strstr_P+0x18>
    2cc2:	fb 01       	movw	r30, r22
    2cc4:	41 11       	cpse	r20, r1
    2cc6:	ef cf       	rjmp	.-34     	; 0x2ca6 <strstr_P+0xa>
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	08 95       	ret

00002cd0 <strchr>:
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	81 91       	ld	r24, Z+
    2cd4:	86 17       	cp	r24, r22
    2cd6:	21 f0       	breq	.+8      	; 0x2ce0 <strchr+0x10>
    2cd8:	88 23       	and	r24, r24
    2cda:	d9 f7       	brne	.-10     	; 0x2cd2 <strchr+0x2>
    2cdc:	99 27       	eor	r25, r25
    2cde:	08 95       	ret
    2ce0:	31 97       	sbiw	r30, 0x01	; 1
    2ce2:	cf 01       	movw	r24, r30
    2ce4:	08 95       	ret

00002ce6 <__mulhi_const_10>:
    2ce6:	7a e0       	ldi	r23, 0x0A	; 10
    2ce8:	97 9f       	mul	r25, r23
    2cea:	90 2d       	mov	r25, r0
    2cec:	87 9f       	mul	r24, r23
    2cee:	80 2d       	mov	r24, r0
    2cf0:	91 0d       	add	r25, r1
    2cf2:	11 24       	eor	r1, r1
    2cf4:	08 95       	ret

00002cf6 <_exit>:
    2cf6:	f8 94       	cli

00002cf8 <__stop_program>:
    2cf8:	ff cf       	rjmp	.-2      	; 0x2cf8 <__stop_program>
