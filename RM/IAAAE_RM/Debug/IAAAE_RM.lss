
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  0000465a  000046ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000465a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ef  008001c2  008001c2  000047b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000047b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000047e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cf8  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020302  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049a5  00000000  00000000  0002581a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070c0  00000000  00000000  0002a1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fe0  00000000  00000000  00031280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005cf0  00000000  00000000  00034260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000112b0  00000000  00000000  00039f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce0  00000000  00000000  0004b200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <__dtors_end>
       4:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
       8:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
       c:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__vector_3>
      10:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__vector_3>
      14:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__vector_3>
      18:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      1c:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      20:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      24:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      28:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      2c:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      30:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      34:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      38:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      3c:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      40:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__vector_16>
      44:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      48:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__vector_18>
      4c:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__vector_19>
      50:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      54:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      58:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      5c:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>
      60:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__vector_24>
      64:	0c 94 98 03 	jmp	0x730	; 0x730 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
      9f:	52 45 44 49 52 00                                   REDIR.

000000a5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
      a5:	55 52 4c 00                                         URL.

000000a9 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
      a9:	55 41 00                                            UA.

000000ac <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
      ac:	43 49 44 00                                         CID.

000000b0 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
      b0:	4c 65 6e 3a 20 00                                   Len: .

000000b6 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
      b6:	53 74 61 74 75 73 3a 20 00                          Status: .

000000bf <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
      bf:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000c7 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
      c7:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

000000d3 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
      d3:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000000de <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
      de:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

000000ea <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      ea:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000f7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      f7:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000104 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     104:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000113 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     113:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000011c <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     11c:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000129 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     129:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000136 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     136:	09 2d 2d 2d 3e 20 00                                .---> .

0000013d <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     13d:	22 2c 00                                            ",.

00000140 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     140:	22 2c 22 00                                         ",".

00000144 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     144:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000152 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     152:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000160 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     160:	09 2d 2d 2d 3e 20 00                                .---> .

00000167 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     167:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000173 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     173:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

0000017f <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c>:
     17f:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000018a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     18a:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000195 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     195:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000001a2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     1a2:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000001ad <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     1ad:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000001b5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     1b5:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000001be <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     1be:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000001cb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     1cb:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     1db:	44 22 2c 00                                         D",.

000001df <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     1df:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     1ef:	45 52 22 2c 00                                      ER",.

000001f4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     1f4:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000001fe <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     1fe:	09 2d 2d 2d 3e 20 00                                .---> .

00000205 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     205:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000020f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     20f:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     21f:	4e 22 2c 00                                         N",.

00000223 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     223:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     233:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000241 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     241:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000024c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     24c:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000257 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     257:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000025f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     25f:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000268 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     268:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000270 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     270:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000279 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     279:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000281 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     281:	41 54 2b 43 53 51 00                                AT+CSQ.

00000288 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     288:	2b 43 53 51 3a 20 00                                +CSQ: .

0000028f <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     28f:	41 54 2b 43 53 51 00                                AT+CSQ.

00000296 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     296:	2b 43 53 51 3a 20 00                                +CSQ: .

0000029d <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     29d:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000002a8 <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     2a8:	09 3c 2d 2d 2d 20 00                                .<--- .

000002af <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     2af:	09 2d 2d 2d 3e 20 00                                .---> .

000002b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     2b6:	41 54 45 30 00                                      ATE0.

000002bb <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     2bb:	41 54 45 30 00                                      ATE0.

000002c0 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     2c0:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     2d0:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000002df <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     2df:	41 54 00                                            AT.

000002e2 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     2e2:	41 54 00                                            AT.

000002e5 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     2e5:	41 54 00                                            AT.

000002e8 <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     2e8:	41 54 00                                            AT.

000002eb <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     2eb:	41 54 00                                            AT.

000002ee <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     2ee:	41 54 00                                            AT.

000002f1 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     2f1:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     301:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000312 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     312:	4f 4b 00                                            OK.

00000315 <_ZZN13Adafruit_FONAC4EabE3__c>:
     315:	46 4f 4e 41 6e 65 74 00                             FONAnet.

0000031d <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     31d:	45 72 72 6f 72 3d 00                                Error=.

00000324 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     324:	20 7c 20 00                                          | .

00000328 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     328:	54 65 6d 70 3d 00                                   Temp=.

0000032e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     32e:	20 7c 20 00                                          | .

00000332 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     332:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000033b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     33b:	20 7c 20 00                                          | .

0000033f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     33f:	50 56 2d 56 3d 00                                   PV-V=.

00000345 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     345:	20 7c 20 00                                          | .

00000349 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     349:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000351 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     351:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

0000035e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     35e:	20 7c 20 00                                          | .

00000362 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     362:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000036b <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     36b:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000375 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     375:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     385:	6f 64 65 3d 00                                      ode=.

0000038a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     38a:	20 7c 20 00                                          | .

0000038e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     38e:	42 45 52 3d 00                                      BER=.

00000393 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     393:	20 7c 20 00                                          | .

00000397 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     397:	52 53 53 49 3d 00                                   RSSI=.

0000039d <_ZL12b64_alphabet>:
     39d:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     3ad:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     3bd:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     3cd:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000003de <_ZZ4loopE3__c>:
     3de:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000003e8 <_ZZ8sendDatavE3__c_4>:
     3e8:	46 52 45 45 20 52 41 4d 20 42 45 46 4f 52 45 20     FREE RAM BEFORE 
     3f8:	53 45 4e 44 00                                      SEND.

000003fd <_ZZ8sendDatavE3__c_3>:
     3fd:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     40d:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     41d:	6f 72 20 73 65 6e 64 3a 00                          or send:.

00000426 <_ZZ8sendDatavE3__c_2>:
     426:	46 52 45 45 20 52 41 4d 20 41 54 20 53 54 41 52     FREE RAM AT STAR
     436:	54 00                                               T.

00000438 <_ZZ8sendDatavE3__c_1>:
     438:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     448:	52 29 00                                            R).

0000044b <_ZZ8sendDatavE3__c_0>:
     44b:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     45b:	69 6e 67 2e 2e 2e 29 00                             ing...).

00000463 <_ZZ8sendDatavE3__c>:
     463:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     473:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

00000482 <_ZZ12takeReadingsvE3__c>:
     482:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     492:	2e 2e 00                                            ...

00000495 <_ZZ21ensureFonaInitialisedbPbE3__c_9>:
     495:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     4a5:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     4b5:	64 6f 6e 65 29 00                                   done).

000004bb <_ZZ21ensureFonaInitialisedbPbE3__c_8>:
     4bb:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     4cb:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     4db:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     4eb:	75 65 20 6e 6f 77 29 00                             ue now).

000004f3 <_ZZ21ensureFonaInitialisedbPbE3__c_7>:
     4f3:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     503:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     513:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

00000522 <_ZZ21ensureFonaInitialisedbPbE3__c_6>:
     522:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     532:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

0000053d <_ZZ21ensureFonaInitialisedbPbE3__c_5>:
     53d:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     54d:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

0000055d <_ZZ21ensureFonaInitialisedbPbE3__c_4>:
     55d:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     56d:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     57d:	65 64 00                                            ed.

00000580 <_ZZ21ensureFonaInitialisedbPbE3__c_3>:
     580:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     590:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     5a0:	6f 72 74 6c 79 00                                   ortly.

000005a6 <_ZZ21ensureFonaInitialisedbPbE3__c_2>:
     5a6:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     5b6:	6e 67 20 47 50 52 53 00                             ng GPRS.

000005be <_ZZ21ensureFonaInitialisedbPbE3__c_1>:
     5be:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     5ce:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

000005db <_ZZ21ensureFonaInitialisedbPbE3__c_0>:
     5db:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     5eb:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000005f6 <_ZZ21ensureFonaInitialisedbPbE3__c>:
     5f6:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     606:	61 2e 2e 2e 00                                      a....

0000060b <_ZZ5setupE3__c>:
     60b:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000617 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     617:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     627:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     637:	73 73 69 6f 6e 3a 00                                ssion:.

0000063e <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     63e:	2a 2a 2a 2a 00                                      ****.

00000643 <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     643:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     653:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     663:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     673:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

0000067e <digital_pin_to_timer_PGM>:
     67e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     68e:	00 00 00 00                                         ....

00000692 <digital_pin_to_bit_mask_PGM>:
     692:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     6a2:	04 08 10 20                                         ... 

000006a6 <digital_pin_to_port_PGM>:
     6a6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     6b6:	03 03 03 03                                         ....

000006ba <port_to_input_PGM>:
     6ba:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000006c4 <port_to_output_PGM>:
     6c4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006ce <port_to_mode_PGM>:
     6ce:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000006d8 <__ctors_start>:
     6d8:	58 12       	cpse	r5, r24
     6da:	fc 16       	cp	r15, r28
     6dc:	ec 18       	sub	r14, r12

000006de <__ctors_end>:
     6de:	6e 12       	cpse	r6, r30

000006e0 <__dtors_end>:
     6e0:	11 24       	eor	r1, r1
     6e2:	1f be       	out	0x3f, r1	; 63
     6e4:	cf ef       	ldi	r28, 0xFF	; 255
     6e6:	d8 e0       	ldi	r29, 0x08	; 8
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	cd bf       	out	0x3d, r28	; 61

000006ec <__do_copy_data>:
     6ec:	11 e0       	ldi	r17, 0x01	; 1
     6ee:	a0 e0       	ldi	r26, 0x00	; 0
     6f0:	b1 e0       	ldi	r27, 0x01	; 1
     6f2:	ea e5       	ldi	r30, 0x5A	; 90
     6f4:	f6 e4       	ldi	r31, 0x46	; 70
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__do_copy_data+0x10>
     6f8:	05 90       	lpm	r0, Z+
     6fa:	0d 92       	st	X+, r0
     6fc:	a2 3c       	cpi	r26, 0xC2	; 194
     6fe:	b1 07       	cpc	r27, r17
     700:	d9 f7       	brne	.-10     	; 0x6f8 <__do_copy_data+0xc>

00000702 <__do_clear_bss>:
     702:	24 e0       	ldi	r18, 0x04	; 4
     704:	a2 ec       	ldi	r26, 0xC2	; 194
     706:	b1 e0       	ldi	r27, 0x01	; 1
     708:	01 c0       	rjmp	.+2      	; 0x70c <.do_clear_bss_start>

0000070a <.do_clear_bss_loop>:
     70a:	1d 92       	st	X+, r1

0000070c <.do_clear_bss_start>:
     70c:	a1 3b       	cpi	r26, 0xB1	; 177
     70e:	b2 07       	cpc	r27, r18
     710:	e1 f7       	brne	.-8      	; 0x70a <.do_clear_bss_loop>

00000712 <__do_global_ctors>:
     712:	13 e0       	ldi	r17, 0x03	; 3
     714:	cf e6       	ldi	r28, 0x6F	; 111
     716:	d3 e0       	ldi	r29, 0x03	; 3
     718:	04 c0       	rjmp	.+8      	; 0x722 <__do_global_ctors+0x10>
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	fe 01       	movw	r30, r28
     71e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <__tablejump2__>
     722:	cc 36       	cpi	r28, 0x6C	; 108
     724:	d1 07       	cpc	r29, r17
     726:	c9 f7       	brne	.-14     	; 0x71a <__do_global_ctors+0x8>
     728:	0e 94 1a 19 	call	0x3234	; 0x3234 <main>
     72c:	0c 94 20 23 	jmp	0x4640	; 0x4640 <__do_global_dtors>

00000730 <__bad_interrupt>:
     730:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000734 <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     734:	83 5e       	subi	r24, 0xE3	; 227
     736:	9e 4f       	sbci	r25, 0xFE	; 254
     738:	dc 01       	movw	r26, r24
     73a:	8d 91       	ld	r24, X+
     73c:	9c 91       	ld	r25, X
     73e:	dc 01       	movw	r26, r24
     740:	ed 91       	ld	r30, X+
     742:	fc 91       	ld	r31, X
     744:	04 80       	ldd	r0, Z+4	; 0x04
     746:	f5 81       	ldd	r31, Z+5	; 0x05
     748:	e0 2d       	mov	r30, r0
     74a:	09 94       	ijmp

0000074c <_ZN13Adafruit_FONA5writeEh>:
     74c:	83 5e       	subi	r24, 0xE3	; 227
     74e:	9e 4f       	sbci	r25, 0xFE	; 254
     750:	dc 01       	movw	r26, r24
     752:	8d 91       	ld	r24, X+
     754:	9c 91       	ld	r25, X
     756:	dc 01       	movw	r26, r24
     758:	ed 91       	ld	r30, X+
     75a:	fc 91       	ld	r31, X
     75c:	01 90       	ld	r0, Z+
     75e:	f0 81       	ld	r31, Z
     760:	e0 2d       	mov	r30, r0
     762:	09 94       	ijmp

00000764 <_ZN13Adafruit_FONA4readEv>:
     764:	83 5e       	subi	r24, 0xE3	; 227
     766:	9e 4f       	sbci	r25, 0xFE	; 254
     768:	dc 01       	movw	r26, r24
     76a:	8d 91       	ld	r24, X+
     76c:	9c 91       	ld	r25, X
     76e:	dc 01       	movw	r26, r24
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	06 80       	ldd	r0, Z+6	; 0x06
     776:	f7 81       	ldd	r31, Z+7	; 0x07
     778:	e0 2d       	mov	r30, r0
     77a:	09 94       	ijmp

0000077c <_ZN13Adafruit_FONA4peekEv>:
     77c:	83 5e       	subi	r24, 0xE3	; 227
     77e:	9e 4f       	sbci	r25, 0xFE	; 254
     780:	dc 01       	movw	r26, r24
     782:	8d 91       	ld	r24, X+
     784:	9c 91       	ld	r25, X
     786:	dc 01       	movw	r26, r24
     788:	ed 91       	ld	r30, X+
     78a:	fc 91       	ld	r31, X
     78c:	00 84       	ldd	r0, Z+8	; 0x08
     78e:	f1 85       	ldd	r31, Z+9	; 0x09
     790:	e0 2d       	mov	r30, r0
     792:	09 94       	ijmp

00000794 <_ZN13Adafruit_FONA5flushEv>:
     794:	83 5e       	subi	r24, 0xE3	; 227
     796:	9e 4f       	sbci	r25, 0xFE	; 254
     798:	dc 01       	movw	r26, r24
     79a:	8d 91       	ld	r24, X+
     79c:	9c 91       	ld	r25, X
     79e:	dc 01       	movw	r26, r24
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	02 84       	ldd	r0, Z+10	; 0x0a
     7a6:	f3 85       	ldd	r31, Z+11	; 0x0b
     7a8:	e0 2d       	mov	r30, r0
     7aa:	09 94       	ijmp

000007ac <_ZN13Adafruit_FONAC1Eab>:
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	ec 01       	movw	r28, r24
     7b6:	06 2f       	mov	r16, r22
     7b8:	14 2f       	mov	r17, r20
     7ba:	1b 82       	std	Y+3, r1	; 0x03
     7bc:	1a 82       	std	Y+2, r1	; 0x02
     7be:	88 ee       	ldi	r24, 0xE8	; 232
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	a0 e0       	ldi	r26, 0x00	; 0
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	8c 83       	std	Y+4, r24	; 0x04
     7c8:	9d 83       	std	Y+5, r25	; 0x05
     7ca:	ae 83       	std	Y+6, r26	; 0x06
     7cc:	bf 83       	std	Y+7, r27	; 0x07
     7ce:	85 e5       	ldi	r24, 0x55	; 85
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	99 83       	std	Y+1, r25	; 0x01
     7d4:	88 83       	st	Y, r24
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	8e 87       	std	Y+14, r24	; 0x0e
     7da:	64 ea       	ldi	r22, 0xA4	; 164
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	ce 01       	movw	r24, r28
     7e0:	8b 5e       	subi	r24, 0xEB	; 235
     7e2:	9e 4f       	sbci	r25, 0xFE	; 254
     7e4:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_ZN6StringC1EPKc>
     7e8:	0c 87       	std	Y+12, r16	; 0x0c
     7ea:	1d 87       	std	Y+13, r17	; 0x0d
     7ec:	fe 01       	movw	r30, r28
     7ee:	e2 5f       	subi	r30, 0xF2	; 242
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	85 e1       	ldi	r24, 0x15	; 21
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
     7fa:	32 96       	adiw	r30, 0x02	; 2
     7fc:	11 82       	std	Z+1, r1	; 0x01
     7fe:	10 82       	st	Z, r1
     800:	32 96       	adiw	r30, 0x02	; 2
     802:	11 82       	std	Z+1, r1	; 0x01
     804:	10 82       	st	Z, r1
     806:	3b 96       	adiw	r30, 0x0b	; 11
     808:	11 82       	std	Z+1, r1	; 0x01
     80a:	10 82       	st	Z, r1
     80c:	39 97       	sbiw	r30, 0x09	; 9
     80e:	10 82       	st	Z, r1
     810:	c5 5e       	subi	r28, 0xE5	; 229
     812:	de 4f       	sbci	r29, 0xFE	; 254
     814:	82 e1       	ldi	r24, 0x12	; 18
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	99 83       	std	Y+1, r25	; 0x01
     81a:	88 83       	st	Y, r24
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     826:	8b 5e       	subi	r24, 0xEB	; 235
     828:	9e 4f       	sbci	r25, 0xFE	; 254
     82a:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <_ZN6StringaSERKS_>

0000082e <_ZN13Adafruit_FONA10flushInputEv>:
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	ec 01       	movw	r28, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	8c 01       	movw	r16, r24
     83e:	0f 5f       	subi	r16, 0xFF	; 255
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	88 97       	sbiw	r24, 0x28	; 40
     844:	d8 f4       	brcc	.+54     	; 0x87c <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     846:	e8 81       	ld	r30, Y
     848:	f9 81       	ldd	r31, Y+1	; 0x01
     84a:	04 80       	ldd	r0, Z+4	; 0x04
     84c:	f5 81       	ldd	r31, Z+5	; 0x05
     84e:	e0 2d       	mov	r30, r0
     850:	ce 01       	movw	r24, r28
     852:	09 95       	icall
     854:	89 2b       	or	r24, r25
     856:	51 f0       	breq	.+20     	; 0x86c <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     858:	e8 81       	ld	r30, Y
     85a:	f9 81       	ldd	r31, Y+1	; 0x01
     85c:	06 80       	ldd	r0, Z+6	; 0x06
     85e:	f7 81       	ldd	r31, Z+7	; 0x07
     860:	e0 2d       	mov	r30, r0
     862:	ce 01       	movw	r24, r28
     864:	09 95       	icall
     866:	00 e0       	ldi	r16, 0x00	; 0
     868:	10 e0       	ldi	r17, 0x00	; 0
     86a:	ed cf       	rjmp	.-38     	; 0x846 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     878:	c8 01       	movw	r24, r16
     87a:	e0 cf       	rjmp	.-64     	; 0x83c <_ZN13Adafruit_FONA10flushInputEv+0xe>
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	8b 01       	movw	r16, r22
     894:	f4 2e       	mov	r15, r20
     896:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
     89a:	60 e6       	ldi	r22, 0x60	; 96
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	83 ec       	ldi	r24, 0xC3	; 195
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     8a6:	62 e5       	ldi	r22, 0x52	; 82
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	83 ec       	ldi	r24, 0xC3	; 195
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     8b2:	b8 01       	movw	r22, r16
     8b4:	83 ec       	ldi	r24, 0xC3	; 195
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     8bc:	62 e2       	ldi	r22, 0x22	; 34
     8be:	83 ec       	ldi	r24, 0xC3	; 195
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN5Print7printlnEc>
     8c6:	c3 5e       	subi	r28, 0xE3	; 227
     8c8:	de 4f       	sbci	r29, 0xFE	; 254
     8ca:	64 e4       	ldi	r22, 0x44	; 68
     8cc:	71 e0       	ldi	r23, 0x01	; 1
     8ce:	88 81       	ld	r24, Y
     8d0:	99 81       	ldd	r25, Y+1	; 0x01
     8d2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     8d6:	b8 01       	movw	r22, r16
     8d8:	88 81       	ld	r24, Y
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     8e0:	88 81       	ld	r24, Y
     8e2:	99 81       	ldd	r25, Y+1	; 0x01
     8e4:	ff 20       	and	r15, r15
     8e6:	19 f0       	breq	.+6      	; 0x8ee <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     8e8:	60 e4       	ldi	r22, 0x40	; 64
     8ea:	71 e0       	ldi	r23, 0x01	; 1
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     8ee:	6d e3       	ldi	r22, 0x3D	; 61
     8f0:	71 e0       	ldi	r23, 0x01	; 1
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>

00000900 <_ZN13Adafruit_FONA8readlineEjb>:
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	7c 01       	movw	r14, r24
     914:	b4 2e       	mov	r11, r20
     916:	8b 01       	movw	r16, r22
     918:	00 0f       	add	r16, r16
     91a:	11 1f       	adc	r17, r17
     91c:	00 0f       	add	r16, r16
     91e:	11 1f       	adc	r17, r17
     920:	c0 e0       	ldi	r28, 0x00	; 0
     922:	d0 e0       	ldi	r29, 0x00	; 0
     924:	67 01       	movw	r12, r14
     926:	83 ee       	ldi	r24, 0xE3	; 227
     928:	c8 1a       	sub	r12, r24
     92a:	8e ef       	ldi	r24, 0xFE	; 254
     92c:	d8 0a       	sbc	r13, r24
     92e:	01 15       	cp	r16, r1
     930:	11 05       	cpc	r17, r1
     932:	c9 f1       	breq	.+114    	; 0x9a6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     934:	ce 3f       	cpi	r28, 0xFE	; 254
     936:	d1 05       	cpc	r29, r1
     938:	98 f0       	brcs	.+38     	; 0x960 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     93a:	62 e9       	ldi	r22, 0x92	; 146
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	83 ec       	ldi	r24, 0xC3	; 195
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     946:	2f c0       	rjmp	.+94     	; 0x9a6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     948:	f6 01       	movw	r30, r12
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	dc 01       	movw	r26, r24
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	06 80       	ldd	r0, Z+6	; 0x06
     956:	f7 81       	ldd	r31, Z+7	; 0x07
     958:	e0 2d       	mov	r30, r0
     95a:	09 95       	icall
     95c:	8d 30       	cpi	r24, 0x0D	; 13
     95e:	69 f4       	brne	.+26     	; 0x97a <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     960:	d6 01       	movw	r26, r12
     962:	8d 91       	ld	r24, X+
     964:	9c 91       	ld	r25, X
     966:	dc 01       	movw	r26, r24
     968:	ed 91       	ld	r30, X+
     96a:	fc 91       	ld	r31, X
     96c:	04 80       	ldd	r0, Z+4	; 0x04
     96e:	f5 81       	ldd	r31, Z+5	; 0x05
     970:	e0 2d       	mov	r30, r0
     972:	09 95       	icall
     974:	89 2b       	or	r24, r25
     976:	41 f7       	brne	.-48     	; 0x948 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     978:	0c c0       	rjmp	.+24     	; 0x992 <_ZN13Adafruit_FONA8readlineEjb+0x92>
     97a:	8a 30       	cpi	r24, 0x0A	; 10
     97c:	21 f4       	brne	.+8      	; 0x986 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     97e:	20 97       	sbiw	r28, 0x00	; 0
     980:	79 f3       	breq	.-34     	; 0x960 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     982:	bb 20       	and	r11, r11
     984:	81 f0       	breq	.+32     	; 0x9a6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     986:	f7 01       	movw	r30, r14
     988:	ec 0f       	add	r30, r28
     98a:	fd 1f       	adc	r31, r29
     98c:	87 87       	std	Z+15, r24	; 0x0f
     98e:	21 96       	adiw	r28, 0x01	; 1
     990:	e7 cf       	rjmp	.-50     	; 0x960 <_ZN13Adafruit_FONA8readlineEjb+0x60>
     992:	01 50       	subi	r16, 0x01	; 1
     994:	11 09       	sbc	r17, r1
     996:	39 f0       	breq	.+14     	; 0x9a6 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     9a4:	c4 cf       	rjmp	.-120    	; 0x92e <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     9a6:	f7 01       	movw	r30, r14
     9a8:	ec 0f       	add	r30, r28
     9aa:	fd 1f       	adc	r31, r29
     9ac:	17 86       	std	Z+15, r1	; 0x0f
     9ae:	8c 2f       	mov	r24, r28
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	bf 90       	pop	r11
     9c2:	08 95       	ret

000009c4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
     9ce:	8b 01       	movw	r16, r22
     9d0:	ba 01       	movw	r22, r20
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
     9d8:	68 e9       	ldi	r22, 0x98	; 152
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	83 ec       	ldi	r24, 0xC3	; 195
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     9e4:	2f 96       	adiw	r28, 0x0f	; 15
     9e6:	be 01       	movw	r22, r28
     9e8:	83 ec       	ldi	r24, 0xC3	; 195
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     9f0:	b8 01       	movw	r22, r16
     9f2:	ce 01       	movw	r24, r28
     9f4:	0e 94 65 22 	call	0x44ca	; 0x44ca <strcmp_P>
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f0       	breq	.+2      	; 0xa00 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	82 2f       	mov	r24, r18
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
     a12:	fc 01       	movw	r30, r24
     a14:	e3 5e       	subi	r30, 0xE3	; 227
     a16:	fe 4f       	sbci	r31, 0xFE	; 254
     a18:	66 23       	and	r22, r22
     a1a:	31 f0       	breq	.+12     	; 0xa28 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     a1c:	62 e2       	ldi	r22, 0x22	; 34
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN5Print7printlnEc>
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
     a30:	fe 01       	movw	r30, r28
     a32:	e5 5e       	subi	r30, 0xE5	; 229
     a34:	fe 4f       	sbci	r31, 0xFE	; 254
     a36:	60 81       	ld	r22, Z
     a38:	71 81       	ldd	r23, Z+1	; 0x01
     a3a:	40 e1       	ldi	r20, 0x10	; 16
     a3c:	57 e2       	ldi	r21, 0x27	; 39
     a3e:	ce 01       	movw	r24, r28
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000a48 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	ec 01       	movw	r28, r24
     a52:	8a 01       	movw	r16, r20
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 43 04 	call	0x886	; 0x886 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a5a:	fe 01       	movw	r30, r28
     a5c:	e3 5e       	subi	r30, 0xE3	; 227
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	b8 01       	movw	r22, r16
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	ce 01       	movw	r24, r28
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000a7a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	8a 01       	movw	r16, r20
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	0e 94 43 04 	call	0x886	; 0x886 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a8c:	fe 01       	movw	r30, r28
     a8e:	e3 5e       	subi	r30, 0xE3	; 227
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	b8 01       	movw	r22, r16
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN5Print5printERK6String>
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	ce 01       	movw	r24, r28
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000aac <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	ec 01       	movw	r28, r24
     ab6:	8a 01       	movw	r16, r20
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	0e 94 43 04 	call	0x886	; 0x886 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     abe:	fe 01       	movw	r30, r28
     ac0:	e3 5e       	subi	r30, 0xE3	; 227
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	b8 01       	movw	r22, r16
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	ce 01       	movw	r24, r28
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000ade <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	ec 01       	movw	r28, r24
     aec:	69 01       	movw	r12, r18
     aee:	7a 01       	movw	r14, r20
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	0e 94 43 04 	call	0x886	; 0x886 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     af6:	fe 01       	movw	r30, r28
     af8:	e3 5e       	subi	r30, 0xE3	; 227
     afa:	fe 4f       	sbci	r31, 0xFE	; 254
     afc:	2a e0       	ldi	r18, 0x0A	; 10
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	b7 01       	movw	r22, r14
     b02:	a6 01       	movw	r20, r12
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN5Print5printEli>
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	ce 01       	movw	r24, r28
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000b20 <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     b20:	4f 92       	push	r4
     b22:	5f 92       	push	r5
     b24:	6f 92       	push	r6
     b26:	7f 92       	push	r7
     b28:	8f 92       	push	r8
     b2a:	9f 92       	push	r9
     b2c:	af 92       	push	r10
     b2e:	bf 92       	push	r11
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	7c 01       	movw	r14, r24
     b3e:	2a 01       	movw	r4, r20
     b40:	3b 01       	movw	r6, r22
     b42:	48 01       	movw	r8, r16
     b44:	59 01       	movw	r10, r18
     b46:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
     b4a:	66 e3       	ldi	r22, 0x36	; 54
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	83 ec       	ldi	r24, 0xC3	; 195
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     b56:	69 e2       	ldi	r22, 0x29	; 41
     b58:	71 e0       	ldi	r23, 0x01	; 1
     b5a:	83 ec       	ldi	r24, 0xC3	; 195
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     b62:	2a e0       	ldi	r18, 0x0A	; 10
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	b3 01       	movw	r22, r6
     b68:	a2 01       	movw	r20, r4
     b6a:	83 ec       	ldi	r24, 0xC3	; 195
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN5Print5printEmi>
     b72:	6c e2       	ldi	r22, 0x2C	; 44
     b74:	83 ec       	ldi	r24, 0xC3	; 195
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN5Print5printEc>
     b7c:	2a e0       	ldi	r18, 0x0A	; 10
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	b5 01       	movw	r22, r10
     b82:	a4 01       	movw	r20, r8
     b84:	83 ec       	ldi	r24, 0xC3	; 195
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	0e 94 66 1a 	call	0x34cc	; 0x34cc <_ZN5Print7printlnEmi>
     b8c:	e7 01       	movw	r28, r14
     b8e:	c3 5e       	subi	r28, 0xE3	; 227
     b90:	de 4f       	sbci	r29, 0xFE	; 254
     b92:	6c e1       	ldi	r22, 0x1C	; 28
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	88 81       	ld	r24, Y
     b98:	99 81       	ldd	r25, Y+1	; 0x01
     b9a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     b9e:	2a e0       	ldi	r18, 0x0A	; 10
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	b3 01       	movw	r22, r6
     ba4:	a2 01       	movw	r20, r4
     ba6:	88 81       	ld	r24, Y
     ba8:	99 81       	ldd	r25, Y+1	; 0x01
     baa:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN5Print5printEmi>
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	88 81       	ld	r24, Y
     bb4:	99 81       	ldd	r25, Y+1	; 0x01
     bb6:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
     bba:	2a e0       	ldi	r18, 0x0A	; 10
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	b5 01       	movw	r22, r10
     bc0:	a4 01       	movw	r20, r8
     bc2:	88 81       	ld	r24, Y
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <_ZN5Print7printlnEmi>
     bca:	40 e1       	ldi	r20, 0x10	; 16
     bcc:	57 e2       	ldi	r21, 0x27	; 39
     bce:	63 e1       	ldi	r22, 0x13	; 19
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	c7 01       	movw	r24, r14
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	5f 90       	pop	r5
     bee:	4f 90       	pop	r4
     bf0:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000bf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	8b 01       	movw	r16, r22
     c04:	7a 01       	movw	r14, r20
     c06:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
     c0a:	6b e8       	ldi	r22, 0x8B	; 139
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	83 ec       	ldi	r24, 0xC3	; 195
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     c16:	b8 01       	movw	r22, r16
     c18:	83 ec       	ldi	r24, 0xC3	; 195
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c20:	fe 01       	movw	r30, r28
     c22:	e3 5e       	subi	r30, 0xE3	; 227
     c24:	fe 4f       	sbci	r31, 0xFE	; 254
     c26:	b8 01       	movw	r22, r16
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	b7 01       	movw	r22, r14
     c34:	ce 01       	movw	r24, r28
     c36:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
     c3a:	18 2f       	mov	r17, r24
     c3c:	64 e8       	ldi	r22, 0x84	; 132
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	83 ec       	ldi	r24, 0xC3	; 195
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     c48:	be 01       	movw	r22, r28
     c4a:	61 5f       	subi	r22, 0xF1	; 241
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	83 ec       	ldi	r24, 0xC3	; 195
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     c56:	81 2f       	mov	r24, r17
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	08 95       	ret

00000c66 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     c66:	8f 92       	push	r8
     c68:	9f 92       	push	r9
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	ec 01       	movw	r28, r24
     c80:	6b 01       	movw	r12, r22
     c82:	49 01       	movw	r8, r18
     c84:	5a 01       	movw	r10, r20
     c86:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
     c8a:	6d e7       	ldi	r22, 0x7D	; 125
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	83 ec       	ldi	r24, 0xC3	; 195
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     c96:	b6 01       	movw	r22, r12
     c98:	83 ec       	ldi	r24, 0xC3	; 195
     c9a:	93 e0       	ldi	r25, 0x03	; 3
     c9c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	b5 01       	movw	r22, r10
     ca6:	a4 01       	movw	r20, r8
     ca8:	83 ec       	ldi	r24, 0xC3	; 195
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEli>
     cb0:	7e 01       	movw	r14, r28
     cb2:	83 ee       	ldi	r24, 0xE3	; 227
     cb4:	e8 1a       	sub	r14, r24
     cb6:	8e ef       	ldi	r24, 0xFE	; 254
     cb8:	f8 0a       	sbc	r15, r24
     cba:	b6 01       	movw	r22, r12
     cbc:	f7 01       	movw	r30, r14
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     cc6:	2a e0       	ldi	r18, 0x0A	; 10
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	b5 01       	movw	r22, r10
     ccc:	a4 01       	movw	r20, r8
     cce:	f7 01       	movw	r30, r14
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print7printlnEli>
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	b8 01       	movw	r22, r16
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
     ce2:	18 2f       	mov	r17, r24
     ce4:	66 e7       	ldi	r22, 0x76	; 118
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	83 ec       	ldi	r24, 0xC3	; 195
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     cf0:	be 01       	movw	r22, r28
     cf2:	61 5f       	subi	r22, 0xF1	; 241
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	83 ec       	ldi	r24, 0xC3	; 195
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     cfe:	81 2f       	mov	r24, r17
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	9f 90       	pop	r9
     d16:	8f 90       	pop	r8
     d18:	08 95       	ret

00000d1a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     d1a:	af 92       	push	r10
     d1c:	bf 92       	push	r11
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	ec 01       	movw	r28, r24
     d30:	6b 01       	movw	r12, r22
     d32:	7a 01       	movw	r14, r20
     d34:	59 01       	movw	r10, r18
     d36:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
     d3a:	6f e6       	ldi	r22, 0x6F	; 111
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	83 ec       	ldi	r24, 0xC3	; 195
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     d46:	b6 01       	movw	r22, r12
     d48:	83 ec       	ldi	r24, 0xC3	; 195
     d4a:	93 e0       	ldi	r25, 0x03	; 3
     d4c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     d50:	62 e2       	ldi	r22, 0x22	; 34
     d52:	83 ec       	ldi	r24, 0xC3	; 195
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN5Print5printEc>
     d5a:	b7 01       	movw	r22, r14
     d5c:	83 ec       	ldi	r24, 0xC3	; 195
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     d64:	62 e2       	ldi	r22, 0x22	; 34
     d66:	83 ec       	ldi	r24, 0xC3	; 195
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN5Print7printlnEc>
     d6e:	8e 01       	movw	r16, r28
     d70:	03 5e       	subi	r16, 0xE3	; 227
     d72:	1e 4f       	sbci	r17, 0xFE	; 254
     d74:	b6 01       	movw	r22, r12
     d76:	f8 01       	movw	r30, r16
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     d80:	62 e2       	ldi	r22, 0x22	; 34
     d82:	f8 01       	movw	r30, r16
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN5Print5printEc>
     d8c:	b7 01       	movw	r22, r14
     d8e:	f8 01       	movw	r30, r16
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     d98:	62 e2       	ldi	r22, 0x22	; 34
     d9a:	f8 01       	movw	r30, r16
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN5Print7printlnEc>
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	b5 01       	movw	r22, r10
     da8:	ce 01       	movw	r24, r28
     daa:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
     dae:	18 2f       	mov	r17, r24
     db0:	68 e6       	ldi	r22, 0x68	; 104
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	83 ec       	ldi	r24, 0xC3	; 195
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     dbc:	be 01       	movw	r22, r28
     dbe:	61 5f       	subi	r22, 0xF1	; 241
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	83 ec       	ldi	r24, 0xC3	; 195
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     dca:	81 2f       	mov	r24, r17
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	af 90       	pop	r10
     de0:	08 95       	ret

00000de2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ec 01       	movw	r28, r24
     dec:	8a 01       	movw	r16, r20
     dee:	a9 01       	movw	r20, r18
     df0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     df4:	88 23       	and	r24, r24
     df6:	41 f0       	breq	.+16     	; 0xe08 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     df8:	b8 01       	movw	r22, r16
     dfa:	ce 01       	movw	r24, r28
     dfc:	0f 96       	adiw	r24, 0x0f	; 15
     dfe:	0e 94 65 22 	call	0x44ca	; 0x44ca <strcmp_P>
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	89 2b       	or	r24, r25
     e06:	09 f0       	breq	.+2      	; 0xe0a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	82 2f       	mov	r24, r18
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <_ZN13Adafruit_FONA5beginEhh>:
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	f6 2e       	mov	r15, r22
     e2a:	e4 2e       	mov	r14, r20
     e2c:	8f e1       	ldi	r24, 0x1F	; 31
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 29 19 	call	0x3252	; 0x3252 <_Znwj>
     e34:	8c 01       	movw	r16, r24
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	4e 2d       	mov	r20, r14
     e3a:	6f 2d       	mov	r22, r15
     e3c:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <_ZN14SoftwareSerialC1Ehhb>
     e40:	7e 01       	movw	r14, r28
     e42:	83 ee       	ldi	r24, 0xE3	; 227
     e44:	e8 1a       	sub	r14, r24
     e46:	8e ef       	ldi	r24, 0xFE	; 254
     e48:	f8 0a       	sbc	r15, r24
     e4a:	d7 01       	movw	r26, r14
     e4c:	0d 93       	st	X+, r16
     e4e:	1c 93       	st	X, r17
     e50:	40 ec       	ldi	r20, 0xC0	; 192
     e52:	52 e1       	ldi	r21, 0x12	; 18
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_ZN14SoftwareSerial5beginEl>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	8c 85       	ldd	r24, Y+12	; 0x0c
     e62:	0e 94 17 1c 	call	0x382e	; 0x382e <pinMode>
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	8c 85       	ldd	r24, Y+12	; 0x0c
     e6a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e7e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
     e82:	64 e6       	ldi	r22, 0x64	; 100
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     e8e:	61 e0       	ldi	r22, 0x01	; 1
     e90:	8c 85       	ldd	r24, Y+12	; 0x0c
     e92:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
     e96:	61 ef       	ldi	r22, 0xF1	; 241
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	83 ec       	ldi	r24, 0xC3	; 195
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
     ea2:	8e e0       	ldi	r24, 0x0E	; 14
     ea4:	c8 2e       	mov	r12, r24
     ea6:	d1 2c       	mov	r13, r1
     ea8:	8e 01       	movw	r16, r28
     eaa:	05 5e       	subi	r16, 0xE5	; 229
     eac:	1e 4f       	sbci	r17, 0xFE	; 254
     eae:	f7 01       	movw	r30, r14
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	dc 01       	movw	r26, r24
     eb6:	ed 91       	ld	r30, X+
     eb8:	fc 91       	ld	r31, X
     eba:	04 80       	ldd	r0, Z+4	; 0x04
     ebc:	f5 81       	ldd	r31, Z+5	; 0x05
     ebe:	e0 2d       	mov	r30, r0
     ec0:	09 95       	icall
     ec2:	89 2b       	or	r24, r25
     ec4:	59 f0       	breq	.+22     	; 0xedc <_ZN13Adafruit_FONA5beginEhh+0xc6>
     ec6:	f7 01       	movw	r30, r14
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	dc 01       	movw	r26, r24
     ece:	ed 91       	ld	r30, X+
     ed0:	fc 91       	ld	r31, X
     ed2:	06 80       	ldd	r0, Z+6	; 0x06
     ed4:	f7 81       	ldd	r31, Z+7	; 0x07
     ed6:	e0 2d       	mov	r30, r0
     ed8:	09 95       	icall
     eda:	e9 cf       	rjmp	.-46     	; 0xeae <_ZN13Adafruit_FONA5beginEhh+0x98>
     edc:	f8 01       	movw	r30, r16
     ede:	40 81       	ld	r20, Z
     ee0:	51 81       	ldd	r21, Z+1	; 0x01
     ee2:	24 ef       	ldi	r18, 0xF4	; 244
     ee4:	31 e0       	ldi	r19, 0x01	; 1
     ee6:	6e ee       	ldi	r22, 0xEE	; 238
     ee8:	72 e0       	ldi	r23, 0x02	; 2
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ef0:	81 11       	cpse	r24, r1
     ef2:	34 c0       	rjmp	.+104    	; 0xf5c <_ZN13Adafruit_FONA5beginEhh+0x146>
     ef4:	d7 01       	movw	r26, r14
     ef6:	8d 91       	ld	r24, X+
     ef8:	9c 91       	ld	r25, X
     efa:	dc 01       	movw	r26, r24
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	04 80       	ldd	r0, Z+4	; 0x04
     f02:	f5 81       	ldd	r31, Z+5	; 0x05
     f04:	e0 2d       	mov	r30, r0
     f06:	09 95       	icall
     f08:	89 2b       	or	r24, r25
     f0a:	59 f0       	breq	.+22     	; 0xf22 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     f0c:	f7 01       	movw	r30, r14
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	dc 01       	movw	r26, r24
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	06 80       	ldd	r0, Z+6	; 0x06
     f1a:	f7 81       	ldd	r31, Z+7	; 0x07
     f1c:	e0 2d       	mov	r30, r0
     f1e:	09 95       	icall
     f20:	e9 cf       	rjmp	.-46     	; 0xef4 <_ZN13Adafruit_FONA5beginEhh+0xde>
     f22:	24 ef       	ldi	r18, 0xF4	; 244
     f24:	31 e0       	ldi	r19, 0x01	; 1
     f26:	4b ee       	ldi	r20, 0xEB	; 235
     f28:	52 e0       	ldi	r21, 0x02	; 2
     f2a:	68 ee       	ldi	r22, 0xE8	; 232
     f2c:	72 e0       	ldi	r23, 0x02	; 2
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f34:	81 11       	cpse	r24, r1
     f36:	12 c0       	rjmp	.+36     	; 0xf5c <_ZN13Adafruit_FONA5beginEhh+0x146>
     f38:	64 ef       	ldi	r22, 0xF4	; 244
     f3a:	71 e0       	ldi	r23, 0x01	; 1
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     f44:	b1 e0       	ldi	r27, 0x01	; 1
     f46:	cb 1a       	sub	r12, r27
     f48:	d1 08       	sbc	r13, r1
     f4a:	09 f0       	breq	.+2      	; 0xf4e <_ZN13Adafruit_FONA5beginEhh+0x138>
     f4c:	b0 cf       	rjmp	.-160    	; 0xeae <_ZN13Adafruit_FONA5beginEhh+0x98>
     f4e:	5e c0       	rjmp	.+188    	; 0x100c <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     f50:	64 e6       	ldi	r22, 0x64	; 100
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     f5c:	f8 01       	movw	r30, r16
     f5e:	40 81       	ld	r20, Z
     f60:	51 81       	ldd	r21, Z+1	; 0x01
     f62:	24 ef       	ldi	r18, 0xF4	; 244
     f64:	31 e0       	ldi	r19, 0x01	; 1
     f66:	6b eb       	ldi	r22, 0xBB	; 187
     f68:	72 e0       	ldi	r23, 0x02	; 2
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f70:	64 e6       	ldi	r22, 0x64	; 100
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     f7c:	d8 01       	movw	r26, r16
     f7e:	4d 91       	ld	r20, X+
     f80:	5c 91       	ld	r21, X
     f82:	24 ef       	ldi	r18, 0xF4	; 244
     f84:	31 e0       	ldi	r19, 0x01	; 1
     f86:	66 eb       	ldi	r22, 0xB6	; 182
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f90:	81 11       	cpse	r24, r1
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <_ZN13Adafruit_FONA5beginEhh+0x182>
     f94:	12 e0       	ldi	r17, 0x02	; 2
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <_ZN13Adafruit_FONA5beginEhh+0x184>
     f98:	11 e0       	ldi	r17, 0x01	; 1
     f9a:	64 e6       	ldi	r22, 0x64	; 100
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
     fac:	6f ea       	ldi	r22, 0xAF	; 175
     fae:	72 e0       	ldi	r23, 0x02	; 2
     fb0:	83 ec       	ldi	r24, 0xC3	; 195
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     fb8:	69 e0       	ldi	r22, 0x09	; 9
     fba:	71 e0       	ldi	r23, 0x01	; 1
     fbc:	83 ec       	ldi	r24, 0xC3	; 195
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     fc4:	69 e0       	ldi	r22, 0x09	; 9
     fc6:	71 e0       	ldi	r23, 0x01	; 1
     fc8:	f7 01       	movw	r30, r14
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	64 ef       	ldi	r22, 0xF4	; 244
     fd6:	71 e0       	ldi	r23, 0x01	; 1
     fd8:	ce 01       	movw	r24, r28
     fda:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
     fde:	68 ea       	ldi	r22, 0xA8	; 168
     fe0:	72 e0       	ldi	r23, 0x02	; 2
     fe2:	83 ec       	ldi	r24, 0xC3	; 195
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
     fea:	2f 96       	adiw	r28, 0x0f	; 15
     fec:	be 01       	movw	r22, r28
     fee:	83 ec       	ldi	r24, 0xC3	; 195
     ff0:	93 e0       	ldi	r25, 0x03	; 3
     ff2:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
     ff6:	6d e9       	ldi	r22, 0x9D	; 157
     ff8:	72 e0       	ldi	r23, 0x02	; 2
     ffa:	ce 01       	movw	r24, r28
     ffc:	0e 94 77 22 	call	0x44ee	; 0x44ee <strstr_P>
    1000:	89 2b       	or	r24, r25
    1002:	11 f0       	breq	.+4      	; 0x1008 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
    1004:	81 2f       	mov	r24, r17
    1006:	35 c0       	rjmp	.+106    	; 0x1072 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	33 c0       	rjmp	.+102    	; 0x1072 <_ZN13Adafruit_FONA5beginEhh+0x25c>
    100c:	d8 01       	movw	r26, r16
    100e:	4d 91       	ld	r20, X+
    1010:	5c 91       	ld	r21, X
    1012:	24 ef       	ldi	r18, 0xF4	; 244
    1014:	31 e0       	ldi	r19, 0x01	; 1
    1016:	65 ee       	ldi	r22, 0xE5	; 229
    1018:	72 e0       	ldi	r23, 0x02	; 2
    101a:	ce 01       	movw	r24, r28
    101c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1020:	64 e6       	ldi	r22, 0x64	; 100
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
    102c:	f8 01       	movw	r30, r16
    102e:	40 81       	ld	r20, Z
    1030:	51 81       	ldd	r21, Z+1	; 0x01
    1032:	24 ef       	ldi	r18, 0xF4	; 244
    1034:	31 e0       	ldi	r19, 0x01	; 1
    1036:	62 ee       	ldi	r22, 0xE2	; 226
    1038:	72 e0       	ldi	r23, 0x02	; 2
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1040:	64 e6       	ldi	r22, 0x64	; 100
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
    104c:	d8 01       	movw	r26, r16
    104e:	4d 91       	ld	r20, X+
    1050:	5c 91       	ld	r21, X
    1052:	24 ef       	ldi	r18, 0xF4	; 244
    1054:	31 e0       	ldi	r19, 0x01	; 1
    1056:	6f ed       	ldi	r22, 0xDF	; 223
    1058:	72 e0       	ldi	r23, 0x02	; 2
    105a:	ce 01       	movw	r24, r28
    105c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1060:	81 11       	cpse	r24, r1
    1062:	76 cf       	rjmp	.-276    	; 0xf50 <_ZN13Adafruit_FONA5beginEhh+0x13a>
    1064:	60 ec       	ldi	r22, 0xC0	; 192
    1066:	72 e0       	ldi	r23, 0x02	; 2
    1068:	83 ec       	ldi	r24, 0xC3	; 195
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <_ZN13Adafruit_FONA9HTTP_initEv>:
    1084:	fc 01       	movw	r30, r24
    1086:	e5 5e       	subi	r30, 0xE5	; 229
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	40 81       	ld	r20, Z
    108c:	51 81       	ldd	r21, Z+1	; 0x01
    108e:	24 ef       	ldi	r18, 0xF4	; 244
    1090:	31 e0       	ldi	r19, 0x01	; 1
    1092:	63 e7       	ldi	r22, 0x73	; 115
    1094:	71 e0       	ldi	r23, 0x01	; 1
    1096:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000109a <_ZN13Adafruit_FONA9HTTP_termEv>:
    109a:	fc 01       	movw	r30, r24
    109c:	e5 5e       	subi	r30, 0xE5	; 229
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	40 81       	ld	r20, Z
    10a2:	51 81       	ldd	r21, Z+1	; 0x01
    10a4:	24 ef       	ldi	r18, 0xF4	; 244
    10a6:	31 e0       	ldi	r19, 0x01	; 1
    10a8:	67 e6       	ldi	r22, 0x67	; 103
    10aa:	71 e0       	ldi	r23, 0x01	; 1
    10ac:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

000010b0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	ec 01       	movw	r28, r24
    10c2:	68 01       	movw	r12, r16
    10c4:	87 01       	movw	r16, r14
    10c6:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    10ca:	b6 01       	movw	r22, r12
    10cc:	ce 01       	movw	r24, r28
    10ce:	0f 96       	adiw	r24, 0x0f	; 15
    10d0:	0e 94 65 22 	call	0x44ca	; 0x44ca <strcmp_P>
    10d4:	21 e0       	ldi	r18, 0x01	; 1
    10d6:	89 2b       	or	r24, r25
    10d8:	09 f0       	breq	.+2      	; 0x10dc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	82 2f       	mov	r24, r18
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	08 95       	ret

000010f0 <_ZN13Adafruit_FONA8HTTP_sslEb>:
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	fc 01       	movw	r30, r24
    10fa:	e5 5e       	subi	r30, 0xE5	; 229
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	00 81       	ld	r16, Z
    1100:	11 81       	ldd	r17, Z+1	; 0x01
    1102:	26 2f       	mov	r18, r22
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	64 ef       	ldi	r22, 0xF4	; 244
    110c:	e6 2e       	mov	r14, r22
    110e:	ff 24       	eor	r15, r15
    1110:	f3 94       	inc	r15
    1112:	67 ec       	ldi	r22, 0xC7	; 199
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	08 95       	ret

00001124 <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	00 d0       	rcall	.+0      	; 0x1134 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x10>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x12>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x14>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	8c 01       	movw	r16, r24
    113e:	7b 01       	movw	r14, r22
    1140:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN13Adafruit_FONA9HTTP_termEv>
    1144:	c8 01       	movw	r24, r16
    1146:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN13Adafruit_FONA9HTTP_initEv>
    114a:	81 11       	cpse	r24, r1
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2e>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	3e c0       	rjmp	.+124    	; 0x11ce <_ZN13Adafruit_FONA10HTTP_setupEPc+0xaa>
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	6c ea       	ldi	r22, 0xAC	; 172
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	c8 01       	movw	r24, r16
    1160:	0e 94 6f 05 	call	0xade	; 0xade <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    1164:	88 23       	and	r24, r24
    1166:	99 f3       	breq	.-26     	; 0x114e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1168:	b8 01       	movw	r22, r16
    116a:	6b 5e       	subi	r22, 0xEB	; 235
    116c:	7e 4f       	sbci	r23, 0xFE	; 254
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <_ZN6StringC1ERKS_>
    1176:	ae 01       	movw	r20, r28
    1178:	4f 5f       	subi	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	69 ea       	ldi	r22, 0xA9	; 169
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1186:	d8 2e       	mov	r13, r24
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN6StringD1Ev>
    1190:	dd 20       	and	r13, r13
    1192:	e9 f2       	breq	.-70     	; 0x114e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1194:	a7 01       	movw	r20, r14
    1196:	65 ea       	ldi	r22, 0xA5	; 165
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 24 05 	call	0xa48	; 0xa48 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    11a0:	88 23       	and	r24, r24
    11a2:	a9 f2       	breq	.-86     	; 0x114e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    11a4:	f8 01       	movw	r30, r16
    11a6:	ec 5e       	subi	r30, 0xEC	; 236
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	90 81       	ld	r25, Z
    11ac:	99 23       	and	r25, r25
    11ae:	79 f0       	breq	.+30     	; 0x11ce <_ZN13Adafruit_FONA10HTTP_setupEPc+0xaa>
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	6f e9       	ldi	r22, 0x9F	; 159
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	c8 01       	movw	r24, r16
    11be:	0e 94 6f 05 	call	0xade	; 0xade <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    11c2:	88 23       	and	r24, r24
    11c4:	21 f2       	breq	.-120    	; 0x114e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	c8 01       	movw	r24, r16
    11ca:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN13Adafruit_FONA8HTTP_sslEb>
    11ce:	26 96       	adiw	r28, 0x06	; 6
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	08 95       	ret

000011ea <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	79 01       	movw	r14, r18
    11fa:	98 01       	movw	r18, r16
    11fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    1200:	b7 01       	movw	r22, r14
    1202:	ce 01       	movw	r24, r28
    1204:	0f 96       	adiw	r24, 0x0f	; 15
    1206:	0e 94 65 22 	call	0x44ca	; 0x44ca <strcmp_P>
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	89 2b       	or	r24, r25
    120e:	09 f0       	breq	.+2      	; 0x1212 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	82 2f       	mov	r24, r18
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	08 95       	ret

00001222 <_ZN13Adafruit_FONA10enableGPRSEb>:
    1222:	7f 92       	push	r7
    1224:	8f 92       	push	r8
    1226:	9f 92       	push	r9
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
    123e:	28 ee       	ldi	r18, 0xE8	; 232
    1240:	3d ef       	ldi	r19, 0xFD	; 253
    1242:	66 23       	and	r22, r22
    1244:	09 f4       	brne	.+2      	; 0x1248 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    1246:	1f c1       	rjmp	.+574    	; 0x1486 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    1248:	47 e5       	ldi	r20, 0x57	; 87
    124a:	52 e0       	ldi	r21, 0x02	; 2
    124c:	6c e4       	ldi	r22, 0x4C	; 76
    124e:	72 e0       	ldi	r23, 0x02	; 2
    1250:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1254:	81 11       	cpse	r24, r1
    1256:	03 c0       	rjmp	.+6      	; 0x125e <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	78 2e       	mov	r7, r24
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    125e:	77 24       	eor	r7, r7
    1260:	73 94       	inc	r7
    1262:	7e 01       	movw	r14, r28
    1264:	85 ee       	ldi	r24, 0xE5	; 229
    1266:	e8 1a       	sub	r14, r24
    1268:	8e ef       	ldi	r24, 0xFE	; 254
    126a:	f8 0a       	sbc	r15, r24
    126c:	f7 01       	movw	r30, r14
    126e:	40 81       	ld	r20, Z
    1270:	51 81       	ldd	r21, Z+1	; 0x01
    1272:	20 e1       	ldi	r18, 0x10	; 16
    1274:	37 e2       	ldi	r19, 0x27	; 39
    1276:	61 e4       	ldi	r22, 0x41	; 65
    1278:	72 e0       	ldi	r23, 0x02	; 2
    127a:	ce 01       	movw	r24, r28
    127c:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1280:	88 23       	and	r24, r24
    1282:	09 f4       	brne	.+2      	; 0x1286 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    1284:	25 c1       	rjmp	.+586    	; 0x14d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    1286:	f7 01       	movw	r30, r14
    1288:	40 81       	ld	r20, Z
    128a:	51 81       	ldd	r21, Z+1	; 0x01
    128c:	20 e1       	ldi	r18, 0x10	; 16
    128e:	37 e2       	ldi	r19, 0x27	; 39
    1290:	63 e2       	ldi	r22, 0x23	; 35
    1292:	72 e0       	ldi	r23, 0x02	; 2
    1294:	ce 01       	movw	r24, r28
    1296:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    129a:	88 23       	and	r24, r24
    129c:	09 f4       	brne	.+2      	; 0x12a0 <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    129e:	1a c1       	rjmp	.+564    	; 0x14d4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    12a0:	4e 01       	movw	r8, r28
    12a2:	f2 ef       	ldi	r31, 0xF2	; 242
    12a4:	8f 1a       	sub	r8, r31
    12a6:	fe ef       	ldi	r31, 0xFE	; 254
    12a8:	9f 0a       	sbc	r9, r31
    12aa:	f4 01       	movw	r30, r8
    12ac:	40 81       	ld	r20, Z
    12ae:	51 81       	ldd	r21, Z+1	; 0x01
    12b0:	41 15       	cp	r20, r1
    12b2:	51 05       	cpc	r21, r1
    12b4:	71 f4       	brne	.+28     	; 0x12d2 <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    12b6:	f7 01       	movw	r30, r14
    12b8:	40 81       	ld	r20, Z
    12ba:	51 81       	ldd	r21, Z+1	; 0x01
    12bc:	2f ef       	ldi	r18, 0xFF	; 255
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	6e eb       	ldi	r22, 0xBE	; 190
    12c2:	71 e0       	ldi	r23, 0x01	; 1
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12ca:	81 11       	cpse	r24, r1
    12cc:	ce c0       	rjmp	.+412    	; 0x146a <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    12ce:	89 e0       	ldi	r24, 0x09	; 9
    12d0:	0e c1       	rjmp	.+540    	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    12d2:	f7 01       	movw	r30, r14
    12d4:	20 81       	ld	r18, Z
    12d6:	31 81       	ldd	r19, Z+1	; 0x01
    12d8:	00 e1       	ldi	r16, 0x10	; 16
    12da:	17 e2       	ldi	r17, 0x27	; 39
    12dc:	6f e0       	ldi	r22, 0x0F	; 15
    12de:	72 e0       	ldi	r23, 0x02	; 2
    12e0:	ce 01       	movw	r24, r28
    12e2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    12ea:	f6 c0       	rjmp	.+492    	; 0x14d8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    12ec:	ce 01       	movw	r24, r28
    12ee:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN13Adafruit_FONA10flushInputEv>
    12f2:	8e 01       	movw	r16, r28
    12f4:	03 5e       	subi	r16, 0xE3	; 227
    12f6:	1e 4f       	sbci	r17, 0xFE	; 254
    12f8:	65 e0       	ldi	r22, 0x05	; 5
    12fa:	72 e0       	ldi	r23, 0x02	; 2
    12fc:	f8 01       	movw	r30, r16
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1306:	f4 01       	movw	r30, r8
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	f8 01       	movw	r30, r16
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1316:	5e 01       	movw	r10, r28
    1318:	f0 ef       	ldi	r31, 0xF0	; 240
    131a:	af 1a       	sub	r10, r31
    131c:	fe ef       	ldi	r31, 0xFE	; 254
    131e:	bf 0a       	sbc	r11, r31
    1320:	f5 01       	movw	r30, r10
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	89 2b       	or	r24, r25
    1328:	79 f0       	breq	.+30     	; 0x1348 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    132a:	65 e2       	ldi	r22, 0x25	; 37
    132c:	71 e0       	ldi	r23, 0x01	; 1
    132e:	f8 01       	movw	r30, r16
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    1338:	f5 01       	movw	r30, r10
    133a:	60 81       	ld	r22, Z
    133c:	71 81       	ldd	r23, Z+1	; 0x01
    133e:	f8 01       	movw	r30, r16
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1348:	6e 01       	movw	r12, r28
    134a:	fe ee       	ldi	r31, 0xEE	; 238
    134c:	cf 1a       	sub	r12, r31
    134e:	fe ef       	ldi	r31, 0xFE	; 254
    1350:	df 0a       	sbc	r13, r31
    1352:	f6 01       	movw	r30, r12
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	89 2b       	or	r24, r25
    135a:	79 f0       	breq	.+30     	; 0x137a <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    135c:	65 e2       	ldi	r22, 0x25	; 37
    135e:	71 e0       	ldi	r23, 0x01	; 1
    1360:	f8 01       	movw	r30, r16
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    136a:	f6 01       	movw	r30, r12
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	f8 01       	movw	r30, r16
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    137a:	67 e2       	ldi	r22, 0x27	; 39
    137c:	71 e0       	ldi	r23, 0x01	; 1
    137e:	f8 01       	movw	r30, r16
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
    1388:	6e ef       	ldi	r22, 0xFE	; 254
    138a:	71 e0       	ldi	r23, 0x01	; 1
    138c:	83 ec       	ldi	r24, 0xC3	; 195
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1394:	64 ef       	ldi	r22, 0xF4	; 244
    1396:	71 e0       	ldi	r23, 0x01	; 1
    1398:	83 ec       	ldi	r24, 0xC3	; 195
    139a:	93 e0       	ldi	r25, 0x03	; 3
    139c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    13a0:	f4 01       	movw	r30, r8
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	83 ec       	ldi	r24, 0xC3	; 195
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    13ae:	f5 01       	movw	r30, r10
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	89 2b       	or	r24, r25
    13b6:	69 f0       	breq	.+26     	; 0x13d2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    13b8:	65 e2       	ldi	r22, 0x25	; 37
    13ba:	71 e0       	ldi	r23, 0x01	; 1
    13bc:	83 ec       	ldi	r24, 0xC3	; 195
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    13c4:	f5 01       	movw	r30, r10
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	83 ec       	ldi	r24, 0xC3	; 195
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    13d2:	f6 01       	movw	r30, r12
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	89 2b       	or	r24, r25
    13da:	69 f0       	breq	.+26     	; 0x13f6 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    13dc:	65 e2       	ldi	r22, 0x25	; 37
    13de:	71 e0       	ldi	r23, 0x01	; 1
    13e0:	83 ec       	ldi	r24, 0xC3	; 195
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    13e8:	f6 01       	movw	r30, r12
    13ea:	60 81       	ld	r22, Z
    13ec:	71 81       	ldd	r23, Z+1	; 0x01
    13ee:	83 ec       	ldi	r24, 0xC3	; 195
    13f0:	93 e0       	ldi	r25, 0x03	; 3
    13f2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    13f6:	67 e2       	ldi	r22, 0x27	; 39
    13f8:	71 e0       	ldi	r23, 0x01	; 1
    13fa:	83 ec       	ldi	r24, 0xC3	; 195
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
    1402:	f7 01       	movw	r30, r14
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	40 e1       	ldi	r20, 0x10	; 16
    140a:	57 e2       	ldi	r21, 0x27	; 39
    140c:	ce 01       	movw	r24, r28
    140e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    1416:	62 c0       	rjmp	.+196    	; 0x14dc <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    1418:	f5 01       	movw	r30, r10
    141a:	40 81       	ld	r20, Z
    141c:	51 81       	ldd	r21, Z+1	; 0x01
    141e:	41 15       	cp	r20, r1
    1420:	51 05       	cpc	r21, r1
    1422:	39 f4       	brne	.+14     	; 0x1432 <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    1424:	f6 01       	movw	r30, r12
    1426:	40 81       	ld	r20, Z
    1428:	51 81       	ldd	r21, Z+1	; 0x01
    142a:	41 15       	cp	r20, r1
    142c:	51 05       	cpc	r21, r1
    142e:	79 f4       	brne	.+30     	; 0x144e <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    1430:	42 cf       	rjmp	.-380    	; 0x12b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1432:	f7 01       	movw	r30, r14
    1434:	20 81       	ld	r18, Z
    1436:	31 81       	ldd	r19, Z+1	; 0x01
    1438:	00 e1       	ldi	r16, 0x10	; 16
    143a:	17 e2       	ldi	r17, 0x27	; 39
    143c:	6f ed       	ldi	r22, 0xDF	; 223
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	ce 01       	movw	r24, r28
    1442:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1446:	81 11       	cpse	r24, r1
    1448:	ed cf       	rjmp	.-38     	; 0x1424 <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    144a:	87 e0       	ldi	r24, 0x07	; 7
    144c:	50 c0       	rjmp	.+160    	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    144e:	f7 01       	movw	r30, r14
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	00 e1       	ldi	r16, 0x10	; 16
    1456:	17 e2       	ldi	r17, 0x27	; 39
    1458:	6b ec       	ldi	r22, 0xCB	; 203
    145a:	71 e0       	ldi	r23, 0x01	; 1
    145c:	ce 01       	movw	r24, r28
    145e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1462:	81 11       	cpse	r24, r1
    1464:	28 cf       	rjmp	.-432    	; 0x12b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1466:	88 e0       	ldi	r24, 0x08	; 8
    1468:	42 c0       	rjmp	.+132    	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    146a:	f7 01       	movw	r30, r14
    146c:	40 81       	ld	r20, Z
    146e:	51 81       	ldd	r21, Z+1	; 0x01
    1470:	2f ef       	ldi	r18, 0xFF	; 255
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	65 eb       	ldi	r22, 0xB5	; 181
    1476:	71 e0       	ldi	r23, 0x01	; 1
    1478:	ce 01       	movw	r24, r28
    147a:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    147e:	88 23       	and	r24, r24
    1480:	79 f1       	breq	.+94     	; 0x14e0 <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    1482:	87 2d       	mov	r24, r7
    1484:	34 c0       	rjmp	.+104    	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1486:	4d ea       	ldi	r20, 0xAD	; 173
    1488:	51 e0       	ldi	r21, 0x01	; 1
    148a:	62 ea       	ldi	r22, 0xA2	; 162
    148c:	71 e0       	ldi	r23, 0x01	; 1
    148e:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1492:	88 23       	and	r24, r24
    1494:	39 f1       	breq	.+78     	; 0x14e4 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    1496:	8e 01       	movw	r16, r28
    1498:	05 5e       	subi	r16, 0xE5	; 229
    149a:	1e 4f       	sbci	r17, 0xFE	; 254
    149c:	f8 01       	movw	r30, r16
    149e:	40 81       	ld	r20, Z
    14a0:	51 81       	ldd	r21, Z+1	; 0x01
    14a2:	20 e1       	ldi	r18, 0x10	; 16
    14a4:	37 e2       	ldi	r19, 0x27	; 39
    14a6:	65 e9       	ldi	r22, 0x95	; 149
    14a8:	71 e0       	ldi	r23, 0x01	; 1
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14b0:	88 23       	and	r24, r24
    14b2:	d1 f0       	breq	.+52     	; 0x14e8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    14b4:	f8 01       	movw	r30, r16
    14b6:	40 81       	ld	r20, Z
    14b8:	51 81       	ldd	r21, Z+1	; 0x01
    14ba:	20 e1       	ldi	r18, 0x10	; 16
    14bc:	37 e2       	ldi	r19, 0x27	; 39
    14be:	6a e8       	ldi	r22, 0x8A	; 138
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	ce 01       	movw	r24, r28
    14c4:	0e 94 f1 06 	call	0xde2	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14c8:	88 23       	and	r24, r24
    14ca:	81 f0       	breq	.+32     	; 0x14ec <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	0d c0       	rjmp	.+26     	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	0b c0       	rjmp	.+22     	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14d8:	85 e0       	ldi	r24, 0x05	; 5
    14da:	09 c0       	rjmp	.+18     	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14dc:	86 e0       	ldi	r24, 0x06	; 6
    14de:	07 c0       	rjmp	.+14     	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14e0:	8a e0       	ldi	r24, 0x0A	; 10
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14e4:	8b e0       	ldi	r24, 0x0B	; 11
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14e8:	8c e0       	ldi	r24, 0x0C	; 12
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ec:	8d e0       	ldi	r24, 0x0D	; 13
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	7f 90       	pop	r7
    1508:	08 95       	ret

0000150a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    150a:	af 92       	push	r10
    150c:	bf 92       	push	r11
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	5b 01       	movw	r10, r22
    151e:	6a 01       	movw	r12, r20
    1520:	e2 2e       	mov	r14, r18
    1522:	0f 96       	adiw	r24, 0x0f	; 15
    1524:	0e 94 77 22 	call	0x44ee	; 0x44ee <strstr_P>
    1528:	ec 01       	movw	r28, r24
    152a:	89 2b       	or	r24, r25
    152c:	c1 f0       	breq	.+48     	; 0x155e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    152e:	c5 01       	movw	r24, r10
    1530:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__strlen_P>
    1534:	8c 0f       	add	r24, r28
    1536:	9d 1f       	adc	r25, r29
    1538:	c0 e0       	ldi	r28, 0x00	; 0
    153a:	f1 2c       	mov	r15, r1
    153c:	c0 17       	cp	r28, r16
    153e:	41 f0       	breq	.+16     	; 0x1550 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    1540:	b7 01       	movw	r22, r14
    1542:	0e 94 9a 22 	call	0x4534	; 0x4534 <strchr>
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	51 f0       	breq	.+20     	; 0x155e <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	cf 5f       	subi	r28, 0xFF	; 255
    154e:	f6 cf       	rjmp	.-20     	; 0x153c <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    1550:	0e 94 47 22 	call	0x448e	; 0x448e <atoi>
    1554:	f6 01       	movw	r30, r12
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	08 95       	ret

00001574 <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
    1580:	7b 01       	movw	r14, r22
    1582:	44 ef       	ldi	r20, 0xF4	; 244
    1584:	51 e0       	ldi	r21, 0x01	; 1
    1586:	6e ed       	ldi	r22, 0xDE	; 222
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	2c e2       	ldi	r18, 0x2C	; 44
    1592:	a7 01       	movw	r20, r14
    1594:	63 ed       	ldi	r22, 0xD3	; 211
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	ce 01       	movw	r24, r28
    159a:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	08 95       	ret

000015aa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    15aa:	4f 92       	push	r4
    15ac:	5f 92       	push	r5
    15ae:	6f 92       	push	r6
    15b0:	7f 92       	push	r7
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	ec 01       	movw	r28, r24
    15c8:	5a 01       	movw	r10, r20
    15ca:	69 01       	movw	r12, r18
    15cc:	27 01       	movw	r4, r14
    15ce:	38 01       	movw	r6, r16
    15d0:	fc 01       	movw	r30, r24
    15d2:	e5 5e       	subi	r30, 0xE5	; 229
    15d4:	fe 4f       	sbci	r31, 0xFE	; 254
    15d6:	00 81       	ld	r16, Z
    15d8:	11 81       	ldd	r17, Z+1	; 0x01
    15da:	26 2f       	mov	r18, r22
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	84 ef       	ldi	r24, 0xF4	; 244
    15e4:	e8 2e       	mov	r14, r24
    15e6:	ff 24       	eor	r15, r15
    15e8:	f3 94       	inc	r15
    15ea:	64 e0       	ldi	r22, 0x04	; 4
    15ec:	71 e0       	ldi	r23, 0x01	; 1
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    15f4:	81 11       	cpse	r24, r1
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	b2 01       	movw	r22, r4
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
    1606:	01 e0       	ldi	r16, 0x01	; 1
    1608:	2c e2       	ldi	r18, 0x2C	; 44
    160a:	a5 01       	movw	r20, r10
    160c:	67 ef       	ldi	r22, 0xF7	; 247
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1616:	88 23       	and	r24, r24
    1618:	79 f3       	breq	.-34     	; 0x15f8 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    161a:	02 e0       	ldi	r16, 0x02	; 2
    161c:	2c e2       	ldi	r18, 0x2C	; 44
    161e:	a6 01       	movw	r20, r12
    1620:	6a ee       	ldi	r22, 0xEA	; 234
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	ce 01       	movw	r24, r28
    1626:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	7f 90       	pop	r7
    1640:	6f 90       	pop	r6
    1642:	5f 90       	pop	r5
    1644:	4f 90       	pop	r4
    1646:	08 95       	ret

00001648 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    1648:	4f 92       	push	r4
    164a:	5f 92       	push	r5
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	2a 01       	movw	r4, r20
    166c:	39 01       	movw	r6, r18
    166e:	48 01       	movw	r8, r16
    1670:	57 01       	movw	r10, r14
    1672:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN13Adafruit_FONA10HTTP_setupEPc>
    1676:	88 23       	and	r24, r24
    1678:	09 f4       	brne	.+2      	; 0x167c <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    167a:	71 c0       	rjmp	.+226    	; 0x175e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    167c:	a2 01       	movw	r20, r4
    167e:	6f eb       	ldi	r22, 0xBF	; 191
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	ce 01       	movw	r24, r28
    1684:	0e 94 56 05 	call	0xaac	; 0xaac <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1688:	88 23       	and	r24, r24
    168a:	09 f4       	brne	.+2      	; 0x168e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    168c:	68 c0       	rjmp	.+208    	; 0x175e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    168e:	a8 01       	movw	r20, r16
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	00 e1       	ldi	r16, 0x10	; 16
    1696:	17 e2       	ldi	r17, 0x27	; 39
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	ce 01       	movw	r24, r28
    169e:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN13Adafruit_FONA9HTTP_dataEmm>
    16a2:	88 23       	and	r24, r24
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    16a6:	5b c0       	rjmp	.+182    	; 0x175e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    16a8:	fe 01       	movw	r30, r28
    16aa:	e3 5e       	subi	r30, 0xE3	; 227
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	dc 01       	movw	r26, r24
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	02 80       	ldd	r0, Z+2	; 0x02
    16ba:	f3 81       	ldd	r31, Z+3	; 0x03
    16bc:	e0 2d       	mov	r30, r0
    16be:	a4 01       	movw	r20, r8
    16c0:	b3 01       	movw	r22, r6
    16c2:	09 95       	icall
    16c4:	fe 01       	movw	r30, r28
    16c6:	e5 5e       	subi	r30, 0xE5	; 229
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	40 e1       	ldi	r20, 0x10	; 16
    16d0:	57 e2       	ldi	r21, 0x27	; 39
    16d2:	ce 01       	movw	r24, r28
    16d4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    16d8:	88 23       	and	r24, r24
    16da:	09 f4       	brne	.+2      	; 0x16de <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    16dc:	40 c0       	rjmp	.+128    	; 0x175e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    16de:	10 e1       	ldi	r17, 0x10	; 16
    16e0:	e1 2e       	mov	r14, r17
    16e2:	17 e2       	ldi	r17, 0x27	; 39
    16e4:	f1 2e       	mov	r15, r17
    16e6:	00 e0       	ldi	r16, 0x00	; 0
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	96 01       	movw	r18, r12
    16ec:	a5 01       	movw	r20, r10
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	ce 01       	movw	r24, r28
    16f2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    16f6:	88 23       	and	r24, r24
    16f8:	91 f1       	breq	.+100    	; 0x175e <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    16fa:	66 eb       	ldi	r22, 0xB6	; 182
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	83 ec       	ldi	r24, 0xC3	; 195
    1700:	93 e0       	ldi	r25, 0x03	; 3
    1702:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1706:	f5 01       	movw	r30, r10
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	4a e0       	ldi	r20, 0x0A	; 10
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	83 ec       	ldi	r24, 0xC3	; 195
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <_ZN5Print7printlnEji>
    1718:	60 eb       	ldi	r22, 0xB0	; 176
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	83 ec       	ldi	r24, 0xC3	; 195
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1724:	d6 01       	movw	r26, r12
    1726:	6d 91       	ld	r22, X+
    1728:	7c 91       	ld	r23, X
    172a:	4a e0       	ldi	r20, 0x0A	; 10
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	83 ec       	ldi	r24, 0xC3	; 195
    1730:	93 e0       	ldi	r25, 0x03	; 3
    1732:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <_ZN5Print7printlnEji>
    1736:	b6 01       	movw	r22, r12
    1738:	ce 01       	movw	r24, r28
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	7f 90       	pop	r7
    1754:	6f 90       	pop	r6
    1756:	5f 90       	pop	r5
    1758:	4f 90       	pop	r4
    175a:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <_ZN13Adafruit_FONA12HTTP_readallEPj>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	df 90       	pop	r13
    176e:	cf 90       	pop	r12
    1770:	bf 90       	pop	r11
    1772:	af 90       	pop	r10
    1774:	9f 90       	pop	r9
    1776:	8f 90       	pop	r8
    1778:	7f 90       	pop	r7
    177a:	6f 90       	pop	r6
    177c:	5f 90       	pop	r5
    177e:	4f 90       	pop	r4
    1780:	08 95       	ret

00001782 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>:
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	a2 97       	sbiw	r28, 0x22	; 34
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	5c 01       	movw	r10, r24
    17ac:	4a 01       	movw	r8, r20
    17ae:	80 e2       	ldi	r24, 0x20	; 32
    17b0:	e1 e3       	ldi	r30, 0x31	; 49
    17b2:	f1 e0       	ldi	r31, 0x01	; 1
    17b4:	de 01       	movw	r26, r28
    17b6:	11 96       	adiw	r26, 0x01	; 1
    17b8:	01 90       	ld	r0, Z+
    17ba:	0d 92       	st	X+, r0
    17bc:	8a 95       	dec	r24
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x36>
    17c0:	ce 01       	movw	r24, r28
    17c2:	81 96       	adiw	r24, 0x21	; 33
    17c4:	6c 01       	movw	r12, r24
    17c6:	79 01       	movw	r14, r18
    17c8:	8a 01       	movw	r16, r20
    17ca:	9b 01       	movw	r18, r22
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	51 e0       	ldi	r21, 0x01	; 1
    17d0:	be 01       	movw	r22, r28
    17d2:	6f 5f       	subi	r22, 0xFF	; 255
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	c5 01       	movw	r24, r10
    17d8:	0e 94 24 0b 	call	0x1648	; 0x1648 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
    17dc:	81 11       	cpse	r24, r1
    17de:	23 c0       	rjmp	.+70     	; 0x1826 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    17e0:	69 e2       	ldi	r22, 0x29	; 41
    17e2:	71 e0       	ldi	r23, 0x01	; 1
    17e4:	83 ec       	ldi	r24, 0xC3	; 195
    17e6:	93 e0       	ldi	r25, 0x03	; 3
    17e8:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
    17ec:	22 c0       	rjmp	.+68     	; 0x1832 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb0>
    17ee:	d5 01       	movw	r26, r10
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	04 80       	ldd	r0, Z+4	; 0x04
    17f6:	f5 81       	ldd	r31, Z+5	; 0x05
    17f8:	e0 2d       	mov	r30, r0
    17fa:	c5 01       	movw	r24, r10
    17fc:	09 95       	icall
    17fe:	89 2b       	or	r24, r25
    1800:	91 f0       	breq	.+36     	; 0x1826 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    1802:	d5 01       	movw	r26, r10
    1804:	ed 91       	ld	r30, X+
    1806:	fc 91       	ld	r31, X
    1808:	06 80       	ldd	r0, Z+6	; 0x06
    180a:	f7 81       	ldd	r31, Z+7	; 0x07
    180c:	e0 2d       	mov	r30, r0
    180e:	c5 01       	movw	r24, r10
    1810:	09 95       	icall
    1812:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1816:	95 ff       	sbrs	r25, 5
    1818:	fc cf       	rjmp	.-8      	; 0x1812 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x90>
    181a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    181e:	b1 e0       	ldi	r27, 0x01	; 1
    1820:	8b 1a       	sub	r8, r27
    1822:	91 08       	sbc	r9, r1
    1824:	21 f7       	brne	.-56     	; 0x17ee <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x6c>
    1826:	81 14       	cp	r8, r1
    1828:	91 04       	cpc	r9, r1
    182a:	09 f7       	brne	.-62     	; 0x17ee <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x6c>
    182c:	c5 01       	movw	r24, r10
    182e:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN13Adafruit_FONA9HTTP_termEv>
    1832:	a2 96       	adiw	r28, 0x22	; 34
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	08 95       	ret

00001858 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	6a 01       	movw	r12, r20
    186e:	59 01       	movw	r10, r18
    1870:	10 2f       	mov	r17, r16
    1872:	0e 2d       	mov	r16, r14
    1874:	44 ef       	ldi	r20, 0xF4	; 244
    1876:	51 e0       	ldi	r21, 0x01	; 1
    1878:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    187c:	21 2f       	mov	r18, r17
    187e:	a5 01       	movw	r20, r10
    1880:	b6 01       	movw	r22, r12
    1882:	ce 01       	movw	r24, r28
    1884:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1888:	18 2f       	mov	r17, r24
    188a:	88 23       	and	r24, r24
    188c:	31 f0       	breq	.+12     	; 0x189a <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	64 ef       	ldi	r22, 0xF4	; 244
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 80 04 	call	0x900	; 0x900 <_ZN13Adafruit_FONA8readlineEjb>
    189a:	81 2f       	mov	r24, r17
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	08 95       	ret

000018b0 <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	28 97       	sbiw	r28, 0x08	; 8
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    18d2:	18 86       	std	Y+8, r1	; 0x08
    18d4:	1f 82       	std	Y+7, r1	; 0x07
    18d6:	1e 82       	std	Y+6, r1	; 0x06
    18d8:	1d 82       	std	Y+5, r1	; 0x05
    18da:	1c 82       	std	Y+4, r1	; 0x04
    18dc:	1b 82       	std	Y+3, r1	; 0x03
    18de:	1a 82       	std	Y+2, r1	; 0x02
    18e0:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    18e2:	e1 2c       	mov	r14, r1
    18e4:	0c e2       	ldi	r16, 0x2C	; 44
    18e6:	9e 01       	movw	r18, r28
    18e8:	29 5f       	subi	r18, 0xF9	; 249
    18ea:	3f 4f       	sbci	r19, 0xFF	; 255
    18ec:	46 e9       	ldi	r20, 0x96	; 150
    18ee:	52 e0       	ldi	r21, 0x02	; 2
    18f0:	6f e8       	ldi	r22, 0x8F	; 143
    18f2:	72 e0       	ldi	r23, 0x02	; 2
    18f4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    18f8:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    18fa:	ee 24       	eor	r14, r14
    18fc:	e3 94       	inc	r14
    18fe:	9e 01       	movw	r18, r28
    1900:	2b 5f       	subi	r18, 0xFB	; 251
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	48 e8       	ldi	r20, 0x88	; 136
    1906:	52 e0       	ldi	r21, 0x02	; 2
    1908:	61 e8       	ldi	r22, 0x81	; 129
    190a:	72 e0       	ldi	r23, 0x02	; 2
    190c:	c6 01       	movw	r24, r12
    190e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1912:	88 23       	and	r24, r24
    1914:	19 f0       	breq	.+6      	; 0x191c <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	f8 26       	eor	r15, r24
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    191c:	ff 24       	eor	r15, r15
    191e:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    1920:	e1 2c       	mov	r14, r1
    1922:	0c e2       	ldi	r16, 0x2C	; 44
    1924:	9e 01       	movw	r18, r28
    1926:	2d 5f       	subi	r18, 0xFD	; 253
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	49 e7       	ldi	r20, 0x79	; 121
    192c:	52 e0       	ldi	r21, 0x02	; 2
    192e:	60 e7       	ldi	r22, 0x70	; 112
    1930:	72 e0       	ldi	r23, 0x02	; 2
    1932:	c6 01       	movw	r24, r12
    1934:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1938:	88 23       	and	r24, r24
    193a:	11 f0       	breq	.+4      	; 0x1940 <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    193c:	1b 81       	ldd	r17, Y+3	; 0x03
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1940:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    1942:	ee 24       	eor	r14, r14
    1944:	e3 94       	inc	r14
    1946:	0c e2       	ldi	r16, 0x2C	; 44
    1948:	9e 01       	movw	r18, r28
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	48 e6       	ldi	r20, 0x68	; 104
    1950:	52 e0       	ldi	r21, 0x02	; 2
    1952:	6f e5       	ldi	r22, 0x5F	; 95
    1954:	72 e0       	ldi	r23, 0x02	; 2
    1956:	c6 01       	movw	r24, r12
    1958:	0e 94 2c 0c 	call	0x1858	; 0x1858 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    195c:	81 11       	cpse	r24, r1
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    1960:	91 2f       	mov	r25, r17
    1962:	90 62       	ori	r25, 0x20	; 32
    1964:	02 c0       	rjmp	.+4      	; 0x196a <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1966:	99 81       	ldd	r25, Y+1	; 0x01
    1968:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    196a:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    196c:	6f 81       	ldd	r22, Y+7	; 0x07
}
    196e:	8f 2d       	mov	r24, r15
    1970:	28 96       	adiw	r28, 0x08	; 8
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	08 95       	ret

0000198e <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    198e:	fc 01       	movw	r30, r24
    1990:	10 82       	st	Z, r1
    1992:	12 82       	std	Z+2, r1	; 0x02
    1994:	11 82       	std	Z+1, r1	; 0x01
    1996:	13 82       	std	Z+3, r1	; 0x03
    1998:	14 82       	std	Z+4, r1	; 0x04
    199a:	15 82       	std	Z+5, r1	; 0x05
    199c:	16 82       	std	Z+6, r1	; 0x06
    199e:	17 82       	std	Z+7, r1	; 0x07
    19a0:	12 86       	std	Z+10, r1	; 0x0a
    19a2:	11 86       	std	Z+9, r1	; 0x09
    19a4:	14 86       	std	Z+12, r1	; 0x0c
    19a6:	13 86       	std	Z+11, r1	; 0x0b
    19a8:	08 95       	ret

000019aa <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    19aa:	2a e0       	ldi	r18, 0x0A	; 10
    19ac:	82 9f       	mul	r24, r18
    19ae:	c0 01       	movw	r24, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	09 96       	adiw	r24, 0x09	; 9
    19b4:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <_ZN7Helpers14base64_enc_lenEi>

000019b8 <_ZN10GsmPayload16createRawPayloadEPh>:
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	ec 01       	movw	r28, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	29 e0       	ldi	r18, 0x09	; 9
    19c2:	fe 01       	movw	r30, r28
    19c4:	db 01       	movw	r26, r22
    19c6:	01 90       	ld	r0, Z+
    19c8:	0d 92       	st	X+, r0
    19ca:	2a 95       	dec	r18
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    19ce:	4b 81       	ldd	r20, Y+3	; 0x03
    19d0:	2a e0       	ldi	r18, 0x0A	; 10
    19d2:	42 9f       	mul	r20, r18
    19d4:	a0 01       	movw	r20, r0
    19d6:	11 24       	eor	r1, r1
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	09 96       	adiw	r24, 0x09	; 9
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	0c 94 91 22 	jmp	0x4522	; 0x4522 <memcpy>

000019e6 <_ZN10GsmPayload20createEncodedPayloadEPc>:
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	6b 01       	movw	r12, r22
    1a00:	ed b6       	in	r14, 0x3d	; 61
    1a02:	fe b6       	in	r15, 0x3e	; 62
    1a04:	fc 01       	movw	r30, r24
    1a06:	03 81       	ldd	r16, Z+3	; 0x03
    1a08:	fa e0       	ldi	r31, 0x0A	; 10
    1a0a:	0f 9f       	mul	r16, r31
    1a0c:	80 01       	movw	r16, r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	07 5f       	subi	r16, 0xF7	; 247
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	2d b7       	in	r18, 0x3d	; 61
    1a16:	3e b7       	in	r19, 0x3e	; 62
    1a18:	20 1b       	sub	r18, r16
    1a1a:	31 0b       	sbc	r19, r17
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	3e bf       	out	0x3e, r19	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	2d bf       	out	0x3d, r18	; 61
    1a26:	ed b7       	in	r30, 0x3d	; 61
    1a28:	fe b7       	in	r31, 0x3e	; 62
    1a2a:	31 96       	adiw	r30, 0x01	; 1
    1a2c:	5f 01       	movw	r10, r30
    1a2e:	bf 01       	movw	r22, r30
    1a30:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN10GsmPayload16createRawPayloadEPh>
    1a34:	a8 01       	movw	r20, r16
    1a36:	b5 01       	movw	r22, r10
    1a38:	c6 01       	movw	r24, r12
    1a3a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN7Helpers13base64_encodeEPcPhi>
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	fe be       	out	0x3e, r15	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	ed be       	out	0x3d, r14	; 61
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	bf 90       	pop	r11
    1a5a:	af 90       	pop	r10
    1a5c:	08 95       	ret

00001a5e <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1a5e:	fc 01       	movw	r30, r24
    1a60:	74 87       	std	Z+12, r23	; 0x0c
    1a62:	63 87       	std	Z+11, r22	; 0x0b
    1a64:	43 83       	std	Z+3, r20	; 0x03
    1a66:	08 95       	ret

00001a68 <_ZN10GsmPayload11setModuleIdEh>:
    1a68:	fc 01       	movw	r30, r24
    1a6a:	60 83       	st	Z, r22
    1a6c:	08 95       	ret

00001a6e <_ZN10GsmPayload13setBootNumberEj>:
    1a6e:	fc 01       	movw	r30, r24
    1a70:	72 83       	std	Z+2, r23	; 0x02
    1a72:	61 83       	std	Z+1, r22	; 0x01
    1a74:	08 95       	ret

00001a76 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1a76:	fc 01       	movw	r30, r24
    1a78:	45 83       	std	Z+5, r20	; 0x05
    1a7a:	56 83       	std	Z+6, r21	; 0x06
    1a7c:	67 83       	std	Z+7, r22	; 0x07
    1a7e:	70 87       	std	Z+8, r23	; 0x08
    1a80:	08 95       	ret

00001a82 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	ec 01       	movw	r28, r24
    1a88:	67 e9       	ldi	r22, 0x97	; 151
    1a8a:	73 e0       	ldi	r23, 0x03	; 3
    1a8c:	83 ec       	ldi	r24, 0xC3	; 195
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1a94:	4a e0       	ldi	r20, 0x0A	; 10
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	68 81       	ld	r22, Y
    1a9a:	83 ec       	ldi	r24, 0xC3	; 195
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print5printEhi>
    1aa2:	63 e9       	ldi	r22, 0x93	; 147
    1aa4:	73 e0       	ldi	r23, 0x03	; 3
    1aa6:	83 ec       	ldi	r24, 0xC3	; 195
    1aa8:	93 e0       	ldi	r25, 0x03	; 3
    1aaa:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1aae:	6e e8       	ldi	r22, 0x8E	; 142
    1ab0:	73 e0       	ldi	r23, 0x03	; 3
    1ab2:	83 ec       	ldi	r24, 0xC3	; 195
    1ab4:	93 e0       	ldi	r25, 0x03	; 3
    1ab6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1aba:	4a e0       	ldi	r20, 0x0A	; 10
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	69 81       	ldd	r22, Y+1	; 0x01
    1ac0:	83 ec       	ldi	r24, 0xC3	; 195
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print5printEhi>
    1ac8:	6a e8       	ldi	r22, 0x8A	; 138
    1aca:	73 e0       	ldi	r23, 0x03	; 3
    1acc:	83 ec       	ldi	r24, 0xC3	; 195
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1ad4:	65 e7       	ldi	r22, 0x75	; 117
    1ad6:	73 e0       	ldi	r23, 0x03	; 3
    1ad8:	83 ec       	ldi	r24, 0xC3	; 195
    1ada:	93 e0       	ldi	r25, 0x03	; 3
    1adc:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1ae0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ae2:	63 70       	andi	r22, 0x03	; 3
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	4a e0       	ldi	r20, 0x0A	; 10
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	83 ec       	ldi	r24, 0xC3	; 195
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN5Print5printEii>
    1af2:	6b e6       	ldi	r22, 0x6B	; 107
    1af4:	73 e0       	ldi	r23, 0x03	; 3
    1af6:	83 ec       	ldi	r24, 0xC3	; 195
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1afe:	6b 81       	ldd	r22, Y+3	; 0x03
    1b00:	6c 71       	andi	r22, 0x1C	; 28
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	75 95       	asr	r23
    1b06:	67 95       	ror	r22
    1b08:	75 95       	asr	r23
    1b0a:	67 95       	ror	r22
    1b0c:	4a e0       	ldi	r20, 0x0A	; 10
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	83 ec       	ldi	r24, 0xC3	; 195
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN5Print5printEii>
    1b18:	62 e6       	ldi	r22, 0x62	; 98
    1b1a:	73 e0       	ldi	r23, 0x03	; 3
    1b1c:	83 ec       	ldi	r24, 0xC3	; 195
    1b1e:	93 e0       	ldi	r25, 0x03	; 3
    1b20:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b24:	6b 81       	ldd	r22, Y+3	; 0x03
    1b26:	65 fb       	bst	r22, 5
    1b28:	66 27       	eor	r22, r22
    1b2a:	60 f9       	bld	r22, 0
    1b2c:	4a e0       	ldi	r20, 0x0A	; 10
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	83 ec       	ldi	r24, 0xC3	; 195
    1b34:	93 e0       	ldi	r25, 0x03	; 3
    1b36:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN5Print5printEii>
    1b3a:	6e e5       	ldi	r22, 0x5E	; 94
    1b3c:	73 e0       	ldi	r23, 0x03	; 3
    1b3e:	83 ec       	ldi	r24, 0xC3	; 195
    1b40:	93 e0       	ldi	r25, 0x03	; 3
    1b42:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b46:	61 e5       	ldi	r22, 0x51	; 81
    1b48:	73 e0       	ldi	r23, 0x03	; 3
    1b4a:	83 ec       	ldi	r24, 0xC3	; 195
    1b4c:	93 e0       	ldi	r25, 0x03	; 3
    1b4e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b52:	4a e0       	ldi	r20, 0x0A	; 10
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	6a 81       	ldd	r22, Y+2	; 0x02
    1b58:	83 ec       	ldi	r24, 0xC3	; 195
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <_ZN5Print7printlnEhi>

00001b64 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1b64:	fc 01       	movw	r30, r24
    1b66:	22 81       	ldd	r18, Z+2	; 0x02
    1b68:	21 11       	cpse	r18, r1
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1b6c:	90 81       	ld	r25, Z
    1b6e:	93 36       	cpi	r25, 0x63	; 99
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	97 30       	cpi	r25, 0x07	; 7
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	08 95       	ret

00001b7c <_ZN7Helpers15printSensorDataEP10SensorData>:
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	ec 01       	movw	r28, r24
    1b82:	69 e4       	ldi	r22, 0x49	; 73
    1b84:	73 e0       	ldi	r23, 0x03	; 3
    1b86:	83 ec       	ldi	r24, 0xC3	; 195
    1b88:	93 e0       	ldi	r25, 0x03	; 3
    1b8a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1b8e:	69 81       	ldd	r22, Y+1	; 0x01
    1b90:	7a 81       	ldd	r23, Y+2	; 0x02
    1b92:	4a e0       	ldi	r20, 0x0A	; 10
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	83 ec       	ldi	r24, 0xC3	; 195
    1b98:	93 e0       	ldi	r25, 0x03	; 3
    1b9a:	0e 94 4e 1a 	call	0x349c	; 0x349c <_ZN5Print5printEji>
    1b9e:	65 e4       	ldi	r22, 0x45	; 69
    1ba0:	73 e0       	ldi	r23, 0x03	; 3
    1ba2:	83 ec       	ldi	r24, 0xC3	; 195
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1baa:	6f e3       	ldi	r22, 0x3F	; 63
    1bac:	73 e0       	ldi	r23, 0x03	; 3
    1bae:	83 ec       	ldi	r24, 0xC3	; 195
    1bb0:	93 e0       	ldi	r25, 0x03	; 3
    1bb2:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bb6:	6b 81       	ldd	r22, Y+3	; 0x03
    1bb8:	7c 81       	ldd	r23, Y+4	; 0x04
    1bba:	4a e0       	ldi	r20, 0x0A	; 10
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	83 ec       	ldi	r24, 0xC3	; 195
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	0e 94 4e 1a 	call	0x349c	; 0x349c <_ZN5Print5printEji>
    1bc6:	6b e3       	ldi	r22, 0x3B	; 59
    1bc8:	73 e0       	ldi	r23, 0x03	; 3
    1bca:	83 ec       	ldi	r24, 0xC3	; 195
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bd2:	62 e3       	ldi	r22, 0x32	; 50
    1bd4:	73 e0       	ldi	r23, 0x03	; 3
    1bd6:	83 ec       	ldi	r24, 0xC3	; 195
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bde:	6d 81       	ldd	r22, Y+5	; 0x05
    1be0:	7e 81       	ldd	r23, Y+6	; 0x06
    1be2:	4a e0       	ldi	r20, 0x0A	; 10
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	83 ec       	ldi	r24, 0xC3	; 195
    1be8:	93 e0       	ldi	r25, 0x03	; 3
    1bea:	0e 94 4e 1a 	call	0x349c	; 0x349c <_ZN5Print5printEji>
    1bee:	6e e2       	ldi	r22, 0x2E	; 46
    1bf0:	73 e0       	ldi	r23, 0x03	; 3
    1bf2:	83 ec       	ldi	r24, 0xC3	; 195
    1bf4:	93 e0       	ldi	r25, 0x03	; 3
    1bf6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1bfa:	68 e2       	ldi	r22, 0x28	; 40
    1bfc:	73 e0       	ldi	r23, 0x03	; 3
    1bfe:	83 ec       	ldi	r24, 0xC3	; 195
    1c00:	93 e0       	ldi	r25, 0x03	; 3
    1c02:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	4a e0       	ldi	r20, 0x0A	; 10
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	83 ec       	ldi	r24, 0xC3	; 195
    1c10:	93 e0       	ldi	r25, 0x03	; 3
    1c12:	0e 94 4e 1a 	call	0x349c	; 0x349c <_ZN5Print5printEji>
    1c16:	64 e2       	ldi	r22, 0x24	; 36
    1c18:	73 e0       	ldi	r23, 0x03	; 3
    1c1a:	83 ec       	ldi	r24, 0xC3	; 195
    1c1c:	93 e0       	ldi	r25, 0x03	; 3
    1c1e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c22:	6d e1       	ldi	r22, 0x1D	; 29
    1c24:	73 e0       	ldi	r23, 0x03	; 3
    1c26:	83 ec       	ldi	r24, 0xC3	; 195
    1c28:	93 e0       	ldi	r25, 0x03	; 3
    1c2a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1c2e:	4a e0       	ldi	r20, 0x0A	; 10
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	69 85       	ldd	r22, Y+9	; 0x09
    1c34:	83 ec       	ldi	r24, 0xC3	; 195
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <_ZN5Print7printlnEhi>

00001c40 <_ZN7Helpers12freeListSizeEv>:
    1c40:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <__flp>
    1c44:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <__flp+0x1>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	30 97       	sbiw	r30, 0x00	; 0
    1c4e:	49 f0       	breq	.+18     	; 0x1c62 <_ZN7Helpers12freeListSizeEv+0x22>
    1c50:	02 96       	adiw	r24, 0x02	; 2
    1c52:	20 81       	ld	r18, Z
    1c54:	31 81       	ldd	r19, Z+1	; 0x01
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	02 80       	ldd	r0, Z+2	; 0x02
    1c5c:	f3 81       	ldd	r31, Z+3	; 0x03
    1c5e:	e0 2d       	mov	r30, r0
    1c60:	f5 cf       	rjmp	.-22     	; 0x1c4c <_ZN7Helpers12freeListSizeEv+0xc>
    1c62:	08 95       	ret

00001c64 <_ZN7Helpers10freeMemoryEv>:
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <_ZN7Helpers10freeMemoryEv+0xa>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <__brkval>
    1c76:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <__brkval+0x1>
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	0f 5f       	subi	r16, 0xFF	; 255
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <_ZN7Helpers10freeMemoryEv+0x2a>
    1c84:	01 5b       	subi	r16, 0xB1	; 177
    1c86:	14 40       	sbci	r17, 0x04	; 4
    1c88:	1a 83       	std	Y+2, r17	; 0x02
    1c8a:	09 83       	std	Y+1, r16	; 0x01
    1c8c:	0a c0       	rjmp	.+20     	; 0x1ca2 <_ZN7Helpers10freeMemoryEv+0x3e>
    1c8e:	08 1b       	sub	r16, r24
    1c90:	19 0b       	sbc	r17, r25
    1c92:	1a 83       	std	Y+2, r17	; 0x02
    1c94:	09 83       	std	Y+1, r16	; 0x01
    1c96:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7Helpers12freeListSizeEv>
    1c9a:	80 0f       	add	r24, r16
    1c9c:	91 1f       	adc	r25, r17
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	08 95       	ret

00001cb4 <_ZN7Helpers14base64_enc_lenEi>:
    1cb4:	9c 01       	movw	r18, r24
    1cb6:	2e 5f       	subi	r18, 0xFE	; 254
    1cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cba:	e3 e0       	ldi	r30, 0x03	; 3
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	bf 01       	movw	r22, r30
    1cc2:	0e 94 05 20 	call	0x400a	; 0x400a <__divmodhi4>
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	48 1b       	sub	r20, r24
    1cca:	59 0b       	sbc	r21, r25
    1ccc:	ca 01       	movw	r24, r20
    1cce:	bf 01       	movw	r22, r30
    1cd0:	0e 94 05 20 	call	0x400a	; 0x400a <__divmodhi4>
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	08 95       	ret

00001ce2 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1ce6:	80 81       	ld	r24, Z
    1ce8:	86 95       	lsr	r24
    1cea:	86 95       	lsr	r24
    1cec:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1cee:	80 81       	ld	r24, Z
    1cf0:	83 70       	andi	r24, 0x03	; 3
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	92 95       	swap	r25
    1cf6:	9f 70       	andi	r25, 0x0F	; 15
    1cf8:	20 e1       	ldi	r18, 0x10	; 16
    1cfa:	82 9f       	mul	r24, r18
    1cfc:	90 0d       	add	r25, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	9c 93       	st	X, r25
    1d04:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1d06:	91 81       	ldd	r25, Z+1	; 0x01
    1d08:	9f 70       	andi	r25, 0x0F	; 15
    1d0a:	99 0f       	add	r25, r25
    1d0c:	99 0f       	add	r25, r25
    1d0e:	22 81       	ldd	r18, Z+2	; 0x02
    1d10:	22 95       	swap	r18
    1d12:	26 95       	lsr	r18
    1d14:	26 95       	lsr	r18
    1d16:	23 70       	andi	r18, 0x03	; 3
    1d18:	92 0f       	add	r25, r18
    1d1a:	12 96       	adiw	r26, 0x02	; 2
    1d1c:	9c 93       	st	X, r25
    1d1e:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	8f 73       	andi	r24, 0x3F	; 63
    1d24:	13 96       	adiw	r26, 0x03	; 3
    1d26:	8c 93       	st	X, r24
    1d28:	08 95       	ret

00001d2a <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1d2a:	6f 92       	push	r6
    1d2c:	7f 92       	push	r7
    1d2e:	8f 92       	push	r8
    1d30:	9f 92       	push	r9
    1d32:	af 92       	push	r10
    1d34:	bf 92       	push	r11
    1d36:	cf 92       	push	r12
    1d38:	df 92       	push	r13
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	27 97       	sbiw	r28, 0x07	; 7
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	6c 01       	movw	r12, r24
    1d58:	5b 01       	movw	r10, r22
    1d5a:	3b 01       	movw	r6, r22
    1d5c:	64 0e       	add	r6, r20
    1d5e:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1d60:	e1 2c       	mov	r14, r1
    1d62:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1d68:	4e 01       	movw	r8, r28
    1d6a:	85 e0       	ldi	r24, 0x05	; 5
    1d6c:	88 0e       	add	r8, r24
    1d6e:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1d70:	6a 14       	cp	r6, r10
    1d72:	7b 04       	cpc	r7, r11
    1d74:	49 f1       	breq	.+82     	; 0x1dc8 <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1d76:	c8 01       	movw	r24, r16
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	f5 01       	movw	r30, r10
    1d7c:	21 91       	ld	r18, Z+
    1d7e:	5f 01       	movw	r10, r30
    1d80:	f4 01       	movw	r30, r8
    1d82:	e0 0f       	add	r30, r16
    1d84:	f1 1f       	adc	r31, r17
    1d86:	20 83       	st	Z, r18
		if(i == 3) {
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	11 f0       	breq	.+4      	; 0x1d92 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1d8e:	8c 01       	movw	r16, r24
    1d90:	ef cf       	rjmp	.-34     	; 0x1d70 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1d92:	b4 01       	movw	r22, r8
    1d94:	ce 01       	movw	r24, r28
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_Z8a3_to_a4PhS_>
    1d9c:	de 01       	movw	r26, r28
    1d9e:	11 96       	adiw	r26, 0x01	; 1
    1da0:	c6 01       	movw	r24, r12
    1da2:	8e 0d       	add	r24, r14
    1da4:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1da6:	ed 91       	ld	r30, X+
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	e3 56       	subi	r30, 0x63	; 99
    1dac:	fc 4f       	sbci	r31, 0xFC	; 252
    1dae:	24 91       	lpm	r18, Z
    1db0:	fc 01       	movw	r30, r24
    1db2:	21 93       	st	Z+, r18
    1db4:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1db6:	a8 15       	cp	r26, r8
    1db8:	b9 05       	cpc	r27, r9
    1dba:	a9 f7       	brne	.-22     	; 0x1da6 <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1dbc:	f4 e0       	ldi	r31, 0x04	; 4
    1dbe:	ef 0e       	add	r14, r31
    1dc0:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	e3 cf       	rjmp	.-58     	; 0x1d8e <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1dc8:	01 15       	cp	r16, r1
    1dca:	11 05       	cpc	r17, r1
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1dce:	3c c0       	rjmp	.+120    	; 0x1e48 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1dd0:	be 01       	movw	r22, r28
    1dd2:	6b 5f       	subi	r22, 0xFB	; 251
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	fb 01       	movw	r30, r22
    1dd8:	e0 0f       	add	r30, r16
    1dda:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1ddc:	cf 01       	movw	r24, r30
    1dde:	86 1b       	sub	r24, r22
    1de0:	97 0b       	sbc	r25, r23
    1de2:	03 97       	sbiw	r24, 0x03	; 3
    1de4:	14 f4       	brge	.+4      	; 0x1dea <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1de6:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1de8:	f9 cf       	rjmp	.-14     	; 0x1ddc <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1dea:	ce 01       	movw	r24, r28
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	5c 01       	movw	r10, r24
    1df0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_Z8a3_to_a4PhS_>
    1df4:	c6 01       	movw	r24, r12
    1df6:	8e 0d       	add	r24, r14
    1df8:	9f 1d       	adc	r25, r15
    1dfa:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1dfc:	ed 91       	ld	r30, X+
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	e3 56       	subi	r30, 0x63	; 99
    1e02:	fc 4f       	sbci	r31, 0xFC	; 252
    1e04:	24 91       	lpm	r18, Z
    1e06:	fc 01       	movw	r30, r24
    1e08:	21 93       	st	Z+, r18
    1e0a:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1e0c:	9d 01       	movw	r18, r26
    1e0e:	2a 19       	sub	r18, r10
    1e10:	3b 09       	sbc	r19, r11
    1e12:	02 17       	cp	r16, r18
    1e14:	13 07       	cpc	r17, r19
    1e16:	94 f7       	brge	.-28     	; 0x1dfc <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1e18:	ff ef       	ldi	r31, 0xFF	; 255
    1e1a:	ef 1a       	sub	r14, r31
    1e1c:	ff 0a       	sbc	r15, r31
    1e1e:	e0 0e       	add	r14, r16
    1e20:	f1 1e       	adc	r15, r17
    1e22:	f6 01       	movw	r30, r12
    1e24:	ee 0d       	add	r30, r14
    1e26:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e28:	0c 19       	sub	r16, r12
    1e2a:	1d 09       	sbc	r17, r13
    1e2c:	0e 19       	sub	r16, r14
    1e2e:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1e30:	8d e3       	ldi	r24, 0x3D	; 61
    1e32:	7f 01       	movw	r14, r30
    1e34:	ec 18       	sub	r14, r12
    1e36:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e38:	98 01       	movw	r18, r16
    1e3a:	2e 0f       	add	r18, r30
    1e3c:	3f 1f       	adc	r19, r31
    1e3e:	23 30       	cpi	r18, 0x03	; 3
    1e40:	31 05       	cpc	r19, r1
    1e42:	14 f4       	brge	.+4      	; 0x1e48 <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1e44:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1e46:	f5 cf       	rjmp	.-22     	; 0x1e32 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1e48:	f6 01       	movw	r30, r12
    1e4a:	ee 0d       	add	r30, r14
    1e4c:	ff 1d       	adc	r31, r15
    1e4e:	10 82       	st	Z, r1
	
	return encLen;
}
    1e50:	c7 01       	movw	r24, r14
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	27 96       	adiw	r28, 0x07	; 7
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	df 90       	pop	r13
    1e6e:	cf 90       	pop	r12
    1e70:	bf 90       	pop	r11
    1e72:	af 90       	pop	r10
    1e74:	9f 90       	pop	r9
    1e76:	8f 90       	pop	r8
    1e78:	7f 90       	pop	r7
    1e7a:	6f 90       	pop	r6
    1e7c:	08 95       	ret

00001e7e <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	85 e0       	ldi	r24, 0x05	; 5
    1e82:	0e 94 17 1c 	call	0x382e	; 0x382e <pinMode>
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	85 e0       	ldi	r24, 0x05	; 5
    1e8a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
    1e8e:	68 eb       	ldi	r22, 0xB8	; 184
    1e90:	7b e0       	ldi	r23, 0x0B	; 11
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	8d e0       	ldi	r24, 0x0D	; 13
    1e9e:	0e 94 17 1c 	call	0x382e	; 0x382e <pinMode>
    1ea2:	26 e0       	ldi	r18, 0x06	; 6
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	55 e2       	ldi	r21, 0x25	; 37
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	83 ec       	ldi	r24, 0xC3	; 195
    1eae:	93 e0       	ldi	r25, 0x03	; 3
    1eb0:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN14HardwareSerial5beginEmh>
    1eb4:	6b e0       	ldi	r22, 0x0B	; 11
    1eb6:	76 e0       	ldi	r23, 0x06	; 6
    1eb8:	83 ec       	ldi	r24, 0xC3	; 195
    1eba:	93 e0       	ldi	r25, 0x03	; 3
    1ebc:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1ec0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    1ec4:	84 60       	ori	r24, 0x04	; 4
    1ec6:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
    1eca:	08 95       	ret

00001ecc <_Z21ensureFonaInitialisedbPb>:
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	2c 97       	sbiw	r28, 0x0c	; 12
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	f8 2e       	mov	r15, r24
    1eea:	8b 01       	movw	r16, r22
    1eec:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_initFonaLoopCount>
    1ef0:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_initFonaLoopCount+0x1>
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <_initFonaLoopCount+0x1>
    1efa:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <_initFonaLoopCount>
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	fb 01       	movw	r30, r22
    1f02:	80 83       	st	Z, r24
    1f04:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_fonaStatusInit>
    1f08:	81 11       	cpse	r24, r1
    1f0a:	34 c0       	rjmp	.+104    	; 0x1f74 <_Z21ensureFonaInitialisedbPb+0xa8>
    1f0c:	66 ef       	ldi	r22, 0xF6	; 246
    1f0e:	75 e0       	ldi	r23, 0x05	; 5
    1f10:	83 ec       	ldi	r24, 0xC3	; 195
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f18:	42 e0       	ldi	r20, 0x02	; 2
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	8e ed       	ldi	r24, 0xDE	; 222
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN13Adafruit_FONA5beginEhh>
    1f24:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <_fonaStatusInit>
    1f28:	83 ed       	ldi	r24, 0xD3	; 211
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <_ZN12RmMemManager11getModuleIdEv>
    1f30:	e8 2e       	mov	r14, r24
    1f32:	61 e6       	ldi	r22, 0x61	; 97
    1f34:	71 e0       	ldi	r23, 0x01	; 1
    1f36:	ce 01       	movw	r24, r28
    1f38:	07 96       	adiw	r24, 0x07	; 7
    1f3a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <_ZN6StringC1EPKc>
    1f3e:	6e 2d       	mov	r22, r14
    1f40:	ce 01       	movw	r24, r28
    1f42:	07 96       	adiw	r24, 0x07	; 7
    1f44:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <_ZN6String6concatEh>
    1f48:	be 01       	movw	r22, r28
    1f4a:	69 5f       	subi	r22, 0xF9	; 249
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <_ZN6StringC1ERKS_>
    1f56:	be 01       	movw	r22, r28
    1f58:	6f 5f       	subi	r22, 0xFF	; 255
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5c:	8e ed       	ldi	r24, 0xDE	; 222
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 13 04 	call	0x826	; 0x826 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1f64:	ce 01       	movw	r24, r28
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN6StringD1Ev>
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	07 96       	adiw	r24, 0x07	; 7
    1f70:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN6StringD1Ev>
    1f74:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_fonaStatusInit>
    1f78:	83 50       	subi	r24, 0x03	; 3
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	a8 f4       	brcc	.+42     	; 0x1fa8 <_Z21ensureFonaInitialisedbPb+0xdc>
    1f7e:	6b ed       	ldi	r22, 0xDB	; 219
    1f80:	75 e0       	ldi	r23, 0x05	; 5
    1f82:	83 ec       	ldi	r24, 0xC3	; 195
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1f8a:	6f e6       	ldi	r22, 0x6F	; 111
    1f8c:	71 e0       	ldi	r23, 0x01	; 1
    1f8e:	83 ec       	ldi	r24, 0xC3	; 195
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    1f96:	4a e0       	ldi	r20, 0x0A	; 10
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <_fonaStatusInit>
    1f9e:	83 ec       	ldi	r24, 0xC3	; 195
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	0e 94 3c 1a 	call	0x3478	; 0x3478 <_ZN5Print7printlnEhi>
    1fa6:	b2 c0       	rjmp	.+356    	; 0x210c <_Z21ensureFonaInitialisedbPb+0x240>
    1fa8:	ff 20       	and	r15, r15
    1faa:	09 f4       	brne	.+2      	; 0x1fae <_Z21ensureFonaInitialisedbPb+0xe2>
    1fac:	ac c0       	rjmp	.+344    	; 0x2106 <_Z21ensureFonaInitialisedbPb+0x23a>
    1fae:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_gprsStatusInit>
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	49 c0       	rjmp	.+146    	; 0x2048 <_Z21ensureFonaInitialisedbPb+0x17c>
    1fb6:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_initFonaLoopCount>
    1fba:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_initFonaLoopCount+0x1>
    1fbe:	6a e0       	ldi	r22, 0x0A	; 10
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodhi4>
    1fc6:	89 2b       	or	r24, r25
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <_Z21ensureFonaInitialisedbPb+0x104>
    1fca:	f8 01       	movw	r30, r16
    1fcc:	10 82       	st	Z, r1
    1fce:	3c c0       	rjmp	.+120    	; 0x2048 <_Z21ensureFonaInitialisedbPb+0x17c>
    1fd0:	6e eb       	ldi	r22, 0xBE	; 190
    1fd2:	75 e0       	ldi	r23, 0x05	; 5
    1fd4:	83 ec       	ldi	r24, 0xC3	; 195
    1fd6:	93 e0       	ldi	r25, 0x03	; 3
    1fd8:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	8e ed       	ldi	r24, 0xDE	; 222
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN13Adafruit_FONA10enableGPRSEb>
    1fe6:	f8 2e       	mov	r15, r24
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	8f 0d       	add	r24, r15
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	20 f1       	brcs	.+72     	; 0x2038 <_Z21ensureFonaInitialisedbPb+0x16c>
    1ff0:	66 ea       	ldi	r22, 0xA6	; 166
    1ff2:	75 e0       	ldi	r23, 0x05	; 5
    1ff4:	83 ec       	ldi	r24, 0xC3	; 195
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    1ffc:	6f e6       	ldi	r22, 0x6F	; 111
    1ffe:	71 e0       	ldi	r23, 0x01	; 1
    2000:	83 ec       	ldi	r24, 0xC3	; 195
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    2008:	6f 2d       	mov	r22, r15
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	4a e0       	ldi	r20, 0x0A	; 10
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	83 ec       	ldi	r24, 0xC3	; 195
    2012:	93 e0       	ldi	r25, 0x03	; 3
    2014:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN5Print7printlnEii>
    2018:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_initFonaLoopCount>
    201c:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_initFonaLoopCount+0x1>
    2020:	cc 97       	sbiw	r24, 0x3c	; 60
    2022:	28 f4       	brcc	.+10     	; 0x202e <_Z21ensureFonaInitialisedbPb+0x162>
    2024:	f8 01       	movw	r30, r16
    2026:	10 82       	st	Z, r1
    2028:	60 e8       	ldi	r22, 0x80	; 128
    202a:	75 e0       	ldi	r23, 0x05	; 5
    202c:	09 c0       	rjmp	.+18     	; 0x2040 <_Z21ensureFonaInitialisedbPb+0x174>
    202e:	f0 92 ce 01 	sts	0x01CE, r15	; 0x8001ce <_gprsStatusInit>
    2032:	6d e5       	ldi	r22, 0x5D	; 93
    2034:	75 e0       	ldi	r23, 0x05	; 5
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <_Z21ensureFonaInitialisedbPb+0x174>
    2038:	f0 92 ce 01 	sts	0x01CE, r15	; 0x8001ce <_gprsStatusInit>
    203c:	6d e3       	ldi	r22, 0x3D	; 61
    203e:	75 e0       	ldi	r23, 0x05	; 5
    2040:	83 ec       	ldi	r24, 0xC3	; 195
    2042:	93 e0       	ldi	r25, 0x03	; 3
    2044:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    2048:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_gprsStatusInit>
    204c:	81 50       	subi	r24, 0x01	; 1
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	08 f0       	brcs	.+2      	; 0x2054 <_Z21ensureFonaInitialisedbPb+0x188>
    2052:	5c c0       	rjmp	.+184    	; 0x210c <_Z21ensureFonaInitialisedbPb+0x240>
    2054:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_gprsSignalLoopCount>
    2058:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_gprsSignalLoopCount+0x1>
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <_gprsSignalLoopCount+0x1>
    2062:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_gprsSignalLoopCount>
    2066:	86 ec       	ldi	r24, 0xC6	; 198
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    206e:	81 11       	cpse	r24, r1
    2070:	4a c0       	rjmp	.+148    	; 0x2106 <_Z21ensureFonaInitialisedbPb+0x23a>
    2072:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_gprsSignalLoopCount>
    2076:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_gprsSignalLoopCount+0x1>
    207a:	6a e0       	ldi	r22, 0x0A	; 10
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodhi4>
    2082:	89 2b       	or	r24, r25
    2084:	19 f0       	breq	.+6      	; 0x208c <_Z21ensureFonaInitialisedbPb+0x1c0>
    2086:	f8 01       	movw	r30, r16
    2088:	10 82       	st	Z, r1
    208a:	3d c0       	rjmp	.+122    	; 0x2106 <_Z21ensureFonaInitialisedbPb+0x23a>
    208c:	62 e2       	ldi	r22, 0x22	; 34
    208e:	75 e0       	ldi	r23, 0x05	; 5
    2090:	83 ec       	ldi	r24, 0xC3	; 195
    2092:	93 e0       	ldi	r25, 0x03	; 3
    2094:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    2098:	8e ed       	ldi	r24, 0xDE	; 222
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN13Adafruit_FONA7getRSSIEv>
    20a0:	69 83       	std	Y+1, r22	; 0x01
    20a2:	7a 83       	std	Y+2, r23	; 0x02
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	ce 01       	movw	r24, r28
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    20b0:	ce 01       	movw	r24, r28
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    20b8:	81 11       	cpse	r24, r1
    20ba:	13 c0       	rjmp	.+38     	; 0x20e2 <_Z21ensureFonaInitialisedbPb+0x216>
    20bc:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_gprsSignalLoopCount>
    20c0:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_gprsSignalLoopCount+0x1>
    20c4:	8c 32       	cpi	r24, 0x2C	; 44
    20c6:	91 40       	sbci	r25, 0x01	; 1
    20c8:	48 f4       	brcc	.+18     	; 0x20dc <_Z21ensureFonaInitialisedbPb+0x210>
    20ca:	f8 01       	movw	r30, r16
    20cc:	10 82       	st	Z, r1
    20ce:	63 ef       	ldi	r22, 0xF3	; 243
    20d0:	74 e0       	ldi	r23, 0x04	; 4
    20d2:	83 ec       	ldi	r24, 0xC3	; 195
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20da:	15 c0       	rjmp	.+42     	; 0x2106 <_Z21ensureFonaInitialisedbPb+0x23a>
    20dc:	6b eb       	ldi	r22, 0xBB	; 187
    20de:	74 e0       	ldi	r23, 0x04	; 4
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <_Z21ensureFonaInitialisedbPb+0x21a>
    20e2:	65 e9       	ldi	r22, 0x95	; 149
    20e4:	74 e0       	ldi	r23, 0x04	; 4
    20e6:	83 ec       	ldi	r24, 0xC3	; 195
    20e8:	93 e0       	ldi	r25, 0x03	; 3
    20ea:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	ab 81       	ldd	r26, Y+3	; 0x03
    20f4:	bc 81       	ldd	r27, Y+4	; 0x04
    20f6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <_rssiStatus>
    20fa:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <_rssiStatus+0x1>
    20fe:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <_rssiStatus+0x2>
    2102:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <_rssiStatus+0x3>
    2106:	8e ed       	ldi	r24, 0xDE	; 222
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <_Z21ensureFonaInitialisedbPb+0x244>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	2c 96       	adiw	r28, 0x0c	; 12
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	08 95       	ret

0000212a <_Z15switchOffSystemv>:
    212a:	61 e7       	ldi	r22, 0x71	; 113
    212c:	71 e0       	ldi	r23, 0x01	; 1
    212e:	83 ec       	ldi	r24, 0xC3	; 195
    2130:	93 e0       	ldi	r25, 0x03	; 3
    2132:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	85 e0       	ldi	r24, 0x05	; 5
    213a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
    213e:	68 eb       	ldi	r22, 0xB8	; 184
    2140:	7b e0       	ldi	r23, 0x0B	; 11
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <delay>

0000214a <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	2a 97       	sbiw	r28, 0x0a	; 10
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    215e:	62 e8       	ldi	r22, 0x82	; 130
    2160:	74 e0       	ldi	r23, 0x04	; 4
    2162:	83 ec       	ldi	r24, 0xC3	; 195
    2164:	93 e0       	ldi	r25, 0x03	; 3
    2166:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	1b 82       	std	Y+3, r1	; 0x03
    2170:	1a 82       	std	Y+2, r1	; 0x02
    2172:	1d 82       	std	Y+5, r1	; 0x05
    2174:	1c 82       	std	Y+4, r1	; 0x04
    2176:	1f 82       	std	Y+7, r1	; 0x07
    2178:	1e 82       	std	Y+6, r1	; 0x06
    217a:	19 86       	std	Y+9, r1	; 0x09
    217c:	18 86       	std	Y+8, r1	; 0x08
    217e:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    2180:	be 01       	movw	r22, r28
    2182:	6f 5f       	subi	r22, 0xFF	; 255
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	81 ed       	ldi	r24, 0xD1	; 209
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	2a 96       	adiw	r28, 0x0a	; 10
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	08 95       	ret

000021a2 <_Z17createEncodedDataP13Adafruit_FONAPch>:

void createEncodedData(Adafruit_FONA* fona, char* encodedOutput, uint8_t maxReadings) {
    21a2:	4f 92       	push	r4
    21a4:	5f 92       	push	r5
    21a6:	6f 92       	push	r6
    21a8:	7f 92       	push	r7
    21aa:	af 92       	push	r10
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	2d 97       	sbiw	r28, 0x0d	; 13
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	5b 01       	movw	r10, r22
    21ce:	f4 2e       	mov	r15, r20
	payload.setModuleId(999);
	payload.setBootNumber(33);
	payload.setSensorData((SensorData*)&sData, numLoaded);
	payload.setRSSI(rssi);
	payload.createEncodedPayload(encodedOutput);	
}
    21d0:	cd b6       	in	r12, 0x3d	; 61
    21d2:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void createEncodedData(Adafruit_FONA* fona, char* encodedOutput, uint8_t maxReadings) {
	
	FONA_GET_RSSI rssi = fona->getRSSI();
    21d4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN13Adafruit_FONA7getRSSIEv>
    21d8:	2b 01       	movw	r4, r22
    21da:	3c 01       	movw	r6, r24
	
	SensorData sData[maxReadings];
    21dc:	2d b7       	in	r18, 0x3d	; 61
    21de:	3e b7       	in	r19, 0x3e	; 62
    21e0:	8a e0       	ldi	r24, 0x0A	; 10
    21e2:	f8 9e       	mul	r15, r24
    21e4:	20 19       	sub	r18, r0
    21e6:	31 09       	sbc	r19, r1
    21e8:	11 24       	eor	r1, r1
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	3e bf       	out	0x3e, r19	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	2d bf       	out	0x3d, r18	; 61
    21f4:	0d b7       	in	r16, 0x3d	; 61
    21f6:	1e b7       	in	r17, 0x3e	; 62
    21f8:	0f 5f       	subi	r16, 0xFF	; 255
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	8f 2d       	mov	r24, r15
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	f8 01       	movw	r30, r16
	
	uint8_t spareBuffer[16] = {0}; //Sets all elems to 0
};


struct SensorData {
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	60 f0       	brcs	.+24     	; 0x2220 <_Z17createEncodedDataP13Adafruit_FONAPch+0x7e>
    2208:	20 83       	st	Z, r18
    220a:	12 82       	std	Z+2, r1	; 0x02
    220c:	11 82       	std	Z+1, r1	; 0x01
    220e:	14 82       	std	Z+4, r1	; 0x04
    2210:	13 82       	std	Z+3, r1	; 0x03
    2212:	16 82       	std	Z+6, r1	; 0x06
    2214:	15 82       	std	Z+5, r1	; 0x05
    2216:	10 86       	std	Z+8, r1	; 0x08
    2218:	17 82       	std	Z+7, r1	; 0x07
    221a:	11 86       	std	Z+9, r1	; 0x09
    221c:	3a 96       	adiw	r30, 0x0a	; 10
    221e:	f2 cf       	rjmp	.-28     	; 0x2204 <_Z17createEncodedDataP13Adafruit_FONAPch+0x62>
	uint8_t numLoaded = mem.loadSensorData((SensorData*)&sData, maxReadings);//, countToSend, &loadedTo);
    2220:	4f 2d       	mov	r20, r15
    2222:	b8 01       	movw	r22, r16
    2224:	83 ed       	ldi	r24, 0xD3	; 211
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>
    222c:	f8 2e       	mov	r15, r24

	GsmPayload payload;
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	0e 94 c7 0c 	call	0x198e	; 0x198e <_ZN10GsmPayloadC1Ev>
	payload.setModuleId(999);
    2236:	67 ee       	ldi	r22, 0xE7	; 231
    2238:	ce 01       	movw	r24, r28
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <_ZN10GsmPayload11setModuleIdEh>
	payload.setBootNumber(33);
    2240:	61 e2       	ldi	r22, 0x21	; 33
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	ce 01       	movw	r24, r28
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <_ZN10GsmPayload13setBootNumberEj>
	payload.setSensorData((SensorData*)&sData, numLoaded);
    224c:	4f 2d       	mov	r20, r15
    224e:	b8 01       	movw	r22, r16
    2250:	ce 01       	movw	r24, r28
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
	payload.setRSSI(rssi);
    2258:	b3 01       	movw	r22, r6
    225a:	a2 01       	movw	r20, r4
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
	payload.createEncodedPayload(encodedOutput);	
    2264:	b5 01       	movw	r22, r10
    2266:	ce 01       	movw	r24, r28
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN10GsmPayload20createEncodedPayloadEPc>
}
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de be       	out	0x3e, r13	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd be       	out	0x3d, r12	; 61
    2278:	2d 96       	adiw	r28, 0x0d	; 13
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	bf 90       	pop	r11
    2294:	af 90       	pop	r10
    2296:	7f 90       	pop	r7
    2298:	6f 90       	pop	r6
    229a:	5f 90       	pop	r5
    229c:	4f 90       	pop	r4
    229e:	08 95       	ret

000022a0 <_Z8sendDatav>:

uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    22a0:	6f 92       	push	r6
    22a2:	7f 92       	push	r7
    22a4:	8f 92       	push	r8
    22a6:	9f 92       	push	r9
    22a8:	af 92       	push	r10
    22aa:	bf 92       	push	r11
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <_Z8sendDatav+0x1c>
    22bc:	1f 92       	push	r1
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
		return true;
	}
	else {
		return false;
	}
}
    22c2:	ad b6       	in	r10, 0x3d	; 61
    22c4:	be b6       	in	r11, 0x3e	; 62
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    22c6:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <_sendDataLoopCount>
    22ca:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_sendDataLoopCount+0x1>
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <_sendDataLoopCount+0x1>
    22d4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_sendDataLoopCount>
	
	if (_sendDataLoopCount == 1)
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	31 f4       	brne	.+12     	; 0x22e8 <_Z8sendDatav+0x48>
		RM_LOGLN(F("Initialising Fona to send data"));
    22dc:	63 e6       	ldi	r22, 0x63	; 99
    22de:	74 e0       	ldi	r23, 0x04	; 4
    22e0:	83 ec       	ldi	r24, 0xC3	; 195
    22e2:	93 e0       	ldi	r25, 0x03	; 3
    22e4:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	boolean isComplete;
	Adafruit_FONA* sendDataFona = ensureFonaInitialised(true, &isComplete);
    22e8:	be 01       	movw	r22, r28
    22ea:	6d 5f       	subi	r22, 0xFD	; 253
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_Z21ensureFonaInitialisedbPb>
    22f4:	8c 01       	movw	r16, r24
	
	if (!isComplete) {
    22f6:	db 80       	ldd	r13, Y+3	; 0x03
    22f8:	d1 10       	cpse	r13, r1
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <_Z8sendDatav+0x62>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    22fc:	6b e4       	ldi	r22, 0x4B	; 75
    22fe:	74 e0       	ldi	r23, 0x04	; 4
    2300:	04 c0       	rjmp	.+8      	; 0x230a <_Z8sendDatav+0x6a>
		return false; //Still waiting to initialise
	}
		
	if (sendDataFona == NULL) {
    2302:	89 2b       	or	r24, r25
    2304:	39 f4       	brne	.+14     	; 0x2314 <_Z8sendDatav+0x74>
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    2306:	68 e3       	ldi	r22, 0x38	; 56
    2308:	74 e0       	ldi	r23, 0x04	; 4
    230a:	83 ec       	ldi	r24, 0xC3	; 195
    230c:	93 e0       	ldi	r25, 0x03	; 3
    230e:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
		return true; //Error initialising
    2312:	58 c0       	rjmp	.+176    	; 0x23c4 <_Z8sendDatav+0x124>
		//TODO: Save send-status
		
		
		
		
		return true;
    2314:	6d b6       	in	r6, 0x3d	; 61
    2316:	7e b6       	in	r7, 0x3e	; 62
		//Helpers::printRSSI(&rssi);
		
		 //TODO: Max number of readings to send vs when eeprom rolls over and start from beginning
		 //TODO: HARDCODED
		 
		uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(GPRS_MAX_READINGS_FOR_SEND);
    2318:	84 e1       	ldi	r24, 0x14	; 20
    231a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    231e:	4c 01       	movw	r8, r24
		char encodedData[encodedSz];
    2320:	8d b7       	in	r24, 0x3d	; 61
    2322:	9e b7       	in	r25, 0x3e	; 62
    2324:	88 19       	sub	r24, r8
    2326:	99 09       	sbc	r25, r9
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	9e bf       	out	0x3e, r25	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	8d bf       	out	0x3d, r24	; 61
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	7c 01       	movw	r14, r24
		
		RM_LOG2(F("FREE RAM AT START"), Helpers::freeMemory());
    2336:	66 e2       	ldi	r22, 0x26	; 38
    2338:	74 e0       	ldi	r23, 0x04	; 4
    233a:	83 ec       	ldi	r24, 0xC3	; 195
    233c:	93 e0       	ldi	r25, 0x03	; 3
    233e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    2342:	6f e6       	ldi	r22, 0x6F	; 111
    2344:	71 e0       	ldi	r23, 0x01	; 1
    2346:	83 ec       	ldi	r24, 0xC3	; 195
    2348:	93 e0       	ldi	r25, 0x03	; 3
    234a:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    234e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN7Helpers10freeMemoryEv>
    2352:	4a e0       	ldi	r20, 0x0A	; 10
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	bc 01       	movw	r22, r24
    2358:	83 ec       	ldi	r24, 0xC3	; 195
    235a:	93 e0       	ldi	r25, 0x03	; 3
    235c:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN5Print7printlnEii>
		
		//Encode in another method to free up RAM on return for the sending (just in case)
		createEncodedData(sendDataFona, encodedData, GPRS_MAX_READINGS_FOR_SEND);
    2360:	44 e1       	ldi	r20, 0x14	; 20
    2362:	b7 01       	movw	r22, r14
    2364:	c8 01       	movw	r24, r16
    2366:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <_Z17createEncodedDataP13Adafruit_FONAPch>

		RM_LOGLN(F("Encoded data created and ready for send:"));
    236a:	6d ef       	ldi	r22, 0xFD	; 253
    236c:	73 e0       	ldi	r23, 0x03	; 3
    236e:	83 ec       	ldi	r24, 0xC3	; 195
    2370:	93 e0       	ldi	r25, 0x03	; 3
    2372:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
		RM_LOGLN(encodedData);
    2376:	b7 01       	movw	r22, r14
    2378:	83 ec       	ldi	r24, 0xC3	; 195
    237a:	93 e0       	ldi	r25, 0x03	; 3
    237c:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN5Print7printlnEPKc>

		RM_LOG2(F("FREE RAM BEFORE SEND"), Helpers::freeMemory());
    2380:	68 ee       	ldi	r22, 0xE8	; 232
    2382:	73 e0       	ldi	r23, 0x03	; 3
    2384:	83 ec       	ldi	r24, 0xC3	; 195
    2386:	93 e0       	ldi	r25, 0x03	; 3
    2388:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    238c:	6f e6       	ldi	r22, 0x6F	; 111
    238e:	71 e0       	ldi	r23, 0x01	; 1
    2390:	83 ec       	ldi	r24, 0xC3	; 195
    2392:	93 e0       	ldi	r25, 0x03	; 3
    2394:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    2398:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN7Helpers10freeMemoryEv>
    239c:	4a e0       	ldi	r20, 0x0A	; 10
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	bc 01       	movw	r22, r24
    23a2:	83 ec       	ldi	r24, 0xC3	; 195
    23a4:	93 e0       	ldi	r25, 0x03	; 3
    23a6:	0e 94 c7 1a 	call	0x358e	; 0x358e <_ZN5Print7printlnEii>
		
		uint16_t statuscode;
		sendDataFona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);
    23aa:	9e 01       	movw	r18, r28
    23ac:	2f 5f       	subi	r18, 0xFF	; 255
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	a4 01       	movw	r20, r8
    23b2:	b7 01       	movw	r22, r14
    23b4:	c8 01       	movw	r24, r16
    23b6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	7e be       	out	0x3e, r7	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	6d be       	out	0x3d, r6	; 61
		return true;
	}
	else {
		return false;
	}
}
    23c4:	8d 2d       	mov	r24, r13
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	be be       	out	0x3e, r11	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	ad be       	out	0x3d, r10	; 61
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	df 90       	pop	r13
    23e4:	bf 90       	pop	r11
    23e6:	af 90       	pop	r10
    23e8:	9f 90       	pop	r9
    23ea:	8f 90       	pop	r8
    23ec:	7f 90       	pop	r7
    23ee:	6f 90       	pop	r6
    23f0:	08 95       	ret

000023f2 <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    23f2:	68 ee       	ldi	r22, 0xE8	; 232
    23f4:	73 e0       	ldi	r23, 0x03	; 3
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <delay>
	++_timerCounter;
    23fe:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
    2402:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x1>
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <__data_end+0x1>
    240c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    2410:	6e ed       	ldi	r22, 0xDE	; 222
    2412:	73 e0       	ldi	r23, 0x03	; 3
    2414:	83 ec       	ldi	r24, 0xC3	; 195
    2416:	93 e0       	ldi	r25, 0x03	; 3
    2418:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    241c:	6f e6       	ldi	r22, 0x6F	; 111
    241e:	71 e0       	ldi	r23, 0x01	; 1
    2420:	83 ec       	ldi	r24, 0xC3	; 195
    2422:	93 e0       	ldi	r25, 0x03	; 3
    2424:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN5Print5printEPKc>
    2428:	4a e0       	ldi	r20, 0x0A	; 10
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <_behaviour>
    2430:	83 ec       	ldi	r24, 0xC3	; 195
    2432:	93 e0       	ldi	r25, 0x03	; 3
    2434:	0e 94 3c 1a 	call	0x3478	; 0x3478 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    2438:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    243c:	80 ff       	sbrs	r24, 0
    243e:	09 c0       	rjmp	.+18     	; 0x2452 <loop+0x60>
		
		if (takeReadings())
    2440:	0e 94 a5 10 	call	0x214a	; 0x214a <_Z12takeReadingsv>
    2444:	88 23       	and	r24, r24
    2446:	29 f0       	breq	.+10     	; 0x2452 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    2448:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    244c:	8e 7f       	andi	r24, 0xFE	; 254
    244e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    2452:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2456:	81 ff       	sbrs	r24, 1
    2458:	09 c0       	rjmp	.+18     	; 0x246c <loop+0x7a>
		
		if (sendData())
    245a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z8sendDatav>
    245e:	88 23       	and	r24, r24
    2460:	29 f0       	breq	.+10     	; 0x246c <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    2462:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2466:	8d 7f       	andi	r24, 0xFD	; 253
    2468:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    246c:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2470:	82 ff       	sbrs	r24, 2
    2472:	17 c0       	rjmp	.+46     	; 0x24a2 <loop+0xb0>
	
		if (_timerCounter == 1)
    2474:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
    2478:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x1>
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	31 f4       	brne	.+12     	; 0x248c <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    2480:	63 ed       	ldi	r22, 0xD3	; 211
    2482:	71 e0       	ldi	r23, 0x01	; 1
    2484:	8e ed       	ldi	r24, 0xDE	; 222
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    248c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <_Z8sendDatav>
    2490:	88 23       	and	r24, r24
    2492:	39 f0       	breq	.+14     	; 0x24a2 <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    2494:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2498:	8b 7f       	andi	r24, 0xFB	; 251
    249a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    249e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    24a2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    24a6:	81 11       	cpse	r24, r1
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <loop+0xbc>
		
		switchOffSystem();
    24aa:	0c 94 95 10 	jmp	0x212a	; 0x212a <_Z15switchOffSystemv>
    24ae:	08 95       	ret

000024b0 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	64 e0       	ldi	r22, 0x04	; 4
    24b4:	8e ed       	ldi	r24, 0xDE	; 222
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	83 ed       	ldi	r24, 0xD3	; 211
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	81 ed       	ldi	r24, 0xD1	; 209
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN13SensorManagerC1Eb>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    24d0:	e6 ec       	ldi	r30, 0xC6	; 198
    24d2:	f1 e0       	ldi	r31, 0x01	; 1
    24d4:	10 82       	st	Z, r1
    24d6:	11 82       	std	Z+1, r1	; 0x01
    24d8:	12 82       	std	Z+2, r1	; 0x02
    24da:	08 95       	ret

000024dc <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    24dc:	85 e5       	ldi	r24, 0x55	; 85
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__fona+0x1>
    24e4:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__fona>
    24e8:	83 ef       	ldi	r24, 0xF3	; 243
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <_ZN6StringD1Ev>

000024f0 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    24f0:	dc 01       	movw	r26, r24
    24f2:	ed 91       	ld	r30, X+
    24f4:	fc 91       	ld	r31, X
    24f6:	01 90       	ld	r0, Z+
    24f8:	f0 81       	ld	r31, Z
    24fa:	e0 2d       	mov	r30, r0
    24fc:	09 94       	ijmp

000024fe <_ZN12RmMemManagerC1Eb>:
    24fe:	fc 01       	movw	r30, r24
    2500:	14 82       	std	Z+4, r1	; 0x04
    2502:	15 82       	std	Z+5, r1	; 0x05
    2504:	16 82       	std	Z+6, r1	; 0x06
    2506:	17 82       	std	Z+7, r1	; 0x07
    2508:	80 e8       	ldi	r24, 0x80	; 128
    250a:	80 87       	std	Z+8, r24	; 0x08
    250c:	81 87       	std	Z+9, r24	; 0x09
    250e:	12 86       	std	Z+10, r1	; 0x0a
    2510:	63 83       	std	Z+3, r22	; 0x03
    2512:	61 11       	cpse	r22, r1
    2514:	04 c0       	rjmp	.+8      	; 0x251e <_ZN12RmMemManagerC1Eb+0x20>
    2516:	8b e6       	ldi	r24, 0x6B	; 107
    2518:	93 e0       	ldi	r25, 0x03	; 3
    251a:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <_ZN7TwoWire5beginEv>
    251e:	08 95       	ret

00002520 <_ZN12RmMemManager14loadSensorDataEP10SensorDatah>:
    2520:	fc 01       	movw	r30, r24
    2522:	cb 01       	movw	r24, r22
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	61 15       	cp	r22, r1
    252a:	71 05       	cpc	r23, r1
    252c:	39 f0       	breq	.+14     	; 0x253c <_ZN12RmMemManager14loadSensorDataEP10SensorDatah+0x1c>
    252e:	42 81       	ldd	r20, Z+2	; 0x02
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	42 9f       	mul	r20, r18
    2534:	a0 01       	movw	r20, r0
    2536:	11 24       	eor	r1, r1
    2538:	0e 94 91 22 	call	0x4522	; 0x4522 <memcpy>
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	08 95       	ret

00002540 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	eb 01       	movw	r28, r22
    254e:	7b 01       	movw	r14, r22
    2550:	e4 0e       	add	r14, r20
    2552:	f1 1c       	adc	r15, r1
    2554:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    2556:	ce 15       	cp	r28, r14
    2558:	df 05       	cpc	r29, r15
    255a:	71 f1       	breq	.+92     	; 0x25b8 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    255c:	60 e5       	ldi	r22, 0x50	; 80
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	8b e6       	ldi	r24, 0x6B	; 107
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    2568:	61 2f       	mov	r22, r17
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	8b e6       	ldi	r24, 0x6B	; 107
    256e:	93 e0       	ldi	r25, 0x03	; 3
    2570:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    2574:	b8 01       	movw	r22, r16
    2576:	77 27       	eor	r23, r23
    2578:	8b e6       	ldi	r24, 0x6B	; 107
    257a:	93 e0       	ldi	r25, 0x03	; 3
    257c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    2580:	8b e6       	ldi	r24, 0x6B	; 107
    2582:	93 e0       	ldi	r25, 0x03	; 3
    2584:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	60 e5       	ldi	r22, 0x50	; 80
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	8b e6       	ldi	r24, 0x6B	; 107
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	0e 94 f6 16 	call	0x2dec	; 0x2dec <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    2598:	8b e6       	ldi	r24, 0x6B	; 107
    259a:	93 e0       	ldi	r25, 0x03	; 3
    259c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN7TwoWire9availableEv>
    25a0:	89 2b       	or	r24, r25
    25a2:	29 f0       	breq	.+10     	; 0x25ae <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    25a4:	8b e6       	ldi	r24, 0x6B	; 107
    25a6:	93 e0       	ldi	r25, 0x03	; 3
    25a8:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <_ZN7TwoWire4readEv>
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    25ae:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    25b0:	89 93       	st	Y+, r24
    25b2:	0f 5f       	subi	r16, 0xFF	; 255
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    25b6:	cf cf       	rjmp	.-98     	; 0x2556 <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	08 95       	ret

000025c6 <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	1f 92       	push	r1
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	be 01       	movw	r22, r28
    25d6:	6f 5f       	subi	r22, 0xFF	; 255
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	0e 94 a0 12 	call	0x2540	; 0x2540 <_Z12internalReadjPhh>
	return value;
}
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	0f 90       	pop	r0
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	08 95       	ret

000025e8 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <_ZN12RmMemManager18getUCharFromMemoryEj>

000025f0 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    25f0:	fc 01       	movw	r30, r24
    25f2:	60 83       	st	Z, r22
    25f4:	08 95       	ret

000025f6 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    25f6:	fc 01       	movw	r30, r24
    25f8:	80 81       	ld	r24, Z
    25fa:	81 11       	cpse	r24, r1
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    25fe:	86 2f       	mov	r24, r22
    2600:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    2604:	85 e0       	ldi	r24, 0x05	; 5
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	08 95       	ret

0000260a <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    260a:	fc 01       	movw	r30, r24
    260c:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    260e:	81 81       	ldd	r24, Z+1	; 0x01
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	12 96       	adiw	r26, 0x02	; 2
    2618:	9c 93       	st	X, r25
    261a:	8e 93       	st	-X, r24
    261c:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    261e:	81 81       	ldd	r24, Z+1	; 0x01
    2620:	2a e0       	ldi	r18, 0x0A	; 10
    2622:	82 9f       	mul	r24, r18
    2624:	c0 01       	movw	r24, r0
    2626:	11 24       	eor	r1, r1
    2628:	14 96       	adiw	r26, 0x04	; 4
    262a:	9c 93       	st	X, r25
    262c:	8e 93       	st	-X, r24
    262e:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    2630:	81 81       	ldd	r24, Z+1	; 0x01
    2632:	67 e0       	ldi	r22, 0x07	; 7
    2634:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <__udivmodqi4>
    2638:	89 2f       	mov	r24, r25
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	16 96       	adiw	r26, 0x06	; 6
    263e:	9c 93       	st	X, r25
    2640:	8e 93       	st	-X, r24
    2642:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    2644:	81 81       	ldd	r24, Z+1	; 0x01
    2646:	24 e6       	ldi	r18, 0x64	; 100
    2648:	82 9f       	mul	r24, r18
    264a:	c0 01       	movw	r24, r0
    264c:	11 24       	eor	r1, r1
    264e:	18 96       	adiw	r26, 0x08	; 8
    2650:	9c 93       	st	X, r25
    2652:	8e 93       	st	-X, r24
    2654:	17 97       	sbiw	r26, 0x07	; 7
    2656:	08 95       	ret

00002658 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    2658:	af 92       	push	r10
    265a:	bf 92       	push	r11
    265c:	cf 92       	push	r12
    265e:	df 92       	push	r13
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	8c 01       	movw	r16, r24
    266e:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    2670:	fc 01       	movw	r30, r24
    2672:	80 81       	ld	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	21 f0       	breq	.+8      	; 0x2680 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    2678:	c8 01       	movw	r24, r16
    267a:	0e 94 05 13 	call	0x260a	; 0x260a <_ZN13SensorManager11getMockDataEP10SensorData>
    267e:	1b c0       	rjmp	.+54     	; 0x26b6 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2680:	6e e0       	ldi	r22, 0x0E	; 14
    2682:	c8 01       	movw	r24, r16
    2684:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN13SensorManager16takeSampleAnalogEh>
    2688:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    268a:	6f e0       	ldi	r22, 0x0F	; 15
    268c:	c8 01       	movw	r24, r16
    268e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN13SensorManager16takeSampleAnalogEh>
    2692:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    2694:	61 e1       	ldi	r22, 0x11	; 17
    2696:	c8 01       	movw	r24, r16
    2698:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN13SensorManager16takeSampleAnalogEh>
    269c:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    269e:	60 e1       	ldi	r22, 0x10	; 16
    26a0:	c8 01       	movw	r24, r16
    26a2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    26a6:	ba 82       	std	Y+2, r11	; 0x02
    26a8:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    26aa:	dc 82       	std	Y+4, r13	; 0x04
    26ac:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    26ae:	fe 82       	std	Y+6, r15	; 0x06
    26b0:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    26b2:	98 87       	std	Y+8, r25	; 0x08
    26b4:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    26b6:	ce 01       	movw	r24, r28
	
	//return ret;
}
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	bf 90       	pop	r11
    26ca:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    26cc:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <_ZN7Helpers15printSensorDataEP10SensorData>

000026d0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    26d0:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <twi_sendStop>
    26da:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_inRepStart>
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	82 e1       	ldi	r24, 0x12	; 18
    26e2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	83 e1       	ldi	r24, 0x13	; 19
    26ea:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
    26ee:	e9 eb       	ldi	r30, 0xB9	; 185
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8e 7f       	andi	r24, 0xFE	; 254
    26f6:	80 83       	st	Z, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	8d 7f       	andi	r24, 0xFD	; 253
    26fc:	80 83       	st	Z, r24
    26fe:	88 e4       	ldi	r24, 0x48	; 72
    2700:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2704:	85 e4       	ldi	r24, 0x45	; 69
    2706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    270a:	08 95       	ret

0000270c <twi_readFrom>:
    270c:	41 32       	cpi	r20, 0x21	; 33
    270e:	08 f0       	brcs	.+2      	; 0x2712 <twi_readFrom+0x6>
    2710:	43 c0       	rjmp	.+134    	; 0x2798 <twi_readFrom+0x8c>
    2712:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <twi_state>
    2716:	91 11       	cpse	r25, r1
    2718:	fc cf       	rjmp	.-8      	; 0x2712 <twi_readFrom+0x6>
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <twi_state>
    2720:	20 93 68 03 	sts	0x0368, r18	; 0x800368 <twi_sendStop>
    2724:	2f ef       	ldi	r18, 0xFF	; 255
    2726:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <twi_error>
    272a:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_masterBufferIndex>
    272e:	24 0f       	add	r18, r20
    2730:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <twi_masterBufferLength>
    2734:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <twi_slarw>
    2738:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <twi_slarw>
    273c:	88 0f       	add	r24, r24
    273e:	89 2b       	or	r24, r25
    2740:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_slarw>
    2744:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <twi_inRepStart>
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	61 f4       	brne	.+24     	; 0x2764 <twi_readFrom+0x58>
    274c:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_inRepStart>
    2750:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_slarw>
    2754:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2758:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    275c:	83 fd       	sbrc	r24, 3
    275e:	f8 cf       	rjmp	.-16     	; 0x2750 <twi_readFrom+0x44>
    2760:	85 ec       	ldi	r24, 0xC5	; 197
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <twi_readFrom+0x5a>
    2764:	85 ee       	ldi	r24, 0xE5	; 229
    2766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    276a:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_state>
    276e:	81 30       	cpi	r24, 0x01	; 1
    2770:	e1 f3       	breq	.-8      	; 0x276a <twi_readFrom+0x5e>
    2772:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2776:	84 17       	cp	r24, r20
    2778:	10 f4       	brcc	.+4      	; 0x277e <twi_readFrom+0x72>
    277a:	40 91 42 03 	lds	r20, 0x0342	; 0x800342 <twi_masterBufferIndex>
    277e:	a3 e4       	ldi	r26, 0x43	; 67
    2780:	b3 e0       	ldi	r27, 0x03	; 3
    2782:	96 2f       	mov	r25, r22
    2784:	fb 01       	movw	r30, r22
    2786:	8e 2f       	mov	r24, r30
    2788:	89 1b       	sub	r24, r25
    278a:	84 17       	cp	r24, r20
    278c:	18 f4       	brcc	.+6      	; 0x2794 <twi_readFrom+0x88>
    278e:	8d 91       	ld	r24, X+
    2790:	81 93       	st	Z+, r24
    2792:	f9 cf       	rjmp	.-14     	; 0x2786 <twi_readFrom+0x7a>
    2794:	84 2f       	mov	r24, r20
    2796:	08 95       	ret
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	08 95       	ret

0000279c <twi_writeTo>:
    279c:	0f 93       	push	r16
    279e:	41 32       	cpi	r20, 0x21	; 33
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <twi_writeTo+0x8>
    27a2:	4a c0       	rjmp	.+148    	; 0x2838 <twi_writeTo+0x9c>
    27a4:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <twi_state>
    27a8:	91 11       	cpse	r25, r1
    27aa:	fc cf       	rjmp	.-8      	; 0x27a4 <twi_writeTo+0x8>
    27ac:	32 e0       	ldi	r19, 0x02	; 2
    27ae:	30 93 6a 03 	sts	0x036A, r19	; 0x80036a <twi_state>
    27b2:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <twi_sendStop>
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <twi_error>
    27bc:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_masterBufferIndex>
    27c0:	40 93 41 03 	sts	0x0341, r20	; 0x800341 <twi_masterBufferLength>
    27c4:	56 2f       	mov	r21, r22
    27c6:	a3 e4       	ldi	r26, 0x43	; 67
    27c8:	b3 e0       	ldi	r27, 0x03	; 3
    27ca:	fb 01       	movw	r30, r22
    27cc:	3e 2f       	mov	r19, r30
    27ce:	35 1b       	sub	r19, r21
    27d0:	34 17       	cp	r19, r20
    27d2:	18 f4       	brcc	.+6      	; 0x27da <twi_writeTo+0x3e>
    27d4:	31 91       	ld	r19, Z+
    27d6:	3d 93       	st	X+, r19
    27d8:	f9 cf       	rjmp	.-14     	; 0x27cc <twi_writeTo+0x30>
    27da:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <twi_slarw>
    27de:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <twi_slarw>
    27e2:	88 0f       	add	r24, r24
    27e4:	83 2b       	or	r24, r19
    27e6:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_slarw>
    27ea:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <twi_inRepStart>
    27ee:	81 30       	cpi	r24, 0x01	; 1
    27f0:	61 f4       	brne	.+24     	; 0x280a <twi_writeTo+0x6e>
    27f2:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_inRepStart>
    27f6:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_slarw>
    27fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    27fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2802:	83 fd       	sbrc	r24, 3
    2804:	f8 cf       	rjmp	.-16     	; 0x27f6 <twi_writeTo+0x5a>
    2806:	85 ec       	ldi	r24, 0xC5	; 197
    2808:	01 c0       	rjmp	.+2      	; 0x280c <twi_writeTo+0x70>
    280a:	85 ee       	ldi	r24, 0xE5	; 229
    280c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2810:	22 23       	and	r18, r18
    2812:	21 f0       	breq	.+8      	; 0x281c <twi_writeTo+0x80>
    2814:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_state>
    2818:	82 30       	cpi	r24, 0x02	; 2
    281a:	d1 f3       	breq	.-12     	; 0x2810 <twi_writeTo+0x74>
    281c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_error>
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	79 f0       	breq	.+30     	; 0x2842 <twi_writeTo+0xa6>
    2824:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_error>
    2828:	80 32       	cpi	r24, 0x20	; 32
    282a:	41 f0       	breq	.+16     	; 0x283c <twi_writeTo+0xa0>
    282c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_error>
    2830:	80 33       	cpi	r24, 0x30	; 48
    2832:	31 f0       	breq	.+12     	; 0x2840 <twi_writeTo+0xa4>
    2834:	94 e0       	ldi	r25, 0x04	; 4
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <twi_writeTo+0xa6>
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	03 c0       	rjmp	.+6      	; 0x2842 <twi_writeTo+0xa6>
    283c:	92 e0       	ldi	r25, 0x02	; 2
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <twi_writeTo+0xa6>
    2840:	93 e0       	ldi	r25, 0x03	; 3
    2842:	89 2f       	mov	r24, r25
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <twi_transmit>:
    2848:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <twi_txBufferLength>
    284c:	26 2f       	mov	r18, r22
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	24 0f       	add	r18, r20
    2852:	31 1d       	adc	r19, r1
    2854:	21 32       	cpi	r18, 0x21	; 33
    2856:	31 05       	cpc	r19, r1
    2858:	dc f4       	brge	.+54     	; 0x2890 <twi_transmit+0x48>
    285a:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <twi_state>
    285e:	24 30       	cpi	r18, 0x04	; 4
    2860:	c9 f4       	brne	.+50     	; 0x2894 <twi_transmit+0x4c>
    2862:	fc 01       	movw	r30, r24
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	86 17       	cp	r24, r22
    286a:	58 f4       	brcc	.+22     	; 0x2882 <twi_transmit+0x3a>
    286c:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <twi_txBufferLength>
    2870:	21 91       	ld	r18, Z+
    2872:	dc 01       	movw	r26, r24
    2874:	af 5d       	subi	r26, 0xDF	; 223
    2876:	bc 4f       	sbci	r27, 0xFC	; 252
    2878:	a3 0f       	add	r26, r19
    287a:	b1 1d       	adc	r27, r1
    287c:	2c 93       	st	X, r18
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	f3 cf       	rjmp	.-26     	; 0x2868 <twi_transmit+0x20>
    2882:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_txBufferLength>
    2886:	68 0f       	add	r22, r24
    2888:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <twi_txBufferLength>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	08 95       	ret
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	08 95       	ret
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	08 95       	ret

00002898 <twi_attachSlaveRxEvent>:
    2898:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <twi_onSlaveReceive+0x1>
    289c:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_onSlaveReceive>
    28a0:	08 95       	ret

000028a2 <twi_attachSlaveTxEvent>:
    28a2:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <twi_onSlaveTransmit+0x1>
    28a6:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_onSlaveTransmit>
    28aa:	08 95       	ret

000028ac <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    28ac:	85 ed       	ldi	r24, 0xD5	; 213
    28ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    28b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    28b6:	84 fd       	sbrc	r24, 4
    28b8:	fc cf       	rjmp	.-8      	; 0x28b2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    28ba:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    28be:	08 95       	ret

000028c0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    28c0:	85 ec       	ldi	r24, 0xC5	; 197
    28c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    28c6:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    28ca:	08 95       	ret

000028cc <__vector_24>:
}

ISR(TWI_vect)
{
    28cc:	1f 92       	push	r1
    28ce:	0f 92       	push	r0
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	0f 92       	push	r0
    28d4:	11 24       	eor	r1, r1
    28d6:	2f 93       	push	r18
    28d8:	3f 93       	push	r19
    28da:	4f 93       	push	r20
    28dc:	5f 93       	push	r21
    28de:	6f 93       	push	r22
    28e0:	7f 93       	push	r23
    28e2:	8f 93       	push	r24
    28e4:	9f 93       	push	r25
    28e6:	af 93       	push	r26
    28e8:	bf 93       	push	r27
    28ea:	ef 93       	push	r30
    28ec:	ff 93       	push	r31
  switch(TW_STATUS){
    28ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    28f2:	88 7f       	andi	r24, 0xF8	; 248
    28f4:	80 36       	cpi	r24, 0x60	; 96
    28f6:	09 f4       	brne	.+2      	; 0x28fa <__vector_24+0x2e>
    28f8:	9e c0       	rjmp	.+316    	; 0x2a36 <__vector_24+0x16a>
    28fa:	78 f5       	brcc	.+94     	; 0x295a <__vector_24+0x8e>
    28fc:	88 32       	cpi	r24, 0x28	; 40
    28fe:	09 f4       	brne	.+2      	; 0x2902 <__vector_24+0x36>
    2900:	5d c0       	rjmp	.+186    	; 0x29bc <__vector_24+0xf0>
    2902:	90 f4       	brcc	.+36     	; 0x2928 <__vector_24+0x5c>
    2904:	80 31       	cpi	r24, 0x10	; 16
    2906:	09 f4       	brne	.+2      	; 0x290a <__vector_24+0x3e>
    2908:	56 c0       	rjmp	.+172    	; 0x29b6 <__vector_24+0xea>
    290a:	38 f4       	brcc	.+14     	; 0x291a <__vector_24+0x4e>
    290c:	88 23       	and	r24, r24
    290e:	09 f4       	brne	.+2      	; 0x2912 <__vector_24+0x46>
    2910:	f5 c0       	rjmp	.+490    	; 0x2afc <__vector_24+0x230>
    2912:	88 30       	cpi	r24, 0x08	; 8
    2914:	09 f4       	brne	.+2      	; 0x2918 <__vector_24+0x4c>
    2916:	4f c0       	rjmp	.+158    	; 0x29b6 <__vector_24+0xea>
    2918:	f5 c0       	rjmp	.+490    	; 0x2b04 <__vector_24+0x238>
    291a:	88 31       	cpi	r24, 0x18	; 24
    291c:	09 f4       	brne	.+2      	; 0x2920 <__vector_24+0x54>
    291e:	4e c0       	rjmp	.+156    	; 0x29bc <__vector_24+0xf0>
    2920:	80 32       	cpi	r24, 0x20	; 32
    2922:	09 f4       	brne	.+2      	; 0x2926 <__vector_24+0x5a>
    2924:	5f c0       	rjmp	.+190    	; 0x29e4 <__vector_24+0x118>
    2926:	ee c0       	rjmp	.+476    	; 0x2b04 <__vector_24+0x238>
    2928:	80 34       	cpi	r24, 0x40	; 64
    292a:	09 f4       	brne	.+2      	; 0x292e <__vector_24+0x62>
    292c:	6a c0       	rjmp	.+212    	; 0x2a02 <__vector_24+0x136>
    292e:	58 f4       	brcc	.+22     	; 0x2946 <__vector_24+0x7a>
    2930:	80 33       	cpi	r24, 0x30	; 48
    2932:	09 f4       	brne	.+2      	; 0x2936 <__vector_24+0x6a>
    2934:	57 c0       	rjmp	.+174    	; 0x29e4 <__vector_24+0x118>
    2936:	88 33       	cpi	r24, 0x38	; 56
    2938:	09 f0       	breq	.+2      	; 0x293c <__vector_24+0x70>
    293a:	e4 c0       	rjmp	.+456    	; 0x2b04 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    293c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_error>
      twi_releaseBus();
    2940:	0e 94 60 14 	call	0x28c0	; 0x28c0 <twi_releaseBus>
      break;
    2944:	df c0       	rjmp	.+446    	; 0x2b04 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2946:	80 35       	cpi	r24, 0x50	; 80
    2948:	09 f4       	brne	.+2      	; 0x294c <__vector_24+0x80>
    294a:	4f c0       	rjmp	.+158    	; 0x29ea <__vector_24+0x11e>
    294c:	88 35       	cpi	r24, 0x58	; 88
    294e:	09 f4       	brne	.+2      	; 0x2952 <__vector_24+0x86>
    2950:	5d c0       	rjmp	.+186    	; 0x2a0c <__vector_24+0x140>
    2952:	88 34       	cpi	r24, 0x48	; 72
    2954:	09 f0       	breq	.+2      	; 0x2958 <__vector_24+0x8c>
    2956:	d6 c0       	rjmp	.+428    	; 0x2b04 <__vector_24+0x238>
    2958:	d3 c0       	rjmp	.+422    	; 0x2b00 <__vector_24+0x234>
    295a:	88 39       	cpi	r24, 0x98	; 152
    295c:	09 f4       	brne	.+2      	; 0x2960 <__vector_24+0x94>
    295e:	c4 c0       	rjmp	.+392    	; 0x2ae8 <__vector_24+0x21c>
    2960:	a8 f4       	brcc	.+42     	; 0x298c <__vector_24+0xc0>
    2962:	88 37       	cpi	r24, 0x78	; 120
    2964:	09 f4       	brne	.+2      	; 0x2968 <__vector_24+0x9c>
    2966:	67 c0       	rjmp	.+206    	; 0x2a36 <__vector_24+0x16a>
    2968:	38 f4       	brcc	.+14     	; 0x2978 <__vector_24+0xac>
    296a:	88 36       	cpi	r24, 0x68	; 104
    296c:	09 f4       	brne	.+2      	; 0x2970 <__vector_24+0xa4>
    296e:	63 c0       	rjmp	.+198    	; 0x2a36 <__vector_24+0x16a>
    2970:	80 37       	cpi	r24, 0x70	; 112
    2972:	09 f4       	brne	.+2      	; 0x2976 <__vector_24+0xaa>
    2974:	60 c0       	rjmp	.+192    	; 0x2a36 <__vector_24+0x16a>
    2976:	c6 c0       	rjmp	.+396    	; 0x2b04 <__vector_24+0x238>
    2978:	88 38       	cpi	r24, 0x88	; 136
    297a:	09 f4       	brne	.+2      	; 0x297e <__vector_24+0xb2>
    297c:	b5 c0       	rjmp	.+362    	; 0x2ae8 <__vector_24+0x21c>
    297e:	80 39       	cpi	r24, 0x90	; 144
    2980:	09 f4       	brne	.+2      	; 0x2984 <__vector_24+0xb8>
    2982:	5f c0       	rjmp	.+190    	; 0x2a42 <__vector_24+0x176>
    2984:	80 38       	cpi	r24, 0x80	; 128
    2986:	09 f0       	breq	.+2      	; 0x298a <__vector_24+0xbe>
    2988:	bd c0       	rjmp	.+378    	; 0x2b04 <__vector_24+0x238>
    298a:	5b c0       	rjmp	.+182    	; 0x2a42 <__vector_24+0x176>
    298c:	80 3b       	cpi	r24, 0xB0	; 176
    298e:	09 f4       	brne	.+2      	; 0x2992 <__vector_24+0xc6>
    2990:	83 c0       	rjmp	.+262    	; 0x2a98 <__vector_24+0x1cc>
    2992:	38 f4       	brcc	.+14     	; 0x29a2 <__vector_24+0xd6>
    2994:	80 3a       	cpi	r24, 0xA0	; 160
    2996:	09 f4       	brne	.+2      	; 0x299a <__vector_24+0xce>
    2998:	66 c0       	rjmp	.+204    	; 0x2a66 <__vector_24+0x19a>
    299a:	88 3a       	cpi	r24, 0xA8	; 168
    299c:	09 f4       	brne	.+2      	; 0x29a0 <__vector_24+0xd4>
    299e:	7c c0       	rjmp	.+248    	; 0x2a98 <__vector_24+0x1cc>
    29a0:	b1 c0       	rjmp	.+354    	; 0x2b04 <__vector_24+0x238>
    29a2:	80 3c       	cpi	r24, 0xC0	; 192
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <__vector_24+0xdc>
    29a6:	a4 c0       	rjmp	.+328    	; 0x2af0 <__vector_24+0x224>
    29a8:	88 3c       	cpi	r24, 0xC8	; 200
    29aa:	09 f4       	brne	.+2      	; 0x29ae <__vector_24+0xe2>
    29ac:	a1 c0       	rjmp	.+322    	; 0x2af0 <__vector_24+0x224>
    29ae:	88 3b       	cpi	r24, 0xB8	; 184
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <__vector_24+0xe8>
    29b2:	87 c0       	rjmp	.+270    	; 0x2ac2 <__vector_24+0x1f6>
    29b4:	a7 c0       	rjmp	.+334    	; 0x2b04 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    29b6:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_slarw>
    29ba:	10 c0       	rjmp	.+32     	; 0x29dc <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    29bc:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <twi_masterBufferIndex>
    29c0:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_masterBufferLength>
    29c4:	98 17       	cp	r25, r24
    29c6:	70 f5       	brcc	.+92     	; 0x2a24 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    29c8:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_masterBufferIndex>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	8e 0f       	add	r24, r30
    29d0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_masterBufferIndex>
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	ed 5b       	subi	r30, 0xBD	; 189
    29d8:	fc 4f       	sbci	r31, 0xFC	; 252
    29da:	80 81       	ld	r24, Z
    29dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    29e0:	85 ec       	ldi	r24, 0xC5	; 197
    29e2:	83 c0       	rjmp	.+262    	; 0x2aea <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    29e4:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_error>
    29e8:	8b c0       	rjmp	.+278    	; 0x2b00 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    29ea:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_masterBufferIndex>
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	8e 0f       	add	r24, r30
    29f2:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_masterBufferIndex>
    29f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	ed 5b       	subi	r30, 0xBD	; 189
    29fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2a00:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2a02:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2a06:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_masterBufferLength>
    2a0a:	6b c0       	rjmp	.+214    	; 0x2ae2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2a0c:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	8e 0f       	add	r24, r30
    2a14:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_masterBufferIndex>
    2a18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	ed 5b       	subi	r30, 0xBD	; 189
    2a20:	fc 4f       	sbci	r31, 0xFC	; 252
    2a22:	80 83       	st	Z, r24
	if (twi_sendStop)
    2a24:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <twi_sendStop>
    2a28:	81 11       	cpse	r24, r1
    2a2a:	6a c0       	rjmp	.+212    	; 0x2b00 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2a32:	84 ea       	ldi	r24, 0xA4	; 164
    2a34:	5e c0       	rjmp	.+188    	; 0x2af2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2a36:	83 e0       	ldi	r24, 0x03	; 3
    2a38:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2a3c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_rxBufferIndex>
    2a40:	cf cf       	rjmp	.-98     	; 0x29e0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2a42:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    2a46:	80 32       	cpi	r24, 0x20	; 32
    2a48:	08 f0       	brcs	.+2      	; 0x2a4c <__vector_24+0x180>
    2a4a:	4e c0       	rjmp	.+156    	; 0x2ae8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2a4c:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	8e 0f       	add	r24, r30
    2a54:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_rxBufferIndex>
    2a58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	e1 50       	subi	r30, 0x01	; 1
    2a60:	fd 4f       	sbci	r31, 0xFD	; 253
    2a62:	80 83       	st	Z, r24
    2a64:	bd cf       	rjmp	.-134    	; 0x29e0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2a66:	0e 94 60 14 	call	0x28c0	; 0x28c0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2a6a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    2a6e:	80 32       	cpi	r24, 0x20	; 32
    2a70:	30 f4       	brcc	.+12     	; 0x2a7e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2a72:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	e1 50       	subi	r30, 0x01	; 1
    2a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a7c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2a7e:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <twi_onSlaveReceive>
    2a88:	f0 91 64 03 	lds	r31, 0x0364	; 0x800364 <twi_onSlaveReceive+0x1>
    2a8c:	8f ef       	ldi	r24, 0xFF	; 255
    2a8e:	92 e0       	ldi	r25, 0x02	; 2
    2a90:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2a92:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_rxBufferIndex>
      break;
    2a96:	36 c0       	rjmp	.+108    	; 0x2b04 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2a98:	84 e0       	ldi	r24, 0x04	; 4
    2a9a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2a9e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2aa2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2aa6:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <twi_onSlaveTransmit>
    2aaa:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <twi_onSlaveTransmit+0x1>
    2aae:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ab0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_txBufferLength>
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	05 c0       	rjmp	.+10     	; 0x2ac2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2abe:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2ac2:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <twi_txBufferIndex>
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	8e 0f       	add	r24, r30
    2aca:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <twi_txBufferIndex>
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	ef 5d       	subi	r30, 0xDF	; 223
    2ad2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad4:	80 81       	ld	r24, Z
    2ad6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2ada:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <twi_txBufferIndex>
    2ade:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_txBufferLength>
    2ae2:	98 17       	cp	r25, r24
    2ae4:	08 f4       	brcc	.+2      	; 0x2ae8 <__vector_24+0x21c>
    2ae6:	7c cf       	rjmp	.-264    	; 0x29e0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2ae8:	85 e8       	ldi	r24, 0x85	; 133
    2aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2aee:	0a c0       	rjmp	.+20     	; 0x2b04 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2af0:	85 ec       	ldi	r24, 0xC5	; 197
    2af2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2af6:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
      break;
    2afa:	04 c0       	rjmp	.+8      	; 0x2b04 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2afc:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_error>
      twi_stop();
    2b00:	0e 94 56 14 	call	0x28ac	; 0x28ac <twi_stop>
      break;
  }
}
    2b04:	ff 91       	pop	r31
    2b06:	ef 91       	pop	r30
    2b08:	bf 91       	pop	r27
    2b0a:	af 91       	pop	r26
    2b0c:	9f 91       	pop	r25
    2b0e:	8f 91       	pop	r24
    2b10:	7f 91       	pop	r23
    2b12:	6f 91       	pop	r22
    2b14:	5f 91       	pop	r21
    2b16:	4f 91       	pop	r20
    2b18:	3f 91       	pop	r19
    2b1a:	2f 91       	pop	r18
    2b1c:	0f 90       	pop	r0
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	0f 90       	pop	r0
    2b22:	1f 90       	pop	r1
    2b24:	18 95       	reti

00002b26 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2b26:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2b30:	82 1b       	sub	r24, r18
    2b32:	91 09       	sbc	r25, r1
    2b34:	08 95       	ret

00002b36 <_ZN7TwoWire4readEv>:
    2b36:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2b3a:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2b3e:	98 17       	cp	r25, r24
    2b40:	50 f4       	brcc	.+20     	; 0x2b56 <_ZN7TwoWire4readEv+0x20>
    2b42:	e9 2f       	mov	r30, r25
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	ef 55       	subi	r30, 0x5F	; 95
    2b48:	fc 4f       	sbci	r31, 0xFC	; 252
    2b4a:	20 81       	ld	r18, Z
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	9f 5f       	subi	r25, 0xFF	; 255
    2b50:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <_ZN7TwoWire4readEv+0x24>
    2b56:	2f ef       	ldi	r18, 0xFF	; 255
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	c9 01       	movw	r24, r18
    2b5c:	08 95       	ret

00002b5e <_ZN7TwoWire4peekEv>:
    2b5e:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2b62:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2b66:	e8 17       	cp	r30, r24
    2b68:	30 f4       	brcc	.+12     	; 0x2b76 <_ZN7TwoWire4peekEv+0x18>
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	ef 55       	subi	r30, 0x5F	; 95
    2b6e:	fc 4f       	sbci	r31, 0xFC	; 252
    2b70:	80 81       	ld	r24, Z
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	08 95       	ret
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	9f ef       	ldi	r25, 0xFF	; 255
    2b7a:	08 95       	ret

00002b7c <_ZN7TwoWire5flushEv>:
    2b7c:	08 95       	ret

00002b7e <_ZN7TwoWire16onReceiveServiceEPhi>:
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	ec 01       	movw	r28, r24
    2b84:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <_ZN7TwoWire14user_onReceiveE>
    2b88:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <_ZN7TwoWire14user_onReceiveE+0x1>
    2b8c:	30 97       	sbiw	r30, 0x00	; 0
    2b8e:	f1 f0       	breq	.+60     	; 0x2bcc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2b90:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2b94:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2b98:	98 17       	cp	r25, r24
    2b9a:	c0 f0       	brcs	.+48     	; 0x2bcc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	29 2f       	mov	r18, r25
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	26 17       	cp	r18, r22
    2ba4:	37 07       	cpc	r19, r23
    2ba6:	54 f4       	brge	.+20     	; 0x2bbc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2ba8:	de 01       	movw	r26, r28
    2baa:	a2 0f       	add	r26, r18
    2bac:	b3 1f       	adc	r27, r19
    2bae:	4c 91       	ld	r20, X
    2bb0:	d9 01       	movw	r26, r18
    2bb2:	af 55       	subi	r26, 0x5F	; 95
    2bb4:	bc 4f       	sbci	r27, 0xFC	; 252
    2bb6:	4c 93       	st	X, r20
    2bb8:	9f 5f       	subi	r25, 0xFF	; 255
    2bba:	f1 cf       	rjmp	.-30     	; 0x2b9e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2bbc:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2bc0:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	09 94       	ijmp
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	08 95       	ret

00002bd2 <_ZN7TwoWire16onRequestServiceEv>:
    2bd2:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <_ZN7TwoWire14user_onRequestE>
    2bd6:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <_ZN7TwoWire14user_onRequestE+0x1>
    2bda:	30 97       	sbiw	r30, 0x00	; 0
    2bdc:	29 f0       	breq	.+10     	; 0x2be8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2bde:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2be2:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2be6:	09 94       	ijmp
    2be8:	08 95       	ret

00002bea <_ZN7TwoWire5writeEPKhj>:
    2bea:	cf 92       	push	r12
    2bec:	df 92       	push	r13
    2bee:	ef 92       	push	r14
    2bf0:	ff 92       	push	r15
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	7c 01       	movw	r14, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8a 01       	movw	r16, r20
    2c00:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire12transmittingE>
    2c04:	22 23       	and	r18, r18
    2c06:	89 f0       	breq	.+34     	; 0x2c2a <_ZN7TwoWire5writeEPKhj+0x40>
    2c08:	eb 01       	movw	r28, r22
    2c0a:	6b 01       	movw	r12, r22
    2c0c:	c4 0e       	add	r12, r20
    2c0e:	d5 1e       	adc	r13, r21
    2c10:	cc 15       	cp	r28, r12
    2c12:	dd 05       	cpc	r29, r13
    2c14:	69 f0       	breq	.+26     	; 0x2c30 <_ZN7TwoWire5writeEPKhj+0x46>
    2c16:	69 91       	ld	r22, Y+
    2c18:	d7 01       	movw	r26, r14
    2c1a:	ed 91       	ld	r30, X+
    2c1c:	fc 91       	ld	r31, X
    2c1e:	01 90       	ld	r0, Z+
    2c20:	f0 81       	ld	r31, Z
    2c22:	e0 2d       	mov	r30, r0
    2c24:	c7 01       	movw	r24, r14
    2c26:	09 95       	icall
    2c28:	f3 cf       	rjmp	.-26     	; 0x2c10 <_ZN7TwoWire5writeEPKhj+0x26>
    2c2a:	64 2f       	mov	r22, r20
    2c2c:	0e 94 24 14 	call	0x2848	; 0x2848 <twi_transmit>
    2c30:	c8 01       	movw	r24, r16
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	ff 90       	pop	r15
    2c3c:	ef 90       	pop	r14
    2c3e:	df 90       	pop	r13
    2c40:	cf 90       	pop	r12
    2c42:	08 95       	ret

00002c44 <_ZN7TwoWire5writeEh>:
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	1f 92       	push	r1
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	69 83       	std	Y+1, r22	; 0x01
    2c50:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire12transmittingE>
    2c54:	22 23       	and	r18, r18
    2c56:	d1 f0       	breq	.+52     	; 0x2c8c <_ZN7TwoWire5writeEh+0x48>
    2c58:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2c5c:	20 32       	cpi	r18, 0x20	; 32
    2c5e:	40 f0       	brcs	.+16     	; 0x2c70 <_ZN7TwoWire5writeEh+0x2c>
    2c60:	21 e0       	ldi	r18, 0x01	; 1
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	fc 01       	movw	r30, r24
    2c66:	33 83       	std	Z+3, r19	; 0x03
    2c68:	22 83       	std	Z+2, r18	; 0x02
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	15 c0       	rjmp	.+42     	; 0x2c9a <_ZN7TwoWire5writeEh+0x56>
    2c70:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2c74:	e8 2f       	mov	r30, r24
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	e2 58       	subi	r30, 0x82	; 130
    2c7a:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7c:	99 81       	ldd	r25, Y+1	; 0x01
    2c7e:	90 83       	st	Z, r25
    2c80:	8f 5f       	subi	r24, 0xFF	; 255
    2c82:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2c86:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2c8a:	05 c0       	rjmp	.+10     	; 0x2c96 <_ZN7TwoWire5writeEh+0x52>
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	ce 01       	movw	r24, r28
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	0e 94 24 14 	call	0x2848	; 0x2848 <twi_transmit>
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0f 90       	pop	r0
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <_ZN7TwoWireC1Ev>:
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	13 82       	std	Z+3, r1	; 0x03
    2ca6:	12 82       	std	Z+2, r1	; 0x02
    2ca8:	88 ee       	ldi	r24, 0xE8	; 232
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    2cac:	a0 e0       	ldi	r26, 0x00	; 0
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	84 83       	std	Z+4, r24	; 0x04
    2cb2:	95 83       	std	Z+5, r25	; 0x05
    2cb4:	a6 83       	std	Z+6, r26	; 0x06
    2cb6:	b7 83       	std	Z+7, r27	; 0x07
    2cb8:	86 e8       	ldi	r24, 0x86	; 134
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	80 83       	st	Z, r24
    2cc0:	08 95       	ret

00002cc2 <_ZN7TwoWire5beginEv>:
    2cc2:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2cc6:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2cca:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2cce:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2cd2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <twi_init>
    2cd6:	89 ee       	ldi	r24, 0xE9	; 233
    2cd8:	95 e1       	ldi	r25, 0x15	; 21
    2cda:	0e 94 51 14 	call	0x28a2	; 0x28a2 <twi_attachSlaveTxEvent>
    2cde:	8f eb       	ldi	r24, 0xBF	; 191
    2ce0:	95 e1       	ldi	r25, 0x15	; 21
    2ce2:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <twi_attachSlaveRxEvent>

00002ce6 <_ZN7TwoWire17beginTransmissionEh>:
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <_ZN7TwoWire12transmittingE>
    2cec:	60 93 9e 03 	sts	0x039E, r22	; 0x80039e <_ZN7TwoWire9txAddressE>
    2cf0:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2cf4:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2cf8:	08 95       	ret

00002cfa <_ZN7TwoWire17beginTransmissionEi>:
    2cfa:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <_ZN7TwoWire17beginTransmissionEh>

00002cfe <_ZN7TwoWire15endTransmissionEh>:
    2cfe:	0f 93       	push	r16
    2d00:	06 2f       	mov	r16, r22
    2d02:	21 e0       	ldi	r18, 0x01	; 1
    2d04:	40 91 7c 03 	lds	r20, 0x037C	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2d08:	6e e7       	ldi	r22, 0x7E	; 126
    2d0a:	73 e0       	ldi	r23, 0x03	; 3
    2d0c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_ZN7TwoWire9txAddressE>
    2d10:	0e 94 ce 13 	call	0x279c	; 0x279c <twi_writeTo>
    2d14:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2d18:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2d1c:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire12transmittingE>
    2d20:	0f 91       	pop	r16
    2d22:	08 95       	ret

00002d24 <_ZN7TwoWire11requestFromEhhmhh>:
    2d24:	4f 92       	push	r4
    2d26:	5f 92       	push	r5
    2d28:	6f 92       	push	r6
    2d2a:	7f 92       	push	r7
    2d2c:	af 92       	push	r10
    2d2e:	bf 92       	push	r11
    2d30:	cf 92       	push	r12
    2d32:	ef 92       	push	r14
    2d34:	ff 92       	push	r15
    2d36:	0f 93       	push	r16
    2d38:	1f 93       	push	r17
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	5c 01       	movw	r10, r24
    2d40:	f6 2e       	mov	r15, r22
    2d42:	d4 2f       	mov	r29, r20
    2d44:	28 01       	movw	r4, r16
    2d46:	39 01       	movw	r6, r18
    2d48:	ee 20       	and	r14, r14
    2d4a:	21 f1       	breq	.+72     	; 0x2d94 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2d4c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN7TwoWire17beginTransmissionEh>
    2d50:	ce 2d       	mov	r28, r14
    2d52:	c4 30       	cpi	r28, 0x04	; 4
    2d54:	08 f0       	brcs	.+2      	; 0x2d58 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2d56:	c3 e0       	ldi	r28, 0x03	; 3
    2d58:	c1 50       	subi	r28, 0x01	; 1
    2d5a:	c0 f0       	brcs	.+48     	; 0x2d8c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2d5c:	28 e0       	ldi	r18, 0x08	; 8
    2d5e:	c2 9f       	mul	r28, r18
    2d60:	c0 01       	movw	r24, r0
    2d62:	11 24       	eor	r1, r1
    2d64:	a3 01       	movw	r20, r6
    2d66:	92 01       	movw	r18, r4
    2d68:	04 c0       	rjmp	.+8      	; 0x2d72 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2d6a:	56 95       	lsr	r21
    2d6c:	47 95       	ror	r20
    2d6e:	37 95       	ror	r19
    2d70:	27 95       	ror	r18
    2d72:	8a 95       	dec	r24
    2d74:	d2 f7       	brpl	.-12     	; 0x2d6a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2d76:	ca 01       	movw	r24, r20
    2d78:	b9 01       	movw	r22, r18
    2d7a:	d5 01       	movw	r26, r10
    2d7c:	ed 91       	ld	r30, X+
    2d7e:	fc 91       	ld	r31, X
    2d80:	01 90       	ld	r0, Z+
    2d82:	f0 81       	ld	r31, Z
    2d84:	e0 2d       	mov	r30, r0
    2d86:	c5 01       	movw	r24, r10
    2d88:	09 95       	icall
    2d8a:	e6 cf       	rjmp	.-52     	; 0x2d58 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	c5 01       	movw	r24, r10
    2d90:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN7TwoWire15endTransmissionEh>
    2d94:	4d 2f       	mov	r20, r29
    2d96:	d1 32       	cpi	r29, 0x21	; 33
    2d98:	08 f0       	brcs	.+2      	; 0x2d9c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2d9a:	40 e2       	ldi	r20, 0x20	; 32
    2d9c:	2c 2d       	mov	r18, r12
    2d9e:	61 ea       	ldi	r22, 0xA1	; 161
    2da0:	73 e0       	ldi	r23, 0x03	; 3
    2da2:	8f 2d       	mov	r24, r15
    2da4:	0e 94 86 13 	call	0x270c	; 0x270c <twi_readFrom>
    2da8:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2dac:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	cf 90       	pop	r12
    2dbe:	bf 90       	pop	r11
    2dc0:	af 90       	pop	r10
    2dc2:	7f 90       	pop	r7
    2dc4:	6f 90       	pop	r6
    2dc6:	5f 90       	pop	r5
    2dc8:	4f 90       	pop	r4
    2dca:	08 95       	ret

00002dcc <_ZN7TwoWire11requestFromEhhh>:
    2dcc:	cf 92       	push	r12
    2dce:	ef 92       	push	r14
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	c2 2e       	mov	r12, r18
    2dd6:	e1 2c       	mov	r14, r1
    2dd8:	00 e0       	ldi	r16, 0x00	; 0
    2dda:	10 e0       	ldi	r17, 0x00	; 0
    2ddc:	98 01       	movw	r18, r16
    2dde:	0e 94 92 16 	call	0x2d24	; 0x2d24 <_ZN7TwoWire11requestFromEhhmhh>
    2de2:	1f 91       	pop	r17
    2de4:	0f 91       	pop	r16
    2de6:	ef 90       	pop	r14
    2de8:	cf 90       	pop	r12
    2dea:	08 95       	ret

00002dec <_ZN7TwoWire11requestFromEii>:
    2dec:	21 e0       	ldi	r18, 0x01	; 1
    2dee:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <_ZN7TwoWire11requestFromEhhh>

00002df2 <_ZN7TwoWire15endTransmissionEv>:
    2df2:	61 e0       	ldi	r22, 0x01	; 1
    2df4:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <_ZN7TwoWire15endTransmissionEh>

00002df8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2df8:	8b e6       	ldi	r24, 0x6B	; 107
    2dfa:	93 e0       	ldi	r25, 0x03	; 3
    2dfc:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <_ZN7TwoWireC1Ev>

00002e00 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    2e00:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2e04:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2e08:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    2e0c:	63 e4       	ldi	r22, 0x43	; 67
    2e0e:	76 e0       	ldi	r23, 0x06	; 6
    2e10:	83 ec       	ldi	r24, 0xC3	; 195
    2e12:	93 e0       	ldi	r25, 0x03	; 3
    2e14:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>

00002e18 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	eb 01       	movw	r28, r22
	
#if IS_EXTENDED_GSM_TEST == true

    Serial.println(F("****"));
    2e1e:	6e e3       	ldi	r22, 0x3E	; 62
    2e20:	76 e0       	ldi	r23, 0x06	; 6
    2e22:	83 ec       	ldi	r24, 0xC3	; 195
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    2e2a:	84 e1       	ldi	r24, 0x14	; 20
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <malloc>
    2e32:	fc 01       	movw	r30, r24
    2e34:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <_mockData+0x1>
    2e38:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	92 83       	std	Z+2, r25	; 0x02
    2e42:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    2e44:	8a e0       	ldi	r24, 0x0A	; 10
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	96 83       	std	Z+6, r25	; 0x06
    2e4a:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    2e4c:	84 e6       	ldi	r24, 0x64	; 100
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	94 83       	std	Z+4, r25	; 0x04
    2e52:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    2e54:	83 e3       	ldi	r24, 0x33	; 51
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	90 87       	std	Z+8, r25	; 0x08
    2e5a:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2e5c:	83 e0       	ldi	r24, 0x03	; 3
    2e5e:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	94 87       	std	Z+12, r25	; 0x0c
    2e66:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    2e68:	84 e1       	ldi	r24, 0x14	; 20
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	90 8b       	std	Z+16, r25	; 0x10
    2e6e:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    2e70:	88 ec       	ldi	r24, 0xC8	; 200
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	96 87       	std	Z+14, r25	; 0x0e
    2e76:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    2e78:	84 e3       	ldi	r24, 0x34	; 52
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	92 8b       	std	Z+18, r25	; 0x12
    2e7e:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    2e80:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    2e82:	67 e1       	ldi	r22, 0x17	; 23
    2e84:	76 e0       	ldi	r23, 0x06	; 6
    2e86:	83 ec       	ldi	r24, 0xC3	; 195
    2e88:	93 e0       	ldi	r25, 0x03	; 3
    2e8a:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    2e8e:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2e92:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2e96:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    2e9a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2e9e:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2ea2:	0a 96       	adiw	r24, 0x0a	; 10
    2ea4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    2ea8:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2eac:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2eb0:	99 83       	std	Y+1, r25	; 0x01
    2eb2:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	08 95       	ret

00002ebe <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2ebe:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2ec0:	91 8d       	ldd	r25, Z+25	; 0x19
    2ec2:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ec4:	89 2f       	mov	r24, r25
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	80 5c       	subi	r24, 0xC0	; 192
    2eca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ecc:	82 1b       	sub	r24, r18
    2ece:	91 09       	sbc	r25, r1
}
    2ed0:	8f 73       	andi	r24, 0x3F	; 63
    2ed2:	99 27       	eor	r25, r25
    2ed4:	08 95       	ret

00002ed6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2ed6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2ed8:	91 8d       	ldd	r25, Z+25	; 0x19
    2eda:	82 8d       	ldd	r24, Z+26	; 0x1a
    2edc:	98 17       	cp	r25, r24
    2ede:	31 f0       	breq	.+12     	; 0x2eec <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2ee0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ee2:	e8 0f       	add	r30, r24
    2ee4:	f1 1d       	adc	r31, r1
    2ee6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2eec:	8f ef       	ldi	r24, 0xFF	; 255
    2eee:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2ef0:	08 95       	ret

00002ef2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2ef2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2ef4:	91 8d       	ldd	r25, Z+25	; 0x19
    2ef6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ef8:	98 17       	cp	r25, r24
    2efa:	61 f0       	breq	.+24     	; 0x2f14 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2efc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2efe:	df 01       	movw	r26, r30
    2f00:	a8 0f       	add	r26, r24
    2f02:	b1 1d       	adc	r27, r1
    2f04:	5d 96       	adiw	r26, 0x1d	; 29
    2f06:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2f08:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f0a:	9f 5f       	subi	r25, 0xFF	; 255
    2f0c:	9f 73       	andi	r25, 0x3F	; 63
    2f0e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2f14:	8f ef       	ldi	r24, 0xFF	; 255
    2f16:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2f18:	08 95       	ret

00002f1a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2f1a:	82 ee       	ldi	r24, 0xE2	; 226
    2f1c:	98 e1       	ldi	r25, 0x18	; 24
    2f1e:	89 2b       	or	r24, r25
    2f20:	49 f0       	breq	.+18     	; 0x2f34 <_Z14serialEventRunv+0x1a>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	89 2b       	or	r24, r25
    2f28:	29 f0       	breq	.+10     	; 0x2f34 <_Z14serialEventRunv+0x1a>
    2f2a:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <_Z17Serial0_availablev>
    2f2e:	81 11       	cpse	r24, r1
    2f30:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2f34:	08 95       	ret

00002f36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2f36:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2f38:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f3a:	df 01       	movw	r26, r30
    2f3c:	a8 0f       	add	r26, r24
    2f3e:	b1 1d       	adc	r27, r1
    2f40:	a3 5a       	subi	r26, 0xA3	; 163
    2f42:	bf 4f       	sbci	r27, 0xFF	; 255
    2f44:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2f46:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    2f4c:	8f 73       	andi	r24, 0x3F	; 63
    2f4e:	99 27       	eor	r25, r25
    2f50:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2f52:	a6 89       	ldd	r26, Z+22	; 0x16
    2f54:	b7 89       	ldd	r27, Z+23	; 0x17
    2f56:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2f58:	a0 89       	ldd	r26, Z+16	; 0x10
    2f5a:	b1 89       	ldd	r27, Z+17	; 0x11
    2f5c:	8c 91       	ld	r24, X
    2f5e:	80 64       	ori	r24, 0x40	; 64
    2f60:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2f62:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f64:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f66:	98 13       	cpse	r25, r24
    2f68:	06 c0       	rjmp	.+12     	; 0x2f76 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2f6a:	02 88       	ldd	r0, Z+18	; 0x12
    2f6c:	f3 89       	ldd	r31, Z+19	; 0x13
    2f6e:	e0 2d       	mov	r30, r0
    2f70:	80 81       	ld	r24, Z
    2f72:	8f 7d       	andi	r24, 0xDF	; 223
    2f74:	80 83       	st	Z, r24
    2f76:	08 95       	ret

00002f78 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2f78:	ef 92       	push	r14
    2f7a:	ff 92       	push	r15
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	ec 01       	movw	r28, r24
  _written = true;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2f8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f8e:	98 13       	cpse	r25, r24
    2f90:	05 c0       	rjmp	.+10     	; 0x2f9c <_ZN14HardwareSerial5writeEh+0x24>
    2f92:	e8 89       	ldd	r30, Y+16	; 0x10
    2f94:	f9 89       	ldd	r31, Y+17	; 0x11
    2f96:	80 81       	ld	r24, Z
    2f98:	85 fd       	sbrc	r24, 5
    2f9a:	24 c0       	rjmp	.+72     	; 0x2fe4 <_ZN14HardwareSerial5writeEh+0x6c>
    2f9c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2f9e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2fa0:	10 e0       	ldi	r17, 0x00	; 0
    2fa2:	0f 5f       	subi	r16, 0xFF	; 255
    2fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa6:	0f 73       	andi	r16, 0x3F	; 63
    2fa8:	11 27       	eor	r17, r17
    2faa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2fac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fae:	e8 12       	cpse	r14, r24
    2fb0:	0c c0       	rjmp	.+24     	; 0x2fca <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	07 fc       	sbrc	r0, 7
    2fb6:	fa cf       	rjmp	.-12     	; 0x2fac <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2fb8:	e8 89       	ldd	r30, Y+16	; 0x10
    2fba:	f9 89       	ldd	r31, Y+17	; 0x11
    2fbc:	80 81       	ld	r24, Z
    2fbe:	85 ff       	sbrs	r24, 5
    2fc0:	f5 cf       	rjmp	.-22     	; 0x2fac <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2fc8:	f1 cf       	rjmp	.-30     	; 0x2fac <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e8 0f       	add	r30, r24
    2fd0:	f1 1d       	adc	r31, r1
    2fd2:	e3 5a       	subi	r30, 0xA3	; 163
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2fd8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2fda:	ea 89       	ldd	r30, Y+18	; 0x12
    2fdc:	fb 89       	ldd	r31, Y+19	; 0x13
    2fde:	80 81       	ld	r24, Z
    2fe0:	80 62       	ori	r24, 0x20	; 32
    2fe2:	07 c0       	rjmp	.+14     	; 0x2ff2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2fe4:	ee 89       	ldd	r30, Y+22	; 0x16
    2fe6:	ff 89       	ldd	r31, Y+23	; 0x17
    2fe8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2fea:	e8 89       	ldd	r30, Y+16	; 0x10
    2fec:	f9 89       	ldd	r31, Y+17	; 0x11
    2fee:	80 81       	ld	r24, Z
    2ff0:	80 64       	ori	r24, 0x40	; 64
    2ff2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	ef 90       	pop	r14
    3004:	08 95       	ret

00003006 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    300c:	88 8d       	ldd	r24, Y+24	; 0x18
    300e:	88 23       	and	r24, r24
    3010:	c9 f0       	breq	.+50     	; 0x3044 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3012:	ea 89       	ldd	r30, Y+18	; 0x12
    3014:	fb 89       	ldd	r31, Y+19	; 0x13
    3016:	80 81       	ld	r24, Z
    3018:	85 fd       	sbrc	r24, 5
    301a:	05 c0       	rjmp	.+10     	; 0x3026 <_ZN14HardwareSerial5flushEv+0x20>
    301c:	a8 89       	ldd	r26, Y+16	; 0x10
    301e:	b9 89       	ldd	r27, Y+17	; 0x11
    3020:	8c 91       	ld	r24, X
    3022:	86 fd       	sbrc	r24, 6
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	07 fc       	sbrc	r0, 7
    302a:	f5 cf       	rjmp	.-22     	; 0x3016 <_ZN14HardwareSerial5flushEv+0x10>
    302c:	80 81       	ld	r24, Z
    302e:	85 ff       	sbrs	r24, 5
    3030:	f2 cf       	rjmp	.-28     	; 0x3016 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3032:	a8 89       	ldd	r26, Y+16	; 0x10
    3034:	b9 89       	ldd	r27, Y+17	; 0x11
    3036:	8c 91       	ld	r24, X
    3038:	85 ff       	sbrs	r24, 5
    303a:	ed cf       	rjmp	.-38     	; 0x3016 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    303c:	ce 01       	movw	r24, r28
    303e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3042:	e7 cf       	rjmp	.-50     	; 0x3012 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	08 95       	ret

0000304a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	1f 93       	push	r17
    3054:	cf 93       	push	r28
    3056:	df 93       	push	r29
    3058:	ec 01       	movw	r28, r24
    305a:	6a 01       	movw	r12, r20
    305c:	7b 01       	movw	r14, r22
    305e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3060:	e8 89       	ldd	r30, Y+16	; 0x10
    3062:	f9 89       	ldd	r31, Y+17	; 0x11
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3068:	41 15       	cp	r20, r1
    306a:	51 4e       	sbci	r21, 0xE1	; 225
    306c:	61 05       	cpc	r22, r1
    306e:	71 05       	cpc	r23, r1
    3070:	b1 f0       	breq	.+44     	; 0x309e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	79 e0       	ldi	r23, 0x09	; 9
    3076:	8d e3       	ldi	r24, 0x3D	; 61
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a7 01       	movw	r20, r14
    307c:	96 01       	movw	r18, r12
    307e:	0e 94 19 20 	call	0x4032	; 0x4032 <__udivmodsi4>
    3082:	da 01       	movw	r26, r20
    3084:	c9 01       	movw	r24, r18
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	a1 09       	sbc	r26, r1
    308a:	b1 09       	sbc	r27, r1
    308c:	b6 95       	lsr	r27
    308e:	a7 95       	ror	r26
    3090:	97 95       	ror	r25
    3092:	87 95       	ror	r24
    3094:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3096:	21 15       	cp	r18, r1
    3098:	80 e1       	ldi	r24, 0x10	; 16
    309a:	38 07       	cpc	r19, r24
    309c:	a8 f0       	brcs	.+42     	; 0x30c8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    309e:	e8 89       	ldd	r30, Y+16	; 0x10
    30a0:	f9 89       	ldd	r31, Y+17	; 0x11
    30a2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    30a4:	60 e8       	ldi	r22, 0x80	; 128
    30a6:	74 e8       	ldi	r23, 0x84	; 132
    30a8:	8e e1       	ldi	r24, 0x1E	; 30
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a7 01       	movw	r20, r14
    30ae:	96 01       	movw	r18, r12
    30b0:	0e 94 19 20 	call	0x4032	; 0x4032 <__udivmodsi4>
    30b4:	da 01       	movw	r26, r20
    30b6:	c9 01       	movw	r24, r18
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	a1 09       	sbc	r26, r1
    30bc:	b1 09       	sbc	r27, r1
    30be:	b6 95       	lsr	r27
    30c0:	a7 95       	ror	r26
    30c2:	97 95       	ror	r25
    30c4:	87 95       	ror	r24
    30c6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    30c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    30ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    30cc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    30ce:	ee 85       	ldd	r30, Y+14	; 0x0e
    30d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    30d2:	20 83       	st	Z, r18

  _written = false;
    30d4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    30d6:	ec 89       	ldd	r30, Y+20	; 0x14
    30d8:	fd 89       	ldd	r31, Y+21	; 0x15
    30da:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    30dc:	ea 89       	ldd	r30, Y+18	; 0x12
    30de:	fb 89       	ldd	r31, Y+19	; 0x13
    30e0:	80 81       	ld	r24, Z
    30e2:	80 61       	ori	r24, 0x10	; 16
    30e4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    30e6:	ea 89       	ldd	r30, Y+18	; 0x12
    30e8:	fb 89       	ldd	r31, Y+19	; 0x13
    30ea:	80 81       	ld	r24, Z
    30ec:	88 60       	ori	r24, 0x08	; 8
    30ee:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    30f0:	ea 89       	ldd	r30, Y+18	; 0x12
    30f2:	fb 89       	ldd	r31, Y+19	; 0x13
    30f4:	80 81       	ld	r24, Z
    30f6:	80 68       	ori	r24, 0x80	; 128
    30f8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    30fa:	ea 89       	ldd	r30, Y+18	; 0x12
    30fc:	fb 89       	ldd	r31, Y+19	; 0x13
    30fe:	80 81       	ld	r24, Z
    3100:	8f 7d       	andi	r24, 0xDF	; 223
    3102:	80 83       	st	Z, r24
}
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	1f 91       	pop	r17
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	08 95       	ret

00003114 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3114:	1f 92       	push	r1
    3116:	0f 92       	push	r0
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	0f 92       	push	r0
    311c:	11 24       	eor	r1, r1
    311e:	2f 93       	push	r18
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	ef 93       	push	r30
    3126:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3128:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <Serial+0x10>
    312c:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <Serial+0x11>
    3130:	80 81       	ld	r24, Z
    3132:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <Serial+0x16>
    3136:	f0 91 da 03 	lds	r31, 0x03DA	; 0x8003da <Serial+0x17>
    313a:	82 fd       	sbrc	r24, 2
    313c:	12 c0       	rjmp	.+36     	; 0x3162 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    313e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3140:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <Serial+0x19>
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3148:	20 91 dd 03 	lds	r18, 0x03DD	; 0x8003dd <Serial+0x1a>
    314c:	82 17       	cp	r24, r18
    314e:	51 f0       	breq	.+20     	; 0x3164 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3150:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <Serial+0x19>
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	ed 53       	subi	r30, 0x3D	; 61
    3158:	fc 4f       	sbci	r31, 0xFC	; 252
    315a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    315c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <Serial+0x19>
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3162:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3164:	ff 91       	pop	r31
    3166:	ef 91       	pop	r30
    3168:	9f 91       	pop	r25
    316a:	8f 91       	pop	r24
    316c:	2f 91       	pop	r18
    316e:	0f 90       	pop	r0
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	0f 90       	pop	r0
    3174:	1f 90       	pop	r1
    3176:	18 95       	reti

00003178 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3178:	1f 92       	push	r1
    317a:	0f 92       	push	r0
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	0f 92       	push	r0
    3180:	11 24       	eor	r1, r1
    3182:	2f 93       	push	r18
    3184:	3f 93       	push	r19
    3186:	4f 93       	push	r20
    3188:	5f 93       	push	r21
    318a:	6f 93       	push	r22
    318c:	7f 93       	push	r23
    318e:	8f 93       	push	r24
    3190:	9f 93       	push	r25
    3192:	af 93       	push	r26
    3194:	bf 93       	push	r27
    3196:	ef 93       	push	r30
    3198:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    319a:	83 ec       	ldi	r24, 0xC3	; 195
    319c:	93 e0       	ldi	r25, 0x03	; 3
    319e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    31a2:	ff 91       	pop	r31
    31a4:	ef 91       	pop	r30
    31a6:	bf 91       	pop	r27
    31a8:	af 91       	pop	r26
    31aa:	9f 91       	pop	r25
    31ac:	8f 91       	pop	r24
    31ae:	7f 91       	pop	r23
    31b0:	6f 91       	pop	r22
    31b2:	5f 91       	pop	r21
    31b4:	4f 91       	pop	r20
    31b6:	3f 91       	pop	r19
    31b8:	2f 91       	pop	r18
    31ba:	0f 90       	pop	r0
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	0f 90       	pop	r0
    31c0:	1f 90       	pop	r1
    31c2:	18 95       	reti

000031c4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    31c4:	83 ec       	ldi	r24, 0xC3	; 195
    31c6:	93 e0       	ldi	r25, 0x03	; 3
    31c8:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <_ZN14HardwareSerial9availableEv>
    31cc:	21 e0       	ldi	r18, 0x01	; 1
    31ce:	89 2b       	or	r24, r25
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <_Z17Serial0_availablev+0x10>
    31d2:	20 e0       	ldi	r18, 0x00	; 0
}
    31d4:	82 2f       	mov	r24, r18
    31d6:	08 95       	ret

000031d8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    31d8:	e3 ec       	ldi	r30, 0xC3	; 195
    31da:	f3 e0       	ldi	r31, 0x03	; 3
    31dc:	13 82       	std	Z+3, r1	; 0x03
    31de:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    31e0:	88 ee       	ldi	r24, 0xE8	; 232
    31e2:	93 e0       	ldi	r25, 0x03	; 3
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	84 83       	std	Z+4, r24	; 0x04
    31ea:	95 83       	std	Z+5, r25	; 0x05
    31ec:	a6 83       	std	Z+6, r26	; 0x06
    31ee:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    31f0:	86 e9       	ldi	r24, 0x96	; 150
    31f2:	91 e0       	ldi	r25, 0x01	; 1
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
    31f8:	85 ec       	ldi	r24, 0xC5	; 197
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	95 87       	std	Z+13, r25	; 0x0d
    31fe:	84 87       	std	Z+12, r24	; 0x0c
    3200:	84 ec       	ldi	r24, 0xC4	; 196
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	97 87       	std	Z+15, r25	; 0x0f
    3206:	86 87       	std	Z+14, r24	; 0x0e
    3208:	80 ec       	ldi	r24, 0xC0	; 192
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	91 8b       	std	Z+17, r25	; 0x11
    320e:	80 8b       	std	Z+16, r24	; 0x10
    3210:	81 ec       	ldi	r24, 0xC1	; 193
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	93 8b       	std	Z+19, r25	; 0x13
    3216:	82 8b       	std	Z+18, r24	; 0x12
    3218:	82 ec       	ldi	r24, 0xC2	; 194
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	95 8b       	std	Z+21, r25	; 0x15
    321e:	84 8b       	std	Z+20, r24	; 0x14
    3220:	86 ec       	ldi	r24, 0xC6	; 198
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	97 8b       	std	Z+23, r25	; 0x17
    3226:	86 8b       	std	Z+22, r24	; 0x16
    3228:	11 8e       	std	Z+25, r1	; 0x19
    322a:	12 8e       	std	Z+26, r1	; 0x1a
    322c:	13 8e       	std	Z+27, r1	; 0x1b
    322e:	14 8e       	std	Z+28, r1	; 0x1c
    3230:	08 95       	ret

00003232 <initVariant>:
    3232:	08 95       	ret

00003234 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3234:	0e 94 96 1b 	call	0x372c	; 0x372c <init>

	initVariant();
    3238:	0e 94 19 19 	call	0x3232	; 0x3232 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    323c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3240:	cd e8       	ldi	r28, 0x8D	; 141
    3242:	d7 e1       	ldi	r29, 0x17	; 23
#endif
	
	setup();
    
	for (;;) {
		loop();
    3244:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <loop>
		if (serialEventRun) serialEventRun();
    3248:	20 97       	sbiw	r28, 0x00	; 0
    324a:	e1 f3       	breq	.-8      	; 0x3244 <main+0x10>
    324c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_Z14serialEventRunv>
    3250:	f9 cf       	rjmp	.-14     	; 0x3244 <main+0x10>

00003252 <_Znwj>:
    3252:	0c 94 60 20 	jmp	0x40c0	; 0x40c0 <malloc>

00003256 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    3256:	cf 92       	push	r12
    3258:	df 92       	push	r13
    325a:	ef 92       	push	r14
    325c:	ff 92       	push	r15
    325e:	0f 93       	push	r16
    3260:	1f 93       	push	r17
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	6c 01       	movw	r12, r24
    3268:	7a 01       	movw	r14, r20
    326a:	8b 01       	movw	r16, r22
    326c:	c0 e0       	ldi	r28, 0x00	; 0
    326e:	d0 e0       	ldi	r29, 0x00	; 0
    3270:	ce 15       	cp	r28, r14
    3272:	df 05       	cpc	r29, r15
    3274:	81 f0       	breq	.+32     	; 0x3296 <_ZN5Print5writeEPKhj+0x40>
    3276:	d8 01       	movw	r26, r16
    3278:	6d 91       	ld	r22, X+
    327a:	8d 01       	movw	r16, r26
    327c:	d6 01       	movw	r26, r12
    327e:	ed 91       	ld	r30, X+
    3280:	fc 91       	ld	r31, X
    3282:	01 90       	ld	r0, Z+
    3284:	f0 81       	ld	r31, Z
    3286:	e0 2d       	mov	r30, r0
    3288:	c6 01       	movw	r24, r12
    328a:	09 95       	icall
    328c:	89 2b       	or	r24, r25
    328e:	11 f0       	breq	.+4      	; 0x3294 <_ZN5Print5writeEPKhj+0x3e>
    3290:	21 96       	adiw	r28, 0x01	; 1
    3292:	ee cf       	rjmp	.-36     	; 0x3270 <_ZN5Print5writeEPKhj+0x1a>
    3294:	7e 01       	movw	r14, r28
    3296:	c7 01       	movw	r24, r14
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	08 95       	ret

000032aa <_ZN5Print5writeEPKc>:
    32aa:	61 15       	cp	r22, r1
    32ac:	71 05       	cpc	r23, r1
    32ae:	79 f0       	breq	.+30     	; 0x32ce <_ZN5Print5writeEPKc+0x24>
    32b0:	fb 01       	movw	r30, r22
    32b2:	01 90       	ld	r0, Z+
    32b4:	00 20       	and	r0, r0
    32b6:	e9 f7       	brne	.-6      	; 0x32b2 <_ZN5Print5writeEPKc+0x8>
    32b8:	31 97       	sbiw	r30, 0x01	; 1
    32ba:	af 01       	movw	r20, r30
    32bc:	46 1b       	sub	r20, r22
    32be:	57 0b       	sbc	r21, r23
    32c0:	dc 01       	movw	r26, r24
    32c2:	ed 91       	ld	r30, X+
    32c4:	fc 91       	ld	r31, X
    32c6:	02 80       	ldd	r0, Z+2	; 0x02
    32c8:	f3 81       	ldd	r31, Z+3	; 0x03
    32ca:	e0 2d       	mov	r30, r0
    32cc:	09 94       	ijmp
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	08 95       	ret

000032d4 <_ZN5Print5printEPK19__FlashStringHelper>:
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	8c 01       	movw	r16, r24
    32e2:	7b 01       	movw	r14, r22
    32e4:	c0 e0       	ldi	r28, 0x00	; 0
    32e6:	d0 e0       	ldi	r29, 0x00	; 0
    32e8:	f7 01       	movw	r30, r14
    32ea:	ec 0f       	add	r30, r28
    32ec:	fd 1f       	adc	r31, r29
    32ee:	64 91       	lpm	r22, Z
    32f0:	66 23       	and	r22, r22
    32f2:	61 f0       	breq	.+24     	; 0x330c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    32f4:	d8 01       	movw	r26, r16
    32f6:	ed 91       	ld	r30, X+
    32f8:	fc 91       	ld	r31, X
    32fa:	01 90       	ld	r0, Z+
    32fc:	f0 81       	ld	r31, Z
    32fe:	e0 2d       	mov	r30, r0
    3300:	c8 01       	movw	r24, r16
    3302:	09 95       	icall
    3304:	89 2b       	or	r24, r25
    3306:	11 f0       	breq	.+4      	; 0x330c <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3308:	21 96       	adiw	r28, 0x01	; 1
    330a:	ee cf       	rjmp	.-36     	; 0x32e8 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    330c:	ce 01       	movw	r24, r28
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	08 95       	ret

0000331c <_ZN5Print5printERK6String>:
    331c:	db 01       	movw	r26, r22
    331e:	14 96       	adiw	r26, 0x04	; 4
    3320:	4d 91       	ld	r20, X+
    3322:	5c 91       	ld	r21, X
    3324:	15 97       	sbiw	r26, 0x05	; 5
    3326:	6d 91       	ld	r22, X+
    3328:	7c 91       	ld	r23, X
    332a:	dc 01       	movw	r26, r24
    332c:	ed 91       	ld	r30, X+
    332e:	fc 91       	ld	r31, X
    3330:	02 80       	ldd	r0, Z+2	; 0x02
    3332:	f3 81       	ldd	r31, Z+3	; 0x03
    3334:	e0 2d       	mov	r30, r0
    3336:	09 94       	ijmp

00003338 <_ZN5Print5printEPKc>:
    3338:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <_ZN5Print5writeEPKc>

0000333c <_ZN5Print5printEc>:
    333c:	dc 01       	movw	r26, r24
    333e:	ed 91       	ld	r30, X+
    3340:	fc 91       	ld	r31, X
    3342:	01 90       	ld	r0, Z+
    3344:	f0 81       	ld	r31, Z
    3346:	e0 2d       	mov	r30, r0
    3348:	09 94       	ijmp

0000334a <_ZN5Print7printlnEv>:
    334a:	62 ea       	ldi	r22, 0xA2	; 162
    334c:	71 e0       	ldi	r23, 0x01	; 1
    334e:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <_ZN5Print5writeEPKc>

00003352 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    3352:	0f 93       	push	r16
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	ec 01       	movw	r28, r24
    335c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN5Print5printEPK19__FlashStringHelper>
    3360:	8c 01       	movw	r16, r24
    3362:	ce 01       	movw	r24, r28
    3364:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
    3368:	80 0f       	add	r24, r16
    336a:	91 1f       	adc	r25, r17
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	08 95       	ret

00003376 <_ZN5Print7printlnEPKc>:
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
    3380:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5writeEPKc>
    3384:	8c 01       	movw	r16, r24
    3386:	ce 01       	movw	r24, r28
    3388:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
    338c:	80 0f       	add	r24, r16
    338e:	91 1f       	adc	r25, r17
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

0000339a <_ZN5Print7printlnEc>:
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	ec 01       	movw	r28, r24
    33a4:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN5Print5printEc>
    33a8:	8c 01       	movw	r16, r24
    33aa:	ce 01       	movw	r24, r28
    33ac:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
    33b0:	80 0f       	add	r24, r16
    33b2:	91 1f       	adc	r25, r17
    33b4:	df 91       	pop	r29
    33b6:	cf 91       	pop	r28
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	08 95       	ret

000033be <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    33be:	8f 92       	push	r8
    33c0:	9f 92       	push	r9
    33c2:	af 92       	push	r10
    33c4:	bf 92       	push	r11
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	a1 97       	sbiw	r28, 0x21	; 33
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	7c 01       	movw	r14, r24
    33e4:	fa 01       	movw	r30, r20
    33e6:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    33e8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    33ea:	22 30       	cpi	r18, 0x02	; 2
    33ec:	08 f4       	brcc	.+2      	; 0x33f0 <_ZN5Print11printNumberEmh+0x32>
    33ee:	2a e0       	ldi	r18, 0x0A	; 10
    33f0:	8e 01       	movw	r16, r28
    33f2:	0f 5d       	subi	r16, 0xDF	; 223
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    33f6:	82 2e       	mov	r8, r18
    33f8:	91 2c       	mov	r9, r1
    33fa:	a1 2c       	mov	r10, r1
    33fc:	b1 2c       	mov	r11, r1
    33fe:	bf 01       	movw	r22, r30
    3400:	a5 01       	movw	r20, r10
    3402:	94 01       	movw	r18, r8
    3404:	0e 94 19 20 	call	0x4032	; 0x4032 <__udivmodsi4>
    n /= base;
    3408:	f9 01       	movw	r30, r18
    340a:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    340c:	01 50       	subi	r16, 0x01	; 1
    340e:	11 09       	sbc	r17, r1
    3410:	6a 30       	cpi	r22, 0x0A	; 10
    3412:	10 f4       	brcc	.+4      	; 0x3418 <_ZN5Print11printNumberEmh+0x5a>
    3414:	60 5d       	subi	r22, 0xD0	; 208
    3416:	01 c0       	rjmp	.+2      	; 0x341a <_ZN5Print11printNumberEmh+0x5c>
    3418:	69 5c       	subi	r22, 0xC9	; 201
    341a:	d8 01       	movw	r26, r16
    341c:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    341e:	23 2b       	or	r18, r19
    3420:	24 2b       	or	r18, r20
    3422:	25 2b       	or	r18, r21
    3424:	61 f7       	brne	.-40     	; 0x33fe <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    3426:	b8 01       	movw	r22, r16
    3428:	c7 01       	movw	r24, r14
    342a:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN5Print5writeEPKc>
}
    342e:	a1 96       	adiw	r28, 0x21	; 33
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	ff 90       	pop	r15
    3444:	ef 90       	pop	r14
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	9f 90       	pop	r9
    344c:	8f 90       	pop	r8
    344e:	08 95       	ret

00003450 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    3450:	21 15       	cp	r18, r1
    3452:	31 05       	cpc	r19, r1
    3454:	41 f4       	brne	.+16     	; 0x3466 <_ZN5Print5printEmi+0x16>
    3456:	dc 01       	movw	r26, r24
    3458:	ed 91       	ld	r30, X+
    345a:	fc 91       	ld	r31, X
    345c:	01 90       	ld	r0, Z+
    345e:	f0 81       	ld	r31, Z
    3460:	e0 2d       	mov	r30, r0
    3462:	64 2f       	mov	r22, r20
    3464:	09 94       	ijmp
  else return printNumber(n, base);
    3466:	0c 94 df 19 	jmp	0x33be	; 0x33be <_ZN5Print11printNumberEmh>

0000346a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    346a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    346c:	46 2f       	mov	r20, r22
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <_ZN5Print5printEmi>

00003478 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3482:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN5Print5printEhi>
    3486:	8c 01       	movw	r16, r24
  n += println();
    3488:	ce 01       	movw	r24, r28
    348a:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
  return n;
}
    348e:	80 0f       	add	r24, r16
    3490:	91 1f       	adc	r25, r17
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	08 95       	ret

0000349c <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    349c:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    349e:	ab 01       	movw	r20, r22
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <_ZN5Print5printEmi>

000034a8 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    34b2:	0e 94 4e 1a 	call	0x349c	; 0x349c <_ZN5Print5printEji>
    34b6:	8c 01       	movw	r16, r24
  n += println();
    34b8:	ce 01       	movw	r24, r28
    34ba:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
  return n;
}
    34be:	80 0f       	add	r24, r16
    34c0:	91 1f       	adc	r25, r17
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	08 95       	ret

000034cc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    34d6:	0e 94 28 1a 	call	0x3450	; 0x3450 <_ZN5Print5printEmi>
    34da:	8c 01       	movw	r16, r24
  n += println();
    34dc:	ce 01       	movw	r24, r28
    34de:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
  return n;
}
    34e2:	80 0f       	add	r24, r16
    34e4:	91 1f       	adc	r25, r17
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	08 95       	ret

000034f0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    34f0:	cf 92       	push	r12
    34f2:	df 92       	push	r13
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
  if (base == 0) {
    3500:	21 15       	cp	r18, r1
    3502:	31 05       	cpc	r19, r1
    3504:	81 f4       	brne	.+32     	; 0x3526 <_ZN5Print5printEli+0x36>
    return write(n);
    3506:	dc 01       	movw	r26, r24
    3508:	ed 91       	ld	r30, X+
    350a:	fc 91       	ld	r31, X
    350c:	01 90       	ld	r0, Z+
    350e:	f0 81       	ld	r31, Z
    3510:	e0 2d       	mov	r30, r0
    3512:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3524:	09 94       	ijmp
  } else if (base == 10) {
    3526:	2a 30       	cpi	r18, 0x0A	; 10
    3528:	31 05       	cpc	r19, r1
    352a:	01 f5       	brne	.+64     	; 0x356c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    352c:	77 ff       	sbrs	r23, 7
    352e:	1d c0       	rjmp	.+58     	; 0x356a <_ZN5Print5printEli+0x7a>
    3530:	6a 01       	movw	r12, r20
    3532:	7b 01       	movw	r14, r22
    3534:	ec 01       	movw	r28, r24
      int t = print('-');
    3536:	6d e2       	ldi	r22, 0x2D	; 45
    3538:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN5Print5printEc>
    353c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    353e:	44 27       	eor	r20, r20
    3540:	55 27       	eor	r21, r21
    3542:	ba 01       	movw	r22, r20
    3544:	4c 19       	sub	r20, r12
    3546:	5d 09       	sbc	r21, r13
    3548:	6e 09       	sbc	r22, r14
    354a:	7f 09       	sbc	r23, r15
    354c:	2a e0       	ldi	r18, 0x0A	; 10
    354e:	ce 01       	movw	r24, r28
    3550:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN5Print11printNumberEmh>
    3554:	80 0f       	add	r24, r16
    3556:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	1f 91       	pop	r17
    355e:	0f 91       	pop	r16
    3560:	ff 90       	pop	r15
    3562:	ef 90       	pop	r14
    3564:	df 90       	pop	r13
    3566:	cf 90       	pop	r12
    3568:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    356a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	1f 91       	pop	r17
    3572:	0f 91       	pop	r16
    3574:	ff 90       	pop	r15
    3576:	ef 90       	pop	r14
    3578:	df 90       	pop	r13
    357a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    357c:	0c 94 df 19 	jmp	0x33be	; 0x33be <_ZN5Print11printNumberEmh>

00003580 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3580:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3582:	ab 01       	movw	r20, r22
    3584:	77 0f       	add	r23, r23
    3586:	66 0b       	sbc	r22, r22
    3588:	77 0b       	sbc	r23, r23
    358a:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <_ZN5Print5printEli>

0000358e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3598:	0e 94 c0 1a 	call	0x3580	; 0x3580 <_ZN5Print5printEii>
    359c:	8c 01       	movw	r16, r24
  n += println();
    359e:	ce 01       	movw	r24, r28
    35a0:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
  return n;
}
    35a4:	80 0f       	add	r24, r16
    35a6:	91 1f       	adc	r25, r17
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	1f 91       	pop	r17
    35ae:	0f 91       	pop	r16
    35b0:	08 95       	ret

000035b2 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    35bc:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN5Print5printEli>
    35c0:	8c 01       	movw	r16, r24
  n += println();
    35c2:	ce 01       	movw	r24, r28
    35c4:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN5Print7printlnEv>
  return n;
}
    35c8:	80 0f       	add	r24, r16
    35ca:	91 1f       	adc	r25, r17
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	08 95       	ret

000035d6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    35d6:	1f 92       	push	r1
    35d8:	0f 92       	push	r0
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	0f 92       	push	r0
    35de:	11 24       	eor	r1, r1
    35e0:	2f 93       	push	r18
    35e2:	3f 93       	push	r19
    35e4:	8f 93       	push	r24
    35e6:	9f 93       	push	r25
    35e8:	af 93       	push	r26
    35ea:	bf 93       	push	r27
    35ec:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer0_millis>
    35f0:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer0_millis+0x1>
    35f4:	a0 91 63 04 	lds	r26, 0x0463	; 0x800463 <timer0_millis+0x2>
    35f8:	b0 91 64 04 	lds	r27, 0x0464	; 0x800464 <timer0_millis+0x3>
    35fc:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <timer0_fract>
    3600:	23 e0       	ldi	r18, 0x03	; 3
    3602:	23 0f       	add	r18, r19
    3604:	2d 37       	cpi	r18, 0x7D	; 125
    3606:	20 f4       	brcc	.+8      	; 0x3610 <__vector_16+0x3a>
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	a1 1d       	adc	r26, r1
    360c:	b1 1d       	adc	r27, r1
    360e:	05 c0       	rjmp	.+10     	; 0x361a <__vector_16+0x44>
    3610:	26 e8       	ldi	r18, 0x86	; 134
    3612:	23 0f       	add	r18, r19
    3614:	02 96       	adiw	r24, 0x02	; 2
    3616:	a1 1d       	adc	r26, r1
    3618:	b1 1d       	adc	r27, r1
    361a:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <timer0_fract>
    361e:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <timer0_millis>
    3622:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <timer0_millis+0x1>
    3626:	a0 93 63 04 	sts	0x0463, r26	; 0x800463 <timer0_millis+0x2>
    362a:	b0 93 64 04 	sts	0x0464, r27	; 0x800464 <timer0_millis+0x3>
    362e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <timer0_overflow_count>
    3632:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <timer0_overflow_count+0x1>
    3636:	a0 91 67 04 	lds	r26, 0x0467	; 0x800467 <timer0_overflow_count+0x2>
    363a:	b0 91 68 04 	lds	r27, 0x0468	; 0x800468 <timer0_overflow_count+0x3>
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	a1 1d       	adc	r26, r1
    3642:	b1 1d       	adc	r27, r1
    3644:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <timer0_overflow_count>
    3648:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <timer0_overflow_count+0x1>
    364c:	a0 93 67 04 	sts	0x0467, r26	; 0x800467 <timer0_overflow_count+0x2>
    3650:	b0 93 68 04 	sts	0x0468, r27	; 0x800468 <timer0_overflow_count+0x3>
    3654:	bf 91       	pop	r27
    3656:	af 91       	pop	r26
    3658:	9f 91       	pop	r25
    365a:	8f 91       	pop	r24
    365c:	3f 91       	pop	r19
    365e:	2f 91       	pop	r18
    3660:	0f 90       	pop	r0
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	0f 90       	pop	r0
    3666:	1f 90       	pop	r1
    3668:	18 95       	reti

0000366a <micros>:
    366a:	3f b7       	in	r19, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <timer0_overflow_count>
    3672:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <timer0_overflow_count+0x1>
    3676:	a0 91 67 04 	lds	r26, 0x0467	; 0x800467 <timer0_overflow_count+0x2>
    367a:	b0 91 68 04 	lds	r27, 0x0468	; 0x800468 <timer0_overflow_count+0x3>
    367e:	26 b5       	in	r18, 0x26	; 38
    3680:	a8 9b       	sbis	0x15, 0	; 21
    3682:	05 c0       	rjmp	.+10     	; 0x368e <micros+0x24>
    3684:	2f 3f       	cpi	r18, 0xFF	; 255
    3686:	19 f0       	breq	.+6      	; 0x368e <micros+0x24>
    3688:	01 96       	adiw	r24, 0x01	; 1
    368a:	a1 1d       	adc	r26, r1
    368c:	b1 1d       	adc	r27, r1
    368e:	3f bf       	out	0x3f, r19	; 63
    3690:	ba 2f       	mov	r27, r26
    3692:	a9 2f       	mov	r26, r25
    3694:	98 2f       	mov	r25, r24
    3696:	88 27       	eor	r24, r24
    3698:	82 0f       	add	r24, r18
    369a:	91 1d       	adc	r25, r1
    369c:	a1 1d       	adc	r26, r1
    369e:	b1 1d       	adc	r27, r1
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	42 e0       	ldi	r20, 0x02	; 2
    36a6:	66 0f       	add	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	4a 95       	dec	r20
    36b0:	d1 f7       	brne	.-12     	; 0x36a6 <micros+0x3c>
    36b2:	08 95       	ret

000036b4 <delay>:
    36b4:	8f 92       	push	r8
    36b6:	9f 92       	push	r9
    36b8:	af 92       	push	r10
    36ba:	bf 92       	push	r11
    36bc:	cf 92       	push	r12
    36be:	df 92       	push	r13
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	6b 01       	movw	r12, r22
    36c6:	7c 01       	movw	r14, r24
    36c8:	0e 94 35 1b 	call	0x366a	; 0x366a <micros>
    36cc:	4b 01       	movw	r8, r22
    36ce:	5c 01       	movw	r10, r24
    36d0:	c1 14       	cp	r12, r1
    36d2:	d1 04       	cpc	r13, r1
    36d4:	e1 04       	cpc	r14, r1
    36d6:	f1 04       	cpc	r15, r1
    36d8:	01 f1       	breq	.+64     	; 0x371a <delay+0x66>
    36da:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <yield>
    36de:	0e 94 35 1b 	call	0x366a	; 0x366a <micros>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	88 19       	sub	r24, r8
    36e8:	99 09       	sbc	r25, r9
    36ea:	aa 09       	sbc	r26, r10
    36ec:	bb 09       	sbc	r27, r11
    36ee:	88 3e       	cpi	r24, 0xE8	; 232
    36f0:	93 40       	sbci	r25, 0x03	; 3
    36f2:	a1 05       	cpc	r26, r1
    36f4:	b1 05       	cpc	r27, r1
    36f6:	60 f3       	brcs	.-40     	; 0x36d0 <delay+0x1c>
    36f8:	21 e0       	ldi	r18, 0x01	; 1
    36fa:	c2 1a       	sub	r12, r18
    36fc:	d1 08       	sbc	r13, r1
    36fe:	e1 08       	sbc	r14, r1
    3700:	f1 08       	sbc	r15, r1
    3702:	88 ee       	ldi	r24, 0xE8	; 232
    3704:	88 0e       	add	r8, r24
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	98 1e       	adc	r9, r24
    370a:	a1 1c       	adc	r10, r1
    370c:	b1 1c       	adc	r11, r1
    370e:	c1 14       	cp	r12, r1
    3710:	d1 04       	cpc	r13, r1
    3712:	e1 04       	cpc	r14, r1
    3714:	f1 04       	cpc	r15, r1
    3716:	19 f7       	brne	.-58     	; 0x36de <delay+0x2a>
    3718:	db cf       	rjmp	.-74     	; 0x36d0 <delay+0x1c>
    371a:	ff 90       	pop	r15
    371c:	ef 90       	pop	r14
    371e:	df 90       	pop	r13
    3720:	cf 90       	pop	r12
    3722:	bf 90       	pop	r11
    3724:	af 90       	pop	r10
    3726:	9f 90       	pop	r9
    3728:	8f 90       	pop	r8
    372a:	08 95       	ret

0000372c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    372c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    372e:	84 b5       	in	r24, 0x24	; 36
    3730:	82 60       	ori	r24, 0x02	; 2
    3732:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3734:	84 b5       	in	r24, 0x24	; 36
    3736:	81 60       	ori	r24, 0x01	; 1
    3738:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    373a:	85 b5       	in	r24, 0x25	; 37
    373c:	82 60       	ori	r24, 0x02	; 2
    373e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3740:	85 b5       	in	r24, 0x25	; 37
    3742:	81 60       	ori	r24, 0x01	; 1
    3744:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3746:	ee e6       	ldi	r30, 0x6E	; 110
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	81 60       	ori	r24, 0x01	; 1
    374e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3750:	e1 e8       	ldi	r30, 0x81	; 129
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3756:	80 81       	ld	r24, Z
    3758:	82 60       	ori	r24, 0x02	; 2
    375a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    375c:	80 81       	ld	r24, Z
    375e:	81 60       	ori	r24, 0x01	; 1
    3760:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3762:	e0 e8       	ldi	r30, 0x80	; 128
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 81       	ld	r24, Z
    3768:	81 60       	ori	r24, 0x01	; 1
    376a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    376c:	e1 eb       	ldi	r30, 0xB1	; 177
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	84 60       	ori	r24, 0x04	; 4
    3774:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3776:	e0 eb       	ldi	r30, 0xB0	; 176
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	81 60       	ori	r24, 0x01	; 1
    377e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3780:	ea e7       	ldi	r30, 0x7A	; 122
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	84 60       	ori	r24, 0x04	; 4
    3788:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    378a:	80 81       	ld	r24, Z
    378c:	82 60       	ori	r24, 0x02	; 2
    378e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3790:	80 81       	ld	r24, Z
    3792:	81 60       	ori	r24, 0x01	; 1
    3794:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3796:	80 81       	ld	r24, Z
    3798:	80 68       	ori	r24, 0x80	; 128
    379a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    379c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    37a0:	08 95       	ret

000037a2 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    37a2:	8e 30       	cpi	r24, 0x0E	; 14
    37a4:	08 f0       	brcs	.+2      	; 0x37a8 <analogRead+0x6>
    37a6:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    37a8:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    37ac:	90 e4       	ldi	r25, 0x40	; 64
    37ae:	29 9f       	mul	r18, r25
    37b0:	90 01       	movw	r18, r0
    37b2:	11 24       	eor	r1, r1
    37b4:	87 70       	andi	r24, 0x07	; 7
    37b6:	82 2b       	or	r24, r18
    37b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    37bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    37c0:	80 64       	ori	r24, 0x40	; 64
    37c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    37c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    37ca:	86 fd       	sbrc	r24, 6
    37cc:	fc cf       	rjmp	.-8      	; 0x37c6 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    37ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    37d2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    37d6:	90 e0       	ldi	r25, 0x00	; 0
}
    37d8:	92 2b       	or	r25, r18
    37da:	08 95       	ret

000037dc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    37dc:	83 30       	cpi	r24, 0x03	; 3
    37de:	81 f0       	breq	.+32     	; 0x3800 <turnOffPWM+0x24>
    37e0:	28 f4       	brcc	.+10     	; 0x37ec <turnOffPWM+0x10>
    37e2:	81 30       	cpi	r24, 0x01	; 1
    37e4:	99 f0       	breq	.+38     	; 0x380c <turnOffPWM+0x30>
    37e6:	82 30       	cpi	r24, 0x02	; 2
    37e8:	a1 f0       	breq	.+40     	; 0x3812 <turnOffPWM+0x36>
    37ea:	08 95       	ret
    37ec:	87 30       	cpi	r24, 0x07	; 7
    37ee:	a9 f0       	breq	.+42     	; 0x381a <turnOffPWM+0x3e>
    37f0:	88 30       	cpi	r24, 0x08	; 8
    37f2:	b9 f0       	breq	.+46     	; 0x3822 <turnOffPWM+0x46>
    37f4:	84 30       	cpi	r24, 0x04	; 4
    37f6:	d1 f4       	brne	.+52     	; 0x382c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    37f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    37fc:	8f 7d       	andi	r24, 0xDF	; 223
    37fe:	03 c0       	rjmp	.+6      	; 0x3806 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3800:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3804:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3806:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    380a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    380c:	84 b5       	in	r24, 0x24	; 36
    380e:	8f 77       	andi	r24, 0x7F	; 127
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3812:	84 b5       	in	r24, 0x24	; 36
    3814:	8f 7d       	andi	r24, 0xDF	; 223
    3816:	84 bd       	out	0x24, r24	; 36
    3818:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    381a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    381e:	8f 77       	andi	r24, 0x7F	; 127
    3820:	03 c0       	rjmp	.+6      	; 0x3828 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3822:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3826:	8f 7d       	andi	r24, 0xDF	; 223
    3828:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    382c:	08 95       	ret

0000382e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	fc 01       	movw	r30, r24
    3836:	ee 56       	subi	r30, 0x6E	; 110
    3838:	f9 4f       	sbci	r31, 0xF9	; 249
    383a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    383c:	fc 01       	movw	r30, r24
    383e:	ea 55       	subi	r30, 0x5A	; 90
    3840:	f9 4f       	sbci	r31, 0xF9	; 249
    3842:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3844:	88 23       	and	r24, r24
    3846:	61 f1       	breq	.+88     	; 0x38a0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	fc 01       	movw	r30, r24
    3850:	e2 53       	subi	r30, 0x32	; 50
    3852:	f9 4f       	sbci	r31, 0xF9	; 249
    3854:	c5 91       	lpm	r28, Z+
    3856:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3858:	fc 01       	movw	r30, r24
    385a:	ec 53       	subi	r30, 0x3C	; 60
    385c:	f9 4f       	sbci	r31, 0xF9	; 249
    385e:	a5 91       	lpm	r26, Z+
    3860:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3862:	61 11       	cpse	r22, r1
    3864:	09 c0       	rjmp	.+18     	; 0x3878 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3866:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3868:	f8 94       	cli
		*reg &= ~bit;
    386a:	88 81       	ld	r24, Y
    386c:	20 95       	com	r18
    386e:	82 23       	and	r24, r18
    3870:	88 83       	st	Y, r24
		*out &= ~bit;
    3872:	ec 91       	ld	r30, X
    3874:	2e 23       	and	r18, r30
    3876:	0b c0       	rjmp	.+22     	; 0x388e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3878:	62 30       	cpi	r22, 0x02	; 2
    387a:	61 f4       	brne	.+24     	; 0x3894 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    387c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    387e:	f8 94       	cli
		*reg &= ~bit;
    3880:	88 81       	ld	r24, Y
    3882:	32 2f       	mov	r19, r18
    3884:	30 95       	com	r19
    3886:	83 23       	and	r24, r19
    3888:	88 83       	st	Y, r24
		*out |= bit;
    388a:	ec 91       	ld	r30, X
    388c:	2e 2b       	or	r18, r30
    388e:	2c 93       	st	X, r18
		SREG = oldSREG;
    3890:	9f bf       	out	0x3f, r25	; 63
    3892:	06 c0       	rjmp	.+12     	; 0x38a0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3894:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3896:	f8 94       	cli
		*reg |= bit;
    3898:	e8 81       	ld	r30, Y
    389a:	2e 2b       	or	r18, r30
    389c:	28 83       	st	Y, r18
		SREG = oldSREG;
    389e:	8f bf       	out	0x3f, r24	; 63
	}
}
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	08 95       	ret

000038a6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    38ac:	28 2f       	mov	r18, r24
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	f9 01       	movw	r30, r18
    38b2:	e2 58       	subi	r30, 0x82	; 130
    38b4:	f9 4f       	sbci	r31, 0xF9	; 249
    38b6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    38b8:	f9 01       	movw	r30, r18
    38ba:	ee 56       	subi	r30, 0x6E	; 110
    38bc:	f9 4f       	sbci	r31, 0xF9	; 249
    38be:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    38c0:	f9 01       	movw	r30, r18
    38c2:	ea 55       	subi	r30, 0x5A	; 90
    38c4:	f9 4f       	sbci	r31, 0xF9	; 249
    38c6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    38c8:	cc 23       	and	r28, r28
    38ca:	c1 f0       	breq	.+48     	; 0x38fc <digitalWrite+0x56>
    38cc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    38ce:	81 11       	cpse	r24, r1
    38d0:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <turnOffPWM>

	out = portOutputRegister(port);
    38d4:	ec 2f       	mov	r30, r28
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	ec 53       	subi	r30, 0x3C	; 60
    38de:	f9 4f       	sbci	r31, 0xF9	; 249
    38e0:	a5 91       	lpm	r26, Z+
    38e2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    38e4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    38e6:	f8 94       	cli

	if (val == LOW) {
    38e8:	11 11       	cpse	r17, r1
    38ea:	04 c0       	rjmp	.+8      	; 0x38f4 <digitalWrite+0x4e>
		*out &= ~bit;
    38ec:	8c 91       	ld	r24, X
    38ee:	d0 95       	com	r29
    38f0:	d8 23       	and	r29, r24
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    38f4:	ec 91       	ld	r30, X
    38f6:	de 2b       	or	r29, r30
    38f8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    38fa:	9f bf       	out	0x3f, r25	; 63
}
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	1f 91       	pop	r17
    3902:	08 95       	ret

00003904 <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    3904:	fc 01       	movw	r30, r24
    3906:	80 81       	ld	r24, Z
    3908:	91 81       	ldd	r25, Z+1	; 0x01
    390a:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <free>

0000390e <_ZN6String10invalidateEv>:
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	ec 01       	movw	r28, r24
    3914:	88 81       	ld	r24, Y
    3916:	99 81       	ldd	r25, Y+1	; 0x01
    3918:	00 97       	sbiw	r24, 0x00	; 0
    391a:	11 f0       	breq	.+4      	; 0x3920 <_ZN6String10invalidateEv+0x12>
    391c:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <free>
    3920:	19 82       	std	Y+1, r1	; 0x01
    3922:	18 82       	st	Y, r1
    3924:	1d 82       	std	Y+5, r1	; 0x05
    3926:	1c 82       	std	Y+4, r1	; 0x04
    3928:	1b 82       	std	Y+3, r1	; 0x03
    392a:	1a 82       	std	Y+2, r1	; 0x02
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	08 95       	ret

00003932 <_ZN6String12changeBufferEj>:
    3932:	0f 93       	push	r16
    3934:	1f 93       	push	r17
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	ec 01       	movw	r28, r24
    393c:	8b 01       	movw	r16, r22
    393e:	6f 5f       	subi	r22, 0xFF	; 255
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	88 81       	ld	r24, Y
    3944:	99 81       	ldd	r25, Y+1	; 0x01
    3946:	0e 94 81 21 	call	0x4302	; 0x4302 <realloc>
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	31 f0       	breq	.+12     	; 0x395a <_ZN6String12changeBufferEj+0x28>
    394e:	99 83       	std	Y+1, r25	; 0x01
    3950:	88 83       	st	Y, r24
    3952:	1b 83       	std	Y+3, r17	; 0x03
    3954:	0a 83       	std	Y+2, r16	; 0x02
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	01 c0       	rjmp	.+2      	; 0x395c <_ZN6String12changeBufferEj+0x2a>
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	df 91       	pop	r29
    395e:	cf 91       	pop	r28
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	08 95       	ret

00003966 <_ZN6String7reserveEj>:
    3966:	cf 93       	push	r28
    3968:	df 93       	push	r29
    396a:	ec 01       	movw	r28, r24
    396c:	88 81       	ld	r24, Y
    396e:	99 81       	ldd	r25, Y+1	; 0x01
    3970:	89 2b       	or	r24, r25
    3972:	29 f0       	breq	.+10     	; 0x397e <_ZN6String7reserveEj+0x18>
    3974:	8a 81       	ldd	r24, Y+2	; 0x02
    3976:	9b 81       	ldd	r25, Y+3	; 0x03
    3978:	86 17       	cp	r24, r22
    397a:	97 07       	cpc	r25, r23
    397c:	60 f4       	brcc	.+24     	; 0x3996 <_ZN6String7reserveEj+0x30>
    397e:	ce 01       	movw	r24, r28
    3980:	0e 94 99 1c 	call	0x3932	; 0x3932 <_ZN6String12changeBufferEj>
    3984:	88 23       	and	r24, r24
    3986:	41 f0       	breq	.+16     	; 0x3998 <_ZN6String7reserveEj+0x32>
    3988:	8c 81       	ldd	r24, Y+4	; 0x04
    398a:	9d 81       	ldd	r25, Y+5	; 0x05
    398c:	89 2b       	or	r24, r25
    398e:	19 f4       	brne	.+6      	; 0x3996 <_ZN6String7reserveEj+0x30>
    3990:	e8 81       	ld	r30, Y
    3992:	f9 81       	ldd	r31, Y+1	; 0x01
    3994:	10 82       	st	Z, r1
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	08 95       	ret

0000399e <_ZN6String4copyEPKcj>:
    399e:	ef 92       	push	r14
    39a0:	ff 92       	push	r15
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	ec 01       	movw	r28, r24
    39ac:	7b 01       	movw	r14, r22
    39ae:	8a 01       	movw	r16, r20
    39b0:	ba 01       	movw	r22, r20
    39b2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN6String7reserveEj>
    39b6:	81 11       	cpse	r24, r1
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <_ZN6String4copyEPKcj+0x24>
    39ba:	ce 01       	movw	r24, r28
    39bc:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN6String10invalidateEv>
    39c0:	07 c0       	rjmp	.+14     	; 0x39d0 <_ZN6String4copyEPKcj+0x32>
    39c2:	1d 83       	std	Y+5, r17	; 0x05
    39c4:	0c 83       	std	Y+4, r16	; 0x04
    39c6:	b7 01       	movw	r22, r14
    39c8:	88 81       	ld	r24, Y
    39ca:	99 81       	ldd	r25, Y+1	; 0x01
    39cc:	0e 94 a5 22 	call	0x454a	; 0x454a <strcpy>
    39d0:	ce 01       	movw	r24, r28
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	08 95       	ret

000039e0 <_ZN6StringC1EPKc>:
    39e0:	fc 01       	movw	r30, r24
    39e2:	11 82       	std	Z+1, r1	; 0x01
    39e4:	10 82       	st	Z, r1
    39e6:	13 82       	std	Z+3, r1	; 0x03
    39e8:	12 82       	std	Z+2, r1	; 0x02
    39ea:	15 82       	std	Z+5, r1	; 0x05
    39ec:	14 82       	std	Z+4, r1	; 0x04
    39ee:	61 15       	cp	r22, r1
    39f0:	71 05       	cpc	r23, r1
    39f2:	51 f0       	breq	.+20     	; 0x3a08 <_ZN6StringC1EPKc+0x28>
    39f4:	fb 01       	movw	r30, r22
    39f6:	01 90       	ld	r0, Z+
    39f8:	00 20       	and	r0, r0
    39fa:	e9 f7       	brne	.-6      	; 0x39f6 <_ZN6StringC1EPKc+0x16>
    39fc:	31 97       	sbiw	r30, 0x01	; 1
    39fe:	af 01       	movw	r20, r30
    3a00:	46 1b       	sub	r20, r22
    3a02:	57 0b       	sbc	r21, r23
    3a04:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <_ZN6String4copyEPKcj>
    3a08:	08 95       	ret

00003a0a <_ZN6StringaSERKS_>:
    3a0a:	cf 93       	push	r28
    3a0c:	df 93       	push	r29
    3a0e:	ec 01       	movw	r28, r24
    3a10:	fb 01       	movw	r30, r22
    3a12:	86 17       	cp	r24, r22
    3a14:	97 07       	cpc	r25, r23
    3a16:	61 f0       	breq	.+24     	; 0x3a30 <_ZN6StringaSERKS_+0x26>
    3a18:	60 81       	ld	r22, Z
    3a1a:	71 81       	ldd	r23, Z+1	; 0x01
    3a1c:	61 15       	cp	r22, r1
    3a1e:	71 05       	cpc	r23, r1
    3a20:	29 f0       	breq	.+10     	; 0x3a2c <_ZN6StringaSERKS_+0x22>
    3a22:	44 81       	ldd	r20, Z+4	; 0x04
    3a24:	55 81       	ldd	r21, Z+5	; 0x05
    3a26:	0e 94 cf 1c 	call	0x399e	; 0x399e <_ZN6String4copyEPKcj>
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <_ZN6StringaSERKS_+0x26>
    3a2c:	0e 94 87 1c 	call	0x390e	; 0x390e <_ZN6String10invalidateEv>
    3a30:	ce 01       	movw	r24, r28
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	08 95       	ret

00003a38 <_ZN6StringC1ERKS_>:
    3a38:	fc 01       	movw	r30, r24
    3a3a:	11 82       	std	Z+1, r1	; 0x01
    3a3c:	10 82       	st	Z, r1
    3a3e:	13 82       	std	Z+3, r1	; 0x03
    3a40:	12 82       	std	Z+2, r1	; 0x02
    3a42:	15 82       	std	Z+5, r1	; 0x05
    3a44:	14 82       	std	Z+4, r1	; 0x04
    3a46:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <_ZN6StringaSERKS_>

00003a4a <_ZN6String6concatEPKcj>:
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	61 15       	cp	r22, r1
    3a58:	71 05       	cpc	r23, r1
    3a5a:	11 f4       	brne	.+4      	; 0x3a60 <_ZN6String6concatEPKcj+0x16>
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	1c c0       	rjmp	.+56     	; 0x3a98 <_ZN6String6concatEPKcj+0x4e>
    3a60:	41 15       	cp	r20, r1
    3a62:	51 05       	cpc	r21, r1
    3a64:	c1 f0       	breq	.+48     	; 0x3a96 <_ZN6String6concatEPKcj+0x4c>
    3a66:	7b 01       	movw	r14, r22
    3a68:	ec 01       	movw	r28, r24
    3a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a6e:	8a 01       	movw	r16, r20
    3a70:	08 0f       	add	r16, r24
    3a72:	19 1f       	adc	r17, r25
    3a74:	b8 01       	movw	r22, r16
    3a76:	ce 01       	movw	r24, r28
    3a78:	0e 94 b3 1c 	call	0x3966	; 0x3966 <_ZN6String7reserveEj>
    3a7c:	88 23       	and	r24, r24
    3a7e:	71 f3       	breq	.-36     	; 0x3a5c <_ZN6String6concatEPKcj+0x12>
    3a80:	28 81       	ld	r18, Y
    3a82:	39 81       	ldd	r19, Y+1	; 0x01
    3a84:	8c 81       	ldd	r24, Y+4	; 0x04
    3a86:	9d 81       	ldd	r25, Y+5	; 0x05
    3a88:	b7 01       	movw	r22, r14
    3a8a:	82 0f       	add	r24, r18
    3a8c:	93 1f       	adc	r25, r19
    3a8e:	0e 94 a5 22 	call	0x454a	; 0x454a <strcpy>
    3a92:	1d 83       	std	Y+5, r17	; 0x05
    3a94:	0c 83       	std	Y+4, r16	; 0x04
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	1f 91       	pop	r17
    3a9e:	0f 91       	pop	r16
    3aa0:	ff 90       	pop	r15
    3aa2:	ef 90       	pop	r14
    3aa4:	08 95       	ret

00003aa6 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3aa6:	ef 92       	push	r14
    3aa8:	ff 92       	push	r15
    3aaa:	0f 93       	push	r16
    3aac:	1f 93       	push	r17
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	00 d0       	rcall	.+0      	; 0x3ab4 <_ZN6String6concatEh+0xe>
    3ab4:	00 d0       	rcall	.+0      	; 0x3ab6 <_ZN6String6concatEh+0x10>
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
    3aba:	7c 01       	movw	r14, r24
    3abc:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3abe:	4a e0       	ldi	r20, 0x0A	; 10
    3ac0:	8e 01       	movw	r16, r28
    3ac2:	0f 5f       	subi	r16, 0xFF	; 255
    3ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac6:	b8 01       	movw	r22, r16
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	0e 94 ac 22 	call	0x4558	; 0x4558 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3ace:	f8 01       	movw	r30, r16
    3ad0:	01 90       	ld	r0, Z+
    3ad2:	00 20       	and	r0, r0
    3ad4:	e9 f7       	brne	.-6      	; 0x3ad0 <_ZN6String6concatEh+0x2a>
    3ad6:	31 97       	sbiw	r30, 0x01	; 1
    3ad8:	af 01       	movw	r20, r30
    3ada:	40 1b       	sub	r20, r16
    3adc:	51 0b       	sbc	r21, r17
    3ade:	b8 01       	movw	r22, r16
    3ae0:	c7 01       	movw	r24, r14
    3ae2:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <_ZN6String6concatEPKcj>
}
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	ff 90       	pop	r15
    3af8:	ef 90       	pop	r14
    3afa:	08 95       	ret

00003afc <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    3afc:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3b00:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3b04:	28 17       	cp	r18, r24
    3b06:	39 07       	cpc	r19, r25
    3b08:	b9 f4       	brne	.+46     	; 0x3b38 <_ZN14SoftwareSerial4readEv+0x3c>
    3b0a:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b0e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3b12:	98 17       	cp	r25, r24
    3b14:	89 f0       	breq	.+34     	; 0x3b38 <_ZN14SoftwareSerial4readEv+0x3c>
    3b16:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	e5 59       	subi	r30, 0x95	; 149
    3b1e:	fb 4f       	sbci	r31, 0xFB	; 251
    3b20:	80 81       	ld	r24, Z
    3b22:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	2f 5f       	subi	r18, 0xFF	; 255
    3b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2c:	2f 73       	andi	r18, 0x3F	; 63
    3b2e:	33 27       	eor	r19, r19
    3b30:	20 93 69 04 	sts	0x0469, r18	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	08 95       	ret
    3b38:	8f ef       	ldi	r24, 0xFF	; 255
    3b3a:	9f ef       	ldi	r25, 0xFF	; 255
    3b3c:	08 95       	ret

00003b3e <_ZN14SoftwareSerial5writeEh>:
    3b3e:	1f 93       	push	r17
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	dc 01       	movw	r26, r24
    3b46:	5c 96       	adiw	r26, 0x1c	; 28
    3b48:	8d 91       	ld	r24, X+
    3b4a:	9c 91       	ld	r25, X
    3b4c:	5d 97       	sbiw	r26, 0x1d	; 29
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	39 f4       	brne	.+14     	; 0x3b60 <_ZN14SoftwareSerial5writeEh+0x22>
    3b52:	21 e0       	ldi	r18, 0x01	; 1
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	13 96       	adiw	r26, 0x03	; 3
    3b58:	3c 93       	st	X, r19
    3b5a:	2e 93       	st	-X, r18
    3b5c:	12 97       	sbiw	r26, 0x02	; 2
    3b5e:	3b c0       	rjmp	.+118    	; 0x3bd6 <_ZN14SoftwareSerial5writeEh+0x98>
    3b60:	51 96       	adiw	r26, 0x11	; 17
    3b62:	ed 91       	ld	r30, X+
    3b64:	fc 91       	ld	r31, X
    3b66:	52 97       	sbiw	r26, 0x12	; 18
    3b68:	50 96       	adiw	r26, 0x10	; 16
    3b6a:	2c 91       	ld	r18, X
    3b6c:	50 97       	sbiw	r26, 0x10	; 16
    3b6e:	32 2f       	mov	r19, r18
    3b70:	30 95       	com	r19
    3b72:	1f b7       	in	r17, 0x3f	; 63
    3b74:	5e 96       	adiw	r26, 0x1e	; 30
    3b76:	4c 91       	ld	r20, X
    3b78:	5e 97       	sbiw	r26, 0x1e	; 30
    3b7a:	74 2f       	mov	r23, r20
    3b7c:	72 70       	andi	r23, 0x02	; 2
    3b7e:	41 fd       	sbrc	r20, 1
    3b80:	60 95       	com	r22
    3b82:	f8 94       	cli
    3b84:	40 81       	ld	r20, Z
    3b86:	77 23       	and	r23, r23
    3b88:	11 f0       	breq	.+4      	; 0x3b8e <_ZN14SoftwareSerial5writeEh+0x50>
    3b8a:	42 2b       	or	r20, r18
    3b8c:	01 c0       	rjmp	.+2      	; 0x3b90 <_ZN14SoftwareSerial5writeEh+0x52>
    3b8e:	43 23       	and	r20, r19
    3b90:	40 83       	st	Z, r20
    3b92:	ec 01       	movw	r28, r24
    3b94:	21 97       	sbiw	r28, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <_ZN14SoftwareSerial5writeEh+0x56>
    3b98:	48 e0       	ldi	r20, 0x08	; 8
    3b9a:	50 81       	ld	r21, Z
    3b9c:	60 ff       	sbrs	r22, 0
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <_ZN14SoftwareSerial5writeEh+0x66>
    3ba0:	52 2b       	or	r21, r18
    3ba2:	01 c0       	rjmp	.+2      	; 0x3ba6 <_ZN14SoftwareSerial5writeEh+0x68>
    3ba4:	53 23       	and	r21, r19
    3ba6:	50 83       	st	Z, r21
    3ba8:	ec 01       	movw	r28, r24
    3baa:	21 97       	sbiw	r28, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <_ZN14SoftwareSerial5writeEh+0x6c>
    3bae:	66 95       	lsr	r22
    3bb0:	41 50       	subi	r20, 0x01	; 1
    3bb2:	99 f7       	brne	.-26     	; 0x3b9a <_ZN14SoftwareSerial5writeEh+0x5c>
    3bb4:	80 81       	ld	r24, Z
    3bb6:	77 23       	and	r23, r23
    3bb8:	19 f0       	breq	.+6      	; 0x3bc0 <_ZN14SoftwareSerial5writeEh+0x82>
    3bba:	83 23       	and	r24, r19
    3bbc:	80 83       	st	Z, r24
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <_ZN14SoftwareSerial5writeEh+0x86>
    3bc0:	28 2b       	or	r18, r24
    3bc2:	20 83       	st	Z, r18
    3bc4:	1f bf       	out	0x3f, r17	; 63
    3bc6:	5c 96       	adiw	r26, 0x1c	; 28
    3bc8:	8d 91       	ld	r24, X+
    3bca:	9c 91       	ld	r25, X
    3bcc:	5d 97       	sbiw	r26, 0x1d	; 29
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <_ZN14SoftwareSerial5writeEh+0x90>
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	08 95       	ret

00003bde <_ZN14SoftwareSerial5flushEv>:
    3bde:	08 95       	ret

00003be0 <_ZN14SoftwareSerial4peekEv>:
    3be0:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3be4:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3be8:	28 17       	cp	r18, r24
    3bea:	39 07       	cpc	r19, r25
    3bec:	71 f4       	brne	.+28     	; 0x3c0a <_ZN14SoftwareSerial4peekEv+0x2a>
    3bee:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3bf2:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3bf6:	98 17       	cp	r25, r24
    3bf8:	41 f0       	breq	.+16     	; 0x3c0a <_ZN14SoftwareSerial4peekEv+0x2a>
    3bfa:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	e5 59       	subi	r30, 0x95	; 149
    3c02:	fb 4f       	sbci	r31, 0xFB	; 251
    3c04:	80 81       	ld	r24, Z
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	08 95       	ret
    3c0a:	8f ef       	ldi	r24, 0xFF	; 255
    3c0c:	9f ef       	ldi	r25, 0xFF	; 255
    3c0e:	08 95       	ret

00003c10 <_ZN14SoftwareSerial9availableEv>:
    3c10:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3c14:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3c18:	28 17       	cp	r18, r24
    3c1a:	39 07       	cpc	r19, r25
    3c1c:	71 f4       	brne	.+28     	; 0x3c3a <_ZN14SoftwareSerial9availableEv+0x2a>
    3c1e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c22:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	80 5c       	subi	r24, 0xC0	; 192
    3c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2c:	82 1b       	sub	r24, r18
    3c2e:	91 09       	sbc	r25, r1
    3c30:	60 e4       	ldi	r22, 0x40	; 64
    3c32:	70 e0       	ldi	r23, 0x00	; 0
    3c34:	0e 94 05 20 	call	0x400a	; 0x400a <__divmodhi4>
    3c38:	08 95       	ret
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	08 95       	ret

00003c40 <_ZN14SoftwareSerial13stopListeningEv>:
    3c40:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3c44:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3c48:	e8 17       	cp	r30, r24
    3c4a:	f9 07       	cpc	r31, r25
    3c4c:	69 f4       	brne	.+26     	; 0x3c68 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3c4e:	a3 89       	ldd	r26, Z+19	; 0x13
    3c50:	b4 89       	ldd	r27, Z+20	; 0x14
    3c52:	9c 91       	ld	r25, X
    3c54:	85 89       	ldd	r24, Z+21	; 0x15
    3c56:	80 95       	com	r24
    3c58:	89 23       	and	r24, r25
    3c5a:	8c 93       	st	X, r24
    3c5c:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3c60:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	08 95       	ret
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	08 95       	ret

00003c6c <_ZN14SoftwareSerial6listenEv>:
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29
    3c70:	ec 01       	movw	r28, r24
    3c72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c74:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c76:	89 2b       	or	r24, r25
    3c78:	f1 f0       	breq	.+60     	; 0x3cb6 <_ZN14SoftwareSerial6listenEv+0x4a>
    3c7a:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3c7e:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3c82:	c8 17       	cp	r28, r24
    3c84:	d9 07       	cpc	r29, r25
    3c86:	b9 f0       	breq	.+46     	; 0x3cb6 <_ZN14SoftwareSerial6listenEv+0x4a>
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	11 f0       	breq	.+4      	; 0x3c90 <_ZN14SoftwareSerial6listenEv+0x24>
    3c8c:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <_ZN14SoftwareSerial13stopListeningEv>
    3c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c92:	8e 7f       	andi	r24, 0xFE	; 254
    3c94:	8e 8f       	std	Y+30, r24	; 0x1e
    3c96:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c9a:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c9e:	d0 93 ac 04 	sts	0x04AC, r29	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3ca2:	c0 93 ab 04 	sts	0x04AB, r28	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3ca6:	eb 89       	ldd	r30, Y+19	; 0x13
    3ca8:	fc 89       	ldd	r31, Y+20	; 0x14
    3caa:	90 81       	ld	r25, Z
    3cac:	8d 89       	ldd	r24, Y+21	; 0x15
    3cae:	89 2b       	or	r24, r25
    3cb0:	80 83       	st	Z, r24
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	01 c0       	rjmp	.+2      	; 0x3cb8 <_ZN14SoftwareSerial6listenEv+0x4c>
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	df 91       	pop	r29
    3cba:	cf 91       	pop	r28
    3cbc:	08 95       	ret

00003cbe <__vector_3>:
    3cbe:	1f 92       	push	r1
    3cc0:	0f 92       	push	r0
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	0f 92       	push	r0
    3cc6:	11 24       	eor	r1, r1
    3cc8:	2f 93       	push	r18
    3cca:	3f 93       	push	r19
    3ccc:	4f 93       	push	r20
    3cce:	5f 93       	push	r21
    3cd0:	6f 93       	push	r22
    3cd2:	7f 93       	push	r23
    3cd4:	8f 93       	push	r24
    3cd6:	9f 93       	push	r25
    3cd8:	af 93       	push	r26
    3cda:	bf 93       	push	r27
    3cdc:	ef 93       	push	r30
    3cde:	ff 93       	push	r31
    3ce0:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3ce4:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3ce8:	30 97       	sbiw	r30, 0x00	; 0
    3cea:	09 f4       	brne	.+2      	; 0x3cee <__vector_3+0x30>
    3cec:	51 c0       	rjmp	.+162    	; 0x3d90 <__vector_3+0xd2>
    3cee:	96 8d       	ldd	r25, Z+30	; 0x1e
    3cf0:	a6 85       	ldd	r26, Z+14	; 0x0e
    3cf2:	b7 85       	ldd	r27, Z+15	; 0x0f
    3cf4:	85 85       	ldd	r24, Z+13	; 0x0d
    3cf6:	91 ff       	sbrs	r25, 1
    3cf8:	04 c0       	rjmp	.+8      	; 0x3d02 <__vector_3+0x44>
    3cfa:	9c 91       	ld	r25, X
    3cfc:	89 23       	and	r24, r25
    3cfe:	29 f4       	brne	.+10     	; 0x3d0a <__vector_3+0x4c>
    3d00:	47 c0       	rjmp	.+142    	; 0x3d90 <__vector_3+0xd2>
    3d02:	9c 91       	ld	r25, X
    3d04:	89 23       	and	r24, r25
    3d06:	09 f0       	breq	.+2      	; 0x3d0a <__vector_3+0x4c>
    3d08:	43 c0       	rjmp	.+134    	; 0x3d90 <__vector_3+0xd2>
    3d0a:	a3 89       	ldd	r26, Z+19	; 0x13
    3d0c:	b4 89       	ldd	r27, Z+20	; 0x14
    3d0e:	9c 91       	ld	r25, X
    3d10:	85 89       	ldd	r24, Z+21	; 0x15
    3d12:	80 95       	com	r24
    3d14:	89 23       	and	r24, r25
    3d16:	8c 93       	st	X, r24
    3d18:	86 89       	ldd	r24, Z+22	; 0x16
    3d1a:	97 89       	ldd	r25, Z+23	; 0x17
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	f1 f7       	brne	.-4      	; 0x3d1c <__vector_3+0x5e>
    3d20:	60 8d       	ldd	r22, Z+24	; 0x18
    3d22:	71 8d       	ldd	r23, Z+25	; 0x19
    3d24:	a6 85       	ldd	r26, Z+14	; 0x0e
    3d26:	b7 85       	ldd	r27, Z+15	; 0x0f
    3d28:	55 85       	ldd	r21, Z+13	; 0x0d
    3d2a:	38 e0       	ldi	r19, 0x08	; 8
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	cb 01       	movw	r24, r22
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	f1 f7       	brne	.-4      	; 0x3d30 <__vector_3+0x72>
    3d34:	82 2f       	mov	r24, r18
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	95 95       	asr	r25
    3d3a:	87 95       	ror	r24
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	4c 91       	ld	r20, X
    3d40:	45 23       	and	r20, r21
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <__vector_3+0x88>
    3d44:	20 68       	ori	r18, 0x80	; 128
    3d46:	31 50       	subi	r19, 0x01	; 1
    3d48:	91 f7       	brne	.-28     	; 0x3d2e <__vector_3+0x70>
    3d4a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d4c:	81 fd       	sbrc	r24, 1
    3d4e:	20 95       	com	r18
    3d50:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	8f 73       	andi	r24, 0x3F	; 63
    3d5a:	99 27       	eor	r25, r25
    3d5c:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3d60:	38 17       	cp	r19, r24
    3d62:	49 f0       	breq	.+18     	; 0x3d76 <__vector_3+0xb8>
    3d64:	a0 91 6a 04 	lds	r26, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	a5 59       	subi	r26, 0x95	; 149
    3d6c:	bb 4f       	sbci	r27, 0xFB	; 251
    3d6e:	2c 93       	st	X, r18
    3d70:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3d74:	03 c0       	rjmp	.+6      	; 0x3d7c <__vector_3+0xbe>
    3d76:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d78:	81 60       	ori	r24, 0x01	; 1
    3d7a:	86 8f       	std	Z+30, r24	; 0x1e
    3d7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d7e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	f1 f7       	brne	.-4      	; 0x3d80 <__vector_3+0xc2>
    3d84:	a3 89       	ldd	r26, Z+19	; 0x13
    3d86:	b4 89       	ldd	r27, Z+20	; 0x14
    3d88:	9c 91       	ld	r25, X
    3d8a:	85 89       	ldd	r24, Z+21	; 0x15
    3d8c:	89 2b       	or	r24, r25
    3d8e:	8c 93       	st	X, r24
    3d90:	ff 91       	pop	r31
    3d92:	ef 91       	pop	r30
    3d94:	bf 91       	pop	r27
    3d96:	af 91       	pop	r26
    3d98:	9f 91       	pop	r25
    3d9a:	8f 91       	pop	r24
    3d9c:	7f 91       	pop	r23
    3d9e:	6f 91       	pop	r22
    3da0:	5f 91       	pop	r21
    3da2:	4f 91       	pop	r20
    3da4:	3f 91       	pop	r19
    3da6:	2f 91       	pop	r18
    3da8:	0f 90       	pop	r0
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	0f 90       	pop	r0
    3dae:	1f 90       	pop	r1
    3db0:	18 95       	reti

00003db2 <_ZN14SoftwareSerial5setTXEh>:
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	ec 01       	movw	r28, r24
    3dba:	16 2f       	mov	r17, r22
    3dbc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3dbe:	66 95       	lsr	r22
    3dc0:	61 70       	andi	r22, 0x01	; 1
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	68 27       	eor	r22, r24
    3dc6:	81 2f       	mov	r24, r17
    3dc8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
    3dcc:	61 e0       	ldi	r22, 0x01	; 1
    3dce:	81 2f       	mov	r24, r17
    3dd0:	0e 94 17 1c 	call	0x382e	; 0x382e <pinMode>
    3dd4:	81 2f       	mov	r24, r17
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	fc 01       	movw	r30, r24
    3dda:	ee 56       	subi	r30, 0x6E	; 110
    3ddc:	f9 4f       	sbci	r31, 0xF9	; 249
    3dde:	e4 91       	lpm	r30, Z
    3de0:	e8 8b       	std	Y+16, r30	; 0x10
    3de2:	fc 01       	movw	r30, r24
    3de4:	ea 55       	subi	r30, 0x5A	; 90
    3de6:	f9 4f       	sbci	r31, 0xF9	; 249
    3de8:	e4 91       	lpm	r30, Z
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	ee 0f       	add	r30, r30
    3dee:	ff 1f       	adc	r31, r31
    3df0:	ec 53       	subi	r30, 0x3C	; 60
    3df2:	f9 4f       	sbci	r31, 0xF9	; 249
    3df4:	85 91       	lpm	r24, Z+
    3df6:	94 91       	lpm	r25, Z
    3df8:	9a 8b       	std	Y+18, r25	; 0x12
    3dfa:	89 8b       	std	Y+17, r24	; 0x11
    3dfc:	df 91       	pop	r29
    3dfe:	cf 91       	pop	r28
    3e00:	1f 91       	pop	r17
    3e02:	08 95       	ret

00003e04 <_ZN14SoftwareSerial5setRXEh>:
    3e04:	1f 93       	push	r17
    3e06:	cf 93       	push	r28
    3e08:	df 93       	push	r29
    3e0a:	ec 01       	movw	r28, r24
    3e0c:	16 2f       	mov	r17, r22
    3e0e:	60 e0       	ldi	r22, 0x00	; 0
    3e10:	81 2f       	mov	r24, r17
    3e12:	0e 94 17 1c 	call	0x382e	; 0x382e <pinMode>
    3e16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e18:	81 fd       	sbrc	r24, 1
    3e1a:	04 c0       	rjmp	.+8      	; 0x3e24 <_ZN14SoftwareSerial5setRXEh+0x20>
    3e1c:	61 e0       	ldi	r22, 0x01	; 1
    3e1e:	81 2f       	mov	r24, r17
    3e20:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <digitalWrite>
    3e24:	1c 87       	std	Y+12, r17	; 0x0c
    3e26:	81 2f       	mov	r24, r17
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	ee 56       	subi	r30, 0x6E	; 110
    3e2e:	f9 4f       	sbci	r31, 0xF9	; 249
    3e30:	e4 91       	lpm	r30, Z
    3e32:	ed 87       	std	Y+13, r30	; 0x0d
    3e34:	fc 01       	movw	r30, r24
    3e36:	ea 55       	subi	r30, 0x5A	; 90
    3e38:	f9 4f       	sbci	r31, 0xF9	; 249
    3e3a:	e4 91       	lpm	r30, Z
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	ee 0f       	add	r30, r30
    3e40:	ff 1f       	adc	r31, r31
    3e42:	e6 54       	subi	r30, 0x46	; 70
    3e44:	f9 4f       	sbci	r31, 0xF9	; 249
    3e46:	85 91       	lpm	r24, Z+
    3e48:	94 91       	lpm	r25, Z
    3e4a:	9f 87       	std	Y+15, r25	; 0x0f
    3e4c:	8e 87       	std	Y+14, r24	; 0x0e
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	08 95       	ret

00003e56 <_ZN14SoftwareSerialC1Ehhb>:
    3e56:	1f 93       	push	r17
    3e58:	cf 93       	push	r28
    3e5a:	df 93       	push	r29
    3e5c:	ec 01       	movw	r28, r24
    3e5e:	16 2f       	mov	r17, r22
    3e60:	1b 82       	std	Y+3, r1	; 0x03
    3e62:	1a 82       	std	Y+2, r1	; 0x02
    3e64:	88 ee       	ldi	r24, 0xE8	; 232
    3e66:	93 e0       	ldi	r25, 0x03	; 3
    3e68:	a0 e0       	ldi	r26, 0x00	; 0
    3e6a:	b0 e0       	ldi	r27, 0x00	; 0
    3e6c:	8c 83       	std	Y+4, r24	; 0x04
    3e6e:	9d 83       	std	Y+5, r25	; 0x05
    3e70:	ae 83       	std	Y+6, r26	; 0x06
    3e72:	bf 83       	std	Y+7, r27	; 0x07
    3e74:	85 eb       	ldi	r24, 0xB5	; 181
    3e76:	91 e0       	ldi	r25, 0x01	; 1
    3e78:	99 83       	std	Y+1, r25	; 0x01
    3e7a:	88 83       	st	Y, r24
    3e7c:	1f 8a       	std	Y+23, r1	; 0x17
    3e7e:	1e 8a       	std	Y+22, r1	; 0x16
    3e80:	19 8e       	std	Y+25, r1	; 0x19
    3e82:	18 8e       	std	Y+24, r1	; 0x18
    3e84:	1b 8e       	std	Y+27, r1	; 0x1b
    3e86:	1a 8e       	std	Y+26, r1	; 0x1a
    3e88:	1d 8e       	std	Y+29, r1	; 0x1d
    3e8a:	1c 8e       	std	Y+28, r1	; 0x1c
    3e8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e8e:	8e 7f       	andi	r24, 0xFE	; 254
    3e90:	20 fb       	bst	r18, 0
    3e92:	81 f9       	bld	r24, 1
    3e94:	8e 8f       	std	Y+30, r24	; 0x1e
    3e96:	64 2f       	mov	r22, r20
    3e98:	ce 01       	movw	r24, r28
    3e9a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_ZN14SoftwareSerial5setTXEh>
    3e9e:	61 2f       	mov	r22, r17
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <_ZN14SoftwareSerial5setRXEh>

00003eac <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	ec 01       	movw	r28, r24
    3eb2:	9a 01       	movw	r18, r20
    3eb4:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3eb6:	1b 8e       	std	Y+27, r1	; 0x1b
    3eb8:	1a 8e       	std	Y+26, r1	; 0x1a
    3eba:	19 8e       	std	Y+25, r1	; 0x19
    3ebc:	18 8e       	std	Y+24, r1	; 0x18
    3ebe:	1f 8a       	std	Y+23, r1	; 0x17
    3ec0:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	79 e0       	ldi	r23, 0x09	; 9
    3ec6:	8d e3       	ldi	r24, 0x3D	; 61
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	0e 94 3b 20 	call	0x4076	; 0x4076 <__divmodsi4>
    3ece:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3ed0:	24 30       	cpi	r18, 0x04	; 4
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	18 f0       	brcs	.+6      	; 0x3edc <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3ed6:	c9 01       	movw	r24, r18
    3ed8:	03 97       	sbiw	r24, 0x03	; 3
    3eda:	02 c0       	rjmp	.+4      	; 0x3ee0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3ee0:	9d 8f       	std	Y+29, r25	; 0x1d
    3ee2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3ee4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ee6:	66 31       	cpi	r22, 0x16	; 22
    3ee8:	08 f0       	brcs	.+2      	; 0x3eec <_ZN14SoftwareSerial5beginEl+0x40>
    3eea:	69 c0       	rjmp	.+210    	; 0x3fbe <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3eec:	c9 01       	movw	r24, r18
    3eee:	96 95       	lsr	r25
    3ef0:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3ef2:	84 31       	cpi	r24, 0x14	; 20
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	10 f0       	brcs	.+4      	; 0x3efc <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3ef8:	43 97       	sbiw	r24, 0x13	; 19
    3efa:	02 c0       	rjmp	.+4      	; 0x3f00 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3f00:	9f 8b       	std	Y+23, r25	; 0x17
    3f02:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3f04:	36 97       	sbiw	r30, 0x06	; 6
    3f06:	18 f0       	brcs	.+6      	; 0x3f0e <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3f08:	c9 01       	movw	r24, r18
    3f0a:	05 97       	sbiw	r24, 0x05	; 5
    3f0c:	02 c0       	rjmp	.+4      	; 0x3f12 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3f12:	99 8f       	std	Y+25, r25	; 0x19
    3f14:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3f16:	c9 01       	movw	r24, r18
    3f18:	88 0f       	add	r24, r24
    3f1a:	99 1f       	adc	r25, r25
    3f1c:	28 0f       	add	r18, r24
    3f1e:	39 1f       	adc	r19, r25
    3f20:	36 95       	lsr	r19
    3f22:	27 95       	ror	r18
    3f24:	36 95       	lsr	r19
    3f26:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3f28:	2d 30       	cpi	r18, 0x0D	; 13
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	18 f0       	brcs	.+6      	; 0x3f34 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3f2e:	2c 50       	subi	r18, 0x0C	; 12
    3f30:	31 09       	sbc	r19, r1
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3f34:	21 e0       	ldi	r18, 0x01	; 1
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3f38:	3b 8f       	std	Y+27, r19	; 0x1b
    3f3a:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3f3c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3f40:	68 30       	cpi	r22, 0x08	; 8
    3f42:	50 f0       	brcs	.+20     	; 0x3f58 <_ZN14SoftwareSerial5beginEl+0xac>
    3f44:	21 e0       	ldi	r18, 0x01	; 1
    3f46:	6e 30       	cpi	r22, 0x0E	; 14
    3f48:	08 f4       	brcc	.+2      	; 0x3f4c <_ZN14SoftwareSerial5beginEl+0xa0>
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	01 c0       	rjmp	.+2      	; 0x3f52 <_ZN14SoftwareSerial5beginEl+0xa6>
    3f50:	88 0f       	add	r24, r24
    3f52:	2a 95       	dec	r18
    3f54:	ea f7       	brpl	.-6      	; 0x3f50 <_ZN14SoftwareSerial5beginEl+0xa4>
    3f56:	01 c0       	rjmp	.+2      	; 0x3f5a <_ZN14SoftwareSerial5beginEl+0xae>
    3f58:	84 e0       	ldi	r24, 0x04	; 4
    3f5a:	89 2b       	or	r24, r25
    3f5c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    3f60:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f62:	98 30       	cpi	r25, 0x08	; 8
    3f64:	38 f0       	brcs	.+14     	; 0x3f74 <_ZN14SoftwareSerial5beginEl+0xc8>
    3f66:	9e 30       	cpi	r25, 0x0E	; 14
    3f68:	40 f0       	brcs	.+16     	; 0x3f7a <_ZN14SoftwareSerial5beginEl+0xce>
    3f6a:	96 31       	cpi	r25, 0x16	; 22
    3f6c:	48 f0       	brcs	.+18     	; 0x3f80 <_ZN14SoftwareSerial5beginEl+0xd4>
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	08 c0       	rjmp	.+16     	; 0x3f84 <_ZN14SoftwareSerial5beginEl+0xd8>
    3f74:	2d e6       	ldi	r18, 0x6D	; 109
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	05 c0       	rjmp	.+10     	; 0x3f84 <_ZN14SoftwareSerial5beginEl+0xd8>
    3f7a:	2b e6       	ldi	r18, 0x6B	; 107
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <_ZN14SoftwareSerial5beginEl+0xd8>
    3f80:	2c e6       	ldi	r18, 0x6C	; 108
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	3c 8b       	std	Y+20, r19	; 0x14
    3f86:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3f88:	98 30       	cpi	r25, 0x08	; 8
    3f8a:	30 f4       	brcc	.+12     	; 0x3f98 <_ZN14SoftwareSerial5beginEl+0xec>
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	01 c0       	rjmp	.+2      	; 0x3f92 <_ZN14SoftwareSerial5beginEl+0xe6>
    3f90:	88 0f       	add	r24, r24
    3f92:	9a 95       	dec	r25
    3f94:	ea f7       	brpl	.-6      	; 0x3f90 <_ZN14SoftwareSerial5beginEl+0xe4>
    3f96:	0e c0       	rjmp	.+28     	; 0x3fb4 <_ZN14SoftwareSerial5beginEl+0x108>
    3f98:	29 2f       	mov	r18, r25
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	9e 30       	cpi	r25, 0x0E	; 14
    3f9e:	18 f4       	brcc	.+6      	; 0x3fa6 <_ZN14SoftwareSerial5beginEl+0xfa>
    3fa0:	28 50       	subi	r18, 0x08	; 8
    3fa2:	31 09       	sbc	r19, r1
    3fa4:	02 c0       	rjmp	.+4      	; 0x3faa <_ZN14SoftwareSerial5beginEl+0xfe>
    3fa6:	2e 50       	subi	r18, 0x0E	; 14
    3fa8:	31 09       	sbc	r19, r1
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <_ZN14SoftwareSerial5beginEl+0x104>
    3fae:	88 0f       	add	r24, r24
    3fb0:	2a 95       	dec	r18
    3fb2:	ea f7       	brpl	.-6      	; 0x3fae <_ZN14SoftwareSerial5beginEl+0x102>
    3fb4:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3fb6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fb8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	f1 f7       	brne	.-4      	; 0x3fba <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3fbe:	ce 01       	movw	r24, r28
}
    3fc0:	df 91       	pop	r29
    3fc2:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3fc4:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <_ZN14SoftwareSerial6listenEv>

00003fc8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3fc8:	08 95       	ret

00003fca <__udivmodqi4>:
    3fca:	99 1b       	sub	r25, r25
    3fcc:	79 e0       	ldi	r23, 0x09	; 9
    3fce:	04 c0       	rjmp	.+8      	; 0x3fd8 <__udivmodqi4_ep>

00003fd0 <__udivmodqi4_loop>:
    3fd0:	99 1f       	adc	r25, r25
    3fd2:	96 17       	cp	r25, r22
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <__udivmodqi4_ep>
    3fd6:	96 1b       	sub	r25, r22

00003fd8 <__udivmodqi4_ep>:
    3fd8:	88 1f       	adc	r24, r24
    3fda:	7a 95       	dec	r23
    3fdc:	c9 f7       	brne	.-14     	; 0x3fd0 <__udivmodqi4_loop>
    3fde:	80 95       	com	r24
    3fe0:	08 95       	ret

00003fe2 <__udivmodhi4>:
    3fe2:	aa 1b       	sub	r26, r26
    3fe4:	bb 1b       	sub	r27, r27
    3fe6:	51 e1       	ldi	r21, 0x11	; 17
    3fe8:	07 c0       	rjmp	.+14     	; 0x3ff8 <__udivmodhi4_ep>

00003fea <__udivmodhi4_loop>:
    3fea:	aa 1f       	adc	r26, r26
    3fec:	bb 1f       	adc	r27, r27
    3fee:	a6 17       	cp	r26, r22
    3ff0:	b7 07       	cpc	r27, r23
    3ff2:	10 f0       	brcs	.+4      	; 0x3ff8 <__udivmodhi4_ep>
    3ff4:	a6 1b       	sub	r26, r22
    3ff6:	b7 0b       	sbc	r27, r23

00003ff8 <__udivmodhi4_ep>:
    3ff8:	88 1f       	adc	r24, r24
    3ffa:	99 1f       	adc	r25, r25
    3ffc:	5a 95       	dec	r21
    3ffe:	a9 f7       	brne	.-22     	; 0x3fea <__udivmodhi4_loop>
    4000:	80 95       	com	r24
    4002:	90 95       	com	r25
    4004:	bc 01       	movw	r22, r24
    4006:	cd 01       	movw	r24, r26
    4008:	08 95       	ret

0000400a <__divmodhi4>:
    400a:	97 fb       	bst	r25, 7
    400c:	07 2e       	mov	r0, r23
    400e:	16 f4       	brtc	.+4      	; 0x4014 <__divmodhi4+0xa>
    4010:	00 94       	com	r0
    4012:	07 d0       	rcall	.+14     	; 0x4022 <__divmodhi4_neg1>
    4014:	77 fd       	sbrc	r23, 7
    4016:	09 d0       	rcall	.+18     	; 0x402a <__divmodhi4_neg2>
    4018:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <__udivmodhi4>
    401c:	07 fc       	sbrc	r0, 7
    401e:	05 d0       	rcall	.+10     	; 0x402a <__divmodhi4_neg2>
    4020:	3e f4       	brtc	.+14     	; 0x4030 <__divmodhi4_exit>

00004022 <__divmodhi4_neg1>:
    4022:	90 95       	com	r25
    4024:	81 95       	neg	r24
    4026:	9f 4f       	sbci	r25, 0xFF	; 255
    4028:	08 95       	ret

0000402a <__divmodhi4_neg2>:
    402a:	70 95       	com	r23
    402c:	61 95       	neg	r22
    402e:	7f 4f       	sbci	r23, 0xFF	; 255

00004030 <__divmodhi4_exit>:
    4030:	08 95       	ret

00004032 <__udivmodsi4>:
    4032:	a1 e2       	ldi	r26, 0x21	; 33
    4034:	1a 2e       	mov	r1, r26
    4036:	aa 1b       	sub	r26, r26
    4038:	bb 1b       	sub	r27, r27
    403a:	fd 01       	movw	r30, r26
    403c:	0d c0       	rjmp	.+26     	; 0x4058 <__udivmodsi4_ep>

0000403e <__udivmodsi4_loop>:
    403e:	aa 1f       	adc	r26, r26
    4040:	bb 1f       	adc	r27, r27
    4042:	ee 1f       	adc	r30, r30
    4044:	ff 1f       	adc	r31, r31
    4046:	a2 17       	cp	r26, r18
    4048:	b3 07       	cpc	r27, r19
    404a:	e4 07       	cpc	r30, r20
    404c:	f5 07       	cpc	r31, r21
    404e:	20 f0       	brcs	.+8      	; 0x4058 <__udivmodsi4_ep>
    4050:	a2 1b       	sub	r26, r18
    4052:	b3 0b       	sbc	r27, r19
    4054:	e4 0b       	sbc	r30, r20
    4056:	f5 0b       	sbc	r31, r21

00004058 <__udivmodsi4_ep>:
    4058:	66 1f       	adc	r22, r22
    405a:	77 1f       	adc	r23, r23
    405c:	88 1f       	adc	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	1a 94       	dec	r1
    4062:	69 f7       	brne	.-38     	; 0x403e <__udivmodsi4_loop>
    4064:	60 95       	com	r22
    4066:	70 95       	com	r23
    4068:	80 95       	com	r24
    406a:	90 95       	com	r25
    406c:	9b 01       	movw	r18, r22
    406e:	ac 01       	movw	r20, r24
    4070:	bd 01       	movw	r22, r26
    4072:	cf 01       	movw	r24, r30
    4074:	08 95       	ret

00004076 <__divmodsi4>:
    4076:	05 2e       	mov	r0, r21
    4078:	97 fb       	bst	r25, 7
    407a:	1e f4       	brtc	.+6      	; 0x4082 <__divmodsi4+0xc>
    407c:	00 94       	com	r0
    407e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__negsi2>
    4082:	57 fd       	sbrc	r21, 7
    4084:	07 d0       	rcall	.+14     	; 0x4094 <__divmodsi4_neg2>
    4086:	0e 94 19 20 	call	0x4032	; 0x4032 <__udivmodsi4>
    408a:	07 fc       	sbrc	r0, 7
    408c:	03 d0       	rcall	.+6      	; 0x4094 <__divmodsi4_neg2>
    408e:	4e f4       	brtc	.+18     	; 0x40a2 <__divmodsi4_exit>
    4090:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__negsi2>

00004094 <__divmodsi4_neg2>:
    4094:	50 95       	com	r21
    4096:	40 95       	com	r20
    4098:	30 95       	com	r19
    409a:	21 95       	neg	r18
    409c:	3f 4f       	sbci	r19, 0xFF	; 255
    409e:	4f 4f       	sbci	r20, 0xFF	; 255
    40a0:	5f 4f       	sbci	r21, 0xFF	; 255

000040a2 <__divmodsi4_exit>:
    40a2:	08 95       	ret

000040a4 <__negsi2>:
    40a4:	90 95       	com	r25
    40a6:	80 95       	com	r24
    40a8:	70 95       	com	r23
    40aa:	61 95       	neg	r22
    40ac:	7f 4f       	sbci	r23, 0xFF	; 255
    40ae:	8f 4f       	sbci	r24, 0xFF	; 255
    40b0:	9f 4f       	sbci	r25, 0xFF	; 255
    40b2:	08 95       	ret

000040b4 <__tablejump2__>:
    40b4:	ee 0f       	add	r30, r30
    40b6:	ff 1f       	adc	r31, r31
    40b8:	05 90       	lpm	r0, Z+
    40ba:	f4 91       	lpm	r31, Z
    40bc:	e0 2d       	mov	r30, r0
    40be:	09 94       	ijmp

000040c0 <malloc>:
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	82 30       	cpi	r24, 0x02	; 2
    40ca:	91 05       	cpc	r25, r1
    40cc:	10 f4       	brcc	.+4      	; 0x40d2 <malloc+0x12>
    40ce:	82 e0       	ldi	r24, 0x02	; 2
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <__flp>
    40d6:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <__flp+0x1>
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	a0 e0       	ldi	r26, 0x00	; 0
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	30 97       	sbiw	r30, 0x00	; 0
    40e4:	19 f1       	breq	.+70     	; 0x412c <malloc+0x6c>
    40e6:	40 81       	ld	r20, Z
    40e8:	51 81       	ldd	r21, Z+1	; 0x01
    40ea:	02 81       	ldd	r16, Z+2	; 0x02
    40ec:	13 81       	ldd	r17, Z+3	; 0x03
    40ee:	48 17       	cp	r20, r24
    40f0:	59 07       	cpc	r21, r25
    40f2:	c8 f0       	brcs	.+50     	; 0x4126 <malloc+0x66>
    40f4:	84 17       	cp	r24, r20
    40f6:	95 07       	cpc	r25, r21
    40f8:	69 f4       	brne	.+26     	; 0x4114 <malloc+0x54>
    40fa:	10 97       	sbiw	r26, 0x00	; 0
    40fc:	31 f0       	breq	.+12     	; 0x410a <malloc+0x4a>
    40fe:	12 96       	adiw	r26, 0x02	; 2
    4100:	0c 93       	st	X, r16
    4102:	12 97       	sbiw	r26, 0x02	; 2
    4104:	13 96       	adiw	r26, 0x03	; 3
    4106:	1c 93       	st	X, r17
    4108:	27 c0       	rjmp	.+78     	; 0x4158 <malloc+0x98>
    410a:	00 93 af 04 	sts	0x04AF, r16	; 0x8004af <__flp>
    410e:	10 93 b0 04 	sts	0x04B0, r17	; 0x8004b0 <__flp+0x1>
    4112:	22 c0       	rjmp	.+68     	; 0x4158 <malloc+0x98>
    4114:	21 15       	cp	r18, r1
    4116:	31 05       	cpc	r19, r1
    4118:	19 f0       	breq	.+6      	; 0x4120 <malloc+0x60>
    411a:	42 17       	cp	r20, r18
    411c:	53 07       	cpc	r21, r19
    411e:	18 f4       	brcc	.+6      	; 0x4126 <malloc+0x66>
    4120:	9a 01       	movw	r18, r20
    4122:	bd 01       	movw	r22, r26
    4124:	ef 01       	movw	r28, r30
    4126:	df 01       	movw	r26, r30
    4128:	f8 01       	movw	r30, r16
    412a:	db cf       	rjmp	.-74     	; 0x40e2 <malloc+0x22>
    412c:	21 15       	cp	r18, r1
    412e:	31 05       	cpc	r19, r1
    4130:	f9 f0       	breq	.+62     	; 0x4170 <malloc+0xb0>
    4132:	28 1b       	sub	r18, r24
    4134:	39 0b       	sbc	r19, r25
    4136:	24 30       	cpi	r18, 0x04	; 4
    4138:	31 05       	cpc	r19, r1
    413a:	80 f4       	brcc	.+32     	; 0x415c <malloc+0x9c>
    413c:	8a 81       	ldd	r24, Y+2	; 0x02
    413e:	9b 81       	ldd	r25, Y+3	; 0x03
    4140:	61 15       	cp	r22, r1
    4142:	71 05       	cpc	r23, r1
    4144:	21 f0       	breq	.+8      	; 0x414e <malloc+0x8e>
    4146:	fb 01       	movw	r30, r22
    4148:	93 83       	std	Z+3, r25	; 0x03
    414a:	82 83       	std	Z+2, r24	; 0x02
    414c:	04 c0       	rjmp	.+8      	; 0x4156 <malloc+0x96>
    414e:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <__flp+0x1>
    4152:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <__flp>
    4156:	fe 01       	movw	r30, r28
    4158:	32 96       	adiw	r30, 0x02	; 2
    415a:	44 c0       	rjmp	.+136    	; 0x41e4 <malloc+0x124>
    415c:	fe 01       	movw	r30, r28
    415e:	e2 0f       	add	r30, r18
    4160:	f3 1f       	adc	r31, r19
    4162:	81 93       	st	Z+, r24
    4164:	91 93       	st	Z+, r25
    4166:	22 50       	subi	r18, 0x02	; 2
    4168:	31 09       	sbc	r19, r1
    416a:	39 83       	std	Y+1, r19	; 0x01
    416c:	28 83       	st	Y, r18
    416e:	3a c0       	rjmp	.+116    	; 0x41e4 <malloc+0x124>
    4170:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <__brkval>
    4174:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <__brkval+0x1>
    4178:	23 2b       	or	r18, r19
    417a:	41 f4       	brne	.+16     	; 0x418c <malloc+0xcc>
    417c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4180:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4184:	30 93 ae 04 	sts	0x04AE, r19	; 0x8004ae <__brkval+0x1>
    4188:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <__brkval>
    418c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4190:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4194:	21 15       	cp	r18, r1
    4196:	31 05       	cpc	r19, r1
    4198:	41 f4       	brne	.+16     	; 0x41aa <malloc+0xea>
    419a:	2d b7       	in	r18, 0x3d	; 61
    419c:	3e b7       	in	r19, 0x3e	; 62
    419e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    41a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    41a6:	24 1b       	sub	r18, r20
    41a8:	35 0b       	sbc	r19, r21
    41aa:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <__brkval>
    41ae:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <__brkval+0x1>
    41b2:	e2 17       	cp	r30, r18
    41b4:	f3 07       	cpc	r31, r19
    41b6:	a0 f4       	brcc	.+40     	; 0x41e0 <malloc+0x120>
    41b8:	2e 1b       	sub	r18, r30
    41ba:	3f 0b       	sbc	r19, r31
    41bc:	28 17       	cp	r18, r24
    41be:	39 07       	cpc	r19, r25
    41c0:	78 f0       	brcs	.+30     	; 0x41e0 <malloc+0x120>
    41c2:	ac 01       	movw	r20, r24
    41c4:	4e 5f       	subi	r20, 0xFE	; 254
    41c6:	5f 4f       	sbci	r21, 0xFF	; 255
    41c8:	24 17       	cp	r18, r20
    41ca:	35 07       	cpc	r19, r21
    41cc:	48 f0       	brcs	.+18     	; 0x41e0 <malloc+0x120>
    41ce:	4e 0f       	add	r20, r30
    41d0:	5f 1f       	adc	r21, r31
    41d2:	50 93 ae 04 	sts	0x04AE, r21	; 0x8004ae <__brkval+0x1>
    41d6:	40 93 ad 04 	sts	0x04AD, r20	; 0x8004ad <__brkval>
    41da:	81 93       	st	Z+, r24
    41dc:	91 93       	st	Z+, r25
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <malloc+0x124>
    41e0:	e0 e0       	ldi	r30, 0x00	; 0
    41e2:	f0 e0       	ldi	r31, 0x00	; 0
    41e4:	cf 01       	movw	r24, r30
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	08 95       	ret

000041f0 <free>:
    41f0:	cf 93       	push	r28
    41f2:	df 93       	push	r29
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	09 f4       	brne	.+2      	; 0x41fa <free+0xa>
    41f8:	81 c0       	rjmp	.+258    	; 0x42fc <free+0x10c>
    41fa:	fc 01       	movw	r30, r24
    41fc:	32 97       	sbiw	r30, 0x02	; 2
    41fe:	13 82       	std	Z+3, r1	; 0x03
    4200:	12 82       	std	Z+2, r1	; 0x02
    4202:	a0 91 af 04 	lds	r26, 0x04AF	; 0x8004af <__flp>
    4206:	b0 91 b0 04 	lds	r27, 0x04B0	; 0x8004b0 <__flp+0x1>
    420a:	10 97       	sbiw	r26, 0x00	; 0
    420c:	81 f4       	brne	.+32     	; 0x422e <free+0x3e>
    420e:	20 81       	ld	r18, Z
    4210:	31 81       	ldd	r19, Z+1	; 0x01
    4212:	82 0f       	add	r24, r18
    4214:	93 1f       	adc	r25, r19
    4216:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <__brkval>
    421a:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <__brkval+0x1>
    421e:	28 17       	cp	r18, r24
    4220:	39 07       	cpc	r19, r25
    4222:	51 f5       	brne	.+84     	; 0x4278 <free+0x88>
    4224:	f0 93 ae 04 	sts	0x04AE, r31	; 0x8004ae <__brkval+0x1>
    4228:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <__brkval>
    422c:	67 c0       	rjmp	.+206    	; 0x42fc <free+0x10c>
    422e:	ed 01       	movw	r28, r26
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	ce 17       	cp	r28, r30
    4236:	df 07       	cpc	r29, r31
    4238:	40 f4       	brcc	.+16     	; 0x424a <free+0x5a>
    423a:	4a 81       	ldd	r20, Y+2	; 0x02
    423c:	5b 81       	ldd	r21, Y+3	; 0x03
    423e:	9e 01       	movw	r18, r28
    4240:	41 15       	cp	r20, r1
    4242:	51 05       	cpc	r21, r1
    4244:	f1 f0       	breq	.+60     	; 0x4282 <free+0x92>
    4246:	ea 01       	movw	r28, r20
    4248:	f5 cf       	rjmp	.-22     	; 0x4234 <free+0x44>
    424a:	d3 83       	std	Z+3, r29	; 0x03
    424c:	c2 83       	std	Z+2, r28	; 0x02
    424e:	40 81       	ld	r20, Z
    4250:	51 81       	ldd	r21, Z+1	; 0x01
    4252:	84 0f       	add	r24, r20
    4254:	95 1f       	adc	r25, r21
    4256:	c8 17       	cp	r28, r24
    4258:	d9 07       	cpc	r29, r25
    425a:	59 f4       	brne	.+22     	; 0x4272 <free+0x82>
    425c:	88 81       	ld	r24, Y
    425e:	99 81       	ldd	r25, Y+1	; 0x01
    4260:	84 0f       	add	r24, r20
    4262:	95 1f       	adc	r25, r21
    4264:	02 96       	adiw	r24, 0x02	; 2
    4266:	91 83       	std	Z+1, r25	; 0x01
    4268:	80 83       	st	Z, r24
    426a:	8a 81       	ldd	r24, Y+2	; 0x02
    426c:	9b 81       	ldd	r25, Y+3	; 0x03
    426e:	93 83       	std	Z+3, r25	; 0x03
    4270:	82 83       	std	Z+2, r24	; 0x02
    4272:	21 15       	cp	r18, r1
    4274:	31 05       	cpc	r19, r1
    4276:	29 f4       	brne	.+10     	; 0x4282 <free+0x92>
    4278:	f0 93 b0 04 	sts	0x04B0, r31	; 0x8004b0 <__flp+0x1>
    427c:	e0 93 af 04 	sts	0x04AF, r30	; 0x8004af <__flp>
    4280:	3d c0       	rjmp	.+122    	; 0x42fc <free+0x10c>
    4282:	e9 01       	movw	r28, r18
    4284:	fb 83       	std	Y+3, r31	; 0x03
    4286:	ea 83       	std	Y+2, r30	; 0x02
    4288:	49 91       	ld	r20, Y+
    428a:	59 91       	ld	r21, Y+
    428c:	c4 0f       	add	r28, r20
    428e:	d5 1f       	adc	r29, r21
    4290:	ec 17       	cp	r30, r28
    4292:	fd 07       	cpc	r31, r29
    4294:	61 f4       	brne	.+24     	; 0x42ae <free+0xbe>
    4296:	80 81       	ld	r24, Z
    4298:	91 81       	ldd	r25, Z+1	; 0x01
    429a:	84 0f       	add	r24, r20
    429c:	95 1f       	adc	r25, r21
    429e:	02 96       	adiw	r24, 0x02	; 2
    42a0:	e9 01       	movw	r28, r18
    42a2:	99 83       	std	Y+1, r25	; 0x01
    42a4:	88 83       	st	Y, r24
    42a6:	82 81       	ldd	r24, Z+2	; 0x02
    42a8:	93 81       	ldd	r25, Z+3	; 0x03
    42aa:	9b 83       	std	Y+3, r25	; 0x03
    42ac:	8a 83       	std	Y+2, r24	; 0x02
    42ae:	e0 e0       	ldi	r30, 0x00	; 0
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	12 96       	adiw	r26, 0x02	; 2
    42b4:	8d 91       	ld	r24, X+
    42b6:	9c 91       	ld	r25, X
    42b8:	13 97       	sbiw	r26, 0x03	; 3
    42ba:	00 97       	sbiw	r24, 0x00	; 0
    42bc:	19 f0       	breq	.+6      	; 0x42c4 <free+0xd4>
    42be:	fd 01       	movw	r30, r26
    42c0:	dc 01       	movw	r26, r24
    42c2:	f7 cf       	rjmp	.-18     	; 0x42b2 <free+0xc2>
    42c4:	8d 91       	ld	r24, X+
    42c6:	9c 91       	ld	r25, X
    42c8:	11 97       	sbiw	r26, 0x01	; 1
    42ca:	9d 01       	movw	r18, r26
    42cc:	2e 5f       	subi	r18, 0xFE	; 254
    42ce:	3f 4f       	sbci	r19, 0xFF	; 255
    42d0:	82 0f       	add	r24, r18
    42d2:	93 1f       	adc	r25, r19
    42d4:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <__brkval>
    42d8:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <__brkval+0x1>
    42dc:	28 17       	cp	r18, r24
    42de:	39 07       	cpc	r19, r25
    42e0:	69 f4       	brne	.+26     	; 0x42fc <free+0x10c>
    42e2:	30 97       	sbiw	r30, 0x00	; 0
    42e4:	29 f4       	brne	.+10     	; 0x42f0 <free+0x100>
    42e6:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <__flp+0x1>
    42ea:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <__flp>
    42ee:	02 c0       	rjmp	.+4      	; 0x42f4 <free+0x104>
    42f0:	13 82       	std	Z+3, r1	; 0x03
    42f2:	12 82       	std	Z+2, r1	; 0x02
    42f4:	b0 93 ae 04 	sts	0x04AE, r27	; 0x8004ae <__brkval+0x1>
    42f8:	a0 93 ad 04 	sts	0x04AD, r26	; 0x8004ad <__brkval>
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	08 95       	ret

00004302 <realloc>:
    4302:	a0 e0       	ldi	r26, 0x00	; 0
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	e7 e8       	ldi	r30, 0x87	; 135
    4308:	f1 e2       	ldi	r31, 0x21	; 33
    430a:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__prologue_saves__+0x8>
    430e:	ec 01       	movw	r28, r24
    4310:	00 97       	sbiw	r24, 0x00	; 0
    4312:	21 f4       	brne	.+8      	; 0x431c <realloc+0x1a>
    4314:	cb 01       	movw	r24, r22
    4316:	0e 94 60 20 	call	0x40c0	; 0x40c0 <malloc>
    431a:	b4 c0       	rjmp	.+360    	; 0x4484 <realloc+0x182>
    431c:	fc 01       	movw	r30, r24
    431e:	e6 0f       	add	r30, r22
    4320:	f7 1f       	adc	r31, r23
    4322:	9c 01       	movw	r18, r24
    4324:	22 50       	subi	r18, 0x02	; 2
    4326:	31 09       	sbc	r19, r1
    4328:	e2 17       	cp	r30, r18
    432a:	f3 07       	cpc	r31, r19
    432c:	08 f4       	brcc	.+2      	; 0x4330 <realloc+0x2e>
    432e:	a8 c0       	rjmp	.+336    	; 0x4480 <realloc+0x17e>
    4330:	d9 01       	movw	r26, r18
    4332:	0d 91       	ld	r16, X+
    4334:	1c 91       	ld	r17, X
    4336:	11 97       	sbiw	r26, 0x01	; 1
    4338:	06 17       	cp	r16, r22
    433a:	17 07       	cpc	r17, r23
    433c:	b0 f0       	brcs	.+44     	; 0x436a <realloc+0x68>
    433e:	05 30       	cpi	r16, 0x05	; 5
    4340:	11 05       	cpc	r17, r1
    4342:	08 f4       	brcc	.+2      	; 0x4346 <realloc+0x44>
    4344:	9b c0       	rjmp	.+310    	; 0x447c <realloc+0x17a>
    4346:	c8 01       	movw	r24, r16
    4348:	04 97       	sbiw	r24, 0x04	; 4
    434a:	86 17       	cp	r24, r22
    434c:	97 07       	cpc	r25, r23
    434e:	08 f4       	brcc	.+2      	; 0x4352 <realloc+0x50>
    4350:	95 c0       	rjmp	.+298    	; 0x447c <realloc+0x17a>
    4352:	02 50       	subi	r16, 0x02	; 2
    4354:	11 09       	sbc	r17, r1
    4356:	06 1b       	sub	r16, r22
    4358:	17 0b       	sbc	r17, r23
    435a:	01 93       	st	Z+, r16
    435c:	11 93       	st	Z+, r17
    435e:	6d 93       	st	X+, r22
    4360:	7c 93       	st	X, r23
    4362:	cf 01       	movw	r24, r30
    4364:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <free>
    4368:	89 c0       	rjmp	.+274    	; 0x447c <realloc+0x17a>
    436a:	5b 01       	movw	r10, r22
    436c:	a0 1a       	sub	r10, r16
    436e:	b1 0a       	sbc	r11, r17
    4370:	4c 01       	movw	r8, r24
    4372:	80 0e       	add	r8, r16
    4374:	91 1e       	adc	r9, r17
    4376:	a0 91 af 04 	lds	r26, 0x04AF	; 0x8004af <__flp>
    437a:	b0 91 b0 04 	lds	r27, 0x04B0	; 0x8004b0 <__flp+0x1>
    437e:	61 2c       	mov	r6, r1
    4380:	71 2c       	mov	r7, r1
    4382:	e1 2c       	mov	r14, r1
    4384:	f1 2c       	mov	r15, r1
    4386:	10 97       	sbiw	r26, 0x00	; 0
    4388:	09 f4       	brne	.+2      	; 0x438c <realloc+0x8a>
    438a:	46 c0       	rjmp	.+140    	; 0x4418 <realloc+0x116>
    438c:	8d 91       	ld	r24, X+
    438e:	9c 91       	ld	r25, X
    4390:	11 97       	sbiw	r26, 0x01	; 1
    4392:	a8 15       	cp	r26, r8
    4394:	b9 05       	cpc	r27, r9
    4396:	b1 f5       	brne	.+108    	; 0x4404 <realloc+0x102>
    4398:	6c 01       	movw	r12, r24
    439a:	42 e0       	ldi	r20, 0x02	; 2
    439c:	c4 0e       	add	r12, r20
    439e:	d1 1c       	adc	r13, r1
    43a0:	ca 14       	cp	r12, r10
    43a2:	db 04       	cpc	r13, r11
    43a4:	78 f1       	brcs	.+94     	; 0x4404 <realloc+0x102>
    43a6:	4c 01       	movw	r8, r24
    43a8:	8a 18       	sub	r8, r10
    43aa:	9b 08       	sbc	r9, r11
    43ac:	64 01       	movw	r12, r8
    43ae:	42 e0       	ldi	r20, 0x02	; 2
    43b0:	c4 0e       	add	r12, r20
    43b2:	d1 1c       	adc	r13, r1
    43b4:	12 96       	adiw	r26, 0x02	; 2
    43b6:	bc 90       	ld	r11, X
    43b8:	12 97       	sbiw	r26, 0x02	; 2
    43ba:	13 96       	adiw	r26, 0x03	; 3
    43bc:	ac 91       	ld	r26, X
    43be:	b5 e0       	ldi	r27, 0x05	; 5
    43c0:	cb 16       	cp	r12, r27
    43c2:	d1 04       	cpc	r13, r1
    43c4:	40 f0       	brcs	.+16     	; 0x43d6 <realloc+0xd4>
    43c6:	b2 82       	std	Z+2, r11	; 0x02
    43c8:	a3 83       	std	Z+3, r26	; 0x03
    43ca:	91 82       	std	Z+1, r9	; 0x01
    43cc:	80 82       	st	Z, r8
    43ce:	d9 01       	movw	r26, r18
    43d0:	6d 93       	st	X+, r22
    43d2:	7c 93       	st	X, r23
    43d4:	09 c0       	rjmp	.+18     	; 0x43e8 <realloc+0xe6>
    43d6:	0e 5f       	subi	r16, 0xFE	; 254
    43d8:	1f 4f       	sbci	r17, 0xFF	; 255
    43da:	80 0f       	add	r24, r16
    43dc:	91 1f       	adc	r25, r17
    43de:	f9 01       	movw	r30, r18
    43e0:	91 83       	std	Z+1, r25	; 0x01
    43e2:	80 83       	st	Z, r24
    43e4:	eb 2d       	mov	r30, r11
    43e6:	fa 2f       	mov	r31, r26
    43e8:	e1 14       	cp	r14, r1
    43ea:	f1 04       	cpc	r15, r1
    43ec:	31 f0       	breq	.+12     	; 0x43fa <realloc+0xf8>
    43ee:	d7 01       	movw	r26, r14
    43f0:	13 96       	adiw	r26, 0x03	; 3
    43f2:	fc 93       	st	X, r31
    43f4:	ee 93       	st	-X, r30
    43f6:	12 97       	sbiw	r26, 0x02	; 2
    43f8:	41 c0       	rjmp	.+130    	; 0x447c <realloc+0x17a>
    43fa:	f0 93 b0 04 	sts	0x04B0, r31	; 0x8004b0 <__flp+0x1>
    43fe:	e0 93 af 04 	sts	0x04AF, r30	; 0x8004af <__flp>
    4402:	3c c0       	rjmp	.+120    	; 0x447c <realloc+0x17a>
    4404:	68 16       	cp	r6, r24
    4406:	79 06       	cpc	r7, r25
    4408:	08 f4       	brcc	.+2      	; 0x440c <realloc+0x10a>
    440a:	3c 01       	movw	r6, r24
    440c:	7d 01       	movw	r14, r26
    440e:	12 96       	adiw	r26, 0x02	; 2
    4410:	0d 90       	ld	r0, X+
    4412:	bc 91       	ld	r27, X
    4414:	a0 2d       	mov	r26, r0
    4416:	b7 cf       	rjmp	.-146    	; 0x4386 <realloc+0x84>
    4418:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <__brkval>
    441c:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <__brkval+0x1>
    4420:	88 16       	cp	r8, r24
    4422:	99 06       	cpc	r9, r25
    4424:	e1 f4       	brne	.+56     	; 0x445e <realloc+0x15c>
    4426:	66 16       	cp	r6, r22
    4428:	77 06       	cpc	r7, r23
    442a:	c8 f4       	brcc	.+50     	; 0x445e <realloc+0x15c>
    442c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4430:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4434:	00 97       	sbiw	r24, 0x00	; 0
    4436:	41 f4       	brne	.+16     	; 0x4448 <realloc+0x146>
    4438:	8d b7       	in	r24, 0x3d	; 61
    443a:	9e b7       	in	r25, 0x3e	; 62
    443c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4440:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4444:	84 1b       	sub	r24, r20
    4446:	95 0b       	sbc	r25, r21
    4448:	e8 17       	cp	r30, r24
    444a:	f9 07       	cpc	r31, r25
    444c:	c8 f4       	brcc	.+50     	; 0x4480 <realloc+0x17e>
    444e:	f0 93 ae 04 	sts	0x04AE, r31	; 0x8004ae <__brkval+0x1>
    4452:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <__brkval>
    4456:	f9 01       	movw	r30, r18
    4458:	71 83       	std	Z+1, r23	; 0x01
    445a:	60 83       	st	Z, r22
    445c:	0f c0       	rjmp	.+30     	; 0x447c <realloc+0x17a>
    445e:	cb 01       	movw	r24, r22
    4460:	0e 94 60 20 	call	0x40c0	; 0x40c0 <malloc>
    4464:	7c 01       	movw	r14, r24
    4466:	00 97       	sbiw	r24, 0x00	; 0
    4468:	59 f0       	breq	.+22     	; 0x4480 <realloc+0x17e>
    446a:	a8 01       	movw	r20, r16
    446c:	be 01       	movw	r22, r28
    446e:	0e 94 91 22 	call	0x4522	; 0x4522 <memcpy>
    4472:	ce 01       	movw	r24, r28
    4474:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <free>
    4478:	c7 01       	movw	r24, r14
    447a:	04 c0       	rjmp	.+8      	; 0x4484 <realloc+0x182>
    447c:	ce 01       	movw	r24, r28
    447e:	02 c0       	rjmp	.+4      	; 0x4484 <realloc+0x182>
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
    4488:	ee e0       	ldi	r30, 0x0E	; 14
    448a:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__epilogue_restores__+0x8>

0000448e <atoi>:
    448e:	fc 01       	movw	r30, r24
    4490:	88 27       	eor	r24, r24
    4492:	99 27       	eor	r25, r25
    4494:	e8 94       	clt
    4496:	21 91       	ld	r18, Z+
    4498:	20 32       	cpi	r18, 0x20	; 32
    449a:	e9 f3       	breq	.-6      	; 0x4496 <atoi+0x8>
    449c:	29 30       	cpi	r18, 0x09	; 9
    449e:	10 f0       	brcs	.+4      	; 0x44a4 <atoi+0x16>
    44a0:	2e 30       	cpi	r18, 0x0E	; 14
    44a2:	c8 f3       	brcs	.-14     	; 0x4496 <atoi+0x8>
    44a4:	2b 32       	cpi	r18, 0x2B	; 43
    44a6:	41 f0       	breq	.+16     	; 0x44b8 <atoi+0x2a>
    44a8:	2d 32       	cpi	r18, 0x2D	; 45
    44aa:	39 f4       	brne	.+14     	; 0x44ba <atoi+0x2c>
    44ac:	68 94       	set
    44ae:	04 c0       	rjmp	.+8      	; 0x44b8 <atoi+0x2a>
    44b0:	0e 94 b7 22 	call	0x456e	; 0x456e <__mulhi_const_10>
    44b4:	82 0f       	add	r24, r18
    44b6:	91 1d       	adc	r25, r1
    44b8:	21 91       	ld	r18, Z+
    44ba:	20 53       	subi	r18, 0x30	; 48
    44bc:	2a 30       	cpi	r18, 0x0A	; 10
    44be:	c0 f3       	brcs	.-16     	; 0x44b0 <atoi+0x22>
    44c0:	1e f4       	brtc	.+6      	; 0x44c8 <atoi+0x3a>
    44c2:	90 95       	com	r25
    44c4:	81 95       	neg	r24
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	08 95       	ret

000044ca <strcmp_P>:
    44ca:	fb 01       	movw	r30, r22
    44cc:	dc 01       	movw	r26, r24
    44ce:	8d 91       	ld	r24, X+
    44d0:	05 90       	lpm	r0, Z+
    44d2:	80 19       	sub	r24, r0
    44d4:	01 10       	cpse	r0, r1
    44d6:	d9 f3       	breq	.-10     	; 0x44ce <strcmp_P+0x4>
    44d8:	99 0b       	sbc	r25, r25
    44da:	08 95       	ret

000044dc <__strlen_P>:
    44dc:	fc 01       	movw	r30, r24
    44de:	05 90       	lpm	r0, Z+
    44e0:	00 20       	and	r0, r0
    44e2:	e9 f7       	brne	.-6      	; 0x44de <__strlen_P+0x2>
    44e4:	80 95       	com	r24
    44e6:	90 95       	com	r25
    44e8:	8e 0f       	add	r24, r30
    44ea:	9f 1f       	adc	r25, r31
    44ec:	08 95       	ret

000044ee <strstr_P>:
    44ee:	fb 01       	movw	r30, r22
    44f0:	55 91       	lpm	r21, Z+
    44f2:	55 23       	and	r21, r21
    44f4:	a9 f0       	breq	.+42     	; 0x4520 <strstr_P+0x32>
    44f6:	bf 01       	movw	r22, r30
    44f8:	dc 01       	movw	r26, r24
    44fa:	4d 91       	ld	r20, X+
    44fc:	45 17       	cp	r20, r21
    44fe:	41 11       	cpse	r20, r1
    4500:	e1 f7       	brne	.-8      	; 0x44fa <strstr_P+0xc>
    4502:	59 f4       	brne	.+22     	; 0x451a <strstr_P+0x2c>
    4504:	cd 01       	movw	r24, r26
    4506:	05 90       	lpm	r0, Z+
    4508:	00 20       	and	r0, r0
    450a:	49 f0       	breq	.+18     	; 0x451e <strstr_P+0x30>
    450c:	4d 91       	ld	r20, X+
    450e:	40 15       	cp	r20, r0
    4510:	41 11       	cpse	r20, r1
    4512:	c9 f3       	breq	.-14     	; 0x4506 <strstr_P+0x18>
    4514:	fb 01       	movw	r30, r22
    4516:	41 11       	cpse	r20, r1
    4518:	ef cf       	rjmp	.-34     	; 0x44f8 <strstr_P+0xa>
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	01 97       	sbiw	r24, 0x01	; 1
    4520:	08 95       	ret

00004522 <memcpy>:
    4522:	fb 01       	movw	r30, r22
    4524:	dc 01       	movw	r26, r24
    4526:	02 c0       	rjmp	.+4      	; 0x452c <memcpy+0xa>
    4528:	01 90       	ld	r0, Z+
    452a:	0d 92       	st	X+, r0
    452c:	41 50       	subi	r20, 0x01	; 1
    452e:	50 40       	sbci	r21, 0x00	; 0
    4530:	d8 f7       	brcc	.-10     	; 0x4528 <memcpy+0x6>
    4532:	08 95       	ret

00004534 <strchr>:
    4534:	fc 01       	movw	r30, r24
    4536:	81 91       	ld	r24, Z+
    4538:	86 17       	cp	r24, r22
    453a:	21 f0       	breq	.+8      	; 0x4544 <strchr+0x10>
    453c:	88 23       	and	r24, r24
    453e:	d9 f7       	brne	.-10     	; 0x4536 <strchr+0x2>
    4540:	99 27       	eor	r25, r25
    4542:	08 95       	ret
    4544:	31 97       	sbiw	r30, 0x01	; 1
    4546:	cf 01       	movw	r24, r30
    4548:	08 95       	ret

0000454a <strcpy>:
    454a:	fb 01       	movw	r30, r22
    454c:	dc 01       	movw	r26, r24
    454e:	01 90       	ld	r0, Z+
    4550:	0d 92       	st	X+, r0
    4552:	00 20       	and	r0, r0
    4554:	e1 f7       	brne	.-8      	; 0x454e <strcpy+0x4>
    4556:	08 95       	ret

00004558 <__itoa_ncheck>:
    4558:	bb 27       	eor	r27, r27
    455a:	4a 30       	cpi	r20, 0x0A	; 10
    455c:	31 f4       	brne	.+12     	; 0x456a <__itoa_ncheck+0x12>
    455e:	99 23       	and	r25, r25
    4560:	22 f4       	brpl	.+8      	; 0x456a <__itoa_ncheck+0x12>
    4562:	bd e2       	ldi	r27, 0x2D	; 45
    4564:	90 95       	com	r25
    4566:	81 95       	neg	r24
    4568:	9f 4f       	sbci	r25, 0xFF	; 255
    456a:	0c 94 c0 22 	jmp	0x4580	; 0x4580 <__utoa_common>

0000456e <__mulhi_const_10>:
    456e:	7a e0       	ldi	r23, 0x0A	; 10
    4570:	97 9f       	mul	r25, r23
    4572:	90 2d       	mov	r25, r0
    4574:	87 9f       	mul	r24, r23
    4576:	80 2d       	mov	r24, r0
    4578:	91 0d       	add	r25, r1
    457a:	11 24       	eor	r1, r1
    457c:	08 95       	ret

0000457e <__utoa_ncheck>:
    457e:	bb 27       	eor	r27, r27

00004580 <__utoa_common>:
    4580:	fb 01       	movw	r30, r22
    4582:	55 27       	eor	r21, r21
    4584:	aa 27       	eor	r26, r26
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	aa 1f       	adc	r26, r26
    458c:	a4 17       	cp	r26, r20
    458e:	10 f0       	brcs	.+4      	; 0x4594 <__utoa_common+0x14>
    4590:	a4 1b       	sub	r26, r20
    4592:	83 95       	inc	r24
    4594:	50 51       	subi	r21, 0x10	; 16
    4596:	b9 f7       	brne	.-18     	; 0x4586 <__utoa_common+0x6>
    4598:	a0 5d       	subi	r26, 0xD0	; 208
    459a:	aa 33       	cpi	r26, 0x3A	; 58
    459c:	08 f0       	brcs	.+2      	; 0x45a0 <__utoa_common+0x20>
    459e:	a9 5d       	subi	r26, 0xD9	; 217
    45a0:	a1 93       	st	Z+, r26
    45a2:	00 97       	sbiw	r24, 0x00	; 0
    45a4:	79 f7       	brne	.-34     	; 0x4584 <__utoa_common+0x4>
    45a6:	b1 11       	cpse	r27, r1
    45a8:	b1 93       	st	Z+, r27
    45aa:	11 92       	st	Z+, r1
    45ac:	cb 01       	movw	r24, r22
    45ae:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <strrev>

000045b2 <strrev>:
    45b2:	dc 01       	movw	r26, r24
    45b4:	fc 01       	movw	r30, r24
    45b6:	67 2f       	mov	r22, r23
    45b8:	71 91       	ld	r23, Z+
    45ba:	77 23       	and	r23, r23
    45bc:	e1 f7       	brne	.-8      	; 0x45b6 <strrev+0x4>
    45be:	32 97       	sbiw	r30, 0x02	; 2
    45c0:	04 c0       	rjmp	.+8      	; 0x45ca <strrev+0x18>
    45c2:	7c 91       	ld	r23, X
    45c4:	6d 93       	st	X+, r22
    45c6:	70 83       	st	Z, r23
    45c8:	62 91       	ld	r22, -Z
    45ca:	ae 17       	cp	r26, r30
    45cc:	bf 07       	cpc	r27, r31
    45ce:	c8 f3       	brcs	.-14     	; 0x45c2 <strrev+0x10>
    45d0:	08 95       	ret

000045d2 <__prologue_saves__>:
    45d2:	2f 92       	push	r2
    45d4:	3f 92       	push	r3
    45d6:	4f 92       	push	r4
    45d8:	5f 92       	push	r5
    45da:	6f 92       	push	r6
    45dc:	7f 92       	push	r7
    45de:	8f 92       	push	r8
    45e0:	9f 92       	push	r9
    45e2:	af 92       	push	r10
    45e4:	bf 92       	push	r11
    45e6:	cf 92       	push	r12
    45e8:	df 92       	push	r13
    45ea:	ef 92       	push	r14
    45ec:	ff 92       	push	r15
    45ee:	0f 93       	push	r16
    45f0:	1f 93       	push	r17
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	ca 1b       	sub	r28, r26
    45fc:	db 0b       	sbc	r29, r27
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	f8 94       	cli
    4602:	de bf       	out	0x3e, r29	; 62
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	cd bf       	out	0x3d, r28	; 61
    4608:	09 94       	ijmp

0000460a <__epilogue_restores__>:
    460a:	2a 88       	ldd	r2, Y+18	; 0x12
    460c:	39 88       	ldd	r3, Y+17	; 0x11
    460e:	48 88       	ldd	r4, Y+16	; 0x10
    4610:	5f 84       	ldd	r5, Y+15	; 0x0f
    4612:	6e 84       	ldd	r6, Y+14	; 0x0e
    4614:	7d 84       	ldd	r7, Y+13	; 0x0d
    4616:	8c 84       	ldd	r8, Y+12	; 0x0c
    4618:	9b 84       	ldd	r9, Y+11	; 0x0b
    461a:	aa 84       	ldd	r10, Y+10	; 0x0a
    461c:	b9 84       	ldd	r11, Y+9	; 0x09
    461e:	c8 84       	ldd	r12, Y+8	; 0x08
    4620:	df 80       	ldd	r13, Y+7	; 0x07
    4622:	ee 80       	ldd	r14, Y+6	; 0x06
    4624:	fd 80       	ldd	r15, Y+5	; 0x05
    4626:	0c 81       	ldd	r16, Y+4	; 0x04
    4628:	1b 81       	ldd	r17, Y+3	; 0x03
    462a:	aa 81       	ldd	r26, Y+2	; 0x02
    462c:	b9 81       	ldd	r27, Y+1	; 0x01
    462e:	ce 0f       	add	r28, r30
    4630:	d1 1d       	adc	r29, r1
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	ed 01       	movw	r28, r26
    463e:	08 95       	ret

00004640 <__do_global_dtors>:
    4640:	13 e0       	ldi	r17, 0x03	; 3
    4642:	cf e6       	ldi	r28, 0x6F	; 111
    4644:	d3 e0       	ldi	r29, 0x03	; 3
    4646:	04 c0       	rjmp	.+8      	; 0x4650 <__do_global_dtors+0x10>
    4648:	fe 01       	movw	r30, r28
    464a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <__tablejump2__>
    464e:	21 96       	adiw	r28, 0x01	; 1
    4650:	c0 37       	cpi	r28, 0x70	; 112
    4652:	d1 07       	cpc	r29, r17
    4654:	c9 f7       	brne	.-14     	; 0x4648 <__do_global_dtors+0x8>
    4656:	f8 94       	cli

00004658 <__stop_program>:
    4658:	ff cf       	rjmp	.-2      	; 0x4658 <__stop_program>
