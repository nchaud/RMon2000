
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00002a92  00002b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d5  008001a2  008001a2  00002bc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000918  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00019da4  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e31  00000000  00000000  0001d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005456  00000000  00000000  00021125  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002138  00000000  00000000  0002657c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f76  00000000  00000000  000286b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b9df  00000000  00000000  0002d62a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b8  00000000  00000000  00039009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
       8:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
       c:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__vector_3>
      10:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__vector_3>
      14:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__vector_3>
      18:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      1c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      20:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      24:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      28:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      2c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      30:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      34:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      38:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      3c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      40:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_16>
      44:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      48:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_18>
      4c:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_19>
      50:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      54:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      58:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      5c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      60:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_24>
      64:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      84:	53 50 41 43 45 00                                   SPACE.

0000008a <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      8a:	09 3c 2d 2d 2d 20 00                                .<--- .

00000091 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
      91:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

0000009c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
      9c:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000000a9 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
      a9:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000000b4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
      b4:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000000bc <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
      bc:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000000c5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
      c5:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000000d2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
      d2:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
      e2:	44 22 2c 00                                         D",.

000000e6 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
      e6:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
      f6:	45 52 22 2c 00                                      ER",.

000000fb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
      fb:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000105 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     105:	09 2d 2d 2d 3e 20 00                                .---> .

0000010c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     10c:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

00000116 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     116:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     126:	4e 22 2c 00                                         N",.

0000012a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     12a:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     13a:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000148 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     148:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

00000153 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     153:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

0000015e <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     15e:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000166 <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     166:	41 54 2b 43 53 51 00                                AT+CSQ.

0000016d <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     16d:	2b 43 53 51 3a 20 00                                +CSQ: .

00000174 <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     174:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

0000017f <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     17f:	09 3c 2d 2d 2d 20 00                                .<--- .

00000186 <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     186:	09 2d 2d 2d 3e 20 00                                .---> .

0000018d <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     18d:	41 54 45 30 00                                      ATE0.

00000192 <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     192:	41 54 45 30 00                                      ATE0.

00000197 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     197:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     1a7:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000001b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     1b6:	41 54 00                                            AT.

000001b9 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     1b9:	41 54 00                                            AT.

000001bc <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     1bc:	41 54 00                                            AT.

000001bf <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     1bf:	41 54 00                                            AT.

000001c2 <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     1c2:	41 54 00                                            AT.

000001c5 <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     1c5:	41 54 00                                            AT.

000001c8 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     1c8:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     1d8:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

000001e9 <_ZZN13Adafruit_FONAC4EabE3__c_1>:
     1e9:	4f 4b 00                                            OK.

000001ec <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     1ec:	46 4f 4e 41 00                                      FONA.

000001f1 <_ZZN13Adafruit_FONAC4EabE3__c>:
     1f1:	46 4f 4e 41 6e 65 74 00                             FONAnet.

000001f9 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     1f9:	54 65 6d 70 3d 00                                   Temp=.

000001ff <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     1ff:	20 7c 20 00                                          | .

00000203 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     203:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000020c <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     20c:	20 7c 20 00                                          | .

00000210 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     210:	50 56 2d 56 3d 00                                   PV-V=.

00000216 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     216:	20 7c 20 00                                          | .

0000021a <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     21a:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000222 <_ZZ4loopE3__c>:
     222:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

0000022c <_ZZ8sendDatavE3__c_1>:
     22c:	53 69 67 6e 61 6c 20 69 73 20 00                    Signal is .

00000237 <_ZZ8sendDatavE3__c_0>:
     237:	4e 6f 77 20 77 61 69 74 69 6e 67 20 66 6f 72 20     Now waiting for 
     247:	61 20 77 68 69 6c 65 20 62 65 66 6f 72 65 20 63     a while before c
     257:	68 65 63 6b 69 6e 67 20 73 69 67 6e 61 6c 00        hecking signal.

00000266 <_ZZ8sendDatavE3__c>:
     266:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 6d 6f 64     Initialising mod
     276:	75 6c 65 20 74 6f 20 73 65 6e 64 20 64 61 74 61     ule to send data
	...

00000287 <_ZZ12takeReadingsvE3__c>:
     287:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     297:	2e 2e 00                                            ...

0000029a <_ZZ21ensureFonaInitialisedbE3__c_2>:
     29a:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     2aa:	6e 67 20 67 70 72 73 2e 2e 2e 00                    ng gprs....

000002b5 <_ZZ21ensureFonaInitialisedbE3__c_1>:
     2b5:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 67 70 72     Initialising gpr
     2c5:	73 2e 2e 2e 00                                      s....

000002ca <_ZZ21ensureFonaInitialisedbE3__c_0>:
     2ca:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     2da:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000002e5 <_ZZ21ensureFonaInitialisedbE3__c>:
     2e5:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     2f5:	61 2e 2e 2e 00                                      a....

000002fa <_ZZ5setupE3__c>:
     2fa:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

00000306 <_ZZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONAE3__c>:
     306:	54 45 53 54 3a 20 43 68 65 63 6b 69 6e 67 20 72     TEST: Checking r
     316:	73 73 69 2e 2e 2e 00                                ssi....

0000031d <digital_pin_to_timer_PGM>:
     31d:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     32d:	00 00 00 00                                         ....

00000331 <digital_pin_to_bit_mask_PGM>:
     331:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     341:	04 08 10 20                                         ... 

00000345 <digital_pin_to_port_PGM>:
     345:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     355:	03 03 03 03                                         ....

00000359 <port_to_input_PGM>:
     359:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000363 <port_to_output_PGM>:
     363:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000036d <port_to_mode_PGM>:
     36d:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000378 <__ctors_start>:
     378:	ee 08       	sbc	r14, r14
     37a:	dd 0b       	sbc	r29, r29
     37c:	83 0d       	add	r24, r3

0000037e <__ctors_end>:
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d8 e0       	ldi	r29, 0x08	; 8
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61

0000038a <__do_copy_data>:
     38a:	11 e0       	ldi	r17, 0x01	; 1
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	e2 e9       	ldi	r30, 0x92	; 146
     392:	fa e2       	ldi	r31, 0x2A	; 42
     394:	02 c0       	rjmp	.+4      	; 0x39a <__do_copy_data+0x10>
     396:	05 90       	lpm	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	a2 3a       	cpi	r26, 0xA2	; 162
     39c:	b1 07       	cpc	r27, r17
     39e:	d9 f7       	brne	.-10     	; 0x396 <__do_copy_data+0xc>

000003a0 <__do_clear_bss>:
     3a0:	24 e0       	ldi	r18, 0x04	; 4
     3a2:	a2 ea       	ldi	r26, 0xA2	; 162
     3a4:	b1 e0       	ldi	r27, 0x01	; 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <.do_clear_bss_start>

000003a8 <.do_clear_bss_loop>:
     3a8:	1d 92       	st	X+, r1

000003aa <.do_clear_bss_start>:
     3aa:	a7 37       	cpi	r26, 0x77	; 119
     3ac:	b2 07       	cpc	r27, r18
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <.do_clear_bss_loop>

000003b0 <__do_global_ctors>:
     3b0:	11 e0       	ldi	r17, 0x01	; 1
     3b2:	cf eb       	ldi	r28, 0xBF	; 191
     3b4:	d1 e0       	ldi	r29, 0x01	; 1
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__do_global_ctors+0x10>
     3b8:	21 97       	sbiw	r28, 0x01	; 1
     3ba:	fe 01       	movw	r30, r28
     3bc:	0e 94 c3 13 	call	0x2786	; 0x2786 <__tablejump2__>
     3c0:	cc 3b       	cpi	r28, 0xBC	; 188
     3c2:	d1 07       	cpc	r29, r17
     3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__do_global_ctors+0x8>
     3c6:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <main>
     3ca:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <_exit>

000003ce <__bad_interrupt>:
     3ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d2 <_ZN13Adafruit_FONA9availableEv>:

  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &status, ',', 1))
	return 0;

  return status;
}
     3d2:	87 5e       	subi	r24, 0xE7	; 231
     3d4:	9e 4f       	sbci	r25, 0xFE	; 254
     3d6:	dc 01       	movw	r26, r24
     3d8:	8d 91       	ld	r24, X+
     3da:	9c 91       	ld	r25, X
     3dc:	dc 01       	movw	r26, r24
     3de:	ed 91       	ld	r30, X+
     3e0:	fc 91       	ld	r31, X
     3e2:	04 80       	ldd	r0, Z+4	; 0x04
     3e4:	f5 81       	ldd	r31, Z+5	; 0x05
     3e6:	e0 2d       	mov	r30, r0
     3e8:	09 94       	ijmp

000003ea <_ZN13Adafruit_FONA5writeEh>:
     3ea:	87 5e       	subi	r24, 0xE7	; 231
     3ec:	9e 4f       	sbci	r25, 0xFE	; 254
     3ee:	dc 01       	movw	r26, r24
     3f0:	8d 91       	ld	r24, X+
     3f2:	9c 91       	ld	r25, X
     3f4:	dc 01       	movw	r26, r24
     3f6:	ed 91       	ld	r30, X+
     3f8:	fc 91       	ld	r31, X
     3fa:	01 90       	ld	r0, Z+
     3fc:	f0 81       	ld	r31, Z
     3fe:	e0 2d       	mov	r30, r0
     400:	09 94       	ijmp

00000402 <_ZN13Adafruit_FONA4readEv>:
     402:	87 5e       	subi	r24, 0xE7	; 231
     404:	9e 4f       	sbci	r25, 0xFE	; 254
     406:	dc 01       	movw	r26, r24
     408:	8d 91       	ld	r24, X+
     40a:	9c 91       	ld	r25, X
     40c:	dc 01       	movw	r26, r24
     40e:	ed 91       	ld	r30, X+
     410:	fc 91       	ld	r31, X
     412:	06 80       	ldd	r0, Z+6	; 0x06
     414:	f7 81       	ldd	r31, Z+7	; 0x07
     416:	e0 2d       	mov	r30, r0
     418:	09 94       	ijmp

0000041a <_ZN13Adafruit_FONA4peekEv>:
     41a:	87 5e       	subi	r24, 0xE7	; 231
     41c:	9e 4f       	sbci	r25, 0xFE	; 254
     41e:	dc 01       	movw	r26, r24
     420:	8d 91       	ld	r24, X+
     422:	9c 91       	ld	r25, X
     424:	dc 01       	movw	r26, r24
     426:	ed 91       	ld	r30, X+
     428:	fc 91       	ld	r31, X
     42a:	00 84       	ldd	r0, Z+8	; 0x08
     42c:	f1 85       	ldd	r31, Z+9	; 0x09
     42e:	e0 2d       	mov	r30, r0
     430:	09 94       	ijmp

00000432 <_ZN13Adafruit_FONA5flushEv>:
     432:	87 5e       	subi	r24, 0xE7	; 231
     434:	9e 4f       	sbci	r25, 0xFE	; 254
     436:	dc 01       	movw	r26, r24
     438:	8d 91       	ld	r24, X+
     43a:	9c 91       	ld	r25, X
     43c:	dc 01       	movw	r26, r24
     43e:	ed 91       	ld	r30, X+
     440:	fc 91       	ld	r31, X
     442:	02 84       	ldd	r0, Z+10	; 0x0a
     444:	f3 85       	ldd	r31, Z+11	; 0x0b
     446:	e0 2d       	mov	r30, r0
     448:	09 94       	ijmp

0000044a <_ZN13Adafruit_FONAC1Eab>:
     44a:	fc 01       	movw	r30, r24
     44c:	13 82       	std	Z+3, r1	; 0x03
     44e:	12 82       	std	Z+2, r1	; 0x02
     450:	88 ee       	ldi	r24, 0xE8	; 232
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	a0 e0       	ldi	r26, 0x00	; 0
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	84 e4       	ldi	r24, 0x44	; 68
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	91 83       	std	Z+1, r25	; 0x01
     466:	80 83       	st	Z, r24
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	86 87       	std	Z+14, r24	; 0x0e
     46c:	64 87       	std	Z+12, r22	; 0x0c
     46e:	45 87       	std	Z+13, r20	; 0x0d
     470:	df 01       	movw	r26, r30
     472:	a2 5f       	subi	r26, 0xF2	; 242
     474:	be 4f       	sbci	r27, 0xFE	; 254
     476:	81 ef       	ldi	r24, 0xF1	; 241
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	11 96       	adiw	r26, 0x01	; 1
     47c:	9c 93       	st	X, r25
     47e:	8e 93       	st	-X, r24
     480:	12 96       	adiw	r26, 0x02	; 2
     482:	11 96       	adiw	r26, 0x01	; 1
     484:	1c 92       	st	X, r1
     486:	1e 92       	st	-X, r1
     488:	12 96       	adiw	r26, 0x02	; 2
     48a:	11 96       	adiw	r26, 0x01	; 1
     48c:	1c 92       	st	X, r1
     48e:	1e 92       	st	-X, r1
     490:	17 96       	adiw	r26, 0x07	; 7
     492:	11 96       	adiw	r26, 0x01	; 1
     494:	1c 92       	st	X, r1
     496:	1e 92       	st	-X, r1
     498:	15 97       	sbiw	r26, 0x05	; 5
     49a:	1c 92       	st	X, r1
     49c:	11 96       	adiw	r26, 0x01	; 1
     49e:	8c ee       	ldi	r24, 0xEC	; 236
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	8d 93       	st	X+, r24
     4a4:	9c 93       	st	X, r25
     4a6:	e9 5e       	subi	r30, 0xE9	; 233
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	89 ee       	ldi	r24, 0xE9	; 233
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	91 83       	std	Z+1, r25	; 0x01
     4b0:	80 83       	st	Z, r24
     4b2:	08 95       	ret

000004b4 <_ZN13Adafruit_FONA10flushInputEv>:
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	8c 01       	movw	r16, r24
     4c4:	0f 5f       	subi	r16, 0xFF	; 255
     4c6:	1f 4f       	sbci	r17, 0xFF	; 255
     4c8:	88 97       	sbiw	r24, 0x28	; 40
     4ca:	d8 f4       	brcc	.+54     	; 0x502 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     4cc:	e8 81       	ld	r30, Y
     4ce:	f9 81       	ldd	r31, Y+1	; 0x01
     4d0:	04 80       	ldd	r0, Z+4	; 0x04
     4d2:	f5 81       	ldd	r31, Z+5	; 0x05
     4d4:	e0 2d       	mov	r30, r0
     4d6:	ce 01       	movw	r24, r28
     4d8:	09 95       	icall
     4da:	89 2b       	or	r24, r25
     4dc:	51 f0       	breq	.+20     	; 0x4f2 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     4de:	e8 81       	ld	r30, Y
     4e0:	f9 81       	ldd	r31, Y+1	; 0x01
     4e2:	06 80       	ldd	r0, Z+6	; 0x06
     4e4:	f7 81       	ldd	r31, Z+7	; 0x07
     4e6:	e0 2d       	mov	r30, r0
     4e8:	ce 01       	movw	r24, r28
     4ea:	09 95       	icall
     4ec:	00 e0       	ldi	r16, 0x00	; 0
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	ed cf       	rjmp	.-38     	; 0x4cc <_ZN13Adafruit_FONA10flushInputEv+0x18>
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     4fe:	c8 01       	movw	r24, r16
     500:	e0 cf       	rjmp	.-64     	; 0x4c2 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	08 95       	ret

0000050c <_ZN13Adafruit_FONA8readlineEjb>:
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	7c 01       	movw	r14, r24
     520:	b4 2e       	mov	r11, r20
     522:	8b 01       	movw	r16, r22
     524:	00 0f       	add	r16, r16
     526:	11 1f       	adc	r17, r17
     528:	00 0f       	add	r16, r16
     52a:	11 1f       	adc	r17, r17
     52c:	c0 e0       	ldi	r28, 0x00	; 0
     52e:	d0 e0       	ldi	r29, 0x00	; 0
     530:	67 01       	movw	r12, r14
     532:	87 ee       	ldi	r24, 0xE7	; 231
     534:	c8 1a       	sub	r12, r24
     536:	8e ef       	ldi	r24, 0xFE	; 254
     538:	d8 0a       	sbc	r13, r24
     53a:	01 15       	cp	r16, r1
     53c:	11 05       	cpc	r17, r1
     53e:	c9 f1       	breq	.+114    	; 0x5b2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     540:	ce 3f       	cpi	r28, 0xFE	; 254
     542:	d1 05       	cpc	r29, r1
     544:	98 f0       	brcs	.+38     	; 0x56c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     546:	64 e8       	ldi	r22, 0x84	; 132
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	89 e8       	ldi	r24, 0x89	; 137
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     552:	2f c0       	rjmp	.+94     	; 0x5b2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     554:	f6 01       	movw	r30, r12
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	dc 01       	movw	r26, r24
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	06 80       	ldd	r0, Z+6	; 0x06
     562:	f7 81       	ldd	r31, Z+7	; 0x07
     564:	e0 2d       	mov	r30, r0
     566:	09 95       	icall
     568:	8d 30       	cpi	r24, 0x0D	; 13
     56a:	69 f4       	brne	.+26     	; 0x586 <_ZN13Adafruit_FONA8readlineEjb+0x7a>
     56c:	d6 01       	movw	r26, r12
     56e:	8d 91       	ld	r24, X+
     570:	9c 91       	ld	r25, X
     572:	dc 01       	movw	r26, r24
     574:	ed 91       	ld	r30, X+
     576:	fc 91       	ld	r31, X
     578:	04 80       	ldd	r0, Z+4	; 0x04
     57a:	f5 81       	ldd	r31, Z+5	; 0x05
     57c:	e0 2d       	mov	r30, r0
     57e:	09 95       	icall
     580:	89 2b       	or	r24, r25
     582:	41 f7       	brne	.-48     	; 0x554 <_ZN13Adafruit_FONA8readlineEjb+0x48>
     584:	0c c0       	rjmp	.+24     	; 0x59e <_ZN13Adafruit_FONA8readlineEjb+0x92>
     586:	8a 30       	cpi	r24, 0x0A	; 10
     588:	21 f4       	brne	.+8      	; 0x592 <_ZN13Adafruit_FONA8readlineEjb+0x86>
     58a:	20 97       	sbiw	r28, 0x00	; 0
     58c:	79 f3       	breq	.-34     	; 0x56c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     58e:	bb 20       	and	r11, r11
     590:	81 f0       	breq	.+32     	; 0x5b2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     592:	f7 01       	movw	r30, r14
     594:	ec 0f       	add	r30, r28
     596:	fd 1f       	adc	r31, r29
     598:	87 87       	std	Z+15, r24	; 0x0f
     59a:	21 96       	adiw	r28, 0x01	; 1
     59c:	e7 cf       	rjmp	.-50     	; 0x56c <_ZN13Adafruit_FONA8readlineEjb+0x60>
     59e:	01 50       	subi	r16, 0x01	; 1
     5a0:	11 09       	sbc	r17, r1
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <_ZN13Adafruit_FONA8readlineEjb+0xa6>
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     5b0:	c4 cf       	rjmp	.-120    	; 0x53a <_ZN13Adafruit_FONA8readlineEjb+0x2e>
     5b2:	f7 01       	movw	r30, r14
     5b4:	ec 0f       	add	r30, r28
     5b6:	fd 1f       	adc	r31, r29
     5b8:	17 86       	std	Z+15, r1	; 0x0f
     5ba:	8c 2f       	mov	r24, r28
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	08 95       	ret

000005d0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
     5da:	8b 01       	movw	r16, r22
     5dc:	ba 01       	movw	r22, r20
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN13Adafruit_FONA8readlineEjb>
     5e4:	6a e8       	ldi	r22, 0x8A	; 138
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	89 e8       	ldi	r24, 0x89	; 137
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     5f0:	2f 96       	adiw	r28, 0x0f	; 15
     5f2:	be 01       	movw	r22, r28
     5f4:	89 e8       	ldi	r24, 0x89	; 137
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     5fc:	b8 01       	movw	r22, r16
     5fe:	ce 01       	movw	r24, r28
     600:	0e 94 08 15 	call	0x2a10	; 0x2a10 <strcmp_P>
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	89 2b       	or	r24, r25
     608:	09 f0       	breq	.+2      	; 0x60c <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	82 2f       	mov	r24, r18
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	08 95       	ret

00000618 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
     626:	8b 01       	movw	r16, r22
     628:	7a 01       	movw	r14, r20
     62a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN13Adafruit_FONA10flushInputEv>
     62e:	6d e7       	ldi	r22, 0x7D	; 125
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	89 e8       	ldi	r24, 0x89	; 137
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     63a:	b8 01       	movw	r22, r16
     63c:	89 e8       	ldi	r24, 0x89	; 137
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     644:	fe 01       	movw	r30, r28
     646:	e7 5e       	subi	r30, 0xE7	; 231
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	b8 01       	movw	r22, r16
     64c:	80 81       	ld	r24, Z
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	b7 01       	movw	r22, r14
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN13Adafruit_FONA8readlineEjb>
     65e:	18 2f       	mov	r17, r24
     660:	66 e7       	ldi	r22, 0x76	; 118
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	89 e8       	ldi	r24, 0x89	; 137
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     66c:	be 01       	movw	r22, r28
     66e:	61 5f       	subi	r22, 0xF1	; 241
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	89 e8       	ldi	r24, 0x89	; 137
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     67a:	81 2f       	mov	r24, r17
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	ec 01       	movw	r28, r24
     6a0:	6b 01       	movw	r12, r22
     6a2:	7a 01       	movw	r14, r20
     6a4:	59 01       	movw	r10, r18
     6a6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN13Adafruit_FONA10flushInputEv>
     6aa:	6f e6       	ldi	r22, 0x6F	; 111
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	89 e8       	ldi	r24, 0x89	; 137
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     6b6:	b6 01       	movw	r22, r12
     6b8:	89 e8       	ldi	r24, 0x89	; 137
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     6c0:	62 e2       	ldi	r22, 0x22	; 34
     6c2:	89 e8       	ldi	r24, 0x89	; 137
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5Print5printEc>
     6ca:	b7 01       	movw	r22, r14
     6cc:	89 e8       	ldi	r24, 0x89	; 137
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     6d4:	62 e2       	ldi	r22, 0x22	; 34
     6d6:	89 e8       	ldi	r24, 0x89	; 137
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN5Print7printlnEc>
     6de:	8e 01       	movw	r16, r28
     6e0:	07 5e       	subi	r16, 0xE7	; 231
     6e2:	1e 4f       	sbci	r17, 0xFE	; 254
     6e4:	b6 01       	movw	r22, r12
     6e6:	f8 01       	movw	r30, r16
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     6f0:	62 e2       	ldi	r22, 0x22	; 34
     6f2:	f8 01       	movw	r30, r16
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5Print5printEc>
     6fc:	b7 01       	movw	r22, r14
     6fe:	f8 01       	movw	r30, r16
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     708:	62 e2       	ldi	r22, 0x22	; 34
     70a:	f8 01       	movw	r30, r16
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN5Print7printlnEc>
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	b5 01       	movw	r22, r10
     718:	ce 01       	movw	r24, r28
     71a:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN13Adafruit_FONA8readlineEjb>
     71e:	18 2f       	mov	r17, r24
     720:	68 e6       	ldi	r22, 0x68	; 104
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	89 e8       	ldi	r24, 0x89	; 137
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     72c:	be 01       	movw	r22, r28
     72e:	61 5f       	subi	r22, 0xF1	; 241
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	89 e8       	ldi	r24, 0x89	; 137
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     73a:	81 2f       	mov	r24, r17
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	bf 90       	pop	r11
     74e:	af 90       	pop	r10
     750:	08 95       	ret

00000752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
     75c:	8a 01       	movw	r16, r20
     75e:	a9 01       	movw	r20, r18
     760:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     764:	88 23       	and	r24, r24
     766:	41 f0       	breq	.+16     	; 0x778 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     768:	b8 01       	movw	r22, r16
     76a:	ce 01       	movw	r24, r28
     76c:	0f 96       	adiw	r24, 0x0f	; 15
     76e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <strcmp_P>
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	89 2b       	or	r24, r25
     776:	09 f0       	breq	.+2      	; 0x77a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	82 2f       	mov	r24, r18
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <_ZN13Adafruit_FONA5beginEhh>:
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	f6 2e       	mov	r15, r22
     79a:	e4 2e       	mov	r14, r20
     79c:	8f e1       	ldi	r24, 0x1F	; 31
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_Znwj>
     7a4:	8c 01       	movw	r16, r24
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	4e 2d       	mov	r20, r14
     7aa:	6f 2d       	mov	r22, r15
     7ac:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN14SoftwareSerialC1Ehhb>
     7b0:	40 ec       	ldi	r20, 0xC0	; 192
     7b2:	52 e1       	ldi	r21, 0x12	; 18
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	c8 01       	movw	r24, r16
     7ba:	0e 94 bf 12 	call	0x257e	; 0x257e <_ZN14SoftwareSerial5beginEl>
     7be:	7e 01       	movw	r14, r28
     7c0:	87 ee       	ldi	r24, 0xE7	; 231
     7c2:	e8 1a       	sub	r14, r24
     7c4:	8e ef       	ldi	r24, 0xFE	; 254
     7c6:	f8 0a       	sbc	r15, r24
     7c8:	d7 01       	movw	r26, r14
     7ca:	0d 93       	st	X+, r16
     7cc:	1c 93       	st	X, r17
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <pinMode>
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7da:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
     7de:	6a e0       	ldi	r22, 0x0A	; 10
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     7ee:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
     7f2:	64 e6       	ldi	r22, 0x64	; 100
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	8c 85       	ldd	r24, Y+12	; 0x0c
     802:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
     806:	68 ec       	ldi	r22, 0xC8	; 200
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	89 e8       	ldi	r24, 0x89	; 137
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     812:	8e e0       	ldi	r24, 0x0E	; 14
     814:	c8 2e       	mov	r12, r24
     816:	d1 2c       	mov	r13, r1
     818:	8e 01       	movw	r16, r28
     81a:	09 5e       	subi	r16, 0xE9	; 233
     81c:	1e 4f       	sbci	r17, 0xFE	; 254
     81e:	f7 01       	movw	r30, r14
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	dc 01       	movw	r26, r24
     826:	ed 91       	ld	r30, X+
     828:	fc 91       	ld	r31, X
     82a:	04 80       	ldd	r0, Z+4	; 0x04
     82c:	f5 81       	ldd	r31, Z+5	; 0x05
     82e:	e0 2d       	mov	r30, r0
     830:	09 95       	icall
     832:	89 2b       	or	r24, r25
     834:	59 f0       	breq	.+22     	; 0x84c <_ZN13Adafruit_FONA5beginEhh+0xc6>
     836:	f7 01       	movw	r30, r14
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	dc 01       	movw	r26, r24
     83e:	ed 91       	ld	r30, X+
     840:	fc 91       	ld	r31, X
     842:	06 80       	ldd	r0, Z+6	; 0x06
     844:	f7 81       	ldd	r31, Z+7	; 0x07
     846:	e0 2d       	mov	r30, r0
     848:	09 95       	icall
     84a:	e9 cf       	rjmp	.-46     	; 0x81e <_ZN13Adafruit_FONA5beginEhh+0x98>
     84c:	f8 01       	movw	r30, r16
     84e:	40 81       	ld	r20, Z
     850:	51 81       	ldd	r21, Z+1	; 0x01
     852:	24 ef       	ldi	r18, 0xF4	; 244
     854:	31 e0       	ldi	r19, 0x01	; 1
     856:	65 ec       	ldi	r22, 0xC5	; 197
     858:	71 e0       	ldi	r23, 0x01	; 1
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     860:	81 11       	cpse	r24, r1
     862:	34 c0       	rjmp	.+104    	; 0x8cc <_ZN13Adafruit_FONA5beginEhh+0x146>
     864:	d7 01       	movw	r26, r14
     866:	8d 91       	ld	r24, X+
     868:	9c 91       	ld	r25, X
     86a:	dc 01       	movw	r26, r24
     86c:	ed 91       	ld	r30, X+
     86e:	fc 91       	ld	r31, X
     870:	04 80       	ldd	r0, Z+4	; 0x04
     872:	f5 81       	ldd	r31, Z+5	; 0x05
     874:	e0 2d       	mov	r30, r0
     876:	09 95       	icall
     878:	89 2b       	or	r24, r25
     87a:	59 f0       	breq	.+22     	; 0x892 <_ZN13Adafruit_FONA5beginEhh+0x10c>
     87c:	f7 01       	movw	r30, r14
     87e:	80 81       	ld	r24, Z
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	dc 01       	movw	r26, r24
     884:	ed 91       	ld	r30, X+
     886:	fc 91       	ld	r31, X
     888:	06 80       	ldd	r0, Z+6	; 0x06
     88a:	f7 81       	ldd	r31, Z+7	; 0x07
     88c:	e0 2d       	mov	r30, r0
     88e:	09 95       	icall
     890:	e9 cf       	rjmp	.-46     	; 0x864 <_ZN13Adafruit_FONA5beginEhh+0xde>
     892:	24 ef       	ldi	r18, 0xF4	; 244
     894:	31 e0       	ldi	r19, 0x01	; 1
     896:	42 ec       	ldi	r20, 0xC2	; 194
     898:	51 e0       	ldi	r21, 0x01	; 1
     89a:	6f eb       	ldi	r22, 0xBF	; 191
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     8a4:	81 11       	cpse	r24, r1
     8a6:	12 c0       	rjmp	.+36     	; 0x8cc <_ZN13Adafruit_FONA5beginEhh+0x146>
     8a8:	64 ef       	ldi	r22, 0xF4	; 244
     8aa:	71 e0       	ldi	r23, 0x01	; 1
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     8b4:	b1 e0       	ldi	r27, 0x01	; 1
     8b6:	cb 1a       	sub	r12, r27
     8b8:	d1 08       	sbc	r13, r1
     8ba:	09 f0       	breq	.+2      	; 0x8be <_ZN13Adafruit_FONA5beginEhh+0x138>
     8bc:	b0 cf       	rjmp	.-160    	; 0x81e <_ZN13Adafruit_FONA5beginEhh+0x98>
     8be:	5e c0       	rjmp	.+188    	; 0x97c <__stack+0x7d>
     8c0:	64 e6       	ldi	r22, 0x64	; 100
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     8cc:	f8 01       	movw	r30, r16
     8ce:	40 81       	ld	r20, Z
     8d0:	51 81       	ldd	r21, Z+1	; 0x01
     8d2:	24 ef       	ldi	r18, 0xF4	; 244
     8d4:	31 e0       	ldi	r19, 0x01	; 1
     8d6:	62 e9       	ldi	r22, 0x92	; 146
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	ce 01       	movw	r24, r28
     8dc:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     8e0:	64 e6       	ldi	r22, 0x64	; 100
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     8ec:	d8 01       	movw	r26, r16
     8ee:	4d 91       	ld	r20, X+
     8f0:	5c 91       	ld	r21, X
     8f2:	24 ef       	ldi	r18, 0xF4	; 244
     8f4:	31 e0       	ldi	r19, 0x01	; 1
     8f6:	6d e8       	ldi	r22, 0x8D	; 141
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	ce 01       	movw	r24, r28
     8fc:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     900:	81 11       	cpse	r24, r1
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
     904:	12 e0       	ldi	r17, 0x02	; 2
     906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xb>
     908:	11 e0       	ldi	r17, 0x01	; 1
     90a:	64 e6       	ldi	r22, 0x64	; 100
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     916:	ce 01       	movw	r24, r28
     918:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN13Adafruit_FONA10flushInputEv>
     91c:	66 e8       	ldi	r22, 0x86	; 134
     91e:	71 e0       	ldi	r23, 0x01	; 1
     920:	89 e8       	ldi	r24, 0x89	; 137
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     928:	61 e1       	ldi	r22, 0x11	; 17
     92a:	71 e0       	ldi	r23, 0x01	; 1
     92c:	89 e8       	ldi	r24, 0x89	; 137
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     934:	61 e1       	ldi	r22, 0x11	; 17
     936:	71 e0       	ldi	r23, 0x01	; 1
     938:	f7 01       	movw	r30, r14
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     942:	41 e0       	ldi	r20, 0x01	; 1
     944:	64 ef       	ldi	r22, 0xF4	; 244
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN13Adafruit_FONA8readlineEjb>
     94e:	6f e7       	ldi	r22, 0x7F	; 127
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	89 e8       	ldi	r24, 0x89	; 137
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     95a:	2f 96       	adiw	r28, 0x0f	; 15
     95c:	be 01       	movw	r22, r28
     95e:	89 e8       	ldi	r24, 0x89	; 137
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     966:	64 e7       	ldi	r22, 0x74	; 116
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	ce 01       	movw	r24, r28
     96c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <strstr_P>
     970:	89 2b       	or	r24, r25
     972:	11 f0       	breq	.+4      	; 0x978 <__stack+0x79>
     974:	81 2f       	mov	r24, r17
     976:	35 c0       	rjmp	.+106    	; 0x9e2 <__stack+0xe3>
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	33 c0       	rjmp	.+102    	; 0x9e2 <__stack+0xe3>
     97c:	d8 01       	movw	r26, r16
     97e:	4d 91       	ld	r20, X+
     980:	5c 91       	ld	r21, X
     982:	24 ef       	ldi	r18, 0xF4	; 244
     984:	31 e0       	ldi	r19, 0x01	; 1
     986:	6c eb       	ldi	r22, 0xBC	; 188
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	ce 01       	movw	r24, r28
     98c:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     990:	64 e6       	ldi	r22, 0x64	; 100
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     99c:	f8 01       	movw	r30, r16
     99e:	40 81       	ld	r20, Z
     9a0:	51 81       	ldd	r21, Z+1	; 0x01
     9a2:	24 ef       	ldi	r18, 0xF4	; 244
     9a4:	31 e0       	ldi	r19, 0x01	; 1
     9a6:	69 eb       	ldi	r22, 0xB9	; 185
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	ce 01       	movw	r24, r28
     9ac:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     9b0:	64 e6       	ldi	r22, 0x64	; 100
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     9bc:	d8 01       	movw	r26, r16
     9be:	4d 91       	ld	r20, X+
     9c0:	5c 91       	ld	r21, X
     9c2:	24 ef       	ldi	r18, 0xF4	; 244
     9c4:	31 e0       	ldi	r19, 0x01	; 1
     9c6:	66 eb       	ldi	r22, 0xB6	; 182
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	ce 01       	movw	r24, r28
     9cc:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     9d0:	81 11       	cpse	r24, r1
     9d2:	76 cf       	rjmp	.-276    	; 0x8c0 <_ZN13Adafruit_FONA5beginEhh+0x13a>
     9d4:	67 e9       	ldi	r22, 0x97	; 151
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	89 e8       	ldi	r24, 0x89	; 137
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	08 95       	ret

000009f4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
     a02:	79 01       	movw	r14, r18
     a04:	98 01       	movw	r18, r16
     a06:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
     a0a:	b7 01       	movw	r22, r14
     a0c:	ce 01       	movw	r24, r28
     a0e:	0f 96       	adiw	r24, 0x0f	; 15
     a10:	0e 94 08 15 	call	0x2a10	; 0x2a10 <strcmp_P>
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	89 2b       	or	r24, r25
     a18:	09 f0       	breq	.+2      	; 0xa1c <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	82 2f       	mov	r24, r18
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	08 95       	ret

00000a2c <_ZN13Adafruit_FONA10enableGPRSEb>:
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
     a48:	28 ee       	ldi	r18, 0xE8	; 232
     a4a:	3d ef       	ldi	r19, 0xFD	; 253
     a4c:	66 23       	and	r22, r22
     a4e:	09 f4       	brne	.+2      	; 0xa52 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
     a50:	1f c1       	rjmp	.+574    	; 0xc90 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
     a52:	4e e5       	ldi	r20, 0x5E	; 94
     a54:	51 e0       	ldi	r21, 0x01	; 1
     a56:	63 e5       	ldi	r22, 0x53	; 83
     a58:	71 e0       	ldi	r23, 0x01	; 1
     a5a:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     a5e:	81 11       	cpse	r24, r1
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	78 2e       	mov	r7, r24
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
     a68:	77 24       	eor	r7, r7
     a6a:	73 94       	inc	r7
     a6c:	7e 01       	movw	r14, r28
     a6e:	89 ee       	ldi	r24, 0xE9	; 233
     a70:	e8 1a       	sub	r14, r24
     a72:	8e ef       	ldi	r24, 0xFE	; 254
     a74:	f8 0a       	sbc	r15, r24
     a76:	f7 01       	movw	r30, r14
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	20 e1       	ldi	r18, 0x10	; 16
     a7e:	37 e2       	ldi	r19, 0x27	; 39
     a80:	68 e4       	ldi	r22, 0x48	; 72
     a82:	71 e0       	ldi	r23, 0x01	; 1
     a84:	ce 01       	movw	r24, r28
     a86:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     a8a:	88 23       	and	r24, r24
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
     a8e:	25 c1       	rjmp	.+586    	; 0xcda <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
     a90:	f7 01       	movw	r30, r14
     a92:	40 81       	ld	r20, Z
     a94:	51 81       	ldd	r21, Z+1	; 0x01
     a96:	20 e1       	ldi	r18, 0x10	; 16
     a98:	37 e2       	ldi	r19, 0x27	; 39
     a9a:	6a e2       	ldi	r22, 0x2A	; 42
     a9c:	71 e0       	ldi	r23, 0x01	; 1
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
     aa8:	1a c1       	rjmp	.+564    	; 0xcde <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
     aaa:	4e 01       	movw	r8, r28
     aac:	f2 ef       	ldi	r31, 0xF2	; 242
     aae:	8f 1a       	sub	r8, r31
     ab0:	fe ef       	ldi	r31, 0xFE	; 254
     ab2:	9f 0a       	sbc	r9, r31
     ab4:	f4 01       	movw	r30, r8
     ab6:	40 81       	ld	r20, Z
     ab8:	51 81       	ldd	r21, Z+1	; 0x01
     aba:	41 15       	cp	r20, r1
     abc:	51 05       	cpc	r21, r1
     abe:	71 f4       	brne	.+28     	; 0xadc <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
     ac0:	f7 01       	movw	r30, r14
     ac2:	40 81       	ld	r20, Z
     ac4:	51 81       	ldd	r21, Z+1	; 0x01
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	3f ef       	ldi	r19, 0xFF	; 255
     aca:	65 ec       	ldi	r22, 0xC5	; 197
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	ce 01       	movw	r24, r28
     ad0:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ad4:	81 11       	cpse	r24, r1
     ad6:	ce c0       	rjmp	.+412    	; 0xc74 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
     ad8:	89 e0       	ldi	r24, 0x09	; 9
     ada:	0e c1       	rjmp	.+540    	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     adc:	f7 01       	movw	r30, r14
     ade:	20 81       	ld	r18, Z
     ae0:	31 81       	ldd	r19, Z+1	; 0x01
     ae2:	00 e1       	ldi	r16, 0x10	; 16
     ae4:	17 e2       	ldi	r17, 0x27	; 39
     ae6:	66 e1       	ldi	r22, 0x16	; 22
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     af0:	88 23       	and	r24, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
     af4:	f6 c0       	rjmp	.+492    	; 0xce2 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
     af6:	ce 01       	movw	r24, r28
     af8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN13Adafruit_FONA10flushInputEv>
     afc:	8e 01       	movw	r16, r28
     afe:	07 5e       	subi	r16, 0xE7	; 231
     b00:	1e 4f       	sbci	r17, 0xFE	; 254
     b02:	6c e0       	ldi	r22, 0x0C	; 12
     b04:	71 e0       	ldi	r23, 0x01	; 1
     b06:	f8 01       	movw	r30, r16
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     b10:	f4 01       	movw	r30, r8
     b12:	60 81       	ld	r22, Z
     b14:	71 81       	ldd	r23, Z+1	; 0x01
     b16:	f8 01       	movw	r30, r16
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     b20:	5e 01       	movw	r10, r28
     b22:	f0 ef       	ldi	r31, 0xF0	; 240
     b24:	af 1a       	sub	r10, r31
     b26:	fe ef       	ldi	r31, 0xFE	; 254
     b28:	bf 0a       	sbc	r11, r31
     b2a:	f5 01       	movw	r30, r10
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	89 2b       	or	r24, r25
     b32:	79 f0       	breq	.+30     	; 0xb52 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
     b34:	6c e3       	ldi	r22, 0x3C	; 60
     b36:	71 e0       	ldi	r23, 0x01	; 1
     b38:	f8 01       	movw	r30, r16
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN5Print5printEPKc>
     b42:	f5 01       	movw	r30, r10
     b44:	60 81       	ld	r22, Z
     b46:	71 81       	ldd	r23, Z+1	; 0x01
     b48:	f8 01       	movw	r30, r16
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     b52:	6e 01       	movw	r12, r28
     b54:	fe ee       	ldi	r31, 0xEE	; 238
     b56:	cf 1a       	sub	r12, r31
     b58:	fe ef       	ldi	r31, 0xFE	; 254
     b5a:	df 0a       	sbc	r13, r31
     b5c:	f6 01       	movw	r30, r12
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	89 2b       	or	r24, r25
     b64:	79 f0       	breq	.+30     	; 0xb84 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
     b66:	6c e3       	ldi	r22, 0x3C	; 60
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	f8 01       	movw	r30, r16
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN5Print5printEPKc>
     b74:	f6 01       	movw	r30, r12
     b76:	60 81       	ld	r22, Z
     b78:	71 81       	ldd	r23, Z+1	; 0x01
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     b84:	6e e3       	ldi	r22, 0x3E	; 62
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	f8 01       	movw	r30, r16
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     b92:	65 e0       	ldi	r22, 0x05	; 5
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	89 e8       	ldi	r24, 0x89	; 137
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     b9e:	6b ef       	ldi	r22, 0xFB	; 251
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	89 e8       	ldi	r24, 0x89	; 137
     ba4:	93 e0       	ldi	r25, 0x03	; 3
     ba6:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     baa:	f4 01       	movw	r30, r8
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	89 e8       	ldi	r24, 0x89	; 137
     bb2:	93 e0       	ldi	r25, 0x03	; 3
     bb4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     bb8:	f5 01       	movw	r30, r10
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	89 2b       	or	r24, r25
     bc0:	69 f0       	breq	.+26     	; 0xbdc <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
     bc2:	6c e3       	ldi	r22, 0x3C	; 60
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	89 e8       	ldi	r24, 0x89	; 137
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN5Print5printEPKc>
     bce:	f5 01       	movw	r30, r10
     bd0:	60 81       	ld	r22, Z
     bd2:	71 81       	ldd	r23, Z+1	; 0x01
     bd4:	89 e8       	ldi	r24, 0x89	; 137
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     bdc:	f6 01       	movw	r30, r12
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	89 2b       	or	r24, r25
     be4:	69 f0       	breq	.+26     	; 0xc00 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
     be6:	6c e3       	ldi	r22, 0x3C	; 60
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	89 e8       	ldi	r24, 0x89	; 137
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN5Print5printEPKc>
     bf2:	f6 01       	movw	r30, r12
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	89 e8       	ldi	r24, 0x89	; 137
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     c00:	6e e3       	ldi	r22, 0x3E	; 62
     c02:	71 e0       	ldi	r23, 0x01	; 1
     c04:	89 e8       	ldi	r24, 0x89	; 137
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     c0c:	f7 01       	movw	r30, r14
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	40 e1       	ldi	r20, 0x10	; 16
     c14:	57 e2       	ldi	r21, 0x27	; 39
     c16:	ce 01       	movw	r24, r28
     c18:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
     c1c:	88 23       	and	r24, r24
     c1e:	09 f4       	brne	.+2      	; 0xc22 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
     c20:	62 c0       	rjmp	.+196    	; 0xce6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
     c22:	f5 01       	movw	r30, r10
     c24:	40 81       	ld	r20, Z
     c26:	51 81       	ldd	r21, Z+1	; 0x01
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	39 f4       	brne	.+14     	; 0xc3c <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
     c2e:	f6 01       	movw	r30, r12
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	41 15       	cp	r20, r1
     c36:	51 05       	cpc	r21, r1
     c38:	79 f4       	brne	.+30     	; 0xc58 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
     c3a:	42 cf       	rjmp	.-380    	; 0xac0 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     c3c:	f7 01       	movw	r30, r14
     c3e:	20 81       	ld	r18, Z
     c40:	31 81       	ldd	r19, Z+1	; 0x01
     c42:	00 e1       	ldi	r16, 0x10	; 16
     c44:	17 e2       	ldi	r17, 0x27	; 39
     c46:	66 ee       	ldi	r22, 0xE6	; 230
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	ce 01       	movw	r24, r28
     c4c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     c50:	81 11       	cpse	r24, r1
     c52:	ed cf       	rjmp	.-38     	; 0xc2e <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
     c54:	87 e0       	ldi	r24, 0x07	; 7
     c56:	50 c0       	rjmp	.+160    	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     c58:	f7 01       	movw	r30, r14
     c5a:	20 81       	ld	r18, Z
     c5c:	31 81       	ldd	r19, Z+1	; 0x01
     c5e:	00 e1       	ldi	r16, 0x10	; 16
     c60:	17 e2       	ldi	r17, 0x27	; 39
     c62:	62 ed       	ldi	r22, 0xD2	; 210
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	ce 01       	movw	r24, r28
     c68:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
     c6c:	81 11       	cpse	r24, r1
     c6e:	28 cf       	rjmp	.-432    	; 0xac0 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
     c70:	88 e0       	ldi	r24, 0x08	; 8
     c72:	42 c0       	rjmp	.+132    	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     c74:	f7 01       	movw	r30, r14
     c76:	40 81       	ld	r20, Z
     c78:	51 81       	ldd	r21, Z+1	; 0x01
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	6c eb       	ldi	r22, 0xBC	; 188
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c88:	88 23       	and	r24, r24
     c8a:	79 f1       	breq	.+94     	; 0xcea <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
     c8c:	87 2d       	mov	r24, r7
     c8e:	34 c0       	rjmp	.+104    	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     c90:	44 eb       	ldi	r20, 0xB4	; 180
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	69 ea       	ldi	r22, 0xA9	; 169
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     c9c:	88 23       	and	r24, r24
     c9e:	39 f1       	breq	.+78     	; 0xcee <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
     ca0:	8e 01       	movw	r16, r28
     ca2:	09 5e       	subi	r16, 0xE9	; 233
     ca4:	1e 4f       	sbci	r17, 0xFE	; 254
     ca6:	f8 01       	movw	r30, r16
     ca8:	40 81       	ld	r20, Z
     caa:	51 81       	ldd	r21, Z+1	; 0x01
     cac:	20 e1       	ldi	r18, 0x10	; 16
     cae:	37 e2       	ldi	r19, 0x27	; 39
     cb0:	6c e9       	ldi	r22, 0x9C	; 156
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cba:	88 23       	and	r24, r24
     cbc:	d1 f0       	breq	.+52     	; 0xcf2 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
     cbe:	f8 01       	movw	r30, r16
     cc0:	40 81       	ld	r20, Z
     cc2:	51 81       	ldd	r21, Z+1	; 0x01
     cc4:	20 e1       	ldi	r18, 0x10	; 16
     cc6:	37 e2       	ldi	r19, 0x27	; 39
     cc8:	61 e9       	ldi	r22, 0x91	; 145
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     cd2:	88 23       	and	r24, r24
     cd4:	81 f0       	breq	.+32     	; 0xcf6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	0f c0       	rjmp	.+30     	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	09 c0       	rjmp	.+18     	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cea:	8a e0       	ldi	r24, 0x0A	; 10
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cee:	8b e0       	ldi	r24, 0x0B	; 11
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cf2:	8c e0       	ldi	r24, 0x0C	; 12
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
     cf6:	8d e0       	ldi	r24, 0x0D	; 13
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	08 95       	ret

00000d14 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	5b 01       	movw	r10, r22
     d28:	6a 01       	movw	r12, r20
     d2a:	e2 2e       	mov	r14, r18
     d2c:	0f 96       	adiw	r24, 0x0f	; 15
     d2e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <strstr_P>
     d32:	ec 01       	movw	r28, r24
     d34:	89 2b       	or	r24, r25
     d36:	c1 f0       	breq	.+48     	; 0xd68 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     d38:	c5 01       	movw	r24, r10
     d3a:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__strlen_P>
     d3e:	8c 0f       	add	r24, r28
     d40:	9d 1f       	adc	r25, r29
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	f1 2c       	mov	r15, r1
     d46:	c0 17       	cp	r28, r16
     d48:	41 f0       	breq	.+16     	; 0xd5a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
     d4a:	b7 01       	movw	r22, r14
     d4c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <strchr>
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	51 f0       	breq	.+20     	; 0xd68 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	cf 5f       	subi	r28, 0xFF	; 255
     d58:	f6 cf       	rjmp	.-20     	; 0xd46 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
     d5a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <atoi>
     d5e:	f6 01       	movw	r30, r12
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	08 95       	ret

00000d7e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	ec 01       	movw	r28, r24
     d92:	6a 01       	movw	r12, r20
     d94:	59 01       	movw	r10, r18
     d96:	10 2f       	mov	r17, r16
     d98:	0e 2d       	mov	r16, r14
     d9a:	44 ef       	ldi	r20, 0xF4	; 244
     d9c:	51 e0       	ldi	r21, 0x01	; 1
     d9e:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     da2:	21 2f       	mov	r18, r17
     da4:	a5 01       	movw	r20, r10
     da6:	b6 01       	movw	r22, r12
     da8:	ce 01       	movw	r24, r28
     daa:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
     dae:	18 2f       	mov	r17, r24
     db0:	88 23       	and	r24, r24
     db2:	31 f0       	breq	.+12     	; 0xdc0 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	64 ef       	ldi	r22, 0xF4	; 244
     db8:	71 e0       	ldi	r23, 0x01	; 1
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN13Adafruit_FONA8readlineEjb>
     dc0:	81 2f       	mov	r24, r17
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	08 95       	ret

00000dd6 <_ZN13Adafruit_FONA7getRSSIEv>:

uint8_t Adafruit_FONA::getRSSI(void) {
     dd6:	ef 92       	push	r14
     dd8:	0f 93       	push	r16
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <_ZN13Adafruit_FONA7getRSSIEv+0xa>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) )
     de4:	e1 2c       	mov	r14, r1
     de6:	0c e2       	ldi	r16, 0x2C	; 44
     de8:	9e 01       	movw	r18, r28
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	3f 4f       	sbci	r19, 0xFF	; 255
     dee:	4d e6       	ldi	r20, 0x6D	; 109
     df0:	51 e0       	ldi	r21, 0x01	; 1
     df2:	66 e6       	ldi	r22, 0x66	; 102
     df4:	71 e0       	ldi	r23, 0x01	; 1
     df6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
     dfa:	88 23       	and	r24, r24
     dfc:	11 f0       	breq	.+4      	; 0xe02 <_ZN13Adafruit_FONA7getRSSIEv+0x2c>
	return 0;

  return reply;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <_ZN13Adafruit_FONA7getRSSIEv+0x2e>

uint8_t Adafruit_FONA::getRSSI(void) {
  uint16_t reply;

  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &reply) )
	return 0;
     e02:	80 e0       	ldi	r24, 0x00	; 0

  return reply;
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	0f 91       	pop	r16
     e0e:	ef 90       	pop	r14
     e10:	08 95       	ret

00000e12 <_ZN7Helpers15printSensorDataEP10SensorData>:
#include <Arduino.h>
#include "DataTypes.h"
#include "Helpers.h"

void Helpers::printSensorData(SensorData* sd) {
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ec 01       	movw	r28, r24

	RM_LOG(F("Batt-V="));
     e18:	6a e1       	ldi	r22, 0x1A	; 26
     e1a:	72 e0       	ldi	r23, 0x02	; 2
     e1c:	89 e8       	ldi	r24, 0x89	; 137
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->battVoltage);
     e24:	69 81       	ldd	r22, Y+1	; 0x01
     e26:	7a 81       	ldd	r23, Y+2	; 0x02
     e28:	4a e0       	ldi	r20, 0x0A	; 10
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	89 e8       	ldi	r24, 0x89	; 137
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     e34:	66 e1       	ldi	r22, 0x16	; 22
     e36:	72 e0       	ldi	r23, 0x02	; 2
     e38:	89 e8       	ldi	r24, 0x89	; 137
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("PV-V="));
     e40:	60 e1       	ldi	r22, 0x10	; 16
     e42:	72 e0       	ldi	r23, 0x02	; 2
     e44:	89 e8       	ldi	r24, 0x89	; 137
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->pVVoltage);
     e4c:	6d 81       	ldd	r22, Y+5	; 0x05
     e4e:	7e 81       	ldd	r23, Y+6	; 0x06
     e50:	4a e0       	ldi	r20, 0x0A	; 10
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	89 e8       	ldi	r24, 0x89	; 137
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     e5c:	6c e0       	ldi	r22, 0x0C	; 12
     e5e:	72 e0       	ldi	r23, 0x02	; 2
     e60:	89 e8       	ldi	r24, 0x89	; 137
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Current="));
     e68:	63 e0       	ldi	r22, 0x03	; 3
     e6a:	72 e0       	ldi	r23, 0x02	; 2
     e6c:	89 e8       	ldi	r24, 0x89	; 137
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOG(sd->current);
     e74:	6b 81       	ldd	r22, Y+3	; 0x03
     e76:	7c 81       	ldd	r23, Y+4	; 0x04
     e78:	4a e0       	ldi	r20, 0x0A	; 10
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	89 e8       	ldi	r24, 0x89	; 137
     e7e:	93 e0       	ldi	r25, 0x03	; 3
     e80:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print5printEji>
	RM_LOG(F(" | "));
     e84:	6f ef       	ldi	r22, 0xFF	; 255
     e86:	71 e0       	ldi	r23, 0x01	; 1
     e88:	89 e8       	ldi	r24, 0x89	; 137
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	
	RM_LOG(F("Temp="));
     e90:	69 ef       	ldi	r22, 0xF9	; 249
     e92:	71 e0       	ldi	r23, 0x01	; 1
     e94:	89 e8       	ldi	r24, 0x89	; 137
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
	RM_LOGLN(sd->temperature);
     e9c:	6f 81       	ldd	r22, Y+7	; 0x07
     e9e:	78 85       	ldd	r23, Y+8	; 0x08
     ea0:	4a e0       	ldi	r20, 0x0A	; 10
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	89 e8       	ldi	r24, 0x89	; 137
     ea6:	93 e0       	ldi	r25, 0x03	; 3
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
	RM_LOG(F("Current="));
	RM_LOG(sd->current);
	RM_LOG(F(" | "));
	
	RM_LOG(F("Temp="));
	RM_LOGLN(sd->temperature);
     eac:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <_ZN5Print7printlnEji>

00000eb0 <_Z21ensureFonaInitialisedb>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	d8 2f       	mov	r29, r24
     eb6:	65 ee       	ldi	r22, 0xE5	; 229
     eb8:	72 e0       	ldi	r23, 0x02	; 2
     eba:	89 e8       	ldi	r24, 0x89	; 137
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     ec2:	42 e0       	ldi	r20, 0x02	; 2
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	8a ea       	ldi	r24, 0xAA	; 170
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN13Adafruit_FONA5beginEhh>
     ece:	c8 2f       	mov	r28, r24
     ed0:	8d ef       	ldi	r24, 0xFD	; 253
     ed2:	8c 0f       	add	r24, r28
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	18 f4       	brcc	.+6      	; 0xede <_Z21ensureFonaInitialisedb+0x2e>
     ed8:	6a ec       	ldi	r22, 0xCA	; 202
     eda:	72 e0       	ldi	r23, 0x02	; 2
     edc:	17 c0       	rjmp	.+46     	; 0xf0c <_Z21ensureFonaInitialisedb+0x5c>
     ede:	d1 11       	cpse	r29, r1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <_Z21ensureFonaInitialisedb+0x38>
     ee2:	8a ea       	ldi	r24, 0xAA	; 170
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	26 c0       	rjmp	.+76     	; 0xf34 <_Z21ensureFonaInitialisedb+0x84>
     ee8:	65 eb       	ldi	r22, 0xB5	; 181
     eea:	72 e0       	ldi	r23, 0x02	; 2
     eec:	89 e8       	ldi	r24, 0x89	; 137
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	8a ea       	ldi	r24, 0xAA	; 170
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN13Adafruit_FONA10enableGPRSEb>
     efe:	c8 2f       	mov	r28, r24
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	8c 0f       	add	r24, r28
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	68 f3       	brcs	.-38     	; 0xee2 <_Z21ensureFonaInitialisedb+0x32>
     f08:	6a e9       	ldi	r22, 0x9A	; 154
     f0a:	72 e0       	ldi	r23, 0x02	; 2
     f0c:	89 e8       	ldi	r24, 0x89	; 137
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
     f14:	60 e5       	ldi	r22, 0x50	; 80
     f16:	71 e0       	ldi	r23, 0x01	; 1
     f18:	89 e8       	ldi	r24, 0x89	; 137
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN5Print5printEPKc>
     f20:	6c 2f       	mov	r22, r28
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	4a e0       	ldi	r20, 0x0A	; 10
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	89 e8       	ldi	r24, 0x89	; 137
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN5Print7printlnEii>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <_Z15switchOffSystemv>:
     f3a:	62 e5       	ldi	r22, 0x52	; 82
     f3c:	71 e0       	ldi	r23, 0x01	; 1
     f3e:	89 e8       	ldi	r24, 0x89	; 137
     f40:	93 e0       	ldi	r25, 0x03	; 3
     f42:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN5Print7printlnEPKc>
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	85 e0       	ldi	r24, 0x05	; 5
     f4a:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
     f4e:	68 eb       	ldi	r22, 0xB8	; 184
     f50:	7b e0       	ldi	r23, 0x0B	; 11
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <delay>

00000f5a <setup>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	cb 51       	subi	r28, 0x1B	; 27
     f64:	d1 40       	sbci	r29, 0x01	; 1
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <pinMode>
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	85 e0       	ldi	r24, 0x05	; 5
     f7c:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
     f80:	68 eb       	ldi	r22, 0xB8	; 184
     f82:	7b e0       	ldi	r23, 0x0B	; 11
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	8d e0       	ldi	r24, 0x0D	; 13
     f90:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <pinMode>
     f94:	26 e0       	ldi	r18, 0x06	; 6
     f96:	40 e8       	ldi	r20, 0x80	; 128
     f98:	55 e2       	ldi	r21, 0x25	; 37
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	89 e8       	ldi	r24, 0x89	; 137
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN14HardwareSerial5beginEmh>
     fa6:	6a ef       	ldi	r22, 0xFA	; 250
     fa8:	72 e0       	ldi	r23, 0x02	; 2
     faa:	89 e8       	ldi	r24, 0x89	; 137
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_Z21ensureFonaInitialisedb>
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	09 f4       	brne	.+2      	; 0xfbe <setup+0x64>
     fbc:	6a c0       	rjmp	.+212    	; 0x1092 <setup+0x138>
     fbe:	fc 01       	movw	r30, r24
     fc0:	22 81       	ldd	r18, Z+2	; 0x02
     fc2:	33 81       	ldd	r19, Z+3	; 0x03
     fc4:	3c 83       	std	Y+4, r19	; 0x04
     fc6:	2b 83       	std	Y+3, r18	; 0x03
     fc8:	44 81       	ldd	r20, Z+4	; 0x04
     fca:	55 81       	ldd	r21, Z+5	; 0x05
     fcc:	66 81       	ldd	r22, Z+6	; 0x06
     fce:	77 81       	ldd	r23, Z+7	; 0x07
     fd0:	4d 83       	std	Y+5, r20	; 0x05
     fd2:	5e 83       	std	Y+6, r21	; 0x06
     fd4:	6f 83       	std	Y+7, r22	; 0x07
     fd6:	78 87       	std	Y+8, r23	; 0x08
     fd8:	40 85       	ldd	r20, Z+8	; 0x08
     fda:	51 85       	ldd	r21, Z+9	; 0x09
     fdc:	62 85       	ldd	r22, Z+10	; 0x0a
     fde:	73 85       	ldd	r23, Z+11	; 0x0b
     fe0:	49 87       	std	Y+9, r20	; 0x09
     fe2:	5a 87       	std	Y+10, r21	; 0x0a
     fe4:	6b 87       	std	Y+11, r22	; 0x0b
     fe6:	7c 87       	std	Y+12, r23	; 0x0c
     fe8:	24 e4       	ldi	r18, 0x44	; 68
     fea:	31 e0       	ldi	r19, 0x01	; 1
     fec:	3a 83       	std	Y+2, r19	; 0x02
     fee:	29 83       	std	Y+1, r18	; 0x01
     ff0:	24 85       	ldd	r18, Z+12	; 0x0c
     ff2:	2d 87       	std	Y+13, r18	; 0x0d
     ff4:	25 85       	ldd	r18, Z+13	; 0x0d
     ff6:	2e 87       	std	Y+14, r18	; 0x0e
     ff8:	26 85       	ldd	r18, Z+14	; 0x0e
     ffa:	2f 87       	std	Y+15, r18	; 0x0f
     ffc:	2f ef       	ldi	r18, 0xFF	; 255
     ffe:	3f 96       	adiw	r30, 0x0f	; 15
    1000:	de 01       	movw	r26, r28
    1002:	50 96       	adiw	r26, 0x10	; 16
    1004:	01 90       	ld	r0, Z+
    1006:	0d 92       	st	X+, r0
    1008:	2a 95       	dec	r18
    100a:	e1 f7       	brne	.-8      	; 0x1004 <setup+0xaa>
    100c:	fc 01       	movw	r30, r24
    100e:	e2 5f       	subi	r30, 0xF2	; 242
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	c1 5f       	subi	r28, 0xF1	; 241
    1018:	de 4f       	sbci	r29, 0xFE	; 254
    101a:	39 83       	std	Y+1, r19	; 0x01
    101c:	28 83       	st	Y, r18
    101e:	cf 50       	subi	r28, 0x0F	; 15
    1020:	d1 40       	sbci	r29, 0x01	; 1
    1022:	32 96       	adiw	r30, 0x02	; 2
    1024:	20 81       	ld	r18, Z
    1026:	31 81       	ldd	r19, Z+1	; 0x01
    1028:	cf 5e       	subi	r28, 0xEF	; 239
    102a:	de 4f       	sbci	r29, 0xFE	; 254
    102c:	39 83       	std	Y+1, r19	; 0x01
    102e:	28 83       	st	Y, r18
    1030:	c1 51       	subi	r28, 0x11	; 17
    1032:	d1 40       	sbci	r29, 0x01	; 1
    1034:	32 96       	adiw	r30, 0x02	; 2
    1036:	20 81       	ld	r18, Z
    1038:	31 81       	ldd	r19, Z+1	; 0x01
    103a:	cd 5e       	subi	r28, 0xED	; 237
    103c:	de 4f       	sbci	r29, 0xFE	; 254
    103e:	39 83       	std	Y+1, r19	; 0x01
    1040:	28 83       	st	Y, r18
    1042:	c3 51       	subi	r28, 0x13	; 19
    1044:	d1 40       	sbci	r29, 0x01	; 1
    1046:	32 96       	adiw	r30, 0x02	; 2
    1048:	20 81       	ld	r18, Z
    104a:	cb 5e       	subi	r28, 0xEB	; 235
    104c:	de 4f       	sbci	r29, 0xFE	; 254
    104e:	28 83       	st	Y, r18
    1050:	c5 51       	subi	r28, 0x15	; 21
    1052:	d1 40       	sbci	r29, 0x01	; 1
    1054:	31 96       	adiw	r30, 0x01	; 1
    1056:	20 81       	ld	r18, Z
    1058:	31 81       	ldd	r19, Z+1	; 0x01
    105a:	ca 5e       	subi	r28, 0xEA	; 234
    105c:	de 4f       	sbci	r29, 0xFE	; 254
    105e:	39 83       	std	Y+1, r19	; 0x01
    1060:	28 83       	st	Y, r18
    1062:	c6 51       	subi	r28, 0x16	; 22
    1064:	d1 40       	sbci	r29, 0x01	; 1
    1066:	32 96       	adiw	r30, 0x02	; 2
    1068:	20 81       	ld	r18, Z
    106a:	31 81       	ldd	r19, Z+1	; 0x01
    106c:	c8 5e       	subi	r28, 0xE8	; 232
    106e:	de 4f       	sbci	r29, 0xFE	; 254
    1070:	39 83       	std	Y+1, r19	; 0x01
    1072:	28 83       	st	Y, r18
    1074:	c8 51       	subi	r28, 0x18	; 24
    1076:	d1 40       	sbci	r29, 0x01	; 1
    1078:	32 96       	adiw	r30, 0x02	; 2
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	c6 5e       	subi	r28, 0xE6	; 230
    1080:	de 4f       	sbci	r29, 0xFE	; 254
    1082:	99 83       	std	Y+1, r25	; 0x01
    1084:	88 83       	st	Y, r24
    1086:	ca 51       	subi	r28, 0x1A	; 26
    1088:	d1 40       	sbci	r29, 0x01	; 1
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONA>
    1092:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_Z15switchOffSystemv>
    1096:	c5 5e       	subi	r28, 0xE5	; 229
    1098:	de 4f       	sbci	r29, 0xFE	; 254
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	2a 97       	sbiw	r28, 0x0a	; 10
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    10be:	67 e8       	ldi	r22, 0x87	; 135
    10c0:	72 e0       	ldi	r23, 0x02	; 2
    10c2:	89 e8       	ldi	r24, 0x89	; 137
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
};


//TODO: All these to be uint16_t ?

struct SensorData {
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
	
	SensorData sd;
	sensorMgr.readData(&sd);
    10ce:	be 01       	movw	r22, r28
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	88 ea       	ldi	r24, 0xA8	; 168
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	2a 96       	adiw	r28, 0x0a	; 10
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <_Z8sendDatav>:

Adafruit_FONA* _sendDataFona = NULL;
uint8_t _sendDataLoopCount = 0;
boolean sendData() {
	
	boolean doInit = (_sendDataLoopCount == 0);
    10f0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_sendDataLoopCount>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	98 0f       	add	r25, r24
    10f8:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_sendDataLoopCount>
	
	if (doInit) {
    10fc:	81 11       	cpse	r24, r1
    10fe:	15 c0       	rjmp	.+42     	; 0x112a <_Z8sendDatav+0x3a>
	
		RM_LOGLN(F("Initialising module to send data"));
    1100:	66 e6       	ldi	r22, 0x66	; 102
    1102:	72 e0       	ldi	r23, 0x02	; 2
    1104:	89 e8       	ldi	r24, 0x89	; 137
    1106:	93 e0       	ldi	r25, 0x03	; 3
    1108:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
		_sendDataFona = ensureFonaInitialised(true);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_Z21ensureFonaInitialisedb>
    1112:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <_sendDataFona+0x1>
    1116:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_sendDataFona>
	
		if (_sendDataFona == NULL)
    111a:	89 2b       	or	r24, r25
    111c:	b9 f0       	breq	.+46     	; 0x114c <_Z8sendDatav+0x5c>
			return true; //This task is finished even though in error state
			
		RM_LOGLN(F("Now waiting for a while before checking signal"));
    111e:	67 e3       	ldi	r22, 0x37	; 55
    1120:	72 e0       	ldi	r23, 0x02	; 2
    1122:	89 e8       	ldi	r24, 0x89	; 137
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
	}
	
	//Wait to get signal
	if (_sendDataLoopCount == 60) {
    112a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_sendDataLoopCount>
    112e:	8c 33       	cpi	r24, 0x3C	; 60
    1130:	79 f4       	brne	.+30     	; 0x1150 <_Z8sendDatav+0x60>
		
		//Get RSSI - store? wait another minute?not
		//_sendDataFona->getRSSI()
		RM_LOGLN(F("Signal is "));
    1132:	6c e2       	ldi	r22, 0x2C	; 44
    1134:	72 e0       	ldi	r23, 0x02	; 2
    1136:	89 e8       	ldi	r24, 0x89	; 137
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
		
		
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    113e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_sendDataLoopCount>
		_sendDataFona = NULL;
    1142:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_sendDataFona+0x1>
    1146:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_sendDataFona>
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <_Z8sendDatav+0x60>
		RM_LOGLN(F("Initialising module to send data"));
	
		_sendDataFona = ensureFonaInitialised(true);
	
		if (_sendDataFona == NULL)
			return true; //This task is finished even though in error state
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret
		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		_sendDataFona = NULL;
	}
	
	return false;
    1150:	80 e0       	ldi	r24, 0x00	; 0
}
    1152:	08 95       	ret

00001154 <loop>:

//Loop-scoped variables
volatile int _timerCounter = 0;
void loop() {

	delay(1000);
    1154:	68 ee       	ldi	r22, 0xE8	; 232
    1156:	73 e0       	ldi	r23, 0x03	; 3
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <delay>
	++_timerCounter;
    1160:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
    1164:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x1>
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
    116e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    1172:	62 e2       	ldi	r22, 0x22	; 34
    1174:	72 e0       	ldi	r23, 0x02	; 2
    1176:	89 e8       	ldi	r24, 0x89	; 137
    1178:	93 e0       	ldi	r25, 0x03	; 3
    117a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
    117e:	60 e5       	ldi	r22, 0x50	; 80
    1180:	71 e0       	ldi	r23, 0x01	; 1
    1182:	89 e8       	ldi	r24, 0x89	; 137
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN5Print5printEPKc>
    118a:	4a e0       	ldi	r20, 0x0A	; 10
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <_behaviour>
    1192:	89 e8       	ldi	r24, 0x89	; 137
    1194:	93 e0       	ldi	r25, 0x03	; 3
    1196:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    119a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    119e:	80 ff       	sbrs	r24, 0
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <loop+0x60>
		
		if (takeReadings())
    11a2:	0e 94 55 08 	call	0x10aa	; 0x10aa <_Z12takeReadingsv>
    11a6:	88 23       	and	r24, r24
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    11aa:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    11b4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    11b8:	81 ff       	sbrs	r24, 1
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <loop+0x7a>
		
		if (sendData())
    11bc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_Z8sendDatav>
    11c0:	88 23       	and	r24, r24
    11c2:	29 f0       	breq	.+10     	; 0x11ce <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    11c4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    11c8:	8d 7f       	andi	r24, 0xFD	; 253
    11ca:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_behaviour>
	}
	
	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    11ce:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_behaviour>
    11d2:	81 11       	cpse	r24, r1
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <loop+0x86>
		
		switchOffSystem();
    11d6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <_Z15switchOffSystemv>
    11da:	08 95       	ret

000011dc <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	64 e0       	ldi	r22, 0x04	; 4
    11e0:	8a ea       	ldi	r24, 0xAA	; 170
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 25 02 	call	0x44a	; 0x44a <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	89 ea       	ldi	r24, 0xA9	; 169
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	88 ea       	ldi	r24, 0xA8	; 168
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0c 94 07 09 	jmp	0x120e	; 0x120e <_ZN13SensorManagerC1Eb>

000011fc <_ZN12RmMemManagerC1Eb>:
LED_STATE _ledBottomState = All_Clear;
LED_STATE _ledTopState = All_Clear;
uint8_t _flashCallCount=0;

RmMemManager::RmMemManager(boolean isMock) {
	_isMock = isMock;
    11fc:	fc 01       	movw	r30, r24
    11fe:	60 83       	st	Z, r22
	
	if (!_isMock)
    1200:	61 11       	cpse	r22, r1
    1202:	04 c0       	rjmp	.+8      	; 0x120c <_ZN12RmMemManagerC1Eb+0x10>
		Wire.begin();
    1204:	84 e3       	ldi	r24, 0x34	; 52
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <_ZN7TwoWire5beginEv>
    120c:	08 95       	ret

0000120e <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    120e:	fc 01       	movw	r30, r24
    1210:	60 83       	st	Z, r22
    1212:	08 95       	ret

00001214 <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    1214:	fc 01       	movw	r30, r24
    1216:	80 81       	ld	r24, Z
    1218:	81 11       	cpse	r24, r1
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    121c:	86 2f       	mov	r24, r22
    121e:	0c 94 36 10 	jmp	0x206c	; 0x206c <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	08 95       	ret

00001228 <_Z11getMockDataP10SensorData>:

uint8_t __mockDataCounter;
void getMockData(SensorData* ret) {
    1228:	fc 01       	movw	r30, r24
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    122a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <__mockDataCounter>
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	28 0f       	add	r18, r24
    1232:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <__mockDataCounter>
	
	ret->battVoltage = __mockDataCounter;
    1236:	82 2f       	mov	r24, r18
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	92 83       	std	Z+2, r25	; 0x02
    123c:	81 83       	std	Z+1, r24	; 0x01
	ret->pVVoltage = __mockDataCounter*10;
    123e:	3a e0       	ldi	r19, 0x0A	; 10
    1240:	23 9f       	mul	r18, r19
    1242:	c0 01       	movw	r24, r0
    1244:	11 24       	eor	r1, r1
    1246:	96 83       	std	Z+6, r25	; 0x06
    1248:	85 83       	std	Z+5, r24	; 0x05
	ret->current = __mockDataCounter%7;
    124a:	82 2f       	mov	r24, r18
    124c:	67 e0       	ldi	r22, 0x07	; 7
    124e:	0e 94 4e 13 	call	0x269c	; 0x269c <__udivmodqi4>
    1252:	89 2f       	mov	r24, r25
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	94 83       	std	Z+4, r25	; 0x04
    1258:	83 83       	std	Z+3, r24	; 0x03
	ret->temperature = __mockDataCounter*100;
    125a:	34 e6       	ldi	r19, 0x64	; 100
    125c:	23 9f       	mul	r18, r19
    125e:	c0 01       	movw	r24, r0
    1260:	11 24       	eor	r1, r1
    1262:	90 87       	std	Z+8, r25	; 0x08
    1264:	87 83       	std	Z+7, r24	; 0x07
    1266:	08 95       	ret

00001268 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	8c 01       	movw	r16, r24
    127e:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    1280:	fc 01       	movw	r30, r24
    1282:	80 81       	ld	r24, Z
    1284:	88 23       	and	r24, r24
    1286:	21 f0       	breq	.+8      	; 0x1290 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		getMockData(ret);
    1288:	cb 01       	movw	r24, r22
    128a:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z11getMockDataP10SensorData>
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    1290:	6e e0       	ldi	r22, 0x0E	; 14
    1292:	c8 01       	movw	r24, r16
    1294:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN13SensorManager16takeSampleAnalogEh>
    1298:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    129a:	6f e0       	ldi	r22, 0x0F	; 15
    129c:	c8 01       	movw	r24, r16
    129e:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN13SensorManager16takeSampleAnalogEh>
    12a2:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    12a4:	61 e1       	ldi	r22, 0x11	; 17
    12a6:	c8 01       	movw	r24, r16
    12a8:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN13SensorManager16takeSampleAnalogEh>
    12ac:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    12ae:	60 e1       	ldi	r22, 0x10	; 16
    12b0:	c8 01       	movw	r24, r16
    12b2:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    12b6:	ba 82       	std	Y+2, r11	; 0x02
    12b8:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    12ba:	de 82       	std	Y+6, r13	; 0x06
    12bc:	cd 82       	std	Y+5, r12	; 0x05
		ret->current = currentRaw;
    12be:	fc 82       	std	Y+4, r15	; 0x04
    12c0:	eb 82       	std	Y+3, r14	; 0x03
		ret->temperature = tempRaw;
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    12c6:	ce 01       	movw	r24, r28
	
	//return ret;
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    12dc:	0c 94 09 07 	jmp	0xe12	; 0xe12 <_ZN7Helpers15printSensorDataEP10SensorData>

000012e0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    12e0:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <twi_sendStop>
    12ea:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <twi_inRepStart>
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	82 e1       	ldi	r24, 0x12	; 18
    12f2:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	83 e1       	ldi	r24, 0x13	; 19
    12fa:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
    12fe:	e9 eb       	ldi	r30, 0xB9	; 185
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8e 7f       	andi	r24, 0xFE	; 254
    1306:	80 83       	st	Z, r24
    1308:	80 81       	ld	r24, Z
    130a:	8d 7f       	andi	r24, 0xFD	; 253
    130c:	80 83       	st	Z, r24
    130e:	88 e4       	ldi	r24, 0x48	; 72
    1310:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1314:	85 e4       	ldi	r24, 0x45	; 69
    1316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    131a:	08 95       	ret

0000131c <twi_transmit>:
    131c:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    1320:	26 2f       	mov	r18, r22
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	24 0f       	add	r18, r20
    1326:	31 1d       	adc	r19, r1
    1328:	21 32       	cpi	r18, 0x21	; 33
    132a:	31 05       	cpc	r19, r1
    132c:	dc f4       	brge	.+54     	; 0x1364 <twi_transmit+0x48>
    132e:	20 91 33 03 	lds	r18, 0x0333	; 0x800333 <twi_state>
    1332:	24 30       	cpi	r18, 0x04	; 4
    1334:	c9 f4       	brne	.+50     	; 0x1368 <twi_transmit+0x4c>
    1336:	fc 01       	movw	r30, r24
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	86 17       	cp	r24, r22
    133e:	58 f4       	brcc	.+22     	; 0x1356 <twi_transmit+0x3a>
    1340:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    1344:	21 91       	ld	r18, Z+
    1346:	dc 01       	movw	r26, r24
    1348:	a6 51       	subi	r26, 0x16	; 22
    134a:	bd 4f       	sbci	r27, 0xFD	; 253
    134c:	a3 0f       	add	r26, r19
    134e:	b1 1d       	adc	r27, r1
    1350:	2c 93       	st	X, r18
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	f3 cf       	rjmp	.-26     	; 0x133c <twi_transmit+0x20>
    1356:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    135a:	68 0f       	add	r22, r24
    135c:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <twi_txBufferLength>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	08 95       	ret
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	08 95       	ret

0000136c <twi_attachSlaveRxEvent>:
    136c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <twi_onSlaveReceive+0x1>
    1370:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <twi_onSlaveReceive>
    1374:	08 95       	ret

00001376 <twi_attachSlaveTxEvent>:
    1376:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <twi_onSlaveTransmit+0x1>
    137a:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <twi_onSlaveTransmit>
    137e:	08 95       	ret

00001380 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1380:	85 ed       	ldi	r24, 0xD5	; 213
    1382:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1386:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    138a:	84 fd       	sbrc	r24, 4
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    138e:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
    1392:	08 95       	ret

00001394 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1394:	85 ec       	ldi	r24, 0xC5	; 197
    1396:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    139a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
    139e:	08 95       	ret

000013a0 <__vector_24>:
}

ISR(TWI_vect)
{
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
  switch(TW_STATUS){
    13c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    13c6:	88 7f       	andi	r24, 0xF8	; 248
    13c8:	80 36       	cpi	r24, 0x60	; 96
    13ca:	09 f4       	brne	.+2      	; 0x13ce <__vector_24+0x2e>
    13cc:	9e c0       	rjmp	.+316    	; 0x150a <__vector_24+0x16a>
    13ce:	78 f5       	brcc	.+94     	; 0x142e <__vector_24+0x8e>
    13d0:	88 32       	cpi	r24, 0x28	; 40
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <__vector_24+0x36>
    13d4:	5d c0       	rjmp	.+186    	; 0x1490 <__vector_24+0xf0>
    13d6:	90 f4       	brcc	.+36     	; 0x13fc <__vector_24+0x5c>
    13d8:	80 31       	cpi	r24, 0x10	; 16
    13da:	09 f4       	brne	.+2      	; 0x13de <__vector_24+0x3e>
    13dc:	56 c0       	rjmp	.+172    	; 0x148a <__vector_24+0xea>
    13de:	38 f4       	brcc	.+14     	; 0x13ee <__vector_24+0x4e>
    13e0:	88 23       	and	r24, r24
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <__vector_24+0x46>
    13e4:	f5 c0       	rjmp	.+490    	; 0x15d0 <__vector_24+0x230>
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	09 f4       	brne	.+2      	; 0x13ec <__vector_24+0x4c>
    13ea:	4f c0       	rjmp	.+158    	; 0x148a <__vector_24+0xea>
    13ec:	f5 c0       	rjmp	.+490    	; 0x15d8 <__vector_24+0x238>
    13ee:	88 31       	cpi	r24, 0x18	; 24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <__vector_24+0x54>
    13f2:	4e c0       	rjmp	.+156    	; 0x1490 <__vector_24+0xf0>
    13f4:	80 32       	cpi	r24, 0x20	; 32
    13f6:	09 f4       	brne	.+2      	; 0x13fa <__vector_24+0x5a>
    13f8:	5f c0       	rjmp	.+190    	; 0x14b8 <__vector_24+0x118>
    13fa:	ee c0       	rjmp	.+476    	; 0x15d8 <__vector_24+0x238>
    13fc:	80 34       	cpi	r24, 0x40	; 64
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__vector_24+0x62>
    1400:	6a c0       	rjmp	.+212    	; 0x14d6 <__vector_24+0x136>
    1402:	58 f4       	brcc	.+22     	; 0x141a <__vector_24+0x7a>
    1404:	80 33       	cpi	r24, 0x30	; 48
    1406:	09 f4       	brne	.+2      	; 0x140a <__vector_24+0x6a>
    1408:	57 c0       	rjmp	.+174    	; 0x14b8 <__vector_24+0x118>
    140a:	88 33       	cpi	r24, 0x38	; 56
    140c:	09 f0       	breq	.+2      	; 0x1410 <__vector_24+0x70>
    140e:	e4 c0       	rjmp	.+456    	; 0x15d8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1410:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <twi_error>
      twi_releaseBus();
    1414:	0e 94 ca 09 	call	0x1394	; 0x1394 <twi_releaseBus>
      break;
    1418:	df c0       	rjmp	.+446    	; 0x15d8 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    141a:	80 35       	cpi	r24, 0x50	; 80
    141c:	09 f4       	brne	.+2      	; 0x1420 <__vector_24+0x80>
    141e:	4f c0       	rjmp	.+158    	; 0x14be <__vector_24+0x11e>
    1420:	88 35       	cpi	r24, 0x58	; 88
    1422:	09 f4       	brne	.+2      	; 0x1426 <__vector_24+0x86>
    1424:	5d c0       	rjmp	.+186    	; 0x14e0 <__vector_24+0x140>
    1426:	88 34       	cpi	r24, 0x48	; 72
    1428:	09 f0       	breq	.+2      	; 0x142c <__vector_24+0x8c>
    142a:	d6 c0       	rjmp	.+428    	; 0x15d8 <__vector_24+0x238>
    142c:	d3 c0       	rjmp	.+422    	; 0x15d4 <__vector_24+0x234>
    142e:	88 39       	cpi	r24, 0x98	; 152
    1430:	09 f4       	brne	.+2      	; 0x1434 <__vector_24+0x94>
    1432:	c4 c0       	rjmp	.+392    	; 0x15bc <__vector_24+0x21c>
    1434:	a8 f4       	brcc	.+42     	; 0x1460 <__vector_24+0xc0>
    1436:	88 37       	cpi	r24, 0x78	; 120
    1438:	09 f4       	brne	.+2      	; 0x143c <__vector_24+0x9c>
    143a:	67 c0       	rjmp	.+206    	; 0x150a <__vector_24+0x16a>
    143c:	38 f4       	brcc	.+14     	; 0x144c <__vector_24+0xac>
    143e:	88 36       	cpi	r24, 0x68	; 104
    1440:	09 f4       	brne	.+2      	; 0x1444 <__vector_24+0xa4>
    1442:	63 c0       	rjmp	.+198    	; 0x150a <__vector_24+0x16a>
    1444:	80 37       	cpi	r24, 0x70	; 112
    1446:	09 f4       	brne	.+2      	; 0x144a <__vector_24+0xaa>
    1448:	60 c0       	rjmp	.+192    	; 0x150a <__vector_24+0x16a>
    144a:	c6 c0       	rjmp	.+396    	; 0x15d8 <__vector_24+0x238>
    144c:	88 38       	cpi	r24, 0x88	; 136
    144e:	09 f4       	brne	.+2      	; 0x1452 <__vector_24+0xb2>
    1450:	b5 c0       	rjmp	.+362    	; 0x15bc <__vector_24+0x21c>
    1452:	80 39       	cpi	r24, 0x90	; 144
    1454:	09 f4       	brne	.+2      	; 0x1458 <__vector_24+0xb8>
    1456:	5f c0       	rjmp	.+190    	; 0x1516 <__vector_24+0x176>
    1458:	80 38       	cpi	r24, 0x80	; 128
    145a:	09 f0       	breq	.+2      	; 0x145e <__vector_24+0xbe>
    145c:	bd c0       	rjmp	.+378    	; 0x15d8 <__vector_24+0x238>
    145e:	5b c0       	rjmp	.+182    	; 0x1516 <__vector_24+0x176>
    1460:	80 3b       	cpi	r24, 0xB0	; 176
    1462:	09 f4       	brne	.+2      	; 0x1466 <__vector_24+0xc6>
    1464:	83 c0       	rjmp	.+262    	; 0x156c <__vector_24+0x1cc>
    1466:	38 f4       	brcc	.+14     	; 0x1476 <__vector_24+0xd6>
    1468:	80 3a       	cpi	r24, 0xA0	; 160
    146a:	09 f4       	brne	.+2      	; 0x146e <__vector_24+0xce>
    146c:	66 c0       	rjmp	.+204    	; 0x153a <__vector_24+0x19a>
    146e:	88 3a       	cpi	r24, 0xA8	; 168
    1470:	09 f4       	brne	.+2      	; 0x1474 <__vector_24+0xd4>
    1472:	7c c0       	rjmp	.+248    	; 0x156c <__vector_24+0x1cc>
    1474:	b1 c0       	rjmp	.+354    	; 0x15d8 <__vector_24+0x238>
    1476:	80 3c       	cpi	r24, 0xC0	; 192
    1478:	09 f4       	brne	.+2      	; 0x147c <__vector_24+0xdc>
    147a:	a4 c0       	rjmp	.+328    	; 0x15c4 <__vector_24+0x224>
    147c:	88 3c       	cpi	r24, 0xC8	; 200
    147e:	09 f4       	brne	.+2      	; 0x1482 <__vector_24+0xe2>
    1480:	a1 c0       	rjmp	.+322    	; 0x15c4 <__vector_24+0x224>
    1482:	88 3b       	cpi	r24, 0xB8	; 184
    1484:	09 f4       	brne	.+2      	; 0x1488 <__vector_24+0xe8>
    1486:	87 c0       	rjmp	.+270    	; 0x1596 <__vector_24+0x1f6>
    1488:	a7 c0       	rjmp	.+334    	; 0x15d8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    148a:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_slarw>
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1490:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_masterBufferIndex>
    1494:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_masterBufferLength>
    1498:	98 17       	cp	r25, r24
    149a:	70 f5       	brcc	.+92     	; 0x14f8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    149c:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <twi_masterBufferIndex>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	8e 0f       	add	r24, r30
    14a4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_masterBufferIndex>
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	e4 5f       	subi	r30, 0xF4	; 244
    14ac:	fc 4f       	sbci	r31, 0xFC	; 252
    14ae:	80 81       	ld	r24, Z
    14b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    14b4:	85 ec       	ldi	r24, 0xC5	; 197
    14b6:	83 c0       	rjmp	.+262    	; 0x15be <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    14b8:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <twi_error>
    14bc:	8b c0       	rjmp	.+278    	; 0x15d4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    14be:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <twi_masterBufferIndex>
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	8e 0f       	add	r24, r30
    14c6:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_masterBufferIndex>
    14ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	e4 5f       	subi	r30, 0xF4	; 244
    14d2:	fc 4f       	sbci	r31, 0xFC	; 252
    14d4:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    14d6:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_masterBufferIndex>
    14da:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_masterBufferLength>
    14de:	6b c0       	rjmp	.+214    	; 0x15b6 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    14e0:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <twi_masterBufferIndex>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	8e 0f       	add	r24, r30
    14e8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_masterBufferIndex>
    14ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	e4 5f       	subi	r30, 0xF4	; 244
    14f4:	fc 4f       	sbci	r31, 0xFC	; 252
    14f6:	80 83       	st	Z, r24
	if (twi_sendStop)
    14f8:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <twi_sendStop>
    14fc:	81 11       	cpse	r24, r1
    14fe:	6a c0       	rjmp	.+212    	; 0x15d4 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1506:	84 ea       	ldi	r24, 0xA4	; 164
    1508:	5e c0       	rjmp	.+188    	; 0x15c6 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1510:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <twi_rxBufferIndex>
    1514:	cf cf       	rjmp	.-98     	; 0x14b4 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1516:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    151a:	80 32       	cpi	r24, 0x20	; 32
    151c:	08 f0       	brcs	.+2      	; 0x1520 <__vector_24+0x180>
    151e:	4e c0       	rjmp	.+156    	; 0x15bc <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1520:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	8e 0f       	add	r24, r30
    1528:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <twi_rxBufferIndex>
    152c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	e8 53       	subi	r30, 0x38	; 56
    1534:	fd 4f       	sbci	r31, 0xFD	; 253
    1536:	80 83       	st	Z, r24
    1538:	bd cf       	rjmp	.-134    	; 0x14b4 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    153a:	0e 94 ca 09 	call	0x1394	; 0x1394 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    153e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    1542:	80 32       	cpi	r24, 0x20	; 32
    1544:	30 f4       	brcc	.+12     	; 0x1552 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1546:	e0 91 c7 02 	lds	r30, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	e8 53       	subi	r30, 0x38	; 56
    154e:	fd 4f       	sbci	r31, 0xFD	; 253
    1550:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1552:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <twi_rxBufferIndex>
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <twi_onSlaveReceive>
    155c:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <twi_onSlaveReceive+0x1>
    1560:	88 ec       	ldi	r24, 0xC8	; 200
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1566:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <twi_rxBufferIndex>
      break;
    156a:	36 c0       	rjmp	.+108    	; 0x15d8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1572:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1576:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    157a:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <twi_onSlaveTransmit>
    157e:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <twi_onSlaveTransmit+0x1>
    1582:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1584:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    1588:	81 11       	cpse	r24, r1
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1592:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1596:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <twi_txBufferIndex>
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	8e 0f       	add	r24, r30
    159e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <twi_txBufferIndex>
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	e6 51       	subi	r30, 0x16	; 22
    15a6:	fd 4f       	sbci	r31, 0xFD	; 253
    15a8:	80 81       	ld	r24, Z
    15aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    15ae:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <twi_txBufferIndex>
    15b2:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <twi_txBufferLength>
    15b6:	98 17       	cp	r25, r24
    15b8:	08 f4       	brcc	.+2      	; 0x15bc <__vector_24+0x21c>
    15ba:	7c cf       	rjmp	.-264    	; 0x14b4 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    15bc:	85 e8       	ldi	r24, 0x85	; 133
    15be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    15c2:	0a c0       	rjmp	.+20     	; 0x15d8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15c4:	85 ec       	ldi	r24, 0xC5	; 197
    15c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    15ca:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_state>
      break;
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    15d0:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <twi_error>
      twi_stop();
    15d4:	0e 94 c0 09 	call	0x1380	; 0x1380 <twi_stop>
      break;
  }
}
    15d8:	ff 91       	pop	r31
    15da:	ef 91       	pop	r30
    15dc:	bf 91       	pop	r27
    15de:	af 91       	pop	r26
    15e0:	9f 91       	pop	r25
    15e2:	8f 91       	pop	r24
    15e4:	7f 91       	pop	r23
    15e6:	6f 91       	pop	r22
    15e8:	5f 91       	pop	r21
    15ea:	4f 91       	pop	r20
    15ec:	3f 91       	pop	r19
    15ee:	2f 91       	pop	r18
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	0f 90       	pop	r0
    15f6:	1f 90       	pop	r1
    15f8:	18 95       	reti

000015fa <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    15fa:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	20 91 68 03 	lds	r18, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1604:	82 1b       	sub	r24, r18
    1606:	91 09       	sbc	r25, r1
    1608:	08 95       	ret

0000160a <_ZN7TwoWire4readEv>:
    160a:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    160e:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    1612:	98 17       	cp	r25, r24
    1614:	50 f4       	brcc	.+20     	; 0x162a <_ZN7TwoWire4readEv+0x20>
    1616:	e9 2f       	mov	r30, r25
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	e7 59       	subi	r30, 0x97	; 151
    161c:	fc 4f       	sbci	r31, 0xFC	; 252
    161e:	20 81       	ld	r18, Z
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	9f 5f       	subi	r25, 0xFF	; 255
    1624:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1628:	02 c0       	rjmp	.+4      	; 0x162e <_ZN7TwoWire4readEv+0x24>
    162a:	2f ef       	ldi	r18, 0xFF	; 255
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	c9 01       	movw	r24, r18
    1630:	08 95       	ret

00001632 <_ZN7TwoWire4peekEv>:
    1632:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1636:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    163a:	e8 17       	cp	r30, r24
    163c:	30 f4       	brcc	.+12     	; 0x164a <_ZN7TwoWire4peekEv+0x18>
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	e7 59       	subi	r30, 0x97	; 151
    1642:	fc 4f       	sbci	r31, 0xFC	; 252
    1644:	80 81       	ld	r24, Z
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	08 95       	ret
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	9f ef       	ldi	r25, 0xFF	; 255
    164e:	08 95       	ret

00001650 <_ZN7TwoWire5flushEv>:
    1650:	08 95       	ret

00001652 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <_ZN7TwoWire14user_onReceiveE>
    165c:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <_ZN7TwoWire14user_onReceiveE+0x1>
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	f1 f0       	breq	.+60     	; 0x16a0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1664:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1668:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    166c:	98 17       	cp	r25, r24
    166e:	c0 f0       	brcs	.+48     	; 0x16a0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	29 2f       	mov	r18, r25
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	26 17       	cp	r18, r22
    1678:	37 07       	cpc	r19, r23
    167a:	54 f4       	brge	.+20     	; 0x1690 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    167c:	de 01       	movw	r26, r28
    167e:	a2 0f       	add	r26, r18
    1680:	b3 1f       	adc	r27, r19
    1682:	4c 91       	ld	r20, X
    1684:	d9 01       	movw	r26, r18
    1686:	a7 59       	subi	r26, 0x97	; 151
    1688:	bc 4f       	sbci	r27, 0xFC	; 252
    168a:	4c 93       	st	X, r20
    168c:	9f 5f       	subi	r25, 0xFF	; 255
    168e:	f1 cf       	rjmp	.-30     	; 0x1672 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1690:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    1694:	60 93 67 03 	sts	0x0367, r22	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    1698:	cb 01       	movw	r24, r22
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	09 94       	ijmp
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <_ZN7TwoWire16onRequestServiceEv>:
    16a6:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <_ZN7TwoWire14user_onRequestE>
    16aa:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <_ZN7TwoWire14user_onRequestE+0x1>
    16ae:	30 97       	sbiw	r30, 0x00	; 0
    16b0:	29 f0       	breq	.+10     	; 0x16bc <_ZN7TwoWire16onRequestServiceEv+0x16>
    16b2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    16b6:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    16ba:	09 94       	ijmp
    16bc:	08 95       	ret

000016be <_ZN7TwoWire5writeEPKhj>:
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	7c 01       	movw	r14, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8a 01       	movw	r16, r20
    16d4:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <_ZN7TwoWire12transmittingE>
    16d8:	22 23       	and	r18, r18
    16da:	89 f0       	breq	.+34     	; 0x16fe <_ZN7TwoWire5writeEPKhj+0x40>
    16dc:	eb 01       	movw	r28, r22
    16de:	6b 01       	movw	r12, r22
    16e0:	c4 0e       	add	r12, r20
    16e2:	d5 1e       	adc	r13, r21
    16e4:	cc 15       	cp	r28, r12
    16e6:	dd 05       	cpc	r29, r13
    16e8:	69 f0       	breq	.+26     	; 0x1704 <_ZN7TwoWire5writeEPKhj+0x46>
    16ea:	69 91       	ld	r22, Y+
    16ec:	d7 01       	movw	r26, r14
    16ee:	ed 91       	ld	r30, X+
    16f0:	fc 91       	ld	r31, X
    16f2:	01 90       	ld	r0, Z+
    16f4:	f0 81       	ld	r31, Z
    16f6:	e0 2d       	mov	r30, r0
    16f8:	c7 01       	movw	r24, r14
    16fa:	09 95       	icall
    16fc:	f3 cf       	rjmp	.-26     	; 0x16e4 <_ZN7TwoWire5writeEPKhj+0x26>
    16fe:	64 2f       	mov	r22, r20
    1700:	0e 94 8e 09 	call	0x131c	; 0x131c <twi_transmit>
    1704:	c8 01       	movw	r24, r16
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	08 95       	ret

00001718 <_ZN7TwoWire5writeEh>:
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	1f 92       	push	r1
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	69 83       	std	Y+1, r22	; 0x01
    1724:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <_ZN7TwoWire12transmittingE>
    1728:	22 23       	and	r18, r18
    172a:	d1 f0       	breq	.+52     	; 0x1760 <_ZN7TwoWire5writeEh+0x48>
    172c:	20 91 45 03 	lds	r18, 0x0345	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    1730:	20 32       	cpi	r18, 0x20	; 32
    1732:	40 f0       	brcs	.+16     	; 0x1744 <_ZN7TwoWire5writeEh+0x2c>
    1734:	21 e0       	ldi	r18, 0x01	; 1
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	fc 01       	movw	r30, r24
    173a:	33 83       	std	Z+3, r19	; 0x03
    173c:	22 83       	std	Z+2, r18	; 0x02
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	15 c0       	rjmp	.+42     	; 0x176e <_ZN7TwoWire5writeEh+0x56>
    1744:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    1748:	e8 2f       	mov	r30, r24
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	e9 5b       	subi	r30, 0xB9	; 185
    174e:	fc 4f       	sbci	r31, 0xFC	; 252
    1750:	99 81       	ldd	r25, Y+1	; 0x01
    1752:	90 83       	st	Z, r25
    1754:	8f 5f       	subi	r24, 0xFF	; 255
    1756:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    175a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    175e:	05 c0       	rjmp	.+10     	; 0x176a <_ZN7TwoWire5writeEh+0x52>
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 8e 09 	call	0x131c	; 0x131c <twi_transmit>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0f 90       	pop	r0
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <_ZN7TwoWireC1Ev>:
    1776:	fc 01       	movw	r30, r24
    1778:	13 82       	std	Z+3, r1	; 0x03
    177a:	12 82       	std	Z+2, r1	; 0x02
    177c:	88 ee       	ldi	r24, 0xE8	; 232
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	84 83       	std	Z+4, r24	; 0x04
    1786:	95 83       	std	Z+5, r25	; 0x05
    1788:	a6 83       	std	Z+6, r26	; 0x06
    178a:	b7 83       	std	Z+7, r27	; 0x07
    178c:	87 e6       	ldi	r24, 0x67	; 103
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
    1794:	08 95       	ret

00001796 <_ZN7TwoWire5beginEv>:
    1796:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <_ZN7TwoWire13rxBufferIndexE>
    179a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <_ZN7TwoWire14rxBufferLengthE>
    179e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_ZN7TwoWire13txBufferIndexE>
    17a2:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_ZN7TwoWire14txBufferLengthE>
    17a6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <twi_init>
    17aa:	83 e5       	ldi	r24, 0x53	; 83
    17ac:	9b e0       	ldi	r25, 0x0B	; 11
    17ae:	0e 94 bb 09 	call	0x1376	; 0x1376 <twi_attachSlaveTxEvent>
    17b2:	89 e2       	ldi	r24, 0x29	; 41
    17b4:	9b e0       	ldi	r25, 0x0B	; 11
    17b6:	0c 94 b6 09 	jmp	0x136c	; 0x136c <twi_attachSlaveRxEvent>

000017ba <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    17ba:	84 e3       	ldi	r24, 0x34	; 52
    17bc:	93 e0       	ldi	r25, 0x03	; 3
    17be:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <_ZN7TwoWireC1Ev>

000017c2 <_ZN13ExtendedTests18runExtendedGsmTestE13Adafruit_FONA>:
#endif
}


//SMS/GPRS test
void ExtendedTests::runExtendedGsmTest(Adafruit_FONA fona) {
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	ec 01       	movw	r28, r24
	
#if IS_EXTENDED_GSM_TEST == true

	//TODO: Wait a while?
	
	RM_LOGLN(F("TEST: Checking rssi..."));
    17c8:	66 e0       	ldi	r22, 0x06	; 6
    17ca:	73 e0       	ldi	r23, 0x03	; 3
    17cc:	89 e8       	ldi	r24, 0x89	; 137
    17ce:	93 e0       	ldi	r25, 0x03	; 3
    17d0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	uint8_t result = fona.getRSSI();
    17d4:	ce 01       	movw	r24, r28
    17d6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN13Adafruit_FONA7getRSSIEv>
	RM_LOGLN(result);
    17da:	4a e0       	ldi	r20, 0x0A	; 10
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	68 2f       	mov	r22, r24
    17e0:	89 e8       	ldi	r24, 0x89	; 137
    17e2:	93 e0       	ldi	r25, 0x03	; 3
	
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
	//TODO: Wait a while?
	
	RM_LOGLN(F("TEST: Checking rssi..."));
	
	uint8_t result = fona.getRSSI();
	RM_LOGLN(result);
    17e8:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <_ZN5Print7printlnEhi>

000017ec <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    17ec:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    17ee:	91 8d       	ldd	r25, Z+25	; 0x19
    17f0:	22 8d       	ldd	r18, Z+26	; 0x1a
    17f2:	89 2f       	mov	r24, r25
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	80 5c       	subi	r24, 0xC0	; 192
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	82 1b       	sub	r24, r18
    17fc:	91 09       	sbc	r25, r1
}
    17fe:	8f 73       	andi	r24, 0x3F	; 63
    1800:	99 27       	eor	r25, r25
    1802:	08 95       	ret

00001804 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1804:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1806:	91 8d       	ldd	r25, Z+25	; 0x19
    1808:	82 8d       	ldd	r24, Z+26	; 0x1a
    180a:	98 17       	cp	r25, r24
    180c:	31 f0       	breq	.+12     	; 0x181a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    180e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1810:	e8 0f       	add	r30, r24
    1812:	f1 1d       	adc	r31, r1
    1814:	85 8d       	ldd	r24, Z+29	; 0x1d
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    181e:	08 95       	ret

00001820 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1820:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1822:	91 8d       	ldd	r25, Z+25	; 0x19
    1824:	82 8d       	ldd	r24, Z+26	; 0x1a
    1826:	98 17       	cp	r25, r24
    1828:	61 f0       	breq	.+24     	; 0x1842 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    182a:	82 8d       	ldd	r24, Z+26	; 0x1a
    182c:	df 01       	movw	r26, r30
    182e:	a8 0f       	add	r26, r24
    1830:	b1 1d       	adc	r27, r1
    1832:	5d 96       	adiw	r26, 0x1d	; 29
    1834:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1836:	92 8d       	ldd	r25, Z+26	; 0x1a
    1838:	9f 5f       	subi	r25, 0xFF	; 255
    183a:	9f 73       	andi	r25, 0x3F	; 63
    183c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1846:	08 95       	ret

00001848 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1848:	89 e7       	ldi	r24, 0x79	; 121
    184a:	9d e0       	ldi	r25, 0x0D	; 13
    184c:	89 2b       	or	r24, r25
    184e:	49 f0       	breq	.+18     	; 0x1862 <_Z14serialEventRunv+0x1a>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	89 2b       	or	r24, r25
    1856:	29 f0       	breq	.+10     	; 0x1862 <_Z14serialEventRunv+0x1a>
    1858:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <_Z17Serial0_availablev>
    185c:	81 11       	cpse	r24, r1
    185e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1862:	08 95       	ret

00001864 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1864:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1866:	84 8d       	ldd	r24, Z+28	; 0x1c
    1868:	df 01       	movw	r26, r30
    186a:	a8 0f       	add	r26, r24
    186c:	b1 1d       	adc	r27, r1
    186e:	a3 5a       	subi	r26, 0xA3	; 163
    1870:	bf 4f       	sbci	r27, 0xFF	; 255
    1872:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1874:	84 8d       	ldd	r24, Z+28	; 0x1c
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	8f 73       	andi	r24, 0x3F	; 63
    187c:	99 27       	eor	r25, r25
    187e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1880:	a6 89       	ldd	r26, Z+22	; 0x16
    1882:	b7 89       	ldd	r27, Z+23	; 0x17
    1884:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1886:	a0 89       	ldd	r26, Z+16	; 0x10
    1888:	b1 89       	ldd	r27, Z+17	; 0x11
    188a:	8c 91       	ld	r24, X
    188c:	80 64       	ori	r24, 0x40	; 64
    188e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1890:	93 8d       	ldd	r25, Z+27	; 0x1b
    1892:	84 8d       	ldd	r24, Z+28	; 0x1c
    1894:	98 13       	cpse	r25, r24
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1898:	02 88       	ldd	r0, Z+18	; 0x12
    189a:	f3 89       	ldd	r31, Z+19	; 0x13
    189c:	e0 2d       	mov	r30, r0
    189e:	80 81       	ld	r24, Z
    18a0:	8f 7d       	andi	r24, 0xDF	; 223
    18a2:	80 83       	st	Z, r24
    18a4:	08 95       	ret

000018a6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
  _written = true;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    18b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18bc:	98 13       	cpse	r25, r24
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <_ZN14HardwareSerial5writeEh+0x24>
    18c0:	e8 89       	ldd	r30, Y+16	; 0x10
    18c2:	f9 89       	ldd	r31, Y+17	; 0x11
    18c4:	80 81       	ld	r24, Z
    18c6:	85 fd       	sbrc	r24, 5
    18c8:	24 c0       	rjmp	.+72     	; 0x1912 <_ZN14HardwareSerial5writeEh+0x6c>
    18ca:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    18cc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	0f 5f       	subi	r16, 0xFF	; 255
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	0f 73       	andi	r16, 0x3F	; 63
    18d6:	11 27       	eor	r17, r17
    18d8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    18da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18dc:	e8 12       	cpse	r14, r24
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	07 fc       	sbrc	r0, 7
    18e4:	fa cf       	rjmp	.-12     	; 0x18da <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    18e6:	e8 89       	ldd	r30, Y+16	; 0x10
    18e8:	f9 89       	ldd	r31, Y+17	; 0x11
    18ea:	80 81       	ld	r24, Z
    18ec:	85 ff       	sbrs	r24, 5
    18ee:	f5 cf       	rjmp	.-22     	; 0x18da <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    18f0:	ce 01       	movw	r24, r28
    18f2:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18f6:	f1 cf       	rjmp	.-30     	; 0x18da <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    18f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fa:	fe 01       	movw	r30, r28
    18fc:	e8 0f       	add	r30, r24
    18fe:	f1 1d       	adc	r31, r1
    1900:	e3 5a       	subi	r30, 0xA3	; 163
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1906:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1908:	ea 89       	ldd	r30, Y+18	; 0x12
    190a:	fb 89       	ldd	r31, Y+19	; 0x13
    190c:	80 81       	ld	r24, Z
    190e:	80 62       	ori	r24, 0x20	; 32
    1910:	07 c0       	rjmp	.+14     	; 0x1920 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1912:	ee 89       	ldd	r30, Y+22	; 0x16
    1914:	ff 89       	ldd	r31, Y+23	; 0x17
    1916:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1918:	e8 89       	ldd	r30, Y+16	; 0x10
    191a:	f9 89       	ldd	r31, Y+17	; 0x11
    191c:	80 81       	ld	r24, Z
    191e:	80 64       	ori	r24, 0x40	; 64
    1920:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    193a:	88 8d       	ldd	r24, Y+24	; 0x18
    193c:	88 23       	and	r24, r24
    193e:	c9 f0       	breq	.+50     	; 0x1972 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1940:	ea 89       	ldd	r30, Y+18	; 0x12
    1942:	fb 89       	ldd	r31, Y+19	; 0x13
    1944:	80 81       	ld	r24, Z
    1946:	85 fd       	sbrc	r24, 5
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <_ZN14HardwareSerial5flushEv+0x20>
    194a:	a8 89       	ldd	r26, Y+16	; 0x10
    194c:	b9 89       	ldd	r27, Y+17	; 0x11
    194e:	8c 91       	ld	r24, X
    1950:	86 fd       	sbrc	r24, 6
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	07 fc       	sbrc	r0, 7
    1958:	f5 cf       	rjmp	.-22     	; 0x1944 <_ZN14HardwareSerial5flushEv+0x10>
    195a:	80 81       	ld	r24, Z
    195c:	85 ff       	sbrs	r24, 5
    195e:	f2 cf       	rjmp	.-28     	; 0x1944 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1960:	a8 89       	ldd	r26, Y+16	; 0x10
    1962:	b9 89       	ldd	r27, Y+17	; 0x11
    1964:	8c 91       	ld	r24, X
    1966:	85 ff       	sbrs	r24, 5
    1968:	ed cf       	rjmp	.-38     	; 0x1944 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    196a:	ce 01       	movw	r24, r28
    196c:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1970:	e7 cf       	rjmp	.-50     	; 0x1940 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
    1988:	6a 01       	movw	r12, r20
    198a:	7b 01       	movw	r14, r22
    198c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    198e:	e8 89       	ldd	r30, Y+16	; 0x10
    1990:	f9 89       	ldd	r31, Y+17	; 0x11
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1996:	41 15       	cp	r20, r1
    1998:	51 4e       	sbci	r21, 0xE1	; 225
    199a:	61 05       	cpc	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	b1 f0       	breq	.+44     	; 0x19cc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	79 e0       	ldi	r23, 0x09	; 9
    19a4:	8d e3       	ldi	r24, 0x3D	; 61
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a7 01       	movw	r20, r14
    19aa:	96 01       	movw	r18, r12
    19ac:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__udivmodsi4>
    19b0:	da 01       	movw	r26, r20
    19b2:	c9 01       	movw	r24, r18
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	a1 09       	sbc	r26, r1
    19b8:	b1 09       	sbc	r27, r1
    19ba:	b6 95       	lsr	r27
    19bc:	a7 95       	ror	r26
    19be:	97 95       	ror	r25
    19c0:	87 95       	ror	r24
    19c2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19c4:	21 15       	cp	r18, r1
    19c6:	80 e1       	ldi	r24, 0x10	; 16
    19c8:	38 07       	cpc	r19, r24
    19ca:	a8 f0       	brcs	.+42     	; 0x19f6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    19cc:	e8 89       	ldd	r30, Y+16	; 0x10
    19ce:	f9 89       	ldd	r31, Y+17	; 0x11
    19d0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    19d2:	60 e8       	ldi	r22, 0x80	; 128
    19d4:	74 e8       	ldi	r23, 0x84	; 132
    19d6:	8e e1       	ldi	r24, 0x1E	; 30
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a7 01       	movw	r20, r14
    19dc:	96 01       	movw	r18, r12
    19de:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__udivmodsi4>
    19e2:	da 01       	movw	r26, r20
    19e4:	c9 01       	movw	r24, r18
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	a1 09       	sbc	r26, r1
    19ea:	b1 09       	sbc	r27, r1
    19ec:	b6 95       	lsr	r27
    19ee:	a7 95       	ror	r26
    19f0:	97 95       	ror	r25
    19f2:	87 95       	ror	r24
    19f4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    19f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    19f8:	fd 85       	ldd	r31, Y+13	; 0x0d
    19fa:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    19fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    19fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a00:	20 83       	st	Z, r18

  _written = false;
    1a02:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1a04:	ec 89       	ldd	r30, Y+20	; 0x14
    1a06:	fd 89       	ldd	r31, Y+21	; 0x15
    1a08:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1a0a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a0c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 61       	ori	r24, 0x10	; 16
    1a12:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a14:	ea 89       	ldd	r30, Y+18	; 0x12
    1a16:	fb 89       	ldd	r31, Y+19	; 0x13
    1a18:	80 81       	ld	r24, Z
    1a1a:	88 60       	ori	r24, 0x08	; 8
    1a1c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1a1e:	ea 89       	ldd	r30, Y+18	; 0x12
    1a20:	fb 89       	ldd	r31, Y+19	; 0x13
    1a22:	80 81       	ld	r24, Z
    1a24:	80 68       	ori	r24, 0x80	; 128
    1a26:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1a28:	ea 89       	ldd	r30, Y+18	; 0x12
    1a2a:	fb 89       	ldd	r31, Y+19	; 0x13
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 7d       	andi	r24, 0xDF	; 223
    1a30:	80 83       	st	Z, r24
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	08 95       	ret

00001a42 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	2f 93       	push	r18
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1a56:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <Serial+0x10>
    1a5a:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <Serial+0x11>
    1a5e:	80 81       	ld	r24, Z
    1a60:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <Serial+0x16>
    1a64:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <Serial+0x17>
    1a68:	82 fd       	sbrc	r24, 2
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1a6c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1a6e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <Serial+0x19>
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1a76:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <Serial+0x1a>
    1a7a:	82 17       	cp	r24, r18
    1a7c:	51 f0       	breq	.+20     	; 0x1a92 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1a7e:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <Serial+0x19>
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	e7 57       	subi	r30, 0x77	; 119
    1a86:	fc 4f       	sbci	r31, 0xFC	; 252
    1a88:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1a8a:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <Serial+0x19>
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1a90:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	2f 91       	pop	r18
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ac8:	89 e8       	ldi	r24, 0x89	; 137
    1aca:	93 e0       	ldi	r25, 0x03	; 3
    1acc:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1af2:	89 e8       	ldi	r24, 0x89	; 137
    1af4:	93 e0       	ldi	r25, 0x03	; 3
    1af6:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN14HardwareSerial9availableEv>
    1afa:	21 e0       	ldi	r18, 0x01	; 1
    1afc:	89 2b       	or	r24, r25
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <_Z17Serial0_availablev+0x10>
    1b00:	20 e0       	ldi	r18, 0x00	; 0
}
    1b02:	82 2f       	mov	r24, r18
    1b04:	08 95       	ret

00001b06 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b06:	e9 e8       	ldi	r30, 0x89	; 137
    1b08:	f3 e0       	ldi	r31, 0x03	; 3
    1b0a:	13 82       	std	Z+3, r1	; 0x03
    1b0c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b0e:	88 ee       	ldi	r24, 0xE8	; 232
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	84 83       	std	Z+4, r24	; 0x04
    1b18:	95 83       	std	Z+5, r25	; 0x05
    1b1a:	a6 83       	std	Z+6, r26	; 0x06
    1b1c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b1e:	87 e7       	ldi	r24, 0x77	; 119
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
    1b26:	85 ec       	ldi	r24, 0xC5	; 197
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	95 87       	std	Z+13, r25	; 0x0d
    1b2c:	84 87       	std	Z+12, r24	; 0x0c
    1b2e:	84 ec       	ldi	r24, 0xC4	; 196
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	97 87       	std	Z+15, r25	; 0x0f
    1b34:	86 87       	std	Z+14, r24	; 0x0e
    1b36:	80 ec       	ldi	r24, 0xC0	; 192
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	91 8b       	std	Z+17, r25	; 0x11
    1b3c:	80 8b       	std	Z+16, r24	; 0x10
    1b3e:	81 ec       	ldi	r24, 0xC1	; 193
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	93 8b       	std	Z+19, r25	; 0x13
    1b44:	82 8b       	std	Z+18, r24	; 0x12
    1b46:	82 ec       	ldi	r24, 0xC2	; 194
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	95 8b       	std	Z+21, r25	; 0x15
    1b4c:	84 8b       	std	Z+20, r24	; 0x14
    1b4e:	86 ec       	ldi	r24, 0xC6	; 198
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	97 8b       	std	Z+23, r25	; 0x17
    1b54:	86 8b       	std	Z+22, r24	; 0x16
    1b56:	11 8e       	std	Z+25, r1	; 0x19
    1b58:	12 8e       	std	Z+26, r1	; 0x1a
    1b5a:	13 8e       	std	Z+27, r1	; 0x1b
    1b5c:	14 8e       	std	Z+28, r1	; 0x1c
    1b5e:	08 95       	ret

00001b60 <initVariant>:
    1b60:	08 95       	ret

00001b62 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1b62:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <init>

	initVariant();
    1b66:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1b6a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1b6e:	c4 e2       	ldi	r28, 0x24	; 36
    1b70:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1b72:	0e 94 aa 08 	call	0x1154	; 0x1154 <loop>
		if (serialEventRun) serialEventRun();
    1b76:	20 97       	sbiw	r28, 0x00	; 0
    1b78:	e1 f3       	breq	.-8      	; 0x1b72 <main+0x10>
    1b7a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_Z14serialEventRunv>
    1b7e:	f9 cf       	rjmp	.-14     	; 0x1b72 <main+0x10>

00001b80 <_Znwj>:
    1b80:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <malloc>

00001b84 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	6c 01       	movw	r12, r24
    1b96:	7a 01       	movw	r14, r20
    1b98:	8b 01       	movw	r16, r22
    1b9a:	c0 e0       	ldi	r28, 0x00	; 0
    1b9c:	d0 e0       	ldi	r29, 0x00	; 0
    1b9e:	ce 15       	cp	r28, r14
    1ba0:	df 05       	cpc	r29, r15
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <_ZN5Print5writeEPKhj+0x40>
    1ba4:	d8 01       	movw	r26, r16
    1ba6:	6d 91       	ld	r22, X+
    1ba8:	8d 01       	movw	r16, r26
    1baa:	d6 01       	movw	r26, r12
    1bac:	ed 91       	ld	r30, X+
    1bae:	fc 91       	ld	r31, X
    1bb0:	01 90       	ld	r0, Z+
    1bb2:	f0 81       	ld	r31, Z
    1bb4:	e0 2d       	mov	r30, r0
    1bb6:	c6 01       	movw	r24, r12
    1bb8:	09 95       	icall
    1bba:	89 2b       	or	r24, r25
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <_ZN5Print5writeEPKhj+0x3e>
    1bbe:	21 96       	adiw	r28, 0x01	; 1
    1bc0:	ee cf       	rjmp	.-36     	; 0x1b9e <_ZN5Print5writeEPKhj+0x1a>
    1bc2:	7e 01       	movw	r14, r28
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	08 95       	ret

00001bd8 <_ZN5Print5writeEPKc>:
    1bd8:	61 15       	cp	r22, r1
    1bda:	71 05       	cpc	r23, r1
    1bdc:	79 f0       	breq	.+30     	; 0x1bfc <_ZN5Print5writeEPKc+0x24>
    1bde:	fb 01       	movw	r30, r22
    1be0:	01 90       	ld	r0, Z+
    1be2:	00 20       	and	r0, r0
    1be4:	e9 f7       	brne	.-6      	; 0x1be0 <_ZN5Print5writeEPKc+0x8>
    1be6:	31 97       	sbiw	r30, 0x01	; 1
    1be8:	af 01       	movw	r20, r30
    1bea:	46 1b       	sub	r20, r22
    1bec:	57 0b       	sbc	r21, r23
    1bee:	dc 01       	movw	r26, r24
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	02 80       	ldd	r0, Z+2	; 0x02
    1bf6:	f3 81       	ldd	r31, Z+3	; 0x03
    1bf8:	e0 2d       	mov	r30, r0
    1bfa:	09 94       	ijmp
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	08 95       	ret

00001c02 <_ZN5Print5printEPK19__FlashStringHelper>:
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	8c 01       	movw	r16, r24
    1c10:	7b 01       	movw	r14, r22
    1c12:	c0 e0       	ldi	r28, 0x00	; 0
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
    1c16:	f7 01       	movw	r30, r14
    1c18:	ec 0f       	add	r30, r28
    1c1a:	fd 1f       	adc	r31, r29
    1c1c:	64 91       	lpm	r22, Z
    1c1e:	66 23       	and	r22, r22
    1c20:	61 f0       	breq	.+24     	; 0x1c3a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1c22:	d8 01       	movw	r26, r16
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	01 90       	ld	r0, Z+
    1c2a:	f0 81       	ld	r31, Z
    1c2c:	e0 2d       	mov	r30, r0
    1c2e:	c8 01       	movw	r24, r16
    1c30:	09 95       	icall
    1c32:	89 2b       	or	r24, r25
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1c36:	21 96       	adiw	r28, 0x01	; 1
    1c38:	ee cf       	rjmp	.-36     	; 0x1c16 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	08 95       	ret

00001c4a <_ZN5Print5printEPKc>:
    1c4a:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <_ZN5Print5writeEPKc>

00001c4e <_ZN5Print5printEc>:
    1c4e:	dc 01       	movw	r26, r24
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	01 90       	ld	r0, Z+
    1c56:	f0 81       	ld	r31, Z
    1c58:	e0 2d       	mov	r30, r0
    1c5a:	09 94       	ijmp

00001c5c <_ZN5Print7printlnEv>:
    1c5c:	63 e8       	ldi	r22, 0x83	; 131
    1c5e:	71 e0       	ldi	r23, 0x01	; 1
    1c60:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <_ZN5Print5writeEPKc>

00001c64 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	ec 01       	movw	r28, r24
    1c6e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <_ZN5Print5printEPK19__FlashStringHelper>
    1c72:	8c 01       	movw	r16, r24
    1c74:	ce 01       	movw	r24, r28
    1c76:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN5Print7printlnEv>
    1c7a:	80 0f       	add	r24, r16
    1c7c:	91 1f       	adc	r25, r17
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	08 95       	ret

00001c88 <_ZN5Print7printlnEPKc>:
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	ec 01       	movw	r28, r24
    1c92:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print5writeEPKc>
    1c96:	8c 01       	movw	r16, r24
    1c98:	ce 01       	movw	r24, r28
    1c9a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN5Print7printlnEv>
    1c9e:	80 0f       	add	r24, r16
    1ca0:	91 1f       	adc	r25, r17
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	08 95       	ret

00001cac <_ZN5Print7printlnEc>:
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5Print5printEc>
    1cba:	8c 01       	movw	r16, r24
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN5Print7printlnEv>
    1cc2:	80 0f       	add	r24, r16
    1cc4:	91 1f       	adc	r25, r17
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	08 95       	ret

00001cd0 <_ZN5Print11printNumberEmh>:
    1cd0:	8f 92       	push	r8
    1cd2:	9f 92       	push	r9
    1cd4:	af 92       	push	r10
    1cd6:	bf 92       	push	r11
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	a1 97       	sbiw	r28, 0x21	; 33
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	fa 01       	movw	r30, r20
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	19 a2       	std	Y+33, r1	; 0x21
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <_ZN5Print11printNumberEmh+0x32>
    1d00:	2a e0       	ldi	r18, 0x0A	; 10
    1d02:	8e 01       	movw	r16, r28
    1d04:	0f 5d       	subi	r16, 0xDF	; 223
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	82 2e       	mov	r8, r18
    1d0a:	91 2c       	mov	r9, r1
    1d0c:	a1 2c       	mov	r10, r1
    1d0e:	b1 2c       	mov	r11, r1
    1d10:	bf 01       	movw	r22, r30
    1d12:	a5 01       	movw	r20, r10
    1d14:	94 01       	movw	r18, r8
    1d16:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__udivmodsi4>
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	01 50       	subi	r16, 0x01	; 1
    1d20:	11 09       	sbc	r17, r1
    1d22:	6a 30       	cpi	r22, 0x0A	; 10
    1d24:	10 f4       	brcc	.+4      	; 0x1d2a <_ZN5Print11printNumberEmh+0x5a>
    1d26:	60 5d       	subi	r22, 0xD0	; 208
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <_ZN5Print11printNumberEmh+0x5c>
    1d2a:	69 5c       	subi	r22, 0xC9	; 201
    1d2c:	d8 01       	movw	r26, r16
    1d2e:	6c 93       	st	X, r22
    1d30:	23 2b       	or	r18, r19
    1d32:	24 2b       	or	r18, r20
    1d34:	25 2b       	or	r18, r21
    1d36:	61 f7       	brne	.-40     	; 0x1d10 <_ZN5Print11printNumberEmh+0x40>
    1d38:	b8 01       	movw	r22, r16
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5Print5writeEPKc>
    1d40:	a1 96       	adiw	r28, 0x21	; 33
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	bf 90       	pop	r11
    1d5a:	af 90       	pop	r10
    1d5c:	9f 90       	pop	r9
    1d5e:	8f 90       	pop	r8
    1d60:	08 95       	ret

00001d62 <_ZN5Print5printEmi>:
    1d62:	21 15       	cp	r18, r1
    1d64:	31 05       	cpc	r19, r1
    1d66:	41 f4       	brne	.+16     	; 0x1d78 <_ZN5Print5printEmi+0x16>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	ed 91       	ld	r30, X+
    1d6c:	fc 91       	ld	r31, X
    1d6e:	01 90       	ld	r0, Z+
    1d70:	f0 81       	ld	r31, Z
    1d72:	e0 2d       	mov	r30, r0
    1d74:	64 2f       	mov	r22, r20
    1d76:	09 94       	ijmp
    1d78:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <_ZN5Print11printNumberEmh>

00001d7c <_ZN5Print5printEhi>:
    1d7c:	9a 01       	movw	r18, r20
    1d7e:	46 2f       	mov	r20, r22
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <_ZN5Print5printEmi>

00001d8a <_ZN5Print7printlnEhi>:
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	ec 01       	movw	r28, r24
    1d94:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN5Print5printEhi>
    1d98:	8c 01       	movw	r16, r24
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN5Print7printlnEv>
    1da0:	80 0f       	add	r24, r16
    1da2:	91 1f       	adc	r25, r17
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <_ZN5Print5printEji>:
    1dae:	9a 01       	movw	r18, r20
    1db0:	ab 01       	movw	r20, r22
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <_ZN5Print5printEmi>

00001dba <_ZN5Print7printlnEji>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print5printEji>
    1dc8:	8c 01       	movw	r16, r24
    1dca:	ce 01       	movw	r24, r28
    1dcc:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN5Print7printlnEv>
    1dd0:	80 0f       	add	r24, r16
    1dd2:	91 1f       	adc	r25, r17
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
  if (base == 0) {
    1dee:	21 15       	cp	r18, r1
    1df0:	31 05       	cpc	r19, r1
    1df2:	81 f4       	brne	.+32     	; 0x1e14 <_ZN5Print5printEli+0x36>
    return write(n);
    1df4:	dc 01       	movw	r26, r24
    1df6:	ed 91       	ld	r30, X+
    1df8:	fc 91       	ld	r31, X
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	f0 81       	ld	r31, Z
    1dfe:	e0 2d       	mov	r30, r0
    1e00:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1e12:	09 94       	ijmp
  } else if (base == 10) {
    1e14:	2a 30       	cpi	r18, 0x0A	; 10
    1e16:	31 05       	cpc	r19, r1
    1e18:	01 f5       	brne	.+64     	; 0x1e5a <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1e1a:	77 ff       	sbrs	r23, 7
    1e1c:	1d c0       	rjmp	.+58     	; 0x1e58 <_ZN5Print5printEli+0x7a>
    1e1e:	6a 01       	movw	r12, r20
    1e20:	7b 01       	movw	r14, r22
    1e22:	ec 01       	movw	r28, r24
      int t = print('-');
    1e24:	6d e2       	ldi	r22, 0x2D	; 45
    1e26:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5Print5printEc>
    1e2a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1e2c:	44 27       	eor	r20, r20
    1e2e:	55 27       	eor	r21, r21
    1e30:	ba 01       	movw	r22, r20
    1e32:	4c 19       	sub	r20, r12
    1e34:	5d 09       	sbc	r21, r13
    1e36:	6e 09       	sbc	r22, r14
    1e38:	7f 09       	sbc	r23, r15
    1e3a:	2a e0       	ldi	r18, 0x0A	; 10
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN5Print11printNumberEmh>
    1e42:	80 0f       	add	r24, r16
    1e44:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1e6a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <_ZN5Print11printNumberEmh>

00001e6e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1e6e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1e70:	ab 01       	movw	r20, r22
    1e72:	77 0f       	add	r23, r23
    1e74:	66 0b       	sbc	r22, r22
    1e76:	77 0b       	sbc	r23, r23
    1e78:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <_ZN5Print5printEli>

00001e7c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1e86:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <_ZN5Print5printEii>
    1e8a:	8c 01       	movw	r16, r24
  n += println();
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <_ZN5Print7printlnEv>
  return n;
}
    1e92:	80 0f       	add	r24, r16
    1e94:	91 1f       	adc	r25, r17
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	08 95       	ret

00001ea0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	8f 93       	push	r24
    1eb0:	9f 93       	push	r25
    1eb2:	af 93       	push	r26
    1eb4:	bf 93       	push	r27
    1eb6:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_millis>
    1eba:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_millis+0x1>
    1ebe:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_millis+0x2>
    1ec2:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_millis+0x3>
    1ec6:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <timer0_fract>
    1eca:	23 e0       	ldi	r18, 0x03	; 3
    1ecc:	23 0f       	add	r18, r19
    1ece:	2d 37       	cpi	r18, 0x7D	; 125
    1ed0:	20 f4       	brcc	.+8      	; 0x1eda <__vector_16+0x3a>
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	b1 1d       	adc	r27, r1
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <__vector_16+0x44>
    1eda:	26 e8       	ldi	r18, 0x86	; 134
    1edc:	23 0f       	add	r18, r19
    1ede:	02 96       	adiw	r24, 0x02	; 2
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	b1 1d       	adc	r27, r1
    1ee4:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <timer0_fract>
    1ee8:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <timer0_millis>
    1eec:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <timer0_millis+0x1>
    1ef0:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <timer0_millis+0x2>
    1ef4:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <timer0_millis+0x3>
    1ef8:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <timer0_overflow_count>
    1efc:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <timer0_overflow_count+0x1>
    1f00:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <timer0_overflow_count+0x2>
    1f04:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <timer0_overflow_count+0x3>
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	b1 1d       	adc	r27, r1
    1f0e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <timer0_overflow_count>
    1f12:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <timer0_overflow_count+0x1>
    1f16:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <timer0_overflow_count+0x2>
    1f1a:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <timer0_overflow_count+0x3>
    1f1e:	bf 91       	pop	r27
    1f20:	af 91       	pop	r26
    1f22:	9f 91       	pop	r25
    1f24:	8f 91       	pop	r24
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <micros>:
    1f34:	3f b7       	in	r19, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <timer0_overflow_count>
    1f3c:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <timer0_overflow_count+0x1>
    1f40:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <timer0_overflow_count+0x2>
    1f44:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <timer0_overflow_count+0x3>
    1f48:	26 b5       	in	r18, 0x26	; 38
    1f4a:	a8 9b       	sbis	0x15, 0	; 21
    1f4c:	05 c0       	rjmp	.+10     	; 0x1f58 <micros+0x24>
    1f4e:	2f 3f       	cpi	r18, 0xFF	; 255
    1f50:	19 f0       	breq	.+6      	; 0x1f58 <micros+0x24>
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	a1 1d       	adc	r26, r1
    1f56:	b1 1d       	adc	r27, r1
    1f58:	3f bf       	out	0x3f, r19	; 63
    1f5a:	ba 2f       	mov	r27, r26
    1f5c:	a9 2f       	mov	r26, r25
    1f5e:	98 2f       	mov	r25, r24
    1f60:	88 27       	eor	r24, r24
    1f62:	82 0f       	add	r24, r18
    1f64:	91 1d       	adc	r25, r1
    1f66:	a1 1d       	adc	r26, r1
    1f68:	b1 1d       	adc	r27, r1
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	42 e0       	ldi	r20, 0x02	; 2
    1f70:	66 0f       	add	r22, r22
    1f72:	77 1f       	adc	r23, r23
    1f74:	88 1f       	adc	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	4a 95       	dec	r20
    1f7a:	d1 f7       	brne	.-12     	; 0x1f70 <micros+0x3c>
    1f7c:	08 95       	ret

00001f7e <delay>:
    1f7e:	8f 92       	push	r8
    1f80:	9f 92       	push	r9
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	cf 92       	push	r12
    1f88:	df 92       	push	r13
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	6b 01       	movw	r12, r22
    1f90:	7c 01       	movw	r14, r24
    1f92:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <micros>
    1f96:	4b 01       	movw	r8, r22
    1f98:	5c 01       	movw	r10, r24
    1f9a:	c1 14       	cp	r12, r1
    1f9c:	d1 04       	cpc	r13, r1
    1f9e:	e1 04       	cpc	r14, r1
    1fa0:	f1 04       	cpc	r15, r1
    1fa2:	01 f1       	breq	.+64     	; 0x1fe4 <delay+0x66>
    1fa4:	0e 94 4d 13 	call	0x269a	; 0x269a <yield>
    1fa8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <micros>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	88 19       	sub	r24, r8
    1fb2:	99 09       	sbc	r25, r9
    1fb4:	aa 09       	sbc	r26, r10
    1fb6:	bb 09       	sbc	r27, r11
    1fb8:	88 3e       	cpi	r24, 0xE8	; 232
    1fba:	93 40       	sbci	r25, 0x03	; 3
    1fbc:	a1 05       	cpc	r26, r1
    1fbe:	b1 05       	cpc	r27, r1
    1fc0:	60 f3       	brcs	.-40     	; 0x1f9a <delay+0x1c>
    1fc2:	21 e0       	ldi	r18, 0x01	; 1
    1fc4:	c2 1a       	sub	r12, r18
    1fc6:	d1 08       	sbc	r13, r1
    1fc8:	e1 08       	sbc	r14, r1
    1fca:	f1 08       	sbc	r15, r1
    1fcc:	88 ee       	ldi	r24, 0xE8	; 232
    1fce:	88 0e       	add	r8, r24
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	98 1e       	adc	r9, r24
    1fd4:	a1 1c       	adc	r10, r1
    1fd6:	b1 1c       	adc	r11, r1
    1fd8:	c1 14       	cp	r12, r1
    1fda:	d1 04       	cpc	r13, r1
    1fdc:	e1 04       	cpc	r14, r1
    1fde:	f1 04       	cpc	r15, r1
    1fe0:	19 f7       	brne	.-58     	; 0x1fa8 <delay+0x2a>
    1fe2:	db cf       	rjmp	.-74     	; 0x1f9a <delay+0x1c>
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	cf 90       	pop	r12
    1fec:	bf 90       	pop	r11
    1fee:	af 90       	pop	r10
    1ff0:	9f 90       	pop	r9
    1ff2:	8f 90       	pop	r8
    1ff4:	08 95       	ret

00001ff6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ff6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1ff8:	84 b5       	in	r24, 0x24	; 36
    1ffa:	82 60       	ori	r24, 0x02	; 2
    1ffc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1ffe:	84 b5       	in	r24, 0x24	; 36
    2000:	81 60       	ori	r24, 0x01	; 1
    2002:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2004:	85 b5       	in	r24, 0x25	; 37
    2006:	82 60       	ori	r24, 0x02	; 2
    2008:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    200a:	85 b5       	in	r24, 0x25	; 37
    200c:	81 60       	ori	r24, 0x01	; 1
    200e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2010:	ee e6       	ldi	r30, 0x6E	; 110
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	81 60       	ori	r24, 0x01	; 1
    2018:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    201a:	e1 e8       	ldi	r30, 0x81	; 129
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2020:	80 81       	ld	r24, Z
    2022:	82 60       	ori	r24, 0x02	; 2
    2024:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2026:	80 81       	ld	r24, Z
    2028:	81 60       	ori	r24, 0x01	; 1
    202a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    202c:	e0 e8       	ldi	r30, 0x80	; 128
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	81 60       	ori	r24, 0x01	; 1
    2034:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2036:	e1 eb       	ldi	r30, 0xB1	; 177
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	84 60       	ori	r24, 0x04	; 4
    203e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2040:	e0 eb       	ldi	r30, 0xB0	; 176
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	81 60       	ori	r24, 0x01	; 1
    2048:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    204a:	ea e7       	ldi	r30, 0x7A	; 122
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	84 60       	ori	r24, 0x04	; 4
    2052:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2054:	80 81       	ld	r24, Z
    2056:	82 60       	ori	r24, 0x02	; 2
    2058:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    205a:	80 81       	ld	r24, Z
    205c:	81 60       	ori	r24, 0x01	; 1
    205e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2060:	80 81       	ld	r24, Z
    2062:	80 68       	ori	r24, 0x80	; 128
    2064:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2066:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    206a:	08 95       	ret

0000206c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    206c:	8e 30       	cpi	r24, 0x0E	; 14
    206e:	08 f0       	brcs	.+2      	; 0x2072 <analogRead+0x6>
    2070:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2072:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    2076:	90 e4       	ldi	r25, 0x40	; 64
    2078:	29 9f       	mul	r18, r25
    207a:	90 01       	movw	r18, r0
    207c:	11 24       	eor	r1, r1
    207e:	87 70       	andi	r24, 0x07	; 7
    2080:	82 2b       	or	r24, r18
    2082:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2086:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    208a:	80 64       	ori	r24, 0x40	; 64
    208c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2090:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2094:	86 fd       	sbrc	r24, 6
    2096:	fc cf       	rjmp	.-8      	; 0x2090 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2098:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    209c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    20a0:	90 e0       	ldi	r25, 0x00	; 0
}
    20a2:	92 2b       	or	r25, r18
    20a4:	08 95       	ret

000020a6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	81 f0       	breq	.+32     	; 0x20ca <turnOffPWM+0x24>
    20aa:	28 f4       	brcc	.+10     	; 0x20b6 <turnOffPWM+0x10>
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	99 f0       	breq	.+38     	; 0x20d6 <turnOffPWM+0x30>
    20b0:	82 30       	cpi	r24, 0x02	; 2
    20b2:	a1 f0       	breq	.+40     	; 0x20dc <turnOffPWM+0x36>
    20b4:	08 95       	ret
    20b6:	87 30       	cpi	r24, 0x07	; 7
    20b8:	a9 f0       	breq	.+42     	; 0x20e4 <turnOffPWM+0x3e>
    20ba:	88 30       	cpi	r24, 0x08	; 8
    20bc:	b9 f0       	breq	.+46     	; 0x20ec <turnOffPWM+0x46>
    20be:	84 30       	cpi	r24, 0x04	; 4
    20c0:	d1 f4       	brne	.+52     	; 0x20f6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    20c6:	8f 7d       	andi	r24, 0xDF	; 223
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    20ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    20ce:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    20d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    20d4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    20d6:	84 b5       	in	r24, 0x24	; 36
    20d8:	8f 77       	andi	r24, 0x7F	; 127
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    20dc:	84 b5       	in	r24, 0x24	; 36
    20de:	8f 7d       	andi	r24, 0xDF	; 223
    20e0:	84 bd       	out	0x24, r24	; 36
    20e2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    20e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    20e8:	8f 77       	andi	r24, 0x7F	; 127
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    20ec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    20f0:	8f 7d       	andi	r24, 0xDF	; 223
    20f2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    20f6:	08 95       	ret

000020f8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	fc 01       	movw	r30, r24
    2100:	ef 5c       	subi	r30, 0xCF	; 207
    2102:	fc 4f       	sbci	r31, 0xFC	; 252
    2104:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2106:	fc 01       	movw	r30, r24
    2108:	eb 5b       	subi	r30, 0xBB	; 187
    210a:	fc 4f       	sbci	r31, 0xFC	; 252
    210c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    210e:	88 23       	and	r24, r24
    2110:	61 f1       	breq	.+88     	; 0x216a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	fc 01       	movw	r30, r24
    211a:	e3 59       	subi	r30, 0x93	; 147
    211c:	fc 4f       	sbci	r31, 0xFC	; 252
    211e:	c5 91       	lpm	r28, Z+
    2120:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2122:	fc 01       	movw	r30, r24
    2124:	ed 59       	subi	r30, 0x9D	; 157
    2126:	fc 4f       	sbci	r31, 0xFC	; 252
    2128:	a5 91       	lpm	r26, Z+
    212a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    212c:	61 11       	cpse	r22, r1
    212e:	09 c0       	rjmp	.+18     	; 0x2142 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2130:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2132:	f8 94       	cli
		*reg &= ~bit;
    2134:	88 81       	ld	r24, Y
    2136:	20 95       	com	r18
    2138:	82 23       	and	r24, r18
    213a:	88 83       	st	Y, r24
		*out &= ~bit;
    213c:	ec 91       	ld	r30, X
    213e:	2e 23       	and	r18, r30
    2140:	0b c0       	rjmp	.+22     	; 0x2158 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2142:	62 30       	cpi	r22, 0x02	; 2
    2144:	61 f4       	brne	.+24     	; 0x215e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2146:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2148:	f8 94       	cli
		*reg &= ~bit;
    214a:	88 81       	ld	r24, Y
    214c:	32 2f       	mov	r19, r18
    214e:	30 95       	com	r19
    2150:	83 23       	and	r24, r19
    2152:	88 83       	st	Y, r24
		*out |= bit;
    2154:	ec 91       	ld	r30, X
    2156:	2e 2b       	or	r18, r30
    2158:	2c 93       	st	X, r18
		SREG = oldSREG;
    215a:	9f bf       	out	0x3f, r25	; 63
    215c:	06 c0       	rjmp	.+12     	; 0x216a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    215e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2160:	f8 94       	cli
		*reg |= bit;
    2162:	e8 81       	ld	r30, Y
    2164:	2e 2b       	or	r18, r30
    2166:	28 83       	st	Y, r18
		SREG = oldSREG;
    2168:	8f bf       	out	0x3f, r24	; 63
	}
}
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	f9 01       	movw	r30, r18
    217c:	e3 5e       	subi	r30, 0xE3	; 227
    217e:	fc 4f       	sbci	r31, 0xFC	; 252
    2180:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2182:	f9 01       	movw	r30, r18
    2184:	ef 5c       	subi	r30, 0xCF	; 207
    2186:	fc 4f       	sbci	r31, 0xFC	; 252
    2188:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    218a:	f9 01       	movw	r30, r18
    218c:	eb 5b       	subi	r30, 0xBB	; 187
    218e:	fc 4f       	sbci	r31, 0xFC	; 252
    2190:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2192:	cc 23       	and	r28, r28
    2194:	c1 f0       	breq	.+48     	; 0x21c6 <digitalWrite+0x56>
    2196:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2198:	81 11       	cpse	r24, r1
    219a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <turnOffPWM>

	out = portOutputRegister(port);
    219e:	ec 2f       	mov	r30, r28
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	ed 59       	subi	r30, 0x9D	; 157
    21a8:	fc 4f       	sbci	r31, 0xFC	; 252
    21aa:	a5 91       	lpm	r26, Z+
    21ac:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    21ae:	9f b7       	in	r25, 0x3f	; 63
	cli();
    21b0:	f8 94       	cli

	if (val == LOW) {
    21b2:	11 11       	cpse	r17, r1
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <digitalWrite+0x4e>
		*out &= ~bit;
    21b6:	8c 91       	ld	r24, X
    21b8:	d0 95       	com	r29
    21ba:	d8 23       	and	r29, r24
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    21be:	ec 91       	ld	r30, X
    21c0:	de 2b       	or	r29, r30
    21c2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    21c4:	9f bf       	out	0x3f, r25	; 63
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	08 95       	ret

000021ce <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    21ce:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    21d2:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    21d6:	28 17       	cp	r18, r24
    21d8:	39 07       	cpc	r19, r25
    21da:	b9 f4       	brne	.+46     	; 0x220a <_ZN14SoftwareSerial4readEv+0x3c>
    21dc:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    21e0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    21e4:	98 17       	cp	r25, r24
    21e6:	89 f0       	breq	.+34     	; 0x220a <_ZN14SoftwareSerial4readEv+0x3c>
    21e8:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	ef 5c       	subi	r30, 0xCF	; 207
    21f0:	fb 4f       	sbci	r31, 0xFB	; 251
    21f2:	80 81       	ld	r24, Z
    21f4:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	2f 73       	andi	r18, 0x3F	; 63
    2200:	33 27       	eor	r19, r19
    2202:	20 93 2f 04 	sts	0x042F, r18	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	08 95       	ret
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	9f ef       	ldi	r25, 0xFF	; 255
    220e:	08 95       	ret

00002210 <_ZN14SoftwareSerial5writeEh>:
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	dc 01       	movw	r26, r24
    2218:	5c 96       	adiw	r26, 0x1c	; 28
    221a:	8d 91       	ld	r24, X+
    221c:	9c 91       	ld	r25, X
    221e:	5d 97       	sbiw	r26, 0x1d	; 29
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	39 f4       	brne	.+14     	; 0x2232 <_ZN14SoftwareSerial5writeEh+0x22>
    2224:	21 e0       	ldi	r18, 0x01	; 1
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	13 96       	adiw	r26, 0x03	; 3
    222a:	3c 93       	st	X, r19
    222c:	2e 93       	st	-X, r18
    222e:	12 97       	sbiw	r26, 0x02	; 2
    2230:	3b c0       	rjmp	.+118    	; 0x22a8 <_ZN14SoftwareSerial5writeEh+0x98>
    2232:	51 96       	adiw	r26, 0x11	; 17
    2234:	ed 91       	ld	r30, X+
    2236:	fc 91       	ld	r31, X
    2238:	52 97       	sbiw	r26, 0x12	; 18
    223a:	50 96       	adiw	r26, 0x10	; 16
    223c:	2c 91       	ld	r18, X
    223e:	50 97       	sbiw	r26, 0x10	; 16
    2240:	32 2f       	mov	r19, r18
    2242:	30 95       	com	r19
    2244:	1f b7       	in	r17, 0x3f	; 63
    2246:	5e 96       	adiw	r26, 0x1e	; 30
    2248:	4c 91       	ld	r20, X
    224a:	5e 97       	sbiw	r26, 0x1e	; 30
    224c:	74 2f       	mov	r23, r20
    224e:	72 70       	andi	r23, 0x02	; 2
    2250:	41 fd       	sbrc	r20, 1
    2252:	60 95       	com	r22
    2254:	f8 94       	cli
    2256:	40 81       	ld	r20, Z
    2258:	77 23       	and	r23, r23
    225a:	11 f0       	breq	.+4      	; 0x2260 <_ZN14SoftwareSerial5writeEh+0x50>
    225c:	42 2b       	or	r20, r18
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <_ZN14SoftwareSerial5writeEh+0x52>
    2260:	43 23       	and	r20, r19
    2262:	40 83       	st	Z, r20
    2264:	ec 01       	movw	r28, r24
    2266:	21 97       	sbiw	r28, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <_ZN14SoftwareSerial5writeEh+0x56>
    226a:	48 e0       	ldi	r20, 0x08	; 8
    226c:	50 81       	ld	r21, Z
    226e:	60 ff       	sbrs	r22, 0
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <_ZN14SoftwareSerial5writeEh+0x66>
    2272:	52 2b       	or	r21, r18
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <_ZN14SoftwareSerial5writeEh+0x68>
    2276:	53 23       	and	r21, r19
    2278:	50 83       	st	Z, r21
    227a:	ec 01       	movw	r28, r24
    227c:	21 97       	sbiw	r28, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <_ZN14SoftwareSerial5writeEh+0x6c>
    2280:	66 95       	lsr	r22
    2282:	41 50       	subi	r20, 0x01	; 1
    2284:	99 f7       	brne	.-26     	; 0x226c <_ZN14SoftwareSerial5writeEh+0x5c>
    2286:	80 81       	ld	r24, Z
    2288:	77 23       	and	r23, r23
    228a:	19 f0       	breq	.+6      	; 0x2292 <_ZN14SoftwareSerial5writeEh+0x82>
    228c:	83 23       	and	r24, r19
    228e:	80 83       	st	Z, r24
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <_ZN14SoftwareSerial5writeEh+0x86>
    2292:	28 2b       	or	r18, r24
    2294:	20 83       	st	Z, r18
    2296:	1f bf       	out	0x3f, r17	; 63
    2298:	5c 96       	adiw	r26, 0x1c	; 28
    229a:	8d 91       	ld	r24, X+
    229c:	9c 91       	ld	r25, X
    229e:	5d 97       	sbiw	r26, 0x1d	; 29
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <_ZN14SoftwareSerial5writeEh+0x90>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	08 95       	ret

000022b0 <_ZN14SoftwareSerial5flushEv>:
    22b0:	08 95       	ret

000022b2 <_ZN14SoftwareSerial4peekEv>:
    22b2:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    22b6:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    22ba:	28 17       	cp	r18, r24
    22bc:	39 07       	cpc	r19, r25
    22be:	71 f4       	brne	.+28     	; 0x22dc <_ZN14SoftwareSerial4peekEv+0x2a>
    22c0:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    22c4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    22c8:	98 17       	cp	r25, r24
    22ca:	41 f0       	breq	.+16     	; 0x22dc <_ZN14SoftwareSerial4peekEv+0x2a>
    22cc:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	ef 5c       	subi	r30, 0xCF	; 207
    22d4:	fb 4f       	sbci	r31, 0xFB	; 251
    22d6:	80 81       	ld	r24, Z
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	08 95       	ret
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	9f ef       	ldi	r25, 0xFF	; 255
    22e0:	08 95       	ret

000022e2 <_ZN14SoftwareSerial9availableEv>:
    22e2:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    22e6:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    22ea:	28 17       	cp	r18, r24
    22ec:	39 07       	cpc	r19, r25
    22ee:	71 f4       	brne	.+28     	; 0x230c <_ZN14SoftwareSerial9availableEv+0x2a>
    22f0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    22f4:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	80 5c       	subi	r24, 0xC0	; 192
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	82 1b       	sub	r24, r18
    2300:	91 09       	sbc	r25, r1
    2302:	60 e4       	ldi	r22, 0x40	; 64
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__divmodhi4>
    230a:	08 95       	ret
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	08 95       	ret

00002312 <_ZN14SoftwareSerial13stopListeningEv>:
    2312:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    2316:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    231a:	e8 17       	cp	r30, r24
    231c:	f9 07       	cpc	r31, r25
    231e:	69 f4       	brne	.+26     	; 0x233a <_ZN14SoftwareSerial13stopListeningEv+0x28>
    2320:	a3 89       	ldd	r26, Z+19	; 0x13
    2322:	b4 89       	ldd	r27, Z+20	; 0x14
    2324:	9c 91       	ld	r25, X
    2326:	85 89       	ldd	r24, Z+21	; 0x15
    2328:	80 95       	com	r24
    232a:	89 23       	and	r24, r25
    232c:	8c 93       	st	X, r24
    232e:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2332:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	08 95       	ret
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	08 95       	ret

0000233e <_ZN14SoftwareSerial6listenEv>:
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	ec 01       	movw	r28, r24
    2344:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2346:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2348:	89 2b       	or	r24, r25
    234a:	f1 f0       	breq	.+60     	; 0x2388 <_ZN14SoftwareSerial6listenEv+0x4a>
    234c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    2350:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2354:	c8 17       	cp	r28, r24
    2356:	d9 07       	cpc	r29, r25
    2358:	b9 f0       	breq	.+46     	; 0x2388 <_ZN14SoftwareSerial6listenEv+0x4a>
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	11 f0       	breq	.+4      	; 0x2362 <_ZN14SoftwareSerial6listenEv+0x24>
    235e:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN14SoftwareSerial13stopListeningEv>
    2362:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2364:	8e 7f       	andi	r24, 0xFE	; 254
    2366:	8e 8f       	std	Y+30, r24	; 0x1e
    2368:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    236c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2370:	d0 93 72 04 	sts	0x0472, r29	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    2374:	c0 93 71 04 	sts	0x0471, r28	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    2378:	eb 89       	ldd	r30, Y+19	; 0x13
    237a:	fc 89       	ldd	r31, Y+20	; 0x14
    237c:	90 81       	ld	r25, Z
    237e:	8d 89       	ldd	r24, Y+21	; 0x15
    2380:	89 2b       	or	r24, r25
    2382:	80 83       	st	Z, r24
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	01 c0       	rjmp	.+2      	; 0x238a <_ZN14SoftwareSerial6listenEv+0x4c>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <__vector_3>:
    2390:	1f 92       	push	r1
    2392:	0f 92       	push	r0
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	0f 92       	push	r0
    2398:	11 24       	eor	r1, r1
    239a:	2f 93       	push	r18
    239c:	3f 93       	push	r19
    239e:	4f 93       	push	r20
    23a0:	5f 93       	push	r21
    23a2:	6f 93       	push	r22
    23a4:	7f 93       	push	r23
    23a6:	8f 93       	push	r24
    23a8:	9f 93       	push	r25
    23aa:	af 93       	push	r26
    23ac:	bf 93       	push	r27
    23ae:	ef 93       	push	r30
    23b0:	ff 93       	push	r31
    23b2:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <_ZN14SoftwareSerial13active_objectE>
    23b6:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <_ZN14SoftwareSerial13active_objectE+0x1>
    23ba:	30 97       	sbiw	r30, 0x00	; 0
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__vector_3+0x30>
    23be:	51 c0       	rjmp	.+162    	; 0x2462 <__vector_3+0xd2>
    23c0:	96 8d       	ldd	r25, Z+30	; 0x1e
    23c2:	a6 85       	ldd	r26, Z+14	; 0x0e
    23c4:	b7 85       	ldd	r27, Z+15	; 0x0f
    23c6:	85 85       	ldd	r24, Z+13	; 0x0d
    23c8:	91 ff       	sbrs	r25, 1
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <__vector_3+0x44>
    23cc:	9c 91       	ld	r25, X
    23ce:	89 23       	and	r24, r25
    23d0:	29 f4       	brne	.+10     	; 0x23dc <__vector_3+0x4c>
    23d2:	47 c0       	rjmp	.+142    	; 0x2462 <__vector_3+0xd2>
    23d4:	9c 91       	ld	r25, X
    23d6:	89 23       	and	r24, r25
    23d8:	09 f0       	breq	.+2      	; 0x23dc <__vector_3+0x4c>
    23da:	43 c0       	rjmp	.+134    	; 0x2462 <__vector_3+0xd2>
    23dc:	a3 89       	ldd	r26, Z+19	; 0x13
    23de:	b4 89       	ldd	r27, Z+20	; 0x14
    23e0:	9c 91       	ld	r25, X
    23e2:	85 89       	ldd	r24, Z+21	; 0x15
    23e4:	80 95       	com	r24
    23e6:	89 23       	and	r24, r25
    23e8:	8c 93       	st	X, r24
    23ea:	86 89       	ldd	r24, Z+22	; 0x16
    23ec:	97 89       	ldd	r25, Z+23	; 0x17
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <__vector_3+0x5e>
    23f2:	60 8d       	ldd	r22, Z+24	; 0x18
    23f4:	71 8d       	ldd	r23, Z+25	; 0x19
    23f6:	a6 85       	ldd	r26, Z+14	; 0x0e
    23f8:	b7 85       	ldd	r27, Z+15	; 0x0f
    23fa:	55 85       	ldd	r21, Z+13	; 0x0d
    23fc:	38 e0       	ldi	r19, 0x08	; 8
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	cb 01       	movw	r24, r22
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <__vector_3+0x72>
    2406:	82 2f       	mov	r24, r18
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	95 95       	asr	r25
    240c:	87 95       	ror	r24
    240e:	28 2f       	mov	r18, r24
    2410:	4c 91       	ld	r20, X
    2412:	45 23       	and	r20, r21
    2414:	09 f0       	breq	.+2      	; 0x2418 <__vector_3+0x88>
    2416:	20 68       	ori	r18, 0x80	; 128
    2418:	31 50       	subi	r19, 0x01	; 1
    241a:	91 f7       	brne	.-28     	; 0x2400 <__vector_3+0x70>
    241c:	86 8d       	ldd	r24, Z+30	; 0x1e
    241e:	81 fd       	sbrc	r24, 1
    2420:	20 95       	com	r18
    2422:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	01 96       	adiw	r24, 0x01	; 1
    242a:	8f 73       	andi	r24, 0x3F	; 63
    242c:	99 27       	eor	r25, r25
    242e:	30 91 2f 04 	lds	r19, 0x042F	; 0x80042f <_ZN14SoftwareSerial20_receive_buffer_headE>
    2432:	38 17       	cp	r19, r24
    2434:	49 f0       	breq	.+18     	; 0x2448 <__vector_3+0xb8>
    2436:	a0 91 30 04 	lds	r26, 0x0430	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	af 5c       	subi	r26, 0xCF	; 207
    243e:	bb 4f       	sbci	r27, 0xFB	; 251
    2440:	2c 93       	st	X, r18
    2442:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2446:	03 c0       	rjmp	.+6      	; 0x244e <__vector_3+0xbe>
    2448:	86 8d       	ldd	r24, Z+30	; 0x1e
    244a:	81 60       	ori	r24, 0x01	; 1
    244c:	86 8f       	std	Z+30, r24	; 0x1e
    244e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2450:	93 8d       	ldd	r25, Z+27	; 0x1b
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <__vector_3+0xc2>
    2456:	a3 89       	ldd	r26, Z+19	; 0x13
    2458:	b4 89       	ldd	r27, Z+20	; 0x14
    245a:	9c 91       	ld	r25, X
    245c:	85 89       	ldd	r24, Z+21	; 0x15
    245e:	89 2b       	or	r24, r25
    2460:	8c 93       	st	X, r24
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <_ZN14SoftwareSerial5setTXEh>:
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	ec 01       	movw	r28, r24
    248c:	16 2f       	mov	r17, r22
    248e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2490:	66 95       	lsr	r22
    2492:	61 70       	andi	r22, 0x01	; 1
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	68 27       	eor	r22, r24
    2498:	81 2f       	mov	r24, r17
    249a:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	81 2f       	mov	r24, r17
    24a2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <pinMode>
    24a6:	81 2f       	mov	r24, r17
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	fc 01       	movw	r30, r24
    24ac:	ef 5c       	subi	r30, 0xCF	; 207
    24ae:	fc 4f       	sbci	r31, 0xFC	; 252
    24b0:	e4 91       	lpm	r30, Z
    24b2:	e8 8b       	std	Y+16, r30	; 0x10
    24b4:	fc 01       	movw	r30, r24
    24b6:	eb 5b       	subi	r30, 0xBB	; 187
    24b8:	fc 4f       	sbci	r31, 0xFC	; 252
    24ba:	e4 91       	lpm	r30, Z
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	ee 0f       	add	r30, r30
    24c0:	ff 1f       	adc	r31, r31
    24c2:	ed 59       	subi	r30, 0x9D	; 157
    24c4:	fc 4f       	sbci	r31, 0xFC	; 252
    24c6:	85 91       	lpm	r24, Z+
    24c8:	94 91       	lpm	r25, Z
    24ca:	9a 8b       	std	Y+18, r25	; 0x12
    24cc:	89 8b       	std	Y+17, r24	; 0x11
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	1f 91       	pop	r17
    24d4:	08 95       	ret

000024d6 <_ZN14SoftwareSerial5setRXEh>:
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	ec 01       	movw	r28, r24
    24de:	16 2f       	mov	r17, r22
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	81 2f       	mov	r24, r17
    24e4:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <pinMode>
    24e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ea:	81 fd       	sbrc	r24, 1
    24ec:	04 c0       	rjmp	.+8      	; 0x24f6 <_ZN14SoftwareSerial5setRXEh+0x20>
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	81 2f       	mov	r24, r17
    24f2:	0e 94 b8 10 	call	0x2170	; 0x2170 <digitalWrite>
    24f6:	1c 87       	std	Y+12, r17	; 0x0c
    24f8:	81 2f       	mov	r24, r17
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	fc 01       	movw	r30, r24
    24fe:	ef 5c       	subi	r30, 0xCF	; 207
    2500:	fc 4f       	sbci	r31, 0xFC	; 252
    2502:	e4 91       	lpm	r30, Z
    2504:	ed 87       	std	Y+13, r30	; 0x0d
    2506:	fc 01       	movw	r30, r24
    2508:	eb 5b       	subi	r30, 0xBB	; 187
    250a:	fc 4f       	sbci	r31, 0xFC	; 252
    250c:	e4 91       	lpm	r30, Z
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	ee 0f       	add	r30, r30
    2512:	ff 1f       	adc	r31, r31
    2514:	e7 5a       	subi	r30, 0xA7	; 167
    2516:	fc 4f       	sbci	r31, 0xFC	; 252
    2518:	85 91       	lpm	r24, Z+
    251a:	94 91       	lpm	r25, Z
    251c:	9f 87       	std	Y+15, r25	; 0x0f
    251e:	8e 87       	std	Y+14, r24	; 0x0e
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	08 95       	ret

00002528 <_ZN14SoftwareSerialC1Ehhb>:
    2528:	1f 93       	push	r17
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
    252e:	ec 01       	movw	r28, r24
    2530:	16 2f       	mov	r17, r22
    2532:	1b 82       	std	Y+3, r1	; 0x03
    2534:	1a 82       	std	Y+2, r1	; 0x02
    2536:	88 ee       	ldi	r24, 0xE8	; 232
    2538:	93 e0       	ldi	r25, 0x03	; 3
    253a:	a0 e0       	ldi	r26, 0x00	; 0
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	8c 83       	std	Y+4, r24	; 0x04
    2540:	9d 83       	std	Y+5, r25	; 0x05
    2542:	ae 83       	std	Y+6, r26	; 0x06
    2544:	bf 83       	std	Y+7, r27	; 0x07
    2546:	86 e9       	ldi	r24, 0x96	; 150
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	99 83       	std	Y+1, r25	; 0x01
    254c:	88 83       	st	Y, r24
    254e:	1f 8a       	std	Y+23, r1	; 0x17
    2550:	1e 8a       	std	Y+22, r1	; 0x16
    2552:	19 8e       	std	Y+25, r1	; 0x19
    2554:	18 8e       	std	Y+24, r1	; 0x18
    2556:	1b 8e       	std	Y+27, r1	; 0x1b
    2558:	1a 8e       	std	Y+26, r1	; 0x1a
    255a:	1d 8e       	std	Y+29, r1	; 0x1d
    255c:	1c 8e       	std	Y+28, r1	; 0x1c
    255e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2560:	8e 7f       	andi	r24, 0xFE	; 254
    2562:	20 fb       	bst	r18, 0
    2564:	81 f9       	bld	r24, 1
    2566:	8e 8f       	std	Y+30, r24	; 0x1e
    2568:	64 2f       	mov	r22, r20
    256a:	ce 01       	movw	r24, r28
    256c:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN14SoftwareSerial5setTXEh>
    2570:	61 2f       	mov	r22, r17
    2572:	ce 01       	movw	r24, r28
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0c 94 6b 12 	jmp	0x24d6	; 0x24d6 <_ZN14SoftwareSerial5setRXEh>

0000257e <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	ec 01       	movw	r28, r24
    2584:	9a 01       	movw	r18, r20
    2586:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2588:	1b 8e       	std	Y+27, r1	; 0x1b
    258a:	1a 8e       	std	Y+26, r1	; 0x1a
    258c:	19 8e       	std	Y+25, r1	; 0x19
    258e:	18 8e       	std	Y+24, r1	; 0x18
    2590:	1f 8a       	std	Y+23, r1	; 0x17
    2592:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	79 e0       	ldi	r23, 0x09	; 9
    2598:	8d e3       	ldi	r24, 0x3D	; 61
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 90 13 	call	0x2720	; 0x2720 <__divmodsi4>
    25a0:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    25a2:	24 30       	cpi	r18, 0x04	; 4
    25a4:	31 05       	cpc	r19, r1
    25a6:	18 f0       	brcs	.+6      	; 0x25ae <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    25a8:	c9 01       	movw	r24, r18
    25aa:	03 97       	sbiw	r24, 0x03	; 3
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    25b2:	9d 8f       	std	Y+29, r25	; 0x1d
    25b4:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    25b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    25b8:	66 31       	cpi	r22, 0x16	; 22
    25ba:	08 f0       	brcs	.+2      	; 0x25be <_ZN14SoftwareSerial5beginEl+0x40>
    25bc:	69 c0       	rjmp	.+210    	; 0x2690 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    25be:	c9 01       	movw	r24, r18
    25c0:	96 95       	lsr	r25
    25c2:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    25c4:	84 31       	cpi	r24, 0x14	; 20
    25c6:	91 05       	cpc	r25, r1
    25c8:	10 f0       	brcs	.+4      	; 0x25ce <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    25ca:	43 97       	sbiw	r24, 0x13	; 19
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    25d2:	9f 8b       	std	Y+23, r25	; 0x17
    25d4:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    25d6:	36 97       	sbiw	r30, 0x06	; 6
    25d8:	18 f0       	brcs	.+6      	; 0x25e0 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    25da:	c9 01       	movw	r24, r18
    25dc:	05 97       	sbiw	r24, 0x05	; 5
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    25e4:	99 8f       	std	Y+25, r25	; 0x19
    25e6:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    25e8:	c9 01       	movw	r24, r18
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	28 0f       	add	r18, r24
    25f0:	39 1f       	adc	r19, r25
    25f2:	36 95       	lsr	r19
    25f4:	27 95       	ror	r18
    25f6:	36 95       	lsr	r19
    25f8:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    25fa:	2d 30       	cpi	r18, 0x0D	; 13
    25fc:	31 05       	cpc	r19, r1
    25fe:	18 f0       	brcs	.+6      	; 0x2606 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2600:	2c 50       	subi	r18, 0x0C	; 12
    2602:	31 09       	sbc	r19, r1
    2604:	02 c0       	rjmp	.+4      	; 0x260a <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    2606:	21 e0       	ldi	r18, 0x01	; 1
    2608:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    260a:	3b 8f       	std	Y+27, r19	; 0x1b
    260c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    260e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    2612:	68 30       	cpi	r22, 0x08	; 8
    2614:	50 f0       	brcs	.+20     	; 0x262a <_ZN14SoftwareSerial5beginEl+0xac>
    2616:	21 e0       	ldi	r18, 0x01	; 1
    2618:	6e 30       	cpi	r22, 0x0E	; 14
    261a:	08 f4       	brcc	.+2      	; 0x261e <_ZN14SoftwareSerial5beginEl+0xa0>
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <_ZN14SoftwareSerial5beginEl+0xa6>
    2622:	88 0f       	add	r24, r24
    2624:	2a 95       	dec	r18
    2626:	ea f7       	brpl	.-6      	; 0x2622 <_ZN14SoftwareSerial5beginEl+0xa4>
    2628:	01 c0       	rjmp	.+2      	; 0x262c <_ZN14SoftwareSerial5beginEl+0xae>
    262a:	84 e0       	ldi	r24, 0x04	; 4
    262c:	89 2b       	or	r24, r25
    262e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2632:	9c 85       	ldd	r25, Y+12	; 0x0c
    2634:	98 30       	cpi	r25, 0x08	; 8
    2636:	38 f0       	brcs	.+14     	; 0x2646 <_ZN14SoftwareSerial5beginEl+0xc8>
    2638:	9e 30       	cpi	r25, 0x0E	; 14
    263a:	40 f0       	brcs	.+16     	; 0x264c <_ZN14SoftwareSerial5beginEl+0xce>
    263c:	96 31       	cpi	r25, 0x16	; 22
    263e:	48 f0       	brcs	.+18     	; 0x2652 <_ZN14SoftwareSerial5beginEl+0xd4>
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	08 c0       	rjmp	.+16     	; 0x2656 <_ZN14SoftwareSerial5beginEl+0xd8>
    2646:	2d e6       	ldi	r18, 0x6D	; 109
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <_ZN14SoftwareSerial5beginEl+0xd8>
    264c:	2b e6       	ldi	r18, 0x6B	; 107
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <_ZN14SoftwareSerial5beginEl+0xd8>
    2652:	2c e6       	ldi	r18, 0x6C	; 108
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	3c 8b       	std	Y+20, r19	; 0x14
    2658:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    265a:	98 30       	cpi	r25, 0x08	; 8
    265c:	30 f4       	brcc	.+12     	; 0x266a <_ZN14SoftwareSerial5beginEl+0xec>
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	01 c0       	rjmp	.+2      	; 0x2664 <_ZN14SoftwareSerial5beginEl+0xe6>
    2662:	88 0f       	add	r24, r24
    2664:	9a 95       	dec	r25
    2666:	ea f7       	brpl	.-6      	; 0x2662 <_ZN14SoftwareSerial5beginEl+0xe4>
    2668:	0e c0       	rjmp	.+28     	; 0x2686 <_ZN14SoftwareSerial5beginEl+0x108>
    266a:	29 2f       	mov	r18, r25
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	9e 30       	cpi	r25, 0x0E	; 14
    2670:	18 f4       	brcc	.+6      	; 0x2678 <_ZN14SoftwareSerial5beginEl+0xfa>
    2672:	28 50       	subi	r18, 0x08	; 8
    2674:	31 09       	sbc	r19, r1
    2676:	02 c0       	rjmp	.+4      	; 0x267c <_ZN14SoftwareSerial5beginEl+0xfe>
    2678:	2e 50       	subi	r18, 0x0E	; 14
    267a:	31 09       	sbc	r19, r1
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <_ZN14SoftwareSerial5beginEl+0x104>
    2680:	88 0f       	add	r24, r24
    2682:	2a 95       	dec	r18
    2684:	ea f7       	brpl	.-6      	; 0x2680 <_ZN14SoftwareSerial5beginEl+0x102>
    2686:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2688:	8c 8d       	ldd	r24, Y+28	; 0x1c
    268a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2690:	ce 01       	movw	r24, r28
}
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2696:	0c 94 9f 11 	jmp	0x233e	; 0x233e <_ZN14SoftwareSerial6listenEv>

0000269a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    269a:	08 95       	ret

0000269c <__udivmodqi4>:
    269c:	99 1b       	sub	r25, r25
    269e:	79 e0       	ldi	r23, 0x09	; 9
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <__udivmodqi4_ep>

000026a2 <__udivmodqi4_loop>:
    26a2:	99 1f       	adc	r25, r25
    26a4:	96 17       	cp	r25, r22
    26a6:	08 f0       	brcs	.+2      	; 0x26aa <__udivmodqi4_ep>
    26a8:	96 1b       	sub	r25, r22

000026aa <__udivmodqi4_ep>:
    26aa:	88 1f       	adc	r24, r24
    26ac:	7a 95       	dec	r23
    26ae:	c9 f7       	brne	.-14     	; 0x26a2 <__udivmodqi4_loop>
    26b0:	80 95       	com	r24
    26b2:	08 95       	ret

000026b4 <__divmodhi4>:
    26b4:	97 fb       	bst	r25, 7
    26b6:	07 2e       	mov	r0, r23
    26b8:	16 f4       	brtc	.+4      	; 0x26be <__divmodhi4+0xa>
    26ba:	00 94       	com	r0
    26bc:	07 d0       	rcall	.+14     	; 0x26cc <__divmodhi4_neg1>
    26be:	77 fd       	sbrc	r23, 7
    26c0:	09 d0       	rcall	.+18     	; 0x26d4 <__divmodhi4_neg2>
    26c2:	0e 94 af 13 	call	0x275e	; 0x275e <__udivmodhi4>
    26c6:	07 fc       	sbrc	r0, 7
    26c8:	05 d0       	rcall	.+10     	; 0x26d4 <__divmodhi4_neg2>
    26ca:	3e f4       	brtc	.+14     	; 0x26da <__divmodhi4_exit>

000026cc <__divmodhi4_neg1>:
    26cc:	90 95       	com	r25
    26ce:	81 95       	neg	r24
    26d0:	9f 4f       	sbci	r25, 0xFF	; 255
    26d2:	08 95       	ret

000026d4 <__divmodhi4_neg2>:
    26d4:	70 95       	com	r23
    26d6:	61 95       	neg	r22
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255

000026da <__divmodhi4_exit>:
    26da:	08 95       	ret

000026dc <__udivmodsi4>:
    26dc:	a1 e2       	ldi	r26, 0x21	; 33
    26de:	1a 2e       	mov	r1, r26
    26e0:	aa 1b       	sub	r26, r26
    26e2:	bb 1b       	sub	r27, r27
    26e4:	fd 01       	movw	r30, r26
    26e6:	0d c0       	rjmp	.+26     	; 0x2702 <__udivmodsi4_ep>

000026e8 <__udivmodsi4_loop>:
    26e8:	aa 1f       	adc	r26, r26
    26ea:	bb 1f       	adc	r27, r27
    26ec:	ee 1f       	adc	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	a2 17       	cp	r26, r18
    26f2:	b3 07       	cpc	r27, r19
    26f4:	e4 07       	cpc	r30, r20
    26f6:	f5 07       	cpc	r31, r21
    26f8:	20 f0       	brcs	.+8      	; 0x2702 <__udivmodsi4_ep>
    26fa:	a2 1b       	sub	r26, r18
    26fc:	b3 0b       	sbc	r27, r19
    26fe:	e4 0b       	sbc	r30, r20
    2700:	f5 0b       	sbc	r31, r21

00002702 <__udivmodsi4_ep>:
    2702:	66 1f       	adc	r22, r22
    2704:	77 1f       	adc	r23, r23
    2706:	88 1f       	adc	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	1a 94       	dec	r1
    270c:	69 f7       	brne	.-38     	; 0x26e8 <__udivmodsi4_loop>
    270e:	60 95       	com	r22
    2710:	70 95       	com	r23
    2712:	80 95       	com	r24
    2714:	90 95       	com	r25
    2716:	9b 01       	movw	r18, r22
    2718:	ac 01       	movw	r20, r24
    271a:	bd 01       	movw	r22, r26
    271c:	cf 01       	movw	r24, r30
    271e:	08 95       	ret

00002720 <__divmodsi4>:
    2720:	05 2e       	mov	r0, r21
    2722:	97 fb       	bst	r25, 7
    2724:	1e f4       	brtc	.+6      	; 0x272c <__divmodsi4+0xc>
    2726:	00 94       	com	r0
    2728:	0e 94 a7 13 	call	0x274e	; 0x274e <__negsi2>
    272c:	57 fd       	sbrc	r21, 7
    272e:	07 d0       	rcall	.+14     	; 0x273e <__divmodsi4_neg2>
    2730:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__udivmodsi4>
    2734:	07 fc       	sbrc	r0, 7
    2736:	03 d0       	rcall	.+6      	; 0x273e <__divmodsi4_neg2>
    2738:	4e f4       	brtc	.+18     	; 0x274c <__divmodsi4_exit>
    273a:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__negsi2>

0000273e <__divmodsi4_neg2>:
    273e:	50 95       	com	r21
    2740:	40 95       	com	r20
    2742:	30 95       	com	r19
    2744:	21 95       	neg	r18
    2746:	3f 4f       	sbci	r19, 0xFF	; 255
    2748:	4f 4f       	sbci	r20, 0xFF	; 255
    274a:	5f 4f       	sbci	r21, 0xFF	; 255

0000274c <__divmodsi4_exit>:
    274c:	08 95       	ret

0000274e <__negsi2>:
    274e:	90 95       	com	r25
    2750:	80 95       	com	r24
    2752:	70 95       	com	r23
    2754:	61 95       	neg	r22
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	8f 4f       	sbci	r24, 0xFF	; 255
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	08 95       	ret

0000275e <__udivmodhi4>:
    275e:	aa 1b       	sub	r26, r26
    2760:	bb 1b       	sub	r27, r27
    2762:	51 e1       	ldi	r21, 0x11	; 17
    2764:	07 c0       	rjmp	.+14     	; 0x2774 <__udivmodhi4_ep>

00002766 <__udivmodhi4_loop>:
    2766:	aa 1f       	adc	r26, r26
    2768:	bb 1f       	adc	r27, r27
    276a:	a6 17       	cp	r26, r22
    276c:	b7 07       	cpc	r27, r23
    276e:	10 f0       	brcs	.+4      	; 0x2774 <__udivmodhi4_ep>
    2770:	a6 1b       	sub	r26, r22
    2772:	b7 0b       	sbc	r27, r23

00002774 <__udivmodhi4_ep>:
    2774:	88 1f       	adc	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	5a 95       	dec	r21
    277a:	a9 f7       	brne	.-22     	; 0x2766 <__udivmodhi4_loop>
    277c:	80 95       	com	r24
    277e:	90 95       	com	r25
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	08 95       	ret

00002786 <__tablejump2__>:
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	05 90       	lpm	r0, Z+
    278c:	f4 91       	lpm	r31, Z
    278e:	e0 2d       	mov	r30, r0
    2790:	09 94       	ijmp

00002792 <malloc>:
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	91 05       	cpc	r25, r1
    279e:	10 f4       	brcc	.+4      	; 0x27a4 <malloc+0x12>
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <__flp>
    27a8:	f0 91 76 04 	lds	r31, 0x0476	; 0x800476 <__flp+0x1>
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	a0 e0       	ldi	r26, 0x00	; 0
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	30 97       	sbiw	r30, 0x00	; 0
    27b6:	19 f1       	breq	.+70     	; 0x27fe <malloc+0x6c>
    27b8:	40 81       	ld	r20, Z
    27ba:	51 81       	ldd	r21, Z+1	; 0x01
    27bc:	02 81       	ldd	r16, Z+2	; 0x02
    27be:	13 81       	ldd	r17, Z+3	; 0x03
    27c0:	48 17       	cp	r20, r24
    27c2:	59 07       	cpc	r21, r25
    27c4:	c8 f0       	brcs	.+50     	; 0x27f8 <malloc+0x66>
    27c6:	84 17       	cp	r24, r20
    27c8:	95 07       	cpc	r25, r21
    27ca:	69 f4       	brne	.+26     	; 0x27e6 <malloc+0x54>
    27cc:	10 97       	sbiw	r26, 0x00	; 0
    27ce:	31 f0       	breq	.+12     	; 0x27dc <malloc+0x4a>
    27d0:	12 96       	adiw	r26, 0x02	; 2
    27d2:	0c 93       	st	X, r16
    27d4:	12 97       	sbiw	r26, 0x02	; 2
    27d6:	13 96       	adiw	r26, 0x03	; 3
    27d8:	1c 93       	st	X, r17
    27da:	27 c0       	rjmp	.+78     	; 0x282a <malloc+0x98>
    27dc:	00 93 75 04 	sts	0x0475, r16	; 0x800475 <__flp>
    27e0:	10 93 76 04 	sts	0x0476, r17	; 0x800476 <__flp+0x1>
    27e4:	22 c0       	rjmp	.+68     	; 0x282a <malloc+0x98>
    27e6:	21 15       	cp	r18, r1
    27e8:	31 05       	cpc	r19, r1
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <malloc+0x60>
    27ec:	42 17       	cp	r20, r18
    27ee:	53 07       	cpc	r21, r19
    27f0:	18 f4       	brcc	.+6      	; 0x27f8 <malloc+0x66>
    27f2:	9a 01       	movw	r18, r20
    27f4:	bd 01       	movw	r22, r26
    27f6:	ef 01       	movw	r28, r30
    27f8:	df 01       	movw	r26, r30
    27fa:	f8 01       	movw	r30, r16
    27fc:	db cf       	rjmp	.-74     	; 0x27b4 <malloc+0x22>
    27fe:	21 15       	cp	r18, r1
    2800:	31 05       	cpc	r19, r1
    2802:	f9 f0       	breq	.+62     	; 0x2842 <malloc+0xb0>
    2804:	28 1b       	sub	r18, r24
    2806:	39 0b       	sbc	r19, r25
    2808:	24 30       	cpi	r18, 0x04	; 4
    280a:	31 05       	cpc	r19, r1
    280c:	80 f4       	brcc	.+32     	; 0x282e <malloc+0x9c>
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	9b 81       	ldd	r25, Y+3	; 0x03
    2812:	61 15       	cp	r22, r1
    2814:	71 05       	cpc	r23, r1
    2816:	21 f0       	breq	.+8      	; 0x2820 <malloc+0x8e>
    2818:	fb 01       	movw	r30, r22
    281a:	93 83       	std	Z+3, r25	; 0x03
    281c:	82 83       	std	Z+2, r24	; 0x02
    281e:	04 c0       	rjmp	.+8      	; 0x2828 <malloc+0x96>
    2820:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <__flp+0x1>
    2824:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <__flp>
    2828:	fe 01       	movw	r30, r28
    282a:	32 96       	adiw	r30, 0x02	; 2
    282c:	44 c0       	rjmp	.+136    	; 0x28b6 <malloc+0x124>
    282e:	fe 01       	movw	r30, r28
    2830:	e2 0f       	add	r30, r18
    2832:	f3 1f       	adc	r31, r19
    2834:	81 93       	st	Z+, r24
    2836:	91 93       	st	Z+, r25
    2838:	22 50       	subi	r18, 0x02	; 2
    283a:	31 09       	sbc	r19, r1
    283c:	39 83       	std	Y+1, r19	; 0x01
    283e:	28 83       	st	Y, r18
    2840:	3a c0       	rjmp	.+116    	; 0x28b6 <malloc+0x124>
    2842:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <__brkval>
    2846:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <__brkval+0x1>
    284a:	23 2b       	or	r18, r19
    284c:	41 f4       	brne	.+16     	; 0x285e <malloc+0xcc>
    284e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2852:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2856:	30 93 74 04 	sts	0x0474, r19	; 0x800474 <__brkval+0x1>
    285a:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <__brkval>
    285e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2862:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2866:	21 15       	cp	r18, r1
    2868:	31 05       	cpc	r19, r1
    286a:	41 f4       	brne	.+16     	; 0x287c <malloc+0xea>
    286c:	2d b7       	in	r18, 0x3d	; 61
    286e:	3e b7       	in	r19, 0x3e	; 62
    2870:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2874:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2878:	24 1b       	sub	r18, r20
    287a:	35 0b       	sbc	r19, r21
    287c:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <__brkval>
    2880:	f0 91 74 04 	lds	r31, 0x0474	; 0x800474 <__brkval+0x1>
    2884:	e2 17       	cp	r30, r18
    2886:	f3 07       	cpc	r31, r19
    2888:	a0 f4       	brcc	.+40     	; 0x28b2 <malloc+0x120>
    288a:	2e 1b       	sub	r18, r30
    288c:	3f 0b       	sbc	r19, r31
    288e:	28 17       	cp	r18, r24
    2890:	39 07       	cpc	r19, r25
    2892:	78 f0       	brcs	.+30     	; 0x28b2 <malloc+0x120>
    2894:	ac 01       	movw	r20, r24
    2896:	4e 5f       	subi	r20, 0xFE	; 254
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	24 17       	cp	r18, r20
    289c:	35 07       	cpc	r19, r21
    289e:	48 f0       	brcs	.+18     	; 0x28b2 <malloc+0x120>
    28a0:	4e 0f       	add	r20, r30
    28a2:	5f 1f       	adc	r21, r31
    28a4:	50 93 74 04 	sts	0x0474, r21	; 0x800474 <__brkval+0x1>
    28a8:	40 93 73 04 	sts	0x0473, r20	; 0x800473 <__brkval>
    28ac:	81 93       	st	Z+, r24
    28ae:	91 93       	st	Z+, r25
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <malloc+0x124>
    28b2:	e0 e0       	ldi	r30, 0x00	; 0
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	cf 01       	movw	r24, r30
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <free>:
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	09 f4       	brne	.+2      	; 0x28cc <free+0xa>
    28ca:	81 c0       	rjmp	.+258    	; 0x29ce <free+0x10c>
    28cc:	fc 01       	movw	r30, r24
    28ce:	32 97       	sbiw	r30, 0x02	; 2
    28d0:	13 82       	std	Z+3, r1	; 0x03
    28d2:	12 82       	std	Z+2, r1	; 0x02
    28d4:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <__flp>
    28d8:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <__flp+0x1>
    28dc:	10 97       	sbiw	r26, 0x00	; 0
    28de:	81 f4       	brne	.+32     	; 0x2900 <free+0x3e>
    28e0:	20 81       	ld	r18, Z
    28e2:	31 81       	ldd	r19, Z+1	; 0x01
    28e4:	82 0f       	add	r24, r18
    28e6:	93 1f       	adc	r25, r19
    28e8:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <__brkval>
    28ec:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <__brkval+0x1>
    28f0:	28 17       	cp	r18, r24
    28f2:	39 07       	cpc	r19, r25
    28f4:	51 f5       	brne	.+84     	; 0x294a <free+0x88>
    28f6:	f0 93 74 04 	sts	0x0474, r31	; 0x800474 <__brkval+0x1>
    28fa:	e0 93 73 04 	sts	0x0473, r30	; 0x800473 <__brkval>
    28fe:	67 c0       	rjmp	.+206    	; 0x29ce <free+0x10c>
    2900:	ed 01       	movw	r28, r26
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	ce 17       	cp	r28, r30
    2908:	df 07       	cpc	r29, r31
    290a:	40 f4       	brcc	.+16     	; 0x291c <free+0x5a>
    290c:	4a 81       	ldd	r20, Y+2	; 0x02
    290e:	5b 81       	ldd	r21, Y+3	; 0x03
    2910:	9e 01       	movw	r18, r28
    2912:	41 15       	cp	r20, r1
    2914:	51 05       	cpc	r21, r1
    2916:	f1 f0       	breq	.+60     	; 0x2954 <free+0x92>
    2918:	ea 01       	movw	r28, r20
    291a:	f5 cf       	rjmp	.-22     	; 0x2906 <free+0x44>
    291c:	d3 83       	std	Z+3, r29	; 0x03
    291e:	c2 83       	std	Z+2, r28	; 0x02
    2920:	40 81       	ld	r20, Z
    2922:	51 81       	ldd	r21, Z+1	; 0x01
    2924:	84 0f       	add	r24, r20
    2926:	95 1f       	adc	r25, r21
    2928:	c8 17       	cp	r28, r24
    292a:	d9 07       	cpc	r29, r25
    292c:	59 f4       	brne	.+22     	; 0x2944 <free+0x82>
    292e:	88 81       	ld	r24, Y
    2930:	99 81       	ldd	r25, Y+1	; 0x01
    2932:	84 0f       	add	r24, r20
    2934:	95 1f       	adc	r25, r21
    2936:	02 96       	adiw	r24, 0x02	; 2
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	93 83       	std	Z+3, r25	; 0x03
    2942:	82 83       	std	Z+2, r24	; 0x02
    2944:	21 15       	cp	r18, r1
    2946:	31 05       	cpc	r19, r1
    2948:	29 f4       	brne	.+10     	; 0x2954 <free+0x92>
    294a:	f0 93 76 04 	sts	0x0476, r31	; 0x800476 <__flp+0x1>
    294e:	e0 93 75 04 	sts	0x0475, r30	; 0x800475 <__flp>
    2952:	3d c0       	rjmp	.+122    	; 0x29ce <free+0x10c>
    2954:	e9 01       	movw	r28, r18
    2956:	fb 83       	std	Y+3, r31	; 0x03
    2958:	ea 83       	std	Y+2, r30	; 0x02
    295a:	49 91       	ld	r20, Y+
    295c:	59 91       	ld	r21, Y+
    295e:	c4 0f       	add	r28, r20
    2960:	d5 1f       	adc	r29, r21
    2962:	ec 17       	cp	r30, r28
    2964:	fd 07       	cpc	r31, r29
    2966:	61 f4       	brne	.+24     	; 0x2980 <free+0xbe>
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	84 0f       	add	r24, r20
    296e:	95 1f       	adc	r25, r21
    2970:	02 96       	adiw	r24, 0x02	; 2
    2972:	e9 01       	movw	r28, r18
    2974:	99 83       	std	Y+1, r25	; 0x01
    2976:	88 83       	st	Y, r24
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	9b 83       	std	Y+3, r25	; 0x03
    297e:	8a 83       	std	Y+2, r24	; 0x02
    2980:	e0 e0       	ldi	r30, 0x00	; 0
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	12 96       	adiw	r26, 0x02	; 2
    2986:	8d 91       	ld	r24, X+
    2988:	9c 91       	ld	r25, X
    298a:	13 97       	sbiw	r26, 0x03	; 3
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	19 f0       	breq	.+6      	; 0x2996 <free+0xd4>
    2990:	fd 01       	movw	r30, r26
    2992:	dc 01       	movw	r26, r24
    2994:	f7 cf       	rjmp	.-18     	; 0x2984 <free+0xc2>
    2996:	8d 91       	ld	r24, X+
    2998:	9c 91       	ld	r25, X
    299a:	11 97       	sbiw	r26, 0x01	; 1
    299c:	9d 01       	movw	r18, r26
    299e:	2e 5f       	subi	r18, 0xFE	; 254
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	82 0f       	add	r24, r18
    29a4:	93 1f       	adc	r25, r19
    29a6:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <__brkval>
    29aa:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <__brkval+0x1>
    29ae:	28 17       	cp	r18, r24
    29b0:	39 07       	cpc	r19, r25
    29b2:	69 f4       	brne	.+26     	; 0x29ce <free+0x10c>
    29b4:	30 97       	sbiw	r30, 0x00	; 0
    29b6:	29 f4       	brne	.+10     	; 0x29c2 <free+0x100>
    29b8:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <__flp+0x1>
    29bc:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <__flp>
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <free+0x104>
    29c2:	13 82       	std	Z+3, r1	; 0x03
    29c4:	12 82       	std	Z+2, r1	; 0x02
    29c6:	b0 93 74 04 	sts	0x0474, r27	; 0x800474 <__brkval+0x1>
    29ca:	a0 93 73 04 	sts	0x0473, r26	; 0x800473 <__brkval>
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <atoi>:
    29d4:	fc 01       	movw	r30, r24
    29d6:	88 27       	eor	r24, r24
    29d8:	99 27       	eor	r25, r25
    29da:	e8 94       	clt
    29dc:	21 91       	ld	r18, Z+
    29de:	20 32       	cpi	r18, 0x20	; 32
    29e0:	e9 f3       	breq	.-6      	; 0x29dc <atoi+0x8>
    29e2:	29 30       	cpi	r18, 0x09	; 9
    29e4:	10 f0       	brcs	.+4      	; 0x29ea <atoi+0x16>
    29e6:	2e 30       	cpi	r18, 0x0E	; 14
    29e8:	c8 f3       	brcs	.-14     	; 0x29dc <atoi+0x8>
    29ea:	2b 32       	cpi	r18, 0x2B	; 43
    29ec:	41 f0       	breq	.+16     	; 0x29fe <atoi+0x2a>
    29ee:	2d 32       	cpi	r18, 0x2D	; 45
    29f0:	39 f4       	brne	.+14     	; 0x2a00 <atoi+0x2c>
    29f2:	68 94       	set
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <atoi+0x2a>
    29f6:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__mulhi_const_10>
    29fa:	82 0f       	add	r24, r18
    29fc:	91 1d       	adc	r25, r1
    29fe:	21 91       	ld	r18, Z+
    2a00:	20 53       	subi	r18, 0x30	; 48
    2a02:	2a 30       	cpi	r18, 0x0A	; 10
    2a04:	c0 f3       	brcs	.-16     	; 0x29f6 <atoi+0x22>
    2a06:	1e f4       	brtc	.+6      	; 0x2a0e <atoi+0x3a>
    2a08:	90 95       	com	r25
    2a0a:	81 95       	neg	r24
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	08 95       	ret

00002a10 <strcmp_P>:
    2a10:	fb 01       	movw	r30, r22
    2a12:	dc 01       	movw	r26, r24
    2a14:	8d 91       	ld	r24, X+
    2a16:	05 90       	lpm	r0, Z+
    2a18:	80 19       	sub	r24, r0
    2a1a:	01 10       	cpse	r0, r1
    2a1c:	d9 f3       	breq	.-10     	; 0x2a14 <strcmp_P+0x4>
    2a1e:	99 0b       	sbc	r25, r25
    2a20:	08 95       	ret

00002a22 <__strlen_P>:
    2a22:	fc 01       	movw	r30, r24
    2a24:	05 90       	lpm	r0, Z+
    2a26:	00 20       	and	r0, r0
    2a28:	e9 f7       	brne	.-6      	; 0x2a24 <__strlen_P+0x2>
    2a2a:	80 95       	com	r24
    2a2c:	90 95       	com	r25
    2a2e:	8e 0f       	add	r24, r30
    2a30:	9f 1f       	adc	r25, r31
    2a32:	08 95       	ret

00002a34 <strstr_P>:
    2a34:	fb 01       	movw	r30, r22
    2a36:	55 91       	lpm	r21, Z+
    2a38:	55 23       	and	r21, r21
    2a3a:	a9 f0       	breq	.+42     	; 0x2a66 <strstr_P+0x32>
    2a3c:	bf 01       	movw	r22, r30
    2a3e:	dc 01       	movw	r26, r24
    2a40:	4d 91       	ld	r20, X+
    2a42:	45 17       	cp	r20, r21
    2a44:	41 11       	cpse	r20, r1
    2a46:	e1 f7       	brne	.-8      	; 0x2a40 <strstr_P+0xc>
    2a48:	59 f4       	brne	.+22     	; 0x2a60 <strstr_P+0x2c>
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	05 90       	lpm	r0, Z+
    2a4e:	00 20       	and	r0, r0
    2a50:	49 f0       	breq	.+18     	; 0x2a64 <strstr_P+0x30>
    2a52:	4d 91       	ld	r20, X+
    2a54:	40 15       	cp	r20, r0
    2a56:	41 11       	cpse	r20, r1
    2a58:	c9 f3       	breq	.-14     	; 0x2a4c <strstr_P+0x18>
    2a5a:	fb 01       	movw	r30, r22
    2a5c:	41 11       	cpse	r20, r1
    2a5e:	ef cf       	rjmp	.-34     	; 0x2a3e <strstr_P+0xa>
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	08 95       	ret

00002a68 <strchr>:
    2a68:	fc 01       	movw	r30, r24
    2a6a:	81 91       	ld	r24, Z+
    2a6c:	86 17       	cp	r24, r22
    2a6e:	21 f0       	breq	.+8      	; 0x2a78 <strchr+0x10>
    2a70:	88 23       	and	r24, r24
    2a72:	d9 f7       	brne	.-10     	; 0x2a6a <strchr+0x2>
    2a74:	99 27       	eor	r25, r25
    2a76:	08 95       	ret
    2a78:	31 97       	sbiw	r30, 0x01	; 1
    2a7a:	cf 01       	movw	r24, r30
    2a7c:	08 95       	ret

00002a7e <__mulhi_const_10>:
    2a7e:	7a e0       	ldi	r23, 0x0A	; 10
    2a80:	97 9f       	mul	r25, r23
    2a82:	90 2d       	mov	r25, r0
    2a84:	87 9f       	mul	r24, r23
    2a86:	80 2d       	mov	r24, r0
    2a88:	91 0d       	add	r25, r1
    2a8a:	11 24       	eor	r1, r1
    2a8c:	08 95       	ret

00002a8e <_exit>:
    2a8e:	f8 94       	cli

00002a90 <__stop_program>:
    2a90:	ff cf       	rjmp	.-2      	; 0x2a90 <__stop_program>
