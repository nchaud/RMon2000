
IAAAE_RM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00004502  00004596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002ef  008001c2  008001c2  00004658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ce0  00000000  00000000  000046c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020044  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000048e4  00000000  00000000  000253ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ff5  00000000  00000000  00029cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002f58  00000000  00000000  00030cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c27  00000000  00000000  00033c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000110b9  00000000  00000000  00039847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb0  00000000  00000000  0004a900  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__dtors_end>
       4:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
       8:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
       c:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__vector_3>
      10:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__vector_3>
      14:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__vector_3>
      18:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      1c:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      20:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      24:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      28:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      2c:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      30:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      34:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      38:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      3c:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      40:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__vector_16>
      44:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      48:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__vector_18>
      4c:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__vector_19>
      50:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      54:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      58:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      5c:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>
      60:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__vector_24>
      64:	0c 94 85 03 	jmp	0x70a	; 0x70a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	09 3c       	cpi	r16, 0xC9	; 201
      6a:	2d 2d       	mov	r18, r13
      6c:	2d 20       	and	r2, r13
	...

0000006f <_ZZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_jE3__c>:
      6f:	09 2d 2d 2d 3e 20 00                                .---> .

00000076 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c_0>:
      76:	09 3c 2d 2d 2d 20 00                                .<--- .

0000007d <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperljE3__c>:
      7d:	09 2d 2d 2d 3e 20 00                                .---> .

00000084 <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c_0>:
      84:	09 3c 2d 2d 2d 20 00                                .<--- .

0000008b <_ZZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperjE3__c>:
      8b:	09 2d 2d 2d 3e 20 00                                .---> .

00000092 <_ZZN13Adafruit_FONA8readlineEjbE3__c>:
      92:	53 50 41 43 45 00                                   SPACE.

00000098 <_ZZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperjE3__c>:
      98:	09 3c 2d 2d 2d 20 00                                .<--- .

0000009f <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_2>:
      9f:	52 45 44 49 52 00                                   REDIR.

000000a5 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_1>:
      a5:	55 52 4c 00                                         URL.

000000a9 <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c_0>:
      a9:	55 41 00                                            UA.

000000ac <_ZZN13Adafruit_FONA10HTTP_setupEPcE3__c>:
      ac:	43 49 44 00                                         CID.

000000b0 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_1>:
      b0:	4c 65 6e 3a 20 00                                   Len: .

000000b6 <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c_0>:
      b6:	53 74 61 74 75 73 3a 20 00                          Status: .

000000bf <_ZZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_E3__c>:
      bf:	43 4f 4e 54 45 4e 54 00                             CONTENT.

000000c7 <_ZZN13Adafruit_FONA8HTTP_sslEbE3__c>:
      c7:	41 54 2b 48 54 54 50 53 53 4c 3d 00                 AT+HTTPSSL=.

000000d3 <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c_0>:
      d3:	2b 48 54 54 50 52 45 41 44 3a 00                    +HTTPREAD:.

000000de <_ZZN13Adafruit_FONA12HTTP_readallEPjE3__c>:
      de:	41 54 2b 48 54 54 50 52 45 41 44 00                 AT+HTTPREAD.

000000ea <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_1>:
      ea:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

000000f7 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c_0>:
      f7:	2b 48 54 54 50 41 43 54 49 4f 4e 3a 00              +HTTPACTION:.

00000104 <_ZZN13Adafruit_FONA11HTTP_actionEhPjS0_lE3__c>:
     104:	41 54 2b 48 54 54 50 41 43 54 49 4f 4e 3d 00        AT+HTTPACTION=.

00000113 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_2>:
     113:	44 4f 57 4e 4c 4f 41 44 00                          DOWNLOAD.

0000011c <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_1>:
     11c:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000129 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c_0>:
     129:	41 54 2b 48 54 54 50 44 41 54 41 3d 00              AT+HTTPDATA=.

00000136 <_ZZN13Adafruit_FONA9HTTP_dataEmmE3__c>:
     136:	09 2d 2d 2d 3e 20 00                                .---> .

0000013d <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_3>:
     13d:	22 2c 00                                            ",.

00000140 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_2>:
     140:	22 2c 22 00                                         ",".

00000144 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_1>:
     144:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000152 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c_0>:
     152:	41 54 2b 48 54 54 50 50 41 52 41 3d 22 00           AT+HTTPPARA=".

00000160 <_ZZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperbE3__c>:
     160:	09 2d 2d 2d 3e 20 00                                .---> .

00000167 <_ZZN13Adafruit_FONA9HTTP_termEvE3__c>:
     167:	41 54 2b 48 54 54 50 54 45 52 4d 00                 AT+HTTPTERM.

00000173 <_ZZN13Adafruit_FONA9HTTP_initEvE3__c>:
     173:	41 54 2b 48 54 54 50 49 4e 49 54 00                 AT+HTTPINIT.

0000017f <_ZZN13Adafruit_FONA16sendDataOverGprsEPhjPjE3__c>:
     17f:	74 65 78 74 2f 70 6c 61 69 6e 00                    text/plain.

0000018a <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_14>:
     18a:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

00000195 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_13>:
     195:	41 54 2b 53 41 50 42 52 3d 30 2c 31 00              AT+SAPBR=0,1.

000001a2 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_11>:
     1a2:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

000001ad <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_12>:
     1ad:	53 48 55 54 20 4f 4b 00                             SHUT OK.

000001b5 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_10>:
     1b5:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

000001be <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_9>:
     1be:	41 54 2b 53 41 50 42 52 3d 31 2c 31 00              AT+SAPBR=1,1.

000001cb <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_8>:
     1cb:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 50 57     AT+SAPBR=3,1,"PW
     1db:	44 22 2c 00                                         D",.

000001df <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_7>:
     1df:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 55 53     AT+SAPBR=3,1,"US
     1ef:	45 52 22 2c 00                                      ER",.

000001f4 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_6>:
     1f4:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

000001fe <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_5>:
     1fe:	09 2d 2d 2d 3e 20 00                                .---> .

00000205 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_4>:
     205:	41 54 2b 43 53 54 54 3d 22 00                       AT+CSTT=".

0000020f <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_3>:
     20f:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 41 50     AT+SAPBR=3,1,"AP
     21f:	4e 22 2c 00                                         N",.

00000223 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_2>:
     223:	41 54 2b 53 41 50 42 52 3d 33 2c 31 2c 22 43 4f     AT+SAPBR=3,1,"CO
     233:	4e 54 59 50 45 22 2c 22 47 50 52 53 22 00           NTYPE","GPRS".

00000241 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_1>:
     241:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000024c <_ZZN13Adafruit_FONA10enableGPRSEbE3__c>:
     24c:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000257 <_ZZN13Adafruit_FONA10enableGPRSEbE3__c_0>:
     257:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000025f <_ZZN13Adafruit_FONA7getRSSIEvE3__c_5>:
     25f:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000268 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_6>:
     268:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000270 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_3>:
     270:	41 54 2b 43 52 45 47 3f 00                          AT+CREG?.

00000279 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_4>:
     279:	2b 43 52 45 47 3a 20 00                             +CREG: .

00000281 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_1>:
     281:	41 54 2b 43 53 51 00                                AT+CSQ.

00000288 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_2>:
     288:	2b 43 53 51 3a 20 00                                +CSQ: .

0000028f <_ZZN13Adafruit_FONA7getRSSIEvE3__c>:
     28f:	41 54 2b 43 53 51 00                                AT+CSQ.

00000296 <_ZZN13Adafruit_FONA7getRSSIEvE3__c_0>:
     296:	2b 43 53 51 3a 20 00                                +CSQ: .

0000029d <_ZZN13Adafruit_FONA5beginEhhE3__c_11>:
     29d:	53 49 4d 38 30 38 20 52 31 34 00                    SIM808 R14.

000002a8 <_ZZN13Adafruit_FONA5beginEhhE3__c_10>:
     2a8:	09 3c 2d 2d 2d 20 00                                .<--- .

000002af <_ZZN13Adafruit_FONA5beginEhhE3__c_9>:
     2af:	09 2d 2d 2d 3e 20 00                                .---> .

000002b6 <_ZZN13Adafruit_FONA5beginEhhE3__c_8>:
     2b6:	41 54 45 30 00                                      ATE0.

000002bb <_ZZN13Adafruit_FONA5beginEhhE3__c_7>:
     2bb:	41 54 45 30 00                                      ATE0.

000002c0 <_ZZN13Adafruit_FONA5beginEhhE3__c_6>:
     2c0:	41 54 20 46 61 69 6c 2e 2e 2e 20 6c 61 73 74 20     AT Fail... last 
     2d0:	64 69 74 63 68 20 61 74 74 65 6d 70 74 2e 00        ditch attempt..

000002df <_ZZN13Adafruit_FONA5beginEhhE3__c_5>:
     2df:	41 54 00                                            AT.

000002e2 <_ZZN13Adafruit_FONA5beginEhhE3__c_4>:
     2e2:	41 54 00                                            AT.

000002e5 <_ZZN13Adafruit_FONA5beginEhhE3__c_3>:
     2e5:	41 54 00                                            AT.

000002e8 <_ZZN13Adafruit_FONA5beginEhhE3__c_1>:
     2e8:	41 54 00                                            AT.

000002eb <_ZZN13Adafruit_FONA5beginEhhE3__c_2>:
     2eb:	41 54 00                                            AT.

000002ee <_ZZN13Adafruit_FONA5beginEhhE3__c_0>:
     2ee:	41 54 00                                            AT.

000002f1 <_ZZN13Adafruit_FONA5beginEhhE3__c>:
     2f1:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 6f 70     Attempting to op
     301:	65 6e 20 63 6f 6d 6d 20 77 69 74 68 20 41 54 73     en comm with ATs
	...

00000312 <_ZZN13Adafruit_FONAC4EabE3__c_0>:
     312:	4f 4b 00                                            OK.

00000315 <_ZZN13Adafruit_FONAC4EabE3__c>:
     315:	46 4f 4e 41 6e 65 74 00                             FONAnet.

0000031d <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_7>:
     31d:	45 72 72 6f 72 3d 00                                Error=.

00000324 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_6>:
     324:	20 7c 20 00                                          | .

00000328 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_5>:
     328:	54 65 6d 70 3d 00                                   Temp=.

0000032e <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_4>:
     32e:	20 7c 20 00                                          | .

00000332 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_3>:
     332:	43 75 72 72 65 6e 74 3d 00                          Current=.

0000033b <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_2>:
     33b:	20 7c 20 00                                          | .

0000033f <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_1>:
     33f:	50 56 2d 56 3d 00                                   PV-V=.

00000345 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c_0>:
     345:	20 7c 20 00                                          | .

00000349 <_ZZN7Helpers15printSensorDataEP10SensorDataE3__c>:
     349:	42 61 74 74 2d 56 3d 00                             Batt-V=.

00000351 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_7>:
     351:	52 53 53 49 20 45 72 72 6f 72 3f 3d 00              RSSI Error?=.

0000035e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_6>:
     35e:	20 7c 20 00                                          | .

00000362 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_5>:
     362:	2c 20 45 72 72 6f 72 3d 00                          , Error=.

0000036b <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_4>:
     36b:	2c 20 53 74 61 74 75 73 3d 00                       , Status=.

00000375 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_3>:
     375:	4e 65 74 77 6f 72 6b 2d 52 65 67 20 52 65 73 43     Network-Reg ResC
     385:	6f 64 65 3d 00                                      ode=.

0000038a <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_2>:
     38a:	20 7c 20 00                                          | .

0000038e <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_1>:
     38e:	42 45 52 3d 00                                      BER=.

00000393 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c_0>:
     393:	20 7c 20 00                                          | .

00000397 <_ZZN7Helpers9printRSSIEP13FONA_GET_RSSIE3__c>:
     397:	52 53 53 49 3d 00                                   RSSI=.

0000039d <_ZL12b64_alphabet>:
     39d:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
     3ad:	51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65 66     QRSTUVWXYZabcdef
     3bd:	67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76     ghijklmnopqrstuv
     3cd:	77 78 79 7a 30 31 32 33 34 35 36 37 38 39 2b 2f     wxyz0123456789+/
	...

000003de <_ZZ4loopE3__c>:
     3de:	42 65 68 61 76 69 6f 75 72 00                       Behaviour.

000003e8 <_ZZ8sendDatavE3__c_2>:
     3e8:	45 6e 63 6f 64 65 64 20 64 61 74 61 20 63 72 65     Encoded data cre
     3f8:	61 74 65 64 20 61 6e 64 20 72 65 61 64 79 20 66     ated and ready f
     408:	6f 72 20 73 65 6e 64 3a 00                          or send:.

00000411 <_ZZ8sendDatavE3__c_1>:
     411:	09 28 46 6f 6e 61 20 49 6e 69 74 20 45 52 52 4f     .(Fona Init ERRO
     421:	52 29 00                                            R).

00000424 <_ZZ8sendDatavE3__c_0>:
     424:	09 28 46 6f 6e 61 20 49 6e 69 74 20 50 65 6e 64     .(Fona Init Pend
     434:	69 6e 67 2e 2e 2e 29 00                             ing...).

0000043c <_ZZ8sendDatavE3__c>:
     43c:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 46 6f 6e     Initialising Fon
     44c:	61 20 74 6f 20 73 65 6e 64 20 64 61 74 61 00        a to send data.

0000045b <_ZZ12takeReadingsvE3__c>:
     45b:	54 61 6b 69 6e 67 20 72 65 61 64 69 6e 67 73 2e     Taking readings.
     46b:	2e 2e 00                                            ...

0000046e <_ZZ21ensureFonaInitialisedbPbE3__c_9>:
     46e:	09 20 28 47 6f 6f 64 2d 52 53 53 49 20 2d 20 73     . (Good-RSSI - s
     47e:	75 63 63 65 73 73 66 75 6c 6c 2c 20 61 6c 6c 20     uccessfull, all 
     48e:	64 6f 6e 65 29 00                                   done).

00000494 <_ZZ21ensureFonaInitialisedbPbE3__c_8>:
     494:	09 20 28 57 61 69 74 69 6e 67 20 46 6f 72 20 47     . (Waiting For G
     4a4:	6f 6f 64 2d 52 53 53 49 20 54 69 6d 65 64 20 4f     ood-RSSI Timed O
     4b4:	75 74 20 2d 20 77 69 6c 6c 20 63 6f 6e 74 69 6e     ut - will contin
     4c4:	75 65 20 6e 6f 77 29 00                             ue now).

000004cc <_ZZ21ensureFonaInitialisedbPbE3__c_7>:
     4cc:	09 20 28 42 61 64 2d 52 53 53 49 20 2d 20 77 69     . (Bad-RSSI - wi
     4dc:	6c 6c 20 63 68 65 63 6b 20 61 67 61 69 6e 20 61     ll check again a
     4ec:	66 74 65 72 20 69 6e 74 65 72 76 61 6c 29 00        fter interval).

000004fb <_ZZ21ensureFonaInitialisedbPbE3__c_6>:
     4fb:	43 68 65 63 6b 69 6e 67 20 52 53 53 49 20 2d 20     Checking RSSI - 
     50b:	63 75 72 72 65 6e 74 6c 79 3a 00                    currently:.

00000516 <_ZZ21ensureFonaInitialisedbPbE3__c_5>:
     516:	47 50 52 53 20 69 6e 69 74 69 61 6c 69 73 65 64     GPRS initialised
     526:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 21 00      successfully !.

00000536 <_ZZ21ensureFonaInitialisedbPbE3__c_4>:
     536:	41 6c 6c 20 61 74 74 65 6d 70 74 73 20 74 6f 20     All attempts to 
     546:	65 6e 61 62 6c 65 20 47 50 52 53 20 66 61 69 6c     enable GPRS fail
     556:	65 64 00                                            ed.

00000559 <_ZZ21ensureFonaInitialisedbPbE3__c_3>:
     559:	57 69 6c 6c 20 74 72 79 20 74 6f 20 65 6e 61 62     Will try to enab
     569:	6c 65 20 47 50 52 53 20 61 67 61 69 6e 20 73 68     le GPRS again sh
     579:	6f 72 74 6c 79 00                                   ortly.

0000057f <_ZZ21ensureFonaInitialisedbPbE3__c_2>:
     57f:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     58f:	6e 67 20 47 50 52 53 00                             ng GPRS.

00000597 <_ZZ21ensureFonaInitialisedbPbE3__c_1>:
     597:	41 74 74 65 6d 70 74 69 6e 67 20 74 6f 20 65 6e     Attempting to en
     5a7:	61 62 6c 65 20 47 50 52 53 2e 2e 2e 00              able GPRS....

000005b4 <_ZZ21ensureFonaInitialisedbPbE3__c_0>:
     5b4:	45 72 72 6f 72 20 69 6e 69 74 69 61 6c 69 73 69     Error initialisi
     5c4:	6e 67 20 66 6f 6e 61 2e 2e 2e 00                    ng fona....

000005cf <_ZZ21ensureFonaInitialisedbPbE3__c>:
     5cf:	49 6e 69 74 69 61 6c 69 73 69 6e 67 20 66 6f 6e     Initialising fon
     5df:	61 2e 2e 2e 00                                      a....

000005e4 <_ZZ5setupE3__c>:
     5e4:	53 74 61 72 74 69 6e 67 2e 2e 2e 00                 Starting....

000005f0 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c_0>:
     5f0:	32 20 53 65 6e 73 6f 72 2d 44 61 74 61 73 20 67     2 Sensor-Datas g
     600:	6f 69 6e 67 20 66 6f 72 20 74 72 61 6e 73 6d 69     oing for transmi
     610:	73 73 69 6f 6e 3a 00                                ssion:.

00000617 <_ZZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManagerE3__c>:
     617:	2a 2a 2a 2a 00                                      ****.

0000061c <_ZZN13ExtendedTests18endExtendedGsmTestEvE3__c>:
     61c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 20     ~~~~~~~~~~~~~~~ 
     62c:	45 78 74 65 6e 64 65 64 20 47 53 4d 20 54 65 73     Extended GSM Tes
     63c:	74 20 43 6f 6d 70 6c 65 74 65 7e 7e 7e 7e 7e 7e     t Complete~~~~~~
     64c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00                    ~~~~~~~~~~.

00000657 <digital_pin_to_timer_PGM>:
     657:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     667:	00 00 00 00                                         ....

0000066b <digital_pin_to_bit_mask_PGM>:
     66b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     67b:	04 08 10 20                                         ... 

0000067f <digital_pin_to_port_PGM>:
     67f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     68f:	03 03 03 03                                         ....

00000693 <port_to_input_PGM>:
     693:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000069d <port_to_output_PGM>:
     69d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000006a7 <port_to_mode_PGM>:
     6a7:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000006b2 <__ctors_start>:
     6b2:	a9 11       	cpse	r26, r9
     6b4:	50 16       	cp	r5, r16
     6b6:	40 18       	sub	r4, r0

000006b8 <__ctors_end>:
     6b8:	bf 11       	cpse	r27, r15

000006ba <__dtors_end>:
     6ba:	11 24       	eor	r1, r1
     6bc:	1f be       	out	0x3f, r1	; 63
     6be:	cf ef       	ldi	r28, 0xFF	; 255
     6c0:	d8 e0       	ldi	r29, 0x08	; 8
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	cd bf       	out	0x3d, r28	; 61

000006c6 <__do_copy_data>:
     6c6:	11 e0       	ldi	r17, 0x01	; 1
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b1 e0       	ldi	r27, 0x01	; 1
     6cc:	e2 e0       	ldi	r30, 0x02	; 2
     6ce:	f5 e4       	ldi	r31, 0x45	; 69
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <__do_copy_data+0x10>
     6d2:	05 90       	lpm	r0, Z+
     6d4:	0d 92       	st	X+, r0
     6d6:	a2 3c       	cpi	r26, 0xC2	; 194
     6d8:	b1 07       	cpc	r27, r17
     6da:	d9 f7       	brne	.-10     	; 0x6d2 <__do_copy_data+0xc>

000006dc <__do_clear_bss>:
     6dc:	24 e0       	ldi	r18, 0x04	; 4
     6de:	a2 ec       	ldi	r26, 0xC2	; 194
     6e0:	b1 e0       	ldi	r27, 0x01	; 1
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <.do_clear_bss_start>

000006e4 <.do_clear_bss_loop>:
     6e4:	1d 92       	st	X+, r1

000006e6 <.do_clear_bss_start>:
     6e6:	a1 3b       	cpi	r26, 0xB1	; 177
     6e8:	b2 07       	cpc	r27, r18
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <.do_clear_bss_loop>

000006ec <__do_global_ctors>:
     6ec:	13 e0       	ldi	r17, 0x03	; 3
     6ee:	cc e5       	ldi	r28, 0x5C	; 92
     6f0:	d3 e0       	ldi	r29, 0x03	; 3
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__do_global_ctors+0x10>
     6f4:	21 97       	sbiw	r28, 0x01	; 1
     6f6:	fe 01       	movw	r30, r28
     6f8:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__tablejump2__>
     6fc:	c9 35       	cpi	r28, 0x59	; 89
     6fe:	d1 07       	cpc	r29, r17
     700:	c9 f7       	brne	.-14     	; 0x6f4 <__do_global_ctors+0x8>
     702:	0e 94 6e 18 	call	0x30dc	; 0x30dc <main>
     706:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__do_global_dtors>

0000070a <__bad_interrupt>:
     70a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000070e <_ZN13Adafruit_FONA9availableEv>:
  return sendParseReply(F("AT+CBC"), F("+CBC: "), p, ',', 1);
}

boolean Adafruit_FONA::getADCVoltage(uint16_t *v) {
  return sendParseReply(F("AT+CADC?"), F("+CADC: 1,"), v);
}
     70e:	83 5e       	subi	r24, 0xE3	; 227
     710:	9e 4f       	sbci	r25, 0xFE	; 254
     712:	dc 01       	movw	r26, r24
     714:	8d 91       	ld	r24, X+
     716:	9c 91       	ld	r25, X
     718:	dc 01       	movw	r26, r24
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	04 80       	ldd	r0, Z+4	; 0x04
     720:	f5 81       	ldd	r31, Z+5	; 0x05
     722:	e0 2d       	mov	r30, r0
     724:	09 94       	ijmp

00000726 <_ZN13Adafruit_FONA5writeEh>:
     726:	83 5e       	subi	r24, 0xE3	; 227
     728:	9e 4f       	sbci	r25, 0xFE	; 254
     72a:	dc 01       	movw	r26, r24
     72c:	8d 91       	ld	r24, X+
     72e:	9c 91       	ld	r25, X
     730:	dc 01       	movw	r26, r24
     732:	ed 91       	ld	r30, X+
     734:	fc 91       	ld	r31, X
     736:	01 90       	ld	r0, Z+
     738:	f0 81       	ld	r31, Z
     73a:	e0 2d       	mov	r30, r0
     73c:	09 94       	ijmp

0000073e <_ZN13Adafruit_FONA4readEv>:
     73e:	83 5e       	subi	r24, 0xE3	; 227
     740:	9e 4f       	sbci	r25, 0xFE	; 254
     742:	dc 01       	movw	r26, r24
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	dc 01       	movw	r26, r24
     74a:	ed 91       	ld	r30, X+
     74c:	fc 91       	ld	r31, X
     74e:	06 80       	ldd	r0, Z+6	; 0x06
     750:	f7 81       	ldd	r31, Z+7	; 0x07
     752:	e0 2d       	mov	r30, r0
     754:	09 94       	ijmp

00000756 <_ZN13Adafruit_FONA4peekEv>:
     756:	83 5e       	subi	r24, 0xE3	; 227
     758:	9e 4f       	sbci	r25, 0xFE	; 254
     75a:	dc 01       	movw	r26, r24
     75c:	8d 91       	ld	r24, X+
     75e:	9c 91       	ld	r25, X
     760:	dc 01       	movw	r26, r24
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	00 84       	ldd	r0, Z+8	; 0x08
     768:	f1 85       	ldd	r31, Z+9	; 0x09
     76a:	e0 2d       	mov	r30, r0
     76c:	09 94       	ijmp

0000076e <_ZN13Adafruit_FONA5flushEv>:
     76e:	83 5e       	subi	r24, 0xE3	; 227
     770:	9e 4f       	sbci	r25, 0xFE	; 254
     772:	dc 01       	movw	r26, r24
     774:	8d 91       	ld	r24, X+
     776:	9c 91       	ld	r25, X
     778:	dc 01       	movw	r26, r24
     77a:	ed 91       	ld	r30, X+
     77c:	fc 91       	ld	r31, X
     77e:	02 84       	ldd	r0, Z+10	; 0x0a
     780:	f3 85       	ldd	r31, Z+11	; 0x0b
     782:	e0 2d       	mov	r30, r0
     784:	09 94       	ijmp

00000786 <_ZN13Adafruit_FONAC1Eab>:
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
     790:	06 2f       	mov	r16, r22
     792:	14 2f       	mov	r17, r20
     794:	1b 82       	std	Y+3, r1	; 0x03
     796:	1a 82       	std	Y+2, r1	; 0x02
     798:	88 ee       	ldi	r24, 0xE8	; 232
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	a0 e0       	ldi	r26, 0x00	; 0
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	8c 83       	std	Y+4, r24	; 0x04
     7a2:	9d 83       	std	Y+5, r25	; 0x05
     7a4:	ae 83       	std	Y+6, r26	; 0x06
     7a6:	bf 83       	std	Y+7, r27	; 0x07
     7a8:	85 e5       	ldi	r24, 0x55	; 85
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	99 83       	std	Y+1, r25	; 0x01
     7ae:	88 83       	st	Y, r24
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	8e 87       	std	Y+14, r24	; 0x0e
     7b4:	64 ea       	ldi	r22, 0xA4	; 164
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	ce 01       	movw	r24, r28
     7ba:	8b 5e       	subi	r24, 0xEB	; 235
     7bc:	9e 4f       	sbci	r25, 0xFE	; 254
     7be:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN6StringC1EPKc>
     7c2:	0c 87       	std	Y+12, r16	; 0x0c
     7c4:	1d 87       	std	Y+13, r17	; 0x0d
     7c6:	fe 01       	movw	r30, r28
     7c8:	e2 5f       	subi	r30, 0xF2	; 242
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	85 e1       	ldi	r24, 0x15	; 21
     7ce:	93 e0       	ldi	r25, 0x03	; 3
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	80 83       	st	Z, r24
     7d4:	32 96       	adiw	r30, 0x02	; 2
     7d6:	11 82       	std	Z+1, r1	; 0x01
     7d8:	10 82       	st	Z, r1
     7da:	32 96       	adiw	r30, 0x02	; 2
     7dc:	11 82       	std	Z+1, r1	; 0x01
     7de:	10 82       	st	Z, r1
     7e0:	3b 96       	adiw	r30, 0x0b	; 11
     7e2:	11 82       	std	Z+1, r1	; 0x01
     7e4:	10 82       	st	Z, r1
     7e6:	39 97       	sbiw	r30, 0x09	; 9
     7e8:	10 82       	st	Z, r1
     7ea:	c5 5e       	subi	r28, 0xE5	; 229
     7ec:	de 4f       	sbci	r29, 0xFE	; 254
     7ee:	82 e1       	ldi	r24, 0x12	; 18
     7f0:	93 e0       	ldi	r25, 0x03	; 3
     7f2:	99 83       	std	Y+1, r25	; 0x01
     7f4:	88 83       	st	Y, r24
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <_ZN13Adafruit_FONA12setUserAgentE6String>:
     800:	8b 5e       	subi	r24, 0xEB	; 235
     802:	9e 4f       	sbci	r25, 0xFE	; 254
     804:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <_ZN6StringaSERKS_>

00000808 <_ZN13Adafruit_FONA10flushInputEv>:
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	ec 01       	movw	r28, r24
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	8c 01       	movw	r16, r24
     818:	0f 5f       	subi	r16, 0xFF	; 255
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
     81c:	88 97       	sbiw	r24, 0x28	; 40
     81e:	d8 f4       	brcc	.+54     	; 0x856 <_ZN13Adafruit_FONA10flushInputEv+0x4e>
     820:	e8 81       	ld	r30, Y
     822:	f9 81       	ldd	r31, Y+1	; 0x01
     824:	04 80       	ldd	r0, Z+4	; 0x04
     826:	f5 81       	ldd	r31, Z+5	; 0x05
     828:	e0 2d       	mov	r30, r0
     82a:	ce 01       	movw	r24, r28
     82c:	09 95       	icall
     82e:	89 2b       	or	r24, r25
     830:	51 f0       	breq	.+20     	; 0x846 <_ZN13Adafruit_FONA10flushInputEv+0x3e>
     832:	e8 81       	ld	r30, Y
     834:	f9 81       	ldd	r31, Y+1	; 0x01
     836:	06 80       	ldd	r0, Z+6	; 0x06
     838:	f7 81       	ldd	r31, Z+7	; 0x07
     83a:	e0 2d       	mov	r30, r0
     83c:	ce 01       	movw	r24, r28
     83e:	09 95       	icall
     840:	00 e0       	ldi	r16, 0x00	; 0
     842:	10 e0       	ldi	r17, 0x00	; 0
     844:	ed cf       	rjmp	.-38     	; 0x820 <_ZN13Adafruit_FONA10flushInputEv+0x18>
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     852:	c8 01       	movw	r24, r16
     854:	e0 cf       	rjmp	.-64     	; 0x816 <_ZN13Adafruit_FONA10flushInputEv+0xe>
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>:
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	ec 01       	movw	r28, r24
     86c:	8b 01       	movw	r16, r22
     86e:	f4 2e       	mov	r15, r20
     870:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
     874:	60 e6       	ldi	r22, 0x60	; 96
     876:	71 e0       	ldi	r23, 0x01	; 1
     878:	83 ec       	ldi	r24, 0xC3	; 195
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     880:	62 e5       	ldi	r22, 0x52	; 82
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	83 ec       	ldi	r24, 0xC3	; 195
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     88c:	b8 01       	movw	r22, r16
     88e:	83 ec       	ldi	r24, 0xC3	; 195
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     896:	62 e2       	ldi	r22, 0x22	; 34
     898:	83 ec       	ldi	r24, 0xC3	; 195
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN5Print7printlnEc>
     8a0:	c3 5e       	subi	r28, 0xE3	; 227
     8a2:	de 4f       	sbci	r29, 0xFE	; 254
     8a4:	64 e4       	ldi	r22, 0x44	; 68
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	88 81       	ld	r24, Y
     8aa:	99 81       	ldd	r25, Y+1	; 0x01
     8ac:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     8b0:	b8 01       	movw	r22, r16
     8b2:	88 81       	ld	r24, Y
     8b4:	99 81       	ldd	r25, Y+1	; 0x01
     8b6:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	ff 20       	and	r15, r15
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x68>
     8c2:	60 e4       	ldi	r22, 0x40	; 64
     8c4:	71 e0       	ldi	r23, 0x01	; 1
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb+0x6c>
     8c8:	6d e3       	ldi	r22, 0x3D	; 61
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	0c 94 be 18 	jmp	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>

000008da <_ZN13Adafruit_FONA8readlineEjb>:
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	7c 01       	movw	r14, r24
     8ee:	b4 2e       	mov	r11, r20
     8f0:	8b 01       	movw	r16, r22
     8f2:	00 0f       	add	r16, r16
     8f4:	11 1f       	adc	r17, r17
     8f6:	00 0f       	add	r16, r16
     8f8:	11 1f       	adc	r17, r17
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
     8fc:	d0 e0       	ldi	r29, 0x00	; 0
     8fe:	67 01       	movw	r12, r14
     900:	83 ee       	ldi	r24, 0xE3	; 227
     902:	c8 1a       	sub	r12, r24
     904:	8e ef       	ldi	r24, 0xFE	; 254
     906:	d8 0a       	sbc	r13, r24
     908:	01 15       	cp	r16, r1
     90a:	11 05       	cpc	r17, r1
     90c:	c9 f1       	breq	.+114    	; 0x980 <__stack+0x81>
     90e:	ce 3f       	cpi	r28, 0xFE	; 254
     910:	d1 05       	cpc	r29, r1
     912:	98 f0       	brcs	.+38     	; 0x93a <__stack+0x3b>
     914:	62 e9       	ldi	r22, 0x92	; 146
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	83 ec       	ldi	r24, 0xC3	; 195
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
     920:	2f c0       	rjmp	.+94     	; 0x980 <__stack+0x81>
     922:	f6 01       	movw	r30, r12
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	dc 01       	movw	r26, r24
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
     92e:	06 80       	ldd	r0, Z+6	; 0x06
     930:	f7 81       	ldd	r31, Z+7	; 0x07
     932:	e0 2d       	mov	r30, r0
     934:	09 95       	icall
     936:	8d 30       	cpi	r24, 0x0D	; 13
     938:	69 f4       	brne	.+26     	; 0x954 <__stack+0x55>
     93a:	d6 01       	movw	r26, r12
     93c:	8d 91       	ld	r24, X+
     93e:	9c 91       	ld	r25, X
     940:	dc 01       	movw	r26, r24
     942:	ed 91       	ld	r30, X+
     944:	fc 91       	ld	r31, X
     946:	04 80       	ldd	r0, Z+4	; 0x04
     948:	f5 81       	ldd	r31, Z+5	; 0x05
     94a:	e0 2d       	mov	r30, r0
     94c:	09 95       	icall
     94e:	89 2b       	or	r24, r25
     950:	41 f7       	brne	.-48     	; 0x922 <__stack+0x23>
     952:	0c c0       	rjmp	.+24     	; 0x96c <__stack+0x6d>
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	21 f4       	brne	.+8      	; 0x960 <__stack+0x61>
     958:	20 97       	sbiw	r28, 0x00	; 0
     95a:	79 f3       	breq	.-34     	; 0x93a <__stack+0x3b>
     95c:	bb 20       	and	r11, r11
     95e:	81 f0       	breq	.+32     	; 0x980 <__stack+0x81>
     960:	f7 01       	movw	r30, r14
     962:	ec 0f       	add	r30, r28
     964:	fd 1f       	adc	r31, r29
     966:	87 87       	std	Z+15, r24	; 0x0f
     968:	21 96       	adiw	r28, 0x01	; 1
     96a:	e7 cf       	rjmp	.-50     	; 0x93a <__stack+0x3b>
     96c:	01 50       	subi	r16, 0x01	; 1
     96e:	11 09       	sbc	r17, r1
     970:	39 f0       	breq	.+14     	; 0x980 <__stack+0x81>
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     97e:	c4 cf       	rjmp	.-120    	; 0x908 <__stack+0x9>
     980:	f7 01       	movw	r30, r14
     982:	ec 0f       	add	r30, r28
     984:	fd 1f       	adc	r31, r29
     986:	17 86       	std	Z+15, r1	; 0x0f
     988:	8c 2f       	mov	r24, r28
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	08 95       	ret

0000099e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>:
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	8b 01       	movw	r16, r22
     9aa:	ba 01       	movw	r22, r20
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
     9b2:	68 e9       	ldi	r22, 0x98	; 152
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	83 ec       	ldi	r24, 0xC3	; 195
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     9be:	2f 96       	adiw	r28, 0x0f	; 15
     9c0:	be 01       	movw	r22, r28
     9c2:	83 ec       	ldi	r24, 0xC3	; 195
     9c4:	93 e0       	ldi	r25, 0x03	; 3
     9c6:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     9ca:	b8 01       	movw	r22, r16
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 b9 21 	call	0x4372	; 0x4372 <strcmp_P>
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	89 2b       	or	r24, r25
     9d6:	09 f0       	breq	.+2      	; 0x9da <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj+0x3c>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	82 2f       	mov	r24, r18
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <_ZN13Adafruit_FONA13HTTP_para_endEb>:
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	ec 01       	movw	r28, r24
     9ec:	fc 01       	movw	r30, r24
     9ee:	e3 5e       	subi	r30, 0xE3	; 227
     9f0:	fe 4f       	sbci	r31, 0xFE	; 254
     9f2:	66 23       	and	r22, r22
     9f4:	31 f0       	breq	.+12     	; 0xa02 <_ZN13Adafruit_FONA13HTTP_para_endEb+0x1c>
     9f6:	62 e2       	ldi	r22, 0x22	; 34
     9f8:	80 81       	ld	r24, Z
     9fa:	91 81       	ldd	r25, Z+1	; 0x01
     9fc:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN5Print7printlnEc>
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <_ZN13Adafruit_FONA13HTTP_para_endEb+0x24>
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
     a0a:	fe 01       	movw	r30, r28
     a0c:	e5 5e       	subi	r30, 0xE5	; 229
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	60 81       	ld	r22, Z
     a12:	71 81       	ldd	r23, Z+1	; 0x01
     a14:	40 e1       	ldi	r20, 0x10	; 16
     a16:	57 e2       	ldi	r21, 0x27	; 39
     a18:	ce 01       	movw	r24, r28
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000a22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>:
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ec 01       	movw	r28, r24
     a2c:	8a 01       	movw	r16, r20
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	0e 94 30 04 	call	0x860	; 0x860 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a34:	fe 01       	movw	r30, r28
     a36:	e3 5e       	subi	r30, 0xE3	; 227
     a38:	fe 4f       	sbci	r31, 0xFE	; 254
     a3a:	b8 01       	movw	r22, r16
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	ce 01       	movw	r24, r28
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000a54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>:
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	8a 01       	movw	r16, r20
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	0e 94 30 04 	call	0x860	; 0x860 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a66:	fe 01       	movw	r30, r28
     a68:	e3 5e       	subi	r30, 0xE3	; 227
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	b8 01       	movw	r22, r16
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <_ZN5Print5printERK6String>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	ce 01       	movw	r24, r28
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000a86 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>:
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ec 01       	movw	r28, r24
     a90:	8a 01       	movw	r16, r20
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	0e 94 30 04 	call	0x860	; 0x860 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     a98:	fe 01       	movw	r30, r28
     a9a:	e3 5e       	subi	r30, 0xE3	; 227
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	b8 01       	movw	r22, r16
     aa0:	80 81       	ld	r24, Z
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	ce 01       	movw	r24, r28
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000ab8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>:
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ec 01       	movw	r28, r24
     ac6:	69 01       	movw	r12, r18
     ac8:	7a 01       	movw	r14, r20
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	0e 94 30 04 	call	0x860	; 0x860 <_ZN13Adafruit_FONA15HTTP_para_startEPK19__FlashStringHelperb>
     ad0:	fe 01       	movw	r30, r28
     ad2:	e3 5e       	subi	r30, 0xE3	; 227
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	2a e0       	ldi	r18, 0x0A	; 10
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	b7 01       	movw	r22, r14
     adc:	a6 01       	movw	r20, r12
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZN5Print5printEli>
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	ce 01       	movw	r24, r28
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN13Adafruit_FONA13HTTP_para_endEb>

00000afa <_ZN13Adafruit_FONA9HTTP_dataEmm>:
     afa:	4f 92       	push	r4
     afc:	5f 92       	push	r5
     afe:	6f 92       	push	r6
     b00:	7f 92       	push	r7
     b02:	8f 92       	push	r8
     b04:	9f 92       	push	r9
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	7c 01       	movw	r14, r24
     b18:	2a 01       	movw	r4, r20
     b1a:	3b 01       	movw	r6, r22
     b1c:	48 01       	movw	r8, r16
     b1e:	59 01       	movw	r10, r18
     b20:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
     b24:	66 e3       	ldi	r22, 0x36	; 54
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	83 ec       	ldi	r24, 0xC3	; 195
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     b30:	69 e2       	ldi	r22, 0x29	; 41
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	83 ec       	ldi	r24, 0xC3	; 195
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     b3c:	2a e0       	ldi	r18, 0x0A	; 10
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	b3 01       	movw	r22, r6
     b42:	a2 01       	movw	r20, r4
     b44:	83 ec       	ldi	r24, 0xC3	; 195
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN5Print5printEmi>
     b4c:	6c e2       	ldi	r22, 0x2C	; 44
     b4e:	83 ec       	ldi	r24, 0xC3	; 195
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN5Print5printEc>
     b56:	2a e0       	ldi	r18, 0x0A	; 10
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	b5 01       	movw	r22, r10
     b5c:	a4 01       	movw	r20, r8
     b5e:	83 ec       	ldi	r24, 0xC3	; 195
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 ba 19 	call	0x3374	; 0x3374 <_ZN5Print7printlnEmi>
     b66:	e7 01       	movw	r28, r14
     b68:	c3 5e       	subi	r28, 0xE3	; 227
     b6a:	de 4f       	sbci	r29, 0xFE	; 254
     b6c:	6c e1       	ldi	r22, 0x1C	; 28
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	88 81       	ld	r24, Y
     b72:	99 81       	ldd	r25, Y+1	; 0x01
     b74:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     b78:	2a e0       	ldi	r18, 0x0A	; 10
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	b3 01       	movw	r22, r6
     b7e:	a2 01       	movw	r20, r4
     b80:	88 81       	ld	r24, Y
     b82:	99 81       	ldd	r25, Y+1	; 0x01
     b84:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN5Print5printEmi>
     b88:	67 e0       	ldi	r22, 0x07	; 7
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	88 81       	ld	r24, Y
     b8e:	99 81       	ldd	r25, Y+1	; 0x01
     b90:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
     b94:	2a e0       	ldi	r18, 0x0A	; 10
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	b5 01       	movw	r22, r10
     b9a:	a4 01       	movw	r20, r8
     b9c:	88 81       	ld	r24, Y
     b9e:	99 81       	ldd	r25, Y+1	; 0x01
     ba0:	0e 94 ba 19 	call	0x3374	; 0x3374 <_ZN5Print7printlnEmi>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	57 e2       	ldi	r21, 0x27	; 39
     ba8:	63 e1       	ldi	r22, 0x13	; 19
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	c7 01       	movw	r24, r14
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	7f 90       	pop	r7
     bc4:	6f 90       	pop	r6
     bc6:	5f 90       	pop	r5
     bc8:	4f 90       	pop	r4
     bca:	0c 94 cf 04 	jmp	0x99e	; 0x99e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>

00000bce <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>:
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
     bdc:	8b 01       	movw	r16, r22
     bde:	7a 01       	movw	r14, r20
     be0:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
     be4:	6b e8       	ldi	r22, 0x8B	; 139
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	83 ec       	ldi	r24, 0xC3	; 195
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     bf0:	b8 01       	movw	r22, r16
     bf2:	83 ec       	ldi	r24, 0xC3	; 195
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
     bfa:	fe 01       	movw	r30, r28
     bfc:	e3 5e       	subi	r30, 0xE3	; 227
     bfe:	fe 4f       	sbci	r31, 0xFE	; 254
     c00:	b8 01       	movw	r22, r16
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	b7 01       	movw	r22, r14
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
     c14:	18 2f       	mov	r17, r24
     c16:	64 e8       	ldi	r22, 0x84	; 132
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	83 ec       	ldi	r24, 0xC3	; 195
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     c22:	be 01       	movw	r22, r28
     c24:	61 5f       	subi	r22, 0xF1	; 241
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	83 ec       	ldi	r24, 0xC3	; 195
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     c30:	81 2f       	mov	r24, r17
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	08 95       	ret

00000c40 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>:
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
     c5a:	6b 01       	movw	r12, r22
     c5c:	49 01       	movw	r8, r18
     c5e:	5a 01       	movw	r10, r20
     c60:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
     c64:	6d e7       	ldi	r22, 0x7D	; 125
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	83 ec       	ldi	r24, 0xC3	; 195
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     c70:	b6 01       	movw	r22, r12
     c72:	83 ec       	ldi	r24, 0xC3	; 195
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     c7a:	2a e0       	ldi	r18, 0x0A	; 10
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	b5 01       	movw	r22, r10
     c80:	a4 01       	movw	r20, r8
     c82:	83 ec       	ldi	r24, 0xC3	; 195
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	0e 94 2d 1a 	call	0x345a	; 0x345a <_ZN5Print7printlnEli>
     c8a:	7e 01       	movw	r14, r28
     c8c:	83 ee       	ldi	r24, 0xE3	; 227
     c8e:	e8 1a       	sub	r14, r24
     c90:	8e ef       	ldi	r24, 0xFE	; 254
     c92:	f8 0a       	sbc	r15, r24
     c94:	b6 01       	movw	r22, r12
     c96:	f7 01       	movw	r30, r14
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	b5 01       	movw	r22, r10
     ca6:	a4 01       	movw	r20, r8
     ca8:	f7 01       	movw	r30, r14
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	0e 94 2d 1a 	call	0x345a	; 0x345a <_ZN5Print7printlnEli>
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	b8 01       	movw	r22, r16
     cb6:	ce 01       	movw	r24, r28
     cb8:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
     cbc:	18 2f       	mov	r17, r24
     cbe:	66 e7       	ldi	r22, 0x76	; 118
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	83 ec       	ldi	r24, 0xC3	; 195
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     cca:	be 01       	movw	r22, r28
     ccc:	61 5f       	subi	r22, 0xF1	; 241
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	83 ec       	ldi	r24, 0xC3	; 195
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     cd8:	81 2f       	mov	r24, r17
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	bf 90       	pop	r11
     cec:	af 90       	pop	r10
     cee:	9f 90       	pop	r9
     cf0:	8f 90       	pop	r8
     cf2:	08 95       	ret

00000cf4 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>:
     cf4:	af 92       	push	r10
     cf6:	bf 92       	push	r11
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ec 01       	movw	r28, r24
     d0a:	6b 01       	movw	r12, r22
     d0c:	7a 01       	movw	r14, r20
     d0e:	59 01       	movw	r10, r18
     d10:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
     d14:	6f e6       	ldi	r22, 0x6F	; 111
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	83 ec       	ldi	r24, 0xC3	; 195
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     d20:	b6 01       	movw	r22, r12
     d22:	83 ec       	ldi	r24, 0xC3	; 195
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     d2a:	62 e2       	ldi	r22, 0x22	; 34
     d2c:	83 ec       	ldi	r24, 0xC3	; 195
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN5Print5printEc>
     d34:	b7 01       	movw	r22, r14
     d36:	83 ec       	ldi	r24, 0xC3	; 195
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     d3e:	62 e2       	ldi	r22, 0x22	; 34
     d40:	83 ec       	ldi	r24, 0xC3	; 195
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN5Print7printlnEc>
     d48:	8e 01       	movw	r16, r28
     d4a:	03 5e       	subi	r16, 0xE3	; 227
     d4c:	1e 4f       	sbci	r17, 0xFE	; 254
     d4e:	b6 01       	movw	r22, r12
     d50:	f8 01       	movw	r30, r16
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     d5a:	62 e2       	ldi	r22, 0x22	; 34
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN5Print5printEc>
     d66:	b7 01       	movw	r22, r14
     d68:	f8 01       	movw	r30, r16
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     d72:	62 e2       	ldi	r22, 0x22	; 34
     d74:	f8 01       	movw	r30, r16
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN5Print7printlnEc>
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	b5 01       	movw	r22, r10
     d82:	ce 01       	movw	r24, r28
     d84:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
     d88:	18 2f       	mov	r17, r24
     d8a:	68 e6       	ldi	r22, 0x68	; 104
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	83 ec       	ldi	r24, 0xC3	; 195
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     d96:	be 01       	movw	r22, r28
     d98:	61 5f       	subi	r22, 0xF1	; 241
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	83 ec       	ldi	r24, 0xC3	; 195
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     da4:	81 2f       	mov	r24, r17
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	08 95       	ret

00000dbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>:
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
     dc6:	8a 01       	movw	r16, r20
     dc8:	a9 01       	movw	r20, r18
     dca:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
     dce:	88 23       	and	r24, r24
     dd0:	41 f0       	breq	.+16     	; 0xde2 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x26>
     dd2:	b8 01       	movw	r22, r16
     dd4:	ce 01       	movw	r24, r28
     dd6:	0f 96       	adiw	r24, 0x0f	; 15
     dd8:	0e 94 b9 21 	call	0x4372	; 0x4372 <strcmp_P>
     ddc:	21 e0       	ldi	r18, 0x01	; 1
     dde:	89 2b       	or	r24, r25
     de0:	09 f0       	breq	.+2      	; 0xde4 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j+0x28>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	82 2f       	mov	r24, r18
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <_ZN13Adafruit_FONA5beginEhh>:
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
     e02:	f6 2e       	mov	r15, r22
     e04:	e4 2e       	mov	r14, r20
     e06:	8f e1       	ldi	r24, 0x1F	; 31
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_Znwj>
     e0e:	8c 01       	movw	r16, r24
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	4e 2d       	mov	r20, r14
     e14:	6f 2d       	mov	r22, r15
     e16:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_ZN14SoftwareSerialC1Ehhb>
     e1a:	7e 01       	movw	r14, r28
     e1c:	83 ee       	ldi	r24, 0xE3	; 227
     e1e:	e8 1a       	sub	r14, r24
     e20:	8e ef       	ldi	r24, 0xFE	; 254
     e22:	f8 0a       	sbc	r15, r24
     e24:	d7 01       	movw	r26, r14
     e26:	0d 93       	st	X+, r16
     e28:	1c 93       	st	X, r17
     e2a:	40 ec       	ldi	r20, 0xC0	; 192
     e2c:	52 e1       	ldi	r21, 0x12	; 18
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	c8 01       	movw	r24, r16
     e34:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <_ZN14SoftwareSerial5beginEl>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3c:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <pinMode>
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	8c 85       	ldd	r24, Y+12	; 0x0c
     e44:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
     e48:	6a e0       	ldi	r22, 0x0A	; 10
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	8c 85       	ldd	r24, Y+12	; 0x0c
     e58:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
     e5c:	64 e6       	ldi	r22, 0x64	; 100
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e6c:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
     e70:	61 ef       	ldi	r22, 0xF1	; 241
     e72:	72 e0       	ldi	r23, 0x02	; 2
     e74:	83 ec       	ldi	r24, 0xC3	; 195
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
     e7c:	8e e0       	ldi	r24, 0x0E	; 14
     e7e:	c8 2e       	mov	r12, r24
     e80:	d1 2c       	mov	r13, r1
     e82:	8e 01       	movw	r16, r28
     e84:	05 5e       	subi	r16, 0xE5	; 229
     e86:	1e 4f       	sbci	r17, 0xFE	; 254
     e88:	f7 01       	movw	r30, r14
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	dc 01       	movw	r26, r24
     e90:	ed 91       	ld	r30, X+
     e92:	fc 91       	ld	r31, X
     e94:	04 80       	ldd	r0, Z+4	; 0x04
     e96:	f5 81       	ldd	r31, Z+5	; 0x05
     e98:	e0 2d       	mov	r30, r0
     e9a:	09 95       	icall
     e9c:	89 2b       	or	r24, r25
     e9e:	59 f0       	breq	.+22     	; 0xeb6 <_ZN13Adafruit_FONA5beginEhh+0xc6>
     ea0:	f7 01       	movw	r30, r14
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	dc 01       	movw	r26, r24
     ea8:	ed 91       	ld	r30, X+
     eaa:	fc 91       	ld	r31, X
     eac:	06 80       	ldd	r0, Z+6	; 0x06
     eae:	f7 81       	ldd	r31, Z+7	; 0x07
     eb0:	e0 2d       	mov	r30, r0
     eb2:	09 95       	icall
     eb4:	e9 cf       	rjmp	.-46     	; 0xe88 <_ZN13Adafruit_FONA5beginEhh+0x98>
     eb6:	f8 01       	movw	r30, r16
     eb8:	40 81       	ld	r20, Z
     eba:	51 81       	ldd	r21, Z+1	; 0x01
     ebc:	24 ef       	ldi	r18, 0xF4	; 244
     ebe:	31 e0       	ldi	r19, 0x01	; 1
     ec0:	6e ee       	ldi	r22, 0xEE	; 238
     ec2:	72 e0       	ldi	r23, 0x02	; 2
     ec4:	ce 01       	movw	r24, r28
     ec6:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     eca:	81 11       	cpse	r24, r1
     ecc:	34 c0       	rjmp	.+104    	; 0xf36 <_ZN13Adafruit_FONA5beginEhh+0x146>
     ece:	d7 01       	movw	r26, r14
     ed0:	8d 91       	ld	r24, X+
     ed2:	9c 91       	ld	r25, X
     ed4:	dc 01       	movw	r26, r24
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	04 80       	ldd	r0, Z+4	; 0x04
     edc:	f5 81       	ldd	r31, Z+5	; 0x05
     ede:	e0 2d       	mov	r30, r0
     ee0:	09 95       	icall
     ee2:	89 2b       	or	r24, r25
     ee4:	59 f0       	breq	.+22     	; 0xefc <_ZN13Adafruit_FONA5beginEhh+0x10c>
     ee6:	f7 01       	movw	r30, r14
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	dc 01       	movw	r26, r24
     eee:	ed 91       	ld	r30, X+
     ef0:	fc 91       	ld	r31, X
     ef2:	06 80       	ldd	r0, Z+6	; 0x06
     ef4:	f7 81       	ldd	r31, Z+7	; 0x07
     ef6:	e0 2d       	mov	r30, r0
     ef8:	09 95       	icall
     efa:	e9 cf       	rjmp	.-46     	; 0xece <_ZN13Adafruit_FONA5beginEhh+0xde>
     efc:	24 ef       	ldi	r18, 0xF4	; 244
     efe:	31 e0       	ldi	r19, 0x01	; 1
     f00:	4b ee       	ldi	r20, 0xEB	; 235
     f02:	52 e0       	ldi	r21, 0x02	; 2
     f04:	68 ee       	ldi	r22, 0xE8	; 232
     f06:	72 e0       	ldi	r23, 0x02	; 2
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f0e:	81 11       	cpse	r24, r1
     f10:	12 c0       	rjmp	.+36     	; 0xf36 <_ZN13Adafruit_FONA5beginEhh+0x146>
     f12:	64 ef       	ldi	r22, 0xF4	; 244
     f14:	71 e0       	ldi	r23, 0x01	; 1
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     f1e:	b1 e0       	ldi	r27, 0x01	; 1
     f20:	cb 1a       	sub	r12, r27
     f22:	d1 08       	sbc	r13, r1
     f24:	09 f0       	breq	.+2      	; 0xf28 <_ZN13Adafruit_FONA5beginEhh+0x138>
     f26:	b0 cf       	rjmp	.-160    	; 0xe88 <_ZN13Adafruit_FONA5beginEhh+0x98>
     f28:	5e c0       	rjmp	.+188    	; 0xfe6 <_ZN13Adafruit_FONA5beginEhh+0x1f6>
     f2a:	64 e6       	ldi	r22, 0x64	; 100
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     f36:	f8 01       	movw	r30, r16
     f38:	40 81       	ld	r20, Z
     f3a:	51 81       	ldd	r21, Z+1	; 0x01
     f3c:	24 ef       	ldi	r18, 0xF4	; 244
     f3e:	31 e0       	ldi	r19, 0x01	; 1
     f40:	6b eb       	ldi	r22, 0xBB	; 187
     f42:	72 e0       	ldi	r23, 0x02	; 2
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f4a:	64 e6       	ldi	r22, 0x64	; 100
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     f56:	d8 01       	movw	r26, r16
     f58:	4d 91       	ld	r20, X+
     f5a:	5c 91       	ld	r21, X
     f5c:	24 ef       	ldi	r18, 0xF4	; 244
     f5e:	31 e0       	ldi	r19, 0x01	; 1
     f60:	66 eb       	ldi	r22, 0xB6	; 182
     f62:	72 e0       	ldi	r23, 0x02	; 2
     f64:	ce 01       	movw	r24, r28
     f66:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     f6a:	81 11       	cpse	r24, r1
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <_ZN13Adafruit_FONA5beginEhh+0x182>
     f6e:	12 e0       	ldi	r17, 0x02	; 2
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <_ZN13Adafruit_FONA5beginEhh+0x184>
     f72:	11 e0       	ldi	r17, 0x01	; 1
     f74:	64 e6       	ldi	r22, 0x64	; 100
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
     f86:	6f ea       	ldi	r22, 0xAF	; 175
     f88:	72 e0       	ldi	r23, 0x02	; 2
     f8a:	83 ec       	ldi	r24, 0xC3	; 195
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     f92:	69 e0       	ldi	r22, 0x09	; 9
     f94:	71 e0       	ldi	r23, 0x01	; 1
     f96:	83 ec       	ldi	r24, 0xC3	; 195
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     f9e:	69 e0       	ldi	r22, 0x09	; 9
     fa0:	71 e0       	ldi	r23, 0x01	; 1
     fa2:	f7 01       	movw	r30, r14
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	64 ef       	ldi	r22, 0xF4	; 244
     fb0:	71 e0       	ldi	r23, 0x01	; 1
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
     fb8:	68 ea       	ldi	r22, 0xA8	; 168
     fba:	72 e0       	ldi	r23, 0x02	; 2
     fbc:	83 ec       	ldi	r24, 0xC3	; 195
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
     fc4:	2f 96       	adiw	r28, 0x0f	; 15
     fc6:	be 01       	movw	r22, r28
     fc8:	83 ec       	ldi	r24, 0xC3	; 195
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
     fd0:	6d e9       	ldi	r22, 0x9D	; 157
     fd2:	72 e0       	ldi	r23, 0x02	; 2
     fd4:	ce 01       	movw	r24, r28
     fd6:	0e 94 cb 21 	call	0x4396	; 0x4396 <strstr_P>
     fda:	89 2b       	or	r24, r25
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <_ZN13Adafruit_FONA5beginEhh+0x1f2>
     fde:	81 2f       	mov	r24, r17
     fe0:	35 c0       	rjmp	.+106    	; 0x104c <_ZN13Adafruit_FONA5beginEhh+0x25c>
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	33 c0       	rjmp	.+102    	; 0x104c <_ZN13Adafruit_FONA5beginEhh+0x25c>
     fe6:	d8 01       	movw	r26, r16
     fe8:	4d 91       	ld	r20, X+
     fea:	5c 91       	ld	r21, X
     fec:	24 ef       	ldi	r18, 0xF4	; 244
     fee:	31 e0       	ldi	r19, 0x01	; 1
     ff0:	65 ee       	ldi	r22, 0xE5	; 229
     ff2:	72 e0       	ldi	r23, 0x02	; 2
     ff4:	ce 01       	movw	r24, r28
     ff6:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
     ffa:	64 e6       	ldi	r22, 0x64	; 100
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
    1006:	f8 01       	movw	r30, r16
    1008:	40 81       	ld	r20, Z
    100a:	51 81       	ldd	r21, Z+1	; 0x01
    100c:	24 ef       	ldi	r18, 0xF4	; 244
    100e:	31 e0       	ldi	r19, 0x01	; 1
    1010:	62 ee       	ldi	r22, 0xE2	; 226
    1012:	72 e0       	ldi	r23, 0x02	; 2
    1014:	ce 01       	movw	r24, r28
    1016:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    101a:	64 e6       	ldi	r22, 0x64	; 100
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
    1026:	d8 01       	movw	r26, r16
    1028:	4d 91       	ld	r20, X+
    102a:	5c 91       	ld	r21, X
    102c:	24 ef       	ldi	r18, 0xF4	; 244
    102e:	31 e0       	ldi	r19, 0x01	; 1
    1030:	6f ed       	ldi	r22, 0xDF	; 223
    1032:	72 e0       	ldi	r23, 0x02	; 2
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    103a:	81 11       	cpse	r24, r1
    103c:	76 cf       	rjmp	.-276    	; 0xf2a <_ZN13Adafruit_FONA5beginEhh+0x13a>
    103e:	60 ec       	ldi	r22, 0xC0	; 192
    1040:	72 e0       	ldi	r23, 0x02	; 2
    1042:	83 ec       	ldi	r24, 0xC3	; 195
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	08 95       	ret

0000105e <_ZN13Adafruit_FONA9HTTP_initEv>:
    105e:	fc 01       	movw	r30, r24
    1060:	e5 5e       	subi	r30, 0xE5	; 229
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	40 81       	ld	r20, Z
    1066:	51 81       	ldd	r21, Z+1	; 0x01
    1068:	24 ef       	ldi	r18, 0xF4	; 244
    106a:	31 e0       	ldi	r19, 0x01	; 1
    106c:	63 e7       	ldi	r22, 0x73	; 115
    106e:	71 e0       	ldi	r23, 0x01	; 1
    1070:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

00001074 <_ZN13Adafruit_FONA9HTTP_termEv>:
    1074:	fc 01       	movw	r30, r24
    1076:	e5 5e       	subi	r30, 0xE5	; 229
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	40 81       	ld	r20, Z
    107c:	51 81       	ldd	r21, Z+1	; 0x01
    107e:	24 ef       	ldi	r18, 0xF4	; 244
    1080:	31 e0       	ldi	r19, 0x01	; 1
    1082:	67 e6       	ldi	r22, 0x67	; 103
    1084:	71 e0       	ldi	r23, 0x01	; 1
    1086:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>

0000108a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>:
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	68 01       	movw	r12, r16
    109e:	87 01       	movw	r16, r14
    10a0:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperlj>
    10a4:	b6 01       	movw	r22, r12
    10a6:	ce 01       	movw	r24, r28
    10a8:	0f 96       	adiw	r24, 0x0f	; 15
    10aa:	0e 94 b9 21 	call	0x4372	; 0x4372 <strcmp_P>
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	89 2b       	or	r24, r25
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j+0x2c>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	82 2f       	mov	r24, r18
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret

000010ca <_ZN13Adafruit_FONA8HTTP_sslEb>:
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	fc 01       	movw	r30, r24
    10d4:	e5 5e       	subi	r30, 0xE5	; 229
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	00 81       	ld	r16, Z
    10da:	11 81       	ldd	r17, Z+1	; 0x01
    10dc:	26 2f       	mov	r18, r22
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	64 ef       	ldi	r22, 0xF4	; 244
    10e6:	e6 2e       	mov	r14, r22
    10e8:	ff 24       	eor	r15, r15
    10ea:	f3 94       	inc	r15
    10ec:	67 ec       	ldi	r22, 0xC7	; 199
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	08 95       	ret

000010fe <_ZN13Adafruit_FONA10HTTP_setupEPc>:
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	00 d0       	rcall	.+0      	; 0x110e <_ZN13Adafruit_FONA10HTTP_setupEPc+0x10>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x12>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x14>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	8c 01       	movw	r16, r24
    1118:	7b 01       	movw	r14, r22
    111a:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN13Adafruit_FONA9HTTP_termEv>
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 2f 08 	call	0x105e	; 0x105e <_ZN13Adafruit_FONA9HTTP_initEv>
    1124:	81 11       	cpse	r24, r1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2e>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	3e c0       	rjmp	.+124    	; 0x11a8 <_ZN13Adafruit_FONA10HTTP_setupEPc+0xaa>
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	6c ea       	ldi	r22, 0xAC	; 172
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	c8 01       	movw	r24, r16
    113a:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    113e:	88 23       	and	r24, r24
    1140:	99 f3       	breq	.-26     	; 0x1128 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    1142:	b8 01       	movw	r22, r16
    1144:	6b 5e       	subi	r22, 0xEB	; 235
    1146:	7e 4f       	sbci	r23, 0xFE	; 254
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6StringC1ERKS_>
    1150:	ae 01       	movw	r20, r28
    1152:	4f 5f       	subi	r20, 0xFF	; 255
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	69 ea       	ldi	r22, 0xA9	; 169
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	c8 01       	movw	r24, r16
    115c:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelper6String>
    1160:	d8 2e       	mov	r13, r24
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <_ZN6StringD1Ev>
    116a:	dd 20       	and	r13, r13
    116c:	e9 f2       	breq	.-70     	; 0x1128 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    116e:	a7 01       	movw	r20, r14
    1170:	65 ea       	ldi	r22, 0xA5	; 165
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	c8 01       	movw	r24, r16
    1176:	0e 94 11 05 	call	0xa22	; 0xa22 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperPKc>
    117a:	88 23       	and	r24, r24
    117c:	a9 f2       	breq	.-86     	; 0x1128 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    117e:	f8 01       	movw	r30, r16
    1180:	ec 5e       	subi	r30, 0xEC	; 236
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	90 81       	ld	r25, Z
    1186:	99 23       	and	r25, r25
    1188:	79 f0       	breq	.+30     	; 0x11a8 <_ZN13Adafruit_FONA10HTTP_setupEPc+0xaa>
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	6f e9       	ldi	r22, 0x9F	; 159
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	c8 01       	movw	r24, r16
    1198:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperl>
    119c:	88 23       	and	r24, r24
    119e:	21 f2       	breq	.-120    	; 0x1128 <_ZN13Adafruit_FONA10HTTP_setupEPc+0x2a>
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <_ZN13Adafruit_FONA8HTTP_sslEb>
    11a8:	26 96       	adiw	r28, 0x06	; 6
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	08 95       	ret

000011c4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>:
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	ec 01       	movw	r28, r24
    11d2:	79 01       	movw	r14, r18
    11d4:	98 01       	movw	r18, r16
    11d6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN13Adafruit_FONA14getReplyQuotedEPK19__FlashStringHelperS2_j>
    11da:	b7 01       	movw	r22, r14
    11dc:	ce 01       	movw	r24, r28
    11de:	0f 96       	adiw	r24, 0x0f	; 15
    11e0:	0e 94 b9 21 	call	0x4372	; 0x4372 <strcmp_P>
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	89 2b       	or	r24, r25
    11e8:	09 f0       	breq	.+2      	; 0x11ec <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j+0x28>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	82 2f       	mov	r24, r18
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	08 95       	ret

000011fc <_ZN13Adafruit_FONA10enableGPRSEb>:
    11fc:	7f 92       	push	r7
    11fe:	8f 92       	push	r8
    1200:	9f 92       	push	r9
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	28 ee       	ldi	r18, 0xE8	; 232
    121a:	3d ef       	ldi	r19, 0xFD	; 253
    121c:	66 23       	and	r22, r22
    121e:	09 f4       	brne	.+2      	; 0x1222 <_ZN13Adafruit_FONA10enableGPRSEb+0x26>
    1220:	1f c1       	rjmp	.+574    	; 0x1460 <_ZN13Adafruit_FONA10enableGPRSEb+0x264>
    1222:	47 e5       	ldi	r20, 0x57	; 87
    1224:	52 e0       	ldi	r21, 0x02	; 2
    1226:	6c e4       	ldi	r22, 0x4C	; 76
    1228:	72 e0       	ldi	r23, 0x02	; 2
    122a:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    122e:	81 11       	cpse	r24, r1
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <_ZN13Adafruit_FONA10enableGPRSEb+0x3c>
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	78 2e       	mov	r7, r24
    1236:	02 c0       	rjmp	.+4      	; 0x123c <_ZN13Adafruit_FONA10enableGPRSEb+0x40>
    1238:	77 24       	eor	r7, r7
    123a:	73 94       	inc	r7
    123c:	7e 01       	movw	r14, r28
    123e:	85 ee       	ldi	r24, 0xE5	; 229
    1240:	e8 1a       	sub	r14, r24
    1242:	8e ef       	ldi	r24, 0xFE	; 254
    1244:	f8 0a       	sbc	r15, r24
    1246:	f7 01       	movw	r30, r14
    1248:	40 81       	ld	r20, Z
    124a:	51 81       	ldd	r21, Z+1	; 0x01
    124c:	20 e1       	ldi	r18, 0x10	; 16
    124e:	37 e2       	ldi	r19, 0x27	; 39
    1250:	61 e4       	ldi	r22, 0x41	; 65
    1252:	72 e0       	ldi	r23, 0x02	; 2
    1254:	ce 01       	movw	r24, r28
    1256:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    125a:	88 23       	and	r24, r24
    125c:	09 f4       	brne	.+2      	; 0x1260 <_ZN13Adafruit_FONA10enableGPRSEb+0x64>
    125e:	25 c1       	rjmp	.+586    	; 0x14aa <_ZN13Adafruit_FONA10enableGPRSEb+0x2ae>
    1260:	f7 01       	movw	r30, r14
    1262:	40 81       	ld	r20, Z
    1264:	51 81       	ldd	r21, Z+1	; 0x01
    1266:	20 e1       	ldi	r18, 0x10	; 16
    1268:	37 e2       	ldi	r19, 0x27	; 39
    126a:	63 e2       	ldi	r22, 0x23	; 35
    126c:	72 e0       	ldi	r23, 0x02	; 2
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1274:	88 23       	and	r24, r24
    1276:	09 f4       	brne	.+2      	; 0x127a <_ZN13Adafruit_FONA10enableGPRSEb+0x7e>
    1278:	1a c1       	rjmp	.+564    	; 0x14ae <_ZN13Adafruit_FONA10enableGPRSEb+0x2b2>
    127a:	4e 01       	movw	r8, r28
    127c:	f2 ef       	ldi	r31, 0xF2	; 242
    127e:	8f 1a       	sub	r8, r31
    1280:	fe ef       	ldi	r31, 0xFE	; 254
    1282:	9f 0a       	sbc	r9, r31
    1284:	f4 01       	movw	r30, r8
    1286:	40 81       	ld	r20, Z
    1288:	51 81       	ldd	r21, Z+1	; 0x01
    128a:	41 15       	cp	r20, r1
    128c:	51 05       	cpc	r21, r1
    128e:	71 f4       	brne	.+28     	; 0x12ac <_ZN13Adafruit_FONA10enableGPRSEb+0xb0>
    1290:	f7 01       	movw	r30, r14
    1292:	40 81       	ld	r20, Z
    1294:	51 81       	ldd	r21, Z+1	; 0x01
    1296:	2f ef       	ldi	r18, 0xFF	; 255
    1298:	3f ef       	ldi	r19, 0xFF	; 255
    129a:	6e eb       	ldi	r22, 0xBE	; 190
    129c:	71 e0       	ldi	r23, 0x01	; 1
    129e:	ce 01       	movw	r24, r28
    12a0:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    12a4:	81 11       	cpse	r24, r1
    12a6:	ce c0       	rjmp	.+412    	; 0x1444 <_ZN13Adafruit_FONA10enableGPRSEb+0x248>
    12a8:	89 e0       	ldi	r24, 0x09	; 9
    12aa:	0e c1       	rjmp	.+540    	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    12ac:	f7 01       	movw	r30, r14
    12ae:	20 81       	ld	r18, Z
    12b0:	31 81       	ldd	r19, Z+1	; 0x01
    12b2:	00 e1       	ldi	r16, 0x10	; 16
    12b4:	17 e2       	ldi	r17, 0x27	; 39
    12b6:	6f e0       	ldi	r22, 0x0F	; 15
    12b8:	72 e0       	ldi	r23, 0x02	; 2
    12ba:	ce 01       	movw	r24, r28
    12bc:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    12c0:	88 23       	and	r24, r24
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <_ZN13Adafruit_FONA10enableGPRSEb+0xca>
    12c4:	f6 c0       	rjmp	.+492    	; 0x14b2 <_ZN13Adafruit_FONA10enableGPRSEb+0x2b6>
    12c6:	ce 01       	movw	r24, r28
    12c8:	0e 94 04 04 	call	0x808	; 0x808 <_ZN13Adafruit_FONA10flushInputEv>
    12cc:	8e 01       	movw	r16, r28
    12ce:	03 5e       	subi	r16, 0xE3	; 227
    12d0:	1e 4f       	sbci	r17, 0xFE	; 254
    12d2:	65 e0       	ldi	r22, 0x05	; 5
    12d4:	72 e0       	ldi	r23, 0x02	; 2
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    12e0:	f4 01       	movw	r30, r8
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	f8 01       	movw	r30, r16
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    12f0:	5e 01       	movw	r10, r28
    12f2:	f0 ef       	ldi	r31, 0xF0	; 240
    12f4:	af 1a       	sub	r10, r31
    12f6:	fe ef       	ldi	r31, 0xFE	; 254
    12f8:	bf 0a       	sbc	r11, r31
    12fa:	f5 01       	movw	r30, r10
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	89 2b       	or	r24, r25
    1302:	79 f0       	breq	.+30     	; 0x1322 <_ZN13Adafruit_FONA10enableGPRSEb+0x126>
    1304:	65 e2       	ldi	r22, 0x25	; 37
    1306:	71 e0       	ldi	r23, 0x01	; 1
    1308:	f8 01       	movw	r30, r16
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    1312:	f5 01       	movw	r30, r10
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	f8 01       	movw	r30, r16
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1322:	6e 01       	movw	r12, r28
    1324:	fe ee       	ldi	r31, 0xEE	; 238
    1326:	cf 1a       	sub	r12, r31
    1328:	fe ef       	ldi	r31, 0xFE	; 254
    132a:	df 0a       	sbc	r13, r31
    132c:	f6 01       	movw	r30, r12
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	89 2b       	or	r24, r25
    1334:	79 f0       	breq	.+30     	; 0x1354 <_ZN13Adafruit_FONA10enableGPRSEb+0x158>
    1336:	65 e2       	ldi	r22, 0x25	; 37
    1338:	71 e0       	ldi	r23, 0x01	; 1
    133a:	f8 01       	movw	r30, r16
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    1344:	f6 01       	movw	r30, r12
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	f8 01       	movw	r30, r16
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1354:	67 e2       	ldi	r22, 0x27	; 39
    1356:	71 e0       	ldi	r23, 0x01	; 1
    1358:	f8 01       	movw	r30, r16
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
    1362:	6e ef       	ldi	r22, 0xFE	; 254
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	83 ec       	ldi	r24, 0xC3	; 195
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    136e:	64 ef       	ldi	r22, 0xF4	; 244
    1370:	71 e0       	ldi	r23, 0x01	; 1
    1372:	83 ec       	ldi	r24, 0xC3	; 195
    1374:	93 e0       	ldi	r25, 0x03	; 3
    1376:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    137a:	f4 01       	movw	r30, r8
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	83 ec       	ldi	r24, 0xC3	; 195
    1382:	93 e0       	ldi	r25, 0x03	; 3
    1384:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1388:	f5 01       	movw	r30, r10
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	89 2b       	or	r24, r25
    1390:	69 f0       	breq	.+26     	; 0x13ac <_ZN13Adafruit_FONA10enableGPRSEb+0x1b0>
    1392:	65 e2       	ldi	r22, 0x25	; 37
    1394:	71 e0       	ldi	r23, 0x01	; 1
    1396:	83 ec       	ldi	r24, 0xC3	; 195
    1398:	93 e0       	ldi	r25, 0x03	; 3
    139a:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    139e:	f5 01       	movw	r30, r10
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	83 ec       	ldi	r24, 0xC3	; 195
    13a6:	93 e0       	ldi	r25, 0x03	; 3
    13a8:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    13ac:	f6 01       	movw	r30, r12
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	89 2b       	or	r24, r25
    13b4:	69 f0       	breq	.+26     	; 0x13d0 <_ZN13Adafruit_FONA10enableGPRSEb+0x1d4>
    13b6:	65 e2       	ldi	r22, 0x25	; 37
    13b8:	71 e0       	ldi	r23, 0x01	; 1
    13ba:	83 ec       	ldi	r24, 0xC3	; 195
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    13c2:	f6 01       	movw	r30, r12
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	83 ec       	ldi	r24, 0xC3	; 195
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    13d0:	67 e2       	ldi	r22, 0x27	; 39
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	83 ec       	ldi	r24, 0xC3	; 195
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
    13dc:	f7 01       	movw	r30, r14
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	40 e1       	ldi	r20, 0x10	; 16
    13e4:	57 e2       	ldi	r21, 0x27	; 39
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    13ec:	88 23       	and	r24, r24
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <_ZN13Adafruit_FONA10enableGPRSEb+0x1f6>
    13f0:	62 c0       	rjmp	.+196    	; 0x14b6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ba>
    13f2:	f5 01       	movw	r30, r10
    13f4:	40 81       	ld	r20, Z
    13f6:	51 81       	ldd	r21, Z+1	; 0x01
    13f8:	41 15       	cp	r20, r1
    13fa:	51 05       	cpc	r21, r1
    13fc:	39 f4       	brne	.+14     	; 0x140c <_ZN13Adafruit_FONA10enableGPRSEb+0x210>
    13fe:	f6 01       	movw	r30, r12
    1400:	40 81       	ld	r20, Z
    1402:	51 81       	ldd	r21, Z+1	; 0x01
    1404:	41 15       	cp	r20, r1
    1406:	51 05       	cpc	r21, r1
    1408:	79 f4       	brne	.+30     	; 0x1428 <_ZN13Adafruit_FONA10enableGPRSEb+0x22c>
    140a:	42 cf       	rjmp	.-380    	; 0x1290 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    140c:	f7 01       	movw	r30, r14
    140e:	20 81       	ld	r18, Z
    1410:	31 81       	ldd	r19, Z+1	; 0x01
    1412:	00 e1       	ldi	r16, 0x10	; 16
    1414:	17 e2       	ldi	r17, 0x27	; 39
    1416:	6f ed       	ldi	r22, 0xDF	; 223
    1418:	71 e0       	ldi	r23, 0x01	; 1
    141a:	ce 01       	movw	r24, r28
    141c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    1420:	81 11       	cpse	r24, r1
    1422:	ed cf       	rjmp	.-38     	; 0x13fe <_ZN13Adafruit_FONA10enableGPRSEb+0x202>
    1424:	87 e0       	ldi	r24, 0x07	; 7
    1426:	50 c0       	rjmp	.+160    	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1428:	f7 01       	movw	r30, r14
    142a:	20 81       	ld	r18, Z
    142c:	31 81       	ldd	r19, Z+1	; 0x01
    142e:	00 e1       	ldi	r16, 0x10	; 16
    1430:	17 e2       	ldi	r17, 0x27	; 39
    1432:	6b ec       	ldi	r22, 0xCB	; 203
    1434:	71 e0       	ldi	r23, 0x01	; 1
    1436:	ce 01       	movw	r24, r28
    1438:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN13Adafruit_FONA20sendCheckReplyQuotedEPK19__FlashStringHelperS2_S2_j>
    143c:	81 11       	cpse	r24, r1
    143e:	28 cf       	rjmp	.-432    	; 0x1290 <_ZN13Adafruit_FONA10enableGPRSEb+0x94>
    1440:	88 e0       	ldi	r24, 0x08	; 8
    1442:	42 c0       	rjmp	.+132    	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1444:	f7 01       	movw	r30, r14
    1446:	40 81       	ld	r20, Z
    1448:	51 81       	ldd	r21, Z+1	; 0x01
    144a:	2f ef       	ldi	r18, 0xFF	; 255
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	65 eb       	ldi	r22, 0xB5	; 181
    1450:	71 e0       	ldi	r23, 0x01	; 1
    1452:	ce 01       	movw	r24, r28
    1454:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    1458:	88 23       	and	r24, r24
    145a:	79 f1       	breq	.+94     	; 0x14ba <_ZN13Adafruit_FONA10enableGPRSEb+0x2be>
    145c:	87 2d       	mov	r24, r7
    145e:	34 c0       	rjmp	.+104    	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    1460:	4d ea       	ldi	r20, 0xAD	; 173
    1462:	51 e0       	ldi	r21, 0x01	; 1
    1464:	62 ea       	ldi	r22, 0xA2	; 162
    1466:	71 e0       	ldi	r23, 0x01	; 1
    1468:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    146c:	88 23       	and	r24, r24
    146e:	39 f1       	breq	.+78     	; 0x14be <_ZN13Adafruit_FONA10enableGPRSEb+0x2c2>
    1470:	8e 01       	movw	r16, r28
    1472:	05 5e       	subi	r16, 0xE5	; 229
    1474:	1e 4f       	sbci	r17, 0xFE	; 254
    1476:	f8 01       	movw	r30, r16
    1478:	40 81       	ld	r20, Z
    147a:	51 81       	ldd	r21, Z+1	; 0x01
    147c:	20 e1       	ldi	r18, 0x10	; 16
    147e:	37 e2       	ldi	r19, 0x27	; 39
    1480:	65 e9       	ldi	r22, 0x95	; 149
    1482:	71 e0       	ldi	r23, 0x01	; 1
    1484:	ce 01       	movw	r24, r28
    1486:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    148a:	88 23       	and	r24, r24
    148c:	d1 f0       	breq	.+52     	; 0x14c2 <_ZN13Adafruit_FONA10enableGPRSEb+0x2c6>
    148e:	f8 01       	movw	r30, r16
    1490:	40 81       	ld	r20, Z
    1492:	51 81       	ldd	r21, Z+1	; 0x01
    1494:	20 e1       	ldi	r18, 0x10	; 16
    1496:	37 e2       	ldi	r19, 0x27	; 39
    1498:	6a e8       	ldi	r22, 0x8A	; 138
    149a:	71 e0       	ldi	r23, 0x01	; 1
    149c:	ce 01       	movw	r24, r28
    149e:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperS2_j>
    14a2:	88 23       	and	r24, r24
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <_ZN13Adafruit_FONA10enableGPRSEb+0x2ca>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b2:	85 e0       	ldi	r24, 0x05	; 5
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14b6:	86 e0       	ldi	r24, 0x06	; 6
    14b8:	07 c0       	rjmp	.+14     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14ba:	8a e0       	ldi	r24, 0x0A	; 10
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14be:	8b e0       	ldi	r24, 0x0B	; 11
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14c2:	8c e0       	ldi	r24, 0x0C	; 12
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <_ZN13Adafruit_FONA10enableGPRSEb+0x2cc>
    14c6:	8d e0       	ldi	r24, 0x0D	; 13
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	9f 90       	pop	r9
    14de:	8f 90       	pop	r8
    14e0:	7f 90       	pop	r7
    14e2:	08 95       	ret

000014e4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>:
    14e4:	af 92       	push	r10
    14e6:	bf 92       	push	r11
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	5b 01       	movw	r10, r22
    14f8:	6a 01       	movw	r12, r20
    14fa:	e2 2e       	mov	r14, r18
    14fc:	0f 96       	adiw	r24, 0x0f	; 15
    14fe:	0e 94 cb 21 	call	0x4396	; 0x4396 <strstr_P>
    1502:	ec 01       	movw	r28, r24
    1504:	89 2b       	or	r24, r25
    1506:	c1 f0       	breq	.+48     	; 0x1538 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1508:	c5 01       	movw	r24, r10
    150a:	0e 94 c2 21 	call	0x4384	; 0x4384 <__strlen_P>
    150e:	8c 0f       	add	r24, r28
    1510:	9d 1f       	adc	r25, r29
    1512:	c0 e0       	ldi	r28, 0x00	; 0
    1514:	f1 2c       	mov	r15, r1
    1516:	c0 17       	cp	r28, r16
    1518:	41 f0       	breq	.+16     	; 0x152a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x46>
    151a:	b7 01       	movw	r22, r14
    151c:	0e 94 ee 21 	call	0x43dc	; 0x43dc <strchr>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	51 f0       	breq	.+20     	; 0x1538 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x54>
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	cf 5f       	subi	r28, 0xFF	; 255
    1528:	f6 cf       	rjmp	.-20     	; 0x1516 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x32>
    152a:	0e 94 9b 21 	call	0x4336	; 0x4336 <atoi>
    152e:	f6 01       	movw	r30, r12
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	01 c0       	rjmp	.+2      	; 0x153a <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch+0x56>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	08 95       	ret

0000154e <_ZN13Adafruit_FONA12HTTP_readallEPj>:
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ec 01       	movw	r28, r24
    155a:	7b 01       	movw	r14, r22
    155c:	44 ef       	ldi	r20, 0xF4	; 244
    155e:	51 e0       	ldi	r21, 0x01	; 1
    1560:	6e ed       	ldi	r22, 0xDE	; 222
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1568:	00 e0       	ldi	r16, 0x00	; 0
    156a:	2c e2       	ldi	r18, 0x2C	; 44
    156c:	a7 01       	movw	r20, r14
    156e:	63 ed       	ldi	r22, 0xD3	; 211
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	08 95       	ret

00001584 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>:
    1584:	4f 92       	push	r4
    1586:	5f 92       	push	r5
    1588:	6f 92       	push	r6
    158a:	7f 92       	push	r7
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ec 01       	movw	r28, r24
    15a2:	5a 01       	movw	r10, r20
    15a4:	69 01       	movw	r12, r18
    15a6:	27 01       	movw	r4, r14
    15a8:	38 01       	movw	r6, r16
    15aa:	fc 01       	movw	r30, r24
    15ac:	e5 5e       	subi	r30, 0xE5	; 229
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	00 81       	ld	r16, Z
    15b2:	11 81       	ldd	r17, Z+1	; 0x01
    15b4:	26 2f       	mov	r18, r22
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	84 ef       	ldi	r24, 0xF4	; 244
    15be:	e8 2e       	mov	r14, r24
    15c0:	ff 24       	eor	r15, r15
    15c2:	f3 94       	inc	r15
    15c4:	64 e0       	ldi	r22, 0x04	; 4
    15c6:	71 e0       	ldi	r23, 0x01	; 1
    15c8:	ce 01       	movw	r24, r28
    15ca:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN13Adafruit_FONA14sendCheckReplyEPK19__FlashStringHelperlS2_j>
    15ce:	81 11       	cpse	r24, r1
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x52>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	17 c0       	rjmp	.+46     	; 0x1604 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x80>
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	b2 01       	movw	r22, r4
    15da:	ce 01       	movw	r24, r28
    15dc:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
    15e0:	01 e0       	ldi	r16, 0x01	; 1
    15e2:	2c e2       	ldi	r18, 0x2C	; 44
    15e4:	a5 01       	movw	r20, r10
    15e6:	67 ef       	ldi	r22, 0xF7	; 247
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    15f0:	88 23       	and	r24, r24
    15f2:	79 f3       	breq	.-34     	; 0x15d2 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l+0x4e>
    15f4:	02 e0       	ldi	r16, 0x02	; 2
    15f6:	2c e2       	ldi	r18, 0x2C	; 44
    15f8:	a6 01       	movw	r20, r12
    15fa:	6a ee       	ldi	r22, 0xEA	; 234
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	ce 01       	movw	r24, r28
    1600:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	af 90       	pop	r10
    1618:	7f 90       	pop	r7
    161a:	6f 90       	pop	r6
    161c:	5f 90       	pop	r5
    161e:	4f 90       	pop	r4
    1620:	08 95       	ret

00001622 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>:
    1622:	4f 92       	push	r4
    1624:	5f 92       	push	r5
    1626:	6f 92       	push	r6
    1628:	7f 92       	push	r7
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
    1644:	2a 01       	movw	r4, r20
    1646:	39 01       	movw	r6, r18
    1648:	48 01       	movw	r8, r16
    164a:	57 01       	movw	r10, r14
    164c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN13Adafruit_FONA10HTTP_setupEPc>
    1650:	88 23       	and	r24, r24
    1652:	09 f4       	brne	.+2      	; 0x1656 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x34>
    1654:	71 c0       	rjmp	.+226    	; 0x1738 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    1656:	a2 01       	movw	r20, r4
    1658:	6f eb       	ldi	r22, 0xBF	; 191
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN13Adafruit_FONA9HTTP_paraEPK19__FlashStringHelperS2_>
    1662:	88 23       	and	r24, r24
    1664:	09 f4       	brne	.+2      	; 0x1668 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x46>
    1666:	68 c0       	rjmp	.+208    	; 0x1738 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    1668:	a8 01       	movw	r20, r16
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	00 e1       	ldi	r16, 0x10	; 16
    1670:	17 e2       	ldi	r17, 0x27	; 39
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	ce 01       	movw	r24, r28
    1678:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13Adafruit_FONA9HTTP_dataEmm>
    167c:	88 23       	and	r24, r24
    167e:	09 f4       	brne	.+2      	; 0x1682 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x60>
    1680:	5b c0       	rjmp	.+182    	; 0x1738 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    1682:	fe 01       	movw	r30, r28
    1684:	e3 5e       	subi	r30, 0xE3	; 227
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	dc 01       	movw	r26, r24
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	02 80       	ldd	r0, Z+2	; 0x02
    1694:	f3 81       	ldd	r31, Z+3	; 0x03
    1696:	e0 2d       	mov	r30, r0
    1698:	a4 01       	movw	r20, r8
    169a:	b3 01       	movw	r22, r6
    169c:	09 95       	icall
    169e:	fe 01       	movw	r30, r28
    16a0:	e5 5e       	subi	r30, 0xE5	; 229
    16a2:	fe 4f       	sbci	r31, 0xFE	; 254
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	40 e1       	ldi	r20, 0x10	; 16
    16aa:	57 e2       	ldi	r21, 0x27	; 39
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN13Adafruit_FONA11expectReplyEPK19__FlashStringHelperj>
    16b2:	88 23       	and	r24, r24
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x96>
    16b6:	40 c0       	rjmp	.+128    	; 0x1738 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    16b8:	10 e1       	ldi	r17, 0x10	; 16
    16ba:	e1 2e       	mov	r14, r17
    16bc:	17 e2       	ldi	r17, 0x27	; 39
    16be:	f1 2e       	mov	r15, r17
    16c0:	00 e0       	ldi	r16, 0x00	; 0
    16c2:	10 e0       	ldi	r17, 0x00	; 0
    16c4:	96 01       	movw	r18, r12
    16c6:	a5 01       	movw	r20, r10
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	ce 01       	movw	r24, r28
    16cc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN13Adafruit_FONA11HTTP_actionEhPjS0_l>
    16d0:	88 23       	and	r24, r24
    16d2:	91 f1       	breq	.+100    	; 0x1738 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_+0x116>
    16d4:	66 eb       	ldi	r22, 0xB6	; 182
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	83 ec       	ldi	r24, 0xC3	; 195
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    16e0:	f5 01       	movw	r30, r10
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	4a e0       	ldi	r20, 0x0A	; 10
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	83 ec       	ldi	r24, 0xC3	; 195
    16ec:	93 e0       	ldi	r25, 0x03	; 3
    16ee:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print7printlnEji>
    16f2:	60 eb       	ldi	r22, 0xB0	; 176
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	83 ec       	ldi	r24, 0xC3	; 195
    16f8:	93 e0       	ldi	r25, 0x03	; 3
    16fa:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    16fe:	d6 01       	movw	r26, r12
    1700:	6d 91       	ld	r22, X+
    1702:	7c 91       	ld	r23, X
    1704:	4a e0       	ldi	r20, 0x0A	; 10
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	83 ec       	ldi	r24, 0xC3	; 195
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN5Print7printlnEji>
    1710:	b6 01       	movw	r22, r12
    1712:	ce 01       	movw	r24, r28
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	7f 90       	pop	r7
    172e:	6f 90       	pop	r6
    1730:	5f 90       	pop	r5
    1732:	4f 90       	pop	r4
    1734:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <_ZN13Adafruit_FONA12HTTP_readallEPj>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	7f 90       	pop	r7
    1754:	6f 90       	pop	r6
    1756:	5f 90       	pop	r5
    1758:	4f 90       	pop	r4
    175a:	08 95       	ret

0000175c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>:
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	a2 97       	sbiw	r28, 0x22	; 34
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	5c 01       	movw	r10, r24
    1786:	4a 01       	movw	r8, r20
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	e1 e3       	ldi	r30, 0x31	; 49
    178c:	f1 e0       	ldi	r31, 0x01	; 1
    178e:	de 01       	movw	r26, r28
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	01 90       	ld	r0, Z+
    1794:	0d 92       	st	X+, r0
    1796:	8a 95       	dec	r24
    1798:	e1 f7       	brne	.-8      	; 0x1792 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x36>
    179a:	ce 01       	movw	r24, r28
    179c:	81 96       	adiw	r24, 0x21	; 33
    179e:	6c 01       	movw	r12, r24
    17a0:	79 01       	movw	r14, r18
    17a2:	8a 01       	movw	r16, r20
    17a4:	9b 01       	movw	r18, r22
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	51 e0       	ldi	r21, 0x01	; 1
    17aa:	be 01       	movw	r22, r28
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	c5 01       	movw	r24, r10
    17b2:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN13Adafruit_FONA15HTTP_POST_startEPcPK19__FlashStringHelperPKhjPjS6_>
    17b6:	81 11       	cpse	r24, r1
    17b8:	23 c0       	rjmp	.+70     	; 0x1800 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    17ba:	69 e2       	ldi	r22, 0x29	; 41
    17bc:	71 e0       	ldi	r23, 0x01	; 1
    17be:	83 ec       	ldi	r24, 0xC3	; 195
    17c0:	93 e0       	ldi	r25, 0x03	; 3
    17c2:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
    17c6:	22 c0       	rjmp	.+68     	; 0x180c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xb0>
    17c8:	d5 01       	movw	r26, r10
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	04 80       	ldd	r0, Z+4	; 0x04
    17d0:	f5 81       	ldd	r31, Z+5	; 0x05
    17d2:	e0 2d       	mov	r30, r0
    17d4:	c5 01       	movw	r24, r10
    17d6:	09 95       	icall
    17d8:	89 2b       	or	r24, r25
    17da:	91 f0       	breq	.+36     	; 0x1800 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0xa4>
    17dc:	d5 01       	movw	r26, r10
    17de:	ed 91       	ld	r30, X+
    17e0:	fc 91       	ld	r31, X
    17e2:	06 80       	ldd	r0, Z+6	; 0x06
    17e4:	f7 81       	ldd	r31, Z+7	; 0x07
    17e6:	e0 2d       	mov	r30, r0
    17e8:	c5 01       	movw	r24, r10
    17ea:	09 95       	icall
    17ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    17f0:	95 ff       	sbrs	r25, 5
    17f2:	fc cf       	rjmp	.-8      	; 0x17ec <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x90>
    17f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    17f8:	b1 e0       	ldi	r27, 0x01	; 1
    17fa:	8b 1a       	sub	r8, r27
    17fc:	91 08       	sbc	r9, r1
    17fe:	21 f7       	brne	.-56     	; 0x17c8 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x6c>
    1800:	81 14       	cp	r8, r1
    1802:	91 04       	cpc	r9, r1
    1804:	09 f7       	brne	.-62     	; 0x17c8 <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj+0x6c>
    1806:	c5 01       	movw	r24, r10
    1808:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN13Adafruit_FONA9HTTP_termEv>
    180c:	a2 96       	adiw	r28, 0x22	; 34
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	08 95       	ret

00001832 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>:
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	ec 01       	movw	r28, r24
    1846:	6a 01       	movw	r12, r20
    1848:	59 01       	movw	r10, r18
    184a:	10 2f       	mov	r17, r16
    184c:	0e 2d       	mov	r16, r14
    184e:	44 ef       	ldi	r20, 0xF4	; 244
    1850:	51 e0       	ldi	r21, 0x01	; 1
    1852:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN13Adafruit_FONA8getReplyEPK19__FlashStringHelperj>
    1856:	21 2f       	mov	r18, r17
    1858:	a5 01       	movw	r20, r10
    185a:	b6 01       	movw	r22, r12
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <_ZN13Adafruit_FONA10parseReplyEPK19__FlashStringHelperPjch>
    1862:	18 2f       	mov	r17, r24
    1864:	88 23       	and	r24, r24
    1866:	31 f0       	breq	.+12     	; 0x1874 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch+0x42>
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	64 ef       	ldi	r22, 0xF4	; 244
    186c:	71 e0       	ldi	r23, 0x01	; 1
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13Adafruit_FONA8readlineEjb>
    1874:	81 2f       	mov	r24, r17
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ef 90       	pop	r14
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	bf 90       	pop	r11
    1886:	af 90       	pop	r10
    1888:	08 95       	ret

0000188a <_ZN13Adafruit_FONA7getRSSIEv>:
  return strlen(imei);
}

/********* NETWORK *******************************************************/

FONA_GET_RSSI Adafruit_FONA::getRSSI(void) {
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	28 97       	sbiw	r28, 0x08	; 8
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	6c 01       	movw	r12, r24
	
  FONA_GET_RSSI reply;
  uint16_t rssi=0, ber=0, nsPres=0, nsStat=0;
    18ac:	18 86       	std	Y+8, r1	; 0x08
    18ae:	1f 82       	std	Y+7, r1	; 0x07
    18b0:	1e 82       	std	Y+6, r1	; 0x06
    18b2:	1d 82       	std	Y+5, r1	; 0x05
    18b4:	1c 82       	std	Y+4, r1	; 0x04
    18b6:	1b 82       	std	Y+3, r1	; 0x03
    18b8:	1a 82       	std	Y+2, r1	; 0x02
    18ba:	19 82       	std	Y+1, r1	; 0x01
  uint8_t netReg=0;
  
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &rssi, ',', 0))
    18bc:	e1 2c       	mov	r14, r1
    18be:	0c e2       	ldi	r16, 0x2C	; 44
    18c0:	9e 01       	movw	r18, r28
    18c2:	29 5f       	subi	r18, 0xF9	; 249
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	46 e9       	ldi	r20, 0x96	; 150
    18c8:	52 e0       	ldi	r21, 0x02	; 2
    18ca:	6f e8       	ldi	r22, 0x8F	; 143
    18cc:	72 e0       	ldi	r23, 0x02	; 2
    18ce:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    18d2:	f8 2e       	mov	r15, r24
	  reply.rssiErr = 1;
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
    18d4:	ee 24       	eor	r14, r14
    18d6:	e3 94       	inc	r14
    18d8:	9e 01       	movw	r18, r28
    18da:	2b 5f       	subi	r18, 0xFB	; 251
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	48 e8       	ldi	r20, 0x88	; 136
    18e0:	52 e0       	ldi	r21, 0x02	; 2
    18e2:	61 e8       	ldi	r22, 0x81	; 129
    18e4:	72 e0       	ldi	r23, 0x02	; 2
    18e6:	c6 01       	movw	r24, r12
    18e8:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    18ec:	88 23       	and	r24, r24
    18ee:	19 f0       	breq	.+6      	; 0x18f6 <_ZN13Adafruit_FONA7getRSSIEv+0x6c>
#define NETREG_ACTUALVAL_NETSTAT(val) \
	NETREG_ONLY_NETSTAT(val)>>2
#define NETREG_ACTUALVAL_ERROR(val) \
	NETREG_ONLY_ERROR(val)>>5

struct FONA_GET_RSSI {
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	f8 26       	eor	r15, r24
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <_ZN13Adafruit_FONA7getRSSIEv+0x70>
	  reply.rssiErr = 1;
    18f6:	ff 24       	eor	r15, r15
    18f8:	f3 94       	inc	r15
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
    18fa:	e1 2c       	mov	r14, r1
    18fc:	0c e2       	ldi	r16, 0x2C	; 44
    18fe:	9e 01       	movw	r18, r28
    1900:	2d 5f       	subi	r18, 0xFD	; 253
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	49 e7       	ldi	r20, 0x79	; 121
    1906:	52 e0       	ldi	r21, 0x02	; 2
    1908:	60 e7       	ldi	r22, 0x70	; 112
    190a:	72 e0       	ldi	r23, 0x02	; 2
    190c:	c6 01       	movw	r24, r12
    190e:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1912:	88 23       	and	r24, r24
    1914:	11 f0       	breq	.+4      	; 0x191a <_ZN13Adafruit_FONA7getRSSIEv+0x90>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
    1916:	1b 81       	ldd	r17, Y+3	; 0x03
    1918:	01 c0       	rjmp	.+2      	; 0x191c <_ZN13Adafruit_FONA7getRSSIEv+0x92>
	
  if (! sendParseReply(F("AT+CSQ"), F("+CSQ: "), &ber, ',', 1))
	  reply.rssiErr = 1;
  
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsPres, ',', 0))
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    191a:	10 e2       	ldi	r17, 0x20	; 32
  else
	  netReg |= nsPres; //Is within GET_NETREG enum bounds
	
  if (! sendParseReply(F("AT+CREG?"), F("+CREG: "), &nsStat, ',', 1))
    191c:	ee 24       	eor	r14, r14
    191e:	e3 94       	inc	r14
    1920:	0c e2       	ldi	r16, 0x2C	; 44
    1922:	9e 01       	movw	r18, r28
    1924:	2f 5f       	subi	r18, 0xFF	; 255
    1926:	3f 4f       	sbci	r19, 0xFF	; 255
    1928:	48 e6       	ldi	r20, 0x68	; 104
    192a:	52 e0       	ldi	r21, 0x02	; 2
    192c:	6f e5       	ldi	r22, 0x5F	; 95
    192e:	72 e0       	ldi	r23, 0x02	; 2
    1930:	c6 01       	movw	r24, r12
    1932:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN13Adafruit_FONA14sendParseReplyEPK19__FlashStringHelperS2_Pjch>
    1936:	81 11       	cpse	r24, r1
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <_ZN13Adafruit_FONA7getRSSIEv+0xb6>
	  netReg |= FONA_GET_NETREG::IS_ERROR;
    193a:	91 2f       	mov	r25, r17
    193c:	90 62       	ori	r25, 0x20	; 32
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <_ZN13Adafruit_FONA7getRSSIEv+0xba>
  else
	  netReg |= nsStat; //Is within GET_NETREG enum bounds
    1940:	99 81       	ldd	r25, Y+1	; 0x01
    1942:	91 2b       	or	r25, r17
  
  //Both are <= 99 so can cast&store in 1 byte fields
  reply.rssi = rssi;
  reply.ber = ber;
    1944:	7d 81       	ldd	r23, Y+5	; 0x05
  
  reply.netReg = (FONA_GET_NETREG)netReg;
  
  return reply;
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
}
    1948:	8f 2d       	mov	r24, r15
    194a:	28 96       	adiw	r28, 0x08	; 8
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	08 95       	ret

00001968 <_ZN10GsmPayloadC1Ev>:
boolean GsmPayload::hasGpsInfo(void) { return _header.hasGpsInfo; }
uint8_t GsmPayload::getModuleId(void) { return _header.moduleId; }
void GsmPayload::setModuleId(uint8_t moduleId) { _header.moduleId = moduleId; }
uint16_t GsmPayload::getBootNumber(void) { return _header.bootNumber; }
void GsmPayload::setBootNumber(uint16_t bootNumber) { _header.bootNumber = bootNumber; }
FONA_GET_RSSI GsmPayload::getRSSI(void) { return _header.rssi; }
    1968:	fc 01       	movw	r30, r24
    196a:	10 82       	st	Z, r1
    196c:	12 82       	std	Z+2, r1	; 0x02
    196e:	11 82       	std	Z+1, r1	; 0x01
    1970:	13 82       	std	Z+3, r1	; 0x03
    1972:	14 82       	std	Z+4, r1	; 0x04
    1974:	15 82       	std	Z+5, r1	; 0x05
    1976:	16 82       	std	Z+6, r1	; 0x06
    1978:	17 82       	std	Z+7, r1	; 0x07
    197a:	12 86       	std	Z+10, r1	; 0x0a
    197c:	11 86       	std	Z+9, r1	; 0x09
    197e:	14 86       	std	Z+12, r1	; 0x0c
    1980:	13 86       	std	Z+11, r1	; 0x0b
    1982:	08 95       	ret

00001984 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>:
    1984:	2a e0       	ldi	r18, 0x0A	; 10
    1986:	82 9f       	mul	r24, r18
    1988:	c0 01       	movw	r24, r0
    198a:	11 24       	eor	r1, r1
    198c:	09 96       	adiw	r24, 0x09	; 9
    198e:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <_ZN7Helpers14base64_enc_lenEi>

00001992 <_ZN10GsmPayload16createRawPayloadEPh>:
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	ec 01       	movw	r28, r24
    1998:	cb 01       	movw	r24, r22
    199a:	29 e0       	ldi	r18, 0x09	; 9
    199c:	fe 01       	movw	r30, r28
    199e:	db 01       	movw	r26, r22
    19a0:	01 90       	ld	r0, Z+
    19a2:	0d 92       	st	X+, r0
    19a4:	2a 95       	dec	r18
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <_ZN10GsmPayload16createRawPayloadEPh+0xe>
    19a8:	4b 81       	ldd	r20, Y+3	; 0x03
    19aa:	2a e0       	ldi	r18, 0x0A	; 10
    19ac:	42 9f       	mul	r20, r18
    19ae:	a0 01       	movw	r20, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b6:	09 96       	adiw	r24, 0x09	; 9
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	0c 94 e5 21 	jmp	0x43ca	; 0x43ca <memcpy>

000019c0 <_ZN10GsmPayload20createEncodedPayloadEPc>:
    19c0:	af 92       	push	r10
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	6b 01       	movw	r12, r22
    19da:	ed b6       	in	r14, 0x3d	; 61
    19dc:	fe b6       	in	r15, 0x3e	; 62
    19de:	fc 01       	movw	r30, r24
    19e0:	03 81       	ldd	r16, Z+3	; 0x03
    19e2:	fa e0       	ldi	r31, 0x0A	; 10
    19e4:	0f 9f       	mul	r16, r31
    19e6:	80 01       	movw	r16, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	07 5f       	subi	r16, 0xF7	; 247
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	2d b7       	in	r18, 0x3d	; 61
    19f0:	3e b7       	in	r19, 0x3e	; 62
    19f2:	20 1b       	sub	r18, r16
    19f4:	31 0b       	sbc	r19, r17
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	3e bf       	out	0x3e, r19	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	2d bf       	out	0x3d, r18	; 61
    1a00:	ed b7       	in	r30, 0x3d	; 61
    1a02:	fe b7       	in	r31, 0x3e	; 62
    1a04:	31 96       	adiw	r30, 0x01	; 1
    1a06:	5f 01       	movw	r10, r30
    1a08:	bf 01       	movw	r22, r30
    1a0a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN10GsmPayload16createRawPayloadEPh>
    1a0e:	a8 01       	movw	r20, r16
    1a10:	b5 01       	movw	r22, r10
    1a12:	c6 01       	movw	r24, r12
    1a14:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZN7Helpers13base64_encodeEPcPhi>
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	fe be       	out	0x3e, r15	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	ed be       	out	0x3d, r14	; 61
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	08 95       	ret

00001a38 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>:
    1a38:	fc 01       	movw	r30, r24
    1a3a:	74 87       	std	Z+12, r23	; 0x0c
    1a3c:	63 87       	std	Z+11, r22	; 0x0b
    1a3e:	43 83       	std	Z+3, r20	; 0x03
    1a40:	08 95       	ret

00001a42 <_ZN10GsmPayload11setModuleIdEh>:
    1a42:	fc 01       	movw	r30, r24
    1a44:	60 83       	st	Z, r22
    1a46:	08 95       	ret

00001a48 <_ZN10GsmPayload13setBootNumberEj>:
    1a48:	fc 01       	movw	r30, r24
    1a4a:	72 83       	std	Z+2, r23	; 0x02
    1a4c:	61 83       	std	Z+1, r22	; 0x01
    1a4e:	08 95       	ret

00001a50 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>:
void GsmPayload::setRSSI(FONA_GET_RSSI rssi) { _header.rssi = rssi; }
    1a50:	fc 01       	movw	r30, r24
    1a52:	45 83       	std	Z+5, r20	; 0x05
    1a54:	56 83       	std	Z+6, r21	; 0x06
    1a56:	67 83       	std	Z+7, r22	; 0x07
    1a58:	70 87       	std	Z+8, r23	; 0x08
    1a5a:	08 95       	ret

00001a5c <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>:
	for(i = inputLen - 1; input[i] == '='; i--) {
		numEq++;
	}

	return ((6 * inputLen) / 8) - numEq;
}
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
    1a62:	67 e9       	ldi	r22, 0x97	; 151
    1a64:	73 e0       	ldi	r23, 0x03	; 3
    1a66:	83 ec       	ldi	r24, 0xC3	; 195
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1a6e:	4a e0       	ldi	r20, 0x0A	; 10
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	68 81       	ld	r22, Y
    1a74:	83 ec       	ldi	r24, 0xC3	; 195
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEhi>
    1a7c:	63 e9       	ldi	r22, 0x93	; 147
    1a7e:	73 e0       	ldi	r23, 0x03	; 3
    1a80:	83 ec       	ldi	r24, 0xC3	; 195
    1a82:	93 e0       	ldi	r25, 0x03	; 3
    1a84:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1a88:	6e e8       	ldi	r22, 0x8E	; 142
    1a8a:	73 e0       	ldi	r23, 0x03	; 3
    1a8c:	83 ec       	ldi	r24, 0xC3	; 195
    1a8e:	93 e0       	ldi	r25, 0x03	; 3
    1a90:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1a94:	4a e0       	ldi	r20, 0x0A	; 10
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	69 81       	ldd	r22, Y+1	; 0x01
    1a9a:	83 ec       	ldi	r24, 0xC3	; 195
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEhi>
    1aa2:	6a e8       	ldi	r22, 0x8A	; 138
    1aa4:	73 e0       	ldi	r23, 0x03	; 3
    1aa6:	83 ec       	ldi	r24, 0xC3	; 195
    1aa8:	93 e0       	ldi	r25, 0x03	; 3
    1aaa:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1aae:	65 e7       	ldi	r22, 0x75	; 117
    1ab0:	73 e0       	ldi	r23, 0x03	; 3
    1ab2:	83 ec       	ldi	r24, 0xC3	; 195
    1ab4:	93 e0       	ldi	r25, 0x03	; 3
    1ab6:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1aba:	6b 81       	ldd	r22, Y+3	; 0x03
    1abc:	63 70       	andi	r22, 0x03	; 3
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	4a e0       	ldi	r20, 0x0A	; 10
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	83 ec       	ldi	r24, 0xC3	; 195
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0e 94 14 1a 	call	0x3428	; 0x3428 <_ZN5Print5printEii>
    1acc:	6b e6       	ldi	r22, 0x6B	; 107
    1ace:	73 e0       	ldi	r23, 0x03	; 3
    1ad0:	83 ec       	ldi	r24, 0xC3	; 195
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1ad8:	6b 81       	ldd	r22, Y+3	; 0x03
    1ada:	6c 71       	andi	r22, 0x1C	; 28
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	75 95       	asr	r23
    1ae0:	67 95       	ror	r22
    1ae2:	75 95       	asr	r23
    1ae4:	67 95       	ror	r22
    1ae6:	4a e0       	ldi	r20, 0x0A	; 10
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	83 ec       	ldi	r24, 0xC3	; 195
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	0e 94 14 1a 	call	0x3428	; 0x3428 <_ZN5Print5printEii>
    1af2:	62 e6       	ldi	r22, 0x62	; 98
    1af4:	73 e0       	ldi	r23, 0x03	; 3
    1af6:	83 ec       	ldi	r24, 0xC3	; 195
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1afe:	6b 81       	ldd	r22, Y+3	; 0x03
    1b00:	65 fb       	bst	r22, 5
    1b02:	66 27       	eor	r22, r22
    1b04:	60 f9       	bld	r22, 0
    1b06:	4a e0       	ldi	r20, 0x0A	; 10
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	83 ec       	ldi	r24, 0xC3	; 195
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	0e 94 14 1a 	call	0x3428	; 0x3428 <_ZN5Print5printEii>
    1b14:	6e e5       	ldi	r22, 0x5E	; 94
    1b16:	73 e0       	ldi	r23, 0x03	; 3
    1b18:	83 ec       	ldi	r24, 0xC3	; 195
    1b1a:	93 e0       	ldi	r25, 0x03	; 3
    1b1c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1b20:	61 e5       	ldi	r22, 0x51	; 81
    1b22:	73 e0       	ldi	r23, 0x03	; 3
    1b24:	83 ec       	ldi	r24, 0xC3	; 195
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1b2c:	4a e0       	ldi	r20, 0x0A	; 10
    1b2e:	50 e0       	ldi	r21, 0x00	; 0
    1b30:	6a 81       	ldd	r22, Y+2	; 0x02
    1b32:	83 ec       	ldi	r24, 0xC3	; 195
    1b34:	93 e0       	ldi	r25, 0x03	; 3
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	0c 94 90 19 	jmp	0x3320	; 0x3320 <_ZN5Print7printlnEhi>

00001b3e <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>:
    1b3e:	fc 01       	movw	r30, r24
    1b40:	22 81       	ldd	r18, Z+2	; 0x02
    1b42:	21 11       	cpse	r18, r1
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1b46:	90 81       	ld	r25, Z
    1b48:	93 36       	cpi	r25, 0x63	; 99
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x14>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	97 30       	cpi	r25, 0x07	; 7
    1b50:	08 f4       	brcc	.+2      	; 0x1b54 <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI+0x16>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	08 95       	ret

00001b56 <_ZN7Helpers15printSensorDataEP10SensorData>:
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	69 e4       	ldi	r22, 0x49	; 73
    1b5e:	73 e0       	ldi	r23, 0x03	; 3
    1b60:	83 ec       	ldi	r24, 0xC3	; 195
    1b62:	93 e0       	ldi	r25, 0x03	; 3
    1b64:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1b68:	69 81       	ldd	r22, Y+1	; 0x01
    1b6a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b6c:	4a e0       	ldi	r20, 0x0A	; 10
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	83 ec       	ldi	r24, 0xC3	; 195
    1b72:	93 e0       	ldi	r25, 0x03	; 3
    1b74:	0e 94 a2 19 	call	0x3344	; 0x3344 <_ZN5Print5printEji>
    1b78:	65 e4       	ldi	r22, 0x45	; 69
    1b7a:	73 e0       	ldi	r23, 0x03	; 3
    1b7c:	83 ec       	ldi	r24, 0xC3	; 195
    1b7e:	93 e0       	ldi	r25, 0x03	; 3
    1b80:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1b84:	6f e3       	ldi	r22, 0x3F	; 63
    1b86:	73 e0       	ldi	r23, 0x03	; 3
    1b88:	83 ec       	ldi	r24, 0xC3	; 195
    1b8a:	93 e0       	ldi	r25, 0x03	; 3
    1b8c:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1b90:	6b 81       	ldd	r22, Y+3	; 0x03
    1b92:	7c 81       	ldd	r23, Y+4	; 0x04
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	83 ec       	ldi	r24, 0xC3	; 195
    1b9a:	93 e0       	ldi	r25, 0x03	; 3
    1b9c:	0e 94 a2 19 	call	0x3344	; 0x3344 <_ZN5Print5printEji>
    1ba0:	6b e3       	ldi	r22, 0x3B	; 59
    1ba2:	73 e0       	ldi	r23, 0x03	; 3
    1ba4:	83 ec       	ldi	r24, 0xC3	; 195
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1bac:	62 e3       	ldi	r22, 0x32	; 50
    1bae:	73 e0       	ldi	r23, 0x03	; 3
    1bb0:	83 ec       	ldi	r24, 0xC3	; 195
    1bb2:	93 e0       	ldi	r25, 0x03	; 3
    1bb4:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1bb8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bba:	7e 81       	ldd	r23, Y+6	; 0x06
    1bbc:	4a e0       	ldi	r20, 0x0A	; 10
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	83 ec       	ldi	r24, 0xC3	; 195
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	0e 94 a2 19 	call	0x3344	; 0x3344 <_ZN5Print5printEji>
    1bc8:	6e e2       	ldi	r22, 0x2E	; 46
    1bca:	73 e0       	ldi	r23, 0x03	; 3
    1bcc:	83 ec       	ldi	r24, 0xC3	; 195
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1bd4:	68 e2       	ldi	r22, 0x28	; 40
    1bd6:	73 e0       	ldi	r23, 0x03	; 3
    1bd8:	83 ec       	ldi	r24, 0xC3	; 195
    1bda:	93 e0       	ldi	r25, 0x03	; 3
    1bdc:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	4a e0       	ldi	r20, 0x0A	; 10
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	83 ec       	ldi	r24, 0xC3	; 195
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	0e 94 a2 19 	call	0x3344	; 0x3344 <_ZN5Print5printEji>
    1bf0:	64 e2       	ldi	r22, 0x24	; 36
    1bf2:	73 e0       	ldi	r23, 0x03	; 3
    1bf4:	83 ec       	ldi	r24, 0xC3	; 195
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1bfc:	6d e1       	ldi	r22, 0x1D	; 29
    1bfe:	73 e0       	ldi	r23, 0x03	; 3
    1c00:	83 ec       	ldi	r24, 0xC3	; 195
    1c02:	93 e0       	ldi	r25, 0x03	; 3
    1c04:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1c08:	4a e0       	ldi	r20, 0x0A	; 10
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	69 85       	ldd	r22, Y+9	; 0x09
    1c0e:	83 ec       	ldi	r24, 0xC3	; 195
    1c10:	93 e0       	ldi	r25, 0x03	; 3
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	0c 94 90 19 	jmp	0x3320	; 0x3320 <_ZN5Print7printlnEhi>

00001c1a <_ZN7Helpers14base64_enc_lenEi>:
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	2e 5f       	subi	r18, 0xFE	; 254
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	e3 e0       	ldi	r30, 0x03	; 3
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	c9 01       	movw	r24, r18
    1c26:	bf 01       	movw	r22, r30
    1c28:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__divmodhi4>
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	48 1b       	sub	r20, r24
    1c30:	59 0b       	sbc	r21, r25
    1c32:	ca 01       	movw	r24, r20
    1c34:	bf 01       	movw	r22, r30
    1c36:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__divmodhi4>
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	08 95       	ret

00001c48 <_Z8a3_to_a4PhS_>:

inline void a3_to_a4(uint8_t * a4, uint8_t * a3) {
    1c48:	dc 01       	movw	r26, r24
    1c4a:	fb 01       	movw	r30, r22
	a4[0] = (a3[0] & 0xfc) >> 2;
    1c4c:	80 81       	ld	r24, Z
    1c4e:	86 95       	lsr	r24
    1c50:	86 95       	lsr	r24
    1c52:	8c 93       	st	X, r24
	a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
    1c54:	80 81       	ld	r24, Z
    1c56:	83 70       	andi	r24, 0x03	; 3
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	92 95       	swap	r25
    1c5c:	9f 70       	andi	r25, 0x0F	; 15
    1c5e:	20 e1       	ldi	r18, 0x10	; 16
    1c60:	82 9f       	mul	r24, r18
    1c62:	90 0d       	add	r25, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	9c 93       	st	X, r25
    1c6a:	11 97       	sbiw	r26, 0x01	; 1
	a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
    1c6c:	91 81       	ldd	r25, Z+1	; 0x01
    1c6e:	9f 70       	andi	r25, 0x0F	; 15
    1c70:	99 0f       	add	r25, r25
    1c72:	99 0f       	add	r25, r25
    1c74:	22 81       	ldd	r18, Z+2	; 0x02
    1c76:	22 95       	swap	r18
    1c78:	26 95       	lsr	r18
    1c7a:	26 95       	lsr	r18
    1c7c:	23 70       	andi	r18, 0x03	; 3
    1c7e:	92 0f       	add	r25, r18
    1c80:	12 96       	adiw	r26, 0x02	; 2
    1c82:	9c 93       	st	X, r25
    1c84:	12 97       	sbiw	r26, 0x02	; 2
	a4[3] = (a3[2] & 0x3f);
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	8f 73       	andi	r24, 0x3F	; 63
    1c8a:	13 96       	adiw	r26, 0x03	; 3
    1c8c:	8c 93       	st	X, r24
    1c8e:	08 95       	ret

00001c90 <_ZN7Helpers13base64_encodeEPcPhi>:

/* 
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
    1c90:	6f 92       	push	r6
    1c92:	7f 92       	push	r7
    1c94:	8f 92       	push	r8
    1c96:	9f 92       	push	r9
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	27 97       	sbiw	r28, 0x07	; 7
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	6c 01       	movw	r12, r24
    1cbe:	5b 01       	movw	r10, r22
    1cc0:	3b 01       	movw	r6, r22
    1cc2:	64 0e       	add	r6, r20
    1cc4:	75 1e       	adc	r7, r21
	
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
    1cc6:	e1 2c       	mov	r14, r1
    1cc8:	f1 2c       	mov	r15, r1
	If *input is string, trailing \0 should NOT be included in the length
	Return length DOES include trailing \0
*/
int16_t Helpers::base64_encode(char *output, uint8_t *input, int16_t inputLen) {
	
	int16_t i = 0, j = 0;
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
    1cce:	4e 01       	movw	r8, r28
    1cd0:	85 e0       	ldi	r24, 0x05	; 5
    1cd2:	88 0e       	add	r8, r24
    1cd4:	91 1c       	adc	r9, r1
	int16_t i = 0, j = 0;
	int16_t encLen = 0;
	uint8_t a3[3];
	uint8_t a4[4];

	while(inputLen--) {
    1cd6:	6a 14       	cp	r6, r10
    1cd8:	7b 04       	cpc	r7, r11
    1cda:	49 f1       	breq	.+82     	; 0x1d2e <_ZN7Helpers13base64_encodeEPcPhi+0x9e>
		a3[i++] = *(input++);
    1cdc:	c8 01       	movw	r24, r16
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	21 91       	ld	r18, Z+
    1ce4:	5f 01       	movw	r10, r30
    1ce6:	f4 01       	movw	r30, r8
    1ce8:	e0 0f       	add	r30, r16
    1cea:	f1 1f       	adc	r31, r17
    1cec:	20 83       	st	Z, r18
		if(i == 3) {
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	11 f0       	breq	.+4      	; 0x1cf8 <_ZN7Helpers13base64_encodeEPcPhi+0x68>

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1cf4:	8c 01       	movw	r16, r24
    1cf6:	ef cf       	rjmp	.-34     	; 0x1cd6 <_ZN7Helpers13base64_encodeEPcPhi+0x46>
	uint8_t a4[4];

	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);
    1cf8:	b4 01       	movw	r22, r8
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z8a3_to_a4PhS_>
    1d02:	de 01       	movw	r26, r28
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	c6 01       	movw	r24, r12
    1d08:	8e 0d       	add	r24, r14
    1d0a:	9f 1d       	adc	r25, r15

			for(i = 0; i < 4; i++) {
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
    1d0c:	ed 91       	ld	r30, X+
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	e3 56       	subi	r30, 0x63	; 99
    1d12:	fc 4f       	sbci	r31, 0xFC	; 252
    1d14:	24 91       	lpm	r18, Z
    1d16:	fc 01       	movw	r30, r24
    1d18:	21 93       	st	Z+, r18
    1d1a:	cf 01       	movw	r24, r30
	while(inputLen--) {
		a3[i++] = *(input++);
		if(i == 3) {
			a3_to_a4(a4, a3);

			for(i = 0; i < 4; i++) {
    1d1c:	a8 15       	cp	r26, r8
    1d1e:	b9 05       	cpc	r27, r9
    1d20:	a9 f7       	brne	.-22     	; 0x1d0c <_ZN7Helpers13base64_encodeEPcPhi+0x7c>
    1d22:	f4 e0       	ldi	r31, 0x04	; 4
    1d24:	ef 0e       	add	r14, r31
    1d26:	f1 1c       	adc	r15, r1
				output[encLen++] = pgm_read_byte(&b64_alphabet[a4[i]]);
			}

			i = 0;
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	e3 cf       	rjmp	.-58     	; 0x1cf4 <_ZN7Helpers13base64_encodeEPcPhi+0x64>
		}
	}

	if(i) {
    1d2e:	01 15       	cp	r16, r1
    1d30:	11 05       	cpc	r17, r1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <_ZN7Helpers13base64_encodeEPcPhi+0xa6>
    1d34:	3c c0       	rjmp	.+120    	; 0x1dae <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
    1d36:	be 01       	movw	r22, r28
    1d38:	6b 5f       	subi	r22, 0xFB	; 251
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	e0 0f       	add	r30, r16
    1d40:	f1 1f       	adc	r31, r17
		for(j = i; j < 3; j++) {
    1d42:	cf 01       	movw	r24, r30
    1d44:	86 1b       	sub	r24, r22
    1d46:	97 0b       	sbc	r25, r23
    1d48:	03 97       	sbiw	r24, 0x03	; 3
    1d4a:	14 f4       	brge	.+4      	; 0x1d50 <_ZN7Helpers13base64_encodeEPcPhi+0xc0>
			a3[j] = '\0';
    1d4c:	11 92       	st	Z+, r1
			i = 0;
		}
	}

	if(i) {
		for(j = i; j < 3; j++) {
    1d4e:	f9 cf       	rjmp	.-14     	; 0x1d42 <_ZN7Helpers13base64_encodeEPcPhi+0xb2>
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);
    1d50:	ce 01       	movw	r24, r28
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	5c 01       	movw	r10, r24
    1d56:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z8a3_to_a4PhS_>
    1d5a:	c6 01       	movw	r24, r12
    1d5c:	8e 0d       	add	r24, r14
    1d5e:	9f 1d       	adc	r25, r15
    1d60:	d5 01       	movw	r26, r10

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
    1d62:	ed 91       	ld	r30, X+
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	e3 56       	subi	r30, 0x63	; 99
    1d68:	fc 4f       	sbci	r31, 0xFC	; 252
    1d6a:	24 91       	lpm	r18, Z
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	21 93       	st	Z+, r18
    1d70:	cf 01       	movw	r24, r30
			a3[j] = '\0';
		}

		a3_to_a4(a4, a3);

		for(j = 0; j < i + 1; j++) {
    1d72:	9d 01       	movw	r18, r26
    1d74:	2a 19       	sub	r18, r10
    1d76:	3b 09       	sbc	r19, r11
    1d78:	02 17       	cp	r16, r18
    1d7a:	13 07       	cpc	r17, r19
    1d7c:	94 f7       	brge	.-28     	; 0x1d62 <_ZN7Helpers13base64_encodeEPcPhi+0xd2>
    1d7e:	ff ef       	ldi	r31, 0xFF	; 255
    1d80:	ef 1a       	sub	r14, r31
    1d82:	ff 0a       	sbc	r15, r31
    1d84:	e0 0e       	add	r14, r16
    1d86:	f1 1e       	adc	r15, r17
    1d88:	f6 01       	movw	r30, r12
    1d8a:	ee 0d       	add	r30, r14
    1d8c:	ff 1d       	adc	r31, r15
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1d8e:	0c 19       	sub	r16, r12
    1d90:	1d 09       	sbc	r17, r13
    1d92:	0e 19       	sub	r16, r14
    1d94:	1f 09       	sbc	r17, r15
			output[encLen++] = '=';
    1d96:	8d e3       	ldi	r24, 0x3D	; 61
    1d98:	7f 01       	movw	r14, r30
    1d9a:	ec 18       	sub	r14, r12
    1d9c:	fd 08       	sbc	r15, r13

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1d9e:	98 01       	movw	r18, r16
    1da0:	2e 0f       	add	r18, r30
    1da2:	3f 1f       	adc	r19, r31
    1da4:	23 30       	cpi	r18, 0x03	; 3
    1da6:	31 05       	cpc	r19, r1
    1da8:	14 f4       	brge	.+4      	; 0x1dae <_ZN7Helpers13base64_encodeEPcPhi+0x11e>
			output[encLen++] = '=';
    1daa:	81 93       	st	Z+, r24

		for(j = 0; j < i + 1; j++) {
			output[encLen++] = pgm_read_byte(&b64_alphabet[a4[j]]);
		}

		while((i++ < 3)) {
    1dac:	f5 cf       	rjmp	.-22     	; 0x1d98 <_ZN7Helpers13base64_encodeEPcPhi+0x108>
			output[encLen++] = '=';
		}
	}
	
	output[encLen++] = '\0';
    1dae:	f6 01       	movw	r30, r12
    1db0:	ee 0d       	add	r30, r14
    1db2:	ff 1d       	adc	r31, r15
    1db4:	10 82       	st	Z, r1
	
	return encLen;
}
    1db6:	c7 01       	movw	r24, r14
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	27 96       	adiw	r28, 0x07	; 7
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	bf 90       	pop	r11
    1dd8:	af 90       	pop	r10
    1dda:	9f 90       	pop	r9
    1ddc:	8f 90       	pop	r8
    1dde:	7f 90       	pop	r7
    1de0:	6f 90       	pop	r6
    1de2:	08 95       	ret

00001de4 <setup>:
	digitalWrite(PIN_SHUTDOWN, LOW);
	
	delay(3000); //To allow serial to purge the shutdown message
}

void on3MinutesElapsed(bool doWrite) {
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	85 e0       	ldi	r24, 0x05	; 5
    1de8:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <pinMode>
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	85 e0       	ldi	r24, 0x05	; 5
    1df0:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
    1df4:	68 eb       	ldi	r22, 0xB8	; 184
    1df6:	7b e0       	ldi	r23, 0x0B	; 11
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	8d e0       	ldi	r24, 0x0D	; 13
    1e04:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <pinMode>
    1e08:	26 e0       	ldi	r18, 0x06	; 6
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	55 e2       	ldi	r21, 0x25	; 37
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	83 ec       	ldi	r24, 0xC3	; 195
    1e14:	93 e0       	ldi	r25, 0x03	; 3
    1e16:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <_ZN14HardwareSerial5beginEmh>
    1e1a:	64 ee       	ldi	r22, 0xE4	; 228
    1e1c:	75 e0       	ldi	r23, 0x05	; 5
    1e1e:	83 ec       	ldi	r24, 0xC3	; 195
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    1e26:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    1e2a:	84 60       	ori	r24, 0x04	; 4
    1e2c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
    1e30:	08 95       	ret

00001e32 <_Z21ensureFonaInitialisedbPb>:
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	2c 97       	sbiw	r28, 0x0c	; 12
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	f8 2e       	mov	r15, r24
    1e50:	8b 01       	movw	r16, r22
    1e52:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_initFonaLoopCount>
    1e56:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_initFonaLoopCount+0x1>
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <_initFonaLoopCount+0x1>
    1e60:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <_initFonaLoopCount>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	fb 01       	movw	r30, r22
    1e68:	80 83       	st	Z, r24
    1e6a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_fonaStatusInit>
    1e6e:	81 11       	cpse	r24, r1
    1e70:	34 c0       	rjmp	.+104    	; 0x1eda <_Z21ensureFonaInitialisedbPb+0xa8>
    1e72:	6f ec       	ldi	r22, 0xCF	; 207
    1e74:	75 e0       	ldi	r23, 0x05	; 5
    1e76:	83 ec       	ldi	r24, 0xC3	; 195
    1e78:	93 e0       	ldi	r25, 0x03	; 3
    1e7a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    1e7e:	42 e0       	ldi	r20, 0x02	; 2
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	8e ed       	ldi	r24, 0xDE	; 222
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN13Adafruit_FONA5beginEhh>
    1e8a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <_fonaStatusInit>
    1e8e:	83 ed       	ldi	r24, 0xD3	; 211
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	0e 94 48 12 	call	0x2490	; 0x2490 <_ZN12RmMemManager11getModuleIdEv>
    1e96:	e8 2e       	mov	r14, r24
    1e98:	61 e6       	ldi	r22, 0x61	; 97
    1e9a:	71 e0       	ldi	r23, 0x01	; 1
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	07 96       	adiw	r24, 0x07	; 7
    1ea0:	0e 94 44 1c 	call	0x3888	; 0x3888 <_ZN6StringC1EPKc>
    1ea4:	6e 2d       	mov	r22, r14
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	07 96       	adiw	r24, 0x07	; 7
    1eaa:	0e 94 a7 1c 	call	0x394e	; 0x394e <_ZN6String6concatEh>
    1eae:	be 01       	movw	r22, r28
    1eb0:	69 5f       	subi	r22, 0xF9	; 249
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <_ZN6StringC1ERKS_>
    1ebc:	be 01       	movw	r22, r28
    1ebe:	6f 5f       	subi	r22, 0xFF	; 255
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8e ed       	ldi	r24, 0xDE	; 222
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	0e 94 00 04 	call	0x800	; 0x800 <_ZN13Adafruit_FONA12setUserAgentE6String>
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <_ZN6StringD1Ev>
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	07 96       	adiw	r24, 0x07	; 7
    1ed6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <_ZN6StringD1Ev>
    1eda:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_fonaStatusInit>
    1ede:	83 50       	subi	r24, 0x03	; 3
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	a8 f4       	brcc	.+42     	; 0x1f0e <_Z21ensureFonaInitialisedbPb+0xdc>
    1ee4:	64 eb       	ldi	r22, 0xB4	; 180
    1ee6:	75 e0       	ldi	r23, 0x05	; 5
    1ee8:	83 ec       	ldi	r24, 0xC3	; 195
    1eea:	93 e0       	ldi	r25, 0x03	; 3
    1eec:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1ef0:	6f e6       	ldi	r22, 0x6F	; 111
    1ef2:	71 e0       	ldi	r23, 0x01	; 1
    1ef4:	83 ec       	ldi	r24, 0xC3	; 195
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    1efc:	4a e0       	ldi	r20, 0x0A	; 10
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <_fonaStatusInit>
    1f04:	83 ec       	ldi	r24, 0xC3	; 195
    1f06:	93 e0       	ldi	r25, 0x03	; 3
    1f08:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEhi>
    1f0c:	b2 c0       	rjmp	.+356    	; 0x2072 <_Z21ensureFonaInitialisedbPb+0x240>
    1f0e:	ff 20       	and	r15, r15
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <_Z21ensureFonaInitialisedbPb+0xe2>
    1f12:	ac c0       	rjmp	.+344    	; 0x206c <_Z21ensureFonaInitialisedbPb+0x23a>
    1f14:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_gprsStatusInit>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	49 c0       	rjmp	.+146    	; 0x1fae <_Z21ensureFonaInitialisedbPb+0x17c>
    1f1c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_initFonaLoopCount>
    1f20:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_initFonaLoopCount+0x1>
    1f24:	6a e0       	ldi	r22, 0x0A	; 10
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <__udivmodhi4>
    1f2c:	89 2b       	or	r24, r25
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <_Z21ensureFonaInitialisedbPb+0x104>
    1f30:	f8 01       	movw	r30, r16
    1f32:	10 82       	st	Z, r1
    1f34:	3c c0       	rjmp	.+120    	; 0x1fae <_Z21ensureFonaInitialisedbPb+0x17c>
    1f36:	67 e9       	ldi	r22, 0x97	; 151
    1f38:	75 e0       	ldi	r23, 0x05	; 5
    1f3a:	83 ec       	ldi	r24, 0xC3	; 195
    1f3c:	93 e0       	ldi	r25, 0x03	; 3
    1f3e:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	8e ed       	ldi	r24, 0xDE	; 222
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN13Adafruit_FONA10enableGPRSEb>
    1f4c:	f8 2e       	mov	r15, r24
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	8f 0d       	add	r24, r15
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	20 f1       	brcs	.+72     	; 0x1f9e <_Z21ensureFonaInitialisedbPb+0x16c>
    1f56:	6f e7       	ldi	r22, 0x7F	; 127
    1f58:	75 e0       	ldi	r23, 0x05	; 5
    1f5a:	83 ec       	ldi	r24, 0xC3	; 195
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
    1f5e:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1f62:	6f e6       	ldi	r22, 0x6F	; 111
    1f64:	71 e0       	ldi	r23, 0x01	; 1
    1f66:	83 ec       	ldi	r24, 0xC3	; 195
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    1f6e:	6f 2d       	mov	r22, r15
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	4a e0       	ldi	r20, 0x0A	; 10
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	83 ec       	ldi	r24, 0xC3	; 195
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZN5Print7printlnEii>
    1f7e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_initFonaLoopCount>
    1f82:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <_initFonaLoopCount+0x1>
    1f86:	cc 97       	sbiw	r24, 0x3c	; 60
    1f88:	28 f4       	brcc	.+10     	; 0x1f94 <_Z21ensureFonaInitialisedbPb+0x162>
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	10 82       	st	Z, r1
    1f8e:	69 e5       	ldi	r22, 0x59	; 89
    1f90:	75 e0       	ldi	r23, 0x05	; 5
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <_Z21ensureFonaInitialisedbPb+0x174>
    1f94:	f0 92 ce 01 	sts	0x01CE, r15	; 0x8001ce <_gprsStatusInit>
    1f98:	66 e3       	ldi	r22, 0x36	; 54
    1f9a:	75 e0       	ldi	r23, 0x05	; 5
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <_Z21ensureFonaInitialisedbPb+0x174>
    1f9e:	f0 92 ce 01 	sts	0x01CE, r15	; 0x8001ce <_gprsStatusInit>
    1fa2:	66 e1       	ldi	r22, 0x16	; 22
    1fa4:	75 e0       	ldi	r23, 0x05	; 5
    1fa6:	83 ec       	ldi	r24, 0xC3	; 195
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    1fae:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_gprsStatusInit>
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	82 30       	cpi	r24, 0x02	; 2
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <_Z21ensureFonaInitialisedbPb+0x188>
    1fb8:	5c c0       	rjmp	.+184    	; 0x2072 <_Z21ensureFonaInitialisedbPb+0x240>
    1fba:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_gprsSignalLoopCount>
    1fbe:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_gprsSignalLoopCount+0x1>
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <_gprsSignalLoopCount+0x1>
    1fc8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_gprsSignalLoopCount>
    1fcc:	86 ec       	ldi	r24, 0xC6	; 198
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	4a c0       	rjmp	.+148    	; 0x206c <_Z21ensureFonaInitialisedbPb+0x23a>
    1fd8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_gprsSignalLoopCount>
    1fdc:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_gprsSignalLoopCount+0x1>
    1fe0:	6a e0       	ldi	r22, 0x0A	; 10
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <__udivmodhi4>
    1fe8:	89 2b       	or	r24, r25
    1fea:	19 f0       	breq	.+6      	; 0x1ff2 <_Z21ensureFonaInitialisedbPb+0x1c0>
    1fec:	f8 01       	movw	r30, r16
    1fee:	10 82       	st	Z, r1
    1ff0:	3d c0       	rjmp	.+122    	; 0x206c <_Z21ensureFonaInitialisedbPb+0x23a>
    1ff2:	6b ef       	ldi	r22, 0xFB	; 251
    1ff4:	74 e0       	ldi	r23, 0x04	; 4
    1ff6:	83 ec       	ldi	r24, 0xC3	; 195
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    1ffe:	8e ed       	ldi	r24, 0xDE	; 222
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN13Adafruit_FONA7getRSSIEv>
    2006:	69 83       	std	Y+1, r22	; 0x01
    2008:	7a 83       	std	Y+2, r23	; 0x02
    200a:	8b 83       	std	Y+3, r24	; 0x03
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	ce 01       	movw	r24, r28
    2010:	01 96       	adiw	r24, 0x01	; 1
    2012:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN7Helpers9printRSSIEP13FONA_GET_RSSI>
    2016:	ce 01       	movw	r24, r28
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <_ZN7Helpers12isSignalGoodEP13FONA_GET_RSSI>
    201e:	81 11       	cpse	r24, r1
    2020:	13 c0       	rjmp	.+38     	; 0x2048 <_Z21ensureFonaInitialisedbPb+0x216>
    2022:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_gprsSignalLoopCount>
    2026:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_gprsSignalLoopCount+0x1>
    202a:	8c 32       	cpi	r24, 0x2C	; 44
    202c:	91 40       	sbci	r25, 0x01	; 1
    202e:	48 f4       	brcc	.+18     	; 0x2042 <_Z21ensureFonaInitialisedbPb+0x210>
    2030:	f8 01       	movw	r30, r16
    2032:	10 82       	st	Z, r1
    2034:	6c ec       	ldi	r22, 0xCC	; 204
    2036:	74 e0       	ldi	r23, 0x04	; 4
    2038:	83 ec       	ldi	r24, 0xC3	; 195
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    2040:	15 c0       	rjmp	.+42     	; 0x206c <_Z21ensureFonaInitialisedbPb+0x23a>
    2042:	64 e9       	ldi	r22, 0x94	; 148
    2044:	74 e0       	ldi	r23, 0x04	; 4
    2046:	02 c0       	rjmp	.+4      	; 0x204c <_Z21ensureFonaInitialisedbPb+0x21a>
    2048:	6e e6       	ldi	r22, 0x6E	; 110
    204a:	74 e0       	ldi	r23, 0x04	; 4
    204c:	83 ec       	ldi	r24, 0xC3	; 195
    204e:	93 e0       	ldi	r25, 0x03	; 3
    2050:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	ab 81       	ldd	r26, Y+3	; 0x03
    205a:	bc 81       	ldd	r27, Y+4	; 0x04
    205c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <_rssiStatus>
    2060:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <_rssiStatus+0x1>
    2064:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <_rssiStatus+0x2>
    2068:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <_rssiStatus+0x3>
    206c:	8e ed       	ldi	r24, 0xDE	; 222
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <_Z21ensureFonaInitialisedbPb+0x244>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	2c 96       	adiw	r28, 0x0c	; 12
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	08 95       	ret

00002090 <_Z15switchOffSystemv>:
    2090:	61 e7       	ldi	r22, 0x71	; 113
    2092:	71 e0       	ldi	r23, 0x01	; 1
    2094:	83 ec       	ldi	r24, 0xC3	; 195
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	85 e0       	ldi	r24, 0x05	; 5
    20a0:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
    20a4:	68 eb       	ldi	r22, 0xB8	; 184
    20a6:	7b e0       	ldi	r23, 0x0B	; 11
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <delay>

000020b0 <_Z12takeReadingsv>:
	////gsm.sendViaGprs(sm.c_str());
	//
	//writeMem(writeAddress, (uint8_t*)&session, SESSION_SZ);
}

boolean takeReadings() {
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	2a 97       	sbiw	r28, 0x0a	; 10
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
	
	RM_LOGLN(F("Taking readings..."));
    20c4:	6b e5       	ldi	r22, 0x5B	; 91
    20c6:	74 e0       	ldi	r23, 0x04	; 4
    20c8:	83 ec       	ldi	r24, 0xC3	; 195
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	SensorData sd;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	1b 82       	std	Y+3, r1	; 0x03
    20d6:	1a 82       	std	Y+2, r1	; 0x02
    20d8:	1d 82       	std	Y+5, r1	; 0x05
    20da:	1c 82       	std	Y+4, r1	; 0x04
    20dc:	1f 82       	std	Y+7, r1	; 0x07
    20de:	1e 82       	std	Y+6, r1	; 0x06
    20e0:	19 86       	std	Y+9, r1	; 0x09
    20e2:	18 86       	std	Y+8, r1	; 0x08
    20e4:	1a 86       	std	Y+10, r1	; 0x0a
	sensorMgr.readData(&sd);
    20e6:	be 01       	movw	r22, r28
    20e8:	6f 5f       	subi	r22, 0xFF	; 255
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	81 ed       	ldi	r24, 0xD1	; 209
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN13SensorManager8readDataEP10SensorData>
	
	return true;
}
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	2a 96       	adiw	r28, 0x0a	; 10
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	08 95       	ret

00002108 <_Z8sendDatav>:

//Adafruit_FONA* _sendDataFona = NULL;
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
    2108:	4f 92       	push	r4
    210a:	5f 92       	push	r5
    210c:	6f 92       	push	r6
    210e:	7f 92       	push	r7
    2110:	8f 92       	push	r8
    2112:	9f 92       	push	r9
    2114:	af 92       	push	r10
    2116:	bf 92       	push	r11
    2118:	df 92       	push	r13
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	a8 97       	sbiw	r28, 0x28	; 40
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
		return true;
	}
	else{
		return false;
	}
}
    2136:	ad b6       	in	r10, 0x3d	; 61
    2138:	be b6       	in	r11, 0x3e	; 62

//Adafruit_FONA* _sendDataFona = NULL;
uint16_t _sendDataLoopCount = 0;
boolean sendData() {
	
	boolean isInit = (_sendDataLoopCount == 0);
    213a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <_sendDataLoopCount>
    213e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_sendDataLoopCount+0x1>
	
	//Increment before doing any work so doesn't get stuck continuously initialising
	//(by being called from 'loop') due to a loop-resetting error raised by FONA
	++_sendDataLoopCount;
    2142:	9c 01       	movw	r18, r24
    2144:	2f 5f       	subi	r18, 0xFF	; 255
    2146:	3f 4f       	sbci	r19, 0xFF	; 255
    2148:	30 93 c5 01 	sts	0x01C5, r19	; 0x8001c5 <_sendDataLoopCount+0x1>
    214c:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <_sendDataLoopCount>
	
	if (isInit)
    2150:	89 2b       	or	r24, r25
    2152:	31 f4       	brne	.+12     	; 0x2160 <_Z8sendDatav+0x58>
		RM_LOGLN(F("Initialising Fona to send data"));
    2154:	6c e3       	ldi	r22, 0x3C	; 60
    2156:	74 e0       	ldi	r23, 0x04	; 4
    2158:	83 ec       	ldi	r24, 0xC3	; 195
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	boolean isComplete;
	Adafruit_FONA* sendDataFona = ensureFonaInitialised(true, &isComplete);
    2160:	be 01       	movw	r22, r28
    2162:	68 5d       	subi	r22, 0xD8	; 216
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <_Z21ensureFonaInitialisedbPb>
    216c:	8c 01       	movw	r16, r24
	
	if (!isComplete) {
    216e:	d8 a4       	ldd	r13, Y+40	; 0x28
    2170:	d1 10       	cpse	r13, r1
    2172:	03 c0       	rjmp	.+6      	; 0x217a <_Z8sendDatav+0x72>
		RM_LOGLN(F("\t(Fona Init Pending...)"));
    2174:	64 e2       	ldi	r22, 0x24	; 36
    2176:	74 e0       	ldi	r23, 0x04	; 4
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <_Z8sendDatav+0x7a>
		return false; //Still waiting to initialise
	}
		
	if (sendDataFona == NULL) {
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	39 f4       	brne	.+14     	; 0x218c <_Z8sendDatav+0x84>
		RM_LOGLN(F("\t(Fona Init ERROR)"));
    217e:	61 e1       	ldi	r22, 0x11	; 17
    2180:	74 e0       	ldi	r23, 0x04	; 4
    2182:	83 ec       	ldi	r24, 0xC3	; 195
    2184:	93 e0       	ldi	r25, 0x03	; 3
    2186:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
		return true; //Error initialising
    218a:	68 c0       	rjmp	.+208    	; 0x225c <_Z8sendDatav+0x154>
		sendDataFona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);

		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
		
		return true;
    218c:	8d b6       	in	r8, 0x3d	; 61
    218e:	9e b6       	in	r9, 0x3e	; 62
	//	- may already be over the threshold when doing initialisation so kick it off if so
	//	OR should we just check RSSI and send if it's ok?
	if (true) { // _sendDataLoopCount >= GPRS_MAX_SIGNAL_WAIT_TIME) {
		
		//Get RSSI - store? check and/or wait another minute? not?
		FONA_GET_RSSI rssi = sendDataFona->getRSSI();
    2190:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN13Adafruit_FONA7getRSSIEv>
    2194:	2b 01       	movw	r4, r22
    2196:	3c 01       	movw	r6, r24
		//Helpers::printRSSI(&rssi);
		
		SensorData sData[2]; //TODO: HARDCODED
    2198:	ce 01       	movw	r24, r28
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	7c 01       	movw	r14, r24
    219e:	84 e1       	ldi	r24, 0x14	; 20
    21a0:	f7 01       	movw	r30, r14
    21a2:	11 92       	st	Z+, r1
    21a4:	8a 95       	dec	r24
    21a6:	e9 f7       	brne	.-6      	; 0x21a2 <_Z8sendDatav+0x9a>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	8b 87       	std	Y+11, r24	; 0x0b
		unsigned long loadedTo;
		mem.loadSensorData((SensorData*)&sData, 2, &loadedTo);
    21ae:	9e 01       	movw	r18, r28
    21b0:	2e 5d       	subi	r18, 0xDE	; 222
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	42 e0       	ldi	r20, 0x02	; 2
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	b7 01       	movw	r22, r14
    21ba:	83 ed       	ldi	r24, 0xD3	; 211
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>

		GsmPayload payload;
    21c2:	ce 01       	movw	r24, r28
    21c4:	45 96       	adiw	r24, 0x15	; 21
    21c6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN10GsmPayloadC1Ev>
		payload.setModuleId(999);
    21ca:	67 ee       	ldi	r22, 0xE7	; 231
    21cc:	ce 01       	movw	r24, r28
    21ce:	45 96       	adiw	r24, 0x15	; 21
    21d0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN10GsmPayload11setModuleIdEh>
		payload.setBootNumber(33);
    21d4:	61 e2       	ldi	r22, 0x21	; 33
    21d6:	70 e0       	ldi	r23, 0x00	; 0
    21d8:	ce 01       	movw	r24, r28
    21da:	45 96       	adiw	r24, 0x15	; 21
    21dc:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN10GsmPayload13setBootNumberEj>
		payload.setSensorData((SensorData*)&sData, 2);
    21e0:	42 e0       	ldi	r20, 0x02	; 2
    21e2:	b7 01       	movw	r22, r14
    21e4:	ce 01       	movw	r24, r28
    21e6:	45 96       	adiw	r24, 0x15	; 21
    21e8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN10GsmPayload13setSensorDataEP10SensorDatah>
		payload.setRSSI(rssi);
    21ec:	b3 01       	movw	r22, r6
    21ee:	a2 01       	movw	r20, r4
    21f0:	ce 01       	movw	r24, r28
    21f2:	45 96       	adiw	r24, 0x15	; 21
    21f4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <_ZN10GsmPayload7setRSSIE13FONA_GET_RSSI>
		uint16_t encodedSz = GsmPayload::getEncodedPayloadSize_S(2);
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_ZN10GsmPayload23getEncodedPayloadSize_SEh>
    21fe:	3c 01       	movw	r6, r24

		char encodedData[encodedSz];
    2200:	8d b7       	in	r24, 0x3d	; 61
    2202:	9e b7       	in	r25, 0x3e	; 62
    2204:	86 19       	sub	r24, r6
    2206:	97 09       	sbc	r25, r7
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	9e bf       	out	0x3e, r25	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	8d bf       	out	0x3d, r24	; 61
    2212:	ed b7       	in	r30, 0x3d	; 61
    2214:	fe b7       	in	r31, 0x3e	; 62
    2216:	31 96       	adiw	r30, 0x01	; 1
    2218:	7f 01       	movw	r14, r30
		payload.createEncodedPayload(encodedData);
    221a:	bf 01       	movw	r22, r30
    221c:	ce 01       	movw	r24, r28
    221e:	45 96       	adiw	r24, 0x15	; 21
    2220:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN10GsmPayload20createEncodedPayloadEPc>

		RM_LOGLN(F("Encoded data created and ready for send:"));
    2224:	68 ee       	ldi	r22, 0xE8	; 232
    2226:	73 e0       	ldi	r23, 0x03	; 3
    2228:	83 ec       	ldi	r24, 0xC3	; 195
    222a:	93 e0       	ldi	r25, 0x03	; 3
    222c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
		RM_LOGLN(encodedData);
    2230:	b7 01       	movw	r22, r14
    2232:	83 ec       	ldi	r24, 0xC3	; 195
    2234:	93 e0       	ldi	r25, 0x03	; 3
    2236:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN5Print7printlnEPKc>

		uint16_t statuscode;
		sendDataFona->sendDataOverGprs((uint8_t*)encodedData, encodedSz, &statuscode);
    223a:	9e 01       	movw	r18, r28
    223c:	2a 5d       	subi	r18, 0xDA	; 218
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	a3 01       	movw	r20, r6
    2242:	b7 01       	movw	r22, r14
    2244:	c8 01       	movw	r24, r16
    2246:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN13Adafruit_FONA16sendDataOverGprsEPhjPj>

		//If all done - reset (even though board will be reset - but for tests)
		_sendDataLoopCount = 0;
    224a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <_sendDataLoopCount+0x1>
    224e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_sendDataLoopCount>
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	9e be       	out	0x3e, r9	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	8d be       	out	0x3d, r8	; 61
		return true;
	}
	else{
		return false;
	}
}
    225c:	8d 2d       	mov	r24, r13
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	be be       	out	0x3e, r11	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	ad be       	out	0x3d, r10	; 61
    2268:	a8 96       	adiw	r28, 0x28	; 40
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	bf 90       	pop	r11
    2284:	af 90       	pop	r10
    2286:	9f 90       	pop	r9
    2288:	8f 90       	pop	r8
    228a:	7f 90       	pop	r7
    228c:	6f 90       	pop	r6
    228e:	5f 90       	pop	r5
    2290:	4f 90       	pop	r4
    2292:	08 95       	ret

00002294 <loop>:

//Loop-scoped variables
uint16_t _timerCounter = 0;
void loop() {

	delay(1000);
    2294:	68 ee       	ldi	r22, 0xE8	; 232
    2296:	73 e0       	ldi	r23, 0x03	; 3
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 ae 1a 	call	0x355c	; 0x355c <delay>
	++_timerCounter;
    22a0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
    22a4:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x1>
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <__data_end+0x1>
    22ae:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>

	RM_LOG2(F("Behaviour"), _behaviour);
    22b2:	6e ed       	ldi	r22, 0xDE	; 222
    22b4:	73 e0       	ldi	r23, 0x03	; 3
    22b6:	83 ec       	ldi	r24, 0xC3	; 195
    22b8:	93 e0       	ldi	r25, 0x03	; 3
    22ba:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    22be:	6f e6       	ldi	r22, 0x6F	; 111
    22c0:	71 e0       	ldi	r23, 0x01	; 1
    22c2:	83 ec       	ldi	r24, 0xC3	; 195
    22c4:	93 e0       	ldi	r25, 0x03	; 3
    22c6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN5Print5printEPKc>
    22ca:	4a e0       	ldi	r20, 0x0A	; 10
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <_behaviour>
    22d2:	83 ec       	ldi	r24, 0xC3	; 195
    22d4:	93 e0       	ldi	r25, 0x03	; 3
    22d6:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN5Print7printlnEhi>
	
	if((_behaviour&SYS_BEHAVIOUR::TakeReadings) != 0) {
    22da:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    22de:	80 ff       	sbrs	r24, 0
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <loop+0x60>
		
		if (takeReadings())
    22e2:	0e 94 58 10 	call	0x20b0	; 0x20b0 <_Z12takeReadingsv>
    22e6:	88 23       	and	r24, r24
    22e8:	29 f0       	breq	.+10     	; 0x22f4 <loop+0x60>
			_behaviour &= ~SYS_BEHAVIOUR::TakeReadings;
    22ea:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    22ee:	8e 7f       	andi	r24, 0xFE	; 254
    22f0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
	}
	
	if ((_behaviour&SYS_BEHAVIOUR::SendData) != 0) {
    22f4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    22f8:	81 ff       	sbrs	r24, 1
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <loop+0x7a>
		
		if (sendData())
    22fc:	0e 94 84 10 	call	0x2108	; 0x2108 <_Z8sendDatav>
    2300:	88 23       	and	r24, r24
    2302:	29 f0       	breq	.+10     	; 0x230e <loop+0x7a>
			_behaviour &= ~SYS_BEHAVIOUR::SendData;
    2304:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2308:	8d 7f       	andi	r24, 0xFD	; 253
    230a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
	}

	if ((_behaviour&SYS_BEHAVIOUR::ExtendedGsmTest) != 0) {
    230e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2312:	82 ff       	sbrs	r24, 2
    2314:	17 c0       	rjmp	.+46     	; 0x2344 <loop+0xb0>
	
		if (_timerCounter == 1)
    2316:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
    231a:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x1>
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	31 f4       	brne	.+12     	; 0x232e <loop+0x9a>
			ExtendedTests::startExtendedGsmTest(&__fona, &mem);
    2322:	63 ed       	ldi	r22, 0xD3	; 211
    2324:	71 e0       	ldi	r23, 0x01	; 1
    2326:	8e ed       	ldi	r24, 0xDE	; 222
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>
	
		if (sendData()) {
    232e:	0e 94 84 10 	call	0x2108	; 0x2108 <_Z8sendDatav>
    2332:	88 23       	and	r24, r24
    2334:	39 f0       	breq	.+14     	; 0x2344 <loop+0xb0>
			
			_behaviour &= ~SYS_BEHAVIOUR::ExtendedGsmTest;
    2336:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    233a:	8b 7f       	andi	r24, 0xFB	; 251
    233c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <_behaviour>
			ExtendedTests::endExtendedGsmTest();
    2340:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <_ZN13ExtendedTests18endExtendedGsmTestEv>
		}
	}

	if (_behaviour == SYS_BEHAVIOUR::DoNothing) {
    2344:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <_behaviour>
    2348:	81 11       	cpse	r24, r1
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <loop+0xbc>
		
		switchOffSystem();
    234c:	0c 94 48 10 	jmp	0x2090	; 0x2090 <_Z15switchOffSystemv>
    2350:	08 95       	ret

00002352 <_GLOBAL__sub_I___fona>:
#include "SensorManager.h"
#include "ExtendedTests.h"


//C++ instances
Adafruit_FONA __fona = Adafruit_FONA(FONA_RST, IS_GSM_MOCK);
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	64 e0       	ldi	r22, 0x04	; 4
    2356:	8e ed       	ldi	r24, 0xDE	; 222
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	0e 94 c3 03 	call	0x786	; 0x786 <_ZN13Adafruit_FONAC1Eab>
RmMemManager mem = RmMemManager(false);
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	83 ed       	ldi	r24, 0xD3	; 211
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN12RmMemManagerC1Eb>
//GpsManager gps = GpsManager(IS_GPS_MOCK);
SensorManager sensorMgr = SensorManager(true);
    2368:	61 e0       	ldi	r22, 0x01	; 1
    236a:	81 ed       	ldi	r24, 0xD1	; 209
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN13SensorManagerC1Eb>
    2372:	e6 ec       	ldi	r30, 0xC6	; 198
    2374:	f1 e0       	ldi	r31, 0x01	; 1
    2376:	10 82       	st	Z, r1
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	12 82       	std	Z+2, r1	; 0x02
    237c:	08 95       	ret

0000237e <_GLOBAL__sub_D___fona>:
#define prog_char_strcpy(to, fromprogmem)		strcpy_P((to), (fromprogmem))




class Adafruit_FONA : public FONAStreamType {
    237e:	85 e5       	ldi	r24, 0x55	; 85
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <__fona+0x1>
    2386:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <__fona>
    238a:	83 ef       	ldi	r24, 0xF3	; 243
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <_ZN6StringD1Ev>

00002392 <_ZN7TwoWire5writeEi>:
	
	//TODO: Blank out rest of eeprom too!
	//		Else MEM_TYPE may be set in some places and printData() fails!
	
	internalWrite(MEMLOC_START, (uint8_t*)&meta, sizeof(ModuleMeta));
}
    2392:	dc 01       	movw	r26, r24
    2394:	ed 91       	ld	r30, X+
    2396:	fc 91       	ld	r31, X
    2398:	01 90       	ld	r0, Z+
    239a:	f0 81       	ld	r31, Z
    239c:	e0 2d       	mov	r30, r0
    239e:	09 94       	ijmp

000023a0 <_ZN12RmMemManagerC1Eb>:
    23a0:	fc 01       	movw	r30, r24
    23a2:	14 82       	std	Z+4, r1	; 0x04
    23a4:	15 82       	std	Z+5, r1	; 0x05
    23a6:	16 82       	std	Z+6, r1	; 0x06
    23a8:	17 82       	std	Z+7, r1	; 0x07
    23aa:	80 e8       	ldi	r24, 0x80	; 128
    23ac:	80 87       	std	Z+8, r24	; 0x08
    23ae:	81 87       	std	Z+9, r24	; 0x09
    23b0:	12 86       	std	Z+10, r1	; 0x0a
    23b2:	63 83       	std	Z+3, r22	; 0x03
    23b4:	61 11       	cpse	r22, r1
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <_ZN12RmMemManagerC1Eb+0x20>
    23b8:	8b e6       	ldi	r24, 0x6B	; 107
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <_ZN7TwoWire5beginEv>
    23c0:	08 95       	ret

000023c2 <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm>:
    23c2:	fc 01       	movw	r30, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	61 15       	cp	r22, r1
    23cc:	71 05       	cpc	r23, r1
    23ce:	39 f0       	breq	.+14     	; 0x23de <_ZN12RmMemManager14loadSensorDataEP10SensorDatajPm+0x1c>
    23d0:	42 81       	ldd	r20, Z+2	; 0x02
    23d2:	2a e0       	ldi	r18, 0x0A	; 10
    23d4:	42 9f       	mul	r20, r18
    23d6:	a0 01       	movw	r20, r0
    23d8:	11 24       	eor	r1, r1
    23da:	0e 94 e5 21 	call	0x43ca	; 0x43ca <memcpy>
    23de:	61 e0       	ldi	r22, 0x01	; 1
    23e0:	70 e0       	ldi	r23, 0x00	; 0
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	08 95       	ret

000023e8 <_Z12internalReadjPhh>:
	
		delay(15); //Spec says 5 but that causes intermittent random reads at higher temperatures
	}
}

void internalRead(uint16_t address, uint8_t* data, uint8_t numBytes) {
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	eb 01       	movw	r28, r22
    23f6:	7b 01       	movw	r14, r22
    23f8:	e4 0e       	add	r14, r20
    23fa:	f1 1c       	adc	r15, r1
    23fc:	8c 01       	movw	r16, r24
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    23fe:	ce 15       	cp	r28, r14
    2400:	df 05       	cpc	r29, r15
    2402:	71 f1       	breq	.+92     	; 0x2460 <_Z12internalReadjPhh+0x78>
		RM_LOGMEM((int) (thisByteAddr >> 8));
		RM_LOGMEM(F(" and LSB "));
		RM_LOGMEM((int) (thisByteAddr & 0xFF));
		RM_LOGMEM(F(" : "));
		
		Wire.beginTransmission(0x50);
    2404:	60 e5       	ldi	r22, 0x50	; 80
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	8b e6       	ldi	r24, 0x6B	; 107
    240a:	93 e0       	ldi	r25, 0x03	; 3
    240c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write((int) (thisByteAddr >> 8)); // msb
    2410:	61 2f       	mov	r22, r17
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	8b e6       	ldi	r24, 0x6B	; 107
    2416:	93 e0       	ldi	r25, 0x03	; 3
    2418:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN7TwoWire5writeEi>
		Wire.write((int) (thisByteAddr & 0xFF)); // lsb
    241c:	b8 01       	movw	r22, r16
    241e:	77 27       	eor	r23, r23
    2420:	8b e6       	ldi	r24, 0x6B	; 107
    2422:	93 e0       	ldi	r25, 0x03	; 3
    2424:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    2428:	8b e6       	ldi	r24, 0x6B	; 107
    242a:	93 e0       	ldi	r25, 0x03	; 3
    242c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN7TwoWire15endTransmissionEv>
		
		
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	60 e5       	ldi	r22, 0x50	; 80
    2436:	70 e0       	ldi	r23, 0x00	; 0
    2438:	8b e6       	ldi	r24, 0x6B	; 107
    243a:	93 e0       	ldi	r25, 0x03	; 3
    243c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7TwoWire11requestFromEii>
		
		uint8_t readByte=0xFF;
		if (Wire.available())
    2440:	8b e6       	ldi	r24, 0x6B	; 107
    2442:	93 e0       	ldi	r25, 0x03	; 3
    2444:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN7TwoWire9availableEv>
    2448:	89 2b       	or	r24, r25
    244a:	29 f0       	breq	.+10     	; 0x2456 <_Z12internalReadjPhh+0x6e>
			readByte = Wire.read();
    244c:	8b e6       	ldi	r24, 0x6B	; 107
    244e:	93 e0       	ldi	r25, 0x03	; 3
    2450:	0e 94 ef 14 	call	0x29de	; 0x29de <_ZN7TwoWire4readEv>
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <_Z12internalReadjPhh+0x70>
		//TODO: CHECK RETURN VALUE IN END-TRANSMISSION
		
		
		Wire.requestFrom(0x50,1); //Todo: can specify multiple?
		
		uint8_t readByte=0xFF;
    2456:	8f ef       	ldi	r24, 0xFF	; 255
			RM_LOGMEMLN("WIRE NOT AVAILABLE"); //TODO: error code
		
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
    2458:	89 93       	st	Y+, r24
    245a:	0f 5f       	subi	r16, 0xFF	; 255
    245c:	1f 4f       	sbci	r17, 0xFF	; 255
	//RM_LOGMEM(F(" to address "));
	//RM_LOGMEM((uint8_t)data);//TODO
	RM_LOGMEM(F(" of size "));
	RM_LOGMEMLN(numBytes);
	
	for(uint8_t i=0;i<numBytes;i++) {
    245e:	cf cf       	rjmp	.-98     	; 0x23fe <_Z12internalReadjPhh+0x16>
		RM_LOGMEM(F("Raw byte read:"));
		RM_LOGMEMLN(readByte);
		
		*(data+i) = readByte;
	}
}
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	ff 90       	pop	r15
    246a:	ef 90       	pop	r14
    246c:	08 95       	ret

0000246e <_ZN12RmMemManager18getUCharFromMemoryEj>:

uint8_t RmMemManager::getUCharFromMemory(uint16_t address) {
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	1f 92       	push	r1
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	cb 01       	movw	r24, r22
	
	uint8_t value;
	internalRead(address, (uint8_t*)&value, sizeof(value));
    247a:	41 e0       	ldi	r20, 0x01	; 1
    247c:	be 01       	movw	r22, r28
    247e:	6f 5f       	subi	r22, 0xFF	; 255
    2480:	7f 4f       	sbci	r23, 0xFF	; 255
    2482:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_Z12internalReadjPhh>
	return value;
}
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	0f 90       	pop	r0
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	08 95       	ret

00002490 <_ZN12RmMemManager11getModuleIdEv>:
}

uint8_t RmMemManager::getModuleId() {
	
	uint16_t addr = MEMLOC_START + offsetof(ModuleMeta, moduleId);
	uint8_t val = getUCharFromMemory(addr);
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	0c 94 37 12 	jmp	0x246e	; 0x246e <_ZN12RmMemManager18getUCharFromMemoryEj>

00002498 <_ZN13SensorManagerC1Eb>:
	while (bit_is_set(ADCSRA,ADSC));
	result = ADCL;
	result |= ADCH<<8;
	result = 1125300L / result; // Back-calculate AVcc in mV
	return result / 1000;
}
    2498:	fc 01       	movw	r30, r24
    249a:	60 83       	st	Z, r22
    249c:	08 95       	ret

0000249e <_ZN13SensorManager16takeSampleAnalogEh>:

//Returns (analog_reading * vcc)
uint16_t SensorManager::takeSampleAnalog(uint8_t pinNo)	{
	
	if (_isMock)
    249e:	fc 01       	movw	r30, r24
    24a0:	80 81       	ld	r24, Z
    24a2:	81 11       	cpse	r24, r1
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <_ZN13SensorManager16takeSampleAnalogEh+0xe>
		return 5;
	
	uint16_t batt = analogRead(pinNo);
    24a6:	86 2f       	mov	r24, r22
    24a8:	0c 94 25 1b 	jmp	0x364a	; 0x364a <analogRead>
	
	//float vcc = readVcc();
	//batt *= vcc;
	
	return batt;
}
    24ac:	85 e0       	ldi	r24, 0x05	; 5
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 95       	ret

000024b2 <_ZN13SensorManager11getMockDataEP10SensorData>:

void SensorManager::getMockData(SensorData* ret) {
    24b2:	fc 01       	movw	r30, r24
    24b4:	db 01       	movw	r26, r22
	
	++__mockDataCounter; //After 255, will roll back to 0, fine for tests
    24b6:	81 81       	ldd	r24, Z+1	; 0x01
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	81 83       	std	Z+1, r24	; 0x01
	
	ret->battVoltage = __mockDataCounter;
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	12 96       	adiw	r26, 0x02	; 2
    24c0:	9c 93       	st	X, r25
    24c2:	8e 93       	st	-X, r24
    24c4:	11 97       	sbiw	r26, 0x01	; 1
	ret->pVVoltage = __mockDataCounter*10;
    24c6:	81 81       	ldd	r24, Z+1	; 0x01
    24c8:	2a e0       	ldi	r18, 0x0A	; 10
    24ca:	82 9f       	mul	r24, r18
    24cc:	c0 01       	movw	r24, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	14 96       	adiw	r26, 0x04	; 4
    24d2:	9c 93       	st	X, r25
    24d4:	8e 93       	st	-X, r24
    24d6:	13 97       	sbiw	r26, 0x03	; 3
	ret->current = __mockDataCounter%7;
    24d8:	81 81       	ldd	r24, Z+1	; 0x01
    24da:	67 e0       	ldi	r22, 0x07	; 7
    24dc:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <__udivmodqi4>
    24e0:	89 2f       	mov	r24, r25
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	16 96       	adiw	r26, 0x06	; 6
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	15 97       	sbiw	r26, 0x05	; 5
	ret->temperature = __mockDataCounter*100;
    24ec:	81 81       	ldd	r24, Z+1	; 0x01
    24ee:	24 e6       	ldi	r18, 0x64	; 100
    24f0:	82 9f       	mul	r24, r18
    24f2:	c0 01       	movw	r24, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	18 96       	adiw	r26, 0x08	; 8
    24f8:	9c 93       	st	X, r25
    24fa:	8e 93       	st	-X, r24
    24fc:	17 97       	sbiw	r26, 0x07	; 7
    24fe:	08 95       	ret

00002500 <_ZN13SensorManager8readDataEP10SensorData>:
	
	//return ret;
}

void SensorManager::readData(SensorData* ret) {
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	8c 01       	movw	r16, r24
    2516:	eb 01       	movw	r28, r22
	
	if (_isMock) {
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	88 23       	and	r24, r24
    251e:	21 f0       	breq	.+8      	; 0x2528 <_ZN13SensorManager8readDataEP10SensorData+0x28>
		this->getMockData(ret);
    2520:	c8 01       	movw	r24, r16
    2522:	0e 94 59 12 	call	0x24b2	; 0x24b2 <_ZN13SensorManager11getMockDataEP10SensorData>
    2526:	1b c0       	rjmp	.+54     	; 0x255e <_ZN13SensorManager8readDataEP10SensorData+0x5e>
	}
	else {
		uint16_t pvRaw   = takeSampleAnalog(PIN_PV_VOLTAGE);
    2528:	6e e0       	ldi	r22, 0x0E	; 14
    252a:	c8 01       	movw	r24, r16
    252c:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN13SensorManager16takeSampleAnalogEh>
    2530:	6c 01       	movw	r12, r24
		uint16_t battRaw = takeSampleAnalog(PIN_BATT_VOLTAGE);
    2532:	6f e0       	ldi	r22, 0x0F	; 15
    2534:	c8 01       	movw	r24, r16
    2536:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN13SensorManager16takeSampleAnalogEh>
    253a:	5c 01       	movw	r10, r24
		uint16_t currentRaw = takeSampleAnalog(PIN_CURRENT);
    253c:	61 e1       	ldi	r22, 0x11	; 17
    253e:	c8 01       	movw	r24, r16
    2540:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN13SensorManager16takeSampleAnalogEh>
    2544:	7c 01       	movw	r14, r24
		uint16_t tempRaw = takeSampleAnalog(PIN_TEMP);
    2546:	60 e1       	ldi	r22, 0x10	; 16
    2548:	c8 01       	movw	r24, r16
    254a:	0e 94 4f 12 	call	0x249e	; 0x249e <_ZN13SensorManager16takeSampleAnalogEh>

		ret->battVoltage = battRaw;
    254e:	ba 82       	std	Y+2, r11	; 0x02
    2550:	a9 82       	std	Y+1, r10	; 0x01
		ret->pVVoltage = pvRaw;
    2552:	dc 82       	std	Y+4, r13	; 0x04
    2554:	cb 82       	std	Y+3, r12	; 0x03
		ret->current = currentRaw;
    2556:	fe 82       	std	Y+6, r15	; 0x06
    2558:	ed 82       	std	Y+5, r14	; 0x05
		ret->temperature = tempRaw;
    255a:	98 87       	std	Y+8, r25	; 0x08
    255c:	8f 83       	std	Y+7, r24	; 0x07
	}
	
	Helpers::printSensorData(ret);
    255e:	ce 01       	movw	r24, r28
	
	//return ret;
}
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	cf 90       	pop	r12
    2570:	bf 90       	pop	r11
    2572:	af 90       	pop	r10
		ret->pVVoltage = pvRaw;
		ret->current = currentRaw;
		ret->temperature = tempRaw;
	}
	
	Helpers::printSensorData(ret);
    2574:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <_ZN7Helpers15printSensorDataEP10SensorData>

00002578 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2578:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <twi_sendStop>
    2582:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_inRepStart>
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	82 e1       	ldi	r24, 0x12	; 18
    258a:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	83 e1       	ldi	r24, 0x13	; 19
    2592:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
    2596:	e9 eb       	ldi	r30, 0xB9	; 185
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8e 7f       	andi	r24, 0xFE	; 254
    259e:	80 83       	st	Z, r24
    25a0:	80 81       	ld	r24, Z
    25a2:	8d 7f       	andi	r24, 0xFD	; 253
    25a4:	80 83       	st	Z, r24
    25a6:	88 e4       	ldi	r24, 0x48	; 72
    25a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    25ac:	85 e4       	ldi	r24, 0x45	; 69
    25ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    25b2:	08 95       	ret

000025b4 <twi_readFrom>:
    25b4:	41 32       	cpi	r20, 0x21	; 33
    25b6:	08 f0       	brcs	.+2      	; 0x25ba <twi_readFrom+0x6>
    25b8:	43 c0       	rjmp	.+134    	; 0x2640 <twi_readFrom+0x8c>
    25ba:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <twi_state>
    25be:	91 11       	cpse	r25, r1
    25c0:	fc cf       	rjmp	.-8      	; 0x25ba <twi_readFrom+0x6>
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <twi_state>
    25c8:	20 93 68 03 	sts	0x0368, r18	; 0x800368 <twi_sendStop>
    25cc:	2f ef       	ldi	r18, 0xFF	; 255
    25ce:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <twi_error>
    25d2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_masterBufferIndex>
    25d6:	24 0f       	add	r18, r20
    25d8:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <twi_masterBufferLength>
    25dc:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <twi_slarw>
    25e0:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <twi_slarw>
    25e4:	88 0f       	add	r24, r24
    25e6:	89 2b       	or	r24, r25
    25e8:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_slarw>
    25ec:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <twi_inRepStart>
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	61 f4       	brne	.+24     	; 0x260c <twi_readFrom+0x58>
    25f4:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_inRepStart>
    25f8:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_slarw>
    25fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2600:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2604:	83 fd       	sbrc	r24, 3
    2606:	f8 cf       	rjmp	.-16     	; 0x25f8 <twi_readFrom+0x44>
    2608:	85 ec       	ldi	r24, 0xC5	; 197
    260a:	01 c0       	rjmp	.+2      	; 0x260e <twi_readFrom+0x5a>
    260c:	85 ee       	ldi	r24, 0xE5	; 229
    260e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2612:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_state>
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	e1 f3       	breq	.-8      	; 0x2612 <twi_readFrom+0x5e>
    261a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <twi_masterBufferIndex>
    261e:	84 17       	cp	r24, r20
    2620:	10 f4       	brcc	.+4      	; 0x2626 <twi_readFrom+0x72>
    2622:	40 91 42 03 	lds	r20, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2626:	a3 e4       	ldi	r26, 0x43	; 67
    2628:	b3 e0       	ldi	r27, 0x03	; 3
    262a:	96 2f       	mov	r25, r22
    262c:	fb 01       	movw	r30, r22
    262e:	8e 2f       	mov	r24, r30
    2630:	89 1b       	sub	r24, r25
    2632:	84 17       	cp	r24, r20
    2634:	18 f4       	brcc	.+6      	; 0x263c <twi_readFrom+0x88>
    2636:	8d 91       	ld	r24, X+
    2638:	81 93       	st	Z+, r24
    263a:	f9 cf       	rjmp	.-14     	; 0x262e <twi_readFrom+0x7a>
    263c:	84 2f       	mov	r24, r20
    263e:	08 95       	ret
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	08 95       	ret

00002644 <twi_writeTo>:
    2644:	0f 93       	push	r16
    2646:	41 32       	cpi	r20, 0x21	; 33
    2648:	08 f0       	brcs	.+2      	; 0x264c <twi_writeTo+0x8>
    264a:	4a c0       	rjmp	.+148    	; 0x26e0 <twi_writeTo+0x9c>
    264c:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <twi_state>
    2650:	91 11       	cpse	r25, r1
    2652:	fc cf       	rjmp	.-8      	; 0x264c <twi_writeTo+0x8>
    2654:	32 e0       	ldi	r19, 0x02	; 2
    2656:	30 93 6a 03 	sts	0x036A, r19	; 0x80036a <twi_state>
    265a:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <twi_sendStop>
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	30 93 fd 02 	sts	0x02FD, r19	; 0x8002fd <twi_error>
    2664:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_masterBufferIndex>
    2668:	40 93 41 03 	sts	0x0341, r20	; 0x800341 <twi_masterBufferLength>
    266c:	56 2f       	mov	r21, r22
    266e:	a3 e4       	ldi	r26, 0x43	; 67
    2670:	b3 e0       	ldi	r27, 0x03	; 3
    2672:	fb 01       	movw	r30, r22
    2674:	3e 2f       	mov	r19, r30
    2676:	35 1b       	sub	r19, r21
    2678:	34 17       	cp	r19, r20
    267a:	18 f4       	brcc	.+6      	; 0x2682 <twi_writeTo+0x3e>
    267c:	31 91       	ld	r19, Z+
    267e:	3d 93       	st	X+, r19
    2680:	f9 cf       	rjmp	.-14     	; 0x2674 <twi_writeTo+0x30>
    2682:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <twi_slarw>
    2686:	30 91 69 03 	lds	r19, 0x0369	; 0x800369 <twi_slarw>
    268a:	88 0f       	add	r24, r24
    268c:	83 2b       	or	r24, r19
    268e:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <twi_slarw>
    2692:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <twi_inRepStart>
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	61 f4       	brne	.+24     	; 0x26b2 <twi_writeTo+0x6e>
    269a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <twi_inRepStart>
    269e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_slarw>
    26a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    26a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    26aa:	83 fd       	sbrc	r24, 3
    26ac:	f8 cf       	rjmp	.-16     	; 0x269e <twi_writeTo+0x5a>
    26ae:	85 ec       	ldi	r24, 0xC5	; 197
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <twi_writeTo+0x70>
    26b2:	85 ee       	ldi	r24, 0xE5	; 229
    26b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    26b8:	22 23       	and	r18, r18
    26ba:	21 f0       	breq	.+8      	; 0x26c4 <twi_writeTo+0x80>
    26bc:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <twi_state>
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	d1 f3       	breq	.-12     	; 0x26b8 <twi_writeTo+0x74>
    26c4:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_error>
    26c8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ca:	79 f0       	breq	.+30     	; 0x26ea <twi_writeTo+0xa6>
    26cc:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_error>
    26d0:	80 32       	cpi	r24, 0x20	; 32
    26d2:	41 f0       	breq	.+16     	; 0x26e4 <twi_writeTo+0xa0>
    26d4:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <twi_error>
    26d8:	80 33       	cpi	r24, 0x30	; 48
    26da:	31 f0       	breq	.+12     	; 0x26e8 <twi_writeTo+0xa4>
    26dc:	94 e0       	ldi	r25, 0x04	; 4
    26de:	05 c0       	rjmp	.+10     	; 0x26ea <twi_writeTo+0xa6>
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <twi_writeTo+0xa6>
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <twi_writeTo+0xa6>
    26e8:	93 e0       	ldi	r25, 0x03	; 3
    26ea:	89 2f       	mov	r24, r25
    26ec:	0f 91       	pop	r16
    26ee:	08 95       	ret

000026f0 <twi_transmit>:
    26f0:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <twi_txBufferLength>
    26f4:	26 2f       	mov	r18, r22
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	24 0f       	add	r18, r20
    26fa:	31 1d       	adc	r19, r1
    26fc:	21 32       	cpi	r18, 0x21	; 33
    26fe:	31 05       	cpc	r19, r1
    2700:	dc f4       	brge	.+54     	; 0x2738 <twi_transmit+0x48>
    2702:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <twi_state>
    2706:	24 30       	cpi	r18, 0x04	; 4
    2708:	c9 f4       	brne	.+50     	; 0x273c <twi_transmit+0x4c>
    270a:	fc 01       	movw	r30, r24
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	86 17       	cp	r24, r22
    2712:	58 f4       	brcc	.+22     	; 0x272a <twi_transmit+0x3a>
    2714:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <twi_txBufferLength>
    2718:	21 91       	ld	r18, Z+
    271a:	dc 01       	movw	r26, r24
    271c:	af 5d       	subi	r26, 0xDF	; 223
    271e:	bc 4f       	sbci	r27, 0xFC	; 252
    2720:	a3 0f       	add	r26, r19
    2722:	b1 1d       	adc	r27, r1
    2724:	2c 93       	st	X, r18
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	f3 cf       	rjmp	.-26     	; 0x2710 <twi_transmit+0x20>
    272a:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_txBufferLength>
    272e:	68 0f       	add	r22, r24
    2730:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <twi_txBufferLength>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	08 95       	ret
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	08 95       	ret
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	08 95       	ret

00002740 <twi_attachSlaveRxEvent>:
    2740:	90 93 64 03 	sts	0x0364, r25	; 0x800364 <twi_onSlaveReceive+0x1>
    2744:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_onSlaveReceive>
    2748:	08 95       	ret

0000274a <twi_attachSlaveTxEvent>:
    274a:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <twi_onSlaveTransmit+0x1>
    274e:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_onSlaveTransmit>
    2752:	08 95       	ret

00002754 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2754:	85 ed       	ldi	r24, 0xD5	; 213
    2756:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    275a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    275e:	84 fd       	sbrc	r24, 4
    2760:	fc cf       	rjmp	.-8      	; 0x275a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2762:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    2766:	08 95       	ret

00002768 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2768:	85 ec       	ldi	r24, 0xC5	; 197
    276a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    276e:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
    2772:	08 95       	ret

00002774 <__vector_24>:
}

ISR(TWI_vect)
{
    2774:	1f 92       	push	r1
    2776:	0f 92       	push	r0
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	0f 92       	push	r0
    277c:	11 24       	eor	r1, r1
    277e:	2f 93       	push	r18
    2780:	3f 93       	push	r19
    2782:	4f 93       	push	r20
    2784:	5f 93       	push	r21
    2786:	6f 93       	push	r22
    2788:	7f 93       	push	r23
    278a:	8f 93       	push	r24
    278c:	9f 93       	push	r25
    278e:	af 93       	push	r26
    2790:	bf 93       	push	r27
    2792:	ef 93       	push	r30
    2794:	ff 93       	push	r31
  switch(TW_STATUS){
    2796:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    279a:	88 7f       	andi	r24, 0xF8	; 248
    279c:	80 36       	cpi	r24, 0x60	; 96
    279e:	09 f4       	brne	.+2      	; 0x27a2 <__vector_24+0x2e>
    27a0:	9e c0       	rjmp	.+316    	; 0x28de <__vector_24+0x16a>
    27a2:	78 f5       	brcc	.+94     	; 0x2802 <__vector_24+0x8e>
    27a4:	88 32       	cpi	r24, 0x28	; 40
    27a6:	09 f4       	brne	.+2      	; 0x27aa <__vector_24+0x36>
    27a8:	5d c0       	rjmp	.+186    	; 0x2864 <__vector_24+0xf0>
    27aa:	90 f4       	brcc	.+36     	; 0x27d0 <__vector_24+0x5c>
    27ac:	80 31       	cpi	r24, 0x10	; 16
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <__vector_24+0x3e>
    27b0:	56 c0       	rjmp	.+172    	; 0x285e <__vector_24+0xea>
    27b2:	38 f4       	brcc	.+14     	; 0x27c2 <__vector_24+0x4e>
    27b4:	88 23       	and	r24, r24
    27b6:	09 f4       	brne	.+2      	; 0x27ba <__vector_24+0x46>
    27b8:	f5 c0       	rjmp	.+490    	; 0x29a4 <__vector_24+0x230>
    27ba:	88 30       	cpi	r24, 0x08	; 8
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <__vector_24+0x4c>
    27be:	4f c0       	rjmp	.+158    	; 0x285e <__vector_24+0xea>
    27c0:	f5 c0       	rjmp	.+490    	; 0x29ac <__vector_24+0x238>
    27c2:	88 31       	cpi	r24, 0x18	; 24
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <__vector_24+0x54>
    27c6:	4e c0       	rjmp	.+156    	; 0x2864 <__vector_24+0xf0>
    27c8:	80 32       	cpi	r24, 0x20	; 32
    27ca:	09 f4       	brne	.+2      	; 0x27ce <__vector_24+0x5a>
    27cc:	5f c0       	rjmp	.+190    	; 0x288c <__vector_24+0x118>
    27ce:	ee c0       	rjmp	.+476    	; 0x29ac <__vector_24+0x238>
    27d0:	80 34       	cpi	r24, 0x40	; 64
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <__vector_24+0x62>
    27d4:	6a c0       	rjmp	.+212    	; 0x28aa <__vector_24+0x136>
    27d6:	58 f4       	brcc	.+22     	; 0x27ee <__vector_24+0x7a>
    27d8:	80 33       	cpi	r24, 0x30	; 48
    27da:	09 f4       	brne	.+2      	; 0x27de <__vector_24+0x6a>
    27dc:	57 c0       	rjmp	.+174    	; 0x288c <__vector_24+0x118>
    27de:	88 33       	cpi	r24, 0x38	; 56
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <__vector_24+0x70>
    27e2:	e4 c0       	rjmp	.+456    	; 0x29ac <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    27e4:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_error>
      twi_releaseBus();
    27e8:	0e 94 b4 13 	call	0x2768	; 0x2768 <twi_releaseBus>
      break;
    27ec:	df c0       	rjmp	.+446    	; 0x29ac <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    27ee:	80 35       	cpi	r24, 0x50	; 80
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <__vector_24+0x80>
    27f2:	4f c0       	rjmp	.+158    	; 0x2892 <__vector_24+0x11e>
    27f4:	88 35       	cpi	r24, 0x58	; 88
    27f6:	09 f4       	brne	.+2      	; 0x27fa <__vector_24+0x86>
    27f8:	5d c0       	rjmp	.+186    	; 0x28b4 <__vector_24+0x140>
    27fa:	88 34       	cpi	r24, 0x48	; 72
    27fc:	09 f0       	breq	.+2      	; 0x2800 <__vector_24+0x8c>
    27fe:	d6 c0       	rjmp	.+428    	; 0x29ac <__vector_24+0x238>
    2800:	d3 c0       	rjmp	.+422    	; 0x29a8 <__vector_24+0x234>
    2802:	88 39       	cpi	r24, 0x98	; 152
    2804:	09 f4       	brne	.+2      	; 0x2808 <__vector_24+0x94>
    2806:	c4 c0       	rjmp	.+392    	; 0x2990 <__vector_24+0x21c>
    2808:	a8 f4       	brcc	.+42     	; 0x2834 <__vector_24+0xc0>
    280a:	88 37       	cpi	r24, 0x78	; 120
    280c:	09 f4       	brne	.+2      	; 0x2810 <__vector_24+0x9c>
    280e:	67 c0       	rjmp	.+206    	; 0x28de <__vector_24+0x16a>
    2810:	38 f4       	brcc	.+14     	; 0x2820 <__vector_24+0xac>
    2812:	88 36       	cpi	r24, 0x68	; 104
    2814:	09 f4       	brne	.+2      	; 0x2818 <__vector_24+0xa4>
    2816:	63 c0       	rjmp	.+198    	; 0x28de <__vector_24+0x16a>
    2818:	80 37       	cpi	r24, 0x70	; 112
    281a:	09 f4       	brne	.+2      	; 0x281e <__vector_24+0xaa>
    281c:	60 c0       	rjmp	.+192    	; 0x28de <__vector_24+0x16a>
    281e:	c6 c0       	rjmp	.+396    	; 0x29ac <__vector_24+0x238>
    2820:	88 38       	cpi	r24, 0x88	; 136
    2822:	09 f4       	brne	.+2      	; 0x2826 <__vector_24+0xb2>
    2824:	b5 c0       	rjmp	.+362    	; 0x2990 <__vector_24+0x21c>
    2826:	80 39       	cpi	r24, 0x90	; 144
    2828:	09 f4       	brne	.+2      	; 0x282c <__vector_24+0xb8>
    282a:	5f c0       	rjmp	.+190    	; 0x28ea <__vector_24+0x176>
    282c:	80 38       	cpi	r24, 0x80	; 128
    282e:	09 f0       	breq	.+2      	; 0x2832 <__vector_24+0xbe>
    2830:	bd c0       	rjmp	.+378    	; 0x29ac <__vector_24+0x238>
    2832:	5b c0       	rjmp	.+182    	; 0x28ea <__vector_24+0x176>
    2834:	80 3b       	cpi	r24, 0xB0	; 176
    2836:	09 f4       	brne	.+2      	; 0x283a <__vector_24+0xc6>
    2838:	83 c0       	rjmp	.+262    	; 0x2940 <__vector_24+0x1cc>
    283a:	38 f4       	brcc	.+14     	; 0x284a <__vector_24+0xd6>
    283c:	80 3a       	cpi	r24, 0xA0	; 160
    283e:	09 f4       	brne	.+2      	; 0x2842 <__vector_24+0xce>
    2840:	66 c0       	rjmp	.+204    	; 0x290e <__vector_24+0x19a>
    2842:	88 3a       	cpi	r24, 0xA8	; 168
    2844:	09 f4       	brne	.+2      	; 0x2848 <__vector_24+0xd4>
    2846:	7c c0       	rjmp	.+248    	; 0x2940 <__vector_24+0x1cc>
    2848:	b1 c0       	rjmp	.+354    	; 0x29ac <__vector_24+0x238>
    284a:	80 3c       	cpi	r24, 0xC0	; 192
    284c:	09 f4       	brne	.+2      	; 0x2850 <__vector_24+0xdc>
    284e:	a4 c0       	rjmp	.+328    	; 0x2998 <__vector_24+0x224>
    2850:	88 3c       	cpi	r24, 0xC8	; 200
    2852:	09 f4       	brne	.+2      	; 0x2856 <__vector_24+0xe2>
    2854:	a1 c0       	rjmp	.+322    	; 0x2998 <__vector_24+0x224>
    2856:	88 3b       	cpi	r24, 0xB8	; 184
    2858:	09 f4       	brne	.+2      	; 0x285c <__vector_24+0xe8>
    285a:	87 c0       	rjmp	.+270    	; 0x296a <__vector_24+0x1f6>
    285c:	a7 c0       	rjmp	.+334    	; 0x29ac <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    285e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <twi_slarw>
    2862:	10 c0       	rjmp	.+32     	; 0x2884 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2864:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2868:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_masterBufferLength>
    286c:	98 17       	cp	r25, r24
    286e:	70 f5       	brcc	.+92     	; 0x28cc <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2870:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	8e 0f       	add	r24, r30
    2878:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_masterBufferIndex>
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	ed 5b       	subi	r30, 0xBD	; 189
    2880:	fc 4f       	sbci	r31, 0xFC	; 252
    2882:	80 81       	ld	r24, Z
    2884:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2888:	85 ec       	ldi	r24, 0xC5	; 197
    288a:	83 c0       	rjmp	.+262    	; 0x2992 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    288c:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <twi_error>
    2890:	8b c0       	rjmp	.+278    	; 0x29a8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2892:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_masterBufferIndex>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	8e 0f       	add	r24, r30
    289a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_masterBufferIndex>
    289e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ed 5b       	subi	r30, 0xBD	; 189
    28a6:	fc 4f       	sbci	r31, 0xFC	; 252
    28a8:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    28aa:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <twi_masterBufferIndex>
    28ae:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_masterBufferLength>
    28b2:	6b c0       	rjmp	.+214    	; 0x298a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    28b4:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_masterBufferIndex>
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	8e 0f       	add	r24, r30
    28bc:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_masterBufferIndex>
    28c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	ed 5b       	subi	r30, 0xBD	; 189
    28c8:	fc 4f       	sbci	r31, 0xFC	; 252
    28ca:	80 83       	st	Z, r24
	if (twi_sendStop)
    28cc:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <twi_sendStop>
    28d0:	81 11       	cpse	r24, r1
    28d2:	6a c0       	rjmp	.+212    	; 0x29a8 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    28da:	84 ea       	ldi	r24, 0xA4	; 164
    28dc:	5e c0       	rjmp	.+188    	; 0x299a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    28e4:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_rxBufferIndex>
    28e8:	cf cf       	rjmp	.-98     	; 0x2888 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    28ea:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    28ee:	80 32       	cpi	r24, 0x20	; 32
    28f0:	08 f0       	brcs	.+2      	; 0x28f4 <__vector_24+0x180>
    28f2:	4e c0       	rjmp	.+156    	; 0x2990 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    28f4:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	8e 0f       	add	r24, r30
    28fc:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <twi_rxBufferIndex>
    2900:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	e1 50       	subi	r30, 0x01	; 1
    2908:	fd 4f       	sbci	r31, 0xFD	; 253
    290a:	80 83       	st	Z, r24
    290c:	bd cf       	rjmp	.-134    	; 0x2888 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    290e:	0e 94 b4 13 	call	0x2768	; 0x2768 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2912:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    2916:	80 32       	cpi	r24, 0x20	; 32
    2918:	30 f4       	brcc	.+12     	; 0x2926 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    291a:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	e1 50       	subi	r30, 0x01	; 1
    2922:	fd 4f       	sbci	r31, 0xFD	; 253
    2924:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2926:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <twi_rxBufferIndex>
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <twi_onSlaveReceive>
    2930:	f0 91 64 03 	lds	r31, 0x0364	; 0x800364 <twi_onSlaveReceive+0x1>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	92 e0       	ldi	r25, 0x02	; 2
    2938:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    293a:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <twi_rxBufferIndex>
      break;
    293e:	36 c0       	rjmp	.+108    	; 0x29ac <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2940:	84 e0       	ldi	r24, 0x04	; 4
    2942:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2946:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    294a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    294e:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <twi_onSlaveTransmit>
    2952:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <twi_onSlaveTransmit+0x1>
    2956:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2958:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_txBufferLength>
    295c:	81 11       	cpse	r24, r1
    295e:	05 c0       	rjmp	.+10     	; 0x296a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2966:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    296a:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <twi_txBufferIndex>
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	8e 0f       	add	r24, r30
    2972:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <twi_txBufferIndex>
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	ef 5d       	subi	r30, 0xDF	; 223
    297a:	fc 4f       	sbci	r31, 0xFC	; 252
    297c:	80 81       	ld	r24, Z
    297e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2982:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <twi_txBufferIndex>
    2986:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_txBufferLength>
    298a:	98 17       	cp	r25, r24
    298c:	08 f4       	brcc	.+2      	; 0x2990 <__vector_24+0x21c>
    298e:	7c cf       	rjmp	.-264    	; 0x2888 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2990:	85 e8       	ldi	r24, 0x85	; 133
    2992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2996:	0a c0       	rjmp	.+20     	; 0x29ac <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2998:	85 ec       	ldi	r24, 0xC5	; 197
    299a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    299e:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <twi_state>
      break;
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    29a4:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <twi_error>
      twi_stop();
    29a8:	0e 94 aa 13 	call	0x2754	; 0x2754 <twi_stop>
      break;
  }
}
    29ac:	ff 91       	pop	r31
    29ae:	ef 91       	pop	r30
    29b0:	bf 91       	pop	r27
    29b2:	af 91       	pop	r26
    29b4:	9f 91       	pop	r25
    29b6:	8f 91       	pop	r24
    29b8:	7f 91       	pop	r23
    29ba:	6f 91       	pop	r22
    29bc:	5f 91       	pop	r21
    29be:	4f 91       	pop	r20
    29c0:	3f 91       	pop	r19
    29c2:	2f 91       	pop	r18
    29c4:	0f 90       	pop	r0
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	0f 90       	pop	r0
    29ca:	1f 90       	pop	r1
    29cc:	18 95       	reti

000029ce <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    29ce:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    29d8:	82 1b       	sub	r24, r18
    29da:	91 09       	sbc	r25, r1
    29dc:	08 95       	ret

000029de <_ZN7TwoWire4readEv>:
    29de:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    29e2:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    29e6:	98 17       	cp	r25, r24
    29e8:	50 f4       	brcc	.+20     	; 0x29fe <_ZN7TwoWire4readEv+0x20>
    29ea:	e9 2f       	mov	r30, r25
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	ef 55       	subi	r30, 0x5F	; 95
    29f0:	fc 4f       	sbci	r31, 0xFC	; 252
    29f2:	20 81       	ld	r18, Z
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	9f 5f       	subi	r25, 0xFF	; 255
    29f8:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <_ZN7TwoWire4readEv+0x24>
    29fe:	2f ef       	ldi	r18, 0xFF	; 255
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	c9 01       	movw	r24, r18
    2a04:	08 95       	ret

00002a06 <_ZN7TwoWire4peekEv>:
    2a06:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2a0a:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2a0e:	e8 17       	cp	r30, r24
    2a10:	30 f4       	brcc	.+12     	; 0x2a1e <_ZN7TwoWire4peekEv+0x18>
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	ef 55       	subi	r30, 0x5F	; 95
    2a16:	fc 4f       	sbci	r31, 0xFC	; 252
    2a18:	80 81       	ld	r24, Z
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	08 95       	ret
    2a1e:	8f ef       	ldi	r24, 0xFF	; 255
    2a20:	9f ef       	ldi	r25, 0xFF	; 255
    2a22:	08 95       	ret

00002a24 <_ZN7TwoWire5flushEv>:
    2a24:	08 95       	ret

00002a26 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	ec 01       	movw	r28, r24
    2a2c:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <_ZN7TwoWire14user_onReceiveE>
    2a30:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <_ZN7TwoWire14user_onReceiveE+0x1>
    2a34:	30 97       	sbiw	r30, 0x00	; 0
    2a36:	f1 f0       	breq	.+60     	; 0x2a74 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2a38:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2a3c:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2a40:	98 17       	cp	r25, r24
    2a42:	c0 f0       	brcs	.+48     	; 0x2a74 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	29 2f       	mov	r18, r25
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	26 17       	cp	r18, r22
    2a4c:	37 07       	cpc	r19, r23
    2a4e:	54 f4       	brge	.+20     	; 0x2a64 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2a50:	de 01       	movw	r26, r28
    2a52:	a2 0f       	add	r26, r18
    2a54:	b3 1f       	adc	r27, r19
    2a56:	4c 91       	ld	r20, X
    2a58:	d9 01       	movw	r26, r18
    2a5a:	af 55       	subi	r26, 0x5F	; 95
    2a5c:	bc 4f       	sbci	r27, 0xFC	; 252
    2a5e:	4c 93       	st	X, r20
    2a60:	9f 5f       	subi	r25, 0xFF	; 255
    2a62:	f1 cf       	rjmp	.-30     	; 0x2a46 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2a64:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2a68:	60 93 9f 03 	sts	0x039F, r22	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	09 94       	ijmp
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <_ZN7TwoWire16onRequestServiceEv>:
    2a7a:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <_ZN7TwoWire14user_onRequestE>
    2a7e:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <_ZN7TwoWire14user_onRequestE+0x1>
    2a82:	30 97       	sbiw	r30, 0x00	; 0
    2a84:	29 f0       	breq	.+10     	; 0x2a90 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2a86:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2a8a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2a8e:	09 94       	ijmp
    2a90:	08 95       	ret

00002a92 <_ZN7TwoWire5writeEPKhj>:
    2a92:	cf 92       	push	r12
    2a94:	df 92       	push	r13
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	7c 01       	movw	r14, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8a 01       	movw	r16, r20
    2aa8:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire12transmittingE>
    2aac:	22 23       	and	r18, r18
    2aae:	89 f0       	breq	.+34     	; 0x2ad2 <_ZN7TwoWire5writeEPKhj+0x40>
    2ab0:	eb 01       	movw	r28, r22
    2ab2:	6b 01       	movw	r12, r22
    2ab4:	c4 0e       	add	r12, r20
    2ab6:	d5 1e       	adc	r13, r21
    2ab8:	cc 15       	cp	r28, r12
    2aba:	dd 05       	cpc	r29, r13
    2abc:	69 f0       	breq	.+26     	; 0x2ad8 <_ZN7TwoWire5writeEPKhj+0x46>
    2abe:	69 91       	ld	r22, Y+
    2ac0:	d7 01       	movw	r26, r14
    2ac2:	ed 91       	ld	r30, X+
    2ac4:	fc 91       	ld	r31, X
    2ac6:	01 90       	ld	r0, Z+
    2ac8:	f0 81       	ld	r31, Z
    2aca:	e0 2d       	mov	r30, r0
    2acc:	c7 01       	movw	r24, r14
    2ace:	09 95       	icall
    2ad0:	f3 cf       	rjmp	.-26     	; 0x2ab8 <_ZN7TwoWire5writeEPKhj+0x26>
    2ad2:	64 2f       	mov	r22, r20
    2ad4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <twi_transmit>
    2ad8:	c8 01       	movw	r24, r16
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	08 95       	ret

00002aec <_ZN7TwoWire5writeEh>:
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	1f 92       	push	r1
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	69 83       	std	Y+1, r22	; 0x01
    2af8:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <_ZN7TwoWire12transmittingE>
    2afc:	22 23       	and	r18, r18
    2afe:	d1 f0       	breq	.+52     	; 0x2b34 <_ZN7TwoWire5writeEh+0x48>
    2b00:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2b04:	20 32       	cpi	r18, 0x20	; 32
    2b06:	40 f0       	brcs	.+16     	; 0x2b18 <_ZN7TwoWire5writeEh+0x2c>
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	33 83       	std	Z+3, r19	; 0x03
    2b10:	22 83       	std	Z+2, r18	; 0x02
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	15 c0       	rjmp	.+42     	; 0x2b42 <_ZN7TwoWire5writeEh+0x56>
    2b18:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2b1c:	e8 2f       	mov	r30, r24
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	e2 58       	subi	r30, 0x82	; 130
    2b22:	fc 4f       	sbci	r31, 0xFC	; 252
    2b24:	99 81       	ldd	r25, Y+1	; 0x01
    2b26:	90 83       	st	Z, r25
    2b28:	8f 5f       	subi	r24, 0xFF	; 255
    2b2a:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2b2e:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2b32:	05 c0       	rjmp	.+10     	; 0x2b3e <_ZN7TwoWire5writeEh+0x52>
    2b34:	61 e0       	ldi	r22, 0x01	; 1
    2b36:	ce 01       	movw	r24, r28
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <twi_transmit>
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0f 90       	pop	r0
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	08 95       	ret

00002b4a <_ZN7TwoWireC1Ev>:
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	13 82       	std	Z+3, r1	; 0x03
    2b4e:	12 82       	std	Z+2, r1	; 0x02
    2b50:	88 ee       	ldi	r24, 0xE8	; 232
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	84 83       	std	Z+4, r24	; 0x04
    2b5a:	95 83       	std	Z+5, r25	; 0x05
    2b5c:	a6 83       	std	Z+6, r26	; 0x06
    2b5e:	b7 83       	std	Z+7, r27	; 0x07
    2b60:	86 e8       	ldi	r24, 0x86	; 134
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	08 95       	ret

00002b6a <_ZN7TwoWire5beginEv>:
    2b6a:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2b6e:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2b72:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2b76:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2b7a:	0e 94 bc 12 	call	0x2578	; 0x2578 <twi_init>
    2b7e:	8d e3       	ldi	r24, 0x3D	; 61
    2b80:	95 e1       	ldi	r25, 0x15	; 21
    2b82:	0e 94 a5 13 	call	0x274a	; 0x274a <twi_attachSlaveTxEvent>
    2b86:	83 e1       	ldi	r24, 0x13	; 19
    2b88:	95 e1       	ldi	r25, 0x15	; 21
    2b8a:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <twi_attachSlaveRxEvent>

00002b8e <_ZN7TwoWire17beginTransmissionEh>:
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <_ZN7TwoWire12transmittingE>
    2b94:	60 93 9e 03 	sts	0x039E, r22	; 0x80039e <_ZN7TwoWire9txAddressE>
    2b98:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2b9c:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2ba0:	08 95       	ret

00002ba2 <_ZN7TwoWire17beginTransmissionEi>:
    2ba2:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <_ZN7TwoWire17beginTransmissionEh>

00002ba6 <_ZN7TwoWire15endTransmissionEh>:
    2ba6:	0f 93       	push	r16
    2ba8:	06 2f       	mov	r16, r22
    2baa:	21 e0       	ldi	r18, 0x01	; 1
    2bac:	40 91 7c 03 	lds	r20, 0x037C	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2bb0:	6e e7       	ldi	r22, 0x7E	; 126
    2bb2:	73 e0       	ldi	r23, 0x03	; 3
    2bb4:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_ZN7TwoWire9txAddressE>
    2bb8:	0e 94 22 13 	call	0x2644	; 0x2644 <twi_writeTo>
    2bbc:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <_ZN7TwoWire13txBufferIndexE>
    2bc0:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_ZN7TwoWire14txBufferLengthE>
    2bc4:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <_ZN7TwoWire12transmittingE>
    2bc8:	0f 91       	pop	r16
    2bca:	08 95       	ret

00002bcc <_ZN7TwoWire11requestFromEhhmhh>:
    2bcc:	4f 92       	push	r4
    2bce:	5f 92       	push	r5
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	af 92       	push	r10
    2bd6:	bf 92       	push	r11
    2bd8:	cf 92       	push	r12
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	5c 01       	movw	r10, r24
    2be8:	f6 2e       	mov	r15, r22
    2bea:	d4 2f       	mov	r29, r20
    2bec:	28 01       	movw	r4, r16
    2bee:	39 01       	movw	r6, r18
    2bf0:	ee 20       	and	r14, r14
    2bf2:	21 f1       	breq	.+72     	; 0x2c3c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2bf4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_ZN7TwoWire17beginTransmissionEh>
    2bf8:	ce 2d       	mov	r28, r14
    2bfa:	c4 30       	cpi	r28, 0x04	; 4
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2bfe:	c3 e0       	ldi	r28, 0x03	; 3
    2c00:	c1 50       	subi	r28, 0x01	; 1
    2c02:	c0 f0       	brcs	.+48     	; 0x2c34 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2c04:	28 e0       	ldi	r18, 0x08	; 8
    2c06:	c2 9f       	mul	r28, r18
    2c08:	c0 01       	movw	r24, r0
    2c0a:	11 24       	eor	r1, r1
    2c0c:	a3 01       	movw	r20, r6
    2c0e:	92 01       	movw	r18, r4
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2c12:	56 95       	lsr	r21
    2c14:	47 95       	ror	r20
    2c16:	37 95       	ror	r19
    2c18:	27 95       	ror	r18
    2c1a:	8a 95       	dec	r24
    2c1c:	d2 f7       	brpl	.-12     	; 0x2c12 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2c1e:	ca 01       	movw	r24, r20
    2c20:	b9 01       	movw	r22, r18
    2c22:	d5 01       	movw	r26, r10
    2c24:	ed 91       	ld	r30, X+
    2c26:	fc 91       	ld	r31, X
    2c28:	01 90       	ld	r0, Z+
    2c2a:	f0 81       	ld	r31, Z
    2c2c:	e0 2d       	mov	r30, r0
    2c2e:	c5 01       	movw	r24, r10
    2c30:	09 95       	icall
    2c32:	e6 cf       	rjmp	.-52     	; 0x2c00 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	c5 01       	movw	r24, r10
    2c38:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <_ZN7TwoWire15endTransmissionEh>
    2c3c:	4d 2f       	mov	r20, r29
    2c3e:	d1 32       	cpi	r29, 0x21	; 33
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	2c 2d       	mov	r18, r12
    2c46:	61 ea       	ldi	r22, 0xA1	; 161
    2c48:	73 e0       	ldi	r23, 0x03	; 3
    2c4a:	8f 2d       	mov	r24, r15
    2c4c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <twi_readFrom>
    2c50:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ZN7TwoWire13rxBufferIndexE>
    2c54:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_ZN7TwoWire14rxBufferLengthE>
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	cf 90       	pop	r12
    2c66:	bf 90       	pop	r11
    2c68:	af 90       	pop	r10
    2c6a:	7f 90       	pop	r7
    2c6c:	6f 90       	pop	r6
    2c6e:	5f 90       	pop	r5
    2c70:	4f 90       	pop	r4
    2c72:	08 95       	ret

00002c74 <_ZN7TwoWire11requestFromEhhh>:
    2c74:	cf 92       	push	r12
    2c76:	ef 92       	push	r14
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	c2 2e       	mov	r12, r18
    2c7e:	e1 2c       	mov	r14, r1
    2c80:	00 e0       	ldi	r16, 0x00	; 0
    2c82:	10 e0       	ldi	r17, 0x00	; 0
    2c84:	98 01       	movw	r18, r16
    2c86:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_ZN7TwoWire11requestFromEhhmhh>
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	ef 90       	pop	r14
    2c90:	cf 90       	pop	r12
    2c92:	08 95       	ret

00002c94 <_ZN7TwoWire11requestFromEii>:
    2c94:	21 e0       	ldi	r18, 0x01	; 1
    2c96:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <_ZN7TwoWire11requestFromEhhh>

00002c9a <_ZN7TwoWire15endTransmissionEv>:
    2c9a:	61 e0       	ldi	r22, 0x01	; 1
    2c9c:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <_ZN7TwoWire15endTransmissionEh>

00002ca0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2ca0:	8b e6       	ldi	r24, 0x6B	; 107
    2ca2:	93 e0       	ldi	r25, 0x03	; 3
    2ca4:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <_ZN7TwoWireC1Ev>

00002ca8 <_ZN13ExtendedTests18endExtendedGsmTestEv>:
void ExtendedTests::endExtendedGsmTest() {
	
#if IS_EXTENDED_GSM_TEST == true

	//Clear dynamic memory
	free(_mockData);
    2ca8:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2cac:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2cb0:	0e 94 4c 20 	call	0x4098	; 0x4098 <free>
	
	//Do verification of data test (somehow?)
	
	
	RM_LOGLN(F("~~~~~~~~~~~~~~~ Extended GSM Test Complete~~~~~~~~~~~~~~~~"));
    2cb4:	6c e1       	ldi	r22, 0x1C	; 28
    2cb6:	76 e0       	ldi	r23, 0x06	; 6
    2cb8:	83 ec       	ldi	r24, 0xC3	; 195
    2cba:	93 e0       	ldi	r25, 0x03	; 3
    2cbc:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>

00002cc0 <_ZN13ExtendedTests20startExtendedGsmTestEP13Adafruit_FONAP12RmMemManager>:
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}

void ExtendedTests::startExtendedGsmTest(Adafruit_FONA* fona, RmMemManager* mem) {
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	eb 01       	movw	r28, r22
    //uint16_t statuscode;
    //int16_t length;
    //char url[29] = "http://cars.khuddam.org.uk/r";
	//url[28]=0; //end

    Serial.println(F("****"));
    2cc6:	67 e1       	ldi	r22, 0x17	; 23
    2cc8:	76 e0       	ldi	r23, 0x06	; 6
    2cca:	83 ec       	ldi	r24, 0xC3	; 195
    2ccc:	93 e0       	ldi	r25, 0x03	; 3
    2cce:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
	
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
    2cd2:	84 e1       	ldi	r24, 0x14	; 20
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <malloc>
    2cda:	fc 01       	movw	r30, r24
    2cdc:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <_mockData+0x1>
    2ce0:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_mockData>


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	92 83       	std	Z+2, r25	; 0x02
    2cea:	81 83       	std	Z+1, r24	; 0x01
	iSd->current = (i+1)*10;
    2cec:	8a e0       	ldi	r24, 0x0A	; 10
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	96 83       	std	Z+6, r25	; 0x06
    2cf2:	85 83       	std	Z+5, r24	; 0x05
	iSd->pVVoltage = (i+1)*100;
    2cf4:	84 e6       	ldi	r24, 0x64	; 100
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	94 83       	std	Z+4, r25	; 0x04
    2cfa:	83 83       	std	Z+3, r24	; 0x03
	iSd->temperature = (i+1)+50;
    2cfc:	83 e3       	ldi	r24, 0x33	; 51
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	90 87       	std	Z+8, r25	; 0x08
    2d02:	87 83       	std	Z+7, r24	; 0x07
	iSd->errorChar = i%5==0?3:0;
    2d04:	83 e0       	ldi	r24, 0x03	; 3
    2d06:	81 87       	std	Z+9, r24	; 0x09


//RMonV3 types/flags test

void writeMockSD(SensorData* iSd, uint8_t i){
	iSd->battVoltage = (i+1);
    2d08:	82 e0       	ldi	r24, 0x02	; 2
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	94 87       	std	Z+12, r25	; 0x0c
    2d0e:	83 87       	std	Z+11, r24	; 0x0b
	iSd->current = (i+1)*10;
    2d10:	84 e1       	ldi	r24, 0x14	; 20
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	90 8b       	std	Z+16, r25	; 0x10
    2d16:	87 87       	std	Z+15, r24	; 0x0f
	iSd->pVVoltage = (i+1)*100;
    2d18:	88 ec       	ldi	r24, 0xC8	; 200
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	96 87       	std	Z+14, r25	; 0x0e
    2d1e:	85 87       	std	Z+13, r24	; 0x0d
	iSd->temperature = (i+1)+50;
    2d20:	84 e3       	ldi	r24, 0x34	; 52
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	92 8b       	std	Z+18, r25	; 0x12
    2d26:	81 8b       	std	Z+17, r24	; 0x11
	iSd->errorChar = i%5==0?3:0;
    2d28:	13 8a       	std	Z+19, r1	; 0x13
	//Malloc as the data will be sent later on when gsm connection made
	_mockData = (SensorData*)malloc(sizeof(SensorData)*2);
	writeMockSD(_mockData, 0);
	writeMockSD(_mockData+1, 1);
	
	Serial.println(F("2 Sensor-Datas going for transmission:"));
    2d2a:	60 ef       	ldi	r22, 0xF0	; 240
    2d2c:	75 e0       	ldi	r23, 0x05	; 5
    2d2e:	83 ec       	ldi	r24, 0xC3	; 195
    2d30:	93 e0       	ldi	r25, 0x03	; 3
    2d32:	0e 94 fd 18 	call	0x31fa	; 0x31fa <_ZN5Print7printlnEPK19__FlashStringHelper>
	Helpers::printSensorData(_mockData);
    2d36:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2d3a:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2d3e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN7Helpers15printSensorDataEP10SensorData>
	Helpers::printSensorData(_mockData+1);
    2d42:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2d46:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2d4a:	0a 96       	adiw	r24, 0x0a	; 10
    2d4c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN7Helpers15printSensorDataEP10SensorData>
	
	mem->mockSensorData = _mockData;
    2d50:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_mockData>
    2d54:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_mockData+0x1>
    2d58:	99 83       	std	Y+1, r25	; 0x01
    2d5a:	88 83       	st	Y, r24
	mem->numMockSensorData = 2;
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	8a 83       	std	Y+2, r24	; 0x02
	
#else
	RM_LOGLN(F("*** FAIL EGT ***")); //Sync Broken - inclusion of code should be sync'd with flag
#endif
}
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	08 95       	ret

00002d66 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2d66:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2d68:	91 8d       	ldd	r25, Z+25	; 0x19
    2d6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d6c:	89 2f       	mov	r24, r25
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	80 5c       	subi	r24, 0xC0	; 192
    2d72:	9f 4f       	sbci	r25, 0xFF	; 255
    2d74:	82 1b       	sub	r24, r18
    2d76:	91 09       	sbc	r25, r1
}
    2d78:	8f 73       	andi	r24, 0x3F	; 63
    2d7a:	99 27       	eor	r25, r25
    2d7c:	08 95       	ret

00002d7e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2d7e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2d80:	91 8d       	ldd	r25, Z+25	; 0x19
    2d82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d84:	98 17       	cp	r25, r24
    2d86:	31 f0       	breq	.+12     	; 0x2d94 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2d88:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d8a:	e8 0f       	add	r30, r24
    2d8c:	f1 1d       	adc	r31, r1
    2d8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2d98:	08 95       	ret

00002d9a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2d9a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2d9c:	91 8d       	ldd	r25, Z+25	; 0x19
    2d9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2da0:	98 17       	cp	r25, r24
    2da2:	61 f0       	breq	.+24     	; 0x2dbc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2da4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2da6:	df 01       	movw	r26, r30
    2da8:	a8 0f       	add	r26, r24
    2daa:	b1 1d       	adc	r27, r1
    2dac:	5d 96       	adiw	r26, 0x1d	; 29
    2dae:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2db0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2db2:	9f 5f       	subi	r25, 0xFF	; 255
    2db4:	9f 73       	andi	r25, 0x3F	; 63
    2db6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2dbc:	8f ef       	ldi	r24, 0xFF	; 255
    2dbe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2dc0:	08 95       	ret

00002dc2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2dc2:	86 e3       	ldi	r24, 0x36	; 54
    2dc4:	98 e1       	ldi	r25, 0x18	; 24
    2dc6:	89 2b       	or	r24, r25
    2dc8:	49 f0       	breq	.+18     	; 0x2ddc <_Z14serialEventRunv+0x1a>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	89 2b       	or	r24, r25
    2dd0:	29 f0       	breq	.+10     	; 0x2ddc <_Z14serialEventRunv+0x1a>
    2dd2:	0e 94 36 18 	call	0x306c	; 0x306c <_Z17Serial0_availablev>
    2dd6:	81 11       	cpse	r24, r1
    2dd8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2ddc:	08 95       	ret

00002dde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2dde:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2de0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2de2:	df 01       	movw	r26, r30
    2de4:	a8 0f       	add	r26, r24
    2de6:	b1 1d       	adc	r27, r1
    2de8:	a3 5a       	subi	r26, 0xA3	; 163
    2dea:	bf 4f       	sbci	r27, 0xFF	; 255
    2dec:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2dee:	84 8d       	ldd	r24, Z+28	; 0x1c
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	8f 73       	andi	r24, 0x3F	; 63
    2df6:	99 27       	eor	r25, r25
    2df8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2dfa:	a6 89       	ldd	r26, Z+22	; 0x16
    2dfc:	b7 89       	ldd	r27, Z+23	; 0x17
    2dfe:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2e00:	a0 89       	ldd	r26, Z+16	; 0x10
    2e02:	b1 89       	ldd	r27, Z+17	; 0x11
    2e04:	8c 91       	ld	r24, X
    2e06:	80 64       	ori	r24, 0x40	; 64
    2e08:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2e0a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e0e:	98 13       	cpse	r25, r24
    2e10:	06 c0       	rjmp	.+12     	; 0x2e1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2e12:	02 88       	ldd	r0, Z+18	; 0x12
    2e14:	f3 89       	ldd	r31, Z+19	; 0x13
    2e16:	e0 2d       	mov	r30, r0
    2e18:	80 81       	ld	r24, Z
    2e1a:	8f 7d       	andi	r24, 0xDF	; 223
    2e1c:	80 83       	st	Z, r24
    2e1e:	08 95       	ret

00002e20 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	ec 01       	movw	r28, r24
  _written = true;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2e32:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e36:	98 13       	cpse	r25, r24
    2e38:	05 c0       	rjmp	.+10     	; 0x2e44 <_ZN14HardwareSerial5writeEh+0x24>
    2e3a:	e8 89       	ldd	r30, Y+16	; 0x10
    2e3c:	f9 89       	ldd	r31, Y+17	; 0x11
    2e3e:	80 81       	ld	r24, Z
    2e40:	85 fd       	sbrc	r24, 5
    2e42:	24 c0       	rjmp	.+72     	; 0x2e8c <_ZN14HardwareSerial5writeEh+0x6c>
    2e44:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2e46:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2e48:	10 e0       	ldi	r17, 0x00	; 0
    2e4a:	0f 5f       	subi	r16, 0xFF	; 255
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	0f 73       	andi	r16, 0x3F	; 63
    2e50:	11 27       	eor	r17, r17
    2e52:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2e54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e56:	e8 12       	cpse	r14, r24
    2e58:	0c c0       	rjmp	.+24     	; 0x2e72 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	07 fc       	sbrc	r0, 7
    2e5e:	fa cf       	rjmp	.-12     	; 0x2e54 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2e60:	e8 89       	ldd	r30, Y+16	; 0x10
    2e62:	f9 89       	ldd	r31, Y+17	; 0x11
    2e64:	80 81       	ld	r24, Z
    2e66:	85 ff       	sbrs	r24, 5
    2e68:	f5 cf       	rjmp	.-22     	; 0x2e54 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e70:	f1 cf       	rjmp	.-30     	; 0x2e54 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2e72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e74:	fe 01       	movw	r30, r28
    2e76:	e8 0f       	add	r30, r24
    2e78:	f1 1d       	adc	r31, r1
    2e7a:	e3 5a       	subi	r30, 0xA3	; 163
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2e80:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2e82:	ea 89       	ldd	r30, Y+18	; 0x12
    2e84:	fb 89       	ldd	r31, Y+19	; 0x13
    2e86:	80 81       	ld	r24, Z
    2e88:	80 62       	ori	r24, 0x20	; 32
    2e8a:	07 c0       	rjmp	.+14     	; 0x2e9a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2e8c:	ee 89       	ldd	r30, Y+22	; 0x16
    2e8e:	ff 89       	ldd	r31, Y+23	; 0x17
    2e90:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2e92:	e8 89       	ldd	r30, Y+16	; 0x10
    2e94:	f9 89       	ldd	r31, Y+17	; 0x11
    2e96:	80 81       	ld	r24, Z
    2e98:	80 64       	ori	r24, 0x40	; 64
    2e9a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	1f 91       	pop	r17
    2ea6:	0f 91       	pop	r16
    2ea8:	ff 90       	pop	r15
    2eaa:	ef 90       	pop	r14
    2eac:	08 95       	ret

00002eae <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2eae:	cf 93       	push	r28
    2eb0:	df 93       	push	r29
    2eb2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2eb4:	88 8d       	ldd	r24, Y+24	; 0x18
    2eb6:	88 23       	and	r24, r24
    2eb8:	c9 f0       	breq	.+50     	; 0x2eec <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2eba:	ea 89       	ldd	r30, Y+18	; 0x12
    2ebc:	fb 89       	ldd	r31, Y+19	; 0x13
    2ebe:	80 81       	ld	r24, Z
    2ec0:	85 fd       	sbrc	r24, 5
    2ec2:	05 c0       	rjmp	.+10     	; 0x2ece <_ZN14HardwareSerial5flushEv+0x20>
    2ec4:	a8 89       	ldd	r26, Y+16	; 0x10
    2ec6:	b9 89       	ldd	r27, Y+17	; 0x11
    2ec8:	8c 91       	ld	r24, X
    2eca:	86 fd       	sbrc	r24, 6
    2ecc:	0f c0       	rjmp	.+30     	; 0x2eec <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	07 fc       	sbrc	r0, 7
    2ed2:	f5 cf       	rjmp	.-22     	; 0x2ebe <_ZN14HardwareSerial5flushEv+0x10>
    2ed4:	80 81       	ld	r24, Z
    2ed6:	85 ff       	sbrs	r24, 5
    2ed8:	f2 cf       	rjmp	.-28     	; 0x2ebe <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2eda:	a8 89       	ldd	r26, Y+16	; 0x10
    2edc:	b9 89       	ldd	r27, Y+17	; 0x11
    2ede:	8c 91       	ld	r24, X
    2ee0:	85 ff       	sbrs	r24, 5
    2ee2:	ed cf       	rjmp	.-38     	; 0x2ebe <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2eea:	e7 cf       	rjmp	.-50     	; 0x2eba <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	08 95       	ret

00002ef2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2ef2:	cf 92       	push	r12
    2ef4:	df 92       	push	r13
    2ef6:	ef 92       	push	r14
    2ef8:	ff 92       	push	r15
    2efa:	1f 93       	push	r17
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	ec 01       	movw	r28, r24
    2f02:	6a 01       	movw	r12, r20
    2f04:	7b 01       	movw	r14, r22
    2f06:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2f08:	e8 89       	ldd	r30, Y+16	; 0x10
    2f0a:	f9 89       	ldd	r31, Y+17	; 0x11
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2f10:	41 15       	cp	r20, r1
    2f12:	51 4e       	sbci	r21, 0xE1	; 225
    2f14:	61 05       	cpc	r22, r1
    2f16:	71 05       	cpc	r23, r1
    2f18:	b1 f0       	breq	.+44     	; 0x2f46 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	79 e0       	ldi	r23, 0x09	; 9
    2f1e:	8d e3       	ldi	r24, 0x3D	; 61
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a7 01       	movw	r20, r14
    2f24:	96 01       	movw	r18, r12
    2f26:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__udivmodsi4>
    2f2a:	da 01       	movw	r26, r20
    2f2c:	c9 01       	movw	r24, r18
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	a1 09       	sbc	r26, r1
    2f32:	b1 09       	sbc	r27, r1
    2f34:	b6 95       	lsr	r27
    2f36:	a7 95       	ror	r26
    2f38:	97 95       	ror	r25
    2f3a:	87 95       	ror	r24
    2f3c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2f3e:	21 15       	cp	r18, r1
    2f40:	80 e1       	ldi	r24, 0x10	; 16
    2f42:	38 07       	cpc	r19, r24
    2f44:	a8 f0       	brcs	.+42     	; 0x2f70 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2f46:	e8 89       	ldd	r30, Y+16	; 0x10
    2f48:	f9 89       	ldd	r31, Y+17	; 0x11
    2f4a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2f4c:	60 e8       	ldi	r22, 0x80	; 128
    2f4e:	74 e8       	ldi	r23, 0x84	; 132
    2f50:	8e e1       	ldi	r24, 0x1E	; 30
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	a7 01       	movw	r20, r14
    2f56:	96 01       	movw	r18, r12
    2f58:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__udivmodsi4>
    2f5c:	da 01       	movw	r26, r20
    2f5e:	c9 01       	movw	r24, r18
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	a1 09       	sbc	r26, r1
    2f64:	b1 09       	sbc	r27, r1
    2f66:	b6 95       	lsr	r27
    2f68:	a7 95       	ror	r26
    2f6a:	97 95       	ror	r25
    2f6c:	87 95       	ror	r24
    2f6e:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2f70:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f72:	fd 85       	ldd	r31, Y+13	; 0x0d
    2f74:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2f76:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f78:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f7a:	20 83       	st	Z, r18

  _written = false;
    2f7c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2f7e:	ec 89       	ldd	r30, Y+20	; 0x14
    2f80:	fd 89       	ldd	r31, Y+21	; 0x15
    2f82:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2f84:	ea 89       	ldd	r30, Y+18	; 0x12
    2f86:	fb 89       	ldd	r31, Y+19	; 0x13
    2f88:	80 81       	ld	r24, Z
    2f8a:	80 61       	ori	r24, 0x10	; 16
    2f8c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2f8e:	ea 89       	ldd	r30, Y+18	; 0x12
    2f90:	fb 89       	ldd	r31, Y+19	; 0x13
    2f92:	80 81       	ld	r24, Z
    2f94:	88 60       	ori	r24, 0x08	; 8
    2f96:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2f98:	ea 89       	ldd	r30, Y+18	; 0x12
    2f9a:	fb 89       	ldd	r31, Y+19	; 0x13
    2f9c:	80 81       	ld	r24, Z
    2f9e:	80 68       	ori	r24, 0x80	; 128
    2fa0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2fa2:	ea 89       	ldd	r30, Y+18	; 0x12
    2fa4:	fb 89       	ldd	r31, Y+19	; 0x13
    2fa6:	80 81       	ld	r24, Z
    2fa8:	8f 7d       	andi	r24, 0xDF	; 223
    2faa:	80 83       	st	Z, r24
}
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	1f 91       	pop	r17
    2fb2:	ff 90       	pop	r15
    2fb4:	ef 90       	pop	r14
    2fb6:	df 90       	pop	r13
    2fb8:	cf 90       	pop	r12
    2fba:	08 95       	ret

00002fbc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2fbc:	1f 92       	push	r1
    2fbe:	0f 92       	push	r0
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	0f 92       	push	r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	2f 93       	push	r18
    2fc8:	8f 93       	push	r24
    2fca:	9f 93       	push	r25
    2fcc:	ef 93       	push	r30
    2fce:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2fd0:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <Serial+0x10>
    2fd4:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <Serial+0x11>
    2fd8:	80 81       	ld	r24, Z
    2fda:	e0 91 d9 03 	lds	r30, 0x03D9	; 0x8003d9 <Serial+0x16>
    2fde:	f0 91 da 03 	lds	r31, 0x03DA	; 0x8003da <Serial+0x17>
    2fe2:	82 fd       	sbrc	r24, 2
    2fe4:	12 c0       	rjmp	.+36     	; 0x300a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2fe6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2fe8:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <Serial+0x19>
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2ff0:	20 91 dd 03 	lds	r18, 0x03DD	; 0x8003dd <Serial+0x1a>
    2ff4:	82 17       	cp	r24, r18
    2ff6:	51 f0       	breq	.+20     	; 0x300c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2ff8:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <Serial+0x19>
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	ed 53       	subi	r30, 0x3D	; 61
    3000:	fc 4f       	sbci	r31, 0xFC	; 252
    3002:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3004:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <Serial+0x19>
    3008:	01 c0       	rjmp	.+2      	; 0x300c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    300a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    300c:	ff 91       	pop	r31
    300e:	ef 91       	pop	r30
    3010:	9f 91       	pop	r25
    3012:	8f 91       	pop	r24
    3014:	2f 91       	pop	r18
    3016:	0f 90       	pop	r0
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	0f 90       	pop	r0
    301c:	1f 90       	pop	r1
    301e:	18 95       	reti

00003020 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3020:	1f 92       	push	r1
    3022:	0f 92       	push	r0
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	0f 92       	push	r0
    3028:	11 24       	eor	r1, r1
    302a:	2f 93       	push	r18
    302c:	3f 93       	push	r19
    302e:	4f 93       	push	r20
    3030:	5f 93       	push	r21
    3032:	6f 93       	push	r22
    3034:	7f 93       	push	r23
    3036:	8f 93       	push	r24
    3038:	9f 93       	push	r25
    303a:	af 93       	push	r26
    303c:	bf 93       	push	r27
    303e:	ef 93       	push	r30
    3040:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3042:	83 ec       	ldi	r24, 0xC3	; 195
    3044:	93 e0       	ldi	r25, 0x03	; 3
    3046:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    304a:	ff 91       	pop	r31
    304c:	ef 91       	pop	r30
    304e:	bf 91       	pop	r27
    3050:	af 91       	pop	r26
    3052:	9f 91       	pop	r25
    3054:	8f 91       	pop	r24
    3056:	7f 91       	pop	r23
    3058:	6f 91       	pop	r22
    305a:	5f 91       	pop	r21
    305c:	4f 91       	pop	r20
    305e:	3f 91       	pop	r19
    3060:	2f 91       	pop	r18
    3062:	0f 90       	pop	r0
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	0f 90       	pop	r0
    3068:	1f 90       	pop	r1
    306a:	18 95       	reti

0000306c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    306c:	83 ec       	ldi	r24, 0xC3	; 195
    306e:	93 e0       	ldi	r25, 0x03	; 3
    3070:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <_ZN14HardwareSerial9availableEv>
    3074:	21 e0       	ldi	r18, 0x01	; 1
    3076:	89 2b       	or	r24, r25
    3078:	09 f4       	brne	.+2      	; 0x307c <_Z17Serial0_availablev+0x10>
    307a:	20 e0       	ldi	r18, 0x00	; 0
}
    307c:	82 2f       	mov	r24, r18
    307e:	08 95       	ret

00003080 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3080:	e3 ec       	ldi	r30, 0xC3	; 195
    3082:	f3 e0       	ldi	r31, 0x03	; 3
    3084:	13 82       	std	Z+3, r1	; 0x03
    3086:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    3088:	88 ee       	ldi	r24, 0xE8	; 232
    308a:	93 e0       	ldi	r25, 0x03	; 3
    308c:	a0 e0       	ldi	r26, 0x00	; 0
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	84 83       	std	Z+4, r24	; 0x04
    3092:	95 83       	std	Z+5, r25	; 0x05
    3094:	a6 83       	std	Z+6, r26	; 0x06
    3096:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3098:	86 e9       	ldi	r24, 0x96	; 150
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	80 83       	st	Z, r24
    30a0:	85 ec       	ldi	r24, 0xC5	; 197
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	95 87       	std	Z+13, r25	; 0x0d
    30a6:	84 87       	std	Z+12, r24	; 0x0c
    30a8:	84 ec       	ldi	r24, 0xC4	; 196
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	97 87       	std	Z+15, r25	; 0x0f
    30ae:	86 87       	std	Z+14, r24	; 0x0e
    30b0:	80 ec       	ldi	r24, 0xC0	; 192
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	91 8b       	std	Z+17, r25	; 0x11
    30b6:	80 8b       	std	Z+16, r24	; 0x10
    30b8:	81 ec       	ldi	r24, 0xC1	; 193
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	93 8b       	std	Z+19, r25	; 0x13
    30be:	82 8b       	std	Z+18, r24	; 0x12
    30c0:	82 ec       	ldi	r24, 0xC2	; 194
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	95 8b       	std	Z+21, r25	; 0x15
    30c6:	84 8b       	std	Z+20, r24	; 0x14
    30c8:	86 ec       	ldi	r24, 0xC6	; 198
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	97 8b       	std	Z+23, r25	; 0x17
    30ce:	86 8b       	std	Z+22, r24	; 0x16
    30d0:	11 8e       	std	Z+25, r1	; 0x19
    30d2:	12 8e       	std	Z+26, r1	; 0x1a
    30d4:	13 8e       	std	Z+27, r1	; 0x1b
    30d6:	14 8e       	std	Z+28, r1	; 0x1c
    30d8:	08 95       	ret

000030da <initVariant>:
    30da:	08 95       	ret

000030dc <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    30dc:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <init>

	initVariant();
    30e0:	0e 94 6d 18 	call	0x30da	; 0x30da <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    30e4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    30e8:	c1 ee       	ldi	r28, 0xE1	; 225
    30ea:	d6 e1       	ldi	r29, 0x16	; 22
#endif
	
	setup();
    
	for (;;) {
		loop();
    30ec:	0e 94 4a 11 	call	0x2294	; 0x2294 <loop>
		if (serialEventRun) serialEventRun();
    30f0:	20 97       	sbiw	r28, 0x00	; 0
    30f2:	e1 f3       	breq	.-8      	; 0x30ec <main+0x10>
    30f4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <_Z14serialEventRunv>
    30f8:	f9 cf       	rjmp	.-14     	; 0x30ec <main+0x10>

000030fa <_Znwj>:
    30fa:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <malloc>

000030fe <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    30fe:	cf 92       	push	r12
    3100:	df 92       	push	r13
    3102:	ef 92       	push	r14
    3104:	ff 92       	push	r15
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	6c 01       	movw	r12, r24
    3110:	7a 01       	movw	r14, r20
    3112:	8b 01       	movw	r16, r22
    3114:	c0 e0       	ldi	r28, 0x00	; 0
    3116:	d0 e0       	ldi	r29, 0x00	; 0
    3118:	ce 15       	cp	r28, r14
    311a:	df 05       	cpc	r29, r15
    311c:	81 f0       	breq	.+32     	; 0x313e <_ZN5Print5writeEPKhj+0x40>
    311e:	d8 01       	movw	r26, r16
    3120:	6d 91       	ld	r22, X+
    3122:	8d 01       	movw	r16, r26
    3124:	d6 01       	movw	r26, r12
    3126:	ed 91       	ld	r30, X+
    3128:	fc 91       	ld	r31, X
    312a:	01 90       	ld	r0, Z+
    312c:	f0 81       	ld	r31, Z
    312e:	e0 2d       	mov	r30, r0
    3130:	c6 01       	movw	r24, r12
    3132:	09 95       	icall
    3134:	89 2b       	or	r24, r25
    3136:	11 f0       	breq	.+4      	; 0x313c <_ZN5Print5writeEPKhj+0x3e>
    3138:	21 96       	adiw	r28, 0x01	; 1
    313a:	ee cf       	rjmp	.-36     	; 0x3118 <_ZN5Print5writeEPKhj+0x1a>
    313c:	7e 01       	movw	r14, r28
    313e:	c7 01       	movw	r24, r14
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	ff 90       	pop	r15
    314a:	ef 90       	pop	r14
    314c:	df 90       	pop	r13
    314e:	cf 90       	pop	r12
    3150:	08 95       	ret

00003152 <_ZN5Print5writeEPKc>:
    3152:	61 15       	cp	r22, r1
    3154:	71 05       	cpc	r23, r1
    3156:	79 f0       	breq	.+30     	; 0x3176 <_ZN5Print5writeEPKc+0x24>
    3158:	fb 01       	movw	r30, r22
    315a:	01 90       	ld	r0, Z+
    315c:	00 20       	and	r0, r0
    315e:	e9 f7       	brne	.-6      	; 0x315a <_ZN5Print5writeEPKc+0x8>
    3160:	31 97       	sbiw	r30, 0x01	; 1
    3162:	af 01       	movw	r20, r30
    3164:	46 1b       	sub	r20, r22
    3166:	57 0b       	sbc	r21, r23
    3168:	dc 01       	movw	r26, r24
    316a:	ed 91       	ld	r30, X+
    316c:	fc 91       	ld	r31, X
    316e:	02 80       	ldd	r0, Z+2	; 0x02
    3170:	f3 81       	ldd	r31, Z+3	; 0x03
    3172:	e0 2d       	mov	r30, r0
    3174:	09 94       	ijmp
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	08 95       	ret

0000317c <_ZN5Print5printEPK19__FlashStringHelper>:
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	8c 01       	movw	r16, r24
    318a:	7b 01       	movw	r14, r22
    318c:	c0 e0       	ldi	r28, 0x00	; 0
    318e:	d0 e0       	ldi	r29, 0x00	; 0
    3190:	f7 01       	movw	r30, r14
    3192:	ec 0f       	add	r30, r28
    3194:	fd 1f       	adc	r31, r29
    3196:	64 91       	lpm	r22, Z
    3198:	66 23       	and	r22, r22
    319a:	61 f0       	breq	.+24     	; 0x31b4 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    319c:	d8 01       	movw	r26, r16
    319e:	ed 91       	ld	r30, X+
    31a0:	fc 91       	ld	r31, X
    31a2:	01 90       	ld	r0, Z+
    31a4:	f0 81       	ld	r31, Z
    31a6:	e0 2d       	mov	r30, r0
    31a8:	c8 01       	movw	r24, r16
    31aa:	09 95       	icall
    31ac:	89 2b       	or	r24, r25
    31ae:	11 f0       	breq	.+4      	; 0x31b4 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    31b0:	21 96       	adiw	r28, 0x01	; 1
    31b2:	ee cf       	rjmp	.-36     	; 0x3190 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    31b4:	ce 01       	movw	r24, r28
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	1f 91       	pop	r17
    31bc:	0f 91       	pop	r16
    31be:	ff 90       	pop	r15
    31c0:	ef 90       	pop	r14
    31c2:	08 95       	ret

000031c4 <_ZN5Print5printERK6String>:
    31c4:	db 01       	movw	r26, r22
    31c6:	14 96       	adiw	r26, 0x04	; 4
    31c8:	4d 91       	ld	r20, X+
    31ca:	5c 91       	ld	r21, X
    31cc:	15 97       	sbiw	r26, 0x05	; 5
    31ce:	6d 91       	ld	r22, X+
    31d0:	7c 91       	ld	r23, X
    31d2:	dc 01       	movw	r26, r24
    31d4:	ed 91       	ld	r30, X+
    31d6:	fc 91       	ld	r31, X
    31d8:	02 80       	ldd	r0, Z+2	; 0x02
    31da:	f3 81       	ldd	r31, Z+3	; 0x03
    31dc:	e0 2d       	mov	r30, r0
    31de:	09 94       	ijmp

000031e0 <_ZN5Print5printEPKc>:
    31e0:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <_ZN5Print5writeEPKc>

000031e4 <_ZN5Print5printEc>:
    31e4:	dc 01       	movw	r26, r24
    31e6:	ed 91       	ld	r30, X+
    31e8:	fc 91       	ld	r31, X
    31ea:	01 90       	ld	r0, Z+
    31ec:	f0 81       	ld	r31, Z
    31ee:	e0 2d       	mov	r30, r0
    31f0:	09 94       	ijmp

000031f2 <_ZN5Print7printlnEv>:
    31f2:	62 ea       	ldi	r22, 0xA2	; 162
    31f4:	71 e0       	ldi	r23, 0x01	; 1
    31f6:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <_ZN5Print5writeEPKc>

000031fa <_ZN5Print7printlnEPK19__FlashStringHelper>:
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	ec 01       	movw	r28, r24
    3204:	0e 94 be 18 	call	0x317c	; 0x317c <_ZN5Print5printEPK19__FlashStringHelper>
    3208:	8c 01       	movw	r16, r24
    320a:	ce 01       	movw	r24, r28
    320c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
    3210:	80 0f       	add	r24, r16
    3212:	91 1f       	adc	r25, r17
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	08 95       	ret

0000321e <_ZN5Print7printlnEPKc>:
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	ec 01       	movw	r28, r24
    3228:	0e 94 a9 18 	call	0x3152	; 0x3152 <_ZN5Print5writeEPKc>
    322c:	8c 01       	movw	r16, r24
    322e:	ce 01       	movw	r24, r28
    3230:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
    3234:	80 0f       	add	r24, r16
    3236:	91 1f       	adc	r25, r17
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	08 95       	ret

00003242 <_ZN5Print7printlnEc>:
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	ec 01       	movw	r28, r24
    324c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN5Print5printEc>
    3250:	8c 01       	movw	r16, r24
    3252:	ce 01       	movw	r24, r28
    3254:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
    3258:	80 0f       	add	r24, r16
    325a:	91 1f       	adc	r25, r17
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	08 95       	ret

00003266 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3266:	8f 92       	push	r8
    3268:	9f 92       	push	r9
    326a:	af 92       	push	r10
    326c:	bf 92       	push	r11
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	a1 97       	sbiw	r28, 0x21	; 33
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	7c 01       	movw	r14, r24
    328c:	fa 01       	movw	r30, r20
    328e:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3290:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3292:	22 30       	cpi	r18, 0x02	; 2
    3294:	08 f4       	brcc	.+2      	; 0x3298 <_ZN5Print11printNumberEmh+0x32>
    3296:	2a e0       	ldi	r18, 0x0A	; 10
    3298:	8e 01       	movw	r16, r28
    329a:	0f 5d       	subi	r16, 0xDF	; 223
    329c:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    329e:	82 2e       	mov	r8, r18
    32a0:	91 2c       	mov	r9, r1
    32a2:	a1 2c       	mov	r10, r1
    32a4:	b1 2c       	mov	r11, r1
    32a6:	bf 01       	movw	r22, r30
    32a8:	a5 01       	movw	r20, r10
    32aa:	94 01       	movw	r18, r8
    32ac:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__udivmodsi4>
    n /= base;
    32b0:	f9 01       	movw	r30, r18
    32b2:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    32b4:	01 50       	subi	r16, 0x01	; 1
    32b6:	11 09       	sbc	r17, r1
    32b8:	6a 30       	cpi	r22, 0x0A	; 10
    32ba:	10 f4       	brcc	.+4      	; 0x32c0 <_ZN5Print11printNumberEmh+0x5a>
    32bc:	60 5d       	subi	r22, 0xD0	; 208
    32be:	01 c0       	rjmp	.+2      	; 0x32c2 <_ZN5Print11printNumberEmh+0x5c>
    32c0:	69 5c       	subi	r22, 0xC9	; 201
    32c2:	d8 01       	movw	r26, r16
    32c4:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    32c6:	23 2b       	or	r18, r19
    32c8:	24 2b       	or	r18, r20
    32ca:	25 2b       	or	r18, r21
    32cc:	61 f7       	brne	.-40     	; 0x32a6 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    32ce:	b8 01       	movw	r22, r16
    32d0:	c7 01       	movw	r24, r14
    32d2:	0e 94 a9 18 	call	0x3152	; 0x3152 <_ZN5Print5writeEPKc>
}
    32d6:	a1 96       	adiw	r28, 0x21	; 33
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	1f 91       	pop	r17
    32e8:	0f 91       	pop	r16
    32ea:	ff 90       	pop	r15
    32ec:	ef 90       	pop	r14
    32ee:	bf 90       	pop	r11
    32f0:	af 90       	pop	r10
    32f2:	9f 90       	pop	r9
    32f4:	8f 90       	pop	r8
    32f6:	08 95       	ret

000032f8 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    32f8:	21 15       	cp	r18, r1
    32fa:	31 05       	cpc	r19, r1
    32fc:	41 f4       	brne	.+16     	; 0x330e <_ZN5Print5printEmi+0x16>
    32fe:	dc 01       	movw	r26, r24
    3300:	ed 91       	ld	r30, X+
    3302:	fc 91       	ld	r31, X
    3304:	01 90       	ld	r0, Z+
    3306:	f0 81       	ld	r31, Z
    3308:	e0 2d       	mov	r30, r0
    330a:	64 2f       	mov	r22, r20
    330c:	09 94       	ijmp
  else return printNumber(n, base);
    330e:	0c 94 33 19 	jmp	0x3266	; 0x3266 <_ZN5Print11printNumberEmh>

00003312 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    3312:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    3314:	46 2f       	mov	r20, r22
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <_ZN5Print5printEmi>

00003320 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    332a:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN5Print5printEhi>
    332e:	8c 01       	movw	r16, r24
  n += println();
    3330:	ce 01       	movw	r24, r28
    3332:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
  return n;
}
    3336:	80 0f       	add	r24, r16
    3338:	91 1f       	adc	r25, r17
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	08 95       	ret

00003344 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3344:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3346:	ab 01       	movw	r20, r22
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	70 e0       	ldi	r23, 0x00	; 0
    334c:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <_ZN5Print5printEmi>

00003350 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    335a:	0e 94 a2 19 	call	0x3344	; 0x3344 <_ZN5Print5printEji>
    335e:	8c 01       	movw	r16, r24
  n += println();
    3360:	ce 01       	movw	r24, r28
    3362:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
  return n;
}
    3366:	80 0f       	add	r24, r16
    3368:	91 1f       	adc	r25, r17
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	08 95       	ret

00003374 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3374:	0f 93       	push	r16
    3376:	1f 93       	push	r17
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    337e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN5Print5printEmi>
    3382:	8c 01       	movw	r16, r24
  n += println();
    3384:	ce 01       	movw	r24, r28
    3386:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
  return n;
}
    338a:	80 0f       	add	r24, r16
    338c:	91 1f       	adc	r25, r17
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	08 95       	ret

00003398 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3398:	cf 92       	push	r12
    339a:	df 92       	push	r13
    339c:	ef 92       	push	r14
    339e:	ff 92       	push	r15
    33a0:	0f 93       	push	r16
    33a2:	1f 93       	push	r17
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
  if (base == 0) {
    33a8:	21 15       	cp	r18, r1
    33aa:	31 05       	cpc	r19, r1
    33ac:	81 f4       	brne	.+32     	; 0x33ce <_ZN5Print5printEli+0x36>
    return write(n);
    33ae:	dc 01       	movw	r26, r24
    33b0:	ed 91       	ld	r30, X+
    33b2:	fc 91       	ld	r31, X
    33b4:	01 90       	ld	r0, Z+
    33b6:	f0 81       	ld	r31, Z
    33b8:	e0 2d       	mov	r30, r0
    33ba:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	ff 90       	pop	r15
    33c6:	ef 90       	pop	r14
    33c8:	df 90       	pop	r13
    33ca:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    33cc:	09 94       	ijmp
  } else if (base == 10) {
    33ce:	2a 30       	cpi	r18, 0x0A	; 10
    33d0:	31 05       	cpc	r19, r1
    33d2:	01 f5       	brne	.+64     	; 0x3414 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    33d4:	77 ff       	sbrs	r23, 7
    33d6:	1d c0       	rjmp	.+58     	; 0x3412 <_ZN5Print5printEli+0x7a>
    33d8:	6a 01       	movw	r12, r20
    33da:	7b 01       	movw	r14, r22
    33dc:	ec 01       	movw	r28, r24
      int t = print('-');
    33de:	6d e2       	ldi	r22, 0x2D	; 45
    33e0:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <_ZN5Print5printEc>
    33e4:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    33e6:	44 27       	eor	r20, r20
    33e8:	55 27       	eor	r21, r21
    33ea:	ba 01       	movw	r22, r20
    33ec:	4c 19       	sub	r20, r12
    33ee:	5d 09       	sbc	r21, r13
    33f0:	6e 09       	sbc	r22, r14
    33f2:	7f 09       	sbc	r23, r15
    33f4:	2a e0       	ldi	r18, 0x0A	; 10
    33f6:	ce 01       	movw	r24, r28
    33f8:	0e 94 33 19 	call	0x3266	; 0x3266 <_ZN5Print11printNumberEmh>
    33fc:	80 0f       	add	r24, r16
    33fe:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	ff 90       	pop	r15
    340a:	ef 90       	pop	r14
    340c:	df 90       	pop	r13
    340e:	cf 90       	pop	r12
    3410:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3412:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3414:	df 91       	pop	r29
    3416:	cf 91       	pop	r28
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	df 90       	pop	r13
    3422:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3424:	0c 94 33 19 	jmp	0x3266	; 0x3266 <_ZN5Print11printNumberEmh>

00003428 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3428:	9a 01       	movw	r18, r20
  return print((long) n, base);
    342a:	ab 01       	movw	r20, r22
    342c:	77 0f       	add	r23, r23
    342e:	66 0b       	sbc	r22, r22
    3430:	77 0b       	sbc	r23, r23
    3432:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <_ZN5Print5printEli>

00003436 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    3436:	0f 93       	push	r16
    3438:	1f 93       	push	r17
    343a:	cf 93       	push	r28
    343c:	df 93       	push	r29
    343e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3440:	0e 94 14 1a 	call	0x3428	; 0x3428 <_ZN5Print5printEii>
    3444:	8c 01       	movw	r16, r24
  n += println();
    3446:	ce 01       	movw	r24, r28
    3448:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
  return n;
}
    344c:	80 0f       	add	r24, r16
    344e:	91 1f       	adc	r25, r17
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	1f 91       	pop	r17
    3456:	0f 91       	pop	r16
    3458:	08 95       	ret

0000345a <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    3464:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZN5Print5printEli>
    3468:	8c 01       	movw	r16, r24
  n += println();
    346a:	ce 01       	movw	r24, r28
    346c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_ZN5Print7printlnEv>
  return n;
}
    3470:	80 0f       	add	r24, r16
    3472:	91 1f       	adc	r25, r17
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	08 95       	ret

0000347e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    347e:	1f 92       	push	r1
    3480:	0f 92       	push	r0
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	0f 92       	push	r0
    3486:	11 24       	eor	r1, r1
    3488:	2f 93       	push	r18
    348a:	3f 93       	push	r19
    348c:	8f 93       	push	r24
    348e:	9f 93       	push	r25
    3490:	af 93       	push	r26
    3492:	bf 93       	push	r27
    3494:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <timer0_millis>
    3498:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <timer0_millis+0x1>
    349c:	a0 91 63 04 	lds	r26, 0x0463	; 0x800463 <timer0_millis+0x2>
    34a0:	b0 91 64 04 	lds	r27, 0x0464	; 0x800464 <timer0_millis+0x3>
    34a4:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <timer0_fract>
    34a8:	23 e0       	ldi	r18, 0x03	; 3
    34aa:	23 0f       	add	r18, r19
    34ac:	2d 37       	cpi	r18, 0x7D	; 125
    34ae:	20 f4       	brcc	.+8      	; 0x34b8 <__vector_16+0x3a>
    34b0:	01 96       	adiw	r24, 0x01	; 1
    34b2:	a1 1d       	adc	r26, r1
    34b4:	b1 1d       	adc	r27, r1
    34b6:	05 c0       	rjmp	.+10     	; 0x34c2 <__vector_16+0x44>
    34b8:	26 e8       	ldi	r18, 0x86	; 134
    34ba:	23 0f       	add	r18, r19
    34bc:	02 96       	adiw	r24, 0x02	; 2
    34be:	a1 1d       	adc	r26, r1
    34c0:	b1 1d       	adc	r27, r1
    34c2:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <timer0_fract>
    34c6:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <timer0_millis>
    34ca:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <timer0_millis+0x1>
    34ce:	a0 93 63 04 	sts	0x0463, r26	; 0x800463 <timer0_millis+0x2>
    34d2:	b0 93 64 04 	sts	0x0464, r27	; 0x800464 <timer0_millis+0x3>
    34d6:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <timer0_overflow_count>
    34da:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <timer0_overflow_count+0x1>
    34de:	a0 91 67 04 	lds	r26, 0x0467	; 0x800467 <timer0_overflow_count+0x2>
    34e2:	b0 91 68 04 	lds	r27, 0x0468	; 0x800468 <timer0_overflow_count+0x3>
    34e6:	01 96       	adiw	r24, 0x01	; 1
    34e8:	a1 1d       	adc	r26, r1
    34ea:	b1 1d       	adc	r27, r1
    34ec:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <timer0_overflow_count>
    34f0:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <timer0_overflow_count+0x1>
    34f4:	a0 93 67 04 	sts	0x0467, r26	; 0x800467 <timer0_overflow_count+0x2>
    34f8:	b0 93 68 04 	sts	0x0468, r27	; 0x800468 <timer0_overflow_count+0x3>
    34fc:	bf 91       	pop	r27
    34fe:	af 91       	pop	r26
    3500:	9f 91       	pop	r25
    3502:	8f 91       	pop	r24
    3504:	3f 91       	pop	r19
    3506:	2f 91       	pop	r18
    3508:	0f 90       	pop	r0
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	0f 90       	pop	r0
    350e:	1f 90       	pop	r1
    3510:	18 95       	reti

00003512 <micros>:
    3512:	3f b7       	in	r19, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <timer0_overflow_count>
    351a:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <timer0_overflow_count+0x1>
    351e:	a0 91 67 04 	lds	r26, 0x0467	; 0x800467 <timer0_overflow_count+0x2>
    3522:	b0 91 68 04 	lds	r27, 0x0468	; 0x800468 <timer0_overflow_count+0x3>
    3526:	26 b5       	in	r18, 0x26	; 38
    3528:	a8 9b       	sbis	0x15, 0	; 21
    352a:	05 c0       	rjmp	.+10     	; 0x3536 <micros+0x24>
    352c:	2f 3f       	cpi	r18, 0xFF	; 255
    352e:	19 f0       	breq	.+6      	; 0x3536 <micros+0x24>
    3530:	01 96       	adiw	r24, 0x01	; 1
    3532:	a1 1d       	adc	r26, r1
    3534:	b1 1d       	adc	r27, r1
    3536:	3f bf       	out	0x3f, r19	; 63
    3538:	ba 2f       	mov	r27, r26
    353a:	a9 2f       	mov	r26, r25
    353c:	98 2f       	mov	r25, r24
    353e:	88 27       	eor	r24, r24
    3540:	82 0f       	add	r24, r18
    3542:	91 1d       	adc	r25, r1
    3544:	a1 1d       	adc	r26, r1
    3546:	b1 1d       	adc	r27, r1
    3548:	bc 01       	movw	r22, r24
    354a:	cd 01       	movw	r24, r26
    354c:	42 e0       	ldi	r20, 0x02	; 2
    354e:	66 0f       	add	r22, r22
    3550:	77 1f       	adc	r23, r23
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	4a 95       	dec	r20
    3558:	d1 f7       	brne	.-12     	; 0x354e <micros+0x3c>
    355a:	08 95       	ret

0000355c <delay>:
    355c:	8f 92       	push	r8
    355e:	9f 92       	push	r9
    3560:	af 92       	push	r10
    3562:	bf 92       	push	r11
    3564:	cf 92       	push	r12
    3566:	df 92       	push	r13
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	6b 01       	movw	r12, r22
    356e:	7c 01       	movw	r14, r24
    3570:	0e 94 89 1a 	call	0x3512	; 0x3512 <micros>
    3574:	4b 01       	movw	r8, r22
    3576:	5c 01       	movw	r10, r24
    3578:	c1 14       	cp	r12, r1
    357a:	d1 04       	cpc	r13, r1
    357c:	e1 04       	cpc	r14, r1
    357e:	f1 04       	cpc	r15, r1
    3580:	01 f1       	breq	.+64     	; 0x35c2 <delay+0x66>
    3582:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <yield>
    3586:	0e 94 89 1a 	call	0x3512	; 0x3512 <micros>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	88 19       	sub	r24, r8
    3590:	99 09       	sbc	r25, r9
    3592:	aa 09       	sbc	r26, r10
    3594:	bb 09       	sbc	r27, r11
    3596:	88 3e       	cpi	r24, 0xE8	; 232
    3598:	93 40       	sbci	r25, 0x03	; 3
    359a:	a1 05       	cpc	r26, r1
    359c:	b1 05       	cpc	r27, r1
    359e:	60 f3       	brcs	.-40     	; 0x3578 <delay+0x1c>
    35a0:	21 e0       	ldi	r18, 0x01	; 1
    35a2:	c2 1a       	sub	r12, r18
    35a4:	d1 08       	sbc	r13, r1
    35a6:	e1 08       	sbc	r14, r1
    35a8:	f1 08       	sbc	r15, r1
    35aa:	88 ee       	ldi	r24, 0xE8	; 232
    35ac:	88 0e       	add	r8, r24
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	98 1e       	adc	r9, r24
    35b2:	a1 1c       	adc	r10, r1
    35b4:	b1 1c       	adc	r11, r1
    35b6:	c1 14       	cp	r12, r1
    35b8:	d1 04       	cpc	r13, r1
    35ba:	e1 04       	cpc	r14, r1
    35bc:	f1 04       	cpc	r15, r1
    35be:	19 f7       	brne	.-58     	; 0x3586 <delay+0x2a>
    35c0:	db cf       	rjmp	.-74     	; 0x3578 <delay+0x1c>
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	bf 90       	pop	r11
    35cc:	af 90       	pop	r10
    35ce:	9f 90       	pop	r9
    35d0:	8f 90       	pop	r8
    35d2:	08 95       	ret

000035d4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    35d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    35d6:	84 b5       	in	r24, 0x24	; 36
    35d8:	82 60       	ori	r24, 0x02	; 2
    35da:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    35dc:	84 b5       	in	r24, 0x24	; 36
    35de:	81 60       	ori	r24, 0x01	; 1
    35e0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    35e2:	85 b5       	in	r24, 0x25	; 37
    35e4:	82 60       	ori	r24, 0x02	; 2
    35e6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    35e8:	85 b5       	in	r24, 0x25	; 37
    35ea:	81 60       	ori	r24, 0x01	; 1
    35ec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    35ee:	ee e6       	ldi	r30, 0x6E	; 110
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	81 60       	ori	r24, 0x01	; 1
    35f6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    35f8:	e1 e8       	ldi	r30, 0x81	; 129
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    35fe:	80 81       	ld	r24, Z
    3600:	82 60       	ori	r24, 0x02	; 2
    3602:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3604:	80 81       	ld	r24, Z
    3606:	81 60       	ori	r24, 0x01	; 1
    3608:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    360a:	e0 e8       	ldi	r30, 0x80	; 128
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	81 60       	ori	r24, 0x01	; 1
    3612:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3614:	e1 eb       	ldi	r30, 0xB1	; 177
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	84 60       	ori	r24, 0x04	; 4
    361c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    361e:	e0 eb       	ldi	r30, 0xB0	; 176
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	81 60       	ori	r24, 0x01	; 1
    3626:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3628:	ea e7       	ldi	r30, 0x7A	; 122
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	84 60       	ori	r24, 0x04	; 4
    3630:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3632:	80 81       	ld	r24, Z
    3634:	82 60       	ori	r24, 0x02	; 2
    3636:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3638:	80 81       	ld	r24, Z
    363a:	81 60       	ori	r24, 0x01	; 1
    363c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    363e:	80 81       	ld	r24, Z
    3640:	80 68       	ori	r24, 0x80	; 128
    3642:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3644:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3648:	08 95       	ret

0000364a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    364a:	8e 30       	cpi	r24, 0x0E	; 14
    364c:	08 f0       	brcs	.+2      	; 0x3650 <analogRead+0x6>
    364e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3650:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3654:	90 e4       	ldi	r25, 0x40	; 64
    3656:	29 9f       	mul	r18, r25
    3658:	90 01       	movw	r18, r0
    365a:	11 24       	eor	r1, r1
    365c:	87 70       	andi	r24, 0x07	; 7
    365e:	82 2b       	or	r24, r18
    3660:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3664:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3668:	80 64       	ori	r24, 0x40	; 64
    366a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    366e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    3672:	86 fd       	sbrc	r24, 6
    3674:	fc cf       	rjmp	.-8      	; 0x366e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3676:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    367a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    367e:	90 e0       	ldi	r25, 0x00	; 0
}
    3680:	92 2b       	or	r25, r18
    3682:	08 95       	ret

00003684 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3684:	83 30       	cpi	r24, 0x03	; 3
    3686:	81 f0       	breq	.+32     	; 0x36a8 <turnOffPWM+0x24>
    3688:	28 f4       	brcc	.+10     	; 0x3694 <turnOffPWM+0x10>
    368a:	81 30       	cpi	r24, 0x01	; 1
    368c:	99 f0       	breq	.+38     	; 0x36b4 <turnOffPWM+0x30>
    368e:	82 30       	cpi	r24, 0x02	; 2
    3690:	a1 f0       	breq	.+40     	; 0x36ba <turnOffPWM+0x36>
    3692:	08 95       	ret
    3694:	87 30       	cpi	r24, 0x07	; 7
    3696:	a9 f0       	breq	.+42     	; 0x36c2 <turnOffPWM+0x3e>
    3698:	88 30       	cpi	r24, 0x08	; 8
    369a:	b9 f0       	breq	.+46     	; 0x36ca <turnOffPWM+0x46>
    369c:	84 30       	cpi	r24, 0x04	; 4
    369e:	d1 f4       	brne	.+52     	; 0x36d4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    36a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36a4:	8f 7d       	andi	r24, 0xDF	; 223
    36a6:	03 c0       	rjmp	.+6      	; 0x36ae <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    36a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36ac:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    36ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36b2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    36b4:	84 b5       	in	r24, 0x24	; 36
    36b6:	8f 77       	andi	r24, 0x7F	; 127
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    36ba:	84 b5       	in	r24, 0x24	; 36
    36bc:	8f 7d       	andi	r24, 0xDF	; 223
    36be:	84 bd       	out	0x24, r24	; 36
    36c0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    36c2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36c6:	8f 77       	andi	r24, 0x7F	; 127
    36c8:	03 c0       	rjmp	.+6      	; 0x36d0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    36ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36ce:	8f 7d       	andi	r24, 0xDF	; 223
    36d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36d4:	08 95       	ret

000036d6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	e5 59       	subi	r30, 0x95	; 149
    36e0:	f9 4f       	sbci	r31, 0xF9	; 249
    36e2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    36e4:	fc 01       	movw	r30, r24
    36e6:	e1 58       	subi	r30, 0x81	; 129
    36e8:	f9 4f       	sbci	r31, 0xF9	; 249
    36ea:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    36ec:	88 23       	and	r24, r24
    36ee:	61 f1       	breq	.+88     	; 0x3748 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	fc 01       	movw	r30, r24
    36f8:	e9 55       	subi	r30, 0x59	; 89
    36fa:	f9 4f       	sbci	r31, 0xF9	; 249
    36fc:	c5 91       	lpm	r28, Z+
    36fe:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3700:	fc 01       	movw	r30, r24
    3702:	e3 56       	subi	r30, 0x63	; 99
    3704:	f9 4f       	sbci	r31, 0xF9	; 249
    3706:	a5 91       	lpm	r26, Z+
    3708:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    370a:	61 11       	cpse	r22, r1
    370c:	09 c0       	rjmp	.+18     	; 0x3720 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    370e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3710:	f8 94       	cli
		*reg &= ~bit;
    3712:	88 81       	ld	r24, Y
    3714:	20 95       	com	r18
    3716:	82 23       	and	r24, r18
    3718:	88 83       	st	Y, r24
		*out &= ~bit;
    371a:	ec 91       	ld	r30, X
    371c:	2e 23       	and	r18, r30
    371e:	0b c0       	rjmp	.+22     	; 0x3736 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3720:	62 30       	cpi	r22, 0x02	; 2
    3722:	61 f4       	brne	.+24     	; 0x373c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3724:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3726:	f8 94       	cli
		*reg &= ~bit;
    3728:	88 81       	ld	r24, Y
    372a:	32 2f       	mov	r19, r18
    372c:	30 95       	com	r19
    372e:	83 23       	and	r24, r19
    3730:	88 83       	st	Y, r24
		*out |= bit;
    3732:	ec 91       	ld	r30, X
    3734:	2e 2b       	or	r18, r30
    3736:	2c 93       	st	X, r18
		SREG = oldSREG;
    3738:	9f bf       	out	0x3f, r25	; 63
    373a:	06 c0       	rjmp	.+12     	; 0x3748 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    373c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    373e:	f8 94       	cli
		*reg |= bit;
    3740:	e8 81       	ld	r30, Y
    3742:	2e 2b       	or	r18, r30
    3744:	28 83       	st	Y, r18
		SREG = oldSREG;
    3746:	8f bf       	out	0x3f, r24	; 63
	}
}
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	08 95       	ret

0000374e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	f9 01       	movw	r30, r18
    375a:	e9 5a       	subi	r30, 0xA9	; 169
    375c:	f9 4f       	sbci	r31, 0xF9	; 249
    375e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3760:	f9 01       	movw	r30, r18
    3762:	e5 59       	subi	r30, 0x95	; 149
    3764:	f9 4f       	sbci	r31, 0xF9	; 249
    3766:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3768:	f9 01       	movw	r30, r18
    376a:	e1 58       	subi	r30, 0x81	; 129
    376c:	f9 4f       	sbci	r31, 0xF9	; 249
    376e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3770:	cc 23       	and	r28, r28
    3772:	c1 f0       	breq	.+48     	; 0x37a4 <digitalWrite+0x56>
    3774:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3776:	81 11       	cpse	r24, r1
    3778:	0e 94 42 1b 	call	0x3684	; 0x3684 <turnOffPWM>

	out = portOutputRegister(port);
    377c:	ec 2f       	mov	r30, r28
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	e3 56       	subi	r30, 0x63	; 99
    3786:	f9 4f       	sbci	r31, 0xF9	; 249
    3788:	a5 91       	lpm	r26, Z+
    378a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    378c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    378e:	f8 94       	cli

	if (val == LOW) {
    3790:	11 11       	cpse	r17, r1
    3792:	04 c0       	rjmp	.+8      	; 0x379c <digitalWrite+0x4e>
		*out &= ~bit;
    3794:	8c 91       	ld	r24, X
    3796:	d0 95       	com	r29
    3798:	d8 23       	and	r29, r24
    379a:	02 c0       	rjmp	.+4      	; 0x37a0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    379c:	ec 91       	ld	r30, X
    379e:	de 2b       	or	r29, r30
    37a0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    37a2:	9f bf       	out	0x3f, r25	; 63
}
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	1f 91       	pop	r17
    37aa:	08 95       	ret

000037ac <_ZN6StringD1Ev>:
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}
    37ac:	fc 01       	movw	r30, r24
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	0c 94 4c 20 	jmp	0x4098	; 0x4098 <free>

000037b6 <_ZN6String10invalidateEv>:
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	ec 01       	movw	r28, r24
    37bc:	88 81       	ld	r24, Y
    37be:	99 81       	ldd	r25, Y+1	; 0x01
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	11 f0       	breq	.+4      	; 0x37c8 <_ZN6String10invalidateEv+0x12>
    37c4:	0e 94 4c 20 	call	0x4098	; 0x4098 <free>
    37c8:	19 82       	std	Y+1, r1	; 0x01
    37ca:	18 82       	st	Y, r1
    37cc:	1d 82       	std	Y+5, r1	; 0x05
    37ce:	1c 82       	std	Y+4, r1	; 0x04
    37d0:	1b 82       	std	Y+3, r1	; 0x03
    37d2:	1a 82       	std	Y+2, r1	; 0x02
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	08 95       	ret

000037da <_ZN6String12changeBufferEj>:
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	ec 01       	movw	r28, r24
    37e4:	8b 01       	movw	r16, r22
    37e6:	6f 5f       	subi	r22, 0xFF	; 255
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ea:	88 81       	ld	r24, Y
    37ec:	99 81       	ldd	r25, Y+1	; 0x01
    37ee:	0e 94 d5 20 	call	0x41aa	; 0x41aa <realloc>
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	31 f0       	breq	.+12     	; 0x3802 <_ZN6String12changeBufferEj+0x28>
    37f6:	99 83       	std	Y+1, r25	; 0x01
    37f8:	88 83       	st	Y, r24
    37fa:	1b 83       	std	Y+3, r17	; 0x03
    37fc:	0a 83       	std	Y+2, r16	; 0x02
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	01 c0       	rjmp	.+2      	; 0x3804 <_ZN6String12changeBufferEj+0x2a>
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	df 91       	pop	r29
    3806:	cf 91       	pop	r28
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	08 95       	ret

0000380e <_ZN6String7reserveEj>:
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	ec 01       	movw	r28, r24
    3814:	88 81       	ld	r24, Y
    3816:	99 81       	ldd	r25, Y+1	; 0x01
    3818:	89 2b       	or	r24, r25
    381a:	29 f0       	breq	.+10     	; 0x3826 <_ZN6String7reserveEj+0x18>
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	9b 81       	ldd	r25, Y+3	; 0x03
    3820:	86 17       	cp	r24, r22
    3822:	97 07       	cpc	r25, r23
    3824:	60 f4       	brcc	.+24     	; 0x383e <_ZN6String7reserveEj+0x30>
    3826:	ce 01       	movw	r24, r28
    3828:	0e 94 ed 1b 	call	0x37da	; 0x37da <_ZN6String12changeBufferEj>
    382c:	88 23       	and	r24, r24
    382e:	41 f0       	breq	.+16     	; 0x3840 <_ZN6String7reserveEj+0x32>
    3830:	8c 81       	ldd	r24, Y+4	; 0x04
    3832:	9d 81       	ldd	r25, Y+5	; 0x05
    3834:	89 2b       	or	r24, r25
    3836:	19 f4       	brne	.+6      	; 0x383e <_ZN6String7reserveEj+0x30>
    3838:	e8 81       	ld	r30, Y
    383a:	f9 81       	ldd	r31, Y+1	; 0x01
    383c:	10 82       	st	Z, r1
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <_ZN6String4copyEPKcj>:
    3846:	ef 92       	push	r14
    3848:	ff 92       	push	r15
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	ec 01       	movw	r28, r24
    3854:	7b 01       	movw	r14, r22
    3856:	8a 01       	movw	r16, r20
    3858:	ba 01       	movw	r22, r20
    385a:	0e 94 07 1c 	call	0x380e	; 0x380e <_ZN6String7reserveEj>
    385e:	81 11       	cpse	r24, r1
    3860:	04 c0       	rjmp	.+8      	; 0x386a <_ZN6String4copyEPKcj+0x24>
    3862:	ce 01       	movw	r24, r28
    3864:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN6String10invalidateEv>
    3868:	07 c0       	rjmp	.+14     	; 0x3878 <_ZN6String4copyEPKcj+0x32>
    386a:	1d 83       	std	Y+5, r17	; 0x05
    386c:	0c 83       	std	Y+4, r16	; 0x04
    386e:	b7 01       	movw	r22, r14
    3870:	88 81       	ld	r24, Y
    3872:	99 81       	ldd	r25, Y+1	; 0x01
    3874:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <strcpy>
    3878:	ce 01       	movw	r24, r28
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	ff 90       	pop	r15
    3884:	ef 90       	pop	r14
    3886:	08 95       	ret

00003888 <_ZN6StringC1EPKc>:
    3888:	fc 01       	movw	r30, r24
    388a:	11 82       	std	Z+1, r1	; 0x01
    388c:	10 82       	st	Z, r1
    388e:	13 82       	std	Z+3, r1	; 0x03
    3890:	12 82       	std	Z+2, r1	; 0x02
    3892:	15 82       	std	Z+5, r1	; 0x05
    3894:	14 82       	std	Z+4, r1	; 0x04
    3896:	61 15       	cp	r22, r1
    3898:	71 05       	cpc	r23, r1
    389a:	51 f0       	breq	.+20     	; 0x38b0 <_ZN6StringC1EPKc+0x28>
    389c:	fb 01       	movw	r30, r22
    389e:	01 90       	ld	r0, Z+
    38a0:	00 20       	and	r0, r0
    38a2:	e9 f7       	brne	.-6      	; 0x389e <_ZN6StringC1EPKc+0x16>
    38a4:	31 97       	sbiw	r30, 0x01	; 1
    38a6:	af 01       	movw	r20, r30
    38a8:	46 1b       	sub	r20, r22
    38aa:	57 0b       	sbc	r21, r23
    38ac:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <_ZN6String4copyEPKcj>
    38b0:	08 95       	ret

000038b2 <_ZN6StringaSERKS_>:
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	ec 01       	movw	r28, r24
    38b8:	fb 01       	movw	r30, r22
    38ba:	86 17       	cp	r24, r22
    38bc:	97 07       	cpc	r25, r23
    38be:	61 f0       	breq	.+24     	; 0x38d8 <_ZN6StringaSERKS_+0x26>
    38c0:	60 81       	ld	r22, Z
    38c2:	71 81       	ldd	r23, Z+1	; 0x01
    38c4:	61 15       	cp	r22, r1
    38c6:	71 05       	cpc	r23, r1
    38c8:	29 f0       	breq	.+10     	; 0x38d4 <_ZN6StringaSERKS_+0x22>
    38ca:	44 81       	ldd	r20, Z+4	; 0x04
    38cc:	55 81       	ldd	r21, Z+5	; 0x05
    38ce:	0e 94 23 1c 	call	0x3846	; 0x3846 <_ZN6String4copyEPKcj>
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <_ZN6StringaSERKS_+0x26>
    38d4:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <_ZN6String10invalidateEv>
    38d8:	ce 01       	movw	r24, r28
    38da:	df 91       	pop	r29
    38dc:	cf 91       	pop	r28
    38de:	08 95       	ret

000038e0 <_ZN6StringC1ERKS_>:
    38e0:	fc 01       	movw	r30, r24
    38e2:	11 82       	std	Z+1, r1	; 0x01
    38e4:	10 82       	st	Z, r1
    38e6:	13 82       	std	Z+3, r1	; 0x03
    38e8:	12 82       	std	Z+2, r1	; 0x02
    38ea:	15 82       	std	Z+5, r1	; 0x05
    38ec:	14 82       	std	Z+4, r1	; 0x04
    38ee:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <_ZN6StringaSERKS_>

000038f2 <_ZN6String6concatEPKcj>:
    38f2:	ef 92       	push	r14
    38f4:	ff 92       	push	r15
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	61 15       	cp	r22, r1
    3900:	71 05       	cpc	r23, r1
    3902:	11 f4       	brne	.+4      	; 0x3908 <_ZN6String6concatEPKcj+0x16>
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	1c c0       	rjmp	.+56     	; 0x3940 <_ZN6String6concatEPKcj+0x4e>
    3908:	41 15       	cp	r20, r1
    390a:	51 05       	cpc	r21, r1
    390c:	c1 f0       	breq	.+48     	; 0x393e <_ZN6String6concatEPKcj+0x4c>
    390e:	7b 01       	movw	r14, r22
    3910:	ec 01       	movw	r28, r24
    3912:	8c 81       	ldd	r24, Y+4	; 0x04
    3914:	9d 81       	ldd	r25, Y+5	; 0x05
    3916:	8a 01       	movw	r16, r20
    3918:	08 0f       	add	r16, r24
    391a:	19 1f       	adc	r17, r25
    391c:	b8 01       	movw	r22, r16
    391e:	ce 01       	movw	r24, r28
    3920:	0e 94 07 1c 	call	0x380e	; 0x380e <_ZN6String7reserveEj>
    3924:	88 23       	and	r24, r24
    3926:	71 f3       	breq	.-36     	; 0x3904 <_ZN6String6concatEPKcj+0x12>
    3928:	28 81       	ld	r18, Y
    392a:	39 81       	ldd	r19, Y+1	; 0x01
    392c:	8c 81       	ldd	r24, Y+4	; 0x04
    392e:	9d 81       	ldd	r25, Y+5	; 0x05
    3930:	b7 01       	movw	r22, r14
    3932:	82 0f       	add	r24, r18
    3934:	93 1f       	adc	r25, r19
    3936:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <strcpy>
    393a:	1d 83       	std	Y+5, r17	; 0x05
    393c:	0c 83       	std	Y+4, r16	; 0x04
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	08 95       	ret

0000394e <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	00 d0       	rcall	.+0      	; 0x395c <_ZN6String6concatEh+0xe>
    395c:	00 d0       	rcall	.+0      	; 0x395e <_ZN6String6concatEh+0x10>
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	7c 01       	movw	r14, r24
    3964:	86 2f       	mov	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3966:	4a e0       	ldi	r20, 0x0A	; 10
    3968:	8e 01       	movw	r16, r28
    396a:	0f 5f       	subi	r16, 0xFF	; 255
    396c:	1f 4f       	sbci	r17, 0xFF	; 255
    396e:	b8 01       	movw	r22, r16
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	0e 94 00 22 	call	0x4400	; 0x4400 <__itoa_ncheck>
	char buf[1 + 3 * sizeof(unsigned char)];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
    3976:	f8 01       	movw	r30, r16
    3978:	01 90       	ld	r0, Z+
    397a:	00 20       	and	r0, r0
    397c:	e9 f7       	brne	.-6      	; 0x3978 <_ZN6String6concatEh+0x2a>
    397e:	31 97       	sbiw	r30, 0x01	; 1
    3980:	af 01       	movw	r20, r30
    3982:	40 1b       	sub	r20, r16
    3984:	51 0b       	sbc	r21, r17
    3986:	b8 01       	movw	r22, r16
    3988:	c7 01       	movw	r24, r14
    398a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <_ZN6String6concatEPKcj>
}
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	08 95       	ret

000039a4 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    39a4:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    39a8:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    39ac:	28 17       	cp	r18, r24
    39ae:	39 07       	cpc	r19, r25
    39b0:	b9 f4       	brne	.+46     	; 0x39e0 <_ZN14SoftwareSerial4readEv+0x3c>
    39b2:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    39b6:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    39ba:	98 17       	cp	r25, r24
    39bc:	89 f0       	breq	.+34     	; 0x39e0 <_ZN14SoftwareSerial4readEv+0x3c>
    39be:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	e5 59       	subi	r30, 0x95	; 149
    39c6:	fb 4f       	sbci	r31, 0xFB	; 251
    39c8:	80 81       	ld	r24, Z
    39ca:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	2f 5f       	subi	r18, 0xFF	; 255
    39d2:	3f 4f       	sbci	r19, 0xFF	; 255
    39d4:	2f 73       	andi	r18, 0x3F	; 63
    39d6:	33 27       	eor	r19, r19
    39d8:	20 93 69 04 	sts	0x0469, r18	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	08 95       	ret
    39e0:	8f ef       	ldi	r24, 0xFF	; 255
    39e2:	9f ef       	ldi	r25, 0xFF	; 255
    39e4:	08 95       	ret

000039e6 <_ZN14SoftwareSerial5writeEh>:
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	dc 01       	movw	r26, r24
    39ee:	5c 96       	adiw	r26, 0x1c	; 28
    39f0:	8d 91       	ld	r24, X+
    39f2:	9c 91       	ld	r25, X
    39f4:	5d 97       	sbiw	r26, 0x1d	; 29
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	39 f4       	brne	.+14     	; 0x3a08 <_ZN14SoftwareSerial5writeEh+0x22>
    39fa:	21 e0       	ldi	r18, 0x01	; 1
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	13 96       	adiw	r26, 0x03	; 3
    3a00:	3c 93       	st	X, r19
    3a02:	2e 93       	st	-X, r18
    3a04:	12 97       	sbiw	r26, 0x02	; 2
    3a06:	3b c0       	rjmp	.+118    	; 0x3a7e <_ZN14SoftwareSerial5writeEh+0x98>
    3a08:	51 96       	adiw	r26, 0x11	; 17
    3a0a:	ed 91       	ld	r30, X+
    3a0c:	fc 91       	ld	r31, X
    3a0e:	52 97       	sbiw	r26, 0x12	; 18
    3a10:	50 96       	adiw	r26, 0x10	; 16
    3a12:	2c 91       	ld	r18, X
    3a14:	50 97       	sbiw	r26, 0x10	; 16
    3a16:	32 2f       	mov	r19, r18
    3a18:	30 95       	com	r19
    3a1a:	1f b7       	in	r17, 0x3f	; 63
    3a1c:	5e 96       	adiw	r26, 0x1e	; 30
    3a1e:	4c 91       	ld	r20, X
    3a20:	5e 97       	sbiw	r26, 0x1e	; 30
    3a22:	74 2f       	mov	r23, r20
    3a24:	72 70       	andi	r23, 0x02	; 2
    3a26:	41 fd       	sbrc	r20, 1
    3a28:	60 95       	com	r22
    3a2a:	f8 94       	cli
    3a2c:	40 81       	ld	r20, Z
    3a2e:	77 23       	and	r23, r23
    3a30:	11 f0       	breq	.+4      	; 0x3a36 <_ZN14SoftwareSerial5writeEh+0x50>
    3a32:	42 2b       	or	r20, r18
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <_ZN14SoftwareSerial5writeEh+0x52>
    3a36:	43 23       	and	r20, r19
    3a38:	40 83       	st	Z, r20
    3a3a:	ec 01       	movw	r28, r24
    3a3c:	21 97       	sbiw	r28, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <_ZN14SoftwareSerial5writeEh+0x56>
    3a40:	48 e0       	ldi	r20, 0x08	; 8
    3a42:	50 81       	ld	r21, Z
    3a44:	60 ff       	sbrs	r22, 0
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <_ZN14SoftwareSerial5writeEh+0x66>
    3a48:	52 2b       	or	r21, r18
    3a4a:	01 c0       	rjmp	.+2      	; 0x3a4e <_ZN14SoftwareSerial5writeEh+0x68>
    3a4c:	53 23       	and	r21, r19
    3a4e:	50 83       	st	Z, r21
    3a50:	ec 01       	movw	r28, r24
    3a52:	21 97       	sbiw	r28, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <_ZN14SoftwareSerial5writeEh+0x6c>
    3a56:	66 95       	lsr	r22
    3a58:	41 50       	subi	r20, 0x01	; 1
    3a5a:	99 f7       	brne	.-26     	; 0x3a42 <_ZN14SoftwareSerial5writeEh+0x5c>
    3a5c:	80 81       	ld	r24, Z
    3a5e:	77 23       	and	r23, r23
    3a60:	19 f0       	breq	.+6      	; 0x3a68 <_ZN14SoftwareSerial5writeEh+0x82>
    3a62:	83 23       	and	r24, r19
    3a64:	80 83       	st	Z, r24
    3a66:	02 c0       	rjmp	.+4      	; 0x3a6c <_ZN14SoftwareSerial5writeEh+0x86>
    3a68:	28 2b       	or	r18, r24
    3a6a:	20 83       	st	Z, r18
    3a6c:	1f bf       	out	0x3f, r17	; 63
    3a6e:	5c 96       	adiw	r26, 0x1c	; 28
    3a70:	8d 91       	ld	r24, X+
    3a72:	9c 91       	ld	r25, X
    3a74:	5d 97       	sbiw	r26, 0x1d	; 29
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	f1 f7       	brne	.-4      	; 0x3a76 <_ZN14SoftwareSerial5writeEh+0x90>
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	df 91       	pop	r29
    3a80:	cf 91       	pop	r28
    3a82:	1f 91       	pop	r17
    3a84:	08 95       	ret

00003a86 <_ZN14SoftwareSerial5flushEv>:
    3a86:	08 95       	ret

00003a88 <_ZN14SoftwareSerial4peekEv>:
    3a88:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3a8c:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3a90:	28 17       	cp	r18, r24
    3a92:	39 07       	cpc	r19, r25
    3a94:	71 f4       	brne	.+28     	; 0x3ab2 <_ZN14SoftwareSerial4peekEv+0x2a>
    3a96:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3a9a:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3a9e:	98 17       	cp	r25, r24
    3aa0:	41 f0       	breq	.+16     	; 0x3ab2 <_ZN14SoftwareSerial4peekEv+0x2a>
    3aa2:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	e5 59       	subi	r30, 0x95	; 149
    3aaa:	fb 4f       	sbci	r31, 0xFB	; 251
    3aac:	80 81       	ld	r24, Z
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	08 95       	ret
    3ab2:	8f ef       	ldi	r24, 0xFF	; 255
    3ab4:	9f ef       	ldi	r25, 0xFF	; 255
    3ab6:	08 95       	ret

00003ab8 <_ZN14SoftwareSerial9availableEv>:
    3ab8:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3abc:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3ac0:	28 17       	cp	r18, r24
    3ac2:	39 07       	cpc	r19, r25
    3ac4:	71 f4       	brne	.+28     	; 0x3ae2 <_ZN14SoftwareSerial9availableEv+0x2a>
    3ac6:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3aca:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	80 5c       	subi	r24, 0xC0	; 192
    3ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad4:	82 1b       	sub	r24, r18
    3ad6:	91 09       	sbc	r25, r1
    3ad8:	60 e4       	ldi	r22, 0x40	; 64
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <__divmodhi4>
    3ae0:	08 95       	ret
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	08 95       	ret

00003ae8 <_ZN14SoftwareSerial13stopListeningEv>:
    3ae8:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3aec:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3af0:	e8 17       	cp	r30, r24
    3af2:	f9 07       	cpc	r31, r25
    3af4:	69 f4       	brne	.+26     	; 0x3b10 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3af6:	a3 89       	ldd	r26, Z+19	; 0x13
    3af8:	b4 89       	ldd	r27, Z+20	; 0x14
    3afa:	9c 91       	ld	r25, X
    3afc:	85 89       	ldd	r24, Z+21	; 0x15
    3afe:	80 95       	com	r24
    3b00:	89 23       	and	r24, r25
    3b02:	8c 93       	st	X, r24
    3b04:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3b08:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	08 95       	ret
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	08 95       	ret

00003b14 <_ZN14SoftwareSerial6listenEv>:
    3b14:	cf 93       	push	r28
    3b16:	df 93       	push	r29
    3b18:	ec 01       	movw	r28, r24
    3b1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b1e:	89 2b       	or	r24, r25
    3b20:	f1 f0       	breq	.+60     	; 0x3b5e <_ZN14SoftwareSerial6listenEv+0x4a>
    3b22:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3b26:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3b2a:	c8 17       	cp	r28, r24
    3b2c:	d9 07       	cpc	r29, r25
    3b2e:	b9 f0       	breq	.+46     	; 0x3b5e <_ZN14SoftwareSerial6listenEv+0x4a>
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	11 f0       	breq	.+4      	; 0x3b38 <_ZN14SoftwareSerial6listenEv+0x24>
    3b34:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <_ZN14SoftwareSerial13stopListeningEv>
    3b38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b3a:	8e 7f       	andi	r24, 0xFE	; 254
    3b3c:	8e 8f       	std	Y+30, r24	; 0x1e
    3b3e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3b42:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3b46:	d0 93 ac 04 	sts	0x04AC, r29	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3b4a:	c0 93 ab 04 	sts	0x04AB, r28	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3b4e:	eb 89       	ldd	r30, Y+19	; 0x13
    3b50:	fc 89       	ldd	r31, Y+20	; 0x14
    3b52:	90 81       	ld	r25, Z
    3b54:	8d 89       	ldd	r24, Y+21	; 0x15
    3b56:	89 2b       	or	r24, r25
    3b58:	80 83       	st	Z, r24
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	01 c0       	rjmp	.+2      	; 0x3b60 <_ZN14SoftwareSerial6listenEv+0x4c>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <__vector_3>:
    3b66:	1f 92       	push	r1
    3b68:	0f 92       	push	r0
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	0f 92       	push	r0
    3b6e:	11 24       	eor	r1, r1
    3b70:	2f 93       	push	r18
    3b72:	3f 93       	push	r19
    3b74:	4f 93       	push	r20
    3b76:	5f 93       	push	r21
    3b78:	6f 93       	push	r22
    3b7a:	7f 93       	push	r23
    3b7c:	8f 93       	push	r24
    3b7e:	9f 93       	push	r25
    3b80:	af 93       	push	r26
    3b82:	bf 93       	push	r27
    3b84:	ef 93       	push	r30
    3b86:	ff 93       	push	r31
    3b88:	e0 91 ab 04 	lds	r30, 0x04AB	; 0x8004ab <_ZN14SoftwareSerial13active_objectE>
    3b8c:	f0 91 ac 04 	lds	r31, 0x04AC	; 0x8004ac <_ZN14SoftwareSerial13active_objectE+0x1>
    3b90:	30 97       	sbiw	r30, 0x00	; 0
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <__vector_3+0x30>
    3b94:	51 c0       	rjmp	.+162    	; 0x3c38 <__vector_3+0xd2>
    3b96:	96 8d       	ldd	r25, Z+30	; 0x1e
    3b98:	a6 85       	ldd	r26, Z+14	; 0x0e
    3b9a:	b7 85       	ldd	r27, Z+15	; 0x0f
    3b9c:	85 85       	ldd	r24, Z+13	; 0x0d
    3b9e:	91 ff       	sbrs	r25, 1
    3ba0:	04 c0       	rjmp	.+8      	; 0x3baa <__vector_3+0x44>
    3ba2:	9c 91       	ld	r25, X
    3ba4:	89 23       	and	r24, r25
    3ba6:	29 f4       	brne	.+10     	; 0x3bb2 <__vector_3+0x4c>
    3ba8:	47 c0       	rjmp	.+142    	; 0x3c38 <__vector_3+0xd2>
    3baa:	9c 91       	ld	r25, X
    3bac:	89 23       	and	r24, r25
    3bae:	09 f0       	breq	.+2      	; 0x3bb2 <__vector_3+0x4c>
    3bb0:	43 c0       	rjmp	.+134    	; 0x3c38 <__vector_3+0xd2>
    3bb2:	a3 89       	ldd	r26, Z+19	; 0x13
    3bb4:	b4 89       	ldd	r27, Z+20	; 0x14
    3bb6:	9c 91       	ld	r25, X
    3bb8:	85 89       	ldd	r24, Z+21	; 0x15
    3bba:	80 95       	com	r24
    3bbc:	89 23       	and	r24, r25
    3bbe:	8c 93       	st	X, r24
    3bc0:	86 89       	ldd	r24, Z+22	; 0x16
    3bc2:	97 89       	ldd	r25, Z+23	; 0x17
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <__vector_3+0x5e>
    3bc8:	60 8d       	ldd	r22, Z+24	; 0x18
    3bca:	71 8d       	ldd	r23, Z+25	; 0x19
    3bcc:	a6 85       	ldd	r26, Z+14	; 0x0e
    3bce:	b7 85       	ldd	r27, Z+15	; 0x0f
    3bd0:	55 85       	ldd	r21, Z+13	; 0x0d
    3bd2:	38 e0       	ldi	r19, 0x08	; 8
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <__vector_3+0x72>
    3bdc:	82 2f       	mov	r24, r18
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	95 95       	asr	r25
    3be2:	87 95       	ror	r24
    3be4:	28 2f       	mov	r18, r24
    3be6:	4c 91       	ld	r20, X
    3be8:	45 23       	and	r20, r21
    3bea:	09 f0       	breq	.+2      	; 0x3bee <__vector_3+0x88>
    3bec:	20 68       	ori	r18, 0x80	; 128
    3bee:	31 50       	subi	r19, 0x01	; 1
    3bf0:	91 f7       	brne	.-28     	; 0x3bd6 <__vector_3+0x70>
    3bf2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bf4:	81 fd       	sbrc	r24, 1
    3bf6:	20 95       	com	r18
    3bf8:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	01 96       	adiw	r24, 0x01	; 1
    3c00:	8f 73       	andi	r24, 0x3F	; 63
    3c02:	99 27       	eor	r25, r25
    3c04:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3c08:	38 17       	cp	r19, r24
    3c0a:	49 f0       	breq	.+18     	; 0x3c1e <__vector_3+0xb8>
    3c0c:	a0 91 6a 04 	lds	r26, 0x046A	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	a5 59       	subi	r26, 0x95	; 149
    3c14:	bb 4f       	sbci	r27, 0xFB	; 251
    3c16:	2c 93       	st	X, r18
    3c18:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3c1c:	03 c0       	rjmp	.+6      	; 0x3c24 <__vector_3+0xbe>
    3c1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c20:	81 60       	ori	r24, 0x01	; 1
    3c22:	86 8f       	std	Z+30, r24	; 0x1e
    3c24:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c26:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <__vector_3+0xc2>
    3c2c:	a3 89       	ldd	r26, Z+19	; 0x13
    3c2e:	b4 89       	ldd	r27, Z+20	; 0x14
    3c30:	9c 91       	ld	r25, X
    3c32:	85 89       	ldd	r24, Z+21	; 0x15
    3c34:	89 2b       	or	r24, r25
    3c36:	8c 93       	st	X, r24
    3c38:	ff 91       	pop	r31
    3c3a:	ef 91       	pop	r30
    3c3c:	bf 91       	pop	r27
    3c3e:	af 91       	pop	r26
    3c40:	9f 91       	pop	r25
    3c42:	8f 91       	pop	r24
    3c44:	7f 91       	pop	r23
    3c46:	6f 91       	pop	r22
    3c48:	5f 91       	pop	r21
    3c4a:	4f 91       	pop	r20
    3c4c:	3f 91       	pop	r19
    3c4e:	2f 91       	pop	r18
    3c50:	0f 90       	pop	r0
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	0f 90       	pop	r0
    3c56:	1f 90       	pop	r1
    3c58:	18 95       	reti

00003c5a <_ZN14SoftwareSerial5setTXEh>:
    3c5a:	1f 93       	push	r17
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	ec 01       	movw	r28, r24
    3c62:	16 2f       	mov	r17, r22
    3c64:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3c66:	66 95       	lsr	r22
    3c68:	61 70       	andi	r22, 0x01	; 1
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	68 27       	eor	r22, r24
    3c6e:	81 2f       	mov	r24, r17
    3c70:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
    3c74:	61 e0       	ldi	r22, 0x01	; 1
    3c76:	81 2f       	mov	r24, r17
    3c78:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <pinMode>
    3c7c:	81 2f       	mov	r24, r17
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	fc 01       	movw	r30, r24
    3c82:	e5 59       	subi	r30, 0x95	; 149
    3c84:	f9 4f       	sbci	r31, 0xF9	; 249
    3c86:	e4 91       	lpm	r30, Z
    3c88:	e8 8b       	std	Y+16, r30	; 0x10
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	e1 58       	subi	r30, 0x81	; 129
    3c8e:	f9 4f       	sbci	r31, 0xF9	; 249
    3c90:	e4 91       	lpm	r30, Z
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	ee 0f       	add	r30, r30
    3c96:	ff 1f       	adc	r31, r31
    3c98:	e3 56       	subi	r30, 0x63	; 99
    3c9a:	f9 4f       	sbci	r31, 0xF9	; 249
    3c9c:	85 91       	lpm	r24, Z+
    3c9e:	94 91       	lpm	r25, Z
    3ca0:	9a 8b       	std	Y+18, r25	; 0x12
    3ca2:	89 8b       	std	Y+17, r24	; 0x11
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	1f 91       	pop	r17
    3caa:	08 95       	ret

00003cac <_ZN14SoftwareSerial5setRXEh>:
    3cac:	1f 93       	push	r17
    3cae:	cf 93       	push	r28
    3cb0:	df 93       	push	r29
    3cb2:	ec 01       	movw	r28, r24
    3cb4:	16 2f       	mov	r17, r22
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	81 2f       	mov	r24, r17
    3cba:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <pinMode>
    3cbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cc0:	81 fd       	sbrc	r24, 1
    3cc2:	04 c0       	rjmp	.+8      	; 0x3ccc <_ZN14SoftwareSerial5setRXEh+0x20>
    3cc4:	61 e0       	ldi	r22, 0x01	; 1
    3cc6:	81 2f       	mov	r24, r17
    3cc8:	0e 94 a7 1b 	call	0x374e	; 0x374e <digitalWrite>
    3ccc:	1c 87       	std	Y+12, r17	; 0x0c
    3cce:	81 2f       	mov	r24, r17
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	e5 59       	subi	r30, 0x95	; 149
    3cd6:	f9 4f       	sbci	r31, 0xF9	; 249
    3cd8:	e4 91       	lpm	r30, Z
    3cda:	ed 87       	std	Y+13, r30	; 0x0d
    3cdc:	fc 01       	movw	r30, r24
    3cde:	e1 58       	subi	r30, 0x81	; 129
    3ce0:	f9 4f       	sbci	r31, 0xF9	; 249
    3ce2:	e4 91       	lpm	r30, Z
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	ee 0f       	add	r30, r30
    3ce8:	ff 1f       	adc	r31, r31
    3cea:	ed 56       	subi	r30, 0x6D	; 109
    3cec:	f9 4f       	sbci	r31, 0xF9	; 249
    3cee:	85 91       	lpm	r24, Z+
    3cf0:	94 91       	lpm	r25, Z
    3cf2:	9f 87       	std	Y+15, r25	; 0x0f
    3cf4:	8e 87       	std	Y+14, r24	; 0x0e
    3cf6:	df 91       	pop	r29
    3cf8:	cf 91       	pop	r28
    3cfa:	1f 91       	pop	r17
    3cfc:	08 95       	ret

00003cfe <_ZN14SoftwareSerialC1Ehhb>:
    3cfe:	1f 93       	push	r17
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	ec 01       	movw	r28, r24
    3d06:	16 2f       	mov	r17, r22
    3d08:	1b 82       	std	Y+3, r1	; 0x03
    3d0a:	1a 82       	std	Y+2, r1	; 0x02
    3d0c:	88 ee       	ldi	r24, 0xE8	; 232
    3d0e:	93 e0       	ldi	r25, 0x03	; 3
    3d10:	a0 e0       	ldi	r26, 0x00	; 0
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	8c 83       	std	Y+4, r24	; 0x04
    3d16:	9d 83       	std	Y+5, r25	; 0x05
    3d18:	ae 83       	std	Y+6, r26	; 0x06
    3d1a:	bf 83       	std	Y+7, r27	; 0x07
    3d1c:	85 eb       	ldi	r24, 0xB5	; 181
    3d1e:	91 e0       	ldi	r25, 0x01	; 1
    3d20:	99 83       	std	Y+1, r25	; 0x01
    3d22:	88 83       	st	Y, r24
    3d24:	1f 8a       	std	Y+23, r1	; 0x17
    3d26:	1e 8a       	std	Y+22, r1	; 0x16
    3d28:	19 8e       	std	Y+25, r1	; 0x19
    3d2a:	18 8e       	std	Y+24, r1	; 0x18
    3d2c:	1b 8e       	std	Y+27, r1	; 0x1b
    3d2e:	1a 8e       	std	Y+26, r1	; 0x1a
    3d30:	1d 8e       	std	Y+29, r1	; 0x1d
    3d32:	1c 8e       	std	Y+28, r1	; 0x1c
    3d34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d36:	8e 7f       	andi	r24, 0xFE	; 254
    3d38:	20 fb       	bst	r18, 0
    3d3a:	81 f9       	bld	r24, 1
    3d3c:	8e 8f       	std	Y+30, r24	; 0x1e
    3d3e:	64 2f       	mov	r22, r20
    3d40:	ce 01       	movw	r24, r28
    3d42:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_ZN14SoftwareSerial5setTXEh>
    3d46:	61 2f       	mov	r22, r17
    3d48:	ce 01       	movw	r24, r28
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	1f 91       	pop	r17
    3d50:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <_ZN14SoftwareSerial5setRXEh>

00003d54 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ec 01       	movw	r28, r24
    3d5a:	9a 01       	movw	r18, r20
    3d5c:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    3d5e:	1b 8e       	std	Y+27, r1	; 0x1b
    3d60:	1a 8e       	std	Y+26, r1	; 0x1a
    3d62:	19 8e       	std	Y+25, r1	; 0x19
    3d64:	18 8e       	std	Y+24, r1	; 0x18
    3d66:	1f 8a       	std	Y+23, r1	; 0x17
    3d68:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    3d6a:	60 e0       	ldi	r22, 0x00	; 0
    3d6c:	79 e0       	ldi	r23, 0x09	; 9
    3d6e:	8d e3       	ldi	r24, 0x3D	; 61
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__divmodsi4>
    3d76:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3d78:	24 30       	cpi	r18, 0x04	; 4
    3d7a:	31 05       	cpc	r19, r1
    3d7c:	18 f0       	brcs	.+6      	; 0x3d84 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    3d7e:	c9 01       	movw	r24, r18
    3d80:	03 97       	sbiw	r24, 0x03	; 3
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    3d88:	9d 8f       	std	Y+29, r25	; 0x1d
    3d8a:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    3d8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d8e:	66 31       	cpi	r22, 0x16	; 22
    3d90:	08 f0       	brcs	.+2      	; 0x3d94 <_ZN14SoftwareSerial5beginEl+0x40>
    3d92:	69 c0       	rjmp	.+210    	; 0x3e66 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3d94:	c9 01       	movw	r24, r18
    3d96:	96 95       	lsr	r25
    3d98:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3d9a:	84 31       	cpi	r24, 0x14	; 20
    3d9c:	91 05       	cpc	r25, r1
    3d9e:	10 f0       	brcs	.+4      	; 0x3da4 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    3da0:	43 97       	sbiw	r24, 0x13	; 19
    3da2:	02 c0       	rjmp	.+4      	; 0x3da8 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    3da8:	9f 8b       	std	Y+23, r25	; 0x17
    3daa:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3dac:	36 97       	sbiw	r30, 0x06	; 6
    3dae:	18 f0       	brcs	.+6      	; 0x3db6 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    3db0:	c9 01       	movw	r24, r18
    3db2:	05 97       	sbiw	r24, 0x05	; 5
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    3dba:	99 8f       	std	Y+25, r25	; 0x19
    3dbc:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3dbe:	c9 01       	movw	r24, r18
    3dc0:	88 0f       	add	r24, r24
    3dc2:	99 1f       	adc	r25, r25
    3dc4:	28 0f       	add	r18, r24
    3dc6:	39 1f       	adc	r19, r25
    3dc8:	36 95       	lsr	r19
    3dca:	27 95       	ror	r18
    3dcc:	36 95       	lsr	r19
    3dce:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3dd0:	2d 30       	cpi	r18, 0x0D	; 13
    3dd2:	31 05       	cpc	r19, r1
    3dd4:	18 f0       	brcs	.+6      	; 0x3ddc <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    3dd6:	2c 50       	subi	r18, 0x0C	; 12
    3dd8:	31 09       	sbc	r19, r1
    3dda:	02 c0       	rjmp	.+4      	; 0x3de0 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3ddc:	21 e0       	ldi	r18, 0x01	; 1
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3de0:	3b 8f       	std	Y+27, r19	; 0x1b
    3de2:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3de4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3de8:	68 30       	cpi	r22, 0x08	; 8
    3dea:	50 f0       	brcs	.+20     	; 0x3e00 <_ZN14SoftwareSerial5beginEl+0xac>
    3dec:	21 e0       	ldi	r18, 0x01	; 1
    3dee:	6e 30       	cpi	r22, 0x0E	; 14
    3df0:	08 f4       	brcc	.+2      	; 0x3df4 <_ZN14SoftwareSerial5beginEl+0xa0>
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	01 c0       	rjmp	.+2      	; 0x3dfa <_ZN14SoftwareSerial5beginEl+0xa6>
    3df8:	88 0f       	add	r24, r24
    3dfa:	2a 95       	dec	r18
    3dfc:	ea f7       	brpl	.-6      	; 0x3df8 <_ZN14SoftwareSerial5beginEl+0xa4>
    3dfe:	01 c0       	rjmp	.+2      	; 0x3e02 <_ZN14SoftwareSerial5beginEl+0xae>
    3e00:	84 e0       	ldi	r24, 0x04	; 4
    3e02:	89 2b       	or	r24, r25
    3e04:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    3e08:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e0a:	98 30       	cpi	r25, 0x08	; 8
    3e0c:	38 f0       	brcs	.+14     	; 0x3e1c <_ZN14SoftwareSerial5beginEl+0xc8>
    3e0e:	9e 30       	cpi	r25, 0x0E	; 14
    3e10:	40 f0       	brcs	.+16     	; 0x3e22 <_ZN14SoftwareSerial5beginEl+0xce>
    3e12:	96 31       	cpi	r25, 0x16	; 22
    3e14:	48 f0       	brcs	.+18     	; 0x3e28 <_ZN14SoftwareSerial5beginEl+0xd4>
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	08 c0       	rjmp	.+16     	; 0x3e2c <_ZN14SoftwareSerial5beginEl+0xd8>
    3e1c:	2d e6       	ldi	r18, 0x6D	; 109
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	05 c0       	rjmp	.+10     	; 0x3e2c <_ZN14SoftwareSerial5beginEl+0xd8>
    3e22:	2b e6       	ldi	r18, 0x6B	; 107
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <_ZN14SoftwareSerial5beginEl+0xd8>
    3e28:	2c e6       	ldi	r18, 0x6C	; 108
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	3c 8b       	std	Y+20, r19	; 0x14
    3e2e:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3e30:	98 30       	cpi	r25, 0x08	; 8
    3e32:	30 f4       	brcc	.+12     	; 0x3e40 <_ZN14SoftwareSerial5beginEl+0xec>
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	01 c0       	rjmp	.+2      	; 0x3e3a <_ZN14SoftwareSerial5beginEl+0xe6>
    3e38:	88 0f       	add	r24, r24
    3e3a:	9a 95       	dec	r25
    3e3c:	ea f7       	brpl	.-6      	; 0x3e38 <_ZN14SoftwareSerial5beginEl+0xe4>
    3e3e:	0e c0       	rjmp	.+28     	; 0x3e5c <_ZN14SoftwareSerial5beginEl+0x108>
    3e40:	29 2f       	mov	r18, r25
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	9e 30       	cpi	r25, 0x0E	; 14
    3e46:	18 f4       	brcc	.+6      	; 0x3e4e <_ZN14SoftwareSerial5beginEl+0xfa>
    3e48:	28 50       	subi	r18, 0x08	; 8
    3e4a:	31 09       	sbc	r19, r1
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <_ZN14SoftwareSerial5beginEl+0xfe>
    3e4e:	2e 50       	subi	r18, 0x0E	; 14
    3e50:	31 09       	sbc	r19, r1
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	01 c0       	rjmp	.+2      	; 0x3e58 <_ZN14SoftwareSerial5beginEl+0x104>
    3e56:	88 0f       	add	r24, r24
    3e58:	2a 95       	dec	r18
    3e5a:	ea f7       	brpl	.-6      	; 0x3e56 <_ZN14SoftwareSerial5beginEl+0x102>
    3e5c:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3e5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	f1 f7       	brne	.-4      	; 0x3e62 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3e66:	ce 01       	movw	r24, r28
}
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    3e6c:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <_ZN14SoftwareSerial6listenEv>

00003e70 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3e70:	08 95       	ret

00003e72 <__udivmodqi4>:
    3e72:	99 1b       	sub	r25, r25
    3e74:	79 e0       	ldi	r23, 0x09	; 9
    3e76:	04 c0       	rjmp	.+8      	; 0x3e80 <__udivmodqi4_ep>

00003e78 <__udivmodqi4_loop>:
    3e78:	99 1f       	adc	r25, r25
    3e7a:	96 17       	cp	r25, r22
    3e7c:	08 f0       	brcs	.+2      	; 0x3e80 <__udivmodqi4_ep>
    3e7e:	96 1b       	sub	r25, r22

00003e80 <__udivmodqi4_ep>:
    3e80:	88 1f       	adc	r24, r24
    3e82:	7a 95       	dec	r23
    3e84:	c9 f7       	brne	.-14     	; 0x3e78 <__udivmodqi4_loop>
    3e86:	80 95       	com	r24
    3e88:	08 95       	ret

00003e8a <__udivmodhi4>:
    3e8a:	aa 1b       	sub	r26, r26
    3e8c:	bb 1b       	sub	r27, r27
    3e8e:	51 e1       	ldi	r21, 0x11	; 17
    3e90:	07 c0       	rjmp	.+14     	; 0x3ea0 <__udivmodhi4_ep>

00003e92 <__udivmodhi4_loop>:
    3e92:	aa 1f       	adc	r26, r26
    3e94:	bb 1f       	adc	r27, r27
    3e96:	a6 17       	cp	r26, r22
    3e98:	b7 07       	cpc	r27, r23
    3e9a:	10 f0       	brcs	.+4      	; 0x3ea0 <__udivmodhi4_ep>
    3e9c:	a6 1b       	sub	r26, r22
    3e9e:	b7 0b       	sbc	r27, r23

00003ea0 <__udivmodhi4_ep>:
    3ea0:	88 1f       	adc	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	5a 95       	dec	r21
    3ea6:	a9 f7       	brne	.-22     	; 0x3e92 <__udivmodhi4_loop>
    3ea8:	80 95       	com	r24
    3eaa:	90 95       	com	r25
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	08 95       	ret

00003eb2 <__divmodhi4>:
    3eb2:	97 fb       	bst	r25, 7
    3eb4:	07 2e       	mov	r0, r23
    3eb6:	16 f4       	brtc	.+4      	; 0x3ebc <__divmodhi4+0xa>
    3eb8:	00 94       	com	r0
    3eba:	07 d0       	rcall	.+14     	; 0x3eca <__divmodhi4_neg1>
    3ebc:	77 fd       	sbrc	r23, 7
    3ebe:	09 d0       	rcall	.+18     	; 0x3ed2 <__divmodhi4_neg2>
    3ec0:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <__udivmodhi4>
    3ec4:	07 fc       	sbrc	r0, 7
    3ec6:	05 d0       	rcall	.+10     	; 0x3ed2 <__divmodhi4_neg2>
    3ec8:	3e f4       	brtc	.+14     	; 0x3ed8 <__divmodhi4_exit>

00003eca <__divmodhi4_neg1>:
    3eca:	90 95       	com	r25
    3ecc:	81 95       	neg	r24
    3ece:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed0:	08 95       	ret

00003ed2 <__divmodhi4_neg2>:
    3ed2:	70 95       	com	r23
    3ed4:	61 95       	neg	r22
    3ed6:	7f 4f       	sbci	r23, 0xFF	; 255

00003ed8 <__divmodhi4_exit>:
    3ed8:	08 95       	ret

00003eda <__udivmodsi4>:
    3eda:	a1 e2       	ldi	r26, 0x21	; 33
    3edc:	1a 2e       	mov	r1, r26
    3ede:	aa 1b       	sub	r26, r26
    3ee0:	bb 1b       	sub	r27, r27
    3ee2:	fd 01       	movw	r30, r26
    3ee4:	0d c0       	rjmp	.+26     	; 0x3f00 <__udivmodsi4_ep>

00003ee6 <__udivmodsi4_loop>:
    3ee6:	aa 1f       	adc	r26, r26
    3ee8:	bb 1f       	adc	r27, r27
    3eea:	ee 1f       	adc	r30, r30
    3eec:	ff 1f       	adc	r31, r31
    3eee:	a2 17       	cp	r26, r18
    3ef0:	b3 07       	cpc	r27, r19
    3ef2:	e4 07       	cpc	r30, r20
    3ef4:	f5 07       	cpc	r31, r21
    3ef6:	20 f0       	brcs	.+8      	; 0x3f00 <__udivmodsi4_ep>
    3ef8:	a2 1b       	sub	r26, r18
    3efa:	b3 0b       	sbc	r27, r19
    3efc:	e4 0b       	sbc	r30, r20
    3efe:	f5 0b       	sbc	r31, r21

00003f00 <__udivmodsi4_ep>:
    3f00:	66 1f       	adc	r22, r22
    3f02:	77 1f       	adc	r23, r23
    3f04:	88 1f       	adc	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	1a 94       	dec	r1
    3f0a:	69 f7       	brne	.-38     	; 0x3ee6 <__udivmodsi4_loop>
    3f0c:	60 95       	com	r22
    3f0e:	70 95       	com	r23
    3f10:	80 95       	com	r24
    3f12:	90 95       	com	r25
    3f14:	9b 01       	movw	r18, r22
    3f16:	ac 01       	movw	r20, r24
    3f18:	bd 01       	movw	r22, r26
    3f1a:	cf 01       	movw	r24, r30
    3f1c:	08 95       	ret

00003f1e <__divmodsi4>:
    3f1e:	05 2e       	mov	r0, r21
    3f20:	97 fb       	bst	r25, 7
    3f22:	1e f4       	brtc	.+6      	; 0x3f2a <__divmodsi4+0xc>
    3f24:	00 94       	com	r0
    3f26:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__negsi2>
    3f2a:	57 fd       	sbrc	r21, 7
    3f2c:	07 d0       	rcall	.+14     	; 0x3f3c <__divmodsi4_neg2>
    3f2e:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <__udivmodsi4>
    3f32:	07 fc       	sbrc	r0, 7
    3f34:	03 d0       	rcall	.+6      	; 0x3f3c <__divmodsi4_neg2>
    3f36:	4e f4       	brtc	.+18     	; 0x3f4a <__divmodsi4_exit>
    3f38:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <__negsi2>

00003f3c <__divmodsi4_neg2>:
    3f3c:	50 95       	com	r21
    3f3e:	40 95       	com	r20
    3f40:	30 95       	com	r19
    3f42:	21 95       	neg	r18
    3f44:	3f 4f       	sbci	r19, 0xFF	; 255
    3f46:	4f 4f       	sbci	r20, 0xFF	; 255
    3f48:	5f 4f       	sbci	r21, 0xFF	; 255

00003f4a <__divmodsi4_exit>:
    3f4a:	08 95       	ret

00003f4c <__negsi2>:
    3f4c:	90 95       	com	r25
    3f4e:	80 95       	com	r24
    3f50:	70 95       	com	r23
    3f52:	61 95       	neg	r22
    3f54:	7f 4f       	sbci	r23, 0xFF	; 255
    3f56:	8f 4f       	sbci	r24, 0xFF	; 255
    3f58:	9f 4f       	sbci	r25, 0xFF	; 255
    3f5a:	08 95       	ret

00003f5c <__tablejump2__>:
    3f5c:	ee 0f       	add	r30, r30
    3f5e:	ff 1f       	adc	r31, r31
    3f60:	05 90       	lpm	r0, Z+
    3f62:	f4 91       	lpm	r31, Z
    3f64:	e0 2d       	mov	r30, r0
    3f66:	09 94       	ijmp

00003f68 <malloc>:
    3f68:	0f 93       	push	r16
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	82 30       	cpi	r24, 0x02	; 2
    3f72:	91 05       	cpc	r25, r1
    3f74:	10 f4       	brcc	.+4      	; 0x3f7a <malloc+0x12>
    3f76:	82 e0       	ldi	r24, 0x02	; 2
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <__flp>
    3f7e:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <__flp+0x1>
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	a0 e0       	ldi	r26, 0x00	; 0
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	30 97       	sbiw	r30, 0x00	; 0
    3f8c:	19 f1       	breq	.+70     	; 0x3fd4 <malloc+0x6c>
    3f8e:	40 81       	ld	r20, Z
    3f90:	51 81       	ldd	r21, Z+1	; 0x01
    3f92:	02 81       	ldd	r16, Z+2	; 0x02
    3f94:	13 81       	ldd	r17, Z+3	; 0x03
    3f96:	48 17       	cp	r20, r24
    3f98:	59 07       	cpc	r21, r25
    3f9a:	c8 f0       	brcs	.+50     	; 0x3fce <malloc+0x66>
    3f9c:	84 17       	cp	r24, r20
    3f9e:	95 07       	cpc	r25, r21
    3fa0:	69 f4       	brne	.+26     	; 0x3fbc <malloc+0x54>
    3fa2:	10 97       	sbiw	r26, 0x00	; 0
    3fa4:	31 f0       	breq	.+12     	; 0x3fb2 <malloc+0x4a>
    3fa6:	12 96       	adiw	r26, 0x02	; 2
    3fa8:	0c 93       	st	X, r16
    3faa:	12 97       	sbiw	r26, 0x02	; 2
    3fac:	13 96       	adiw	r26, 0x03	; 3
    3fae:	1c 93       	st	X, r17
    3fb0:	27 c0       	rjmp	.+78     	; 0x4000 <malloc+0x98>
    3fb2:	00 93 af 04 	sts	0x04AF, r16	; 0x8004af <__flp>
    3fb6:	10 93 b0 04 	sts	0x04B0, r17	; 0x8004b0 <__flp+0x1>
    3fba:	22 c0       	rjmp	.+68     	; 0x4000 <malloc+0x98>
    3fbc:	21 15       	cp	r18, r1
    3fbe:	31 05       	cpc	r19, r1
    3fc0:	19 f0       	breq	.+6      	; 0x3fc8 <malloc+0x60>
    3fc2:	42 17       	cp	r20, r18
    3fc4:	53 07       	cpc	r21, r19
    3fc6:	18 f4       	brcc	.+6      	; 0x3fce <malloc+0x66>
    3fc8:	9a 01       	movw	r18, r20
    3fca:	bd 01       	movw	r22, r26
    3fcc:	ef 01       	movw	r28, r30
    3fce:	df 01       	movw	r26, r30
    3fd0:	f8 01       	movw	r30, r16
    3fd2:	db cf       	rjmp	.-74     	; 0x3f8a <malloc+0x22>
    3fd4:	21 15       	cp	r18, r1
    3fd6:	31 05       	cpc	r19, r1
    3fd8:	f9 f0       	breq	.+62     	; 0x4018 <malloc+0xb0>
    3fda:	28 1b       	sub	r18, r24
    3fdc:	39 0b       	sbc	r19, r25
    3fde:	24 30       	cpi	r18, 0x04	; 4
    3fe0:	31 05       	cpc	r19, r1
    3fe2:	80 f4       	brcc	.+32     	; 0x4004 <malloc+0x9c>
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe8:	61 15       	cp	r22, r1
    3fea:	71 05       	cpc	r23, r1
    3fec:	21 f0       	breq	.+8      	; 0x3ff6 <malloc+0x8e>
    3fee:	fb 01       	movw	r30, r22
    3ff0:	93 83       	std	Z+3, r25	; 0x03
    3ff2:	82 83       	std	Z+2, r24	; 0x02
    3ff4:	04 c0       	rjmp	.+8      	; 0x3ffe <malloc+0x96>
    3ff6:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <__flp+0x1>
    3ffa:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <__flp>
    3ffe:	fe 01       	movw	r30, r28
    4000:	32 96       	adiw	r30, 0x02	; 2
    4002:	44 c0       	rjmp	.+136    	; 0x408c <malloc+0x124>
    4004:	fe 01       	movw	r30, r28
    4006:	e2 0f       	add	r30, r18
    4008:	f3 1f       	adc	r31, r19
    400a:	81 93       	st	Z+, r24
    400c:	91 93       	st	Z+, r25
    400e:	22 50       	subi	r18, 0x02	; 2
    4010:	31 09       	sbc	r19, r1
    4012:	39 83       	std	Y+1, r19	; 0x01
    4014:	28 83       	st	Y, r18
    4016:	3a c0       	rjmp	.+116    	; 0x408c <malloc+0x124>
    4018:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <__brkval>
    401c:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <__brkval+0x1>
    4020:	23 2b       	or	r18, r19
    4022:	41 f4       	brne	.+16     	; 0x4034 <malloc+0xcc>
    4024:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4028:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    402c:	30 93 ae 04 	sts	0x04AE, r19	; 0x8004ae <__brkval+0x1>
    4030:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <__brkval>
    4034:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4038:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    403c:	21 15       	cp	r18, r1
    403e:	31 05       	cpc	r19, r1
    4040:	41 f4       	brne	.+16     	; 0x4052 <malloc+0xea>
    4042:	2d b7       	in	r18, 0x3d	; 61
    4044:	3e b7       	in	r19, 0x3e	; 62
    4046:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    404a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    404e:	24 1b       	sub	r18, r20
    4050:	35 0b       	sbc	r19, r21
    4052:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <__brkval>
    4056:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <__brkval+0x1>
    405a:	e2 17       	cp	r30, r18
    405c:	f3 07       	cpc	r31, r19
    405e:	a0 f4       	brcc	.+40     	; 0x4088 <malloc+0x120>
    4060:	2e 1b       	sub	r18, r30
    4062:	3f 0b       	sbc	r19, r31
    4064:	28 17       	cp	r18, r24
    4066:	39 07       	cpc	r19, r25
    4068:	78 f0       	brcs	.+30     	; 0x4088 <malloc+0x120>
    406a:	ac 01       	movw	r20, r24
    406c:	4e 5f       	subi	r20, 0xFE	; 254
    406e:	5f 4f       	sbci	r21, 0xFF	; 255
    4070:	24 17       	cp	r18, r20
    4072:	35 07       	cpc	r19, r21
    4074:	48 f0       	brcs	.+18     	; 0x4088 <malloc+0x120>
    4076:	4e 0f       	add	r20, r30
    4078:	5f 1f       	adc	r21, r31
    407a:	50 93 ae 04 	sts	0x04AE, r21	; 0x8004ae <__brkval+0x1>
    407e:	40 93 ad 04 	sts	0x04AD, r20	; 0x8004ad <__brkval>
    4082:	81 93       	st	Z+, r24
    4084:	91 93       	st	Z+, r25
    4086:	02 c0       	rjmp	.+4      	; 0x408c <malloc+0x124>
    4088:	e0 e0       	ldi	r30, 0x00	; 0
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	cf 01       	movw	r24, r30
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	08 95       	ret

00004098 <free>:
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	00 97       	sbiw	r24, 0x00	; 0
    409e:	09 f4       	brne	.+2      	; 0x40a2 <free+0xa>
    40a0:	81 c0       	rjmp	.+258    	; 0x41a4 <free+0x10c>
    40a2:	fc 01       	movw	r30, r24
    40a4:	32 97       	sbiw	r30, 0x02	; 2
    40a6:	13 82       	std	Z+3, r1	; 0x03
    40a8:	12 82       	std	Z+2, r1	; 0x02
    40aa:	a0 91 af 04 	lds	r26, 0x04AF	; 0x8004af <__flp>
    40ae:	b0 91 b0 04 	lds	r27, 0x04B0	; 0x8004b0 <__flp+0x1>
    40b2:	10 97       	sbiw	r26, 0x00	; 0
    40b4:	81 f4       	brne	.+32     	; 0x40d6 <free+0x3e>
    40b6:	20 81       	ld	r18, Z
    40b8:	31 81       	ldd	r19, Z+1	; 0x01
    40ba:	82 0f       	add	r24, r18
    40bc:	93 1f       	adc	r25, r19
    40be:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <__brkval>
    40c2:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <__brkval+0x1>
    40c6:	28 17       	cp	r18, r24
    40c8:	39 07       	cpc	r19, r25
    40ca:	51 f5       	brne	.+84     	; 0x4120 <free+0x88>
    40cc:	f0 93 ae 04 	sts	0x04AE, r31	; 0x8004ae <__brkval+0x1>
    40d0:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <__brkval>
    40d4:	67 c0       	rjmp	.+206    	; 0x41a4 <free+0x10c>
    40d6:	ed 01       	movw	r28, r26
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	ce 17       	cp	r28, r30
    40de:	df 07       	cpc	r29, r31
    40e0:	40 f4       	brcc	.+16     	; 0x40f2 <free+0x5a>
    40e2:	4a 81       	ldd	r20, Y+2	; 0x02
    40e4:	5b 81       	ldd	r21, Y+3	; 0x03
    40e6:	9e 01       	movw	r18, r28
    40e8:	41 15       	cp	r20, r1
    40ea:	51 05       	cpc	r21, r1
    40ec:	f1 f0       	breq	.+60     	; 0x412a <free+0x92>
    40ee:	ea 01       	movw	r28, r20
    40f0:	f5 cf       	rjmp	.-22     	; 0x40dc <free+0x44>
    40f2:	d3 83       	std	Z+3, r29	; 0x03
    40f4:	c2 83       	std	Z+2, r28	; 0x02
    40f6:	40 81       	ld	r20, Z
    40f8:	51 81       	ldd	r21, Z+1	; 0x01
    40fa:	84 0f       	add	r24, r20
    40fc:	95 1f       	adc	r25, r21
    40fe:	c8 17       	cp	r28, r24
    4100:	d9 07       	cpc	r29, r25
    4102:	59 f4       	brne	.+22     	; 0x411a <free+0x82>
    4104:	88 81       	ld	r24, Y
    4106:	99 81       	ldd	r25, Y+1	; 0x01
    4108:	84 0f       	add	r24, r20
    410a:	95 1f       	adc	r25, r21
    410c:	02 96       	adiw	r24, 0x02	; 2
    410e:	91 83       	std	Z+1, r25	; 0x01
    4110:	80 83       	st	Z, r24
    4112:	8a 81       	ldd	r24, Y+2	; 0x02
    4114:	9b 81       	ldd	r25, Y+3	; 0x03
    4116:	93 83       	std	Z+3, r25	; 0x03
    4118:	82 83       	std	Z+2, r24	; 0x02
    411a:	21 15       	cp	r18, r1
    411c:	31 05       	cpc	r19, r1
    411e:	29 f4       	brne	.+10     	; 0x412a <free+0x92>
    4120:	f0 93 b0 04 	sts	0x04B0, r31	; 0x8004b0 <__flp+0x1>
    4124:	e0 93 af 04 	sts	0x04AF, r30	; 0x8004af <__flp>
    4128:	3d c0       	rjmp	.+122    	; 0x41a4 <free+0x10c>
    412a:	e9 01       	movw	r28, r18
    412c:	fb 83       	std	Y+3, r31	; 0x03
    412e:	ea 83       	std	Y+2, r30	; 0x02
    4130:	49 91       	ld	r20, Y+
    4132:	59 91       	ld	r21, Y+
    4134:	c4 0f       	add	r28, r20
    4136:	d5 1f       	adc	r29, r21
    4138:	ec 17       	cp	r30, r28
    413a:	fd 07       	cpc	r31, r29
    413c:	61 f4       	brne	.+24     	; 0x4156 <free+0xbe>
    413e:	80 81       	ld	r24, Z
    4140:	91 81       	ldd	r25, Z+1	; 0x01
    4142:	84 0f       	add	r24, r20
    4144:	95 1f       	adc	r25, r21
    4146:	02 96       	adiw	r24, 0x02	; 2
    4148:	e9 01       	movw	r28, r18
    414a:	99 83       	std	Y+1, r25	; 0x01
    414c:	88 83       	st	Y, r24
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	9b 83       	std	Y+3, r25	; 0x03
    4154:	8a 83       	std	Y+2, r24	; 0x02
    4156:	e0 e0       	ldi	r30, 0x00	; 0
    4158:	f0 e0       	ldi	r31, 0x00	; 0
    415a:	12 96       	adiw	r26, 0x02	; 2
    415c:	8d 91       	ld	r24, X+
    415e:	9c 91       	ld	r25, X
    4160:	13 97       	sbiw	r26, 0x03	; 3
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	19 f0       	breq	.+6      	; 0x416c <free+0xd4>
    4166:	fd 01       	movw	r30, r26
    4168:	dc 01       	movw	r26, r24
    416a:	f7 cf       	rjmp	.-18     	; 0x415a <free+0xc2>
    416c:	8d 91       	ld	r24, X+
    416e:	9c 91       	ld	r25, X
    4170:	11 97       	sbiw	r26, 0x01	; 1
    4172:	9d 01       	movw	r18, r26
    4174:	2e 5f       	subi	r18, 0xFE	; 254
    4176:	3f 4f       	sbci	r19, 0xFF	; 255
    4178:	82 0f       	add	r24, r18
    417a:	93 1f       	adc	r25, r19
    417c:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <__brkval>
    4180:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <__brkval+0x1>
    4184:	28 17       	cp	r18, r24
    4186:	39 07       	cpc	r19, r25
    4188:	69 f4       	brne	.+26     	; 0x41a4 <free+0x10c>
    418a:	30 97       	sbiw	r30, 0x00	; 0
    418c:	29 f4       	brne	.+10     	; 0x4198 <free+0x100>
    418e:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <__flp+0x1>
    4192:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <__flp>
    4196:	02 c0       	rjmp	.+4      	; 0x419c <free+0x104>
    4198:	13 82       	std	Z+3, r1	; 0x03
    419a:	12 82       	std	Z+2, r1	; 0x02
    419c:	b0 93 ae 04 	sts	0x04AE, r27	; 0x8004ae <__brkval+0x1>
    41a0:	a0 93 ad 04 	sts	0x04AD, r26	; 0x8004ad <__brkval>
    41a4:	df 91       	pop	r29
    41a6:	cf 91       	pop	r28
    41a8:	08 95       	ret

000041aa <realloc>:
    41aa:	a0 e0       	ldi	r26, 0x00	; 0
    41ac:	b0 e0       	ldi	r27, 0x00	; 0
    41ae:	eb ed       	ldi	r30, 0xDB	; 219
    41b0:	f0 e2       	ldi	r31, 0x20	; 32
    41b2:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__prologue_saves__+0x8>
    41b6:	ec 01       	movw	r28, r24
    41b8:	00 97       	sbiw	r24, 0x00	; 0
    41ba:	21 f4       	brne	.+8      	; 0x41c4 <realloc+0x1a>
    41bc:	cb 01       	movw	r24, r22
    41be:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <malloc>
    41c2:	b4 c0       	rjmp	.+360    	; 0x432c <realloc+0x182>
    41c4:	fc 01       	movw	r30, r24
    41c6:	e6 0f       	add	r30, r22
    41c8:	f7 1f       	adc	r31, r23
    41ca:	9c 01       	movw	r18, r24
    41cc:	22 50       	subi	r18, 0x02	; 2
    41ce:	31 09       	sbc	r19, r1
    41d0:	e2 17       	cp	r30, r18
    41d2:	f3 07       	cpc	r31, r19
    41d4:	08 f4       	brcc	.+2      	; 0x41d8 <realloc+0x2e>
    41d6:	a8 c0       	rjmp	.+336    	; 0x4328 <realloc+0x17e>
    41d8:	d9 01       	movw	r26, r18
    41da:	0d 91       	ld	r16, X+
    41dc:	1c 91       	ld	r17, X
    41de:	11 97       	sbiw	r26, 0x01	; 1
    41e0:	06 17       	cp	r16, r22
    41e2:	17 07       	cpc	r17, r23
    41e4:	b0 f0       	brcs	.+44     	; 0x4212 <realloc+0x68>
    41e6:	05 30       	cpi	r16, 0x05	; 5
    41e8:	11 05       	cpc	r17, r1
    41ea:	08 f4       	brcc	.+2      	; 0x41ee <realloc+0x44>
    41ec:	9b c0       	rjmp	.+310    	; 0x4324 <realloc+0x17a>
    41ee:	c8 01       	movw	r24, r16
    41f0:	04 97       	sbiw	r24, 0x04	; 4
    41f2:	86 17       	cp	r24, r22
    41f4:	97 07       	cpc	r25, r23
    41f6:	08 f4       	brcc	.+2      	; 0x41fa <realloc+0x50>
    41f8:	95 c0       	rjmp	.+298    	; 0x4324 <realloc+0x17a>
    41fa:	02 50       	subi	r16, 0x02	; 2
    41fc:	11 09       	sbc	r17, r1
    41fe:	06 1b       	sub	r16, r22
    4200:	17 0b       	sbc	r17, r23
    4202:	01 93       	st	Z+, r16
    4204:	11 93       	st	Z+, r17
    4206:	6d 93       	st	X+, r22
    4208:	7c 93       	st	X, r23
    420a:	cf 01       	movw	r24, r30
    420c:	0e 94 4c 20 	call	0x4098	; 0x4098 <free>
    4210:	89 c0       	rjmp	.+274    	; 0x4324 <realloc+0x17a>
    4212:	5b 01       	movw	r10, r22
    4214:	a0 1a       	sub	r10, r16
    4216:	b1 0a       	sbc	r11, r17
    4218:	4c 01       	movw	r8, r24
    421a:	80 0e       	add	r8, r16
    421c:	91 1e       	adc	r9, r17
    421e:	a0 91 af 04 	lds	r26, 0x04AF	; 0x8004af <__flp>
    4222:	b0 91 b0 04 	lds	r27, 0x04B0	; 0x8004b0 <__flp+0x1>
    4226:	61 2c       	mov	r6, r1
    4228:	71 2c       	mov	r7, r1
    422a:	e1 2c       	mov	r14, r1
    422c:	f1 2c       	mov	r15, r1
    422e:	10 97       	sbiw	r26, 0x00	; 0
    4230:	09 f4       	brne	.+2      	; 0x4234 <realloc+0x8a>
    4232:	46 c0       	rjmp	.+140    	; 0x42c0 <realloc+0x116>
    4234:	8d 91       	ld	r24, X+
    4236:	9c 91       	ld	r25, X
    4238:	11 97       	sbiw	r26, 0x01	; 1
    423a:	a8 15       	cp	r26, r8
    423c:	b9 05       	cpc	r27, r9
    423e:	b1 f5       	brne	.+108    	; 0x42ac <realloc+0x102>
    4240:	6c 01       	movw	r12, r24
    4242:	42 e0       	ldi	r20, 0x02	; 2
    4244:	c4 0e       	add	r12, r20
    4246:	d1 1c       	adc	r13, r1
    4248:	ca 14       	cp	r12, r10
    424a:	db 04       	cpc	r13, r11
    424c:	78 f1       	brcs	.+94     	; 0x42ac <realloc+0x102>
    424e:	4c 01       	movw	r8, r24
    4250:	8a 18       	sub	r8, r10
    4252:	9b 08       	sbc	r9, r11
    4254:	64 01       	movw	r12, r8
    4256:	42 e0       	ldi	r20, 0x02	; 2
    4258:	c4 0e       	add	r12, r20
    425a:	d1 1c       	adc	r13, r1
    425c:	12 96       	adiw	r26, 0x02	; 2
    425e:	bc 90       	ld	r11, X
    4260:	12 97       	sbiw	r26, 0x02	; 2
    4262:	13 96       	adiw	r26, 0x03	; 3
    4264:	ac 91       	ld	r26, X
    4266:	b5 e0       	ldi	r27, 0x05	; 5
    4268:	cb 16       	cp	r12, r27
    426a:	d1 04       	cpc	r13, r1
    426c:	40 f0       	brcs	.+16     	; 0x427e <realloc+0xd4>
    426e:	b2 82       	std	Z+2, r11	; 0x02
    4270:	a3 83       	std	Z+3, r26	; 0x03
    4272:	91 82       	std	Z+1, r9	; 0x01
    4274:	80 82       	st	Z, r8
    4276:	d9 01       	movw	r26, r18
    4278:	6d 93       	st	X+, r22
    427a:	7c 93       	st	X, r23
    427c:	09 c0       	rjmp	.+18     	; 0x4290 <realloc+0xe6>
    427e:	0e 5f       	subi	r16, 0xFE	; 254
    4280:	1f 4f       	sbci	r17, 0xFF	; 255
    4282:	80 0f       	add	r24, r16
    4284:	91 1f       	adc	r25, r17
    4286:	f9 01       	movw	r30, r18
    4288:	91 83       	std	Z+1, r25	; 0x01
    428a:	80 83       	st	Z, r24
    428c:	eb 2d       	mov	r30, r11
    428e:	fa 2f       	mov	r31, r26
    4290:	e1 14       	cp	r14, r1
    4292:	f1 04       	cpc	r15, r1
    4294:	31 f0       	breq	.+12     	; 0x42a2 <realloc+0xf8>
    4296:	d7 01       	movw	r26, r14
    4298:	13 96       	adiw	r26, 0x03	; 3
    429a:	fc 93       	st	X, r31
    429c:	ee 93       	st	-X, r30
    429e:	12 97       	sbiw	r26, 0x02	; 2
    42a0:	41 c0       	rjmp	.+130    	; 0x4324 <realloc+0x17a>
    42a2:	f0 93 b0 04 	sts	0x04B0, r31	; 0x8004b0 <__flp+0x1>
    42a6:	e0 93 af 04 	sts	0x04AF, r30	; 0x8004af <__flp>
    42aa:	3c c0       	rjmp	.+120    	; 0x4324 <realloc+0x17a>
    42ac:	68 16       	cp	r6, r24
    42ae:	79 06       	cpc	r7, r25
    42b0:	08 f4       	brcc	.+2      	; 0x42b4 <realloc+0x10a>
    42b2:	3c 01       	movw	r6, r24
    42b4:	7d 01       	movw	r14, r26
    42b6:	12 96       	adiw	r26, 0x02	; 2
    42b8:	0d 90       	ld	r0, X+
    42ba:	bc 91       	ld	r27, X
    42bc:	a0 2d       	mov	r26, r0
    42be:	b7 cf       	rjmp	.-146    	; 0x422e <realloc+0x84>
    42c0:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <__brkval>
    42c4:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <__brkval+0x1>
    42c8:	88 16       	cp	r8, r24
    42ca:	99 06       	cpc	r9, r25
    42cc:	e1 f4       	brne	.+56     	; 0x4306 <realloc+0x15c>
    42ce:	66 16       	cp	r6, r22
    42d0:	77 06       	cpc	r7, r23
    42d2:	c8 f4       	brcc	.+50     	; 0x4306 <realloc+0x15c>
    42d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    42d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    42dc:	00 97       	sbiw	r24, 0x00	; 0
    42de:	41 f4       	brne	.+16     	; 0x42f0 <realloc+0x146>
    42e0:	8d b7       	in	r24, 0x3d	; 61
    42e2:	9e b7       	in	r25, 0x3e	; 62
    42e4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    42e8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    42ec:	84 1b       	sub	r24, r20
    42ee:	95 0b       	sbc	r25, r21
    42f0:	e8 17       	cp	r30, r24
    42f2:	f9 07       	cpc	r31, r25
    42f4:	c8 f4       	brcc	.+50     	; 0x4328 <realloc+0x17e>
    42f6:	f0 93 ae 04 	sts	0x04AE, r31	; 0x8004ae <__brkval+0x1>
    42fa:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <__brkval>
    42fe:	f9 01       	movw	r30, r18
    4300:	71 83       	std	Z+1, r23	; 0x01
    4302:	60 83       	st	Z, r22
    4304:	0f c0       	rjmp	.+30     	; 0x4324 <realloc+0x17a>
    4306:	cb 01       	movw	r24, r22
    4308:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <malloc>
    430c:	7c 01       	movw	r14, r24
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	59 f0       	breq	.+22     	; 0x4328 <realloc+0x17e>
    4312:	a8 01       	movw	r20, r16
    4314:	be 01       	movw	r22, r28
    4316:	0e 94 e5 21 	call	0x43ca	; 0x43ca <memcpy>
    431a:	ce 01       	movw	r24, r28
    431c:	0e 94 4c 20 	call	0x4098	; 0x4098 <free>
    4320:	c7 01       	movw	r24, r14
    4322:	04 c0       	rjmp	.+8      	; 0x432c <realloc+0x182>
    4324:	ce 01       	movw	r24, r28
    4326:	02 c0       	rjmp	.+4      	; 0x432c <realloc+0x182>
    4328:	80 e0       	ldi	r24, 0x00	; 0
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	ee e0       	ldi	r30, 0x0E	; 14
    4332:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <__epilogue_restores__+0x8>

00004336 <atoi>:
    4336:	fc 01       	movw	r30, r24
    4338:	88 27       	eor	r24, r24
    433a:	99 27       	eor	r25, r25
    433c:	e8 94       	clt
    433e:	21 91       	ld	r18, Z+
    4340:	20 32       	cpi	r18, 0x20	; 32
    4342:	e9 f3       	breq	.-6      	; 0x433e <atoi+0x8>
    4344:	29 30       	cpi	r18, 0x09	; 9
    4346:	10 f0       	brcs	.+4      	; 0x434c <atoi+0x16>
    4348:	2e 30       	cpi	r18, 0x0E	; 14
    434a:	c8 f3       	brcs	.-14     	; 0x433e <atoi+0x8>
    434c:	2b 32       	cpi	r18, 0x2B	; 43
    434e:	41 f0       	breq	.+16     	; 0x4360 <atoi+0x2a>
    4350:	2d 32       	cpi	r18, 0x2D	; 45
    4352:	39 f4       	brne	.+14     	; 0x4362 <atoi+0x2c>
    4354:	68 94       	set
    4356:	04 c0       	rjmp	.+8      	; 0x4360 <atoi+0x2a>
    4358:	0e 94 0b 22 	call	0x4416	; 0x4416 <__mulhi_const_10>
    435c:	82 0f       	add	r24, r18
    435e:	91 1d       	adc	r25, r1
    4360:	21 91       	ld	r18, Z+
    4362:	20 53       	subi	r18, 0x30	; 48
    4364:	2a 30       	cpi	r18, 0x0A	; 10
    4366:	c0 f3       	brcs	.-16     	; 0x4358 <atoi+0x22>
    4368:	1e f4       	brtc	.+6      	; 0x4370 <atoi+0x3a>
    436a:	90 95       	com	r25
    436c:	81 95       	neg	r24
    436e:	9f 4f       	sbci	r25, 0xFF	; 255
    4370:	08 95       	ret

00004372 <strcmp_P>:
    4372:	fb 01       	movw	r30, r22
    4374:	dc 01       	movw	r26, r24
    4376:	8d 91       	ld	r24, X+
    4378:	05 90       	lpm	r0, Z+
    437a:	80 19       	sub	r24, r0
    437c:	01 10       	cpse	r0, r1
    437e:	d9 f3       	breq	.-10     	; 0x4376 <strcmp_P+0x4>
    4380:	99 0b       	sbc	r25, r25
    4382:	08 95       	ret

00004384 <__strlen_P>:
    4384:	fc 01       	movw	r30, r24
    4386:	05 90       	lpm	r0, Z+
    4388:	00 20       	and	r0, r0
    438a:	e9 f7       	brne	.-6      	; 0x4386 <__strlen_P+0x2>
    438c:	80 95       	com	r24
    438e:	90 95       	com	r25
    4390:	8e 0f       	add	r24, r30
    4392:	9f 1f       	adc	r25, r31
    4394:	08 95       	ret

00004396 <strstr_P>:
    4396:	fb 01       	movw	r30, r22
    4398:	55 91       	lpm	r21, Z+
    439a:	55 23       	and	r21, r21
    439c:	a9 f0       	breq	.+42     	; 0x43c8 <strstr_P+0x32>
    439e:	bf 01       	movw	r22, r30
    43a0:	dc 01       	movw	r26, r24
    43a2:	4d 91       	ld	r20, X+
    43a4:	45 17       	cp	r20, r21
    43a6:	41 11       	cpse	r20, r1
    43a8:	e1 f7       	brne	.-8      	; 0x43a2 <strstr_P+0xc>
    43aa:	59 f4       	brne	.+22     	; 0x43c2 <strstr_P+0x2c>
    43ac:	cd 01       	movw	r24, r26
    43ae:	05 90       	lpm	r0, Z+
    43b0:	00 20       	and	r0, r0
    43b2:	49 f0       	breq	.+18     	; 0x43c6 <strstr_P+0x30>
    43b4:	4d 91       	ld	r20, X+
    43b6:	40 15       	cp	r20, r0
    43b8:	41 11       	cpse	r20, r1
    43ba:	c9 f3       	breq	.-14     	; 0x43ae <strstr_P+0x18>
    43bc:	fb 01       	movw	r30, r22
    43be:	41 11       	cpse	r20, r1
    43c0:	ef cf       	rjmp	.-34     	; 0x43a0 <strstr_P+0xa>
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	08 95       	ret

000043ca <memcpy>:
    43ca:	fb 01       	movw	r30, r22
    43cc:	dc 01       	movw	r26, r24
    43ce:	02 c0       	rjmp	.+4      	; 0x43d4 <memcpy+0xa>
    43d0:	01 90       	ld	r0, Z+
    43d2:	0d 92       	st	X+, r0
    43d4:	41 50       	subi	r20, 0x01	; 1
    43d6:	50 40       	sbci	r21, 0x00	; 0
    43d8:	d8 f7       	brcc	.-10     	; 0x43d0 <memcpy+0x6>
    43da:	08 95       	ret

000043dc <strchr>:
    43dc:	fc 01       	movw	r30, r24
    43de:	81 91       	ld	r24, Z+
    43e0:	86 17       	cp	r24, r22
    43e2:	21 f0       	breq	.+8      	; 0x43ec <strchr+0x10>
    43e4:	88 23       	and	r24, r24
    43e6:	d9 f7       	brne	.-10     	; 0x43de <strchr+0x2>
    43e8:	99 27       	eor	r25, r25
    43ea:	08 95       	ret
    43ec:	31 97       	sbiw	r30, 0x01	; 1
    43ee:	cf 01       	movw	r24, r30
    43f0:	08 95       	ret

000043f2 <strcpy>:
    43f2:	fb 01       	movw	r30, r22
    43f4:	dc 01       	movw	r26, r24
    43f6:	01 90       	ld	r0, Z+
    43f8:	0d 92       	st	X+, r0
    43fa:	00 20       	and	r0, r0
    43fc:	e1 f7       	brne	.-8      	; 0x43f6 <strcpy+0x4>
    43fe:	08 95       	ret

00004400 <__itoa_ncheck>:
    4400:	bb 27       	eor	r27, r27
    4402:	4a 30       	cpi	r20, 0x0A	; 10
    4404:	31 f4       	brne	.+12     	; 0x4412 <__itoa_ncheck+0x12>
    4406:	99 23       	and	r25, r25
    4408:	22 f4       	brpl	.+8      	; 0x4412 <__itoa_ncheck+0x12>
    440a:	bd e2       	ldi	r27, 0x2D	; 45
    440c:	90 95       	com	r25
    440e:	81 95       	neg	r24
    4410:	9f 4f       	sbci	r25, 0xFF	; 255
    4412:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__utoa_common>

00004416 <__mulhi_const_10>:
    4416:	7a e0       	ldi	r23, 0x0A	; 10
    4418:	97 9f       	mul	r25, r23
    441a:	90 2d       	mov	r25, r0
    441c:	87 9f       	mul	r24, r23
    441e:	80 2d       	mov	r24, r0
    4420:	91 0d       	add	r25, r1
    4422:	11 24       	eor	r1, r1
    4424:	08 95       	ret

00004426 <__utoa_ncheck>:
    4426:	bb 27       	eor	r27, r27

00004428 <__utoa_common>:
    4428:	fb 01       	movw	r30, r22
    442a:	55 27       	eor	r21, r21
    442c:	aa 27       	eor	r26, r26
    442e:	88 0f       	add	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	aa 1f       	adc	r26, r26
    4434:	a4 17       	cp	r26, r20
    4436:	10 f0       	brcs	.+4      	; 0x443c <__utoa_common+0x14>
    4438:	a4 1b       	sub	r26, r20
    443a:	83 95       	inc	r24
    443c:	50 51       	subi	r21, 0x10	; 16
    443e:	b9 f7       	brne	.-18     	; 0x442e <__utoa_common+0x6>
    4440:	a0 5d       	subi	r26, 0xD0	; 208
    4442:	aa 33       	cpi	r26, 0x3A	; 58
    4444:	08 f0       	brcs	.+2      	; 0x4448 <__utoa_common+0x20>
    4446:	a9 5d       	subi	r26, 0xD9	; 217
    4448:	a1 93       	st	Z+, r26
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	79 f7       	brne	.-34     	; 0x442c <__utoa_common+0x4>
    444e:	b1 11       	cpse	r27, r1
    4450:	b1 93       	st	Z+, r27
    4452:	11 92       	st	Z+, r1
    4454:	cb 01       	movw	r24, r22
    4456:	0c 94 2d 22 	jmp	0x445a	; 0x445a <strrev>

0000445a <strrev>:
    445a:	dc 01       	movw	r26, r24
    445c:	fc 01       	movw	r30, r24
    445e:	67 2f       	mov	r22, r23
    4460:	71 91       	ld	r23, Z+
    4462:	77 23       	and	r23, r23
    4464:	e1 f7       	brne	.-8      	; 0x445e <strrev+0x4>
    4466:	32 97       	sbiw	r30, 0x02	; 2
    4468:	04 c0       	rjmp	.+8      	; 0x4472 <strrev+0x18>
    446a:	7c 91       	ld	r23, X
    446c:	6d 93       	st	X+, r22
    446e:	70 83       	st	Z, r23
    4470:	62 91       	ld	r22, -Z
    4472:	ae 17       	cp	r26, r30
    4474:	bf 07       	cpc	r27, r31
    4476:	c8 f3       	brcs	.-14     	; 0x446a <strrev+0x10>
    4478:	08 95       	ret

0000447a <__prologue_saves__>:
    447a:	2f 92       	push	r2
    447c:	3f 92       	push	r3
    447e:	4f 92       	push	r4
    4480:	5f 92       	push	r5
    4482:	6f 92       	push	r6
    4484:	7f 92       	push	r7
    4486:	8f 92       	push	r8
    4488:	9f 92       	push	r9
    448a:	af 92       	push	r10
    448c:	bf 92       	push	r11
    448e:	cf 92       	push	r12
    4490:	df 92       	push	r13
    4492:	ef 92       	push	r14
    4494:	ff 92       	push	r15
    4496:	0f 93       	push	r16
    4498:	1f 93       	push	r17
    449a:	cf 93       	push	r28
    449c:	df 93       	push	r29
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
    44a2:	ca 1b       	sub	r28, r26
    44a4:	db 0b       	sbc	r29, r27
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	09 94       	ijmp

000044b2 <__epilogue_restores__>:
    44b2:	2a 88       	ldd	r2, Y+18	; 0x12
    44b4:	39 88       	ldd	r3, Y+17	; 0x11
    44b6:	48 88       	ldd	r4, Y+16	; 0x10
    44b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    44ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    44bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    44be:	8c 84       	ldd	r8, Y+12	; 0x0c
    44c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    44c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    44c4:	b9 84       	ldd	r11, Y+9	; 0x09
    44c6:	c8 84       	ldd	r12, Y+8	; 0x08
    44c8:	df 80       	ldd	r13, Y+7	; 0x07
    44ca:	ee 80       	ldd	r14, Y+6	; 0x06
    44cc:	fd 80       	ldd	r15, Y+5	; 0x05
    44ce:	0c 81       	ldd	r16, Y+4	; 0x04
    44d0:	1b 81       	ldd	r17, Y+3	; 0x03
    44d2:	aa 81       	ldd	r26, Y+2	; 0x02
    44d4:	b9 81       	ldd	r27, Y+1	; 0x01
    44d6:	ce 0f       	add	r28, r30
    44d8:	d1 1d       	adc	r29, r1
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	f8 94       	cli
    44de:	de bf       	out	0x3e, r29	; 62
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	ed 01       	movw	r28, r26
    44e6:	08 95       	ret

000044e8 <__do_global_dtors>:
    44e8:	13 e0       	ldi	r17, 0x03	; 3
    44ea:	cc e5       	ldi	r28, 0x5C	; 92
    44ec:	d3 e0       	ldi	r29, 0x03	; 3
    44ee:	04 c0       	rjmp	.+8      	; 0x44f8 <__do_global_dtors+0x10>
    44f0:	fe 01       	movw	r30, r28
    44f2:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__tablejump2__>
    44f6:	21 96       	adiw	r28, 0x01	; 1
    44f8:	cd 35       	cpi	r28, 0x5D	; 93
    44fa:	d1 07       	cpc	r29, r17
    44fc:	c9 f7       	brne	.-14     	; 0x44f0 <__do_global_dtors+0x8>
    44fe:	f8 94       	cli

00004500 <__stop_program>:
    4500:	ff cf       	rjmp	.-2      	; 0x4500 <__stop_program>
